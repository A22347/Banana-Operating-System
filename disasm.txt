
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c9 25 02 00       	call   c00225ee <_init>
c0000025:	c3                   	ret    
c0000026:	bb 72 32 02 c0       	mov    ebx,0xc0023272
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 80 32 02 c0    	cmp    ebx,0xc0023280
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 75 02 c0       	mov    eax,0xc0027538
c0000049:	3d 38 75 02 c0       	cmp    eax,0xc0027538
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 75 02 c0       	push   0xc0027538
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 75 02 c0       	mov    eax,0xc0027538
c0000075:	2d 38 75 02 c0       	sub    eax,0xc0027538
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 75 02 c0       	push   0xc0027538
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c0 76 02 c0 00 	cmp    BYTE PTR ds:0xc00276c0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 88 32 02 c0       	mov    ebx,0xc0023288
c00000bb:	81 eb 84 32 02 c0    	sub    ebx,0xc0023284
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 84 32 02 c0       	mov    esi,0xc0023284
c00000ca:	a1 c4 76 02 c0       	mov    eax,ds:0xc00276c4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c4 76 02 c0       	mov    ds:0xc00276c4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c4 76 02 c0       	mov    eax,ds:0xc00276c4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 75 02 c0       	push   0xc0027538
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 c8 76 02 c0       	push   0xc00276c8
c000012c:	68 38 75 02 c0       	push   0xc0027538
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 04 7a 01 00       	call   c0017cdc <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 30 c7 00 00       	call   c000ca20 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 e2 79 01 00       	call   c0017cdc <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 ab 7e 01 00       	call   c00181c4 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 ee 84 01 00       	call   c0018810 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 10 7b 02 c0 	lgdtd  ds:0xc0027b10
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 fe e4 00 00       	call   c000ea15 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 e0 76 02 c0       	mov    ds:0xc00276e0,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 e0 76 02 c0    	mov    DWORD PTR ds:0xc00276e0,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d e0 76 02 c0    	mov    ebx,DWORD PTR ds:0xc00276e0
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 a0 32 02 c0 02 	test   BYTE PTR [edx-0x3ffdcd60],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 a0 32 02 c0 01 	test   BYTE PTR [edx-0x3ffdcd60],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 a0 32 02 c0 08 	test   BYTE PTR [edx-0x3ffdcd60],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 a0 32 02 c0 04 	test   BYTE PTR [ebx-0x3ffdcd60],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 a0 32 02 c0 01 	test   BYTE PTR [edx-0x3ffdcd60],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 00 77 02 c0    	mov    ecx,DWORD PTR ds:0xc0027700
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 00 77 02 c0    	mov    DWORD PTR ds:0xc0027700,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 04 77 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd88fc]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 04 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd88fc],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 00 77 02 c0    	mov    DWORD PTR ds:0xc0027700,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 2c 77 02 c0    	cmp    DWORD PTR ds:0xc002772c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 3c 77 02 c0    	mov    ecx,DWORD PTR ds:0xc002773c
c0000d6c:	c7 42 0c 34 77 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027734
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 3c 77 02 c0    	mov    DWORD PTR ds:0xc002773c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 2c 77 02 c0    	mov    DWORD PTR ds:0xc002772c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 00 77 02 c0 02 	test   BYTE PTR ds:0xc0027700,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 00 77 02 c0    	mov    edi,DWORD PTR ds:0xc0027700
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 04 77 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd88fc]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 04 77 02 c0 	mov    DWORD PTR [edx*4-0x3ffd88fc],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 34 77 02 c0 	lea    edx,[eax*8-0x3ffd88cc]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 00 77 02 c0       	mov    eax,0xc0027700
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 40 77 02 c0    	mov    ebx,DWORD PTR ds:0xc0027740
c00010ee:	81 fb 34 77 02 c0    	cmp    ebx,0xc0027734
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 34 77 02 c0       	cmp    eax,0xc0027734
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 30 77 02 c0    	cmp    DWORD PTR ds:0xc0027730,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 3c 77 02 c0       	mov    ds:0xc002773c,eax
c000112a:	a3 40 77 02 c0       	mov    ds:0xc0027740,eax
c000112f:	a3 30 77 02 c0       	mov    ds:0xc0027730,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 34 77 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027734
c000113d:	c7 40 0c 34 77 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027734
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 40 77 02 c0       	mov    ds:0xc0027740,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 34 77 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027734
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 f8 76 02 c0 	lea    ebp,[edx*4-0x3ffd8908]
c000118e:	8b 14 95 00 77 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8900]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 00 77 02 c0 	lea    ecx,[edx*4-0x3ffd8900]
c00011a9:	8b 14 95 00 77 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8900]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 34 7a 02 c0 	or     DWORD PTR [edi*4-0x3ffd85cc],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 34 77 02 c0 	lea    eax,[eax*8-0x3ffd88cc]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 3c 77 02 c0    	mov    DWORD PTR ds:0xc002773c,ecx
c0001263:	89 0d 40 77 02 c0    	mov    DWORD PTR ds:0xc0027740,ecx
c0001269:	c7 41 08 34 77 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027734
c0001270:	c7 41 0c 34 77 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027734
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 2c 77 02 c0 	lea    edx,[ecx*8-0x3ffd88d4]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 34 7a 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd85cc]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 34 7a 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd85cc]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 2c 77 02 c0 	lea    edx,[eax*4-0x3ffd88d4]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 34 7a 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd85cc],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 3c 77 02 c0    	mov    DWORD PTR ds:0xc002773c,edi
c0001336:	89 3d 40 77 02 c0    	mov    DWORD PTR ds:0xc0027740,edi
c000133c:	c7 47 08 34 77 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027734
c0001343:	c7 47 0c 34 77 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027734
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 30 77 02 c0    	mov    DWORD PTR ds:0xc0027730,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 2c 77 02 c0       	mov    eax,ds:0xc002772c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 2c 77 02 c0    	mov    DWORD PTR ds:0xc002772c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 00 77 02 c0       	mov    edx,0xc0027700
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 00 77 02 c0 00 	cmp    DWORD PTR ds:0xc0027700,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 00 77 02 c0       	mov    eax,0xc0027700
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 54 7a 02 c0    	mov    ebx,DWORD PTR ds:0xc0027a54
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 54 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a54,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 54 7a 02 c0    	mov    DWORD PTR ds:0xc0027a54,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 2c 77 02 c0    	cmp    DWORD PTR ds:0xc002772c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 2c 77 02 c0    	mov    DWORD PTR ds:0xc002772c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 00 77 02 c0 00 	cmp    DWORD PTR ds:0xc0027700,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 5c 7a 02 c0    	push   DWORD PTR ds:0xc0027a5c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 00 77 02 c0 00 	cmp    DWORD PTR ds:0xc0027700,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 00 77 02 c0       	mov    eax,0xc0027700
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 5c 7a 02 c0       	mov    eax,ds:0xc0027a5c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 2c 77 02 c0 00 	cmp    DWORD PTR ds:0xc002772c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 00 77 02 c0       	mov    eax,0xc0027700
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 2c 77 02 c0       	mov    eax,ds:0xc002772c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 04 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd88fc]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 34 77 02 c0       	mov    eax,0xc0027734
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 2c 7a 02 c0       	cmp    eax,0xc0027a2c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 68 7a 02 c0       	mov    eax,ds:0xc0027a68
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 50 7a 02 c0    	mov    esi,DWORD PTR ds:0xc0027a50
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 64 7a 02 c0    	mov    esi,DWORD PTR ds:0xc0027a64
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 74 7a 02 c0    	mov    esi,DWORD PTR ds:0xc0027a74
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 a4 33 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcc5c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 00 77 02 c0       	mov    eax,ds:0xc0027700
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 00 77 02 c0       	mov    ds:0xc0027700,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 44 7a 02 c0    	mov    DWORD PTR ds:0xc0027a44,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 48 7a 02 c0    	mov    DWORD PTR ds:0xc0027a48,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 4c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a4c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 54 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a54,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 60 91 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6ea0]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 ee 99 01 00       	jmp    c001b514 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 60 91 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6ea0]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 20 9a 01 00       	jmp    c001b55c <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 60 91 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6ea0]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 49 9a 01 00       	jmp    c001b5a4 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 96 05 02 00       	call   c00223d4 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 c0 34 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdcb40]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 c0 34 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdcb40]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba c0 33 02 c0       	mov    edx,0xc00233c0
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba e0 34 02 c0       	mov    edx,0xc00234e0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 1c 5f 02 c0       	mov    edx,0xc0025f1c
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ec 34 02 c0       	mov    edx,0xc00234ec
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba d0 34 02 c0       	mov    edx,0xc00234d0
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 a0 7a 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8560]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 80 7a 02 c0    	mov    ax,ds:0xc0027a80
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 80 7a 02 c0    	mov    ds:0xc0027a80,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 93 f3 01 00       	call   c00223d4 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 f2 34 02 c0       	mov    eax,0xc00234f2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 40 34 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdcbc0]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 fb 34 02 c0       	mov    eax,0xc00234fb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 c0 34 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcb40]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 5e dd 01 00       	call   c00223d4 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba d0 34 02 c0       	mov    edx,0xc00234d0
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba c0 33 02 c0       	mov    edx,0xc00233c0
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba d0 33 02 c0       	mov    edx,0xc00233d0
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 a0 7a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8560]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 a0 7a 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8560],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 25 c7 01 00       	call   c00223d4 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 0b c7 01 00       	call   c00223d4 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 17 34 02 c0       	mov    eax,0xc0023417
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 10 34 02 c0       	mov    eax,0xc0023410
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 a4 b2 01 00       	call   c00223d4 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 a0 7a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8560]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 00 34 02 c0       	mov    esi,0xc0023400
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 18 ac 01 00       	call   c00223d4 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba e0 34 02 c0       	mov    edx,0xc00234e0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba e0 33 02 c0       	mov    edx,0xc00233e0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba f0 33 02 c0       	mov    edx,0xc00233f0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 02 35 02 c0       	mov    edx,0xc0023502
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 0e 35 02 c0       	mov    edx,0xc002350e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 22 35 02 c0       	mov    edx,0xc0023522
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 40 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023840
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 40 38 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023840
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 40 36 02 c0       	mov    eax,0xc0023640
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 80 35 02 c0       	mov    eax,0xc0023580
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 40 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcac0]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000888b:	48                   	dec    eax
c000888c:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c00088a2:	48                   	dec    eax
c00088a3:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c00088b3:	ff 05 c4 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc4
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c00088c2:	48                   	dec    eax
c00088c3:	a3 c4 8f 02 c0       	mov    ds:0xc0028fc4,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d c0 8f 02 c0 00 	cmp    DWORD PTR ds:0xc0028fc0,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 c0 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x0
c00088dd:	e8 4e fb 00 00       	call   c0018430 <schedule()>
c00088e2:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c00088e7:	48                   	dec    eax
c00088e8:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 30 7c 02 c0       	mov    eax,ds:0xc0027c30
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 40 39 02 c0       	push   0xc0023940
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 08 7b 02 c0       	mov    eax,0xc0027b08
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 49 39 02 c0       	push   0xc0023949
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 d4 23 02 c0       	mov    eax,0xc00223d4
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 53 39 02 c0       	push   0xc0023953
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 08 21 02 c0       	mov    eax,0xc0022108
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 5c 39 02 c0       	push   0xc002395c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 d4 24 02 c0       	mov    eax,0xc00224d4
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 66 39 02 c0       	push   0xc0023966
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 54 22 02 c0       	mov    eax,0xc0022254
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 6f 39 02 c0       	push   0xc002396f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 0c 7b 02 c0       	mov    eax,0xc0027b0c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 7c 39 02 c0       	push   0xc002397c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 0d 7b 02 c0       	mov    eax,0xc0027b0d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 7f 58 00 00       	call   c000e2c4 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 89 39 02 c0       	push   0xc0023989
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 a0 39 02 c0 	mov    DWORD PTR [esp],0xc00239a0
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 f0 8f 02 c0    	push   DWORD PTR ds:0xc0028ff0
c0008aa2:	68 b9 39 02 c0       	push   0xc00239b9
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 5d f5 00 00       	call   c001800c <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 50 f7 00 00       	call   c0018214 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 58 8c 01 c0       	push   0xc0018c58
c0008acd:	ff 35 f0 8f 02 c0    	push   DWORD PTR ds:0xc0028ff0
c0008ad3:	e8 3c f7 00 00       	call   c0018214 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 a8 8f 02 c0       	mov    ds:0xc0028fa8,eax
c0008ae0:	68 60 3b 02 c0       	push   0xc0023b60
c0008ae5:	c6 05 0d 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b0d,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 3d 05 01 00       	call   c0019033 <Vm::initialise8086()>
c0008af6:	e8 4f 45 00 00       	call   c000d04a <Fs::initVFS()>
c0008afb:	c7 04 24 c6 39 02 c0 	mov    DWORD PTR [esp],0xc00239c6
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 60 3b 02 c0       	push   0xc0023b60
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 4a dd 00 00       	call   c001687a <Sys::loadSyscalls()>
c0008b30:	e8 21 bc 00 00       	call   c0014756 <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 e0 39 02 c0       	push   0xc00239e0
c0008b3f:	68 e9 39 02 c0       	push   0xc00239e9
c0008b44:	e8 f4 ca 00 00       	call   c001563d <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 2b 50 00 00       	call   c000db7c <User::loadClockSettings(int)>
c0008b51:	c7 04 24 84 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b84
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 16 57 00 00       	call   c000e284 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 f1 39 02 c0 	mov    DWORD PTR [esp],0xc00239f1
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 3f b7 00 00       	call   c00142be <Krnl::startCPUs()>
c0008b7f:	c7 04 24 0b 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a0b
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d 08 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b08
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 1c 3a 02 c0       	push   0xc0023a1c
c0008b9a:	e8 ab ee 00 00       	call   c0017a4a <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 d3 f0 00 00       	call   c0017c7b <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 73 fa 00 00       	call   c0018628 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 38 3a 02 c0       	push   0xc0023a38
c0008bc9:	50                   	push   eax
c0008bca:	e8 6f 57 00 00       	call   c000e33e <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba 34 3c 02 c0       	mov    edx,0xc0023c34
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 21 7b 02 c0 04 	test   BYTE PTR ds:0xc0027b21,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 33 93 01 00       	call   c0022096 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 c4 a3 00 00       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 9d a3 00 00       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 7b a3 00 00       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 59 a3 00 00       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 20 7b 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0027b20,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 67 a2 00 00       	call   c00130de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 42 a2 00 00       	call   c00130de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 9d 91 01 00       	call   c0022050 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 5a 91 01 00       	call   c0022030 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 5e a2 00 00       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 41 3a 02 c0       	push   0xc0023a41
c0008f46:	e8 14 b9 00 00       	call   c001485f <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 47 3a 02 c0       	push   0xc0023a47
c0008f7e:	e8 dc b8 00 00       	call   c001485f <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 a4 3b 02 c0       	push   0xc0023ba4
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 20 7b 02 c0 04 	test   BYTE PTR ds:0xc0027b20,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 e0 6e 02 c0 	sete   BYTE PTR ds:0xc0026ee0
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 4d 3a 02 c0       	push   0xc0023a4d
c0008ff3:	e8 bb 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 63 3a 02 c0       	push   0xc0023a63
c0009004:	e8 aa 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 77 3a 02 c0       	push   0xc0023a77
c0009012:	e8 9c 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 8a 3a 02 c0       	push   0xc0023a8a
c0009023:	e8 8b 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 a1 3a 02 c0       	push   0xc0023aa1
c0009031:	e8 7d 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 b7 3a 02 c0 	mov    DWORD PTR [esp],0xc0023ab7
c000903d:	e8 71 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 c9 3a 02 c0 	mov    DWORD PTR [esp],0xc0023ac9
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 a4 8f 00 00       	call   c0012008 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 e3 3a 02 c0 	mov    DWORD PTR [esp],0xc0023ae3
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 b6 50 00 00       	call   c000e13a <Device::addChild(Device*)>
c0009084:	c7 04 24 c8 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bc8
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 e8 3b 02 c0 	mov    DWORD PTR [esp],0xc0023be8
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 fd 3a 02 c0 	mov    DWORD PTR [esp],0xc0023afd
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 f1 39 02 c0 	mov    DWORD PTR [esp],0xc00239f1
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 3e a1 00 00       	call   c001321a <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 4f 50 00 00       	call   c000e13a <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 08 3c 02 c0       	push   0xc0023c08
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 c5 55 00 00       	call   c000e6d6 <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 12 50 00 00       	call   c000e13a <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 0e 3b 02 c0       	push   0xc0023b0e
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 d2 f1 00 00       	call   c0018328 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 29 3b 02 c0       	push   0xc0023b29
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 0e 3b 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 3a 3b 02 c0       	push   0xc0023b3a
c00091c2:	e8 98 b6 00 00       	call   c001485f <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 47 3b 02 c0       	push   0xc0023b47
c00091d7:	e8 83 b6 00 00       	call   c001485f <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 51 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023b51
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 6c b6 00 00       	jmp    c001485f <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 12 7b 02 c0       	mov    ds:0xc0027b12,eax
c00092af:	66 89 15 10 7b 02 c0 	mov    WORD PTR ds:0xc0027b10,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c00093c6:	48                   	dec    eax
c00093c7:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 08 7b 02 c0    	push   DWORD PTR ds:0xc0027b08
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 39 92 01 00       	call   c0022656 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 30 92 01 00       	call   c0022656 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 18 7b 02 c0 ff 07 	mov    WORD PTR ds:0xc0027b18,0x7ff
c0009519:	a3 1a 7b 02 c0       	mov    ds:0xc0027b1a,eax
c000951e:	0f 01 1d 18 7b 02 c0 	lidtd  ds:0xc0027b18
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 30 7c 02 c0    	push   DWORD PTR ds:0xc0027c30
c0009810:	e8 21 29 00 00       	call   c000c136 <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 9d 1a 00 00       	call   c000b2d0 <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 d2 1a 00 00       	call   c000b314 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 58 3c 02 c0       	push   0xc0023c58
c000989d:	e8 11 34 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 64 6d 02 c0       	mov    eax,ds:0xc0026d64
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 30 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027c30
c00098cc:	8b 3d 64 6d 02 c0    	mov    edi,DWORD PTR ds:0xc0026d64
c00098d2:	e8 a3 07 00 00       	call   c000a07a <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 50 27 00 00       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 64 6d 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026d64,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 64 6d 02 c0       	mov    eax,ds:0xc0026d64
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 84 3c 02 c0       	push   0xc0023c84
c0009918:	e8 96 33 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 76 3c 02 c0       	push   0xc0023c76
c0009937:	e8 23 af 00 00       	call   c001485f <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 7b 3c 02 c0       	push   0xc0023c7b
c000994d:	e8 0d af 00 00       	call   c001485f <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000996d:	48                   	dec    eax
c000996e:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 30 7c 02 c0    	push   DWORD PTR ds:0xc0027c30
c000998b:	e8 a6 27 00 00       	call   c000c136 <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 30 7c 02 c0    	push   DWORD PTR ds:0xc0027c30
c00099a1:	e8 3a 24 00 00       	call   c000bde0 <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	56                   	push   esi
c0009a8b:	53                   	push   ebx
c0009a8c:	83 ec 20             	sub    esp,0x20
c0009a8f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009a94:	a3 20 7b 02 c0       	mov    ds:0xc0027b20,eax
c0009a99:	f6 c4 08             	test   ah,0x8
c0009a9c:	0f 85 7a 03 00 00    	jne    c0009e1c <kernel_main+0x393>
c0009aa2:	31 f6                	xor    esi,esi
c0009aa4:	bf f9 03 00 00       	mov    edi,0x3f9
c0009aa9:	89 f0                	mov    eax,esi
c0009aab:	89 fa                	mov    edx,edi
c0009aad:	ee                   	out    dx,al
c0009aae:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009ab3:	b0 80                	mov    al,0x80
c0009ab5:	89 da                	mov    edx,ebx
c0009ab7:	ee                   	out    dx,al
c0009ab8:	b1 03                	mov    cl,0x3
c0009aba:	ba f8 03 00 00       	mov    edx,0x3f8
c0009abf:	88 c8                	mov    al,cl
c0009ac1:	ee                   	out    dx,al
c0009ac2:	89 f0                	mov    eax,esi
c0009ac4:	89 fa                	mov    edx,edi
c0009ac6:	ee                   	out    dx,al
c0009ac7:	88 c8                	mov    al,cl
c0009ac9:	89 da                	mov    edx,ebx
c0009acb:	ee                   	out    dx,al
c0009acc:	b0 c7                	mov    al,0xc7
c0009ace:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ad3:	ee                   	out    dx,al
c0009ad4:	b0 0b                	mov    al,0xb
c0009ad6:	ba fc 03 00 00       	mov    edx,0x3fc
c0009adb:	ee                   	out    dx,al
c0009adc:	83 ec 0c             	sub    esp,0xc
c0009adf:	68 b4 3c 02 c0       	push   0xc0023cb4
c0009ae4:	e8 ca 31 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009ae9:	83 c4 10             	add    esp,0x10
c0009aec:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0009af3:	0f 85 eb 02 00 00    	jne    c0009de4 <kernel_main+0x35b>
c0009af9:	e8 d2 0c 00 00       	call   c000a7d0 <installVgaTextImplementation()>
c0009afe:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0009b05:	0f 85 94 02 00 00    	jne    c0009d9f <kernel_main+0x316>
c0009b0b:	0f b6 05 80 6d 02 c0 	movzx  eax,BYTE PTR ds:0xc0026d80
c0009b12:	84 c0                	test   al,al
c0009b14:	74 7b                	je     c0009b91 <kernel_main+0x108>
c0009b16:	31 db                	xor    ebx,ebx
c0009b18:	bf 0a 00 00 00       	mov    edi,0xa
c0009b1d:	be 05 00 00 00       	mov    esi,0x5
c0009b22:	31 c9                	xor    ecx,ecx
c0009b24:	eb 2a                	jmp    c0009b50 <kernel_main+0xc7>
c0009b26:	3c 0d                	cmp    al,0xd
c0009b28:	74 1a                	je     c0009b44 <kernel_main+0xbb>
c0009b2a:	3c 0a                	cmp    al,0xa
c0009b2c:	74 40                	je     c0009b6e <kernel_main+0xe5>
c0009b2e:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b31:	80 cc 0e             	or     ah,0xe
c0009b34:	c1 e2 04             	shl    edx,0x4
c0009b37:	01 ca                	add    edx,ecx
c0009b39:	41                   	inc    ecx
c0009b3a:	01 fa                	add    edx,edi
c0009b3c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b44:	43                   	inc    ebx
c0009b45:	0f b6 83 80 6d 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd9280]
c0009b4c:	84 c0                	test   al,al
c0009b4e:	74 32                	je     c0009b82 <kernel_main+0xf9>
c0009b50:	80 b9 b6 6d 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd924a],0xdb
c0009b57:	75 cd                	jne    c0009b26 <kernel_main+0x9d>
c0009b59:	0f b6 91 b5 6d 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd924b]
c0009b60:	83 e2 fe             	and    edx,0xfffffffe
c0009b63:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b69:	75 bb                	jne    c0009b26 <kernel_main+0x9d>
c0009b6b:	47                   	inc    edi
c0009b6c:	eb b8                	jmp    c0009b26 <kernel_main+0x9d>
c0009b6e:	43                   	inc    ebx
c0009b6f:	46                   	inc    esi
c0009b70:	31 c9                	xor    ecx,ecx
c0009b72:	0f b6 83 80 6d 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd9280]
c0009b79:	bf 0a 00 00 00       	mov    edi,0xa
c0009b7e:	84 c0                	test   al,al
c0009b80:	75 ce                	jne    c0009b50 <kernel_main+0xc7>
c0009b82:	8b 15 20 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b20
c0009b88:	80 e6 08             	and    dh,0x8
c0009b8b:	0f 85 bf 00 00 00    	jne    c0009c50 <kernel_main+0x1c7>
c0009b91:	83 ec 0c             	sub    esp,0xc
c0009b94:	68 50 3d 02 c0       	push   0xc0023d50
c0009b99:	e8 7f fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b9e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009ba3:	05 ff 0f 00 00       	add    eax,0xfff
c0009ba8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bad:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bb0:	e8 44 06 00 00       	call   c000a1f9 <Phys::physicalMemorySetup(unsigned int)>
c0009bb5:	83 c4 10             	add    esp,0x10
c0009bb8:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0009bbf:	0f 85 a2 01 00 00    	jne    c0009d67 <kernel_main+0x2de>
c0009bc5:	e8 82 1f 00 00       	call   c000bb4c <Virt::virtualMemorySetup()>
c0009bca:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0009bd1:	0f 85 58 01 00 00    	jne    c0009d2f <kernel_main+0x2a6>
c0009bd7:	83 ec 0c             	sub    esp,0xc
c0009bda:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009bde:	56                   	push   esi
c0009bdf:	e8 24 20 00 00       	call   c000bc08 <VAS::VAS()>
c0009be4:	83 c4 10             	add    esp,0x10
c0009be7:	89 35 30 7c 02 c0    	mov    DWORD PTR ds:0xc0027c30,esi
c0009bed:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0009bf4:	0f 85 fd 00 00 00    	jne    c0009cf7 <kernel_main+0x26e>
c0009bfa:	e8 21 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009bff:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0009c06:	0f 85 b3 00 00 00    	jne    c0009cbf <kernel_main+0x236>
c0009c0c:	83 ec 0c             	sub    esp,0xc
c0009c0f:	68 ec 01 00 00       	push   0x1ec
c0009c14:	e8 aa fd ff ff       	call   c00099c3 <malloc>
c0009c19:	89 c3                	mov    ebx,eax
c0009c1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c1e:	e8 97 ef ff ff       	call   c0008bba <Computer::Computer()>
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	89 1d 08 7b 02 c0    	mov    DWORD PTR ds:0xc0027b08,ebx
c0009c2c:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0009c33:	75 53                	jne    c0009c88 <kernel_main+0x1ff>
c0009c35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c37:	6a 00                	push   0x0
c0009c39:	6a 00                	push   0x0
c0009c3b:	6a 00                	push   0x0
c0009c3d:	53                   	push   ebx
c0009c3e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009c41:	89 34 24             	mov    DWORD PTR [esp],esi
c0009c44:	e8 6f 22 00 00       	call   c000beb8 <VAS::~VAS()>
c0009c49:	83 c4 30             	add    esp,0x30
c0009c4c:	5b                   	pop    ebx
c0009c4d:	5e                   	pop    esi
c0009c4e:	5f                   	pop    edi
c0009c4f:	c3                   	ret    
c0009c50:	83 ec 0c             	sub    esp,0xc
c0009c53:	68 ff 3c 02 c0       	push   0xc0023cff
c0009c58:	e8 c0 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009c5d:	83 c4 10             	add    esp,0x10
c0009c60:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0009c67:	0f 85 24 ff ff ff    	jne    c0009b91 <kernel_main+0x108>
c0009c6d:	eb 04                	jmp    c0009c73 <kernel_main+0x1ea>
c0009c6f:	3c 1c                	cmp    al,0x1c
c0009c71:	74 06                	je     c0009c79 <kernel_main+0x1f0>
c0009c73:	e4 60                	in     al,0x60
c0009c75:	3c 5a                	cmp    al,0x5a
c0009c77:	75 f6                	jne    c0009c6f <kernel_main+0x1e6>
c0009c79:	e4 60                	in     al,0x60
c0009c7b:	3c 5a                	cmp    al,0x5a
c0009c7d:	74 fa                	je     c0009c79 <kernel_main+0x1f0>
c0009c7f:	3c 1c                	cmp    al,0x1c
c0009c81:	74 f6                	je     c0009c79 <kernel_main+0x1f0>
c0009c83:	e9 09 ff ff ff       	jmp    c0009b91 <kernel_main+0x108>
c0009c88:	83 ec 0c             	sub    esp,0xc
c0009c8b:	68 3e 3d 02 c0       	push   0xc0023d3e
c0009c90:	e8 88 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009c95:	83 c4 10             	add    esp,0x10
c0009c98:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0009c9f:	74 0c                	je     c0009cad <kernel_main+0x224>
c0009ca1:	8b 1d 08 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b08
c0009ca7:	eb 8c                	jmp    c0009c35 <kernel_main+0x1ac>
c0009ca9:	3c 1c                	cmp    al,0x1c
c0009cab:	74 06                	je     c0009cb3 <kernel_main+0x22a>
c0009cad:	e4 60                	in     al,0x60
c0009caf:	3c 5a                	cmp    al,0x5a
c0009cb1:	75 f6                	jne    c0009ca9 <kernel_main+0x220>
c0009cb3:	e4 60                	in     al,0x60
c0009cb5:	3c 5a                	cmp    al,0x5a
c0009cb7:	74 fa                	je     c0009cb3 <kernel_main+0x22a>
c0009cb9:	3c 1c                	cmp    al,0x1c
c0009cbb:	74 f6                	je     c0009cb3 <kernel_main+0x22a>
c0009cbd:	eb e2                	jmp    c0009ca1 <kernel_main+0x218>
c0009cbf:	83 ec 0c             	sub    esp,0xc
c0009cc2:	68 2b 3d 02 c0       	push   0xc0023d2b
c0009cc7:	e8 51 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009ccc:	83 c4 10             	add    esp,0x10
c0009ccf:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0009cd6:	0f 85 30 ff ff ff    	jne    c0009c0c <kernel_main+0x183>
c0009cdc:	eb 04                	jmp    c0009ce2 <kernel_main+0x259>
c0009cde:	3c 1c                	cmp    al,0x1c
c0009ce0:	74 06                	je     c0009ce8 <kernel_main+0x25f>
c0009ce2:	e4 60                	in     al,0x60
c0009ce4:	3c 5a                	cmp    al,0x5a
c0009ce6:	75 f6                	jne    c0009cde <kernel_main+0x255>
c0009ce8:	e4 60                	in     al,0x60
c0009cea:	3c 5a                	cmp    al,0x5a
c0009cec:	74 fa                	je     c0009ce8 <kernel_main+0x25f>
c0009cee:	3c 1c                	cmp    al,0x1c
c0009cf0:	74 f6                	je     c0009ce8 <kernel_main+0x25f>
c0009cf2:	e9 15 ff ff ff       	jmp    c0009c0c <kernel_main+0x183>
c0009cf7:	83 ec 0c             	sub    esp,0xc
c0009cfa:	68 21 3d 02 c0       	push   0xc0023d21
c0009cff:	e8 19 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009d04:	83 c4 10             	add    esp,0x10
c0009d07:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0009d0e:	0f 85 e6 fe ff ff    	jne    c0009bfa <kernel_main+0x171>
c0009d14:	eb 04                	jmp    c0009d1a <kernel_main+0x291>
c0009d16:	3c 1c                	cmp    al,0x1c
c0009d18:	74 06                	je     c0009d20 <kernel_main+0x297>
c0009d1a:	e4 60                	in     al,0x60
c0009d1c:	3c 5a                	cmp    al,0x5a
c0009d1e:	75 f6                	jne    c0009d16 <kernel_main+0x28d>
c0009d20:	e4 60                	in     al,0x60
c0009d22:	3c 5a                	cmp    al,0x5a
c0009d24:	74 fa                	je     c0009d20 <kernel_main+0x297>
c0009d26:	3c 1c                	cmp    al,0x1c
c0009d28:	74 f6                	je     c0009d20 <kernel_main+0x297>
c0009d2a:	e9 cb fe ff ff       	jmp    c0009bfa <kernel_main+0x171>
c0009d2f:	83 ec 0c             	sub    esp,0xc
c0009d32:	68 16 3d 02 c0       	push   0xc0023d16
c0009d37:	e8 e1 fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009d3c:	83 c4 10             	add    esp,0x10
c0009d3f:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0009d46:	0f 85 8b fe ff ff    	jne    c0009bd7 <kernel_main+0x14e>
c0009d4c:	eb 04                	jmp    c0009d52 <kernel_main+0x2c9>
c0009d4e:	3c 1c                	cmp    al,0x1c
c0009d50:	74 06                	je     c0009d58 <kernel_main+0x2cf>
c0009d52:	e4 60                	in     al,0x60
c0009d54:	3c 5a                	cmp    al,0x5a
c0009d56:	75 f6                	jne    c0009d4e <kernel_main+0x2c5>
c0009d58:	e4 60                	in     al,0x60
c0009d5a:	3c 5a                	cmp    al,0x5a
c0009d5c:	74 fa                	je     c0009d58 <kernel_main+0x2cf>
c0009d5e:	3c 1c                	cmp    al,0x1c
c0009d60:	74 f6                	je     c0009d58 <kernel_main+0x2cf>
c0009d62:	e9 70 fe ff ff       	jmp    c0009bd7 <kernel_main+0x14e>
c0009d67:	83 ec 0c             	sub    esp,0xc
c0009d6a:	68 0b 3d 02 c0       	push   0xc0023d0b
c0009d6f:	e8 a9 fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009d74:	83 c4 10             	add    esp,0x10
c0009d77:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0009d7e:	0f 85 41 fe ff ff    	jne    c0009bc5 <kernel_main+0x13c>
c0009d84:	eb 04                	jmp    c0009d8a <kernel_main+0x301>
c0009d86:	3c 1c                	cmp    al,0x1c
c0009d88:	74 06                	je     c0009d90 <kernel_main+0x307>
c0009d8a:	e4 60                	in     al,0x60
c0009d8c:	3c 5a                	cmp    al,0x5a
c0009d8e:	75 f6                	jne    c0009d86 <kernel_main+0x2fd>
c0009d90:	e4 60                	in     al,0x60
c0009d92:	3c 5a                	cmp    al,0x5a
c0009d94:	74 fa                	je     c0009d90 <kernel_main+0x307>
c0009d96:	3c 1c                	cmp    al,0x1c
c0009d98:	74 f6                	je     c0009d90 <kernel_main+0x307>
c0009d9a:	e9 26 fe ff ff       	jmp    c0009bc5 <kernel_main+0x13c>
c0009d9f:	83 ec 0c             	sub    esp,0xc
c0009da2:	68 ed 3c 02 c0       	push   0xc0023ced
c0009da7:	e8 71 fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009dac:	8b 15 20 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b20
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	f6 c2 80             	test   dl,0x80
c0009db8:	74 18                	je     c0009dd2 <kernel_main+0x349>
c0009dba:	0f b6 05 80 6d 02 c0 	movzx  eax,BYTE PTR ds:0xc0026d80
c0009dc1:	84 c0                	test   al,al
c0009dc3:	0f 85 4d fd ff ff    	jne    c0009b16 <kernel_main+0x8d>
c0009dc9:	e9 ba fd ff ff       	jmp    c0009b88 <kernel_main+0xff>
c0009dce:	3c 1c                	cmp    al,0x1c
c0009dd0:	74 06                	je     c0009dd8 <kernel_main+0x34f>
c0009dd2:	e4 60                	in     al,0x60
c0009dd4:	3c 5a                	cmp    al,0x5a
c0009dd6:	75 f6                	jne    c0009dce <kernel_main+0x345>
c0009dd8:	e4 60                	in     al,0x60
c0009dda:	3c 5a                	cmp    al,0x5a
c0009ddc:	74 fa                	je     c0009dd8 <kernel_main+0x34f>
c0009dde:	3c 1c                	cmp    al,0x1c
c0009de0:	74 f6                	je     c0009dd8 <kernel_main+0x34f>
c0009de2:	eb d6                	jmp    c0009dba <kernel_main+0x331>
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	68 de 3c 02 c0       	push   0xc0023cde
c0009dec:	e8 2c fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009df1:	83 c4 10             	add    esp,0x10
c0009df4:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0009dfb:	0f 85 f8 fc ff ff    	jne    c0009af9 <kernel_main+0x70>
c0009e01:	eb 04                	jmp    c0009e07 <kernel_main+0x37e>
c0009e03:	3c 1c                	cmp    al,0x1c
c0009e05:	74 06                	je     c0009e0d <kernel_main+0x384>
c0009e07:	e4 60                	in     al,0x60
c0009e09:	3c 5a                	cmp    al,0x5a
c0009e0b:	75 f6                	jne    c0009e03 <kernel_main+0x37a>
c0009e0d:	e4 60                	in     al,0x60
c0009e0f:	3c 5a                	cmp    al,0x5a
c0009e11:	74 fa                	je     c0009e0d <kernel_main+0x384>
c0009e13:	3c 1c                	cmp    al,0x1c
c0009e15:	74 f6                	je     c0009e0d <kernel_main+0x384>
c0009e17:	e9 dd fc ff ff       	jmp    c0009af9 <kernel_main+0x70>
c0009e1c:	83 ec 0c             	sub    esp,0xc
c0009e1f:	68 cb 3c 02 c0       	push   0xc0023ccb
c0009e24:	e8 f4 fb ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0009e33:	0f 85 69 fc ff ff    	jne    c0009aa2 <kernel_main+0x19>
c0009e39:	eb 04                	jmp    c0009e3f <kernel_main+0x3b6>
c0009e3b:	3c 1c                	cmp    al,0x1c
c0009e3d:	74 06                	je     c0009e45 <kernel_main+0x3bc>
c0009e3f:	e4 60                	in     al,0x60
c0009e41:	3c 5a                	cmp    al,0x5a
c0009e43:	75 f6                	jne    c0009e3b <kernel_main+0x3b2>
c0009e45:	e4 60                	in     al,0x60
c0009e47:	3c 5a                	cmp    al,0x5a
c0009e49:	74 fa                	je     c0009e45 <kernel_main+0x3bc>
c0009e4b:	3c 1c                	cmp    al,0x1c
c0009e4d:	74 f6                	je     c0009e45 <kernel_main+0x3bc>
c0009e4f:	e9 4e fc ff ff       	jmp    c0009aa2 <kernel_main+0x19>

c0009e54 <Phys::allocateDMA(unsigned long)>:
c0009e54:	55                   	push   ebp
c0009e55:	31 ed                	xor    ebp,ebp
c0009e57:	57                   	push   edi
c0009e58:	56                   	push   esi
c0009e59:	53                   	push   ebx
c0009e5a:	31 db                	xor    ebx,ebx
c0009e5c:	83 ec 28             	sub    esp,0x28
c0009e5f:	68 6f 3d 02 c0       	push   0xc0023d6f
c0009e64:	e8 4a 2e 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009e69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e6d:	83 c4 10             	add    esp,0x10
c0009e70:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009e76:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009e7e:	c1 ef 0c             	shr    edi,0xc
c0009e81:	31 c0                	xor    eax,eax
c0009e83:	eb 19                	jmp    c0009e9e <Phys::allocateDMA(unsigned long)+0x4a>
c0009e85:	85 c0                	test   eax,eax
c0009e87:	75 06                	jne    c0009e8f <Phys::allocateDMA(unsigned long)+0x3b>
c0009e89:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009e8d:	89 dd                	mov    ebp,ebx
c0009e8f:	8d 70 01             	lea    esi,[eax+0x1]
c0009e92:	39 f7                	cmp    edi,esi
c0009e94:	74 3f                	je     c0009ed5 <Phys::allocateDMA(unsigned long)+0x81>
c0009e96:	89 f0                	mov    eax,esi
c0009e98:	43                   	inc    ebx
c0009e99:	83 fb 0f             	cmp    ebx,0xf
c0009e9c:	7f 11                	jg     c0009eaf <Phys::allocateDMA(unsigned long)+0x5b>
c0009e9e:	80 bb 3c 7b 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd84c4],0x0
c0009ea5:	74 de                	je     c0009e85 <Phys::allocateDMA(unsigned long)+0x31>
c0009ea7:	31 c0                	xor    eax,eax
c0009ea9:	43                   	inc    ebx
c0009eaa:	83 fb 0f             	cmp    ebx,0xf
c0009ead:	7e ef                	jle    c0009e9e <Phys::allocateDMA(unsigned long)+0x4a>
c0009eaf:	83 ec 0c             	sub    esp,0xc
c0009eb2:	68 a3 3d 02 c0       	push   0xc0023da3
c0009eb7:	e8 f7 2d 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009ebc:	c7 04 24 60 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e60
c0009ec3:	e8 97 a9 00 00       	call   c001485f <Krnl::panic(char const*)>
c0009ec8:	83 c4 10             	add    esp,0x10
c0009ecb:	31 c0                	xor    eax,eax
c0009ecd:	83 c4 1c             	add    esp,0x1c
c0009ed0:	5b                   	pop    ebx
c0009ed1:	5e                   	pop    esi
c0009ed2:	5f                   	pop    edi
c0009ed3:	5d                   	pop    ebp
c0009ed4:	c3                   	ret    
c0009ed5:	89 e9                	mov    ecx,ebp
c0009ed7:	c1 f9 04             	sar    ecx,0x4
c0009eda:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009ede:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009ee2:	89 ca                	mov    edx,ecx
c0009ee4:	4a                   	dec    edx
c0009ee5:	79 03                	jns    c0009eea <Phys::allocateDMA(unsigned long)+0x96>
c0009ee7:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009eea:	c1 fa 04             	sar    edx,0x4
c0009eed:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009ef1:	74 08                	je     c0009efb <Phys::allocateDMA(unsigned long)+0xa7>
c0009ef3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ef7:	31 c0                	xor    eax,eax
c0009ef9:	eb ae                	jmp    c0009ea9 <Phys::allocateDMA(unsigned long)+0x55>
c0009efb:	85 f6                	test   esi,esi
c0009efd:	74 15                	je     c0009f14 <Phys::allocateDMA(unsigned long)+0xc0>
c0009eff:	8d 95 3c 7b 02 c0    	lea    edx,[ebp-0x3ffd84c4]
c0009f05:	8d 84 05 3d 7b 02 c0 	lea    eax,[ebp+eax*1-0x3ffd84c3]
c0009f0c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009f0f:	42                   	inc    edx
c0009f10:	39 d0                	cmp    eax,edx
c0009f12:	75 f8                	jne    c0009f0c <Phys::allocateDMA(unsigned long)+0xb8>
c0009f14:	83 ec 0c             	sub    esp,0xc
c0009f17:	01 3d 34 7b 02 c0    	add    DWORD PTR ds:0xc0027b34,edi
c0009f1d:	68 88 3d 02 c0       	push   0xc0023d88
c0009f22:	e8 8c 2d 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009f27:	83 c4 10             	add    esp,0x10
c0009f2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f2e:	85 c0                	test   eax,eax
c0009f30:	74 23                	je     c0009f55 <Phys::allocateDMA(unsigned long)+0x101>
c0009f32:	83 ec 0c             	sub    esp,0xc
c0009f35:	68 9f 3d 02 c0       	push   0xc0023d9f
c0009f3a:	e8 74 2d 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009f3f:	c7 04 24 60 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e60
c0009f46:	e8 14 a9 00 00       	call   c001485f <Krnl::panic(char const*)>
c0009f4b:	83 c4 10             	add    esp,0x10
c0009f4e:	89 f0                	mov    eax,esi
c0009f50:	e9 43 ff ff ff       	jmp    c0009e98 <Phys::allocateDMA(unsigned long)+0x44>
c0009f55:	c1 e5 0c             	shl    ebp,0xc
c0009f58:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009f5e:	e9 6a ff ff ff       	jmp    c0009ecd <Phys::allocateDMA(unsigned long)+0x79>

c0009f63 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009f63:	83 ec 18             	sub    esp,0x18
c0009f66:	68 a7 3d 02 c0       	push   0xc0023da7
c0009f6b:	e8 43 2d 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009f70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009f74:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f7e:	c1 ea 0c             	shr    edx,0xc
c0009f81:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009f86:	29 15 34 7b 02 c0    	sub    DWORD PTR ds:0xc0027b34,edx
c0009f8c:	c1 e8 0c             	shr    eax,0xc
c0009f8f:	83 c4 10             	add    esp,0x10
c0009f92:	85 d2                	test   edx,edx
c0009f94:	74 0f                	je     c0009fa5 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009f96:	05 3c 7b 02 c0       	add    eax,0xc0027b3c
c0009f9b:	01 c2                	add    edx,eax
c0009f9d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009fa0:	40                   	inc    eax
c0009fa1:	39 d0                	cmp    eax,edx
c0009fa3:	75 f8                	jne    c0009f9d <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009fa5:	83 c4 0c             	add    esp,0xc
c0009fa8:	c3                   	ret    

c0009fa9 <Phys::setPageState(unsigned long, bool)>:
c0009fa9:	56                   	push   esi
c0009faa:	ba 01 00 00 00       	mov    edx,0x1
c0009faf:	53                   	push   ebx
c0009fb0:	8b 35 c4 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ec4
c0009fb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009fba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009fbe:	89 c8                	mov    eax,ecx
c0009fc0:	83 e1 07             	and    ecx,0x7
c0009fc3:	c1 e8 03             	shr    eax,0x3
c0009fc6:	d3 e3                	shl    ebx,cl
c0009fc8:	01 c6                	add    esi,eax
c0009fca:	d3 e2                	shl    edx,cl
c0009fcc:	f7 d2                	not    edx
c0009fce:	20 16                	and    BYTE PTR [esi],dl
c0009fd0:	03 05 c4 6e 02 c0    	add    eax,DWORD PTR ds:0xc0026ec4
c0009fd6:	08 18                	or     BYTE PTR [eax],bl
c0009fd8:	5b                   	pop    ebx
c0009fd9:	5e                   	pop    esi
c0009fda:	c3                   	ret    

c0009fdb <Phys::getPageState(unsigned long)>:
c0009fdb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009fdf:	8b 15 c4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ec4
c0009fe5:	89 c8                	mov    eax,ecx
c0009fe7:	83 e1 07             	and    ecx,0x7
c0009fea:	c1 e8 03             	shr    eax,0x3
c0009fed:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009ff1:	d3 f8                	sar    eax,cl
c0009ff3:	83 e0 01             	and    eax,0x1
c0009ff6:	c3                   	ret    

c0009ff7 <Phys::freePage(unsigned long)>:
c0009ff7:	53                   	push   ebx
c0009ff8:	83 ec 10             	sub    esp,0x10
c0009ffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009fff:	53                   	push   ebx
c000a000:	68 bd 3d 02 c0       	push   0xc0023dbd
c000a005:	e8 a9 2c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a00a:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a010:	83 c4 10             	add    esp,0x10
c000a013:	3d ff ff 00 00       	cmp    eax,0xffff
c000a018:	76 3d                	jbe    c000a057 <Phys::freePage(unsigned long)+0x60>
c000a01a:	83 ec 0c             	sub    esp,0xc
c000a01d:	c1 eb 0c             	shr    ebx,0xc
c000a020:	53                   	push   ebx
c000a021:	e8 b5 ff ff ff       	call   c0009fdb <Phys::getPageState(unsigned long)>
c000a026:	83 c4 10             	add    esp,0x10
c000a029:	84 c0                	test   al,al
c000a02b:	74 19                	je     c000a046 <Phys::freePage(unsigned long)+0x4f>
c000a02d:	83 ec 08             	sub    esp,0x8
c000a030:	ff 0d 34 7b 02 c0    	dec    DWORD PTR ds:0xc0027b34
c000a036:	6a 00                	push   0x0
c000a038:	53                   	push   ebx
c000a039:	e8 6b ff ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a03e:	83 c4 10             	add    esp,0x10
c000a041:	83 c4 08             	add    esp,0x8
c000a044:	5b                   	pop    ebx
c000a045:	c3                   	ret    
c000a046:	c7 44 24 10 e7 3d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023de7
c000a04e:	83 c4 08             	add    esp,0x8
c000a051:	5b                   	pop    ebx
c000a052:	e9 08 a8 00 00       	jmp    c001485f <Krnl::panic(char const*)>
c000a057:	83 ec 08             	sub    esp,0x8
c000a05a:	53                   	push   ebx
c000a05b:	68 d0 3d 02 c0       	push   0xc0023dd0
c000a060:	e8 4e 2c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a065:	58                   	pop    eax
c000a066:	5a                   	pop    edx
c000a067:	68 00 10 00 00       	push   0x1000
c000a06c:	53                   	push   ebx
c000a06d:	e8 f1 fe ff ff       	call   c0009f63 <Phys::freeDMA(unsigned long, unsigned long)>
c000a072:	83 c4 10             	add    esp,0x10
c000a075:	83 c4 08             	add    esp,0x8
c000a078:	5b                   	pop    ebx
c000a079:	c3                   	ret    

c000a07a <Phys::allocatePage()>:
c000a07a:	56                   	push   esi
c000a07b:	53                   	push   ebx
c000a07c:	83 ec 14             	sub    esp,0x14
c000a07f:	8b 35 28 7b 02 c0    	mov    esi,DWORD PTR ds:0xc0027b28
c000a085:	89 f3                	mov    ebx,esi
c000a087:	eb 0a                	jmp    c000a093 <Phys::allocatePage()+0x19>
c000a089:	89 1d 28 7b 02 c0    	mov    DWORD PTR ds:0xc0027b28,ebx
c000a08f:	39 de                	cmp    esi,ebx
c000a091:	74 24                	je     c000a0b7 <Phys::allocatePage()+0x3d>
c000a093:	53                   	push   ebx
c000a094:	e8 42 ff ff ff       	call   c0009fdb <Phys::getPageState(unsigned long)>
c000a099:	5a                   	pop    edx
c000a09a:	84 c0                	test   al,al
c000a09c:	74 69                	je     c000a107 <Phys::allocatePage()+0x8d>
c000a09e:	43                   	inc    ebx
c000a09f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a0a5:	75 e2                	jne    c000a089 <Phys::allocatePage()+0xf>
c000a0a7:	31 db                	xor    ebx,ebx
c000a0a9:	c7 05 28 7b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027b28,0x0
c000a0b3:	39 de                	cmp    esi,ebx
c000a0b5:	75 dc                	jne    c000a093 <Phys::allocatePage()+0x19>
c000a0b7:	83 ec 0c             	sub    esp,0xc
c000a0ba:	80 35 4c 7b 02 c0 01 	xor    BYTE PTR ds:0xc0027b4c,0x1
c000a0c1:	68 88 3e 02 c0       	push   0xc0023e88
c000a0c6:	e8 e8 2b 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a0cb:	58                   	pop    eax
c000a0cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a0d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a0d4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a0da:	e8 63 28 00 00       	call   c000c942 <VAS::scanForEviction()>
c000a0df:	83 c4 10             	add    esp,0x10
c000a0e2:	85 c0                	test   eax,eax
c000a0e4:	75 62                	jne    c000a148 <Phys::allocatePage()+0xce>
c000a0e6:	83 ec 0c             	sub    esp,0xc
c000a0e9:	68 ac 3e 02 c0       	push   0xc0023eac
c000a0ee:	e8 6c a7 00 00       	call   c001485f <Krnl::panic(char const*)>
c000a0f3:	83 c4 10             	add    esp,0x10
c000a0f6:	8b 1d 28 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b28
c000a0fc:	53                   	push   ebx
c000a0fd:	e8 d9 fe ff ff       	call   c0009fdb <Phys::getPageState(unsigned long)>
c000a102:	5a                   	pop    edx
c000a103:	84 c0                	test   al,al
c000a105:	75 97                	jne    c000a09e <Phys::allocatePage()+0x24>
c000a107:	6a 01                	push   0x1
c000a109:	53                   	push   ebx
c000a10a:	e8 9a fe ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a10f:	5a                   	pop    edx
c000a110:	a1 34 7b 02 c0       	mov    eax,ds:0xc0027b34
c000a115:	59                   	pop    ecx
c000a116:	40                   	inc    eax
c000a117:	8b 15 28 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b28
c000a11d:	a3 34 7b 02 c0       	mov    ds:0xc0027b34,eax
c000a122:	c1 e2 0c             	shl    edx,0xc
c000a125:	52                   	push   edx
c000a126:	ff 35 38 7b 02 c0    	push   DWORD PTR ds:0xc0027b38
c000a12c:	50                   	push   eax
c000a12d:	68 fd 3d 02 c0       	push   0xc0023dfd
c000a132:	e8 7c 2b 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a137:	a1 28 7b 02 c0       	mov    eax,ds:0xc0027b28
c000a13c:	83 c4 10             	add    esp,0x10
c000a13f:	c1 e0 0c             	shl    eax,0xc
c000a142:	83 c4 14             	add    esp,0x14
c000a145:	5b                   	pop    ebx
c000a146:	5e                   	pop    esi
c000a147:	c3                   	ret    
c000a148:	83 ec 08             	sub    esp,0x8
c000a14b:	89 c2                	mov    edx,eax
c000a14d:	6a 01                	push   0x1
c000a14f:	c1 ea 0c             	shr    edx,0xc
c000a152:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a156:	52                   	push   edx
c000a157:	e8 4d fe ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a15c:	83 c4 10             	add    esp,0x10
c000a15f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a163:	eb dd                	jmp    c000a142 <Phys::allocatePage()+0xc8>

c000a165 <Phys::allocateContiguousPages(int)>:
c000a165:	57                   	push   edi
c000a166:	56                   	push   esi
c000a167:	53                   	push   ebx
c000a168:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a16c:	fa                   	cli    
c000a16d:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c000a173:	31 db                	xor    ebx,ebx
c000a175:	85 db                	test   ebx,ebx
c000a177:	75 11                	jne    c000a18a <Phys::allocateContiguousPages(int)+0x25>
c000a179:	e8 fc fe ff ff       	call   c000a07a <Phys::allocatePage()>
c000a17e:	83 fe 01             	cmp    esi,0x1
c000a181:	89 c7                	mov    edi,eax
c000a183:	74 21                	je     c000a1a6 <Phys::allocateContiguousPages(int)+0x41>
c000a185:	bb 01 00 00 00       	mov    ebx,0x1
c000a18a:	e8 eb fe ff ff       	call   c000a07a <Phys::allocatePage()>
c000a18f:	89 da                	mov    edx,ebx
c000a191:	c1 e2 0c             	shl    edx,0xc
c000a194:	01 fa                	add    edx,edi
c000a196:	39 c2                	cmp    edx,eax
c000a198:	74 20                	je     c000a1ba <Phys::allocateContiguousPages(int)+0x55>
c000a19a:	bb 01 00 00 00       	mov    ebx,0x1
c000a19f:	89 c7                	mov    edi,eax
c000a1a1:	83 fe 01             	cmp    esi,0x1
c000a1a4:	75 e4                	jne    c000a18a <Phys::allocateContiguousPages(int)+0x25>
c000a1a6:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000a1ab:	48                   	dec    eax
c000a1ac:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000a1b1:	75 01                	jne    c000a1b4 <Phys::allocateContiguousPages(int)+0x4f>
c000a1b3:	fb                   	sti    
c000a1b4:	89 f8                	mov    eax,edi
c000a1b6:	5b                   	pop    ebx
c000a1b7:	5e                   	pop    esi
c000a1b8:	5f                   	pop    edi
c000a1b9:	c3                   	ret    
c000a1ba:	43                   	inc    ebx
c000a1bb:	39 f3                	cmp    ebx,esi
c000a1bd:	75 b6                	jne    c000a175 <Phys::allocateContiguousPages(int)+0x10>
c000a1bf:	eb e5                	jmp    c000a1a6 <Phys::allocateContiguousPages(int)+0x41>

c000a1c1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a1c1:	56                   	push   esi
c000a1c2:	53                   	push   ebx
c000a1c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a1c7:	39 1d 2c 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b2c,ebx
c000a1cd:	73 06                	jae    c000a1d5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a1cf:	89 1d 2c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b2c,ebx
c000a1d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1d9:	c1 eb 0c             	shr    ebx,0xc
c000a1dc:	c1 e8 0c             	shr    eax,0xc
c000a1df:	39 d8                	cmp    eax,ebx
c000a1e1:	73 13                	jae    c000a1f6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a1e3:	6a 00                	push   0x0
c000a1e5:	8d 70 01             	lea    esi,[eax+0x1]
c000a1e8:	50                   	push   eax
c000a1e9:	e8 bb fd ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a1ee:	5a                   	pop    edx
c000a1ef:	89 f0                	mov    eax,esi
c000a1f1:	59                   	pop    ecx
c000a1f2:	39 f3                	cmp    ebx,esi
c000a1f4:	75 ed                	jne    c000a1e3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a1f6:	5b                   	pop    ebx
c000a1f7:	5e                   	pop    esi
c000a1f8:	c3                   	ret    

c000a1f9 <Phys::physicalMemorySetup(unsigned int)>:
c000a1f9:	55                   	push   ebp
c000a1fa:	57                   	push   edi
c000a1fb:	56                   	push   esi
c000a1fc:	53                   	push   ebx
c000a1fd:	31 db                	xor    ebx,ebx
c000a1ff:	83 ec 40             	sub    esp,0x40
c000a202:	6a 10                	push   0x10
c000a204:	6a 00                	push   0x0
c000a206:	68 3c 7b 02 c0       	push   0xc0027b3c
c000a20b:	e8 74 64 ff ff       	call   c0000684 <memset>
c000a210:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a214:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a219:	05 00 10 00 00       	add    eax,0x1000
c000a21e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a222:	5a                   	pop    edx
c000a223:	59                   	pop    ecx
c000a224:	50                   	push   eax
c000a225:	68 1b 3e 02 c0       	push   0xc0023e1b
c000a22a:	e8 84 2a 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	83 ec 08             	sub    esp,0x8
c000a235:	6a 01                	push   0x1
c000a237:	53                   	push   ebx
c000a238:	43                   	inc    ebx
c000a239:	e8 6b fd ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a23e:	83 c4 10             	add    esp,0x10
c000a241:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a247:	75 e9                	jne    c000a232 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a249:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a250:	66 85 c0             	test   ax,ax
c000a253:	0f 84 8e 01 00 00    	je     c000a3e7 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a25d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a265:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a269:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a26e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a272:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a27a:	eb 15                	jmp    c000a291 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a27c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a280:	83 c3 18             	add    ebx,0x18
c000a283:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a287:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a28b:	0f 84 66 01 00 00    	je     c000a3f7 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a291:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a294:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a297:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a29a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a29e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a2a2:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a2a4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a2a7:	01 f0                	add    eax,esi
c000a2a9:	55                   	push   ebp
c000a2aa:	11 fa                	adc    edx,edi
c000a2ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2b0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a2b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a2b8:	56                   	push   esi
c000a2b9:	68 dc 3e 02 c0       	push   0xc0023edc
c000a2be:	e8 f0 29 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a2c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2c7:	83 c4 10             	add    esp,0x10
c000a2ca:	09 f8                	or     eax,edi
c000a2cc:	0f 85 25 01 00 00    	jne    c000a3f7 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a2d2:	4d                   	dec    ebp
c000a2d3:	75 a7                	jne    c000a27c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a2d5:	ba 00 00 08 00       	mov    edx,0x80000
c000a2da:	89 c1                	mov    ecx,eax
c000a2dc:	39 f2                	cmp    edx,esi
c000a2de:	19 f9                	sbb    ecx,edi
c000a2e0:	0f 82 a7 00 00 00    	jb     c000a38d <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a2e6:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a2ea:	89 c1                	mov    ecx,eax
c000a2ec:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a2f0:	0f 83 97 00 00 00    	jae    c000a38d <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a2f6:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a2fb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a2ff:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a303:	39 fa                	cmp    edx,edi
c000a305:	19 e8                	sbb    eax,ebp
c000a307:	0f 82 a5 01 00 00    	jb     c000a4b2 <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a30d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a311:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a315:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a31b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a320:	83 d5 ff             	adc    ebp,0xffffffff
c000a323:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a327:	31 c0                	xor    eax,eax
c000a329:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a32d:	39 fa                	cmp    edx,edi
c000a32f:	89 c1                	mov    ecx,eax
c000a331:	19 e9                	sbb    ecx,ebp
c000a333:	0f 83 43 ff ff ff    	jae    c000a27c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a339:	be 00 00 08 00       	mov    esi,0x80000
c000a33e:	57                   	push   edi
c000a33f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a343:	57                   	push   edi
c000a344:	56                   	push   esi
c000a345:	68 00 3f 02 c0       	push   0xc0023f00
c000a34a:	e8 64 29 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a34f:	5d                   	pop    ebp
c000a350:	58                   	pop    eax
c000a351:	57                   	push   edi
c000a352:	56                   	push   esi
c000a353:	e8 69 fe ff ff       	call   c000a1c1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a358:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a35c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a360:	83 c4 0c             	add    esp,0xc
c000a363:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a367:	03 05 38 7b 02 c0    	add    eax,DWORD PTR ds:0xc0027b38
c000a36d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a374:	a3 38 7b 02 c0       	mov    ds:0xc0027b38,eax
c000a379:	52                   	push   edx
c000a37a:	50                   	push   eax
c000a37b:	68 41 3e 02 c0       	push   0xc0023e41
c000a380:	e8 2e 29 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a385:	83 c4 10             	add    esp,0x10
c000a388:	e9 ef fe ff ff       	jmp    c000a27c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a38d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a391:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a395:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a399:	39 ea                	cmp    edx,ebp
c000a39b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a39f:	0f 82 d7 fe ff ff    	jb     c000a27c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3a5:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a3aa:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a3ae:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a3b2:	0f 83 c4 fe ff ff    	jae    c000a27c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3b8:	39 ee                	cmp    esi,ebp
c000a3ba:	89 f8                	mov    eax,edi
c000a3bc:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a3c0:	0f 83 78 ff ff ff    	jae    c000a33e <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a3c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a3ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a3ce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a3d2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a3d6:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a3da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3e2:	e9 57 ff ff ff       	jmp    c000a33e <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a3e7:	83 ec 0c             	sub    esp,0xc
c000a3ea:	68 33 3e 02 c0       	push   0xc0023e33
c000a3ef:	e8 6b a4 00 00       	call   c001485f <Krnl::panic(char const*)>
c000a3f4:	83 c4 10             	add    esp,0x10
c000a3f7:	83 ec 08             	sub    esp,0x8
c000a3fa:	6a 00                	push   0x0
c000a3fc:	6a 05                	push   0x5
c000a3fe:	e8 a6 fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a403:	58                   	pop    eax
c000a404:	5a                   	pop    edx
c000a405:	6a 00                	push   0x0
c000a407:	6a 06                	push   0x6
c000a409:	e8 9b fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a40e:	59                   	pop    ecx
c000a40f:	5b                   	pop    ebx
c000a410:	bb 60 00 00 00       	mov    ebx,0x60
c000a415:	6a 00                	push   0x0
c000a417:	6a 07                	push   0x7
c000a419:	e8 8b fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a41e:	83 05 38 7b 02 c0 03 	add    DWORD PTR ds:0xc0027b38,0x3
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	83 ec 08             	sub    esp,0x8
c000a42b:	6a 00                	push   0x0
c000a42d:	53                   	push   ebx
c000a42e:	43                   	inc    ebx
c000a42f:	e8 75 fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a43d:	75 e9                	jne    c000a428 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a43f:	a1 38 7b 02 c0       	mov    eax,ds:0xc0027b38
c000a444:	bb 40 01 00 00       	mov    ebx,0x140
c000a449:	83 c0 20             	add    eax,0x20
c000a44c:	a3 38 7b 02 c0       	mov    ds:0xc0027b38,eax
c000a451:	eb 22                	jmp    c000a475 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a453:	83 ec 08             	sub    esp,0x8
c000a456:	6a 00                	push   0x0
c000a458:	53                   	push   ebx
c000a459:	43                   	inc    ebx
c000a45a:	e8 4a fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a45f:	a1 38 7b 02 c0       	mov    eax,ds:0xc0027b38
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	40                   	inc    eax
c000a468:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a46e:	a3 38 7b 02 c0       	mov    ds:0xc0027b38,eax
c000a473:	74 07                	je     c000a47c <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a475:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a47a:	7e d7                	jle    c000a453 <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a47c:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a481:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a486:	7f 22                	jg     c000a4aa <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a488:	83 ec 08             	sub    esp,0x8
c000a48b:	6a 00                	push   0x0
c000a48d:	53                   	push   ebx
c000a48e:	43                   	inc    ebx
c000a48f:	e8 15 fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a494:	a1 38 7b 02 c0       	mov    eax,ds:0xc0027b38
c000a499:	83 c4 10             	add    esp,0x10
c000a49c:	40                   	inc    eax
c000a49d:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a4a3:	a3 38 7b 02 c0       	mov    ds:0xc0027b38,eax
c000a4a8:	75 d7                	jne    c000a481 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a4aa:	83 c4 3c             	add    esp,0x3c
c000a4ad:	5b                   	pop    ebx
c000a4ae:	5e                   	pop    esi
c000a4af:	5f                   	pop    edi
c000a4b0:	5d                   	pop    ebp
c000a4b1:	c3                   	ret    
c000a4b2:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a4ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a4c2:	e9 46 fe ff ff       	jmp    c000a30d <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a4c7:	90                   	nop

c000a4c8 <Pipe::isAtty()>:
c000a4c8:	31 c0                	xor    eax,eax
c000a4ca:	c3                   	ret    
c000a4cb:	90                   	nop

c000a4cc <Pipe::~Pipe()>:
c000a4cc:	83 ec 0c             	sub    esp,0xc
c000a4cf:	ba 6c 3f 02 c0       	mov    edx,0xc0023f6c
c000a4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4d8:	89 10                	mov    DWORD PTR [eax],edx
c000a4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4de:	83 ec 0c             	sub    esp,0xc
c000a4e1:	50                   	push   eax
c000a4e2:	e8 45 12 00 00       	call   c000b72c <UnixFile::~UnixFile()>
c000a4e7:	83 c4 10             	add    esp,0x10
c000a4ea:	90                   	nop
c000a4eb:	83 c4 0c             	add    esp,0xc
c000a4ee:	c3                   	ret    
c000a4ef:	90                   	nop

c000a4f0 <Pipe::~Pipe()>:
c000a4f0:	83 ec 0c             	sub    esp,0xc
c000a4f3:	83 ec 0c             	sub    esp,0xc
c000a4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4fa:	e8 cd ff ff ff       	call   c000a4cc <Pipe::~Pipe()>
c000a4ff:	83 c4 10             	add    esp,0x10
c000a502:	83 ec 08             	sub    esp,0x8
c000a505:	6a 20                	push   0x20
c000a507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a50b:	e8 c2 26 00 00       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000a510:	83 c4 10             	add    esp,0x10
c000a513:	83 c4 0c             	add    esp,0xc
c000a516:	c3                   	ret    
c000a517:	90                   	nop

c000a518 <Pipe::read(unsigned long long, void*, int*)>:
c000a518:	55                   	push   ebp
c000a519:	57                   	push   edi
c000a51a:	56                   	push   esi
c000a51b:	53                   	push   ebx
c000a51c:	83 ec 1c             	sub    esp,0x1c
c000a51f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a523:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a527:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a52b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a52e:	89 c8                	mov    eax,ecx
c000a530:	99                   	cdq    
c000a531:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a535:	74 24                	je     c000a55b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a537:	39 f9                	cmp    ecx,edi
c000a539:	89 d1                	mov    ecx,edx
c000a53b:	19 f1                	sbb    ecx,esi
c000a53d:	73 1c                	jae    c000a55b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a53f:	fa                   	cli    
c000a540:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c000a546:	e8 e5 de 00 00       	call   c0018430 <schedule()>
c000a54b:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000a550:	48                   	dec    eax
c000a551:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000a556:	75 d3                	jne    c000a52b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a558:	fb                   	sti    
c000a559:	eb d0                	jmp    c000a52b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a55b:	39 f8                	cmp    eax,edi
c000a55d:	89 d1                	mov    ecx,edx
c000a55f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a562:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a566:	19 f1                	sbb    ecx,esi
c000a568:	73 07                	jae    c000a571 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a56a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a56d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a571:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a574:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a577:	29 f7                	sub    edi,esi
c000a579:	89 f8                	mov    eax,edi
c000a57b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a57f:	99                   	cdq    
c000a580:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a587:	19 d0                	sbb    eax,edx
c000a589:	73 07                	jae    c000a592 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a58b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a58e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a592:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a595:	89 ea                	mov    edx,ebp
c000a597:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a59b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a5a0:	74 0d                	je     c000a5af <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a5a2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a5a5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a5a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a5ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5af:	85 d2                	test   edx,edx
c000a5b1:	74 11                	je     c000a5c4 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a5b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a5b7:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a5ba:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a5be:	89 d1                	mov    ecx,edx
c000a5c0:	89 c7                	mov    edi,eax
c000a5c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a5c7:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a5ca:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a5cd:	99                   	cdq    
c000a5ce:	89 f7                	mov    edi,esi
c000a5d0:	03 04 24             	add    eax,DWORD PTR [esp]
c000a5d3:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a5d7:	c1 ff 1f             	sar    edi,0x1f
c000a5da:	57                   	push   edi
c000a5db:	56                   	push   esi
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	e8 f1 7e 01 00       	call   c00224d4 <__umoddi3>
c000a5e3:	83 c4 10             	add    esp,0x10
c000a5e6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a5e9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a5ee:	75 10                	jne    c000a600 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a5f0:	83 ec 0c             	sub    esp,0xc
c000a5f3:	68 29 3f 02 c0       	push   0xc0023f29
c000a5f8:	e8 62 a2 00 00       	call   c001485f <Krnl::panic(char const*)>
c000a5fd:	83 c4 10             	add    esp,0x10
c000a600:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a604:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a607:	89 10                	mov    DWORD PTR [eax],edx
c000a609:	83 c4 1c             	add    esp,0x1c
c000a60c:	31 c0                	xor    eax,eax
c000a60e:	5b                   	pop    ebx
c000a60f:	5e                   	pop    esi
c000a610:	5f                   	pop    edi
c000a611:	5d                   	pop    ebp
c000a612:	c3                   	ret    
c000a613:	90                   	nop

c000a614 <Pipe::write(unsigned long long, void*, int*)>:
c000a614:	55                   	push   ebp
c000a615:	57                   	push   edi
c000a616:	56                   	push   esi
c000a617:	53                   	push   ebx
c000a618:	83 ec 1c             	sub    esp,0x1c
c000a61b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a61f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a623:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a626:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a62a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a62d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a631:	89 d8                	mov    eax,ebx
c000a633:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a636:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a63a:	89 d6                	mov    esi,edx
c000a63c:	89 d7                	mov    edi,edx
c000a63e:	c1 ff 1f             	sar    edi,0x1f
c000a641:	03 34 24             	add    esi,DWORD PTR [esp]
c000a644:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a648:	c1 f8 1f             	sar    eax,0x1f
c000a64b:	39 f3                	cmp    ebx,esi
c000a64d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a655:	19 f8                	sbb    eax,edi
c000a657:	b8 01 00 00 00       	mov    eax,0x1
c000a65c:	72 6e                	jb     c000a6cc <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a65e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a661:	01 d0                	add    eax,edx
c000a663:	99                   	cdq    
c000a664:	f7 fb                	idiv   ebx
c000a666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a66a:	29 d3                	sub    ebx,edx
c000a66c:	89 d7                	mov    edi,edx
c000a66e:	89 de                	mov    esi,ebx
c000a670:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a673:	c1 fb 1f             	sar    ebx,0x1f
c000a676:	39 f2                	cmp    edx,esi
c000a678:	19 d8                	sbb    eax,ebx
c000a67a:	b8 00 00 00 00       	mov    eax,0x0
c000a67f:	72 04                	jb     c000a685 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a681:	89 d0                	mov    eax,edx
c000a683:	29 f0                	sub    eax,esi
c000a685:	89 d3                	mov    ebx,edx
c000a687:	29 c3                	sub    ebx,eax
c000a689:	74 0b                	je     c000a696 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a68b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a68e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a692:	89 d9                	mov    ecx,ebx
c000a694:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a696:	85 c0                	test   eax,eax
c000a698:	74 0d                	je     c000a6a7 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a69a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a69e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a6a1:	89 de                	mov    esi,ebx
c000a6a3:	89 c1                	mov    ecx,eax
c000a6a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6a7:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a6aa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a6af:	75 10                	jne    c000a6c1 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a6b1:	83 ec 0c             	sub    esp,0xc
c000a6b4:	68 45 3f 02 c0       	push   0xc0023f45
c000a6b9:	e8 a1 a1 00 00       	call   c001485f <Krnl::panic(char const*)>
c000a6be:	83 c4 10             	add    esp,0x10
c000a6c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a6c5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a6c8:	89 08                	mov    DWORD PTR [eax],ecx
c000a6ca:	31 c0                	xor    eax,eax
c000a6cc:	83 c4 1c             	add    esp,0x1c
c000a6cf:	5b                   	pop    ebx
c000a6d0:	5e                   	pop    esi
c000a6d1:	5f                   	pop    edi
c000a6d2:	5d                   	pop    ebp
c000a6d3:	c3                   	ret    

c000a6d4 <Pipe::Pipe(int)>:
c000a6d4:	83 ec 0c             	sub    esp,0xc
c000a6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6db:	83 ec 08             	sub    esp,0x8
c000a6de:	6a 00                	push   0x0
c000a6e0:	50                   	push   eax
c000a6e1:	e8 64 0e 00 00       	call   c000b54a <UnixFile::UnixFile(int)>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	ba 6c 3f 02 c0       	mov    edx,0xc0023f6c
c000a6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f2:	89 10                	mov    DWORD PTR [eax],edx
c000a6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a6fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a703:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a70e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a715:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a719:	83 ec 0c             	sub    esp,0xc
c000a71c:	50                   	push   eax
c000a71d:	e8 a1 f2 ff ff       	call   c00099c3 <malloc>
c000a722:	83 c4 10             	add    esp,0x10
c000a725:	89 c2                	mov    edx,eax
c000a727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a72b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a732:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a736:	90                   	nop
c000a737:	83 c4 0c             	add    esp,0xc
c000a73a:	c3                   	ret    
c000a73b:	90                   	nop

c000a73c <VgaText::isAtty()>:
c000a73c:	b0 01                	mov    al,0x1
c000a73e:	c3                   	ret    
c000a73f:	90                   	nop

c000a740 <VgaText::~VgaText()>:
c000a740:	83 ec 0c             	sub    esp,0xc
c000a743:	ba f4 3f 02 c0       	mov    edx,0xc0023ff4
c000a748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74c:	89 10                	mov    DWORD PTR [eax],edx
c000a74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a752:	83 ec 0c             	sub    esp,0xc
c000a755:	50                   	push   eax
c000a756:	e8 d1 0f 00 00       	call   c000b72c <UnixFile::~UnixFile()>
c000a75b:	83 c4 10             	add    esp,0x10
c000a75e:	90                   	nop
c000a75f:	83 c4 0c             	add    esp,0xc
c000a762:	c3                   	ret    
c000a763:	90                   	nop

c000a764 <VgaText::~VgaText()>:
c000a764:	83 ec 0c             	sub    esp,0xc
c000a767:	83 ec 0c             	sub    esp,0xc
c000a76a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a76e:	e8 cd ff ff ff       	call   c000a740 <VgaText::~VgaText()>
c000a773:	83 c4 10             	add    esp,0x10
c000a776:	83 ec 08             	sub    esp,0x8
c000a779:	68 c4 02 00 00       	push   0x2c4
c000a77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a782:	e8 4b 24 00 00       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000a787:	83 c4 10             	add    esp,0x10
c000a78a:	83 c4 0c             	add    esp,0xc
c000a78d:	c3                   	ret    

c000a78e <VgaText::read(unsigned long long, void*, int*)>:
c000a78e:	83 ec 10             	sub    esp,0x10
c000a791:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a795:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a79d:	e8 e0 57 00 00       	call   c000ff82 <readKeyboard(VgaText*, char*, unsigned long)>
c000a7a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a7a6:	89 02                	mov    DWORD PTR [edx],eax
c000a7a8:	31 c0                	xor    eax,eax
c000a7aa:	83 c4 1c             	add    esp,0x1c
c000a7ad:	c3                   	ret    

c000a7ae <setTerminalScrollLock(bool)>:
c000a7ae:	c3                   	ret    

c000a7af <addToTerminalCycle(VgaText*)>:
c000a7af:	8b 15 80 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b80
c000a7b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7b9:	85 d2                	test   edx,edx
c000a7bb:	75 09                	jne    c000a7c6 <addToTerminalCycle(VgaText*)+0x17>
c000a7bd:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a7c0:	a3 80 7b 02 c0       	mov    ds:0xc0027b80,eax
c000a7c5:	c3                   	ret    
c000a7c6:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a7c9:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a7cc:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a7cf:	c3                   	ret    

c000a7d0 <installVgaTextImplementation()>:
c000a7d0:	83 ec 10             	sub    esp,0x10
c000a7d3:	6a 20                	push   0x20
c000a7d5:	6a 00                	push   0x0
c000a7d7:	68 60 7b 02 c0       	push   0xc0027b60
c000a7dc:	e8 a3 5e ff ff       	call   c0000684 <memset>
c000a7e1:	83 c4 1c             	add    esp,0x1c
c000a7e4:	c3                   	ret    

c000a7e5 <scrollTerminalScrollLock(int)>:
c000a7e5:	c3                   	ret    

c000a7e6 <VgaText::updateTitle()>:
c000a7e6:	53                   	push   ebx
c000a7e7:	31 c0                	xor    eax,eax
c000a7e9:	83 ec 58             	sub    esp,0x58
c000a7ec:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a7f0:	89 e1                	mov    ecx,esp
c000a7f2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a7f6:	40                   	inc    eax
c000a7f7:	83 f8 50             	cmp    eax,0x50
c000a7fa:	75 f6                	jne    c000a7f2 <VgaText::updateTitle()+0xc>
c000a7fc:	31 c0                	xor    eax,eax
c000a7fe:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a805:	84 db                	test   bl,bl
c000a807:	74 06                	je     c000a80f <VgaText::updateTitle()+0x29>
c000a809:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a80c:	40                   	inc    eax
c000a80d:	eb ef                	jmp    c000a7fe <VgaText::updateTitle()+0x18>
c000a80f:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a812:	85 c0                	test   eax,eax
c000a814:	74 09                	je     c000a81f <VgaText::updateTitle()+0x39>
c000a816:	53                   	push   ebx
c000a817:	53                   	push   ebx
c000a818:	51                   	push   ecx
c000a819:	52                   	push   edx
c000a81a:	ff d0                	call   eax
c000a81c:	83 c4 10             	add    esp,0x10
c000a81f:	83 c4 58             	add    esp,0x58
c000a822:	5b                   	pop    ebx
c000a823:	c3                   	ret    

c000a824 <VgaText::load()>:
c000a824:	53                   	push   ebx
c000a825:	31 c0                	xor    eax,eax
c000a827:	83 ec 58             	sub    esp,0x58
c000a82a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a82e:	89 e2                	mov    edx,esp
c000a830:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a834:	40                   	inc    eax
c000a835:	83 f8 50             	cmp    eax,0x50
c000a838:	75 f6                	jne    c000a830 <VgaText::load()+0xc>
c000a83a:	31 c0                	xor    eax,eax
c000a83c:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a843:	84 c9                	test   cl,cl
c000a845:	74 06                	je     c000a84d <VgaText::load()+0x29>
c000a847:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a84a:	40                   	inc    eax
c000a84b:	eb ef                	jmp    c000a83c <VgaText::load()+0x18>
c000a84d:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a850:	85 c0                	test   eax,eax
c000a852:	74 09                	je     c000a85d <VgaText::load()+0x39>
c000a854:	51                   	push   ecx
c000a855:	51                   	push   ecx
c000a856:	52                   	push   edx
c000a857:	53                   	push   ebx
c000a858:	ff d0                	call   eax
c000a85a:	83 c4 10             	add    esp,0x10
c000a85d:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a860:	85 c0                	test   eax,eax
c000a862:	74 09                	je     c000a86d <VgaText::load()+0x49>
c000a864:	83 ec 0c             	sub    esp,0xc
c000a867:	53                   	push   ebx
c000a868:	ff d0                	call   eax
c000a86a:	83 c4 10             	add    esp,0x10
c000a86d:	83 c4 58             	add    esp,0x58
c000a870:	5b                   	pop    ebx
c000a871:	c3                   	ret    

c000a872 <VgaText::updateCursor()>:
c000a872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a876:	39 05 84 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b84,eax
c000a87c:	75 09                	jne    c000a887 <VgaText::updateCursor()+0x15>
c000a87e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a881:	85 c0                	test   eax,eax
c000a883:	74 02                	je     c000a887 <VgaText::updateCursor()+0x15>
c000a885:	ff e0                	jmp    eax
c000a887:	c3                   	ret    

c000a888 <VgaText::doANSI_SGR(int)>:
c000a888:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a890:	85 d2                	test   edx,edx
c000a892:	75 0b                	jne    c000a89f <VgaText::doANSI_SGR(int)+0x17>
c000a894:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a897:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a89a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a89d:	eb 59                	jmp    c000a8f8 <VgaText::doANSI_SGR(int)+0x70>
c000a89f:	83 fa 07             	cmp    edx,0x7
c000a8a2:	75 0b                	jne    c000a8af <VgaText::doANSI_SGR(int)+0x27>
c000a8a4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a8a7:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a8aa:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a8ad:	eb 49                	jmp    c000a8f8 <VgaText::doANSI_SGR(int)+0x70>
c000a8af:	83 fa 1b             	cmp    edx,0x1b
c000a8b2:	74 e0                	je     c000a894 <VgaText::doANSI_SGR(int)+0xc>
c000a8b4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a8b7:	83 f9 07             	cmp    ecx,0x7
c000a8ba:	77 09                	ja     c000a8c5 <VgaText::doANSI_SGR(int)+0x3d>
c000a8bc:	8b 14 8d 00 6f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9100]
c000a8c3:	eb 20                	jmp    c000a8e5 <VgaText::doANSI_SGR(int)+0x5d>
c000a8c5:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a8c8:	83 f9 07             	cmp    ecx,0x7
c000a8cb:	77 09                	ja     c000a8d6 <VgaText::doANSI_SGR(int)+0x4e>
c000a8cd:	8b 14 8d 00 6f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9100]
c000a8d4:	eb 22                	jmp    c000a8f8 <VgaText::doANSI_SGR(int)+0x70>
c000a8d6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a8d9:	83 f9 07             	cmp    ecx,0x7
c000a8dc:	77 0b                	ja     c000a8e9 <VgaText::doANSI_SGR(int)+0x61>
c000a8de:	8b 14 95 b8 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9248]
c000a8e5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8e8:	c3                   	ret    
c000a8e9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a8ec:	83 f9 07             	cmp    ecx,0x7
c000a8ef:	77 0a                	ja     c000a8fb <VgaText::doANSI_SGR(int)+0x73>
c000a8f1:	8b 14 95 90 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9270]
c000a8f8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a8fb:	c3                   	ret    

c000a8fc <VgaText::setDefaultBgColour(VgaColour)>:
c000a8fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a900:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a904:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a907:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a90a:	c3                   	ret    
c000a90b:	90                   	nop

c000a90c <VgaText::setDefaultFgColour(VgaColour)>:
c000a90c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a910:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a914:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a917:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a91a:	c3                   	ret    
c000a91b:	90                   	nop

c000a91c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a91c:	53                   	push   ebx
c000a91d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a921:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a925:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a929:	51                   	push   ecx
c000a92a:	e8 cd ff ff ff       	call   c000a8fc <VgaText::setDefaultBgColour(VgaColour)>
c000a92f:	58                   	pop    eax
c000a930:	5a                   	pop    edx
c000a931:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a935:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a939:	5b                   	pop    ebx
c000a93a:	eb d0                	jmp    c000a90c <VgaText::setDefaultFgColour(VgaColour)>

c000a93c <VgaText::setTitleTextColour(VgaColour)>:
c000a93c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a940:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a944:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a947:	e9 9a fe ff ff       	jmp    c000a7e6 <VgaText::updateTitle()>

c000a94c <VgaText::setTitleColour(VgaColour)>:
c000a94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a950:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a954:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a957:	e9 8a fe ff ff       	jmp    c000a7e6 <VgaText::updateTitle()>

c000a95c <VgaText::setTitle(char*)>:
c000a95c:	53                   	push   ebx
c000a95d:	83 ec 10             	sub    esp,0x10
c000a960:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a968:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a96e:	50                   	push   eax
c000a96f:	e8 cc 5d ff ff       	call   c0000740 <strcpy>
c000a974:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a978:	83 c4 18             	add    esp,0x18
c000a97b:	5b                   	pop    ebx
c000a97c:	e9 65 fe ff ff       	jmp    c000a7e6 <VgaText::updateTitle()>
c000a981:	90                   	nop

c000a982 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a982:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a986:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a98b:	83 e0 0f             	and    eax,0xf
c000a98e:	c1 e2 04             	shl    edx,0x4
c000a991:	09 d0                	or     eax,edx
c000a993:	c3                   	ret    

c000a994 <VgaText::scrollScreen()>:
c000a994:	55                   	push   ebp
c000a995:	b9 01 00 00 00       	mov    ecx,0x1
c000a99a:	57                   	push   edi
c000a99b:	56                   	push   esi
c000a99c:	53                   	push   ebx
c000a99d:	83 ec 0c             	sub    esp,0xc
c000a9a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9a4:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a9aa:	31 ff                	xor    edi,edi
c000a9ac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a9af:	83 f9 17             	cmp    ecx,0x17
c000a9b2:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a9b5:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a9bc:	75 27                	jne    c000a9e5 <VgaText::scrollScreen()+0x51>
c000a9be:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a9c1:	01 f5                	add    ebp,esi
c000a9c3:	f7 c7 01 00 00 00    	test   edi,0x1
c000a9c9:	74 16                	je     c000a9e1 <VgaText::scrollScreen()+0x4d>
c000a9cb:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a9cf:	50                   	push   eax
c000a9d0:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a9d4:	50                   	push   eax
c000a9d5:	e8 a8 ff ff ff       	call   c000a982 <VgaText::combineColours(unsigned char, unsigned char)>
c000a9da:	5a                   	pop    edx
c000a9db:	5a                   	pop    edx
c000a9dc:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a9df:	eb 04                	jmp    c000a9e5 <VgaText::scrollScreen()+0x51>
c000a9e1:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a9e5:	47                   	inc    edi
c000a9e6:	46                   	inc    esi
c000a9e7:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a9ed:	75 bd                	jne    c000a9ac <VgaText::scrollScreen()+0x18>
c000a9ef:	41                   	inc    ecx
c000a9f0:	83 f9 18             	cmp    ecx,0x18
c000a9f3:	75 af                	jne    c000a9a4 <VgaText::scrollScreen()+0x10>
c000a9f5:	39 1d 84 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b84,ebx
c000a9fb:	75 1b                	jne    c000aa18 <VgaText::scrollScreen()+0x84>
c000a9fd:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aa01:	74 05                	je     c000aa08 <VgaText::scrollScreen()+0x74>
c000aa03:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000aa06:	eb 10                	jmp    c000aa18 <VgaText::scrollScreen()+0x84>
c000aa08:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000aa0b:	85 c0                	test   eax,eax
c000aa0d:	74 09                	je     c000aa18 <VgaText::scrollScreen()+0x84>
c000aa0f:	83 ec 0c             	sub    esp,0xc
c000aa12:	53                   	push   ebx
c000aa13:	ff d0                	call   eax
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000aa1c:	83 c4 0c             	add    esp,0xc
c000aa1f:	5b                   	pop    ebx
c000aa20:	5e                   	pop    esi
c000aa21:	5f                   	pop    edi
c000aa22:	5d                   	pop    ebp
c000aa23:	e9 4a fe ff ff       	jmp    c000a872 <VgaText::updateCursor()>

c000aa28 <VgaText::combineCharAndColour(char, unsigned char)>:
c000aa28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000aa2d:	c1 e0 08             	shl    eax,0x8
c000aa30:	89 c2                	mov    edx,eax
c000aa32:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000aa37:	09 d0                	or     eax,edx
c000aa39:	c3                   	ret    

c000aa3a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000aa3a:	56                   	push   esi
c000aa3b:	53                   	push   ebx
c000aa3c:	51                   	push   ecx
c000aa3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aa41:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa46:	50                   	push   eax
c000aa47:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa4c:	50                   	push   eax
c000aa4d:	e8 30 ff ff ff       	call   c000a982 <VgaText::combineColours(unsigned char, unsigned char)>
c000aa52:	5b                   	pop    ebx
c000aa53:	0f b6 c0             	movzx  eax,al
c000aa56:	5e                   	pop    esi
c000aa57:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000aa5c:	50                   	push   eax
c000aa5d:	53                   	push   ebx
c000aa5e:	e8 c5 ff ff ff       	call   c000aa28 <VgaText::combineCharAndColour(char, unsigned char)>
c000aa63:	5a                   	pop    edx
c000aa64:	5e                   	pop    esi
c000aa65:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000aa68:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000aa6e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aa72:	0f b7 d2             	movzx  edx,dx
c000aa75:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aa79:	39 0d 84 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b84,ecx
c000aa7f:	75 10                	jne    c000aa91 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aa81:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aa84:	85 c0                	test   eax,eax
c000aa86:	74 09                	je     c000aa91 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aa88:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aa8c:	5a                   	pop    edx
c000aa8d:	5b                   	pop    ebx
c000aa8e:	5e                   	pop    esi
c000aa8f:	ff e0                	jmp    eax
c000aa91:	58                   	pop    eax
c000aa92:	5b                   	pop    ebx
c000aa93:	5e                   	pop    esi
c000aa94:	c3                   	ret    
c000aa95:	90                   	nop

c000aa96 <VgaText::getCursorX()>:
c000aa96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa9a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aa9d:	c3                   	ret    

c000aa9e <VgaText::getCursorY()>:
c000aa9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaa2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aaa5:	c3                   	ret    

c000aaa6 <VgaText::setCursor(int, int)>:
c000aaa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aaae:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aab1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aab5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aab8:	e9 b5 fd ff ff       	jmp    c000a872 <VgaText::updateCursor()>

c000aabd <setActiveTerminal(VgaText*)>:
c000aabd:	53                   	push   ebx
c000aabe:	83 ec 08             	sub    esp,0x8
c000aac1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aac5:	85 db                	test   ebx,ebx
c000aac7:	75 11                	jne    c000aada <setActiveTerminal(VgaText*)+0x1d>
c000aac9:	c7 44 24 10 80 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f80
c000aad1:	83 c4 08             	add    esp,0x8
c000aad4:	5b                   	pop    ebx
c000aad5:	e9 85 9d 00 00       	jmp    c001485f <Krnl::panic(char const*)>
c000aada:	a1 84 7b 02 c0       	mov    eax,ds:0xc0027b84
c000aadf:	85 c0                	test   eax,eax
c000aae1:	74 0c                	je     c000aaef <setActiveTerminal(VgaText*)+0x32>
c000aae3:	83 ec 0c             	sub    esp,0xc
c000aae6:	50                   	push   eax
c000aae7:	e8 86 fd ff ff       	call   c000a872 <VgaText::updateCursor()>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 1d 84 7b 02 c0    	mov    DWORD PTR ds:0xc0027b84,ebx
c000aaf5:	51                   	push   ecx
c000aaf6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aaf9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aafc:	53                   	push   ebx
c000aafd:	e8 a4 ff ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000ab02:	83 c4 10             	add    esp,0x10
c000ab05:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ab09:	75 07                	jne    c000ab12 <setActiveTerminal(VgaText*)+0x55>
c000ab0b:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ab12:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab16:	83 c4 08             	add    esp,0x8
c000ab19:	5b                   	pop    ebx
c000ab1a:	e9 05 fd ff ff       	jmp    c000a824 <VgaText::load()>

c000ab1f <doTerminalCycle()>:
c000ab1f:	83 ec 18             	sub    esp,0x18
c000ab22:	a1 80 7b 02 c0       	mov    eax,ds:0xc0027b80
c000ab27:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ab2a:	50                   	push   eax
c000ab2b:	a3 80 7b 02 c0       	mov    ds:0xc0027b80,eax
c000ab30:	e8 88 ff ff ff       	call   c000aabd <setActiveTerminal(VgaText*)>
c000ab35:	83 c4 1c             	add    esp,0x1c
c000ab38:	c3                   	ret    
c000ab39:	90                   	nop

c000ab3a <VgaText::setCursorX(int)>:
c000ab3a:	83 ec 10             	sub    esp,0x10
c000ab3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab41:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ab44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab48:	50                   	push   eax
c000ab49:	e8 58 ff ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000ab4e:	83 c4 1c             	add    esp,0x1c
c000ab51:	c3                   	ret    

c000ab52 <VgaText::setCursorY(int)>:
c000ab52:	83 ec 10             	sub    esp,0x10
c000ab55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab5d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000ab60:	50                   	push   eax
c000ab61:	e8 40 ff ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000ab66:	83 c4 1c             	add    esp,0x1c
c000ab69:	c3                   	ret    

c000ab6a <VgaText::incrementCursor(bool)>:
c000ab6a:	56                   	push   esi
c000ab6b:	53                   	push   ebx
c000ab6c:	51                   	push   ecx
c000ab6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ab75:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ab78:	40                   	inc    eax
c000ab79:	83 f8 50             	cmp    eax,0x50
c000ab7c:	74 05                	je     c000ab83 <VgaText::incrementCursor(bool)+0x19>
c000ab7e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab81:	eb 24                	jmp    c000aba7 <VgaText::incrementCursor(bool)+0x3d>
c000ab83:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ab86:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ab8d:	8d 50 01             	lea    edx,[eax+0x1]
c000ab90:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ab93:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ab96:	75 0f                	jne    c000aba7 <VgaText::incrementCursor(bool)+0x3d>
c000ab98:	83 ec 0c             	sub    esp,0xc
c000ab9b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ab9e:	53                   	push   ebx
c000ab9f:	e8 f0 fd ff ff       	call   c000a994 <VgaText::scrollScreen()>
c000aba4:	83 c4 10             	add    esp,0x10
c000aba7:	89 f0                	mov    eax,esi
c000aba9:	84 c0                	test   al,al
c000abab:	74 0c                	je     c000abb9 <VgaText::incrementCursor(bool)+0x4f>
c000abad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abb1:	5a                   	pop    edx
c000abb2:	5b                   	pop    ebx
c000abb3:	5e                   	pop    esi
c000abb4:	e9 b9 fc ff ff       	jmp    c000a872 <VgaText::updateCursor()>
c000abb9:	58                   	pop    eax
c000abba:	5b                   	pop    ebx
c000abbb:	5e                   	pop    esi
c000abbc:	c3                   	ret    
c000abbd:	90                   	nop

c000abbe <VgaText::decrementCursor(bool)>:
c000abbe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abc2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000abc6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000abc9:	85 c0                	test   eax,eax
c000abcb:	74 04                	je     c000abd1 <VgaText::decrementCursor(bool)+0x13>
c000abcd:	48                   	dec    eax
c000abce:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000abd1:	84 c9                	test   cl,cl
c000abd3:	74 09                	je     c000abde <VgaText::decrementCursor(bool)+0x20>
c000abd5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abd9:	e9 94 fc ff ff       	jmp    c000a872 <VgaText::updateCursor()>
c000abde:	c3                   	ret    
c000abdf:	90                   	nop

c000abe0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000abe0:	53                   	push   ebx
c000abe1:	83 ec 08             	sub    esp,0x8
c000abe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abe8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000abf0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000abf4:	3c 07                	cmp    al,0x7
c000abf6:	75 2a                	jne    c000ac22 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000abf8:	a1 38 7c 02 c0       	mov    eax,ds:0xc0027c38
c000abfd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ac05:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ac0d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ac15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac19:	83 c4 08             	add    esp,0x8
c000ac1c:	5b                   	pop    ebx
c000ac1d:	e9 ec 2e 00 00       	jmp    c000db0e <Buzzer::beep(int, int, bool)>
c000ac22:	3c 0d                	cmp    al,0xd
c000ac24:	75 09                	jne    c000ac2f <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000ac26:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac2d:	eb 2c                	jmp    c000ac5b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000ac2f:	3c 0a                	cmp    al,0xa
c000ac31:	75 31                	jne    c000ac64 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000ac33:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac36:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac3d:	8d 50 01             	lea    edx,[eax+0x1]
c000ac40:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ac43:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ac46:	75 0f                	jne    c000ac57 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ac4e:	53                   	push   ebx
c000ac4f:	e8 40 fd ff ff       	call   c000a994 <VgaText::scrollScreen()>
c000ac54:	83 c4 10             	add    esp,0x10
c000ac57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac5b:	83 c4 08             	add    esp,0x8
c000ac5e:	5b                   	pop    ebx
c000ac5f:	e9 0e fc ff ff       	jmp    c000a872 <VgaText::updateCursor()>
c000ac64:	3c 08                	cmp    al,0x8
c000ac66:	75 25                	jne    c000ac8d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000ac68:	50                   	push   eax
c000ac69:	50                   	push   eax
c000ac6a:	6a 01                	push   0x1
c000ac6c:	53                   	push   ebx
c000ac6d:	e8 4c ff ff ff       	call   c000abbe <VgaText::decrementCursor(bool)>
c000ac72:	5a                   	pop    edx
c000ac73:	59                   	pop    ecx
c000ac74:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ac77:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ac7a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac7d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac80:	6a 20                	push   0x20
c000ac82:	53                   	push   ebx
c000ac83:	e8 b2 fd ff ff       	call   c000aa3a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ac88:	83 c4 28             	add    esp,0x28
c000ac8b:	5b                   	pop    ebx
c000ac8c:	c3                   	ret    
c000ac8d:	83 ec 08             	sub    esp,0x8
c000ac90:	0f be c0             	movsx  eax,al
c000ac93:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ac96:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ac99:	51                   	push   ecx
c000ac9a:	52                   	push   edx
c000ac9b:	50                   	push   eax
c000ac9c:	53                   	push   ebx
c000ac9d:	e8 98 fd ff ff       	call   c000aa3a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aca2:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000aca6:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000acae:	83 c4 28             	add    esp,0x28
c000acb1:	5b                   	pop    ebx
c000acb2:	e9 b3 fe ff ff       	jmp    c000ab6a <VgaText::incrementCursor(bool)>
c000acb7:	90                   	nop

c000acb8 <VgaText::doUpdate()>:
c000acb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acbc:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000acbf:	85 c0                	test   eax,eax
c000acc1:	74 02                	je     c000acc5 <VgaText::doUpdate()+0xd>
c000acc3:	ff e0                	jmp    eax
c000acc5:	c3                   	ret    

c000acc6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000acc6:	55                   	push   ebp
c000acc7:	31 ed                	xor    ebp,ebp
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	53                   	push   ebx
c000accc:	83 ec 1c             	sub    esp,0x1c
c000accf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000acd3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000acd8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000acdf:	50                   	push   eax
c000ace0:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ace5:	50                   	push   eax
c000ace6:	e8 97 fc ff ff       	call   c000a982 <VgaText::combineColours(unsigned char, unsigned char)>
c000aceb:	59                   	pop    ecx
c000acec:	0f b6 c0             	movzx  eax,al
c000acef:	5e                   	pop    esi
c000acf0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000acf5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000acf9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000acfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad00:	0f b7 f6             	movzx  esi,si
c000ad03:	01 f6                	add    esi,esi
c000ad05:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad08:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad0b:	84 c0                	test   al,al
c000ad0d:	0f 84 fd 00 00 00    	je     c000ae10 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000ad13:	3c 0d                	cmp    al,0xd
c000ad15:	75 0c                	jne    c000ad23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000ad17:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad1e:	e9 e7 00 00 00       	jmp    c000ae0a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad23:	3c 0a                	cmp    al,0xa
c000ad25:	75 47                	jne    c000ad6e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000ad27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad2a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad31:	8d 48 01             	lea    ecx,[eax+0x1]
c000ad34:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000ad37:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000ad3a:	75 0f                	jne    c000ad4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000ad3c:	83 ec 0c             	sub    esp,0xc
c000ad3f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ad42:	53                   	push   ebx
c000ad43:	e8 4c fc ff ff       	call   c000a994 <VgaText::scrollScreen()>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	83 ec 0c             	sub    esp,0xc
c000ad4e:	31 ed                	xor    ebp,ebp
c000ad50:	53                   	push   ebx
c000ad51:	e8 1c fb ff ff       	call   c000a872 <VgaText::updateCursor()>
c000ad56:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad5b:	83 c4 10             	add    esp,0x10
c000ad5e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad61:	0f b7 f6             	movzx  esi,si
c000ad64:	01 f6                	add    esi,esi
c000ad66:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad69:	e9 9c 00 00 00       	jmp    c000ae0a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad6e:	3c 08                	cmp    al,0x8
c000ad70:	75 35                	jne    c000ada7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000ad72:	56                   	push   esi
c000ad73:	56                   	push   esi
c000ad74:	6a 01                	push   0x1
c000ad76:	53                   	push   ebx
c000ad77:	e8 42 fe ff ff       	call   c000abbe <VgaText::decrementCursor(bool)>
c000ad7c:	58                   	pop    eax
c000ad7d:	5a                   	pop    edx
c000ad7e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ad81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ad84:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ad87:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ad8a:	6a 20                	push   0x20
c000ad8c:	53                   	push   ebx
c000ad8d:	e8 a8 fc ff ff       	call   c000aa3a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ad92:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad97:	83 c4 20             	add    esp,0x20
c000ad9a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad9d:	0f b7 f6             	movzx  esi,si
c000ada0:	01 f6                	add    esi,esi
c000ada2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ada5:	eb 63                	jmp    c000ae0a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ada7:	51                   	push   ecx
c000ada8:	51                   	push   ecx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	50                   	push   eax
c000adae:	e8 75 fc ff ff       	call   c000aa28 <VgaText::combineCharAndColour(char, unsigned char)>
c000adb3:	83 c4 10             	add    esp,0x10
c000adb6:	66 89 06             	mov    WORD PTR [esi],ax
c000adb9:	39 1d 84 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b84,ebx
c000adbf:	75 21                	jne    c000ade2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000adc1:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000adc4:	85 c0                	test   eax,eax
c000adc6:	74 1a                	je     c000ade2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000adc8:	52                   	push   edx
c000adc9:	52                   	push   edx
c000adca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000adcd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000add0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000add4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000add8:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000addb:	51                   	push   ecx
c000addc:	53                   	push   ebx
c000addd:	ff d0                	call   eax
c000addf:	83 c4 20             	add    esp,0x20
c000ade2:	83 c6 02             	add    esi,0x2
c000ade5:	50                   	push   eax
c000ade6:	50                   	push   eax
c000ade7:	6a 00                	push   0x0
c000ade9:	53                   	push   ebx
c000adea:	e8 7b fd ff ff       	call   c000ab6a <VgaText::incrementCursor(bool)>
c000adef:	83 c4 10             	add    esp,0x10
c000adf2:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000adf6:	75 0d                	jne    c000ae05 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000adf8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000adfd:	0f b7 f6             	movzx  esi,si
c000ae00:	01 f6                	add    esi,esi
c000ae02:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ae05:	bd 01 00 00 00       	mov    ebp,0x1
c000ae0a:	47                   	inc    edi
c000ae0b:	e9 f8 fe ff ff       	jmp    c000ad08 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ae10:	83 ec 0c             	sub    esp,0xc
c000ae13:	53                   	push   ebx
c000ae14:	e8 59 fa ff ff       	call   c000a872 <VgaText::updateCursor()>
c000ae19:	83 c4 10             	add    esp,0x10
c000ae1c:	89 e8                	mov    eax,ebp
c000ae1e:	84 c0                	test   al,al
c000ae20:	74 0c                	je     c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ae22:	83 ec 0c             	sub    esp,0xc
c000ae25:	53                   	push   ebx
c000ae26:	e8 8d fe ff ff       	call   c000acb8 <VgaText::doUpdate()>
c000ae2b:	83 c4 10             	add    esp,0x10
c000ae2e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae35:	83 c4 1c             	add    esp,0x1c
c000ae38:	5b                   	pop    ebx
c000ae39:	5e                   	pop    esi
c000ae3a:	5f                   	pop    edi
c000ae3b:	5d                   	pop    ebp
c000ae3c:	c3                   	ret    
c000ae3d:	90                   	nop

c000ae3e <VgaText::clearScreen()>:
c000ae3e:	57                   	push   edi
c000ae3f:	56                   	push   esi
c000ae40:	31 f6                	xor    esi,esi
c000ae42:	53                   	push   ebx
c000ae43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae47:	52                   	push   edx
c000ae48:	6a 00                	push   0x0
c000ae4a:	6a 00                	push   0x0
c000ae4c:	53                   	push   ebx
c000ae4d:	e8 54 fc ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000ae52:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ae59:	83 c4 10             	add    esp,0x10
c000ae5c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000ae5f:	7e 20                	jle    c000ae81 <VgaText::clearScreen()+0x43>
c000ae61:	31 ff                	xor    edi,edi
c000ae63:	50                   	push   eax
c000ae64:	50                   	push   eax
c000ae65:	56                   	push   esi
c000ae66:	57                   	push   edi
c000ae67:	47                   	inc    edi
c000ae68:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ae6b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ae6e:	6a 20                	push   0x20
c000ae70:	53                   	push   ebx
c000ae71:	e8 c4 fb ff ff       	call   c000aa3a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ae76:	83 c4 20             	add    esp,0x20
c000ae79:	83 ff 50             	cmp    edi,0x50
c000ae7c:	75 e5                	jne    c000ae63 <VgaText::clearScreen()+0x25>
c000ae7e:	46                   	inc    esi
c000ae7f:	eb db                	jmp    c000ae5c <VgaText::clearScreen()+0x1e>
c000ae81:	83 ec 0c             	sub    esp,0xc
c000ae84:	53                   	push   ebx
c000ae85:	e8 2e fe ff ff       	call   c000acb8 <VgaText::doUpdate()>
c000ae8a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	5b                   	pop    ebx
c000ae95:	5e                   	pop    esi
c000ae96:	5f                   	pop    edi
c000ae97:	c3                   	ret    

c000ae98 <VgaText::putchar(char)>:
c000ae98:	56                   	push   esi
c000ae99:	53                   	push   ebx
c000ae9a:	83 ec 14             	sub    esp,0x14
c000ae9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aea1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aea5:	3c 5b                	cmp    al,0x5b
c000aea7:	75 18                	jne    c000aec1 <VgaText::putchar(char)+0x29>
c000aea9:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000aead:	74 1f                	je     c000aece <VgaText::putchar(char)+0x36>
c000aeaf:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000aeb5:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000aebc:	e9 bd 00 00 00       	jmp    c000af7e <VgaText::putchar(char)+0xe6>
c000aec1:	3c 1b                	cmp    al,0x1b
c000aec3:	75 09                	jne    c000aece <VgaText::putchar(char)+0x36>
c000aec5:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000aec9:	e9 b0 00 00 00       	jmp    c000af7e <VgaText::putchar(char)+0xe6>
c000aece:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000aed1:	84 c9                	test   cl,cl
c000aed3:	0f 84 92 00 00 00    	je     c000af6b <VgaText::putchar(char)+0xd3>
c000aed9:	8d 50 c0             	lea    edx,[eax-0x40]
c000aedc:	80 fa 3e             	cmp    dl,0x3e
c000aedf:	77 76                	ja     c000af57 <VgaText::putchar(char)+0xbf>
c000aee1:	3c 6d                	cmp    al,0x6d
c000aee3:	75 47                	jne    c000af2c <VgaText::putchar(char)+0x94>
c000aee5:	31 f6                	xor    esi,esi
c000aee7:	31 d2                	xor    edx,edx
c000aee9:	31 c0                	xor    eax,eax
c000aeeb:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000aeee:	7e 2d                	jle    c000af1d <VgaText::putchar(char)+0x85>
c000aef0:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000aef5:	80 fa 3b             	cmp    dl,0x3b
c000aef8:	75 17                	jne    c000af11 <VgaText::putchar(char)+0x79>
c000aefa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000aefe:	50                   	push   eax
c000aeff:	53                   	push   ebx
c000af00:	e8 83 f9 ff ff       	call   c000a888 <VgaText::doANSI_SGR(int)>
c000af05:	59                   	pop    ecx
c000af06:	31 d2                	xor    edx,edx
c000af08:	58                   	pop    eax
c000af09:	31 c0                	xor    eax,eax
c000af0b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000af0f:	eb 09                	jmp    c000af1a <VgaText::putchar(char)+0x82>
c000af11:	6b c0 0a             	imul   eax,eax,0xa
c000af14:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000af18:	88 ca                	mov    dl,cl
c000af1a:	46                   	inc    esi
c000af1b:	eb ce                	jmp    c000aeeb <VgaText::putchar(char)+0x53>
c000af1d:	84 d2                	test   dl,dl
c000af1f:	74 2e                	je     c000af4f <VgaText::putchar(char)+0xb7>
c000af21:	50                   	push   eax
c000af22:	53                   	push   ebx
c000af23:	e8 60 f9 ff ff       	call   c000a888 <VgaText::doANSI_SGR(int)>
c000af28:	58                   	pop    eax
c000af29:	5a                   	pop    edx
c000af2a:	eb 23                	jmp    c000af4f <VgaText::putchar(char)+0xb7>
c000af2c:	3c 4a                	cmp    al,0x4a
c000af2e:	75 1f                	jne    c000af4f <VgaText::putchar(char)+0xb7>
c000af30:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000af34:	75 19                	jne    c000af4f <VgaText::putchar(char)+0xb7>
c000af36:	83 ec 0c             	sub    esp,0xc
c000af39:	53                   	push   ebx
c000af3a:	e8 ff fe ff ff       	call   c000ae3e <VgaText::clearScreen()>
c000af3f:	83 c4 0c             	add    esp,0xc
c000af42:	6a 00                	push   0x0
c000af44:	6a 00                	push   0x0
c000af46:	53                   	push   ebx
c000af47:	e8 5a fb ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000af55:	eb 27                	jmp    c000af7e <VgaText::putchar(char)+0xe6>
c000af57:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000af5a:	83 fa 0e             	cmp    edx,0xe
c000af5d:	7f 1f                	jg     c000af7e <VgaText::putchar(char)+0xe6>
c000af5f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000af62:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000af65:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000af69:	eb 13                	jmp    c000af7e <VgaText::putchar(char)+0xe6>
c000af6b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000af6e:	0f be c0             	movsx  eax,al
c000af71:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000af74:	50                   	push   eax
c000af75:	53                   	push   ebx
c000af76:	e8 65 fc ff ff       	call   c000abe0 <VgaText::putchar(char, VgaColour, VgaColour)>
c000af7b:	83 c4 10             	add    esp,0x10
c000af7e:	83 c4 14             	add    esp,0x14
c000af81:	5b                   	pop    ebx
c000af82:	5e                   	pop    esi
c000af83:	c3                   	ret    

c000af84 <VgaText::putx(unsigned int)>:
c000af84:	57                   	push   edi
c000af85:	b9 11 00 00 00       	mov    ecx,0x11
c000af8a:	56                   	push   esi
c000af8b:	be 8e 3f 02 c0       	mov    esi,0xc0023f8e
c000af90:	53                   	push   ebx
c000af91:	83 ec 20             	sub    esp,0x20
c000af94:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000af98:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000af9c:	fc                   	cld    
c000af9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000af9f:	be 08 00 00 00       	mov    esi,0x8
c000afa4:	50                   	push   eax
c000afa5:	50                   	push   eax
c000afa6:	89 d8                	mov    eax,ebx
c000afa8:	c1 e3 04             	shl    ebx,0x4
c000afab:	c1 e8 1c             	shr    eax,0x1c
c000afae:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000afb3:	50                   	push   eax
c000afb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000afb8:	e8 db fe ff ff       	call   c000ae98 <VgaText::putchar(char)>
c000afbd:	83 c4 10             	add    esp,0x10
c000afc0:	4e                   	dec    esi
c000afc1:	75 e1                	jne    c000afa4 <VgaText::putx(unsigned int)+0x20>
c000afc3:	83 c4 20             	add    esp,0x20
c000afc6:	5b                   	pop    ebx
c000afc7:	5e                   	pop    esi
c000afc8:	5f                   	pop    edi
c000afc9:	c3                   	ret    

c000afca <VgaText::puts(char const*)>:
c000afca:	53                   	push   ebx
c000afcb:	83 ec 08             	sub    esp,0x8
c000afce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000afd2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000afd5:	84 c0                	test   al,al
c000afd7:	74 12                	je     c000afeb <VgaText::puts(char const*)+0x21>
c000afd9:	43                   	inc    ebx
c000afda:	51                   	push   ecx
c000afdb:	51                   	push   ecx
c000afdc:	50                   	push   eax
c000afdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe1:	e8 b2 fe ff ff       	call   c000ae98 <VgaText::putchar(char)>
c000afe6:	83 c4 10             	add    esp,0x10
c000afe9:	eb e7                	jmp    c000afd2 <VgaText::puts(char const*)+0x8>
c000afeb:	83 c4 08             	add    esp,0x8
c000afee:	5b                   	pop    ebx
c000afef:	c3                   	ret    

c000aff0 <VgaText::VgaText(char const*)>:
c000aff0:	57                   	push   edi
c000aff1:	56                   	push   esi
c000aff2:	53                   	push   ebx
c000aff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff7:	83 ec 08             	sub    esp,0x8
c000affa:	6a 00                	push   0x0
c000affc:	50                   	push   eax
c000affd:	e8 48 05 00 00       	call   c000b54a <UnixFile::UnixFile(int)>
c000b002:	83 c4 10             	add    esp,0x10
c000b005:	ba f4 3f 02 c0       	mov    edx,0xc0023ff4
c000b00a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00e:	89 10                	mov    DWORD PTR [eax],edx
c000b010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b014:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01f:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02a:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b032:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b03a:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b045:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b050:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05b:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b066:	8d 50 60             	lea    edx,[eax+0x60]
c000b069:	bb 60 7b 02 c0       	mov    ebx,0xc0027b60
c000b06e:	b8 08 00 00 00       	mov    eax,0x8
c000b073:	fc                   	cld    
c000b074:	89 d7                	mov    edi,edx
c000b076:	89 de                	mov    esi,ebx
c000b078:	89 c1                	mov    ecx,eax
c000b07a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b080:	05 82 00 00 00       	add    eax,0x82
c000b085:	83 ec 08             	sub    esp,0x8
c000b088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b08c:	50                   	push   eax
c000b08d:	e8 ae 56 ff ff       	call   c0000740 <strcpy>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b099:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b0a0:	83 ec 0c             	sub    esp,0xc
c000b0a3:	6a 01                	push   0x1
c000b0a5:	e8 e3 08 00 00       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 c2                	mov    edx,eax
c000b0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b0b6:	8b 1d 30 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c30
c000b0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b0c3:	89 c6                	mov    esi,eax
c000b0c5:	e8 b0 ef ff ff       	call   c000a07a <Phys::allocatePage()>
c000b0ca:	68 05 0c 00 00       	push   0xc05
c000b0cf:	56                   	push   esi
c000b0d0:	50                   	push   eax
c000b0d1:	53                   	push   ebx
c000b0d2:	e8 5d 0f 00 00       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b0d7:	83 c4 10             	add    esp,0x10
c000b0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b0e1:	83 ec 04             	sub    esp,0x4
c000b0e4:	68 00 0f 00 00       	push   0xf00
c000b0e9:	6a 00                	push   0x0
c000b0eb:	50                   	push   eax
c000b0ec:	e8 93 55 ff ff       	call   c0000684 <memset>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	83 ec 04             	sub    esp,0x4
c000b0f7:	6a 00                	push   0x0
c000b0f9:	6a 07                	push   0x7
c000b0fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0ff:	e8 18 f8 ff ff       	call   c000a91c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b104:	83 c4 10             	add    esp,0x10
c000b107:	83 ec 04             	sub    esp,0x4
c000b10a:	6a 00                	push   0x0
c000b10c:	6a 00                	push   0x0
c000b10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b112:	e8 8f f9 ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000b117:	83 c4 10             	add    esp,0x10
c000b11a:	83 ec 0c             	sub    esp,0xc
c000b11d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b121:	e8 18 fd ff ff       	call   c000ae3e <VgaText::clearScreen()>
c000b126:	83 c4 10             	add    esp,0x10
c000b129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12d:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b135:	05 02 01 00 00       	add    eax,0x102
c000b13a:	83 ec 04             	sub    esp,0x4
c000b13d:	68 96 00 00 00       	push   0x96
c000b142:	6a 00                	push   0x0
c000b144:	50                   	push   eax
c000b145:	e8 3a 55 ff ff       	call   c0000684 <memset>
c000b14a:	83 c4 10             	add    esp,0x10
c000b14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b151:	05 98 01 00 00       	add    eax,0x198
c000b156:	83 ec 04             	sub    esp,0x4
c000b159:	68 2c 01 00 00       	push   0x12c
c000b15e:	6a 00                	push   0x0
c000b160:	50                   	push   eax
c000b161:	e8 1e 55 ff ff       	call   c0000684 <memset>
c000b166:	83 c4 10             	add    esp,0x10
c000b169:	90                   	nop
c000b16a:	5b                   	pop    ebx
c000b16b:	5e                   	pop    esi
c000b16c:	5f                   	pop    edi
c000b16d:	c3                   	ret    

c000b16e <VgaText::receiveKey(unsigned char)>:
c000b16e:	55                   	push   ebp
c000b16f:	57                   	push   edi
c000b170:	56                   	push   esi
c000b171:	53                   	push   ebx
c000b172:	83 ec 1c             	sub    esp,0x1c
c000b175:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b179:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b17d:	84 db                	test   bl,bl
c000b17f:	0f 84 c9 00 00 00    	je     c000b24e <VgaText::receiveKey(unsigned char)+0xe0>
c000b185:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b18b:	80 fb 08             	cmp    bl,0x8
c000b18e:	75 2c                	jne    c000b1bc <VgaText::receiveKey(unsigned char)+0x4e>
c000b190:	83 ec 0c             	sub    esp,0xc
c000b193:	57                   	push   edi
c000b194:	e8 07 55 ff ff       	call   c00006a0 <strlen>
c000b199:	83 c4 10             	add    esp,0x10
c000b19c:	85 c0                	test   eax,eax
c000b19e:	74 41                	je     c000b1e1 <VgaText::receiveKey(unsigned char)+0x73>
c000b1a0:	50                   	push   eax
c000b1a1:	50                   	push   eax
c000b1a2:	6a 08                	push   0x8
c000b1a4:	56                   	push   esi
c000b1a5:	e8 ee fc ff ff       	call   c000ae98 <VgaText::putchar(char)>
c000b1aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b1ad:	e8 ee 54 ff ff       	call   c00006a0 <strlen>
c000b1b2:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b1ba:	eb 22                	jmp    c000b1de <VgaText::receiveKey(unsigned char)+0x70>
c000b1bc:	0f be c3             	movsx  eax,bl
c000b1bf:	52                   	push   edx
c000b1c0:	52                   	push   edx
c000b1c1:	50                   	push   eax
c000b1c2:	56                   	push   esi
c000b1c3:	e8 d0 fc ff ff       	call   c000ae98 <VgaText::putchar(char)>
c000b1c8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b1cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b1d1:	59                   	pop    ecx
c000b1d2:	5d                   	pop    ebp
c000b1d3:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b1d7:	50                   	push   eax
c000b1d8:	57                   	push   edi
c000b1d9:	e8 a2 56 ff ff       	call   c0000880 <strcat>
c000b1de:	83 c4 10             	add    esp,0x10
c000b1e1:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b1e8:	75 05                	jne    c000b1ef <VgaText::receiveKey(unsigned char)+0x81>
c000b1ea:	80 fb 0a             	cmp    bl,0xa
c000b1ed:	75 53                	jne    c000b242 <VgaText::receiveKey(unsigned char)+0xd4>
c000b1ef:	83 ec 0c             	sub    esp,0xc
c000b1f2:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000b1f8:	53                   	push   ebx
c000b1f9:	e8 a2 54 ff ff       	call   c00006a0 <strlen>
c000b1fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b201:	89 c5                	mov    ebp,eax
c000b203:	e8 98 54 ff ff       	call   c00006a0 <strlen>
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b20f:	3d 2c 01 00 00       	cmp    eax,0x12c
c000b214:	76 10                	jbe    c000b226 <VgaText::receiveKey(unsigned char)+0xb8>
c000b216:	83 ec 0c             	sub    esp,0xc
c000b219:	68 9f 3f 02 c0       	push   0xc0023f9f
c000b21e:	e8 3c 96 00 00       	call   c001485f <Krnl::panic(char const*)>
c000b223:	83 c4 10             	add    esp,0x10
c000b226:	50                   	push   eax
c000b227:	50                   	push   eax
c000b228:	57                   	push   edi
c000b229:	53                   	push   ebx
c000b22a:	e8 51 56 ff ff       	call   c0000880 <strcat>
c000b22f:	83 c4 0c             	add    esp,0xc
c000b232:	68 96 00 00 00       	push   0x96
c000b237:	6a 00                	push   0x0
c000b239:	57                   	push   edi
c000b23a:	e8 45 54 ff ff       	call   c0000684 <memset>
c000b23f:	83 c4 10             	add    esp,0x10
c000b242:	83 ec 0c             	sub    esp,0xc
c000b245:	56                   	push   esi
c000b246:	e8 6d fa ff ff       	call   c000acb8 <VgaText::doUpdate()>
c000b24b:	83 c4 10             	add    esp,0x10
c000b24e:	83 c4 1c             	add    esp,0x1c
c000b251:	5b                   	pop    ebx
c000b252:	5e                   	pop    esi
c000b253:	5f                   	pop    edi
c000b254:	5d                   	pop    ebp
c000b255:	c3                   	ret    

c000b256 <VgaText::write(unsigned long long, void*, int*)>:
c000b256:	55                   	push   ebp
c000b257:	57                   	push   edi
c000b258:	56                   	push   esi
c000b259:	53                   	push   ebx
c000b25a:	83 ec 0c             	sub    esp,0xc
c000b25d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b261:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b265:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b269:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b270:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b273:	39 eb                	cmp    ebx,ebp
c000b275:	74 13                	je     c000b28a <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b277:	43                   	inc    ebx
c000b278:	50                   	push   eax
c000b279:	50                   	push   eax
c000b27a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b27e:	50                   	push   eax
c000b27f:	56                   	push   esi
c000b280:	e8 13 fc ff ff       	call   c000ae98 <VgaText::putchar(char)>
c000b285:	83 c4 10             	add    esp,0x10
c000b288:	eb e9                	jmp    c000b273 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b28a:	83 ec 0c             	sub    esp,0xc
c000b28d:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b294:	56                   	push   esi
c000b295:	e8 1e fa ff ff       	call   c000acb8 <VgaText::doUpdate()>
c000b29a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b29e:	89 38                	mov    DWORD PTR [eax],edi
c000b2a0:	83 c4 1c             	add    esp,0x1c
c000b2a3:	31 c0                	xor    eax,eax
c000b2a5:	5b                   	pop    ebx
c000b2a6:	5e                   	pop    esi
c000b2a7:	5f                   	pop    edi
c000b2a8:	5d                   	pop    ebp
c000b2a9:	c3                   	ret    

c000b2aa <newTerminal(char*)>:
c000b2aa:	83 ec 28             	sub    esp,0x28
c000b2ad:	68 c4 02 00 00       	push   0x2c4
c000b2b2:	e8 0c e7 ff ff       	call   c00099c3 <malloc>
c000b2b7:	5a                   	pop    edx
c000b2b8:	59                   	pop    ecx
c000b2b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b2bd:	50                   	push   eax
c000b2be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2c2:	e8 29 fd ff ff       	call   c000aff0 <VgaText::VgaText(char const*)>
c000b2c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2cb:	83 c4 2c             	add    esp,0x2c
c000b2ce:	c3                   	ret    
c000b2cf:	90                   	nop

c000b2d0 <TSS::TSS()>:
c000b2d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b2db:	90                   	nop
c000b2dc:	c3                   	ret    
c000b2dd:	90                   	nop
c000b2de:	66 90                	xchg   ax,ax

c000b2e0 <TSS::setESP(unsigned long)>:
c000b2e0:	55                   	push   ebp
c000b2e1:	89 e5                	mov    ebp,esp
c000b2e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2e9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b2ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b2ef:	90                   	nop
c000b2f0:	5d                   	pop    ebp
c000b2f1:	c3                   	ret    
c000b2f2:	66 90                	xchg   ax,ax

c000b2f4 <TSS::flush()>:
c000b2f4:	55                   	push   ebp
c000b2f5:	89 e5                	mov    ebp,esp
c000b2f7:	83 ec 10             	sub    esp,0x10
c000b2fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000b2ff:	83 c8 03             	or     eax,0x3
c000b302:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b306:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b30a:	66 89 d0             	mov    ax,dx
c000b30d:	0f 00 d8             	ltr    ax
c000b310:	90                   	nop
c000b311:	c9                   	leave  
c000b312:	c3                   	ret    
c000b313:	90                   	nop

c000b314 <TSS::setup(unsigned long, unsigned long)>:
c000b314:	55                   	push   ebp
c000b315:	89 e5                	mov    ebp,esp
c000b317:	83 ec 18             	sub    esp,0x18
c000b31a:	83 ec 0c             	sub    esp,0xc
c000b31d:	6a 68                	push   0x68
c000b31f:	e8 9f e6 ff ff       	call   c00099c3 <malloc>
c000b324:	83 c4 10             	add    esp,0x10
c000b327:	89 c2                	mov    edx,eax
c000b329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b32c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b32f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b335:	83 ec 04             	sub    esp,0x4
c000b338:	6a 68                	push   0x68
c000b33a:	6a 00                	push   0x0
c000b33c:	50                   	push   eax
c000b33d:	e8 42 53 ff ff       	call   c0000684 <memset>
c000b342:	83 c4 10             	add    esp,0x10
c000b345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b348:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b34b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b354:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b357:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b35d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b360:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b363:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b366:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b36c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b36f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b37b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b387:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b393:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b39c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b39f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3ab:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b3b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3b7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b3ba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b3bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b3c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b3c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3cf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b3d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3dc:	0f 20 da             	mov    edx,cr3
c000b3df:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b3e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b3e5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b3e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3ee:	83 ec 08             	sub    esp,0x8
c000b3f1:	50                   	push   eax
c000b3f2:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b3f5:	50                   	push   eax
c000b3f6:	e8 25 de ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b3fb:	83 c4 10             	add    esp,0x10
c000b3fe:	83 ec 08             	sub    esp,0x8
c000b401:	6a 68                	push   0x68
c000b403:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b406:	50                   	push   eax
c000b407:	e8 30 de ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b40c:	83 c4 10             	add    esp,0x10
c000b40f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b413:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b416:	83 e0 0f             	and    eax,0xf
c000b419:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b41c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b41f:	83 c8 40             	or     eax,0x40
c000b422:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b425:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000b42a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b430:	05 78 01 00 00       	add    eax,0x178
c000b435:	83 ec 04             	sub    esp,0x4
c000b438:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b43b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b43e:	50                   	push   eax
c000b43f:	e8 2c de ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b444:	83 c4 10             	add    esp,0x10
c000b447:	89 c2                	mov    edx,eax
c000b449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b44c:	89 10                	mov    DWORD PTR [eax],edx
c000b44e:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000b453:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b459:	05 78 01 00 00       	add    eax,0x178
c000b45e:	83 ec 0c             	sub    esp,0xc
c000b461:	50                   	push   eax
c000b462:	e8 33 de ff ff       	call   c000929a <GDT::flush()>
c000b467:	83 c4 10             	add    esp,0x10
c000b46a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b46d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b46f:	c9                   	leave  
c000b470:	c3                   	ret    
c000b471:	90                   	nop

c000b472 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b476:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b47a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b47d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b482:	75 08                	jne    c000b48c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b484:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b48a:	eb 38                	jmp    c000b4c4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b48c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b491:	75 17                	jne    c000b4aa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b493:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b498:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b49b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4a7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b4aa:	89 c1                	mov    ecx,eax
c000b4ac:	83 e1 fd             	and    ecx,0xfffffffd
c000b4af:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b4b5:	74 cd                	je     c000b484 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b4b7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b4bc:	83 e0 ef             	and    eax,0xffffffef
c000b4bf:	83 f8 08             	cmp    eax,0x8
c000b4c2:	76 c0                	jbe    c000b484 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b4c4:	31 c0                	xor    eax,eax
c000b4c6:	c3                   	ret    
c000b4c7:	90                   	nop

c000b4c8 <ReservedFilename::isAtty()>:
c000b4c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b4cf:	31 c0                	xor    eax,eax
c000b4d1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b4d7:	74 09                	je     c000b4e2 <ReservedFilename::isAtty()+0x1a>
c000b4d9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b4df:	0f 94 c0             	sete   al
c000b4e2:	c3                   	ret    
c000b4e3:	90                   	nop

c000b4e4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b4e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b4ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4f3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b4f8:	75 08                	jne    c000b502 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b4fa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b500:	eb 3d                	jmp    c000b53f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b502:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b507:	75 17                	jne    c000b520 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b509:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b50e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b511:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b517:	8b 10                	mov    edx,DWORD PTR [eax]
c000b519:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b51d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b520:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b525:	75 04                	jne    c000b52b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b527:	89 0a                	mov    DWORD PTR [edx],ecx
c000b529:	eb 14                	jmp    c000b53f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b52b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b530:	74 c8                	je     c000b4fa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b532:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b537:	83 e0 ef             	and    eax,0xffffffef
c000b53a:	83 f8 08             	cmp    eax,0x8
c000b53d:	76 bb                	jbe    c000b4fa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b53f:	31 c0                	xor    eax,eax
c000b541:	c3                   	ret    

c000b542 <UnixFile::getFileDescriptor()>:
c000b542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b549:	c3                   	ret    

c000b54a <UnixFile::UnixFile(int)>:
c000b54a:	53                   	push   ebx
c000b54b:	83 ec 28             	sub    esp,0x28
c000b54e:	ba bc 40 02 c0       	mov    edx,0xc00240bc
c000b553:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b557:	89 10                	mov    DWORD PTR [eax],edx
c000b559:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b561:	0f 8f 8c 01 00 00    	jg     c000b6f3 <UnixFile::UnixFile(int)+0x1a9>
c000b567:	a1 40 6f 02 c0       	mov    eax,ds:0xc0026f40
c000b56c:	8d 50 01             	lea    edx,[eax+0x1]
c000b56f:	89 15 40 6f 02 c0    	mov    DWORD PTR ds:0xc0026f40,edx
c000b575:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b579:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b57c:	83 ec 08             	sub    esp,0x8
c000b57f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b583:	68 18 7c 02 c0       	push   0xc0027c18
c000b588:	e8 2f 71 01 00       	call   c00226bc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b58d:	83 c4 10             	add    esp,0x10
c000b590:	a0 14 7c 02 c0       	mov    al,ds:0xc0027c14
c000b595:	83 f0 01             	xor    eax,0x1
c000b598:	84 c0                	test   al,al
c000b59a:	0f 84 54 01 00 00    	je     c000b6f4 <UnixFile::UnixFile(int)+0x1aa>
c000b5a0:	c6 05 14 7c 02 c0 01 	mov    BYTE PTR ds:0xc0027c14,0x1
c000b5a7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b5af:	83 ec 0c             	sub    esp,0xc
c000b5b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5b6:	e8 08 e4 ff ff       	call   c00099c3 <malloc>
c000b5bb:	83 c4 10             	add    esp,0x10
c000b5be:	89 c3                	mov    ebx,eax
c000b5c0:	83 ec 08             	sub    esp,0x8
c000b5c3:	68 03 ff ff 0f       	push   0xfffff03
c000b5c8:	53                   	push   ebx
c000b5c9:	e8 2c 01 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b5ce:	83 c4 10             	add    esp,0x10
c000b5d1:	89 1d 0c 7c 02 c0    	mov    DWORD PTR ds:0xc0027c0c,ebx
c000b5d7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b5df:	83 ec 0c             	sub    esp,0xc
c000b5e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e6:	e8 d8 e3 ff ff       	call   c00099c3 <malloc>
c000b5eb:	83 c4 10             	add    esp,0x10
c000b5ee:	89 c3                	mov    ebx,eax
c000b5f0:	83 ec 08             	sub    esp,0x8
c000b5f3:	68 01 ff ff 0f       	push   0xfffff01
c000b5f8:	53                   	push   ebx
c000b5f9:	e8 fc 00 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b5fe:	83 c4 10             	add    esp,0x10
c000b601:	89 1d 10 7c 02 c0    	mov    DWORD PTR ds:0xc0027c10,ebx
c000b607:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b60f:	83 ec 0c             	sub    esp,0xc
c000b612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b616:	e8 a8 e3 ff ff       	call   c00099c3 <malloc>
c000b61b:	83 c4 10             	add    esp,0x10
c000b61e:	89 c3                	mov    ebx,eax
c000b620:	83 ec 08             	sub    esp,0x8
c000b623:	68 00 ff ff 0f       	push   0xfffff00
c000b628:	53                   	push   ebx
c000b629:	e8 cc 00 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 1d 04 7c 02 c0    	mov    DWORD PTR ds:0xc0027c04,ebx
c000b637:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b63f:	83 ec 0c             	sub    esp,0xc
c000b642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b646:	e8 78 e3 ff ff       	call   c00099c3 <malloc>
c000b64b:	83 c4 10             	add    esp,0x10
c000b64e:	89 c3                	mov    ebx,eax
c000b650:	83 ec 08             	sub    esp,0x8
c000b653:	68 02 ff ff 0f       	push   0xfffff02
c000b658:	53                   	push   ebx
c000b659:	e8 9c 00 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	89 1d 08 7c 02 c0    	mov    DWORD PTR ds:0xc0027c08,ebx
c000b667:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b66f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b674:	7f 7e                	jg     c000b6f4 <UnixFile::UnixFile(int)+0x1aa>
c000b676:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b67e:	83 ec 0c             	sub    esp,0xc
c000b681:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b685:	e8 39 e3 ff ff       	call   c00099c3 <malloc>
c000b68a:	83 c4 10             	add    esp,0x10
c000b68d:	89 c3                	mov    ebx,eax
c000b68f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b693:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b698:	83 ec 08             	sub    esp,0x8
c000b69b:	50                   	push   eax
c000b69c:	53                   	push   ebx
c000b69d:	e8 58 00 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b6a2:	83 c4 10             	add    esp,0x10
c000b6a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6a9:	89 1c 85 e0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8420],ebx
c000b6b0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b6b8:	83 ec 0c             	sub    esp,0xc
c000b6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6bf:	e8 ff e2 ff ff       	call   c00099c3 <malloc>
c000b6c4:	83 c4 10             	add    esp,0x10
c000b6c7:	89 c3                	mov    ebx,eax
c000b6c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6cd:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b6d2:	83 ec 08             	sub    esp,0x8
c000b6d5:	50                   	push   eax
c000b6d6:	53                   	push   ebx
c000b6d7:	e8 1e 00 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b6dc:	83 c4 10             	add    esp,0x10
c000b6df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6e3:	89 1c 85 a0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8460],ebx
c000b6ea:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b6ee:	e9 7c ff ff ff       	jmp    c000b66f <UnixFile::UnixFile(int)+0x125>
c000b6f3:	90                   	nop
c000b6f4:	83 c4 28             	add    esp,0x28
c000b6f7:	5b                   	pop    ebx
c000b6f8:	c3                   	ret    
c000b6f9:	90                   	nop

c000b6fa <ReservedFilename::ReservedFilename(int)>:
c000b6fa:	83 ec 0c             	sub    esp,0xc
c000b6fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b701:	83 ec 08             	sub    esp,0x8
c000b704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b708:	50                   	push   eax
c000b709:	e8 3c fe ff ff       	call   c000b54a <UnixFile::UnixFile(int)>
c000b70e:	83 c4 10             	add    esp,0x10
c000b711:	ba d8 40 02 c0       	mov    edx,0xc00240d8
c000b716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71a:	89 10                	mov    DWORD PTR [eax],edx
c000b71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b720:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b724:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b727:	90                   	nop
c000b728:	83 c4 0c             	add    esp,0xc
c000b72b:	c3                   	ret    

c000b72c <UnixFile::~UnixFile()>:
c000b72c:	83 ec 1c             	sub    esp,0x1c
c000b72f:	ba bc 40 02 c0       	mov    edx,0xc00240bc
c000b734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b738:	89 10                	mov    DWORD PTR [eax],edx
c000b73a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b73e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b741:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b746:	7f 73                	jg     c000b7bb <UnixFile::~UnixFile()+0x8f>
c000b748:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b750:	83 ec 0c             	sub    esp,0xc
c000b753:	68 18 7c 02 c0       	push   0xc0027c18
c000b758:	e8 33 70 01 00       	call   c0022790 <LinkedList<UnixFile>::getFirstElement()>
c000b75d:	83 c4 10             	add    esp,0x10
c000b760:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b764:	83 ec 0c             	sub    esp,0xc
c000b767:	68 18 7c 02 c0       	push   0xc0027c18
c000b76c:	e8 27 70 01 00       	call   c0022798 <LinkedList<UnixFile>::removeFirst()>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b778:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b77c:	74 40                	je     c000b7be <UnixFile::~UnixFile()+0x92>
c000b77e:	83 ec 08             	sub    esp,0x8
c000b781:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b785:	68 18 7c 02 c0       	push   0xc0027c18
c000b78a:	e8 2d 6f 01 00       	call   c00226bc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b78f:	83 c4 10             	add    esp,0x10
c000b792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b796:	8d 50 01             	lea    edx,[eax+0x1]
c000b799:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b79d:	3d 88 13 00 00       	cmp    eax,0x1388
c000b7a2:	0f 94 c0             	sete   al
c000b7a5:	84 c0                	test   al,al
c000b7a7:	74 a7                	je     c000b750 <UnixFile::~UnixFile()+0x24>
c000b7a9:	83 ec 0c             	sub    esp,0xc
c000b7ac:	68 94 40 02 c0       	push   0xc0024094
c000b7b1:	e8 a9 90 00 00       	call   c001485f <Krnl::panic(char const*)>
c000b7b6:	83 c4 10             	add    esp,0x10
c000b7b9:	eb 95                	jmp    c000b750 <UnixFile::~UnixFile()+0x24>
c000b7bb:	90                   	nop
c000b7bc:	eb 01                	jmp    c000b7bf <UnixFile::~UnixFile()+0x93>
c000b7be:	90                   	nop
c000b7bf:	90                   	nop
c000b7c0:	83 c4 1c             	add    esp,0x1c
c000b7c3:	c3                   	ret    

c000b7c4 <UnixFile::~UnixFile()>:
c000b7c4:	83 ec 0c             	sub    esp,0xc
c000b7c7:	83 ec 0c             	sub    esp,0xc
c000b7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ce:	e8 59 ff ff ff       	call   c000b72c <UnixFile::~UnixFile()>
c000b7d3:	83 c4 10             	add    esp,0x10
c000b7d6:	83 ec 08             	sub    esp,0x8
c000b7d9:	6a 0c                	push   0xc
c000b7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7df:	e8 ee 13 00 00       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000b7e4:	83 c4 10             	add    esp,0x10
c000b7e7:	83 c4 0c             	add    esp,0xc
c000b7ea:	c3                   	ret    
c000b7eb:	90                   	nop

c000b7ec <ReservedFilename::~ReservedFilename()>:
c000b7ec:	83 ec 0c             	sub    esp,0xc
c000b7ef:	ba d8 40 02 c0       	mov    edx,0xc00240d8
c000b7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7f8:	89 10                	mov    DWORD PTR [eax],edx
c000b7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7fe:	83 ec 0c             	sub    esp,0xc
c000b801:	50                   	push   eax
c000b802:	e8 25 ff ff ff       	call   c000b72c <UnixFile::~UnixFile()>
c000b807:	83 c4 10             	add    esp,0x10
c000b80a:	90                   	nop
c000b80b:	83 c4 0c             	add    esp,0xc
c000b80e:	c3                   	ret    
c000b80f:	90                   	nop

c000b810 <ReservedFilename::~ReservedFilename()>:
c000b810:	83 ec 0c             	sub    esp,0xc
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b81a:	e8 cd ff ff ff       	call   c000b7ec <ReservedFilename::~ReservedFilename()>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	83 ec 08             	sub    esp,0x8
c000b825:	6a 0c                	push   0xc
c000b827:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b82b:	e8 a2 13 00 00       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	83 c4 0c             	add    esp,0xc
c000b836:	c3                   	ret    

c000b837 <getFromFileDescriptor(int)>:
c000b837:	53                   	push   ebx
c000b838:	83 ec 08             	sub    esp,0x8
c000b83b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b83f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b845:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b84b:	7f 2c                	jg     c000b879 <getFromFileDescriptor(int)+0x42>
c000b84d:	83 ec 0c             	sub    esp,0xc
c000b850:	68 18 7c 02 c0       	push   0xc0027c18
c000b855:	e8 36 6f 01 00       	call   c0022790 <LinkedList<UnixFile>::getFirstElement()>
c000b85a:	83 c4 10             	add    esp,0x10
c000b85d:	85 c0                	test   eax,eax
c000b85f:	75 04                	jne    c000b865 <getFromFileDescriptor(int)+0x2e>
c000b861:	31 c0                	xor    eax,eax
c000b863:	eb 6e                	jmp    c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b865:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b868:	74 69                	je     c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b86a:	52                   	push   edx
c000b86b:	52                   	push   edx
c000b86c:	50                   	push   eax
c000b86d:	68 18 7c 02 c0       	push   0xc0027c18
c000b872:	e8 c3 6f 01 00       	call   c002283a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b877:	eb e1                	jmp    c000b85a <getFromFileDescriptor(int)+0x23>
c000b879:	a1 0c 7c 02 c0       	mov    eax,ds:0xc0027c0c
c000b87e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b884:	74 4d                	je     c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b886:	a1 10 7c 02 c0       	mov    eax,ds:0xc0027c10
c000b88b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b891:	74 40                	je     c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b893:	a1 08 7c 02 c0       	mov    eax,ds:0xc0027c08
c000b898:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b89e:	74 33                	je     c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b8a0:	a1 04 7c 02 c0       	mov    eax,ds:0xc0027c04
c000b8a5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b8ab:	74 26                	je     c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b8ad:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b8b3:	83 f8 08             	cmp    eax,0x8
c000b8b6:	77 09                	ja     c000b8c1 <getFromFileDescriptor(int)+0x8a>
c000b8b8:	8b 04 85 e0 7b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8420]
c000b8bf:	eb 12                	jmp    c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b8c1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b8c7:	83 fb 08             	cmp    ebx,0x8
c000b8ca:	77 95                	ja     c000b861 <getFromFileDescriptor(int)+0x2a>
c000b8cc:	8b 04 9d a0 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8460]
c000b8d3:	83 c4 08             	add    esp,0x8
c000b8d6:	5b                   	pop    ebx
c000b8d7:	c3                   	ret    

c000b8d8 <__static_initialization_and_destruction_0(int, int)>:
c000b8d8:	83 ec 0c             	sub    esp,0xc
c000b8db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b8e0:	75 34                	jne    c000b916 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b8e2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b8ea:	75 2a                	jne    c000b916 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b8ec:	83 ec 0c             	sub    esp,0xc
c000b8ef:	68 18 7c 02 c0       	push   0xc0027c18
c000b8f4:	e8 81 6d 01 00       	call   c002267a <LinkedList<UnixFile>::LinkedList()>
c000b8f9:	83 c4 10             	add    esp,0x10
c000b8fc:	83 ec 04             	sub    esp,0x4
c000b8ff:	68 60 6d 02 c0       	push   0xc0026d60
c000b904:	68 18 7c 02 c0       	push   0xc0027c18
c000b909:	68 78 26 02 c0       	push   0xc0022678
c000b90e:	e8 39 12 00 00       	call   c000cb4c <__cxa_atexit>
c000b913:	83 c4 10             	add    esp,0x10
c000b916:	90                   	nop
c000b917:	83 c4 0c             	add    esp,0xc
c000b91a:	c3                   	ret    

c000b91b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b91b:	83 ec 0c             	sub    esp,0xc
c000b91e:	83 ec 08             	sub    esp,0x8
c000b921:	68 ff ff 00 00       	push   0xffff
c000b926:	6a 01                	push   0x1
c000b928:	e8 ab ff ff ff       	call   c000b8d8 <__static_initialization_and_destruction_0(int, int)>
c000b92d:	83 c4 10             	add    esp,0x10
c000b930:	83 c4 0c             	add    esp,0xc
c000b933:	c3                   	ret    

c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b934:	53                   	push   ebx
c000b935:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b939:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b93d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b943:	89 c8                	mov    eax,ecx
c000b945:	d1 e8                	shr    eax,1
c000b947:	03 05 48 6f 02 c0    	add    eax,DWORD PTR ds:0xc0026f48
c000b94d:	83 e1 01             	and    ecx,0x1
c000b950:	8a 10                	mov    dl,BYTE PTR [eax]
c000b952:	75 09                	jne    c000b95d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b954:	83 e2 f0             	and    edx,0xfffffff0
c000b957:	09 da                	or     edx,ebx
c000b959:	88 10                	mov    BYTE PTR [eax],dl
c000b95b:	5b                   	pop    ebx
c000b95c:	c3                   	ret    
c000b95d:	c1 e3 04             	shl    ebx,0x4
c000b960:	83 e2 0f             	and    edx,0xf
c000b963:	09 da                	or     edx,ebx
c000b965:	88 10                	mov    BYTE PTR [eax],dl
c000b967:	5b                   	pop    ebx
c000b968:	c3                   	ret    

c000b969 <Virt::getPageState(unsigned long)>:
c000b969:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b96d:	8b 0d 48 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f48
c000b973:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b979:	89 d0                	mov    eax,edx
c000b97b:	d1 e8                	shr    eax,1
c000b97d:	83 e2 01             	and    edx,0x1
c000b980:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b983:	75 04                	jne    c000b989 <Virt::getPageState(unsigned long)+0x20>
c000b985:	83 e0 0f             	and    eax,0xf
c000b988:	c3                   	ret    
c000b989:	c0 e8 04             	shr    al,0x4
c000b98c:	c3                   	ret    

c000b98d <Virt::allocateKernelVirtualPages(int)>:
c000b98d:	55                   	push   ebp
c000b98e:	31 ed                	xor    ebp,ebp
c000b990:	57                   	push   edi
c000b991:	56                   	push   esi
c000b992:	53                   	push   ebx
c000b993:	31 db                	xor    ebx,ebx
c000b995:	83 ec 1c             	sub    esp,0x1c
c000b998:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b99c:	8b 3d 44 6f 02 c0    	mov    edi,DWORD PTR ds:0xc0026f44
c000b9a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b9a7:	57                   	push   edi
c000b9a8:	e8 bc ff ff ff       	call   c000b969 <Virt::getPageState(unsigned long)>
c000b9ad:	5a                   	pop    edx
c000b9ae:	84 c0                	test   al,al
c000b9b0:	75 3a                	jne    c000b9ec <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b9b2:	85 db                	test   ebx,ebx
c000b9b4:	75 02                	jne    c000b9b8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b9b6:	89 fd                	mov    ebp,edi
c000b9b8:	43                   	inc    ebx
c000b9b9:	39 f3                	cmp    ebx,esi
c000b9bb:	74 5a                	je     c000ba17 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b9bd:	47                   	inc    edi
c000b9be:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b9c4:	76 31                	jbe    c000b9f7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b9c6:	c7 05 44 6f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026f44,0xc8000
c000b9d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b9d5:	75 28                	jne    c000b9ff <Virt::allocateKernelVirtualPages(int)+0x72>
c000b9d7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b9dc:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b9e1:	57                   	push   edi
c000b9e2:	e8 82 ff ff ff       	call   c000b969 <Virt::getPageState(unsigned long)>
c000b9e7:	5a                   	pop    edx
c000b9e8:	84 c0                	test   al,al
c000b9ea:	74 c6                	je     c000b9b2 <Virt::allocateKernelVirtualPages(int)+0x25>
c000b9ec:	31 db                	xor    ebx,ebx
c000b9ee:	47                   	inc    edi
c000b9ef:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b9f5:	77 cf                	ja     c000b9c6 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b9f7:	89 3d 44 6f 02 c0    	mov    DWORD PTR ds:0xc0026f44,edi
c000b9fd:	eb a8                	jmp    c000b9a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b9ff:	83 ec 0c             	sub    esp,0xc
c000ba02:	68 ec 40 02 c0       	push   0xc00240ec
c000ba07:	e8 53 8e 00 00       	call   c001485f <Krnl::panic(char const*)>
c000ba0c:	8b 3d 44 6f 02 c0    	mov    edi,DWORD PTR ds:0xc0026f44
c000ba12:	83 c4 10             	add    esp,0x10
c000ba15:	eb 90                	jmp    c000b9a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba17:	89 2d 44 6f 02 c0    	mov    DWORD PTR ds:0xc0026f44,ebp
c000ba1d:	4b                   	dec    ebx
c000ba1e:	74 5f                	je     c000ba7f <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ba20:	85 f6                	test   esi,esi
c000ba22:	74 3d                	je     c000ba61 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba24:	89 e8                	mov    eax,ebp
c000ba26:	31 db                	xor    ebx,ebx
c000ba28:	8d 7e ff             	lea    edi,[esi-0x1]
c000ba2b:	eb 14                	jmp    c000ba41 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000ba2d:	6a 01                	push   0x1
c000ba2f:	43                   	inc    ebx
c000ba30:	50                   	push   eax
c000ba31:	e8 fe fe ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba36:	58                   	pop    eax
c000ba37:	39 f3                	cmp    ebx,esi
c000ba39:	5a                   	pop    edx
c000ba3a:	74 25                	je     c000ba61 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba3c:	a1 44 6f 02 c0       	mov    eax,ds:0xc0026f44
c000ba41:	8d 50 01             	lea    edx,[eax+0x1]
c000ba44:	85 db                	test   ebx,ebx
c000ba46:	89 15 44 6f 02 c0    	mov    DWORD PTR ds:0xc0026f44,edx
c000ba4c:	74 20                	je     c000ba6e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000ba4e:	39 df                	cmp    edi,ebx
c000ba50:	75 db                	jne    c000ba2d <Virt::allocateKernelVirtualPages(int)+0xa0>
c000ba52:	6a 03                	push   0x3
c000ba54:	43                   	inc    ebx
c000ba55:	50                   	push   eax
c000ba56:	e8 d9 fe ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba5b:	59                   	pop    ecx
c000ba5c:	39 f3                	cmp    ebx,esi
c000ba5e:	58                   	pop    eax
c000ba5f:	75 db                	jne    c000ba3c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000ba61:	83 c4 1c             	add    esp,0x1c
c000ba64:	89 e8                	mov    eax,ebp
c000ba66:	5b                   	pop    ebx
c000ba67:	c1 e0 0c             	shl    eax,0xc
c000ba6a:	5e                   	pop    esi
c000ba6b:	5f                   	pop    edi
c000ba6c:	5d                   	pop    ebp
c000ba6d:	c3                   	ret    
c000ba6e:	6a 02                	push   0x2
c000ba70:	bb 01 00 00 00       	mov    ebx,0x1
c000ba75:	50                   	push   eax
c000ba76:	e8 b9 fe ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba7b:	58                   	pop    eax
c000ba7c:	5a                   	pop    edx
c000ba7d:	eb bd                	jmp    c000ba3c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000ba7f:	6a 04                	push   0x4
c000ba81:	8d 45 01             	lea    eax,[ebp+0x1]
c000ba84:	55                   	push   ebp
c000ba85:	a3 44 6f 02 c0       	mov    ds:0xc0026f44,eax
c000ba8a:	e8 a5 fe ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba8f:	59                   	pop    ecx
c000ba90:	89 e8                	mov    eax,ebp
c000ba92:	5b                   	pop    ebx
c000ba93:	c1 e0 0c             	shl    eax,0xc
c000ba96:	83 c4 1c             	add    esp,0x1c
c000ba99:	5b                   	pop    ebx
c000ba9a:	5e                   	pop    esi
c000ba9b:	5f                   	pop    edi
c000ba9c:	5d                   	pop    ebp
c000ba9d:	c3                   	ret    

c000ba9e <Virt::freeSwapfilePage(unsigned long)>:
c000ba9e:	53                   	push   ebx
c000ba9f:	8b 15 2c 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027c2c
c000baa5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000baa9:	b8 01 00 00 00       	mov    eax,0x1
c000baae:	89 cb                	mov    ebx,ecx
c000bab0:	d3 e0                	shl    eax,cl
c000bab2:	c1 eb 05             	shr    ebx,0x5
c000bab5:	f7 d0                	not    eax
c000bab7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000baba:	5b                   	pop    ebx
c000babb:	c3                   	ret    

c000babc <Virt::swapIDToSector(unsigned long)>:
c000babc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bac0:	0f af 05 4c 6f 02 c0 	imul   eax,DWORD PTR ds:0xc0026f4c
c000bac7:	03 05 54 6f 02 c0    	add    eax,DWORD PTR ds:0xc0026f54
c000bacd:	c3                   	ret    

c000bace <Virt::allocateSwapfilePage()>:
c000bace:	55                   	push   ebp
c000bacf:	31 d2                	xor    edx,edx
c000bad1:	57                   	push   edi
c000bad2:	56                   	push   esi
c000bad3:	53                   	push   ebx
c000bad4:	83 ec 0c             	sub    esp,0xc
c000bad7:	8b 0d 4c 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f4c
c000badd:	a1 50 6f 02 c0       	mov    eax,ds:0xc0026f50
c000bae2:	f7 f1                	div    ecx
c000bae4:	39 0d 50 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f50,ecx
c000baea:	72 2d                	jb     c000bb19 <Virt::allocateSwapfilePage()+0x4b>
c000baec:	8b 35 2c 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027c2c
c000baf2:	8b 16                	mov    edx,DWORD PTR [esi]
c000baf4:	f6 c2 01             	test   dl,0x1
c000baf7:	74 3c                	je     c000bb35 <Virt::allocateSwapfilePage()+0x67>
c000baf9:	31 c9                	xor    ecx,ecx
c000bafb:	bf 01 00 00 00       	mov    edi,0x1
c000bb00:	eb 12                	jmp    c000bb14 <Virt::allocateSwapfilePage()+0x46>
c000bb02:	89 fd                	mov    ebp,edi
c000bb04:	89 ca                	mov    edx,ecx
c000bb06:	d3 e5                	shl    ebp,cl
c000bb08:	c1 ea 05             	shr    edx,0x5
c000bb0b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bb0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bb10:	85 ea                	test   edx,ebp
c000bb12:	74 2a                	je     c000bb3e <Virt::allocateSwapfilePage()+0x70>
c000bb14:	41                   	inc    ecx
c000bb15:	39 c8                	cmp    eax,ecx
c000bb17:	77 e9                	ja     c000bb02 <Virt::allocateSwapfilePage()+0x34>
c000bb19:	83 ec 0c             	sub    esp,0xc
c000bb1c:	68 a4 42 02 c0       	push   0xc00242a4
c000bb21:	e8 39 8d 00 00       	call   c001485f <Krnl::panic(char const*)>
c000bb26:	83 c4 10             	add    esp,0x10
c000bb29:	31 c9                	xor    ecx,ecx
c000bb2b:	83 c4 0c             	add    esp,0xc
c000bb2e:	89 c8                	mov    eax,ecx
c000bb30:	5b                   	pop    ebx
c000bb31:	5e                   	pop    esi
c000bb32:	5f                   	pop    edi
c000bb33:	5d                   	pop    ebp
c000bb34:	c3                   	ret    
c000bb35:	89 f3                	mov    ebx,esi
c000bb37:	bd 01 00 00 00       	mov    ebp,0x1
c000bb3c:	31 c9                	xor    ecx,ecx
c000bb3e:	09 ea                	or     edx,ebp
c000bb40:	89 c8                	mov    eax,ecx
c000bb42:	89 13                	mov    DWORD PTR [ebx],edx
c000bb44:	83 c4 0c             	add    esp,0xc
c000bb47:	5b                   	pop    ebx
c000bb48:	5e                   	pop    esi
c000bb49:	5f                   	pop    edi
c000bb4a:	5d                   	pop    ebp
c000bb4b:	c3                   	ret    

c000bb4c <Virt::virtualMemorySetup()>:
c000bb4c:	53                   	push   ebx
c000bb4d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb52:	6a 0f                	push   0xf
c000bb54:	53                   	push   ebx
c000bb55:	43                   	inc    ebx
c000bb56:	e8 d9 fd ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb5b:	58                   	pop    eax
c000bb5c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bb62:	5a                   	pop    edx
c000bb63:	75 ed                	jne    c000bb52 <Virt::virtualMemorySetup()+0x6>
c000bb65:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb6a:	6a 00                	push   0x0
c000bb6c:	53                   	push   ebx
c000bb6d:	43                   	inc    ebx
c000bb6e:	e8 c1 fd ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb73:	59                   	pop    ecx
c000bb74:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bb7a:	58                   	pop    eax
c000bb7b:	75 ed                	jne    c000bb6a <Virt::virtualMemorySetup()+0x1e>
c000bb7d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bb82:	6a 0f                	push   0xf
c000bb84:	53                   	push   ebx
c000bb85:	43                   	inc    ebx
c000bb86:	e8 a9 fd ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb8b:	58                   	pop    eax
c000bb8c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bb92:	5a                   	pop    edx
c000bb93:	75 ed                	jne    c000bb82 <Virt::virtualMemorySetup()+0x36>
c000bb95:	5b                   	pop    ebx
c000bb96:	c3                   	ret    

c000bb97 <Virt::setupPageSwapping(int)>:
c000bb97:	53                   	push   ebx
c000bb98:	83 ec 0c             	sub    esp,0xc
c000bb9b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb9f:	a1 c8 80 02 c0       	mov    eax,ds:0xc00280c8
c000bba4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bbaa:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbac:	53                   	push   ebx
c000bbad:	c1 e3 0b             	shl    ebx,0xb
c000bbb0:	68 bb 42 02 c0       	push   0xc00242bb
c000bbb5:	50                   	push   eax
c000bbb6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bbb9:	89 1d 50 6f 02 c0    	mov    DWORD PTR ds:0xc0026f50,ebx
c000bbbf:	c6 05 58 6f 02 c0 43 	mov    BYTE PTR ds:0xc0026f58,0x43
c000bbc6:	c1 eb 08             	shr    ebx,0x8
c000bbc9:	a3 54 6f 02 c0       	mov    ds:0xc0026f54,eax
c000bbce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bbd1:	c7 05 4c 6f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0026f4c,0x8
c000bbdb:	e8 e3 dd ff ff       	call   c00099c3 <malloc>
c000bbe0:	83 c4 0c             	add    esp,0xc
c000bbe3:	89 c1                	mov    ecx,eax
c000bbe5:	a3 2c 7c 02 c0       	mov    ds:0xc0027c2c,eax
c000bbea:	31 d2                	xor    edx,edx
c000bbec:	a1 50 6f 02 c0       	mov    eax,ds:0xc0026f50
c000bbf1:	f7 35 4c 6f 02 c0    	div    DWORD PTR ds:0xc0026f4c
c000bbf7:	c1 e8 05             	shr    eax,0x5
c000bbfa:	50                   	push   eax
c000bbfb:	6a 00                	push   0x0
c000bbfd:	51                   	push   ecx
c000bbfe:	e8 81 4a ff ff       	call   c0000684 <memset>
c000bc03:	83 c4 18             	add    esp,0x18
c000bc06:	5b                   	pop    ebx
c000bc07:	c3                   	ret    

c000bc08 <VAS::VAS()>:
c000bc08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc22:	a3 30 7c 02 c0       	mov    ds:0xc0027c30,eax
c000bc27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc2b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bc2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc33:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bc36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc3a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bc41:	90                   	nop
c000bc42:	c3                   	ret    
c000bc43:	90                   	nop

c000bc44 <VAS::VAS(VAS*)>:
c000bc44:	83 ec 0c             	sub    esp,0xc
c000bc47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc56:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc5d:	83 ec 0c             	sub    esp,0xc
c000bc60:	68 0c 41 02 c0       	push   0xc002410c
c000bc65:	e8 f5 8b 00 00       	call   c001485f <Krnl::panic(char const*)>
c000bc6a:	83 c4 10             	add    esp,0x10
c000bc6d:	90                   	nop
c000bc6e:	83 c4 0c             	add    esp,0xc
c000bc71:	c3                   	ret    

c000bc72 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bc72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc76:	89 c2                	mov    edx,eax
c000bc78:	c1 e8 0a             	shr    eax,0xa
c000bc7b:	c1 ea 16             	shr    edx,0x16
c000bc7e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bc83:	19 c9                	sbb    ecx,ecx
c000bc85:	c1 e2 0c             	shl    edx,0xc
c000bc88:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bc8e:	25 fc 0f 00 00       	and    eax,0xffc
c000bc93:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bc9a:	01 d0                	add    eax,edx
c000bc9c:	c3                   	ret    
c000bc9d:	90                   	nop

c000bc9e <VAS::getPageTableEntry(unsigned long)>:
c000bc9e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bca2:	89 ca                	mov    edx,ecx
c000bca4:	c1 e9 0a             	shr    ecx,0xa
c000bca7:	c1 ea 16             	shr    edx,0x16
c000bcaa:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bcb0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bcb6:	c1 e0 0c             	shl    eax,0xc
c000bcb9:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bcbc:	c3                   	ret    

c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>:
c000bcbd:	57                   	push   edi
c000bcbe:	56                   	push   esi
c000bcbf:	be 01 00 00 00       	mov    esi,0x1
c000bcc4:	53                   	push   ebx
c000bcc5:	83 ec 10             	sub    esp,0x10
c000bcc8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bccc:	c1 eb 0c             	shr    ebx,0xc
c000bccf:	eb 3f                	jmp    c000bd10 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bcd1:	83 ec 08             	sub    esp,0x8
c000bcd4:	57                   	push   edi
c000bcd5:	ff 35 30 7c 02 c0    	push   DWORD PTR ds:0xc0027c30
c000bcdb:	e8 be ff ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000bce0:	83 c4 10             	add    esp,0x10
c000bce3:	8b 00                	mov    eax,DWORD PTR [eax]
c000bce5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bce9:	f6 c4 04             	test   ah,0x4
c000bcec:	75 5f                	jne    c000bd4d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bcee:	80 fa 04             	cmp    dl,0x4
c000bcf1:	74 78                	je     c000bd6b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bcf3:	80 fa 02             	cmp    dl,0x2
c000bcf6:	0f 84 88 00 00 00    	je     c000bd84 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bcfc:	80 fa 03             	cmp    dl,0x3
c000bcff:	0f 84 ad 00 00 00    	je     c000bdb2 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bd05:	fe ca                	dec    dl
c000bd07:	0f 84 92 00 00 00    	je     c000bd9f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd0d:	43                   	inc    ebx
c000bd0e:	31 f6                	xor    esi,esi
c000bd10:	53                   	push   ebx
c000bd11:	89 df                	mov    edi,ebx
c000bd13:	e8 51 fc ff ff       	call   c000b969 <Virt::getPageState(unsigned long)>
c000bd18:	c1 e7 0c             	shl    edi,0xc
c000bd1b:	59                   	pop    ecx
c000bd1c:	84 c0                	test   al,al
c000bd1e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bd22:	75 ad                	jne    c000bcd1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bd24:	83 ec 0c             	sub    esp,0xc
c000bd27:	68 d2 42 02 c0       	push   0xc00242d2
c000bd2c:	e8 2e 8b 00 00       	call   c001485f <Krnl::panic(char const*)>
c000bd31:	58                   	pop    eax
c000bd32:	5a                   	pop    edx
c000bd33:	57                   	push   edi
c000bd34:	ff 35 30 7c 02 c0    	push   DWORD PTR ds:0xc0027c30
c000bd3a:	e8 5f ff ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000bd3f:	83 c4 10             	add    esp,0x10
c000bd42:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd44:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd48:	f6 c4 04             	test   ah,0x4
c000bd4b:	74 c0                	je     c000bd0d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd4d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bd51:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd56:	83 ec 0c             	sub    esp,0xc
c000bd59:	50                   	push   eax
c000bd5a:	e8 98 e2 ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c000bd5f:	83 c4 10             	add    esp,0x10
c000bd62:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd66:	80 fa 04             	cmp    dl,0x4
c000bd69:	75 88                	jne    c000bcf3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bd6b:	89 f0                	mov    eax,esi
c000bd6d:	84 c0                	test   al,al
c000bd6f:	75 47                	jne    c000bdb8 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bd71:	c7 44 24 20 30 41 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024130
c000bd79:	83 c4 10             	add    esp,0x10
c000bd7c:	5b                   	pop    ebx
c000bd7d:	5e                   	pop    esi
c000bd7e:	5f                   	pop    edi
c000bd7f:	e9 db 8a 00 00       	jmp    c001485f <Krnl::panic(char const*)>
c000bd84:	89 f0                	mov    eax,esi
c000bd86:	84 c0                	test   al,al
c000bd88:	75 15                	jne    c000bd9f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd8a:	83 ec 0c             	sub    esp,0xc
c000bd8d:	68 ee 42 02 c0       	push   0xc00242ee
c000bd92:	e8 c8 8a 00 00       	call   c001485f <Krnl::panic(char const*)>
c000bd97:	83 c4 10             	add    esp,0x10
c000bd9a:	e9 6e ff ff ff       	jmp    c000bd0d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd9f:	83 ec 08             	sub    esp,0x8
c000bda2:	6a 00                	push   0x0
c000bda4:	53                   	push   ebx
c000bda5:	e8 8a fb ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdaa:	83 c4 10             	add    esp,0x10
c000bdad:	e9 5b ff ff ff       	jmp    c000bd0d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdb2:	89 f0                	mov    eax,esi
c000bdb4:	84 c0                	test   al,al
c000bdb6:	75 15                	jne    c000bdcd <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bdb8:	83 ec 08             	sub    esp,0x8
c000bdbb:	6a 00                	push   0x0
c000bdbd:	53                   	push   ebx
c000bdbe:	e8 71 fb ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdc3:	83 c4 10             	add    esp,0x10
c000bdc6:	83 c4 10             	add    esp,0x10
c000bdc9:	5b                   	pop    ebx
c000bdca:	5e                   	pop    esi
c000bdcb:	5f                   	pop    edi
c000bdcc:	c3                   	ret    
c000bdcd:	c7 44 24 20 0a 43 02 c0 	mov    DWORD PTR [esp+0x20],0xc002430a
c000bdd5:	83 c4 10             	add    esp,0x10
c000bdd8:	5b                   	pop    ebx
c000bdd9:	5e                   	pop    esi
c000bdda:	5f                   	pop    edi
c000bddb:	e9 7f 8a 00 00       	jmp    c001485f <Krnl::panic(char const*)>

c000bde0 <VAS::freeAllocatedPages(unsigned long)>:
c000bde0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bde4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bde8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bdec:	74 09                	je     c000bdf7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bdee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bdf2:	e9 c6 fe ff ff       	jmp    c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c000bdf7:	c7 44 24 04 54 41 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024154
c000bdff:	e9 af 0e 00 00       	jmp    c000ccb3 <Dbg::kprintf(char const*, ...)>

c000be04 <VAS::virtualToPhysical(unsigned long)>:
c000be04:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be08:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be0c:	e8 8d fe ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000be11:	5a                   	pop    edx
c000be12:	8b 00                	mov    eax,DWORD PTR [eax]
c000be14:	59                   	pop    ecx
c000be15:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be1a:	c3                   	ret    
c000be1b:	90                   	nop

c000be1c <VAS::reflagRange(unsigned long, int, int, int)>:
c000be1c:	55                   	push   ebp
c000be1d:	57                   	push   edi
c000be1e:	56                   	push   esi
c000be1f:	53                   	push   ebx
c000be20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be24:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000be28:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be2c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be30:	85 db                	test   ebx,ebx
c000be32:	7e 22                	jle    c000be56 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000be34:	c1 e3 0c             	shl    ebx,0xc
c000be37:	01 f3                	add    ebx,esi
c000be39:	56                   	push   esi
c000be3a:	81 c6 00 10 00 00    	add    esi,0x1000
c000be40:	55                   	push   ebp
c000be41:	e8 58 fe ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000be46:	5a                   	pop    edx
c000be47:	59                   	pop    ecx
c000be48:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be4a:	21 f9                	and    ecx,edi
c000be4c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000be50:	39 f3                	cmp    ebx,esi
c000be52:	89 08                	mov    DWORD PTR [eax],ecx
c000be54:	75 e3                	jne    c000be39 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000be56:	5b                   	pop    ebx
c000be57:	5e                   	pop    esi
c000be58:	5f                   	pop    edi
c000be59:	5d                   	pop    ebp
c000be5a:	c3                   	ret    
c000be5b:	90                   	nop

c000be5c <VAS::setToWriteCombining(unsigned long, int)>:
c000be5c:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000be61:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000be67:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000be6e:	75 01                	jne    c000be71 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000be70:	c3                   	ret    
c000be71:	68 80 00 00 00       	push   0x80
c000be76:	6a ff                	push   0xffffffff
c000be78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be84:	e8 93 ff ff ff       	call   c000be1c <VAS::reflagRange(unsigned long, int, int, int)>
c000be89:	83 c4 14             	add    esp,0x14
c000be8c:	c3                   	ret    
c000be8d:	90                   	nop

c000be8e <VAS::mapOtherVASIn(bool, VAS*)>:
c000be8e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000be93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be97:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000be9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be9e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bea1:	19 c0                	sbb    eax,eax
c000bea3:	83 ca 03             	or     edx,0x3
c000bea6:	83 e0 fc             	and    eax,0xfffffffc
c000bea9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000beb0:	0f 20 d8             	mov    eax,cr3
c000beb3:	0f 22 d8             	mov    cr3,eax
c000beb6:	c3                   	ret    
c000beb7:	90                   	nop

c000beb8 <VAS::~VAS()>:
c000beb8:	83 ec 2c             	sub    esp,0x2c
c000bebb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bec3:	fa                   	cli    
c000bec4:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000bec9:	40                   	inc    eax
c000beca:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000becf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bed4:	8b 00                	mov    eax,DWORD PTR [eax]
c000bed6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bed9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bedf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bee3:	6a 01                	push   0x1
c000bee5:	50                   	push   eax
c000bee6:	e8 a3 ff ff ff       	call   c000be8e <VAS::mapOtherVASIn(bool, VAS*)>
c000beeb:	83 c4 0c             	add    esp,0xc
c000beee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bef6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000befe:	0f 8f d4 00 00 00    	jg     c000bfd8 <VAS::~VAS()+0x120>
c000bf04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf0f:	c1 e2 02             	shl    edx,0x2
c000bf12:	01 d0                	add    eax,edx
c000bf14:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf1e:	83 e0 01             	and    eax,0x1
c000bf21:	0f 84 a8 00 00 00    	je     c000bfcf <VAS::~VAS()+0x117>
c000bf27:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf2f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bf37:	7f 72                	jg     c000bfab <VAS::~VAS()+0xf3>
c000bf39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf3d:	c1 e0 0a             	shl    eax,0xa
c000bf40:	89 c2                	mov    edx,eax
c000bf42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf46:	01 d0                	add    eax,edx
c000bf48:	c1 e0 0c             	shl    eax,0xc
c000bf4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf4f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf54:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bf59:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bf5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf63:	6a 01                	push   0x1
c000bf65:	50                   	push   eax
c000bf66:	e8 07 fd ff ff       	call   c000bc72 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bf6b:	83 c4 0c             	add    esp,0xc
c000bf6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf76:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bf7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf80:	25 01 04 00 00       	and    eax,0x401
c000bf85:	3d 01 04 00 00       	cmp    eax,0x401
c000bf8a:	75 19                	jne    c000bfa5 <VAS::~VAS()+0xed>
c000bf8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf90:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf95:	83 ec 0c             	sub    esp,0xc
c000bf98:	50                   	push   eax
c000bf99:	e8 59 e0 ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c000bf9e:	83 c4 10             	add    esp,0x10
c000bfa1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bfa5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bfa9:	eb 84                	jmp    c000bf2f <VAS::~VAS()+0x77>
c000bfab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfaf:	25 00 04 00 00       	and    eax,0x400
c000bfb4:	74 19                	je     c000bfcf <VAS::~VAS()+0x117>
c000bfb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfba:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfbf:	83 ec 0c             	sub    esp,0xc
c000bfc2:	50                   	push   eax
c000bfc3:	e8 2f e0 ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c000bfc8:	83 c4 10             	add    esp,0x10
c000bfcb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bfcf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bfd3:	e9 1e ff ff ff       	jmp    c000bef6 <VAS::~VAS()+0x3e>
c000bfd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bfdf:	83 ec 0c             	sub    esp,0xc
c000bfe2:	50                   	push   eax
c000bfe3:	e8 d5 fc ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c000bfe8:	83 c4 10             	add    esp,0x10
c000bfeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bff2:	83 ec 0c             	sub    esp,0xc
c000bff5:	50                   	push   eax
c000bff6:	e8 fc df ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c000bffb:	83 c4 10             	add    esp,0x10
c000bffe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c002:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c006:	c1 e0 02             	shl    eax,0x2
c000c009:	83 ec 08             	sub    esp,0x8
c000c00c:	50                   	push   eax
c000c00d:	68 78 41 02 c0       	push   0xc0024178
c000c012:	e8 9c 0c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c017:	83 c4 10             	add    esp,0x10
c000c01a:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000c01f:	48                   	dec    eax
c000c020:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000c025:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000c02a:	85 c0                	test   eax,eax
c000c02c:	75 01                	jne    c000c02f <VAS::~VAS()+0x177>
c000c02e:	fb                   	sti    
c000c02f:	90                   	nop
c000c030:	83 c4 2c             	add    esp,0x2c
c000c033:	c3                   	ret    

c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c034:	55                   	push   ebp
c000c035:	57                   	push   edi
c000c036:	56                   	push   esi
c000c037:	53                   	push   ebx
c000c038:	83 ec 1c             	sub    esp,0x1c
c000c03b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c03f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c043:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c049:	77 08                	ja     c000c053 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c04b:	0f 20 d8             	mov    eax,cr3
c000c04e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c051:	75 47                	jne    c000c09a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c053:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c057:	09 d8                	or     eax,ebx
c000c059:	a9 ff 0f 00 00       	test   eax,0xfff
c000c05e:	75 57                	jne    c000c0b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c060:	89 de                	mov    esi,ebx
c000c062:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c065:	c1 ee 16             	shr    esi,0x16
c000c068:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c06f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c073:	74 54                	je     c000c0c9 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c075:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c079:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c07f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c083:	c1 e6 0c             	shl    esi,0xc
c000c086:	c1 eb 0a             	shr    ebx,0xa
c000c089:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c08f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c092:	83 c4 1c             	add    esp,0x1c
c000c095:	5b                   	pop    ebx
c000c096:	5e                   	pop    esi
c000c097:	5f                   	pop    edi
c000c098:	5d                   	pop    ebp
c000c099:	c3                   	ret    
c000c09a:	83 ec 0c             	sub    esp,0xc
c000c09d:	68 98 41 02 c0       	push   0xc0024198
c000c0a2:	e8 0c 0c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c0a7:	83 c4 10             	add    esp,0x10
c000c0aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0ae:	09 d8                	or     eax,ebx
c000c0b0:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0b5:	74 a9                	je     c000c060 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c0b7:	83 ec 0c             	sub    esp,0xc
c000c0ba:	68 00 42 02 c0       	push   0xc0024200
c000c0bf:	e8 9b 87 00 00       	call   c001485f <Krnl::panic(char const*)>
c000c0c4:	83 c4 10             	add    esp,0x10
c000c0c7:	eb 97                	jmp    c000c060 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c0c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0cd:	e8 a8 df ff ff       	call   c000a07a <Phys::allocatePage()>
c000c0d2:	83 ec 0c             	sub    esp,0xc
c000c0d5:	89 c5                	mov    ebp,eax
c000c0d7:	8b 0d 30 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027c30
c000c0dd:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c0e1:	6a 01                	push   0x1
c000c0e3:	e8 a5 f8 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c000c0e8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c0ef:	6a 01                	push   0x1
c000c0f1:	50                   	push   eax
c000c0f2:	55                   	push   ebp
c000c0f3:	81 cd 07 04 00 00    	or     ebp,0x407
c000c0f9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c0fd:	51                   	push   ecx
c000c0fe:	e8 27 02 00 00       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c103:	83 c4 1c             	add    esp,0x1c
c000c106:	68 00 10 00 00       	push   0x1000
c000c10b:	6a 00                	push   0x0
c000c10d:	50                   	push   eax
c000c10e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c112:	e8 6d 45 ff ff       	call   c0000684 <memset>
c000c117:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c11b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c11e:	e8 9a fb ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c000c123:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c127:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c12a:	83 c4 10             	add    esp,0x10
c000c12d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c130:	e9 40 ff ff ff       	jmp    c000c075 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c135:	90                   	nop

c000c136 <VAS::allocatePages(int, int)>:
c000c136:	55                   	push   ebp
c000c137:	57                   	push   edi
c000c138:	56                   	push   esi
c000c139:	53                   	push   ebx
c000c13a:	83 ec 1c             	sub    esp,0x1c
c000c13d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c141:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000c146:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c14c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c152:	83 e0 01             	and    eax,0x1
c000c155:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c159:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c15d:	0f 85 cc 00 00 00    	jne    c000c22f <VAS::allocatePages(int, int)+0xf9>
c000c163:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c166:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c16a:	85 c0                	test   eax,eax
c000c16c:	0f 84 a1 00 00 00    	je     c000c213 <VAS::allocatePages(int, int)+0xdd>
c000c172:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c176:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c17a:	c1 e6 0c             	shl    esi,0xc
c000c17d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c181:	85 c0                	test   eax,eax
c000c183:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c186:	7e 33                	jle    c000c1bb <VAS::allocatePages(int, int)+0x85>
c000c188:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c18c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c190:	81 cd 00 04 00 00    	or     ebp,0x400
c000c196:	e8 df de ff ff       	call   c000a07a <Phys::allocatePage()>
c000c19b:	55                   	push   ebp
c000c19c:	53                   	push   ebx
c000c19d:	50                   	push   eax
c000c19e:	57                   	push   edi
c000c19f:	e8 90 fe ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c1a4:	83 c4 10             	add    esp,0x10
c000c1a7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1ac:	74 03                	je     c000c1b1 <VAS::allocatePages(int, int)+0x7b>
c000c1ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c1b7:	39 de                	cmp    esi,ebx
c000c1b9:	75 db                	jne    c000c196 <VAS::allocatePages(int, int)+0x60>
c000c1bb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1c0:	75 12                	jne    c000c1d4 <VAS::allocatePages(int, int)+0x9e>
c000c1c2:	0f 20 d8             	mov    eax,cr3
c000c1c5:	0f 22 d8             	mov    cr3,eax
c000c1c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c1cc:	83 c4 1c             	add    esp,0x1c
c000c1cf:	5b                   	pop    ebx
c000c1d0:	5e                   	pop    esi
c000c1d1:	5f                   	pop    edi
c000c1d2:	5d                   	pop    ebp
c000c1d3:	c3                   	ret    
c000c1d4:	c1 ee 0a             	shr    esi,0xa
c000c1d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1db:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c1e1:	c1 eb 0a             	shr    ebx,0xa
c000c1e4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c1ea:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c1f0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c1f6:	39 c3                	cmp    ebx,eax
c000c1f8:	77 ce                	ja     c000c1c8 <VAS::allocatePages(int, int)+0x92>
c000c1fa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1fd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c203:	39 d8                	cmp    eax,ebx
c000c205:	73 f3                	jae    c000c1fa <VAS::allocatePages(int, int)+0xc4>
c000c207:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c20b:	83 c4 1c             	add    esp,0x1c
c000c20e:	5b                   	pop    ebx
c000c20f:	5e                   	pop    esi
c000c210:	5f                   	pop    edi
c000c211:	5d                   	pop    ebp
c000c212:	c3                   	ret    
c000c213:	83 ec 0c             	sub    esp,0xc
c000c216:	68 24 42 02 c0       	push   0xc0024224
c000c21b:	e8 3f 86 00 00       	call   c001485f <Krnl::panic(char const*)>
c000c220:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c223:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c227:	83 c4 10             	add    esp,0x10
c000c22a:	e9 43 ff ff ff       	jmp    c000c172 <VAS::allocatePages(int, int)+0x3c>
c000c22f:	83 ec 0c             	sub    esp,0xc
c000c232:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c236:	e8 52 f7 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c000c23b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c23f:	83 c4 10             	add    esp,0x10
c000c242:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c247:	0f 87 9b 00 00 00    	ja     c000c2e8 <VAS::allocatePages(int, int)+0x1b2>
c000c24d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c251:	85 d2                	test   edx,edx
c000c253:	7e 3c                	jle    c000c291 <VAS::allocatePages(int, int)+0x15b>
c000c255:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c259:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c25d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c261:	c1 e5 0c             	shl    ebp,0xc
c000c264:	81 ce 00 04 00 00    	or     esi,0x400
c000c26a:	01 dd                	add    ebp,ebx
c000c26c:	e8 09 de ff ff       	call   c000a07a <Phys::allocatePage()>
c000c271:	56                   	push   esi
c000c272:	53                   	push   ebx
c000c273:	50                   	push   eax
c000c274:	57                   	push   edi
c000c275:	e8 ba fd ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c27a:	83 c4 10             	add    esp,0x10
c000c27d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c282:	74 03                	je     c000c287 <VAS::allocatePages(int, int)+0x151>
c000c284:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c287:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c28d:	39 dd                	cmp    ebp,ebx
c000c28f:	75 db                	jne    c000c26c <VAS::allocatePages(int, int)+0x136>
c000c291:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c296:	0f 84 26 ff ff ff    	je     c000c1c2 <VAS::allocatePages(int, int)+0x8c>
c000c29c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c2a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2a4:	89 d3                	mov    ebx,edx
c000c2a6:	c1 e0 0c             	shl    eax,0xc
c000c2a9:	c1 eb 0a             	shr    ebx,0xa
c000c2ac:	01 d0                	add    eax,edx
c000c2ae:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c2b4:	c1 e8 0a             	shr    eax,0xa
c000c2b7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c2bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2c2:	2d 00 00 40 00       	sub    eax,0x400000
c000c2c7:	39 c3                	cmp    ebx,eax
c000c2c9:	0f 87 f9 fe ff ff    	ja     c000c1c8 <VAS::allocatePages(int, int)+0x92>
c000c2cf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c2d2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c2d8:	39 d8                	cmp    eax,ebx
c000c2da:	73 f3                	jae    c000c2cf <VAS::allocatePages(int, int)+0x199>
c000c2dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2e0:	83 c4 1c             	add    esp,0x1c
c000c2e3:	5b                   	pop    ebx
c000c2e4:	5e                   	pop    esi
c000c2e5:	5f                   	pop    edi
c000c2e6:	5d                   	pop    ebp
c000c2e7:	c3                   	ret    
c000c2e8:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000c2ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c2f3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c2fa:	0f 84 4d ff ff ff    	je     c000c24d <VAS::allocatePages(int, int)+0x117>
c000c300:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c308:	e9 40 ff ff ff       	jmp    c000c24d <VAS::allocatePages(int, int)+0x117>
c000c30d:	90                   	nop

c000c30e <VAS::setCPUSpecific(unsigned long)>:
c000c30e:	83 ec 0c             	sub    esp,0xc
c000c311:	6a 05                	push   0x5
c000c313:	68 00 00 40 c2       	push   0xc2400000
c000c318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c320:	e8 0f fd ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c325:	83 c4 1c             	add    esp,0x1c
c000c328:	c3                   	ret    
c000c329:	90                   	nop

c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c32a:	55                   	push   ebp
c000c32b:	57                   	push   edi
c000c32c:	56                   	push   esi
c000c32d:	53                   	push   ebx
c000c32e:	83 ec 1c             	sub    esp,0x1c
c000c331:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000c336:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c33a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c340:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c344:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c34a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c34e:	83 e0 01             	and    eax,0x1
c000c351:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c355:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c359:	85 c0                	test   eax,eax
c000c35b:	7e 39                	jle    c000c396 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c35d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c361:	89 f3                	mov    ebx,esi
c000c363:	c1 e0 0c             	shl    eax,0xc
c000c366:	01 f0                	add    eax,esi
c000c368:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c36c:	55                   	push   ebp
c000c36d:	53                   	push   ebx
c000c36e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c372:	29 f0                	sub    eax,esi
c000c374:	01 d8                	add    eax,ebx
c000c376:	50                   	push   eax
c000c377:	57                   	push   edi
c000c378:	e8 b7 fc ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c37d:	83 c4 10             	add    esp,0x10
c000c380:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c385:	74 03                	je     c000c38a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c387:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c38a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c390:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c394:	75 d6                	jne    c000c36c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c396:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c39b:	75 10                	jne    c000c3ad <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c39d:	0f 20 d8             	mov    eax,cr3
c000c3a0:	0f 22 d8             	mov    cr3,eax
c000c3a3:	83 c4 1c             	add    esp,0x1c
c000c3a6:	89 f0                	mov    eax,esi
c000c3a8:	5b                   	pop    ebx
c000c3a9:	5e                   	pop    esi
c000c3aa:	5f                   	pop    edi
c000c3ab:	5d                   	pop    ebp
c000c3ac:	c3                   	ret    
c000c3ad:	89 f3                	mov    ebx,esi
c000c3af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3b3:	c1 eb 0a             	shr    ebx,0xa
c000c3b6:	c1 e0 0c             	shl    eax,0xc
c000c3b9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c3bf:	01 f0                	add    eax,esi
c000c3c1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c3c7:	c1 e8 0a             	shr    eax,0xa
c000c3ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3cf:	2d 00 00 40 00       	sub    eax,0x400000
c000c3d4:	39 c3                	cmp    ebx,eax
c000c3d6:	77 cb                	ja     c000c3a3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c3d8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c3db:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3e1:	39 d8                	cmp    eax,ebx
c000c3e3:	73 f3                	jae    c000c3d8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c3e5:	83 c4 1c             	add    esp,0x1c
c000c3e8:	89 f0                	mov    eax,esi
c000c3ea:	5b                   	pop    ebx
c000c3eb:	5e                   	pop    esi
c000c3ec:	5f                   	pop    edi
c000c3ed:	5d                   	pop    ebp
c000c3ee:	c3                   	ret    
c000c3ef:	90                   	nop

c000c3f0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c3f0:	55                   	push   ebp
c000c3f1:	57                   	push   edi
c000c3f2:	56                   	push   esi
c000c3f3:	53                   	push   ebx
c000c3f4:	83 ec 1c             	sub    esp,0x1c
c000c3f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3fb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c3ff:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c403:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c407:	a9 ff 0f 00 00       	test   eax,0xfff
c000c40c:	75 4a                	jne    c000c458 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c40e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c412:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c415:	c1 eb 16             	shr    ebx,0x16
c000c418:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c41f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c423:	74 4d                	je     c000c472 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c425:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c429:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c42d:	c1 e8 0a             	shr    eax,0xa
c000c430:	80 fa 01             	cmp    dl,0x1
c000c433:	19 d2                	sbb    edx,edx
c000c435:	c1 e3 0c             	shl    ebx,0xc
c000c438:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c43c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c442:	25 fc 0f 00 00       	and    eax,0xffc
c000c447:	01 d8                	add    eax,ebx
c000c449:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c450:	83 c4 1c             	add    esp,0x1c
c000c453:	5b                   	pop    ebx
c000c454:	5e                   	pop    esi
c000c455:	5f                   	pop    edi
c000c456:	5d                   	pop    ebp
c000c457:	c3                   	ret    
c000c458:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c45c:	83 ec 0c             	sub    esp,0xc
c000c45f:	68 50 42 02 c0       	push   0xc0024250
c000c464:	e8 f6 83 00 00       	call   c001485f <Krnl::panic(char const*)>
c000c469:	83 c4 10             	add    esp,0x10
c000c46c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c470:	eb 9c                	jmp    c000c40e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c472:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c476:	e8 ff db ff ff       	call   c000a07a <Phys::allocatePage()>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	89 c5                	mov    ebp,eax
c000c480:	8b 0d 30 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027c30
c000c486:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c48a:	6a 01                	push   0x1
c000c48c:	e8 fc f4 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c000c491:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c498:	6a 01                	push   0x1
c000c49a:	50                   	push   eax
c000c49b:	55                   	push   ebp
c000c49c:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4a2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4a6:	51                   	push   ecx
c000c4a7:	e8 7e fe ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4ac:	83 c4 1c             	add    esp,0x1c
c000c4af:	68 00 10 00 00       	push   0x1000
c000c4b4:	6a 00                	push   0x0
c000c4b6:	50                   	push   eax
c000c4b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4bb:	e8 c4 41 ff ff       	call   c0000684 <memset>
c000c4c0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c4c4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c4c7:	e8 f1 f7 ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c000c4cc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c4cf:	83 c4 10             	add    esp,0x10
c000c4d2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c4d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c4d9:	e9 47 ff ff ff       	jmp    c000c425 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c4de <VAS::VAS(bool)>:
c000c4de:	53                   	push   ebx
c000c4df:	83 ec 28             	sub    esp,0x28
c000c4e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c4e6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c4ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c4f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c500:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c504:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c508:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c50b:	e8 6a db ff ff       	call   c000a07a <Phys::allocatePage()>
c000c510:	89 c2                	mov    edx,eax
c000c512:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c516:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c519:	8b 1d 30 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c30
c000c51f:	83 ec 0c             	sub    esp,0xc
c000c522:	6a 01                	push   0x1
c000c524:	e8 64 f4 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c000c529:	83 c4 10             	add    esp,0x10
c000c52c:	89 c2                	mov    edx,eax
c000c52e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c532:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c535:	83 ec 0c             	sub    esp,0xc
c000c538:	6a 03                	push   0x3
c000c53a:	6a 01                	push   0x1
c000c53c:	52                   	push   edx
c000c53d:	50                   	push   eax
c000c53e:	53                   	push   ebx
c000c53f:	e8 e6 fd ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c544:	83 c4 20             	add    esp,0x20
c000c547:	89 c2                	mov    edx,eax
c000c549:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c54d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c550:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c558:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c560:	7f 1c                	jg     c000c57e <VAS::VAS(bool)+0xa0>
c000c562:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c566:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c569:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c56d:	c1 e2 02             	shl    edx,0x2
c000c570:	01 d0                	add    eax,edx
c000c572:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c578:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c57c:	eb da                	jmp    c000c558 <VAS::VAS(bool)+0x7a>
c000c57e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c586:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c58e:	7f 7a                	jg     c000c60a <VAS::VAS(bool)+0x12c>
c000c590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c594:	2d 00 02 00 00       	sub    eax,0x200
c000c599:	c1 e0 0c             	shl    eax,0xc
c000c59c:	83 c8 03             	or     eax,0x3
c000c59f:	89 c2                	mov    edx,eax
c000c5a1:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000c5a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5ac:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c5b2:	83 e0 10             	and    eax,0x10
c000c5b5:	84 c0                	test   al,al
c000c5b7:	74 07                	je     c000c5c0 <VAS::VAS(bool)+0xe2>
c000c5b9:	b8 00 01 00 00       	mov    eax,0x100
c000c5be:	eb 05                	jmp    c000c5c5 <VAS::VAS(bool)+0xe7>
c000c5c0:	b8 00 00 00 00       	mov    eax,0x0
c000c5c5:	09 d0                	or     eax,edx
c000c5c7:	89 c1                	mov    ecx,eax
c000c5c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c5d4:	c1 e2 02             	shl    edx,0x2
c000c5d7:	01 d0                	add    eax,edx
c000c5d9:	89 ca                	mov    edx,ecx
c000c5db:	89 10                	mov    DWORD PTR [eax],edx
c000c5dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5e1:	2d 40 03 00 00       	sub    eax,0x340
c000c5e6:	83 f8 7f             	cmp    eax,0x7f
c000c5e9:	77 16                	ja     c000c601 <VAS::VAS(bool)+0x123>
c000c5eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c5f6:	c1 e2 02             	shl    edx,0x2
c000c5f9:	01 d0                	add    eax,edx
c000c5fb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c601:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c605:	e9 7c ff ff ff       	jmp    c000c586 <VAS::VAS(bool)+0xa8>
c000c60a:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000c60f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c615:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c61b:	83 e0 10             	and    eax,0x10
c000c61e:	84 c0                	test   al,al
c000c620:	74 07                	je     c000c629 <VAS::VAS(bool)+0x14b>
c000c622:	b8 03 41 00 00       	mov    eax,0x4103
c000c627:	eb 05                	jmp    c000c62e <VAS::VAS(bool)+0x150>
c000c629:	b8 03 40 00 00       	mov    eax,0x4003
c000c62e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c632:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c635:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c63b:	89 02                	mov    DWORD PTR [edx],eax
c000c63d:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000c642:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c648:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c64e:	83 ec 08             	sub    esp,0x8
c000c651:	50                   	push   eax
c000c652:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c656:	e8 b3 fc ff ff       	call   c000c30e <VAS::setCPUSpecific(unsigned long)>
c000c65b:	83 c4 10             	add    esp,0x10
c000c65e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c662:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c665:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000c66a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c670:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c676:	83 e0 10             	and    eax,0x10
c000c679:	84 c0                	test   al,al
c000c67b:	74 07                	je     c000c684 <VAS::VAS(bool)+0x1a6>
c000c67d:	b8 00 01 00 00       	mov    eax,0x100
c000c682:	eb 05                	jmp    c000c689 <VAS::VAS(bool)+0x1ab>
c000c684:	b8 00 00 00 00       	mov    eax,0x0
c000c689:	09 c2                	or     edx,eax
c000c68b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c68f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c692:	05 fc 0f 00 00       	add    eax,0xffc
c000c697:	83 ca 03             	or     edx,0x3
c000c69a:	89 10                	mov    DWORD PTR [eax],edx
c000c69c:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000c6a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6a7:	83 ec 0c             	sub    esp,0xc
c000c6aa:	50                   	push   eax
c000c6ab:	e8 8a 1d 00 00       	call   c000e43a <Device::getName()>
c000c6b0:	83 c4 10             	add    esp,0x10
c000c6b3:	83 ec 08             	sub    esp,0x8
c000c6b6:	68 24 43 02 c0       	push   0xc0024324
c000c6bb:	50                   	push   eax
c000c6bc:	e8 0b 41 ff ff       	call   c00007cc <strcmp>
c000c6c1:	83 c4 10             	add    esp,0x10
c000c6c4:	85 c0                	test   eax,eax
c000c6c6:	0f 94 c0             	sete   al
c000c6c9:	84 c0                	test   al,al
c000c6cb:	0f 84 87 00 00 00    	je     c000c758 <VAS::VAS(bool)+0x27a>
c000c6d1:	fa                   	cli    
c000c6d2:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000c6d7:	40                   	inc    eax
c000c6d8:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000c6dd:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000c6e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6e8:	05 7c 09 00 00       	add    eax,0x97c
c000c6ed:	83 ec 0c             	sub    esp,0xc
c000c6f0:	50                   	push   eax
c000c6f1:	e8 bc cd ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c6f6:	83 c4 10             	add    esp,0x10
c000c6f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6fe:	89 c3                	mov    ebx,eax
c000c700:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000c705:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c70b:	05 7c 09 00 00       	add    eax,0x97c
c000c710:	83 ec 0c             	sub    esp,0xc
c000c713:	50                   	push   eax
c000c714:	e8 99 cd ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c719:	83 c4 10             	add    esp,0x10
c000c71c:	83 ec 08             	sub    esp,0x8
c000c71f:	50                   	push   eax
c000c720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c724:	e8 75 f5 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000c729:	83 c4 10             	add    esp,0x10
c000c72c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c72e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c733:	6a 11                	push   0x11
c000c735:	53                   	push   ebx
c000c736:	50                   	push   eax
c000c737:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c73b:	e8 f4 f8 ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c740:	83 c4 10             	add    esp,0x10
c000c743:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000c748:	48                   	dec    eax
c000c749:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000c74e:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000c753:	85 c0                	test   eax,eax
c000c755:	75 01                	jne    c000c758 <VAS::VAS(bool)+0x27a>
c000c757:	fb                   	sti    
c000c758:	90                   	nop
c000c759:	83 c4 28             	add    esp,0x28
c000c75c:	5b                   	pop    ebx
c000c75d:	c3                   	ret    

c000c75e <VAS::evict(unsigned long)>:
c000c75e:	55                   	push   ebp
c000c75f:	57                   	push   edi
c000c760:	56                   	push   esi
c000c761:	53                   	push   ebx
c000c762:	83 ec 1c             	sub    esp,0x1c
c000c765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c769:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c76d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c771:	e8 58 f3 ff ff       	call   c000bace <Virt::allocateSwapfilePage()>
c000c776:	89 c7                	mov    edi,eax
c000c778:	a1 4c 6f 02 c0       	mov    eax,ds:0xc0026f4c
c000c77d:	85 c0                	test   eax,eax
c000c77f:	7e 3d                	jle    c000c7be <VAS::evict(unsigned long)+0x60>
c000c781:	89 ee                	mov    esi,ebp
c000c783:	31 db                	xor    ebx,ebx
c000c785:	83 ec 0c             	sub    esp,0xc
c000c788:	57                   	push   edi
c000c789:	e8 2e f3 ff ff       	call   c000babc <Virt::swapIDToSector(unsigned long)>
c000c78e:	89 34 24             	mov    DWORD PTR [esp],esi
c000c791:	01 d8                	add    eax,ebx
c000c793:	6a 01                	push   0x1
c000c795:	31 d2                	xor    edx,edx
c000c797:	43                   	inc    ebx
c000c798:	52                   	push   edx
c000c799:	81 c6 00 02 00 00    	add    esi,0x200
c000c79f:	50                   	push   eax
c000c7a0:	0f be 05 58 6f 02 c0 	movsx  eax,BYTE PTR ds:0xc0026f58
c000c7a7:	ff 34 85 bc 7f 02 c0 	push   DWORD PTR [eax*4-0x3ffd8044]
c000c7ae:	e8 c9 3c 00 00       	call   c001047c <LogicalDisk::write(unsigned long long, int, void*)>
c000c7b3:	83 c4 20             	add    esp,0x20
c000c7b6:	39 1d 4c 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f4c,ebx
c000c7bc:	7f c7                	jg     c000c785 <VAS::evict(unsigned long)+0x27>
c000c7be:	83 ec 08             	sub    esp,0x8
c000c7c1:	c1 e7 0b             	shl    edi,0xb
c000c7c4:	55                   	push   ebp
c000c7c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7c9:	e8 d0 f4 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000c7ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7d0:	89 d3                	mov    ebx,edx
c000c7d2:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c7d8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c7de:	09 d7                	or     edi,edx
c000c7e0:	89 38                	mov    DWORD PTR [eax],edi
c000c7e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c7e5:	ff 05 28 7c 02 c0    	inc    DWORD PTR ds:0xc0027c28
c000c7eb:	e8 07 d8 ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c000c7f0:	0f 20 d8             	mov    eax,cr3
c000c7f3:	0f 22 d8             	mov    cr3,eax
c000c7f6:	ff 35 28 7c 02 c0    	push   DWORD PTR ds:0xc0027c28
c000c7fc:	55                   	push   ebp
c000c7fd:	53                   	push   ebx
c000c7fe:	68 74 42 02 c0       	push   0xc0024274
c000c803:	e8 ab 04 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c808:	a1 24 7c 02 c0       	mov    eax,ds:0xc0027c24
c000c80d:	c7 44 24 50 32 43 02 c0 	mov    DWORD PTR [esp+0x50],0xc0024332
c000c815:	8d 50 01             	lea    edx,[eax+0x1]
c000c818:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c81c:	89 15 24 7c 02 c0    	mov    DWORD PTR ds:0xc0027c24,edx
c000c822:	83 c4 3c             	add    esp,0x3c
c000c825:	5b                   	pop    ebx
c000c826:	5e                   	pop    esi
c000c827:	5f                   	pop    edi
c000c828:	5d                   	pop    ebp
c000c829:	e9 85 04 00 00       	jmp    c000ccb3 <Dbg::kprintf(char const*, ...)>

c000c82e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c82e:	55                   	push   ebp
c000c82f:	57                   	push   edi
c000c830:	56                   	push   esi
c000c831:	53                   	push   ebx
c000c832:	83 ec 14             	sub    esp,0x14
c000c835:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c839:	68 43 43 02 c0       	push   0xc0024343
c000c83e:	e8 70 04 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c843:	83 c4 10             	add    esp,0x10
c000c846:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c84a:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c850:	74 20                	je     c000c872 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c852:	83 ec 08             	sub    esp,0x8
c000c855:	55                   	push   ebp
c000c856:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c85a:	e8 3f f4 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000c85f:	83 c4 10             	add    esp,0x10
c000c862:	89 c3                	mov    ebx,eax
c000c864:	85 c0                	test   eax,eax
c000c866:	74 0a                	je     c000c872 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c868:	8b 38                	mov    edi,DWORD PTR [eax]
c000c86a:	f7 c7 01 00 00 00    	test   edi,0x1
c000c870:	74 0a                	je     c000c87c <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c872:	31 c0                	xor    eax,eax
c000c874:	83 c4 0c             	add    esp,0xc
c000c877:	5b                   	pop    ebx
c000c878:	5e                   	pop    esi
c000c879:	5f                   	pop    edi
c000c87a:	5d                   	pop    ebp
c000c87b:	c3                   	ret    
c000c87c:	e8 f9 d7 ff ff       	call   c000a07a <Phys::allocatePage()>
c000c881:	c1 ef 0b             	shr    edi,0xb
c000c884:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c886:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c88c:	09 c2                	or     edx,eax
c000c88e:	81 ca 01 08 00 00    	or     edx,0x801
c000c894:	89 13                	mov    DWORD PTR [ebx],edx
c000c896:	8b 0d 4c 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f4c
c000c89c:	85 c9                	test   ecx,ecx
c000c89e:	7e 3d                	jle    c000c8dd <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c8a0:	89 ee                	mov    esi,ebp
c000c8a2:	31 db                	xor    ebx,ebx
c000c8a4:	83 ec 0c             	sub    esp,0xc
c000c8a7:	57                   	push   edi
c000c8a8:	e8 0f f2 ff ff       	call   c000babc <Virt::swapIDToSector(unsigned long)>
c000c8ad:	89 34 24             	mov    DWORD PTR [esp],esi
c000c8b0:	01 d8                	add    eax,ebx
c000c8b2:	6a 01                	push   0x1
c000c8b4:	31 d2                	xor    edx,edx
c000c8b6:	43                   	inc    ebx
c000c8b7:	52                   	push   edx
c000c8b8:	81 c6 00 02 00 00    	add    esi,0x200
c000c8be:	50                   	push   eax
c000c8bf:	0f be 05 58 6f 02 c0 	movsx  eax,BYTE PTR ds:0xc0026f58
c000c8c6:	ff 34 85 bc 7f 02 c0 	push   DWORD PTR [eax*4-0x3ffd8044]
c000c8cd:	e8 3e 3b 00 00       	call   c0010410 <LogicalDisk::read(unsigned long long, int, void*)>
c000c8d2:	83 c4 20             	add    esp,0x20
c000c8d5:	39 1d 4c 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f4c,ebx
c000c8db:	7f c7                	jg     c000c8a4 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c8dd:	a1 28 7c 02 c0       	mov    eax,ds:0xc0027c28
c000c8e2:	48                   	dec    eax
c000c8e3:	52                   	push   edx
c000c8e4:	a3 28 7c 02 c0       	mov    ds:0xc0027c28,eax
c000c8e9:	50                   	push   eax
c000c8ea:	55                   	push   ebp
c000c8eb:	68 56 43 02 c0       	push   0xc0024356
c000c8f0:	e8 be 03 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c8f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c8f8:	e8 a1 f1 ff ff       	call   c000ba9e <Virt::freeSwapfilePage(unsigned long)>
c000c8fd:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000c902:	83 c4 10             	add    esp,0x10
c000c905:	48                   	dec    eax
c000c906:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000c90b:	85 c0                	test   eax,eax
c000c90d:	74 1d                	je     c000c92c <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c90f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c913:	25 ff 0f 00 00       	and    eax,0xfff
c000c918:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c91d:	77 10                	ja     c000c92f <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c91f:	0f 20 d8             	mov    eax,cr3
c000c922:	0f 22 d8             	mov    cr3,eax
c000c925:	b0 01                	mov    al,0x1
c000c927:	e9 48 ff ff ff       	jmp    c000c874 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c92c:	fb                   	sti    
c000c92d:	eb e0                	jmp    c000c90f <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c92f:	83 ec 0c             	sub    esp,0xc
c000c932:	68 6b 43 02 c0       	push   0xc002436b
c000c937:	e8 77 03 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c93c:	83 c4 10             	add    esp,0x10
c000c93f:	eb de                	jmp    c000c91f <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c941:	90                   	nop

c000c942 <VAS::scanForEviction()>:
c000c942:	57                   	push   edi
c000c943:	31 ff                	xor    edi,edi
c000c945:	56                   	push   esi
c000c946:	53                   	push   ebx
c000c947:	83 ec 10             	sub    esp,0x10
c000c94a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c94e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c951:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c957:	75 0e                	jne    c000c967 <VAS::scanForEviction()+0x25>
c000c959:	89 da                	mov    edx,ebx
c000c95b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c95e:	c1 ea 16             	shr    edx,0x16
c000c961:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c965:	74 4e                	je     c000c9b5 <VAS::scanForEviction()+0x73>
c000c967:	53                   	push   ebx
c000c968:	56                   	push   esi
c000c969:	e8 30 f3 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000c96e:	5a                   	pop    edx
c000c96f:	8b 10                	mov    edx,DWORD PTR [eax]
c000c971:	59                   	pop    ecx
c000c972:	89 d1                	mov    ecx,edx
c000c974:	81 e1 01 08 00 00    	and    ecx,0x801
c000c97a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c980:	74 3e                	je     c000c9c0 <VAS::scanForEviction()+0x7e>
c000c982:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c988:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c98e:	76 2b                	jbe    c000c9bb <VAS::scanForEviction()+0x79>
c000c990:	47                   	inc    edi
c000c991:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c998:	83 ff 03             	cmp    edi,0x3
c000c99b:	74 32                	je     c000c9cf <VAS::scanForEviction()+0x8d>
c000c99d:	31 db                	xor    ebx,ebx
c000c99f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9a5:	75 c0                	jne    c000c967 <VAS::scanForEviction()+0x25>
c000c9a7:	89 da                	mov    edx,ebx
c000c9a9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9ac:	c1 ea 16             	shr    edx,0x16
c000c9af:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9b3:	75 b2                	jne    c000c967 <VAS::scanForEviction()+0x25>
c000c9b5:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c9bb:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c9be:	eb 91                	jmp    c000c951 <VAS::scanForEviction()+0xf>
c000c9c0:	f6 c2 20             	test   dl,0x20
c000c9c3:	74 13                	je     c000c9d8 <VAS::scanForEviction()+0x96>
c000c9c5:	83 e2 df             	and    edx,0xffffffdf
c000c9c8:	89 10                	mov    DWORD PTR [eax],edx
c000c9ca:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c9cd:	eb b3                	jmp    c000c982 <VAS::scanForEviction()+0x40>
c000c9cf:	83 c4 10             	add    esp,0x10
c000c9d2:	31 c0                	xor    eax,eax
c000c9d4:	5b                   	pop    ebx
c000c9d5:	5e                   	pop    esi
c000c9d6:	5f                   	pop    edi
c000c9d7:	c3                   	ret    
c000c9d8:	83 ec 08             	sub    esp,0x8
c000c9db:	89 d0                	mov    eax,edx
c000c9dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c9e6:	53                   	push   ebx
c000c9e7:	68 7b 43 02 c0       	push   0xc002437b
c000c9ec:	e8 c2 02 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c9f1:	58                   	pop    eax
c000c9f2:	5a                   	pop    edx
c000c9f3:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c9f6:	56                   	push   esi
c000c9f7:	e8 62 fd ff ff       	call   c000c75e <VAS::evict(unsigned long)>
c000c9fc:	59                   	pop    ecx
c000c9fd:	5b                   	pop    ebx
c000c9fe:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca01:	68 8f 43 02 c0       	push   0xc002438f
c000ca06:	e8 a8 02 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ca0b:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ca12:	83 c4 10             	add    esp,0x10
c000ca15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	5b                   	pop    ebx
c000ca1d:	5e                   	pop    esi
c000ca1e:	5f                   	pop    edi
c000ca1f:	c3                   	ret    

c000ca20 <mapVASFirstTime>:
c000ca20:	55                   	push   ebp
c000ca21:	57                   	push   edi
c000ca22:	56                   	push   esi
c000ca23:	53                   	push   ebx
c000ca24:	83 ec 0c             	sub    esp,0xc
c000ca27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ca2c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ca2f:	4a                   	dec    edx
c000ca30:	0f 84 fe 00 00 00    	je     c000cb34 <mapVASFirstTime+0x114>
c000ca36:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ca39:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ca3c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ca41:	c1 e5 15             	shl    ebp,0x15
c000ca44:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ca49:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ca4f:	29 eb                	sub    ebx,ebp
c000ca51:	29 ef                	sub    edi,ebp
c000ca53:	83 ec 08             	sub    esp,0x8
c000ca56:	53                   	push   ebx
c000ca57:	68 bb 43 02 c0       	push   0xc00243bb
c000ca5c:	e8 52 02 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ca61:	e8 14 d6 ff ff       	call   c000a07a <Phys::allocatePage()>
c000ca66:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ca6d:	6a 01                	push   0x1
c000ca6f:	53                   	push   ebx
c000ca70:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ca76:	50                   	push   eax
c000ca77:	56                   	push   esi
c000ca78:	e8 ad f8 ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ca7d:	83 c4 20             	add    esp,0x20
c000ca80:	39 fb                	cmp    ebx,edi
c000ca82:	75 cf                	jne    c000ca53 <mapVASFirstTime+0x33>
c000ca84:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ca89:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ca8e:	29 eb                	sub    ebx,ebp
c000ca90:	29 ef                	sub    edi,ebp
c000ca92:	83 ec 08             	sub    esp,0x8
c000ca95:	53                   	push   ebx
c000ca96:	68 d7 43 02 c0       	push   0xc00243d7
c000ca9b:	e8 13 02 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000caa0:	58                   	pop    eax
c000caa1:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000caa5:	5a                   	pop    edx
c000caa6:	19 c0                	sbb    eax,eax
c000caa8:	83 e0 04             	and    eax,0x4
c000caab:	05 03 04 00 00       	add    eax,0x403
c000cab0:	50                   	push   eax
c000cab1:	68 eb 43 02 c0       	push   0xc00243eb
c000cab6:	e8 f8 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cabb:	e8 ba d5 ff ff       	call   c000a07a <Phys::allocatePage()>
c000cac0:	59                   	pop    ecx
c000cac1:	89 c5                	mov    ebp,eax
c000cac3:	58                   	pop    eax
c000cac4:	55                   	push   ebp
c000cac5:	68 f9 43 02 c0       	push   0xc00243f9
c000caca:	e8 e4 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cacf:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cad3:	19 d2                	sbb    edx,edx
c000cad5:	83 e2 04             	and    edx,0x4
c000cad8:	81 c2 03 04 00 00    	add    edx,0x403
c000cade:	89 14 24             	mov    DWORD PTR [esp],edx
c000cae1:	6a 01                	push   0x1
c000cae3:	53                   	push   ebx
c000cae4:	55                   	push   ebp
c000cae5:	56                   	push   esi
c000cae6:	e8 3f f8 ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000caeb:	83 c4 18             	add    esp,0x18
c000caee:	53                   	push   ebx
c000caef:	56                   	push   esi
c000caf0:	e8 a9 f1 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000caf5:	5a                   	pop    edx
c000caf6:	59                   	pop    ecx
c000caf7:	ff 30                	push   DWORD PTR [eax]
c000caf9:	68 15 44 02 c0       	push   0xc0024415
c000cafe:	e8 b0 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb03:	0f 20 d8             	mov    eax,cr3
c000cb06:	83 c4 0c             	add    esp,0xc
c000cb09:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cb0f:	56                   	push   esi
c000cb10:	50                   	push   eax
c000cb11:	68 20 44 02 c0       	push   0xc0024420
c000cb16:	e8 98 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb1b:	83 c4 10             	add    esp,0x10
c000cb1e:	39 df                	cmp    edi,ebx
c000cb20:	0f 85 6c ff ff ff    	jne    c000ca92 <mapVASFirstTime+0x72>
c000cb26:	0f 20 d8             	mov    eax,cr3
c000cb29:	0f 22 d8             	mov    cr3,eax
c000cb2c:	83 c4 0c             	add    esp,0xc
c000cb2f:	5b                   	pop    ebx
c000cb30:	5e                   	pop    esi
c000cb31:	5f                   	pop    edi
c000cb32:	5d                   	pop    ebp
c000cb33:	c3                   	ret    
c000cb34:	83 ec 0c             	sub    esp,0xc
c000cb37:	68 a2 43 02 c0       	push   0xc00243a2
c000cb3c:	e8 72 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb41:	83 c4 10             	add    esp,0x10
c000cb44:	83 c4 0c             	add    esp,0xc
c000cb47:	5b                   	pop    ebx
c000cb48:	5e                   	pop    esi
c000cb49:	5f                   	pop    edi
c000cb4a:	5d                   	pop    ebp
c000cb4b:	c3                   	ret    

c000cb4c <__cxa_atexit>:
c000cb4c:	31 c0                	xor    eax,eax
c000cb4e:	c3                   	ret    

c000cb4f <__cxa_finalize>:
c000cb4f:	c3                   	ret    

c000cb50 <__stack_chk_fail>:
c000cb50:	55                   	push   ebp
c000cb51:	89 e5                	mov    ebp,esp
c000cb53:	83 ec 14             	sub    esp,0x14
c000cb56:	68 38 44 02 c0       	push   0xc0024438
c000cb5b:	e8 53 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb60:	58                   	pop    eax
c000cb61:	5a                   	pop    edx
c000cb62:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb65:	68 88 44 02 c0       	push   0xc0024488
c000cb6a:	e8 44 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb6f:	59                   	pop    ecx
c000cb70:	58                   	pop    eax
c000cb71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb74:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cb77:	68 88 44 02 c0       	push   0xc0024488
c000cb7c:	e8 32 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb81:	5a                   	pop    edx
c000cb82:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb85:	59                   	pop    ecx
c000cb86:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb88:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cb8b:	68 88 44 02 c0       	push   0xc0024488
c000cb90:	e8 1e 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb95:	5a                   	pop    edx
c000cb96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb99:	59                   	pop    ecx
c000cb9a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb9e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cba1:	68 88 44 02 c0       	push   0xc0024488
c000cba6:	e8 08 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cbab:	c7 04 24 90 44 02 c0 	mov    DWORD PTR [esp],0xc0024490
c000cbb2:	e8 a8 7c 00 00       	call   c001485f <Krnl::panic(char const*)>
c000cbb7:	83 c4 10             	add    esp,0x10
c000cbba:	c9                   	leave  
c000cbbb:	c3                   	ret    

c000cbbc <__cxa_pure_virtual>:
c000cbbc:	83 ec 18             	sub    esp,0x18
c000cbbf:	68 a8 44 02 c0       	push   0xc00244a8
c000cbc4:	e8 96 7c 00 00       	call   c001485f <Krnl::panic(char const*)>
c000cbc9:	83 c4 1c             	add    esp,0x1c
c000cbcc:	c3                   	ret    

c000cbcd <operator new[](unsigned long)>:
c000cbcd:	e9 f1 cd ff ff       	jmp    c00099c3 <malloc>

c000cbd2 <operator delete(void*, unsigned long)>:
c000cbd2:	e9 0c ce ff ff       	jmp    c00099e3 <rfree>

c000cbd7 <operator delete[](void*)>:
c000cbd7:	e9 07 ce ff ff       	jmp    c00099e3 <rfree>

c000cbdc <operator delete[](void*, unsigned long)>:
c000cbdc:	e9 02 ce ff ff       	jmp    c00099e3 <rfree>

c000cbe1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cbe1:	55                   	push   ebp
c000cbe2:	b9 11 00 00 00       	mov    ecx,0x11
c000cbe7:	57                   	push   edi
c000cbe8:	56                   	push   esi
c000cbe9:	be 8e 3f 02 c0       	mov    esi,0xc0023f8e
c000cbee:	53                   	push   ebx
c000cbef:	83 ec 20             	sub    esp,0x20
c000cbf2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cbf6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cbfa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cbfe:	fc                   	cld    
c000cbff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc01:	89 ee                	mov    esi,ebp
c000cc03:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc07:	eb 02                	jmp    c000cc0b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cc09:	89 c6                	mov    esi,eax
c000cc0b:	31 d2                	xor    edx,edx
c000cc0d:	41                   	inc    ecx
c000cc0e:	89 f0                	mov    eax,esi
c000cc10:	f7 f3                	div    ebx
c000cc12:	39 de                	cmp    esi,ebx
c000cc14:	73 f3                	jae    c000cc09 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cc16:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cc19:	eb 02                	jmp    c000cc1d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cc1b:	89 c5                	mov    ebp,eax
c000cc1d:	31 d2                	xor    edx,edx
c000cc1f:	49                   	dec    ecx
c000cc20:	89 e8                	mov    eax,ebp
c000cc22:	f7 f3                	div    ebx
c000cc24:	39 dd                	cmp    ebp,ebx
c000cc26:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cc2a:	88 11                	mov    BYTE PTR [ecx],dl
c000cc2c:	73 ed                	jae    c000cc1b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cc2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc32:	83 c4 20             	add    esp,0x20
c000cc35:	5b                   	pop    ebx
c000cc36:	5e                   	pop    esi
c000cc37:	5f                   	pop    edi
c000cc38:	5d                   	pop    ebp
c000cc39:	c3                   	ret    

c000cc3a <Dbg::logc(char)>:
c000cc3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc3e:	f6 05 20 7b 02 c0 10 	test   BYTE PTR ds:0xc0027b20,0x10
c000cc45:	75 12                	jne    c000cc59 <Dbg::logc(char)+0x1f>
c000cc47:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc4c:	ec                   	in     al,dx
c000cc4d:	a8 20                	test   al,0x20
c000cc4f:	74 fb                	je     c000cc4c <Dbg::logc(char)+0x12>
c000cc51:	ba f8 03 00 00       	mov    edx,0x3f8
c000cc56:	88 c8                	mov    al,cl
c000cc58:	ee                   	out    dx,al
c000cc59:	c3                   	ret    

c000cc5a <Dbg::logs(char*)>:
c000cc5a:	53                   	push   ebx
c000cc5b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cc5f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cc62:	84 c0                	test   al,al
c000cc64:	74 0f                	je     c000cc75 <Dbg::logs(char*)+0x1b>
c000cc66:	50                   	push   eax
c000cc67:	43                   	inc    ebx
c000cc68:	e8 cd ff ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cc6d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cc70:	5a                   	pop    edx
c000cc71:	84 c0                	test   al,al
c000cc73:	75 f1                	jne    c000cc66 <Dbg::logs(char*)+0xc>
c000cc75:	5b                   	pop    ebx
c000cc76:	c3                   	ret    

c000cc77 <Dbg::logWriteInt(unsigned int)>:
c000cc77:	83 ec 10             	sub    esp,0x10
c000cc7a:	6a 0a                	push   0xa
c000cc7c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc85:	e8 57 ff ff ff       	call   c000cbe1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cc8a:	50                   	push   eax
c000cc8b:	e8 ca ff ff ff       	call   c000cc5a <Dbg::logs(char*)>
c000cc90:	83 c4 20             	add    esp,0x20
c000cc93:	c3                   	ret    

c000cc94 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cc94:	83 ec 10             	sub    esp,0x10
c000cc97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc9b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cc9f:	50                   	push   eax
c000cca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca4:	e8 38 ff ff ff       	call   c000cbe1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cca9:	50                   	push   eax
c000ccaa:	e8 ab ff ff ff       	call   c000cc5a <Dbg::logs(char*)>
c000ccaf:	83 c4 20             	add    esp,0x20
c000ccb2:	c3                   	ret    

c000ccb3 <Dbg::kprintf(char const*, ...)>:
c000ccb3:	55                   	push   ebp
c000ccb4:	57                   	push   edi
c000ccb5:	56                   	push   esi
c000ccb6:	53                   	push   ebx
c000ccb7:	83 ec 0c             	sub    esp,0xc
c000ccba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ccbe:	f6 05 20 7b 02 c0 10 	test   BYTE PTR ds:0xc0027b20,0x10
c000ccc5:	74 08                	je     c000cccf <Dbg::kprintf(char const*, ...)+0x1c>
c000ccc7:	83 c4 0c             	add    esp,0xc
c000ccca:	5b                   	pop    ebx
c000cccb:	5e                   	pop    esi
c000cccc:	5f                   	pop    edi
c000cccd:	5d                   	pop    ebp
c000ccce:	c3                   	ret    
c000cccf:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ccd3:	31 db                	xor    ebx,ebx
c000ccd5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ccd9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ccdc:	84 c0                	test   al,al
c000ccde:	74 e7                	je     c000ccc7 <Dbg::kprintf(char const*, ...)+0x14>
c000cce0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cce3:	3c 25                	cmp    al,0x25
c000cce5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cce8:	75 44                	jne    c000cd2e <Dbg::kprintf(char const*, ...)+0x7b>
c000ccea:	83 c3 02             	add    ebx,0x2
c000cced:	8a 07                	mov    al,BYTE PTR [edi]
c000ccef:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ccf2:	83 e8 25             	sub    eax,0x25
c000ccf5:	3c 53                	cmp    al,0x53
c000ccf7:	0f 87 c9 00 00 00    	ja     c000cdc6 <Dbg::kprintf(char const*, ...)+0x113>
c000ccfd:	0f b6 c0             	movzx  eax,al
c000cd00:	ff 24 85 bc 44 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdbb44]
c000cd07:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd0b:	89 c8                	mov    eax,ecx
c000cd0d:	83 c1 04             	add    ecx,0x4
c000cd10:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd14:	ff 30                	push   DWORD PTR [eax]
c000cd16:	e8 5c ff ff ff       	call   c000cc77 <Dbg::logWriteInt(unsigned int)>
c000cd1b:	5f                   	pop    edi
c000cd1c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cd20:	84 c0                	test   al,al
c000cd22:	74 a3                	je     c000ccc7 <Dbg::kprintf(char const*, ...)+0x14>
c000cd24:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd27:	3c 25                	cmp    al,0x25
c000cd29:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd2c:	74 bc                	je     c000ccea <Dbg::kprintf(char const*, ...)+0x37>
c000cd2e:	50                   	push   eax
c000cd2f:	89 eb                	mov    ebx,ebp
c000cd31:	e8 04 ff ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cd36:	89 fd                	mov    ebp,edi
c000cd38:	58                   	pop    eax
c000cd39:	eb e1                	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cd3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd3f:	89 c8                	mov    eax,ecx
c000cd41:	83 c1 04             	add    ecx,0x4
c000cd44:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd48:	ff 30                	push   DWORD PTR [eax]
c000cd4a:	e8 0b ff ff ff       	call   c000cc5a <Dbg::logs(char*)>
c000cd4f:	58                   	pop    eax
c000cd50:	eb ca                	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cd52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd56:	89 d0                	mov    eax,edx
c000cd58:	83 c2 04             	add    edx,0x4
c000cd5b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd5f:	ff 30                	push   DWORD PTR [eax]
c000cd61:	e8 11 ff ff ff       	call   c000cc77 <Dbg::logWriteInt(unsigned int)>
c000cd66:	58                   	pop    eax
c000cd67:	eb b3                	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cd69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd6d:	89 d0                	mov    eax,edx
c000cd6f:	83 c2 04             	add    edx,0x4
c000cd72:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cd75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd79:	50                   	push   eax
c000cd7a:	e8 bb fe ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cd7f:	58                   	pop    eax
c000cd80:	eb 9a                	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cd82:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd86:	89 c8                	mov    eax,ecx
c000cd88:	83 c1 04             	add    ecx,0x4
c000cd8b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd8f:	6a 10                	push   0x10
c000cd91:	ff 30                	push   DWORD PTR [eax]
c000cd93:	e8 fc fe ff ff       	call   c000cc94 <Dbg::logWriteIntBase(unsigned int, int)>
c000cd98:	59                   	pop    ecx
c000cd99:	5f                   	pop    edi
c000cd9a:	eb 80                	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cd9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cda0:	89 d0                	mov    eax,edx
c000cda2:	83 c2 08             	add    edx,0x8
c000cda5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cda9:	6a 10                	push   0x10
c000cdab:	ff 30                	push   DWORD PTR [eax]
c000cdad:	e8 e2 fe ff ff       	call   c000cc94 <Dbg::logWriteIntBase(unsigned int, int)>
c000cdb2:	58                   	pop    eax
c000cdb3:	5a                   	pop    edx
c000cdb4:	e9 63 ff ff ff       	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cdb9:	6a 25                	push   0x25
c000cdbb:	e8 7a fe ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cdc0:	58                   	pop    eax
c000cdc1:	e9 56 ff ff ff       	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cdc6:	6a 25                	push   0x25
c000cdc8:	e8 6d fe ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cdcd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cdd0:	50                   	push   eax
c000cdd1:	e8 64 fe ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cdd6:	5a                   	pop    edx
c000cdd7:	59                   	pop    ecx
c000cdd8:	e9 3f ff ff ff       	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cddd:	90                   	nop

c000cdde <File::read(unsigned long long, void*, int*)>:
c000cdde:	53                   	push   ebx
c000cddf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cde3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cde7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cdee:	3c 19                	cmp    al,0x19
c000cdf0:	77 35                	ja     c000ce27 <File::read(unsigned long long, void*, int*)+0x49>
c000cdf2:	8b 04 85 c0 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f40]
c000cdf9:	85 c0                	test   eax,eax
c000cdfb:	74 2a                	je     c000ce27 <File::read(unsigned long long, void*, int*)+0x49>
c000cdfd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce03:	85 c0                	test   eax,eax
c000ce05:	74 20                	je     c000ce27 <File::read(unsigned long long, void*, int*)+0x49>
c000ce07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce0b:	74 21                	je     c000ce2e <File::read(unsigned long long, void*, int*)+0x50>
c000ce0d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce13:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce21:	5b                   	pop    ebx
c000ce22:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ce25:	ff e0                	jmp    eax
c000ce27:	b8 0b 00 00 00       	mov    eax,0xb
c000ce2c:	eb 05                	jmp    c000ce33 <File::read(unsigned long long, void*, int*)+0x55>
c000ce2e:	b8 05 00 00 00       	mov    eax,0x5
c000ce33:	5b                   	pop    ebx
c000ce34:	c3                   	ret    
c000ce35:	90                   	nop

c000ce36 <File::write(unsigned long long, void*, int*)>:
c000ce36:	53                   	push   ebx
c000ce37:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce3b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce3f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce46:	3c 19                	cmp    al,0x19
c000ce48:	77 35                	ja     c000ce7f <File::write(unsigned long long, void*, int*)+0x49>
c000ce4a:	8b 04 85 c0 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f40]
c000ce51:	85 c0                	test   eax,eax
c000ce53:	74 2a                	je     c000ce7f <File::write(unsigned long long, void*, int*)+0x49>
c000ce55:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce5b:	85 c0                	test   eax,eax
c000ce5d:	74 20                	je     c000ce7f <File::write(unsigned long long, void*, int*)+0x49>
c000ce5f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce63:	74 21                	je     c000ce86 <File::write(unsigned long long, void*, int*)+0x50>
c000ce65:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce67:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce6b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce79:	5b                   	pop    ebx
c000ce7a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ce7d:	ff e0                	jmp    eax
c000ce7f:	b8 0b 00 00 00       	mov    eax,0xb
c000ce84:	eb 05                	jmp    c000ce8b <File::write(unsigned long long, void*, int*)+0x55>
c000ce86:	b8 05 00 00 00       	mov    eax,0x5
c000ce8b:	5b                   	pop    ebx
c000ce8c:	c3                   	ret    
c000ce8d:	90                   	nop

c000ce8e <Directory::read(unsigned long long, void*, int*)>:
c000ce8e:	53                   	push   ebx
c000ce8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce93:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce97:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce9e:	3c 19                	cmp    al,0x19
c000cea0:	77 35                	ja     c000ced7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cea2:	8b 04 85 c0 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f40]
c000cea9:	85 c0                	test   eax,eax
c000ceab:	74 2a                	je     c000ced7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cead:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ceb3:	85 c0                	test   eax,eax
c000ceb5:	74 20                	je     c000ced7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceb7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cebb:	74 21                	je     c000cede <Directory::read(unsigned long long, void*, int*)+0x50>
c000cebd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cebf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cec3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cec9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cecd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ced1:	5b                   	pop    ebx
c000ced2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ced5:	ff e0                	jmp    eax
c000ced7:	b8 0b 00 00 00       	mov    eax,0xb
c000cedc:	eb 05                	jmp    c000cee3 <Directory::read(unsigned long long, void*, int*)+0x55>
c000cede:	b8 05 00 00 00       	mov    eax,0x5
c000cee3:	5b                   	pop    ebx
c000cee4:	c3                   	ret    
c000cee5:	90                   	nop

c000cee6 <Directory::write(unsigned long long, void*, int*)>:
c000cee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceea:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cef1:	b8 0b 00 00 00       	mov    eax,0xb
c000cef6:	80 fa 19             	cmp    dl,0x19
c000cef9:	77 18                	ja     c000cf13 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cefb:	8b 14 95 c0 80 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f40]
c000cf02:	85 d2                	test   edx,edx
c000cf04:	74 0d                	je     c000cf13 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf06:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cf0d:	19 c0                	sbb    eax,eax
c000cf0f:	83 e0 0a             	and    eax,0xa
c000cf12:	40                   	inc    eax
c000cf13:	c3                   	ret    

c000cf14 <File::isAtty()>:
c000cf14:	31 c0                	xor    eax,eax
c000cf16:	c3                   	ret    
c000cf17:	90                   	nop

c000cf18 <Directory::isAtty()>:
c000cf18:	31 c0                	xor    eax,eax
c000cf1a:	c3                   	ret    
c000cf1b:	90                   	nop

c000cf1c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cf1c:	b8 0a 00 00 00       	mov    eax,0xa
c000cf21:	c3                   	ret    

c000cf22 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cf22:	b8 0a 00 00 00       	mov    eax,0xa
c000cf27:	c3                   	ret    

c000cf28 <Filesystem::allocateSwapfile(char const*, int)>:
c000cf28:	31 c0                	xor    eax,eax
c000cf2a:	31 d2                	xor    edx,edx
c000cf2c:	c3                   	ret    
c000cf2d:	90                   	nop

c000cf2e <File::~File()>:
c000cf2e:	83 ec 0c             	sub    esp,0xc
c000cf31:	ba 7c 46 02 c0       	mov    edx,0xc002467c
c000cf36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf3a:	89 10                	mov    DWORD PTR [eax],edx
c000cf3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf40:	83 ec 0c             	sub    esp,0xc
c000cf43:	50                   	push   eax
c000cf44:	e8 e3 e7 ff ff       	call   c000b72c <UnixFile::~UnixFile()>
c000cf49:	83 c4 10             	add    esp,0x10
c000cf4c:	90                   	nop
c000cf4d:	83 c4 0c             	add    esp,0xc
c000cf50:	c3                   	ret    
c000cf51:	90                   	nop

c000cf52 <File::~File()>:
c000cf52:	83 ec 0c             	sub    esp,0xc
c000cf55:	83 ec 0c             	sub    esp,0xc
c000cf58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf5c:	e8 cd ff ff ff       	call   c000cf2e <File::~File()>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	83 ec 08             	sub    esp,0x8
c000cf67:	68 14 01 00 00       	push   0x114
c000cf6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf70:	e8 5d fc ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000cf75:	83 c4 10             	add    esp,0x10
c000cf78:	83 c4 0c             	add    esp,0xc
c000cf7b:	c3                   	ret    

c000cf7c <Directory::~Directory()>:
c000cf7c:	83 ec 0c             	sub    esp,0xc
c000cf7f:	ba 98 46 02 c0       	mov    edx,0xc0024698
c000cf84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf88:	89 10                	mov    DWORD PTR [eax],edx
c000cf8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf8e:	83 ec 0c             	sub    esp,0xc
c000cf91:	50                   	push   eax
c000cf92:	e8 95 e7 ff ff       	call   c000b72c <UnixFile::~UnixFile()>
c000cf97:	83 c4 10             	add    esp,0x10
c000cf9a:	90                   	nop
c000cf9b:	83 c4 0c             	add    esp,0xc
c000cf9e:	c3                   	ret    
c000cf9f:	90                   	nop

c000cfa0 <Directory::~Directory()>:
c000cfa0:	83 ec 0c             	sub    esp,0xc
c000cfa3:	83 ec 0c             	sub    esp,0xc
c000cfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfaa:	e8 cd ff ff ff       	call   c000cf7c <Directory::~Directory()>
c000cfaf:	83 c4 10             	add    esp,0x10
c000cfb2:	83 ec 08             	sub    esp,0x8
c000cfb5:	68 14 01 00 00       	push   0x114
c000cfba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfbe:	e8 0f fc ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000cfc3:	83 c4 10             	add    esp,0x10
c000cfc6:	83 c4 0c             	add    esp,0xc
c000cfc9:	c3                   	ret    

c000cfca <Filesystem::Filesystem()>:
c000cfca:	ba 14 46 02 c0       	mov    edx,0xc0024614
c000cfcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfd3:	89 10                	mov    DWORD PTR [eax],edx
c000cfd5:	8b 15 34 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027c34
c000cfdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfdf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cfe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfe6:	a3 34 7c 02 c0       	mov    ds:0xc0027c34,eax
c000cfeb:	90                   	nop
c000cfec:	c3                   	ret    
c000cfed:	90                   	nop

c000cfee <Filesystem::~Filesystem()>:
c000cfee:	ba 14 46 02 c0       	mov    edx,0xc0024614
c000cff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cff7:	89 10                	mov    DWORD PTR [eax],edx
c000cff9:	90                   	nop
c000cffa:	c3                   	ret    
c000cffb:	90                   	nop

c000cffc <Filesystem::~Filesystem()>:
c000cffc:	83 ec 0c             	sub    esp,0xc
c000cfff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d003:	e8 e6 ff ff ff       	call   c000cfee <Filesystem::~Filesystem()>
c000d008:	83 c4 04             	add    esp,0x4
c000d00b:	83 ec 08             	sub    esp,0x8
c000d00e:	6a 08                	push   0x8
c000d010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d014:	e8 b9 fb ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	83 c4 0c             	add    esp,0xc
c000d01f:	c3                   	ret    

c000d020 <Fs::getcwd(Process*, char*, int)>:
c000d020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d024:	31 c0                	xor    eax,eax
c000d026:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d029:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d02d:	7d 15                	jge    c000d044 <Fs::getcwd(Process*, char*, int)+0x24>
c000d02f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d033:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d03a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d03d:	84 c9                	test   cl,cl
c000d03f:	74 06                	je     c000d047 <Fs::getcwd(Process*, char*, int)+0x27>
c000d041:	40                   	inc    eax
c000d042:	eb e2                	jmp    c000d026 <Fs::getcwd(Process*, char*, int)+0x6>
c000d044:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d047:	31 c0                	xor    eax,eax
c000d049:	c3                   	ret    

c000d04a <Fs::initVFS()>:
c000d04a:	83 ec 18             	sub    esp,0x18
c000d04d:	6a 08                	push   0x8
c000d04f:	e8 6f c9 ff ff       	call   c00099c3 <malloc>
c000d054:	89 04 24             	mov    DWORD PTR [esp],eax
c000d057:	e8 58 e6 00 00       	call   c001b6b4 <FAT::FAT()>
c000d05c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d063:	e8 5b c9 ff ff       	call   c00099c3 <malloc>
c000d068:	89 04 24             	mov    DWORD PTR [esp],eax
c000d06b:	e8 a2 f8 00 00       	call   c001c912 <ISO9660::ISO9660()>
c000d070:	83 c4 1c             	add    esp,0x1c
c000d073:	c3                   	ret    

c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d074:	55                   	push   ebp
c000d075:	57                   	push   edi
c000d076:	56                   	push   esi
c000d077:	53                   	push   ebx
c000d078:	81 ec 10 04 00 00    	sub    esp,0x410
c000d07e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d085:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d08c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d093:	68 00 04 00 00       	push   0x400
c000d098:	6a 00                	push   0x0
c000d09a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d09e:	56                   	push   esi
c000d09f:	e8 e0 35 ff ff       	call   c0000684 <memset>
c000d0a4:	83 c4 10             	add    esp,0x10
c000d0a7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d0ab:	75 0b                	jne    c000d0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d0ad:	50                   	push   eax
c000d0ae:	50                   	push   eax
c000d0af:	57                   	push   edi
c000d0b0:	56                   	push   esi
c000d0b1:	e8 8a 36 ff ff       	call   c0000740 <strcpy>
c000d0b6:	eb 41                	jmp    c000d0f9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d0b8:	8a 07                	mov    al,BYTE PTR [edi]
c000d0ba:	3c 5c                	cmp    al,0x5c
c000d0bc:	74 04                	je     c000d0c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d0be:	3c 2f                	cmp    al,0x2f
c000d0c0:	75 18                	jne    c000d0da <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d0c2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d0c5:	3c 60                	cmp    al,0x60
c000d0c7:	7e 03                	jle    c000d0cc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d0c9:	83 e8 20             	sub    eax,0x20
c000d0cc:	88 04 24             	mov    BYTE PTR [esp],al
c000d0cf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d0d6:	50                   	push   eax
c000d0d7:	50                   	push   eax
c000d0d8:	eb 18                	jmp    c000d0f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d0da:	50                   	push   eax
c000d0db:	50                   	push   eax
c000d0dc:	55                   	push   ebp
c000d0dd:	56                   	push   esi
c000d0de:	e8 5d 36 ff ff       	call   c0000740 <strcpy>
c000d0e3:	5a                   	pop    edx
c000d0e4:	59                   	pop    ecx
c000d0e5:	68 32 5c 02 c0       	push   0xc0025c32
c000d0ea:	56                   	push   esi
c000d0eb:	e8 90 37 ff ff       	call   c0000880 <strcat>
c000d0f0:	5d                   	pop    ebp
c000d0f1:	58                   	pop    eax
c000d0f2:	57                   	push   edi
c000d0f3:	56                   	push   esi
c000d0f4:	e8 87 37 ff ff       	call   c0000880 <strcat>
c000d0f9:	83 c4 10             	add    esp,0x10
c000d0fc:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d0ff:	3c 60                	cmp    al,0x60
c000d101:	7e 03                	jle    c000d106 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d103:	83 e8 20             	sub    eax,0x20
c000d106:	88 04 24             	mov    BYTE PTR [esp],al
c000d109:	88 03                	mov    BYTE PTR [ebx],al
c000d10b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d112:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d118:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d11c:	bf 03 00 00 00       	mov    edi,0x3
c000d121:	b8 03 00 00 00       	mov    eax,0x3
c000d126:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d129:	84 d2                	test   dl,dl
c000d12b:	0f 84 91 00 00 00    	je     c000d1c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d131:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d134:	80 fa 5c             	cmp    dl,0x5c
c000d137:	74 05                	je     c000d13e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d139:	80 fa 2f             	cmp    dl,0x2f
c000d13c:	75 12                	jne    c000d150 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d13e:	89 c5                	mov    ebp,eax
c000d140:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d145:	74 09                	je     c000d150 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d147:	40                   	inc    eax
c000d148:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d14c:	89 cf                	mov    edi,ecx
c000d14e:	eb d6                	jmp    c000d126 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d150:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d155:	75 5b                	jne    c000d1b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d157:	80 fa 2e             	cmp    dl,0x2e
c000d15a:	75 56                	jne    c000d1b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d15c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d160:	74 19                	je     c000d17b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d162:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d167:	74 53                	je     c000d1bc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d169:	89 f9                	mov    ecx,edi
c000d16b:	41                   	inc    ecx
c000d16c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d16f:	80 fa 2f             	cmp    dl,0x2f
c000d172:	74 f7                	je     c000d16b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d174:	80 fa 5c             	cmp    dl,0x5c
c000d177:	74 f2                	je     c000d16b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d179:	eb d1                	jmp    c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d17b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d180:	74 3a                	je     c000d1bc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d182:	83 f8 03             	cmp    eax,0x3
c000d185:	74 c5                	je     c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d187:	41                   	inc    ecx
c000d188:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d18b:	80 fa 2f             	cmp    dl,0x2f
c000d18e:	74 f7                	je     c000d187 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d190:	80 fa 5c             	cmp    dl,0x5c
c000d193:	74 f2                	je     c000d187 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d195:	48                   	dec    eax
c000d196:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d19a:	75 06                	jne    c000d1a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d19c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1a0:	eb f3                	jmp    c000d195 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d1a2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1a6:	74 07                	je     c000d1af <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d1a8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1ac:	48                   	dec    eax
c000d1ad:	eb f3                	jmp    c000d1a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1af:	40                   	inc    eax
c000d1b0:	eb 9a                	jmp    c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1b2:	80 fa 2f             	cmp    dl,0x2f
c000d1b5:	74 95                	je     c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1b7:	80 fa 5c             	cmp    dl,0x5c
c000d1ba:	74 90                	je     c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1bc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d1bf:	40                   	inc    eax
c000d1c0:	eb 8a                	jmp    c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1c2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1c6:	83 ec 0c             	sub    esp,0xc
c000d1c9:	53                   	push   ebx
c000d1ca:	e8 d1 34 ff ff       	call   c00006a0 <strlen>
c000d1cf:	83 c4 10             	add    esp,0x10
c000d1d2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d1d7:	75 26                	jne    c000d1ff <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d1d9:	83 ec 0c             	sub    esp,0xc
c000d1dc:	53                   	push   ebx
c000d1dd:	e8 be 34 ff ff       	call   c00006a0 <strlen>
c000d1e2:	83 c4 10             	add    esp,0x10
c000d1e5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d1ea:	74 26                	je     c000d212 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d1ec:	83 ec 0c             	sub    esp,0xc
c000d1ef:	53                   	push   ebx
c000d1f0:	e8 ab 34 ff ff       	call   c00006a0 <strlen>
c000d1f5:	83 c4 10             	add    esp,0x10
c000d1f8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d1fd:	eb c7                	jmp    c000d1c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d1ff:	83 ec 0c             	sub    esp,0xc
c000d202:	53                   	push   ebx
c000d203:	e8 98 34 ff ff       	call   c00006a0 <strlen>
c000d208:	83 c4 10             	add    esp,0x10
c000d20b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d210:	74 c7                	je     c000d1d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d212:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d218:	5b                   	pop    ebx
c000d219:	5e                   	pop    esi
c000d21a:	5f                   	pop    edi
c000d21b:	5d                   	pop    ebp
c000d21c:	c3                   	ret    
c000d21d:	90                   	nop

c000d21e <File::File(char const*, Process*)>:
c000d21e:	83 ec 0c             	sub    esp,0xc
c000d221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d225:	83 ec 08             	sub    esp,0x8
c000d228:	6a 00                	push   0x0
c000d22a:	50                   	push   eax
c000d22b:	e8 1a e3 ff ff       	call   c000b54a <UnixFile::UnixFile(int)>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	ba 7c 46 02 c0       	mov    edx,0xc002467c
c000d238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d23c:	89 10                	mov    DWORD PTR [eax],edx
c000d23e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d242:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24c:	83 c0 0d             	add    eax,0xd
c000d24f:	83 ec 04             	sub    esp,0x4
c000d252:	52                   	push   edx
c000d253:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d257:	50                   	push   eax
c000d258:	e8 17 fe ff ff       	call   c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d25d:	83 c4 10             	add    esp,0x10
c000d260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d264:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d267:	8d 50 bf             	lea    edx,[eax-0x41]
c000d26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d26e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d278:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d280:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d286:	0f b6 c0             	movzx  eax,al
c000d289:	8b 04 85 c0 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f40]
c000d290:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d296:	85 c0                	test   eax,eax
c000d298:	75 20                	jne    c000d2ba <File::File(char const*, Process*)+0x9c>
c000d29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2a4:	0f b6 c0             	movzx  eax,al
c000d2a7:	8b 04 85 c0 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f40]
c000d2ae:	83 ec 0c             	sub    esp,0xc
c000d2b1:	50                   	push   eax
c000d2b2:	e8 97 30 00 00       	call   c001034e <LogicalDisk::mount()>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	90                   	nop
c000d2bb:	83 c4 0c             	add    esp,0xc
c000d2be:	c3                   	ret    
c000d2bf:	90                   	nop

c000d2c0 <File::open(FileOpenMode)>:
c000d2c0:	53                   	push   ebx
c000d2c1:	b8 0b 00 00 00       	mov    eax,0xb
c000d2c6:	83 ec 08             	sub    esp,0x8
c000d2c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d2cd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d2d4:	80 fa 19             	cmp    dl,0x19
c000d2d7:	77 40                	ja     c000d319 <File::open(FileOpenMode)+0x59>
c000d2d9:	8b 14 95 c0 80 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f40]
c000d2e0:	85 d2                	test   edx,edx
c000d2e2:	74 35                	je     c000d319 <File::open(FileOpenMode)+0x59>
c000d2e4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d2ea:	85 d2                	test   edx,edx
c000d2ec:	74 2b                	je     c000d319 <File::open(FileOpenMode)+0x59>
c000d2ee:	b8 06 00 00 00       	mov    eax,0x6
c000d2f3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d2f7:	75 20                	jne    c000d319 <File::open(FileOpenMode)+0x59>
c000d2f9:	8b 02                	mov    eax,DWORD PTR [edx]
c000d2fb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d301:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d305:	51                   	push   ecx
c000d306:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d309:	51                   	push   ecx
c000d30a:	52                   	push   edx
c000d30b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	85 c0                	test   eax,eax
c000d313:	75 04                	jne    c000d319 <File::open(FileOpenMode)+0x59>
c000d315:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d319:	83 c4 08             	add    esp,0x8
c000d31c:	5b                   	pop    ebx
c000d31d:	c3                   	ret    

c000d31e <File::close()>:
c000d31e:	53                   	push   ebx
c000d31f:	b8 0b 00 00 00       	mov    eax,0xb
c000d324:	83 ec 08             	sub    esp,0x8
c000d327:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d32b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d332:	80 fa 19             	cmp    dl,0x19
c000d335:	77 41                	ja     c000d378 <File::close()+0x5a>
c000d337:	8b 1c 95 c0 80 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7f40]
c000d33e:	85 db                	test   ebx,ebx
c000d340:	74 36                	je     c000d378 <File::close()+0x5a>
c000d342:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d349:	74 2d                	je     c000d378 <File::close()+0x5a>
c000d34b:	b8 05 00 00 00       	mov    eax,0x5
c000d350:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d354:	74 22                	je     c000d378 <File::close()+0x5a>
c000d356:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d35a:	8b 04 95 c0 80 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7f40]
c000d361:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d367:	53                   	push   ebx
c000d368:	53                   	push   ebx
c000d369:	8b 10                	mov    edx,DWORD PTR [eax]
c000d36b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d371:	50                   	push   eax
c000d372:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d375:	83 c4 10             	add    esp,0x10
c000d378:	83 c4 08             	add    esp,0x8
c000d37b:	5b                   	pop    ebx
c000d37c:	c3                   	ret    
c000d37d:	90                   	nop

c000d37e <File::seek(unsigned long long)>:
c000d37e:	56                   	push   esi
c000d37f:	53                   	push   ebx
c000d380:	b8 0b 00 00 00       	mov    eax,0xb
c000d385:	51                   	push   ecx
c000d386:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d38a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d38e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d395:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d399:	80 fa 19             	cmp    dl,0x19
c000d39c:	77 31                	ja     c000d3cf <File::seek(unsigned long long)+0x51>
c000d39e:	8b 14 95 c0 80 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f40]
c000d3a5:	85 d2                	test   edx,edx
c000d3a7:	74 26                	je     c000d3cf <File::seek(unsigned long long)+0x51>
c000d3a9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d3af:	85 d2                	test   edx,edx
c000d3b1:	74 1c                	je     c000d3cf <File::seek(unsigned long long)+0x51>
c000d3b3:	b8 05 00 00 00       	mov    eax,0x5
c000d3b8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d3bc:	74 11                	je     c000d3cf <File::seek(unsigned long long)+0x51>
c000d3be:	8b 02                	mov    eax,DWORD PTR [edx]
c000d3c0:	53                   	push   ebx
c000d3c1:	51                   	push   ecx
c000d3c2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d3c8:	52                   	push   edx
c000d3c9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d3cc:	83 c4 10             	add    esp,0x10
c000d3cf:	5a                   	pop    edx
c000d3d0:	5b                   	pop    ebx
c000d3d1:	5e                   	pop    esi
c000d3d2:	c3                   	ret    
c000d3d3:	90                   	nop

c000d3d4 <File::tell(unsigned long long*)>:
c000d3d4:	83 ec 0c             	sub    esp,0xc
c000d3d7:	b8 0b 00 00 00       	mov    eax,0xb
c000d3dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d3e0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d3e7:	80 fa 19             	cmp    dl,0x19
c000d3ea:	77 34                	ja     c000d420 <File::tell(unsigned long long*)+0x4c>
c000d3ec:	8b 14 95 c0 80 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f40]
c000d3f3:	85 d2                	test   edx,edx
c000d3f5:	74 29                	je     c000d420 <File::tell(unsigned long long*)+0x4c>
c000d3f7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d3fd:	85 d2                	test   edx,edx
c000d3ff:	74 1f                	je     c000d420 <File::tell(unsigned long long*)+0x4c>
c000d401:	b8 05 00 00 00       	mov    eax,0x5
c000d406:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d40a:	74 14                	je     c000d420 <File::tell(unsigned long long*)+0x4c>
c000d40c:	50                   	push   eax
c000d40d:	8b 02                	mov    eax,DWORD PTR [edx]
c000d40f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d413:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d419:	52                   	push   edx
c000d41a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d41d:	83 c4 10             	add    esp,0x10
c000d420:	83 c4 0c             	add    esp,0xc
c000d423:	c3                   	ret    

c000d424 <File::rewind()>:
c000d424:	83 ec 10             	sub    esp,0x10
c000d427:	6a 00                	push   0x0
c000d429:	6a 00                	push   0x0
c000d42b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d42f:	e8 4a ff ff ff       	call   c000d37e <File::seek(unsigned long long)>
c000d434:	83 c4 1c             	add    esp,0x1c
c000d437:	c3                   	ret    

c000d438 <File::unlink()>:
c000d438:	83 ec 0c             	sub    esp,0xc
c000d43b:	b8 0b 00 00 00       	mov    eax,0xb
c000d440:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d444:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d44b:	80 f9 19             	cmp    cl,0x19
c000d44e:	77 2f                	ja     c000d47f <File::unlink()+0x47>
c000d450:	8b 0c 8d c0 80 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f40]
c000d457:	85 c9                	test   ecx,ecx
c000d459:	74 24                	je     c000d47f <File::unlink()+0x47>
c000d45b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d461:	85 c9                	test   ecx,ecx
c000d463:	74 1a                	je     c000d47f <File::unlink()+0x47>
c000d465:	b8 06 00 00 00       	mov    eax,0x6
c000d46a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d46e:	75 0f                	jne    c000d47f <File::unlink()+0x47>
c000d470:	83 c2 0d             	add    edx,0xd
c000d473:	50                   	push   eax
c000d474:	50                   	push   eax
c000d475:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d477:	52                   	push   edx
c000d478:	51                   	push   ecx
c000d479:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d47c:	83 c4 10             	add    esp,0x10
c000d47f:	83 c4 0c             	add    esp,0xc
c000d482:	c3                   	ret    
c000d483:	90                   	nop

c000d484 <File::rename(char const*)>:
c000d484:	83 ec 0c             	sub    esp,0xc
c000d487:	b8 0b 00 00 00       	mov    eax,0xb
c000d48c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d490:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d497:	80 f9 19             	cmp    cl,0x19
c000d49a:	77 32                	ja     c000d4ce <File::rename(char const*)+0x4a>
c000d49c:	8b 0c 8d c0 80 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f40]
c000d4a3:	85 c9                	test   ecx,ecx
c000d4a5:	74 27                	je     c000d4ce <File::rename(char const*)+0x4a>
c000d4a7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4ad:	85 c9                	test   ecx,ecx
c000d4af:	74 1d                	je     c000d4ce <File::rename(char const*)+0x4a>
c000d4b1:	b8 06 00 00 00       	mov    eax,0x6
c000d4b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4ba:	75 12                	jne    c000d4ce <File::rename(char const*)+0x4a>
c000d4bc:	83 c2 0d             	add    edx,0xd
c000d4bf:	50                   	push   eax
c000d4c0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4c6:	52                   	push   edx
c000d4c7:	51                   	push   ecx
c000d4c8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d4cb:	83 c4 10             	add    esp,0x10
c000d4ce:	83 c4 0c             	add    esp,0xc
c000d4d1:	c3                   	ret    

c000d4d2 <File::chfatattr(unsigned char, unsigned char)>:
c000d4d2:	57                   	push   edi
c000d4d3:	b8 0b 00 00 00       	mov    eax,0xb
c000d4d8:	56                   	push   esi
c000d4d9:	53                   	push   ebx
c000d4da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4de:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d4e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d4ed:	80 f9 19             	cmp    cl,0x19
c000d4f0:	77 37                	ja     c000d529 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d4f2:	8b 0c 8d c0 80 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f40]
c000d4f9:	85 c9                	test   ecx,ecx
c000d4fb:	74 2c                	je     c000d529 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d4fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d503:	85 c9                	test   ecx,ecx
c000d505:	74 22                	je     c000d529 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d507:	b8 06 00 00 00       	mov    eax,0x6
c000d50c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d510:	75 17                	jne    c000d529 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d512:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d514:	89 f0                	mov    eax,esi
c000d516:	83 c2 0d             	add    edx,0xd
c000d519:	0f b6 f0             	movzx  esi,al
c000d51c:	0f b6 db             	movzx  ebx,bl
c000d51f:	56                   	push   esi
c000d520:	53                   	push   ebx
c000d521:	52                   	push   edx
c000d522:	51                   	push   ecx
c000d523:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d526:	83 c4 10             	add    esp,0x10
c000d529:	5b                   	pop    ebx
c000d52a:	5e                   	pop    esi
c000d52b:	5f                   	pop    edi
c000d52c:	c3                   	ret    
c000d52d:	90                   	nop

c000d52e <File::exists()>:
c000d52e:	83 ec 0c             	sub    esp,0xc
c000d531:	31 c0                	xor    eax,eax
c000d533:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d537:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d53e:	80 f9 19             	cmp    cl,0x19
c000d541:	77 24                	ja     c000d567 <File::exists()+0x39>
c000d543:	8b 0c 8d c0 80 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f40]
c000d54a:	85 c9                	test   ecx,ecx
c000d54c:	74 19                	je     c000d567 <File::exists()+0x39>
c000d54e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d554:	85 c9                	test   ecx,ecx
c000d556:	74 0f                	je     c000d567 <File::exists()+0x39>
c000d558:	83 c2 0d             	add    edx,0xd
c000d55b:	50                   	push   eax
c000d55c:	50                   	push   eax
c000d55d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d55f:	52                   	push   edx
c000d560:	51                   	push   ecx
c000d561:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d564:	83 c4 10             	add    esp,0x10
c000d567:	83 c4 0c             	add    esp,0xc
c000d56a:	c3                   	ret    
c000d56b:	90                   	nop

c000d56c <File::stat(unsigned long long*, bool*)>:
c000d56c:	56                   	push   esi
c000d56d:	53                   	push   ebx
c000d56e:	50                   	push   eax
c000d56f:	b8 0b 00 00 00       	mov    eax,0xb
c000d574:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d578:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d57c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d583:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d587:	80 f9 19             	cmp    cl,0x19
c000d58a:	77 3d                	ja     c000d5c9 <File::stat(unsigned long long*, bool*)+0x5d>
c000d58c:	8b 0c 8d c0 80 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f40]
c000d593:	85 c9                	test   ecx,ecx
c000d595:	74 32                	je     c000d5c9 <File::stat(unsigned long long*, bool*)+0x5d>
c000d597:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d59d:	85 c9                	test   ecx,ecx
c000d59f:	74 28                	je     c000d5c9 <File::stat(unsigned long long*, bool*)+0x5d>
c000d5a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5a3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5a7:	74 13                	je     c000d5bc <File::stat(unsigned long long*, bool*)+0x50>
c000d5a9:	83 ec 04             	sub    esp,0x4
c000d5ac:	56                   	push   esi
c000d5ad:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d5b3:	51                   	push   ecx
c000d5b4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d5b7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d5ba:	eb 0a                	jmp    c000d5c6 <File::stat(unsigned long long*, bool*)+0x5a>
c000d5bc:	53                   	push   ebx
c000d5bd:	83 c2 0d             	add    edx,0xd
c000d5c0:	56                   	push   esi
c000d5c1:	52                   	push   edx
c000d5c2:	51                   	push   ecx
c000d5c3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d5c6:	83 c4 10             	add    esp,0x10
c000d5c9:	5a                   	pop    edx
c000d5ca:	5b                   	pop    ebx
c000d5cb:	5e                   	pop    esi
c000d5cc:	c3                   	ret    

c000d5cd <Fs::setcwd(Process*, char*)>:
c000d5cd:	55                   	push   ebp
c000d5ce:	57                   	push   edi
c000d5cf:	56                   	push   esi
c000d5d0:	53                   	push   ebx
c000d5d1:	81 ec 20 02 00 00    	sub    esp,0x220
c000d5d7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d5de:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d5e4:	57                   	push   edi
c000d5e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d5ec:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d5f0:	56                   	push   esi
c000d5f1:	e8 7e fa ff ff       	call   c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d5f6:	89 34 24             	mov    DWORD PTR [esp],esi
c000d5f9:	e8 a2 30 ff ff       	call   c00006a0 <strlen>
c000d5fe:	83 c4 10             	add    esp,0x10
c000d601:	83 f8 02             	cmp    eax,0x2
c000d604:	77 17                	ja     c000d61d <Fs::setcwd(Process*, char*)+0x50>
c000d606:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d60b:	83 e8 41             	sub    eax,0x41
c000d60e:	83 f8 19             	cmp    eax,0x19
c000d611:	76 24                	jbe    c000d637 <Fs::setcwd(Process*, char*)+0x6a>
c000d613:	b8 03 00 00 00       	mov    eax,0x3
c000d618:	e9 e0 00 00 00       	jmp    c000d6fd <Fs::setcwd(Process*, char*)+0x130>
c000d61d:	83 ec 0c             	sub    esp,0xc
c000d620:	56                   	push   esi
c000d621:	e8 7a 30 ff ff       	call   c00006a0 <strlen>
c000d626:	83 c4 10             	add    esp,0x10
c000d629:	83 f8 03             	cmp    eax,0x3
c000d62c:	75 34                	jne    c000d662 <Fs::setcwd(Process*, char*)+0x95>
c000d62e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d633:	75 2d                	jne    c000d662 <Fs::setcwd(Process*, char*)+0x95>
c000d635:	eb cf                	jmp    c000d606 <Fs::setcwd(Process*, char*)+0x39>
c000d637:	8b 14 85 c0 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f40]
c000d63e:	b8 05 00 00 00       	mov    eax,0x5
c000d643:	85 d2                	test   edx,edx
c000d645:	0f 84 b2 00 00 00    	je     c000d6fd <Fs::setcwd(Process*, char*)+0x130>
c000d64b:	b8 06 00 00 00       	mov    eax,0x6
c000d650:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d657:	0f 85 92 00 00 00    	jne    c000d6ef <Fs::setcwd(Process*, char*)+0x122>
c000d65d:	e9 9b 00 00 00       	jmp    c000d6fd <Fs::setcwd(Process*, char*)+0x130>
c000d662:	83 ec 0c             	sub    esp,0xc
c000d665:	68 14 01 00 00       	push   0x114
c000d66a:	e8 54 c3 ff ff       	call   c00099c3 <malloc>
c000d66f:	83 c4 0c             	add    esp,0xc
c000d672:	89 c3                	mov    ebx,eax
c000d674:	55                   	push   ebp
c000d675:	56                   	push   esi
c000d676:	50                   	push   eax
c000d677:	e8 a2 fb ff ff       	call   c000d21e <File::File(char const*, Process*)>
c000d67c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d681:	83 c4 0c             	add    esp,0xc
c000d684:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d688:	50                   	push   eax
c000d689:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d68d:	50                   	push   eax
c000d68e:	53                   	push   ebx
c000d68f:	e8 d8 fe ff ff       	call   c000d56c <File::stat(unsigned long long*, bool*)>
c000d694:	83 c4 10             	add    esp,0x10
c000d697:	83 f8 02             	cmp    eax,0x2
c000d69a:	74 04                	je     c000d6a0 <Fs::setcwd(Process*, char*)+0xd3>
c000d69c:	85 c0                	test   eax,eax
c000d69e:	74 1c                	je     c000d6bc <Fs::setcwd(Process*, char*)+0xef>
c000d6a0:	b8 01 00 00 00       	mov    eax,0x1
c000d6a5:	85 db                	test   ebx,ebx
c000d6a7:	74 54                	je     c000d6fd <Fs::setcwd(Process*, char*)+0x130>
c000d6a9:	83 ec 0c             	sub    esp,0xc
c000d6ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6ae:	53                   	push   ebx
c000d6af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d6b2:	83 c4 10             	add    esp,0x10
c000d6b5:	b8 01 00 00 00       	mov    eax,0x1
c000d6ba:	eb 41                	jmp    c000d6fd <Fs::setcwd(Process*, char*)+0x130>
c000d6bc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d6c1:	75 1c                	jne    c000d6df <Fs::setcwd(Process*, char*)+0x112>
c000d6c3:	b8 02 00 00 00       	mov    eax,0x2
c000d6c8:	85 db                	test   ebx,ebx
c000d6ca:	74 31                	je     c000d6fd <Fs::setcwd(Process*, char*)+0x130>
c000d6cc:	83 ec 0c             	sub    esp,0xc
c000d6cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6d1:	53                   	push   ebx
c000d6d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d6d5:	83 c4 10             	add    esp,0x10
c000d6d8:	b8 02 00 00 00       	mov    eax,0x2
c000d6dd:	eb 1e                	jmp    c000d6fd <Fs::setcwd(Process*, char*)+0x130>
c000d6df:	85 db                	test   ebx,ebx
c000d6e1:	74 0c                	je     c000d6ef <Fs::setcwd(Process*, char*)+0x122>
c000d6e3:	83 ec 0c             	sub    esp,0xc
c000d6e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6e8:	53                   	push   ebx
c000d6e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d6ec:	83 c4 10             	add    esp,0x10
c000d6ef:	50                   	push   eax
c000d6f0:	50                   	push   eax
c000d6f1:	56                   	push   esi
c000d6f2:	57                   	push   edi
c000d6f3:	e8 48 30 ff ff       	call   c0000740 <strcpy>
c000d6f8:	83 c4 10             	add    esp,0x10
c000d6fb:	31 c0                	xor    eax,eax
c000d6fd:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d703:	5b                   	pop    ebx
c000d704:	5e                   	pop    esi
c000d705:	5f                   	pop    edi
c000d706:	5d                   	pop    ebp
c000d707:	c3                   	ret    

c000d708 <Directory::Directory(char const*, Process*)>:
c000d708:	83 ec 0c             	sub    esp,0xc
c000d70b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70f:	83 ec 08             	sub    esp,0x8
c000d712:	6a 00                	push   0x0
c000d714:	50                   	push   eax
c000d715:	e8 30 de ff ff       	call   c000b54a <UnixFile::UnixFile(int)>
c000d71a:	83 c4 10             	add    esp,0x10
c000d71d:	ba 98 46 02 c0       	mov    edx,0xc0024698
c000d722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d726:	89 10                	mov    DWORD PTR [eax],edx
c000d728:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d72c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d736:	83 c0 0d             	add    eax,0xd
c000d739:	83 ec 04             	sub    esp,0x4
c000d73c:	52                   	push   edx
c000d73d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d741:	50                   	push   eax
c000d742:	e8 2d f9 ff ff       	call   c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d747:	83 c4 10             	add    esp,0x10
c000d74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d751:	8d 50 bf             	lea    edx,[eax-0x41]
c000d754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d758:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d762:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d766:	90                   	nop
c000d767:	83 c4 0c             	add    esp,0xc
c000d76a:	c3                   	ret    
c000d76b:	90                   	nop

c000d76c <Directory::open()>:
c000d76c:	53                   	push   ebx
c000d76d:	b8 0b 00 00 00       	mov    eax,0xb
c000d772:	83 ec 08             	sub    esp,0x8
c000d775:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d779:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d780:	80 fa 19             	cmp    dl,0x19
c000d783:	77 3d                	ja     c000d7c2 <Directory::open()+0x56>
c000d785:	8b 14 95 c0 80 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f40]
c000d78c:	85 d2                	test   edx,edx
c000d78e:	74 32                	je     c000d7c2 <Directory::open()+0x56>
c000d790:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d796:	85 d2                	test   edx,edx
c000d798:	74 28                	je     c000d7c2 <Directory::open()+0x56>
c000d79a:	b8 06 00 00 00       	mov    eax,0x6
c000d79f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d7a3:	75 1d                	jne    c000d7c2 <Directory::open()+0x56>
c000d7a5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d7ab:	50                   	push   eax
c000d7ac:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7ae:	51                   	push   ecx
c000d7af:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d7b2:	51                   	push   ecx
c000d7b3:	52                   	push   edx
c000d7b4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d7b7:	83 c4 10             	add    esp,0x10
c000d7ba:	85 c0                	test   eax,eax
c000d7bc:	75 04                	jne    c000d7c2 <Directory::open()+0x56>
c000d7be:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d7c2:	83 c4 08             	add    esp,0x8
c000d7c5:	5b                   	pop    ebx
c000d7c6:	c3                   	ret    
c000d7c7:	90                   	nop

c000d7c8 <Directory::close()>:
c000d7c8:	53                   	push   ebx
c000d7c9:	b8 0b 00 00 00       	mov    eax,0xb
c000d7ce:	83 ec 08             	sub    esp,0x8
c000d7d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7d5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d7dc:	80 fa 19             	cmp    dl,0x19
c000d7df:	77 41                	ja     c000d822 <Directory::close()+0x5a>
c000d7e1:	8b 1c 95 c0 80 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7f40]
c000d7e8:	85 db                	test   ebx,ebx
c000d7ea:	74 36                	je     c000d822 <Directory::close()+0x5a>
c000d7ec:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d7f3:	74 2d                	je     c000d822 <Directory::close()+0x5a>
c000d7f5:	b8 05 00 00 00       	mov    eax,0x5
c000d7fa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7fe:	74 22                	je     c000d822 <Directory::close()+0x5a>
c000d800:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d804:	8b 04 95 c0 80 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7f40]
c000d80b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d811:	53                   	push   ebx
c000d812:	53                   	push   ebx
c000d813:	8b 10                	mov    edx,DWORD PTR [eax]
c000d815:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d81b:	50                   	push   eax
c000d81c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d81f:	83 c4 10             	add    esp,0x10
c000d822:	83 c4 08             	add    esp,0x8
c000d825:	5b                   	pop    ebx
c000d826:	c3                   	ret    
c000d827:	90                   	nop

c000d828 <Directory::unlink()>:
c000d828:	83 ec 0c             	sub    esp,0xc
c000d82b:	b8 0b 00 00 00       	mov    eax,0xb
c000d830:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d834:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d83b:	80 f9 19             	cmp    cl,0x19
c000d83e:	77 2f                	ja     c000d86f <Directory::unlink()+0x47>
c000d840:	8b 0c 8d c0 80 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f40]
c000d847:	85 c9                	test   ecx,ecx
c000d849:	74 24                	je     c000d86f <Directory::unlink()+0x47>
c000d84b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d851:	85 c9                	test   ecx,ecx
c000d853:	74 1a                	je     c000d86f <Directory::unlink()+0x47>
c000d855:	b8 06 00 00 00       	mov    eax,0x6
c000d85a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d85e:	75 0f                	jne    c000d86f <Directory::unlink()+0x47>
c000d860:	83 c2 0d             	add    edx,0xd
c000d863:	50                   	push   eax
c000d864:	50                   	push   eax
c000d865:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d867:	52                   	push   edx
c000d868:	51                   	push   ecx
c000d869:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d86c:	83 c4 10             	add    esp,0x10
c000d86f:	83 c4 0c             	add    esp,0xc
c000d872:	c3                   	ret    
c000d873:	90                   	nop

c000d874 <Directory::rename(char const*)>:
c000d874:	83 ec 0c             	sub    esp,0xc
c000d877:	b8 0b 00 00 00       	mov    eax,0xb
c000d87c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d880:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d887:	80 f9 19             	cmp    cl,0x19
c000d88a:	77 32                	ja     c000d8be <Directory::rename(char const*)+0x4a>
c000d88c:	8b 0c 8d c0 80 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f40]
c000d893:	85 c9                	test   ecx,ecx
c000d895:	74 27                	je     c000d8be <Directory::rename(char const*)+0x4a>
c000d897:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d89d:	85 c9                	test   ecx,ecx
c000d89f:	74 1d                	je     c000d8be <Directory::rename(char const*)+0x4a>
c000d8a1:	b8 06 00 00 00       	mov    eax,0x6
c000d8a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8aa:	75 12                	jne    c000d8be <Directory::rename(char const*)+0x4a>
c000d8ac:	83 c2 0d             	add    edx,0xd
c000d8af:	50                   	push   eax
c000d8b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d8b6:	52                   	push   edx
c000d8b7:	51                   	push   ecx
c000d8b8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d8bb:	83 c4 10             	add    esp,0x10
c000d8be:	83 c4 0c             	add    esp,0xc
c000d8c1:	c3                   	ret    

c000d8c2 <Directory::exists()>:
c000d8c2:	83 ec 0c             	sub    esp,0xc
c000d8c5:	31 c0                	xor    eax,eax
c000d8c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8cb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8d2:	80 f9 19             	cmp    cl,0x19
c000d8d5:	77 24                	ja     c000d8fb <Directory::exists()+0x39>
c000d8d7:	8b 0c 8d c0 80 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f40]
c000d8de:	85 c9                	test   ecx,ecx
c000d8e0:	74 19                	je     c000d8fb <Directory::exists()+0x39>
c000d8e2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8e8:	85 c9                	test   ecx,ecx
c000d8ea:	74 0f                	je     c000d8fb <Directory::exists()+0x39>
c000d8ec:	83 c2 0d             	add    edx,0xd
c000d8ef:	50                   	push   eax
c000d8f0:	50                   	push   eax
c000d8f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8f3:	52                   	push   edx
c000d8f4:	51                   	push   ecx
c000d8f5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d8f8:	83 c4 10             	add    esp,0x10
c000d8fb:	83 c4 0c             	add    esp,0xc
c000d8fe:	c3                   	ret    
c000d8ff:	90                   	nop

c000d900 <Directory::read(dirent*)>:
c000d900:	83 ec 1c             	sub    esp,0x1c
c000d903:	b8 0b 00 00 00       	mov    eax,0xb
c000d908:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d90c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d913:	80 fa 19             	cmp    dl,0x19
c000d916:	77 30                	ja     c000d948 <Directory::read(dirent*)+0x48>
c000d918:	8b 14 95 c0 80 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f40]
c000d91f:	85 d2                	test   edx,edx
c000d921:	74 25                	je     c000d948 <Directory::read(dirent*)+0x48>
c000d923:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d92a:	74 1c                	je     c000d948 <Directory::read(dirent*)+0x48>
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d931:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d935:	52                   	push   edx
c000d936:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93a:	6a 00                	push   0x0
c000d93c:	68 10 01 00 00       	push   0x110
c000d941:	51                   	push   ecx
c000d942:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d945:	83 c4 20             	add    esp,0x20
c000d948:	83 c4 1c             	add    esp,0x1c
c000d94b:	c3                   	ret    

c000d94c <Directory::create()>:
c000d94c:	83 ec 0c             	sub    esp,0xc
c000d94f:	b8 0b 00 00 00       	mov    eax,0xb
c000d954:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d958:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d95f:	80 f9 19             	cmp    cl,0x19
c000d962:	77 2f                	ja     c000d993 <Directory::create()+0x47>
c000d964:	8b 0c 8d c0 80 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f40]
c000d96b:	85 c9                	test   ecx,ecx
c000d96d:	74 24                	je     c000d993 <Directory::create()+0x47>
c000d96f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d975:	85 c9                	test   ecx,ecx
c000d977:	74 1a                	je     c000d993 <Directory::create()+0x47>
c000d979:	b8 06 00 00 00       	mov    eax,0x6
c000d97e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d982:	75 0f                	jne    c000d993 <Directory::create()+0x47>
c000d984:	83 c2 0d             	add    edx,0xd
c000d987:	50                   	push   eax
c000d988:	50                   	push   eax
c000d989:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d98b:	52                   	push   edx
c000d98c:	51                   	push   ecx
c000d98d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d990:	83 c4 10             	add    esp,0x10
c000d993:	83 c4 0c             	add    esp,0xc
c000d996:	c3                   	ret    
c000d997:	90                   	nop

c000d998 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d998:	b8 0a 00 00 00       	mov    eax,0xa
c000d99d:	c3                   	ret    
c000d99e:	66 90                	xchg   ax,ax

c000d9a0 <Bus::Bus(char const*)>:
c000d9a0:	83 ec 0c             	sub    esp,0xc
c000d9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9a7:	83 ec 08             	sub    esp,0x8
c000d9aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ae:	50                   	push   eax
c000d9af:	e8 8a 09 00 00       	call   c000e33e <Device::Device(char const*)>
c000d9b4:	83 c4 10             	add    esp,0x10
c000d9b7:	ba b4 46 02 c0       	mov    edx,0xc00246b4
c000d9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c0:	89 10                	mov    DWORD PTR [eax],edx
c000d9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d9d0:	90                   	nop
c000d9d1:	83 c4 0c             	add    esp,0xc
c000d9d4:	c3                   	ret    
c000d9d5:	90                   	nop
c000d9d6:	66 90                	xchg   ax,ax

c000d9d8 <Bus::~Bus()>:
c000d9d8:	83 ec 0c             	sub    esp,0xc
c000d9db:	ba b4 46 02 c0       	mov    edx,0xc00246b4
c000d9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e4:	89 10                	mov    DWORD PTR [eax],edx
c000d9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ea:	83 ec 0c             	sub    esp,0xc
c000d9ed:	50                   	push   eax
c000d9ee:	e8 15 06 00 00       	call   c000e008 <Device::~Device()>
c000d9f3:	83 c4 10             	add    esp,0x10
c000d9f6:	90                   	nop
c000d9f7:	83 c4 0c             	add    esp,0xc
c000d9fa:	c3                   	ret    
c000d9fb:	90                   	nop

c000d9fc <Bus::~Bus()>:
c000d9fc:	83 ec 0c             	sub    esp,0xc
c000d9ff:	83 ec 0c             	sub    esp,0xc
c000da02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da06:	e8 cd ff ff ff       	call   c000d9d8 <Bus::~Bus()>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	83 ec 08             	sub    esp,0x8
c000da11:	68 58 01 00 00       	push   0x158
c000da16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da1a:	e8 b3 f1 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	83 c4 0c             	add    esp,0xc
c000da25:	c3                   	ret    
c000da26:	66 90                	xchg   ax,ax

c000da28 <Buzzer::Buzzer(char const*)>:
c000da28:	83 ec 0c             	sub    esp,0xc
c000da2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da2f:	83 ec 08             	sub    esp,0x8
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	50                   	push   eax
c000da37:	e8 02 09 00 00       	call   c000e33e <Device::Device(char const*)>
c000da3c:	83 c4 10             	add    esp,0x10
c000da3f:	ba e0 46 02 c0       	mov    edx,0xc00246e0
c000da44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da48:	89 10                	mov    DWORD PTR [eax],edx
c000da4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000da58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da5c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000da66:	90                   	nop
c000da67:	83 c4 0c             	add    esp,0xc
c000da6a:	c3                   	ret    
c000da6b:	90                   	nop

c000da6c <Buzzer::~Buzzer()>:
c000da6c:	83 ec 0c             	sub    esp,0xc
c000da6f:	ba e0 46 02 c0       	mov    edx,0xc00246e0
c000da74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da78:	89 10                	mov    DWORD PTR [eax],edx
c000da7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7e:	83 ec 0c             	sub    esp,0xc
c000da81:	50                   	push   eax
c000da82:	e8 81 05 00 00       	call   c000e008 <Device::~Device()>
c000da87:	83 c4 10             	add    esp,0x10
c000da8a:	90                   	nop
c000da8b:	83 c4 0c             	add    esp,0xc
c000da8e:	c3                   	ret    
c000da8f:	90                   	nop

c000da90 <Buzzer::~Buzzer()>:
c000da90:	83 ec 0c             	sub    esp,0xc
c000da93:	83 ec 0c             	sub    esp,0xc
c000da96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da9a:	e8 cd ff ff ff       	call   c000da6c <Buzzer::~Buzzer()>
c000da9f:	83 c4 10             	add    esp,0x10
c000daa2:	83 ec 08             	sub    esp,0x8
c000daa5:	68 5c 01 00 00       	push   0x15c
c000daaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daae:	e8 1f f1 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000dab3:	83 c4 10             	add    esp,0x10
c000dab6:	83 c4 0c             	add    esp,0xc
c000dab9:	c3                   	ret    

c000daba <Buzzer::stop()>:
c000daba:	83 ec 14             	sub    esp,0x14
c000dabd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dac1:	8b 10                	mov    edx,DWORD PTR [eax]
c000dac3:	6a 00                	push   0x0
c000dac5:	50                   	push   eax
c000dac6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dac9:	83 c4 1c             	add    esp,0x1c
c000dacc:	c3                   	ret    

c000dacd <beepThread(void*)>:
c000dacd:	53                   	push   ebx
c000dace:	83 ec 08             	sub    esp,0x8
c000dad1:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000dad6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dada:	48                   	dec    eax
c000dadb:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000dae0:	75 02                	jne    c000dae4 <beepThread(void*)+0x17>
c000dae2:	fb                   	sti    
c000dae3:	90                   	nop
c000dae4:	83 ec 0c             	sub    esp,0xc
c000dae7:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000daee:	50                   	push   eax
c000daef:	e8 34 ac 00 00       	call   c0018728 <milliTenthSleep(unsigned int)>
c000daf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000daf7:	e8 be ff ff ff       	call   c000daba <Buzzer::stop()>
c000dafc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000db04:	83 c4 18             	add    esp,0x18
c000db07:	5b                   	pop    ebx
c000db08:	e9 1b ab 00 00       	jmp    c0018628 <blockTask(TaskState)>
c000db0d:	90                   	nop

c000db0e <Buzzer::beep(int, int, bool)>:
c000db0e:	57                   	push   edi
c000db0f:	56                   	push   esi
c000db10:	53                   	push   ebx
c000db11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000db19:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000db1d:	50                   	push   eax
c000db1e:	50                   	push   eax
c000db1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db25:	53                   	push   ebx
c000db26:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db29:	83 c4 10             	add    esp,0x10
c000db2c:	89 f8                	mov    eax,edi
c000db2e:	84 c0                	test   al,al
c000db30:	74 1e                	je     c000db50 <Buzzer::beep(int, int, bool)+0x42>
c000db32:	83 ec 0c             	sub    esp,0xc
c000db35:	6b f6 0a             	imul   esi,esi,0xa
c000db38:	56                   	push   esi
c000db39:	e8 ea ab 00 00       	call   c0018728 <milliTenthSleep(unsigned int)>
c000db3e:	83 c4 10             	add    esp,0x10
c000db41:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000db45:	5b                   	pop    ebx
c000db46:	5e                   	pop    esi
c000db47:	5f                   	pop    edi
c000db48:	e9 6d ff ff ff       	jmp    c000daba <Buzzer::stop()>
c000db4d:	8d 76 00             	lea    esi,[esi+0x0]
c000db50:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000db56:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000db5b:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000db63:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db67:	c7 44 24 14 cd da 00 c0 	mov    DWORD PTR [esp+0x14],0xc000dacd
c000db6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db73:	5b                   	pop    ebx
c000db74:	5e                   	pop    esi
c000db75:	5f                   	pop    edi
c000db76:	e9 99 a6 00 00       	jmp    c0018214 <Process::createThread(void (*)(void*), void*, int)>
c000db7b:	90                   	nop

c000db7c <User::loadClockSettings(int)>:
c000db7c:	53                   	push   ebx
c000db7d:	83 ec 14             	sub    esp,0x14
c000db80:	68 14 01 00 00       	push   0x114
c000db85:	e8 39 be ff ff       	call   c00099c3 <malloc>
c000db8a:	83 c4 0c             	add    esp,0xc
c000db8d:	89 c3                	mov    ebx,eax
c000db8f:	ff 35 f0 8f 02 c0    	push   DWORD PTR ds:0xc0028ff0
c000db95:	68 08 47 02 c0       	push   0xc0024708
c000db9a:	50                   	push   eax
c000db9b:	e8 7e f6 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c000dba0:	58                   	pop    eax
c000dba1:	5a                   	pop    edx
c000dba2:	6a 01                	push   0x1
c000dba4:	53                   	push   ebx
c000dba5:	e8 16 f7 ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c000dbaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbad:	e8 6c f7 ff ff       	call   c000d31e <File::close()>
c000dbb2:	83 c4 10             	add    esp,0x10
c000dbb5:	85 db                	test   ebx,ebx
c000dbb7:	74 0f                	je     c000dbc8 <User::loadClockSettings(int)+0x4c>
c000dbb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbbb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dbbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dbc2:	83 c4 08             	add    esp,0x8
c000dbc5:	5b                   	pop    ebx
c000dbc6:	ff e0                	jmp    eax
c000dbc8:	83 c4 08             	add    esp,0x8
c000dbcb:	5b                   	pop    ebx
c000dbcc:	c3                   	ret    
c000dbcd:	90                   	nop

c000dbce <Clock::Clock(char const*)>:
c000dbce:	83 ec 0c             	sub    esp,0xc
c000dbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd5:	83 ec 08             	sub    esp,0x8
c000dbd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdc:	50                   	push   eax
c000dbdd:	e8 5c 07 00 00       	call   c000e33e <Device::Device(char const*)>
c000dbe2:	83 c4 10             	add    esp,0x10
c000dbe5:	ba 30 47 02 c0       	mov    edx,0xc0024730
c000dbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbee:	89 10                	mov    DWORD PTR [eax],edx
c000dbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dbfe:	90                   	nop
c000dbff:	83 c4 0c             	add    esp,0xc
c000dc02:	c3                   	ret    
c000dc03:	90                   	nop

c000dc04 <Clock::~Clock()>:
c000dc04:	83 ec 0c             	sub    esp,0xc
c000dc07:	ba 30 47 02 c0       	mov    edx,0xc0024730
c000dc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc10:	89 10                	mov    DWORD PTR [eax],edx
c000dc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc16:	83 ec 0c             	sub    esp,0xc
c000dc19:	50                   	push   eax
c000dc1a:	e8 e9 03 00 00       	call   c000e008 <Device::~Device()>
c000dc1f:	83 c4 10             	add    esp,0x10
c000dc22:	90                   	nop
c000dc23:	83 c4 0c             	add    esp,0xc
c000dc26:	c3                   	ret    
c000dc27:	90                   	nop

c000dc28 <Clock::~Clock()>:
c000dc28:	83 ec 0c             	sub    esp,0xc
c000dc2b:	83 ec 0c             	sub    esp,0xc
c000dc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc32:	e8 cd ff ff ff       	call   c000dc04 <Clock::~Clock()>
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	83 ec 08             	sub    esp,0x8
c000dc3d:	68 58 01 00 00       	push   0x158
c000dc42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc46:	e8 87 ef ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000dc4b:	83 c4 10             	add    esp,0x10
c000dc4e:	83 c4 0c             	add    esp,0xc
c000dc51:	c3                   	ret    

c000dc52 <Clock::timeInSecondsLocal()>:
c000dc52:	53                   	push   ebx
c000dc53:	83 ec 14             	sub    esp,0x14
c000dc56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dc5a:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc5c:	50                   	push   eax
c000dc5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dc60:	0f b6 0d 3c 7c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027c3c
c000dc67:	03 0d 40 7c 02 c0    	add    ecx,DWORD PTR ds:0xc0027c40
c000dc6d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dc73:	89 cb                	mov    ebx,ecx
c000dc75:	c1 fb 1f             	sar    ebx,0x1f
c000dc78:	01 c8                	add    eax,ecx
c000dc7a:	11 da                	adc    edx,ebx
c000dc7c:	83 c4 10             	add    esp,0x10
c000dc7f:	31 c9                	xor    ecx,ecx
c000dc81:	80 3d 3d 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027c3d,0x0
c000dc88:	74 05                	je     c000dc8f <Clock::timeInSecondsLocal()+0x3d>
c000dc8a:	b9 08 07 00 00       	mov    ecx,0x708
c000dc8f:	31 db                	xor    ebx,ebx
c000dc91:	01 c8                	add    eax,ecx
c000dc93:	11 da                	adc    edx,ebx
c000dc95:	83 c4 08             	add    esp,0x8
c000dc98:	5b                   	pop    ebx
c000dc99:	c3                   	ret    

c000dc9a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dc9a:	57                   	push   edi
c000dc9b:	56                   	push   esi
c000dc9c:	53                   	push   ebx
c000dc9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dca1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dca5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dca7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dcab:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dcae:	0f b6 05 3c 7c 02 c0 	movzx  eax,BYTE PTR ds:0xc0027c3c
c000dcb5:	03 05 40 7c 02 c0    	add    eax,DWORD PTR ds:0xc0027c40
c000dcbb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dcc1:	99                   	cdq    
c000dcc2:	29 c6                	sub    esi,eax
c000dcc4:	19 d7                	sbb    edi,edx
c000dcc6:	89 f0                	mov    eax,esi
c000dcc8:	89 fa                	mov    edx,edi
c000dcca:	31 f6                	xor    esi,esi
c000dccc:	80 3d 3d 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027c3d,0x0
c000dcd3:	74 05                	je     c000dcda <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000dcd5:	be 08 07 00 00       	mov    esi,0x708
c000dcda:	31 ff                	xor    edi,edi
c000dcdc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dce0:	29 f0                	sub    eax,esi
c000dce2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dce6:	19 fa                	sbb    edx,edi
c000dce8:	89 d8                	mov    eax,ebx
c000dcea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcee:	5b                   	pop    ebx
c000dcef:	5e                   	pop    esi
c000dcf0:	5f                   	pop    edi
c000dcf1:	ff e0                	jmp    eax

c000dcf3 <datetimeToSeconds(datetime_t)>:
c000dcf3:	55                   	push   ebp
c000dcf4:	57                   	push   edi
c000dcf5:	56                   	push   esi
c000dcf6:	53                   	push   ebx
c000dcf7:	83 ec 14             	sub    esp,0x14
c000dcfa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dcfe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dd02:	89 d3                	mov    ebx,edx
c000dd04:	0f b6 c6             	movzx  eax,dh
c000dd07:	c1 eb 10             	shr    ebx,0x10
c000dd0a:	48                   	dec    eax
c000dd0b:	66 81 eb 6c 07       	sub    bx,0x76c
c000dd10:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000dd14:	0f b6 f5             	movzx  esi,ch
c000dd17:	89 cf                	mov    edi,ecx
c000dd19:	6b f6 3c             	imul   esi,esi,0x3c
c000dd1c:	c1 ef 10             	shr    edi,0x10
c000dd1f:	0f b6 c9             	movzx  ecx,cl
c000dd22:	89 f8                	mov    eax,edi
c000dd24:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dd2a:	0f b6 f8             	movzx  edi,al
c000dd2d:	0f b6 d2             	movzx  edx,dl
c000dd30:	01 fe                	add    esi,edi
c000dd32:	01 f1                	add    ecx,esi
c000dd34:	0f b7 f3             	movzx  esi,bx
c000dd37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dd3b:	c1 f9 1f             	sar    ecx,0x1f
c000dd3e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000dd43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dd47:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dd4c:	8b 0c 8d 80 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb880]
c000dd53:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dd57:	76 29                	jbe    c000dd82 <datetimeToSeconds(datetime_t)+0x8f>
c000dd59:	f6 c3 03             	test   bl,0x3
c000dd5c:	75 24                	jne    c000dd82 <datetimeToSeconds(datetime_t)+0x8f>
c000dd5e:	31 d2                	xor    edx,edx
c000dd60:	bf 64 00 00 00       	mov    edi,0x64
c000dd65:	89 d8                	mov    eax,ebx
c000dd67:	66 f7 f7             	div    di
c000dd6a:	66 85 d2             	test   dx,dx
c000dd6d:	75 12                	jne    c000dd81 <datetimeToSeconds(datetime_t)+0x8e>
c000dd6f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000dd75:	bf 90 01 00 00       	mov    edi,0x190
c000dd7a:	99                   	cdq    
c000dd7b:	f7 ff                	idiv   edi
c000dd7d:	85 d2                	test   edx,edx
c000dd7f:	75 01                	jne    c000dd82 <datetimeToSeconds(datetime_t)+0x8f>
c000dd81:	41                   	inc    ecx
c000dd82:	66 83 fb 46          	cmp    bx,0x46
c000dd86:	76 45                	jbe    c000ddcd <datetimeToSeconds(datetime_t)+0xda>
c000dd88:	bb 46 00 00 00       	mov    ebx,0x46
c000dd8d:	bf 64 00 00 00       	mov    edi,0x64
c000dd92:	bd 90 01 00 00       	mov    ebp,0x190
c000dd97:	b8 6d 01 00 00       	mov    eax,0x16d
c000dd9c:	f6 c3 03             	test   bl,0x3
c000dd9f:	75 23                	jne    c000ddc4 <datetimeToSeconds(datetime_t)+0xd1>
c000dda1:	89 d8                	mov    eax,ebx
c000dda3:	99                   	cdq    
c000dda4:	f7 ff                	idiv   edi
c000dda6:	b8 6e 01 00 00       	mov    eax,0x16e
c000ddab:	85 d2                	test   edx,edx
c000ddad:	75 15                	jne    c000ddc4 <datetimeToSeconds(datetime_t)+0xd1>
c000ddaf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ddb5:	99                   	cdq    
c000ddb6:	f7 fd                	idiv   ebp
c000ddb8:	83 fa 01             	cmp    edx,0x1
c000ddbb:	19 c0                	sbb    eax,eax
c000ddbd:	f7 d0                	not    eax
c000ddbf:	05 6e 01 00 00       	add    eax,0x16e
c000ddc4:	01 c1                	add    ecx,eax
c000ddc6:	43                   	inc    ebx
c000ddc7:	39 f3                	cmp    ebx,esi
c000ddc9:	7c cc                	jl     c000dd97 <datetimeToSeconds(datetime_t)+0xa4>
c000ddcb:	eb 35                	jmp    c000de02 <datetimeToSeconds(datetime_t)+0x10f>
c000ddcd:	74 33                	je     c000de02 <datetimeToSeconds(datetime_t)+0x10f>
c000ddcf:	b8 45 00 00 00       	mov    eax,0x45
c000ddd4:	89 c2                	mov    edx,eax
c000ddd6:	83 e2 03             	and    edx,0x3
c000ddd9:	39 f0                	cmp    eax,esi
c000dddb:	7e 0f                	jle    c000ddec <datetimeToSeconds(datetime_t)+0xf9>
c000dddd:	83 fa 01             	cmp    edx,0x1
c000dde0:	19 d2                	sbb    edx,edx
c000dde2:	48                   	dec    eax
c000dde3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000ddea:	eb e8                	jmp    c000ddd4 <datetimeToSeconds(datetime_t)+0xe1>
c000ddec:	b8 6d 01 00 00       	mov    eax,0x16d
c000ddf1:	85 d2                	test   edx,edx
c000ddf3:	75 0b                	jne    c000de00 <datetimeToSeconds(datetime_t)+0x10d>
c000ddf5:	66 83 fb 01          	cmp    bx,0x1
c000ddf9:	19 c0                	sbb    eax,eax
c000ddfb:	05 6e 01 00 00       	add    eax,0x16e
c000de00:	29 c1                	sub    ecx,eax
c000de02:	b8 80 51 01 00       	mov    eax,0x15180
c000de07:	f7 e9                	imul   ecx
c000de09:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de0d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000de11:	83 c4 14             	add    esp,0x14
c000de14:	5b                   	pop    ebx
c000de15:	5e                   	pop    esi
c000de16:	5f                   	pop    edi
c000de17:	5d                   	pop    ebp
c000de18:	c3                   	ret    
c000de19:	90                   	nop

c000de1a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000de1a:	57                   	push   edi
c000de1b:	56                   	push   esi
c000de1c:	53                   	push   ebx
c000de1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de21:	8b 06                	mov    eax,DWORD PTR [esi]
c000de23:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000de26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de2e:	e8 c0 fe ff ff       	call   c000dcf3 <datetimeToSeconds(datetime_t)>
c000de33:	59                   	pop    ecx
c000de34:	0f b6 0d 3c 7c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027c3c
c000de3b:	5b                   	pop    ebx
c000de3c:	03 0d 40 7c 02 c0    	add    ecx,DWORD PTR ds:0xc0027c40
c000de42:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000de48:	89 cb                	mov    ebx,ecx
c000de4a:	c1 fb 1f             	sar    ebx,0x1f
c000de4d:	29 c8                	sub    eax,ecx
c000de4f:	19 da                	sbb    edx,ebx
c000de51:	31 c9                	xor    ecx,ecx
c000de53:	80 3d 3d 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027c3d,0x0
c000de5a:	74 05                	je     c000de61 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000de5c:	b9 08 07 00 00       	mov    ecx,0x708
c000de61:	31 db                	xor    ebx,ebx
c000de63:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000de67:	29 c8                	sub    eax,ecx
c000de69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de6d:	19 da                	sbb    edx,ebx
c000de6f:	89 f8                	mov    eax,edi
c000de71:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000de75:	5b                   	pop    ebx
c000de76:	5e                   	pop    esi
c000de77:	5f                   	pop    edi
c000de78:	ff e0                	jmp    eax

c000de7a <secondsToDatetime(unsigned long long)>:
c000de7a:	55                   	push   ebp
c000de7b:	57                   	push   edi
c000de7c:	56                   	push   esi
c000de7d:	53                   	push   ebx
c000de7e:	83 ec 1c             	sub    esp,0x1c
c000de81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de85:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000de89:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000de8d:	6a 00                	push   0x0
c000de8f:	68 80 51 01 00       	push   0x15180
c000de94:	55                   	push   ebp
c000de95:	57                   	push   edi
c000de96:	e8 39 45 01 00       	call   c00223d4 <__udivdi3>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dea4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dea8:	6a 00                	push   0x0
c000deaa:	68 80 51 01 00       	push   0x15180
c000deaf:	55                   	push   ebp
c000deb0:	57                   	push   edi
c000deb1:	bf 10 0e 00 00       	mov    edi,0xe10
c000deb6:	e8 19 46 01 00       	call   c00224d4 <__umoddi3>
c000debb:	83 c4 10             	add    esp,0x10
c000debe:	99                   	cdq    
c000debf:	f7 ff                	idiv   edi
c000dec1:	bf 3c 00 00 00       	mov    edi,0x3c
c000dec6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dec9:	89 d0                	mov    eax,edx
c000decb:	99                   	cdq    
c000decc:	f7 ff                	idiv   edi
c000dece:	85 db                	test   ebx,ebx
c000ded0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000ded3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000ded6:	79 11                	jns    c000dee9 <secondsToDatetime(unsigned long long)+0x6f>
c000ded8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dedc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dee2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dee7:	eb 07                	jmp    c000def0 <secondsToDatetime(unsigned long long)+0x76>
c000dee9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000deee:	89 d8                	mov    eax,ebx
c000def0:	bf b4 05 00 00       	mov    edi,0x5b4
c000def5:	99                   	cdq    
c000def6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000defb:	f7 f9                	idiv   ecx
c000defd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000df02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df06:	31 d2                	xor    edx,edx
c000df08:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000df10:	01 c3                	add    ebx,eax
c000df12:	89 d8                	mov    eax,ebx
c000df14:	f7 f1                	div    ecx
c000df16:	31 d2                	xor    edx,edx
c000df18:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000df1b:	89 d8                	mov    eax,ebx
c000df1d:	f7 f7                	div    edi
c000df1f:	31 d2                	xor    edx,edx
c000df21:	29 c1                	sub    ecx,eax
c000df23:	89 d8                	mov    eax,ebx
c000df25:	f7 f5                	div    ebp
c000df27:	bd 6d 01 00 00       	mov    ebp,0x16d
c000df2c:	29 c1                	sub    ecx,eax
c000df2e:	31 d2                	xor    edx,edx
c000df30:	89 c8                	mov    eax,ecx
c000df32:	f7 f5                	div    ebp
c000df34:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000df39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df3d:	31 d2                	xor    edx,edx
c000df3f:	89 c8                	mov    eax,ecx
c000df41:	f7 f5                	div    ebp
c000df43:	31 d2                	xor    edx,edx
c000df45:	01 c3                	add    ebx,eax
c000df47:	89 c8                	mov    eax,ecx
c000df49:	f7 f7                	div    edi
c000df4b:	bf 99 00 00 00       	mov    edi,0x99
c000df50:	29 c3                	sub    ebx,eax
c000df52:	31 d2                	xor    edx,edx
c000df54:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000df5c:	29 c3                	sub    ebx,eax
c000df5e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000df61:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000df64:	bb 05 00 00 00       	mov    ebx,0x5
c000df69:	83 c1 02             	add    ecx,0x2
c000df6c:	89 c8                	mov    eax,ecx
c000df6e:	f7 f7                	div    edi
c000df70:	31 d2                	xor    edx,edx
c000df72:	89 c7                	mov    edi,eax
c000df74:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000df7a:	83 c0 02             	add    eax,0x2
c000df7d:	f7 f3                	div    ebx
c000df7f:	89 eb                	mov    ebx,ebp
c000df81:	29 c3                	sub    ebx,eax
c000df83:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000df89:	88 1e                	mov    BYTE PTR [esi],bl
c000df8b:	19 c0                	sbb    eax,eax
c000df8d:	31 d2                	xor    edx,edx
c000df8f:	83 e0 0c             	and    eax,0xc
c000df92:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000df96:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000df9e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dfa2:	83 f9 01             	cmp    ecx,0x1
c000dfa5:	0f 96 c2             	setbe  dl
c000dfa8:	41                   	inc    ecx
c000dfa9:	01 d0                	add    eax,edx
c000dfab:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dfae:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dfb2:	83 c4 1c             	add    esp,0x1c
c000dfb5:	89 f0                	mov    eax,esi
c000dfb7:	5b                   	pop    ebx
c000dfb8:	5e                   	pop    esi
c000dfb9:	5f                   	pop    edi
c000dfba:	5d                   	pop    ebp
c000dfbb:	c2 04 00             	ret    0x4

c000dfbe <Clock::timeInDatetimeLocal()>:
c000dfbe:	53                   	push   ebx
c000dfbf:	83 ec 14             	sub    esp,0x14
c000dfc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dfca:	e8 83 fc ff ff       	call   c000dc52 <Clock::timeInSecondsLocal()>
c000dfcf:	83 c4 0c             	add    esp,0xc
c000dfd2:	52                   	push   edx
c000dfd3:	50                   	push   eax
c000dfd4:	53                   	push   ebx
c000dfd5:	e8 a0 fe ff ff       	call   c000de7a <secondsToDatetime(unsigned long long)>
c000dfda:	89 d8                	mov    eax,ebx
c000dfdc:	83 c4 14             	add    esp,0x14
c000dfdf:	5b                   	pop    ebx
c000dfe0:	c2 04 00             	ret    0x4
c000dfe3:	90                   	nop

c000dfe4 <Device::hibernate()>:
c000dfe4:	c3                   	ret    
c000dfe5:	90                   	nop

c000dfe6 <Device::wake()>:
c000dfe6:	c3                   	ret    
c000dfe7:	90                   	nop

c000dfe8 <Device::detect()>:
c000dfe8:	c3                   	ret    
c000dfe9:	90                   	nop

c000dfea <Device::disableLegacy()>:
c000dfea:	c3                   	ret    
c000dfeb:	90                   	nop

c000dfec <Device::powerSaving(PowerSavingLevel)>:
c000dfec:	c3                   	ret    
c000dfed:	90                   	nop

c000dfee <DriverlessDevice::close(int, int, void*)>:
c000dfee:	31 c0                	xor    eax,eax
c000dff0:	c3                   	ret    
c000dff1:	90                   	nop

c000dff2 <DriverlessDevice::detect()>:
c000dff2:	c3                   	ret    
c000dff3:	90                   	nop

c000dff4 <DriverlessDevice::open(int, int, void*)>:
c000dff4:	83 ec 18             	sub    esp,0x18
c000dff7:	68 b0 47 02 c0       	push   0xc00247b0
c000dffc:	e8 5e 68 00 00       	call   c001485f <Krnl::panic(char const*)>
c000e001:	83 c8 ff             	or     eax,0xffffffff
c000e004:	83 c4 1c             	add    esp,0x1c
c000e007:	c3                   	ret    

c000e008 <Device::~Device()>:
c000e008:	ba 10 48 02 c0       	mov    edx,0xc0024810
c000e00d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e011:	89 10                	mov    DWORD PTR [eax],edx
c000e013:	90                   	nop
c000e014:	c3                   	ret    
c000e015:	90                   	nop

c000e016 <Device::~Device()>:
c000e016:	83 ec 0c             	sub    esp,0xc
c000e019:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e01d:	e8 e6 ff ff ff       	call   c000e008 <Device::~Device()>
c000e022:	83 c4 04             	add    esp,0x4
c000e025:	83 ec 08             	sub    esp,0x8
c000e028:	68 58 01 00 00       	push   0x158
c000e02d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e031:	e8 9c eb ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000e036:	83 c4 10             	add    esp,0x10
c000e039:	83 c4 0c             	add    esp,0xc
c000e03c:	c3                   	ret    
c000e03d:	90                   	nop

c000e03e <Device::findAndLoadDriver()>:
c000e03e:	c7 44 24 04 ce 47 02 c0 	mov    DWORD PTR [esp+0x4],0xc00247ce
c000e046:	e9 68 ec ff ff       	jmp    c000ccb3 <Dbg::kprintf(char const*, ...)>
c000e04b:	90                   	nop

c000e04c <Device::preOpenPCI(PCIDeviceInfo)>:
c000e04c:	57                   	push   edi
c000e04d:	b9 09 00 00 00       	mov    ecx,0x9
c000e052:	56                   	push   esi
c000e053:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e057:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e05b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e065:	81 c7 18 01 00 00    	add    edi,0x118
c000e06b:	fc                   	cld    
c000e06c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e06e:	5e                   	pop    esi
c000e06f:	5f                   	pop    edi
c000e070:	c3                   	ret    
c000e071:	90                   	nop

c000e072 <Device::preOpenACPI(void*, char*, char*)>:
c000e072:	57                   	push   edi
c000e073:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e078:	56                   	push   esi
c000e079:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e07d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e081:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e08b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e091:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e097:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e09b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e09d:	b9 0e 00 00 00       	mov    ecx,0xe
c000e0a2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e0a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e0ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e0ae:	5e                   	pop    esi
c000e0af:	5f                   	pop    edi
c000e0b0:	c3                   	ret    
c000e0b1:	90                   	nop

c000e0b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0b6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e0bb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e0c2:	75 0b                	jne    c000e0cf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e0c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e0cd:	eb 1e                	jmp    c000e0ed <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e0cf:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000e0d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e0da:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e0e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e0e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e0ea:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e0ed:	ff e0                	jmp    eax
c000e0ef:	90                   	nop

c000e0f0 <Device::getParent()>:
c000e0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0f4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e0fa:	c3                   	ret    
c000e0fb:	90                   	nop

c000e0fc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e100:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e105:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e10c:	75 0b                	jne    c000e119 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e10e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e110:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e114:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e117:	eb 1e                	jmp    c000e137 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e119:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000e11e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e124:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e12a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e12c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e130:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e134:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e137:	ff e0                	jmp    eax
c000e139:	90                   	nop

c000e13a <Device::addChild(Device*)>:
c000e13a:	53                   	push   ebx
c000e13b:	83 ec 08             	sub    esp,0x8
c000e13e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e142:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e146:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e14c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e152:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e154:	85 d2                	test   edx,edx
c000e156:	74 04                	je     c000e15c <Device::addChild(Device*)+0x22>
c000e158:	89 d3                	mov    ebx,edx
c000e15a:	eb f6                	jmp    c000e152 <Device::addChild(Device*)+0x18>
c000e15c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e15f:	83 ec 0c             	sub    esp,0xc
c000e162:	6a 08                	push   0x8
c000e164:	e8 5a b8 ff ff       	call   c00099c3 <malloc>
c000e169:	89 03                	mov    DWORD PTR [ebx],eax
c000e16b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e171:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e178:	83 c4 18             	add    esp,0x18
c000e17b:	5b                   	pop    ebx
c000e17c:	c3                   	ret    
c000e17d:	90                   	nop

c000e17e <Device::removeAllChildren()>:
c000e17e:	56                   	push   esi
c000e17f:	53                   	push   ebx
c000e180:	52                   	push   edx
c000e181:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e185:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e18b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e18e:	74 17                	je     c000e1a7 <Device::removeAllChildren()+0x29>
c000e190:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e193:	85 c0                	test   eax,eax
c000e195:	74 0c                	je     c000e1a3 <Device::removeAllChildren()+0x25>
c000e197:	83 ec 0c             	sub    esp,0xc
c000e19a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e19c:	50                   	push   eax
c000e19d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e1a0:	83 c4 10             	add    esp,0x10
c000e1a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1a5:	eb e4                	jmp    c000e18b <Device::removeAllChildren()+0xd>
c000e1a7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e1ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1b3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e1b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e1c0:	58                   	pop    eax
c000e1c1:	5b                   	pop    ebx
c000e1c2:	5e                   	pop    esi
c000e1c3:	c3                   	ret    

c000e1c4 <Device::hibernateAll()>:
c000e1c4:	53                   	push   ebx
c000e1c5:	83 ec 14             	sub    esp,0x14
c000e1c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e1cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1ce:	53                   	push   ebx
c000e1cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e1d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e1d8:	83 c4 10             	add    esp,0x10
c000e1db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1de:	74 0f                	je     c000e1ef <Device::hibernateAll()+0x2b>
c000e1e0:	83 ec 0c             	sub    esp,0xc
c000e1e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e1e6:	e8 d9 ff ff ff       	call   c000e1c4 <Device::hibernateAll()>
c000e1eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1ed:	eb e9                	jmp    c000e1d8 <Device::hibernateAll()+0x14>
c000e1ef:	83 c4 08             	add    esp,0x8
c000e1f2:	5b                   	pop    ebx
c000e1f3:	c3                   	ret    

c000e1f4 <Device::wakeAll()>:
c000e1f4:	53                   	push   ebx
c000e1f5:	83 ec 14             	sub    esp,0x14
c000e1f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e1fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1fe:	53                   	push   ebx
c000e1ff:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e202:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e208:	83 c4 10             	add    esp,0x10
c000e20b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e20e:	74 0f                	je     c000e21f <Device::wakeAll()+0x2b>
c000e210:	83 ec 0c             	sub    esp,0xc
c000e213:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e216:	e8 d9 ff ff ff       	call   c000e1f4 <Device::wakeAll()>
c000e21b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e21d:	eb e9                	jmp    c000e208 <Device::wakeAll()+0x14>
c000e21f:	83 c4 08             	add    esp,0x8
c000e222:	5b                   	pop    ebx
c000e223:	c3                   	ret    

c000e224 <Device::detectAll()>:
c000e224:	53                   	push   ebx
c000e225:	83 ec 14             	sub    esp,0x14
c000e228:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e22c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e22e:	53                   	push   ebx
c000e22f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e232:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e238:	83 c4 10             	add    esp,0x10
c000e23b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e23e:	74 0f                	je     c000e24f <Device::detectAll()+0x2b>
c000e240:	83 ec 0c             	sub    esp,0xc
c000e243:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e246:	e8 d9 ff ff ff       	call   c000e224 <Device::detectAll()>
c000e24b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e24d:	eb e9                	jmp    c000e238 <Device::detectAll()+0x14>
c000e24f:	83 c4 08             	add    esp,0x8
c000e252:	5b                   	pop    ebx
c000e253:	c3                   	ret    

c000e254 <Device::disableLegacyAll()>:
c000e254:	53                   	push   ebx
c000e255:	83 ec 14             	sub    esp,0x14
c000e258:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e25c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e25e:	53                   	push   ebx
c000e25f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e262:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e268:	83 c4 10             	add    esp,0x10
c000e26b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e26e:	74 0f                	je     c000e27f <Device::disableLegacyAll()+0x2b>
c000e270:	83 ec 0c             	sub    esp,0xc
c000e273:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e276:	e8 d9 ff ff ff       	call   c000e254 <Device::disableLegacyAll()>
c000e27b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e27d:	eb e9                	jmp    c000e268 <Device::disableLegacyAll()+0x14>
c000e27f:	83 c4 08             	add    esp,0x8
c000e282:	5b                   	pop    ebx
c000e283:	c3                   	ret    

c000e284 <Device::loadDriversForAll()>:
c000e284:	53                   	push   ebx
c000e285:	83 ec 08             	sub    esp,0x8
c000e288:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e28c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e293:	75 0c                	jne    c000e2a1 <Device::loadDriversForAll()+0x1d>
c000e295:	83 ec 0c             	sub    esp,0xc
c000e298:	53                   	push   ebx
c000e299:	e8 a0 fd ff ff       	call   c000e03e <Device::findAndLoadDriver()>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2aa:	74 12                	je     c000e2be <Device::loadDriversForAll()+0x3a>
c000e2ac:	83 ec 0c             	sub    esp,0xc
c000e2af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2b2:	e8 cd ff ff ff       	call   c000e284 <Device::loadDriversForAll()>
c000e2b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	eb e9                	jmp    c000e2a7 <Device::loadDriversForAll()+0x23>
c000e2be:	83 c4 08             	add    esp,0x8
c000e2c1:	5b                   	pop    ebx
c000e2c2:	c3                   	ret    
c000e2c3:	90                   	nop

c000e2c4 <Device::closeAll()>:
c000e2c4:	53                   	push   ebx
c000e2c5:	83 ec 08             	sub    esp,0x8
c000e2c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2ce:	6a 00                	push   0x0
c000e2d0:	6a 00                	push   0x0
c000e2d2:	6a 00                	push   0x0
c000e2d4:	53                   	push   ebx
c000e2d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e2d8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2de:	83 c4 10             	add    esp,0x10
c000e2e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2e4:	74 0f                	je     c000e2f5 <Device::closeAll()+0x31>
c000e2e6:	83 ec 0c             	sub    esp,0xc
c000e2e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2ec:	e8 d3 ff ff ff       	call   c000e2c4 <Device::closeAll()>
c000e2f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2f3:	eb e9                	jmp    c000e2de <Device::closeAll()+0x1a>
c000e2f5:	83 c4 08             	add    esp,0x8
c000e2f8:	5b                   	pop    ebx
c000e2f9:	c3                   	ret    

c000e2fa <Device::powerSavingAll(PowerSavingLevel)>:
c000e2fa:	56                   	push   esi
c000e2fb:	53                   	push   ebx
c000e2fc:	83 ec 0c             	sub    esp,0xc
c000e2ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e303:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e307:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e309:	56                   	push   esi
c000e30a:	53                   	push   ebx
c000e30b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e30e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e314:	83 c4 10             	add    esp,0x10
c000e317:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e31a:	74 0f                	je     c000e32b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e31c:	52                   	push   edx
c000e31d:	52                   	push   edx
c000e31e:	56                   	push   esi
c000e31f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e322:	e8 d3 ff ff ff       	call   c000e2fa <Device::powerSavingAll(PowerSavingLevel)>
c000e327:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e329:	eb e9                	jmp    c000e314 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e32b:	58                   	pop    eax
c000e32c:	5b                   	pop    ebx
c000e32d:	5e                   	pop    esi
c000e32e:	c3                   	ret    
c000e32f:	90                   	nop

c000e330 <Device::setName(char const*)>:
c000e330:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e338:	e9 03 24 ff ff       	jmp    c0000740 <strcpy>
c000e33d:	90                   	nop

c000e33e <Device::Device(char const*)>:
c000e33e:	83 ec 1c             	sub    esp,0x1c
c000e341:	ba 10 48 02 c0       	mov    edx,0xc0024810
c000e346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e34a:	89 10                	mov    DWORD PTR [eax],edx
c000e34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e350:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e35e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e36c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e37a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e384:	83 ec 08             	sub    esp,0x8
c000e387:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e38b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e38f:	e8 9c ff ff ff       	call   c000e330 <Device::setName(char const*)>
c000e394:	83 c4 10             	add    esp,0x10
c000e397:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e39f:	83 ec 0c             	sub    esp,0xc
c000e3a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3a6:	e8 18 b6 ff ff       	call   c00099c3 <malloc>
c000e3ab:	83 c4 10             	add    esp,0x10
c000e3ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e3b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e3bf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e3c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3c9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e3cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e3d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3d9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e3df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ea:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e3f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3f5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e3fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e400:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e40a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e40e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e41c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e42a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e434:	90                   	nop
c000e435:	83 c4 1c             	add    esp,0x1c
c000e438:	c3                   	ret    
c000e439:	90                   	nop

c000e43a <Device::getName()>:
c000e43a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e43e:	05 d0 00 00 00       	add    eax,0xd0
c000e443:	c3                   	ret    

c000e444 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e444:	83 ec 0c             	sub    esp,0xc
c000e447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e44b:	83 ec 08             	sub    esp,0x8
c000e44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e452:	50                   	push   eax
c000e453:	e8 e6 fe ff ff       	call   c000e33e <Device::Device(char const*)>
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	ba 3c 48 02 c0       	mov    edx,0xc002483c
c000e460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e464:	89 10                	mov    DWORD PTR [eax],edx
c000e466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e46a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e474:	90                   	nop
c000e475:	83 c4 0c             	add    esp,0xc
c000e478:	c3                   	ret    
c000e479:	90                   	nop

c000e47a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e47a:	57                   	push   edi
c000e47b:	56                   	push   esi
c000e47c:	53                   	push   ebx
c000e47d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e481:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e485:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e489:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e48f:	75 0c                	jne    c000e49d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e491:	52                   	push   edx
c000e492:	52                   	push   edx
c000e493:	53                   	push   ebx
c000e494:	56                   	push   esi
c000e495:	e8 ec 43 01 00       	call   c0022886 <LinkedList<Device>::addElement(Device*)>
c000e49a:	83 c4 10             	add    esp,0x10
c000e49d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e4a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e4a6:	74 12                	je     c000e4ba <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e4a8:	50                   	push   eax
c000e4a9:	57                   	push   edi
c000e4aa:	56                   	push   esi
c000e4ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e4ae:	e8 c7 ff ff ff       	call   c000e47a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e4b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e4b5:	83 c4 10             	add    esp,0x10
c000e4b8:	eb e9                	jmp    c000e4a3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e4ba:	5b                   	pop    ebx
c000e4bb:	5e                   	pop    esi
c000e4bc:	5f                   	pop    edi
c000e4bd:	c3                   	ret    

c000e4be <getDevicesOfType(DeviceType)>:
c000e4be:	53                   	push   ebx
c000e4bf:	83 ec 14             	sub    esp,0x14
c000e4c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e4c6:	53                   	push   ebx
c000e4c7:	e8 96 44 01 00       	call   c0022962 <LinkedList<Device>::LinkedList()>
c000e4cc:	83 c4 0c             	add    esp,0xc
c000e4cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4d3:	53                   	push   ebx
c000e4d4:	ff 35 08 7b 02 c0    	push   DWORD PTR ds:0xc0027b08
c000e4da:	e8 9b ff ff ff       	call   c000e47a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e4df:	89 d8                	mov    eax,ebx
c000e4e1:	83 c4 18             	add    esp,0x18
c000e4e4:	5b                   	pop    ebx
c000e4e5:	c2 04 00             	ret    0x4

c000e4e8 <HardDiskController::HardDiskController(char const*)>:
c000e4e8:	83 ec 0c             	sub    esp,0xc
c000e4eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ef:	83 ec 08             	sub    esp,0x8
c000e4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f6:	50                   	push   eax
c000e4f7:	e8 42 fe ff ff       	call   c000e33e <Device::Device(char const*)>
c000e4fc:	83 c4 10             	add    esp,0x10
c000e4ff:	ba 68 48 02 c0       	mov    edx,0xc0024868
c000e504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e508:	89 10                	mov    DWORD PTR [eax],edx
c000e50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e50e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e518:	90                   	nop
c000e519:	83 c4 0c             	add    esp,0xc
c000e51c:	c3                   	ret    
c000e51d:	90                   	nop
c000e51e:	66 90                	xchg   ax,ax

c000e520 <HardDiskController::~HardDiskController()>:
c000e520:	83 ec 0c             	sub    esp,0xc
c000e523:	ba 68 48 02 c0       	mov    edx,0xc0024868
c000e528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e52c:	89 10                	mov    DWORD PTR [eax],edx
c000e52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e532:	83 ec 0c             	sub    esp,0xc
c000e535:	50                   	push   eax
c000e536:	e8 cd fa ff ff       	call   c000e008 <Device::~Device()>
c000e53b:	83 c4 10             	add    esp,0x10
c000e53e:	90                   	nop
c000e53f:	83 c4 0c             	add    esp,0xc
c000e542:	c3                   	ret    
c000e543:	90                   	nop

c000e544 <HardDiskController::~HardDiskController()>:
c000e544:	83 ec 0c             	sub    esp,0xc
c000e547:	83 ec 0c             	sub    esp,0xc
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 cd ff ff ff       	call   c000e520 <HardDiskController::~HardDiskController()>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	83 ec 08             	sub    esp,0x8
c000e559:	68 58 01 00 00       	push   0x158
c000e55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e562:	e8 6b e6 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000e567:	83 c4 10             	add    esp,0x10
c000e56a:	83 c4 0c             	add    esp,0xc
c000e56d:	c3                   	ret    

c000e56e <PhysicalDisk::eject()>:
c000e56e:	83 c8 ff             	or     eax,0xffffffff
c000e571:	c3                   	ret    

c000e572 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e572:	83 ec 0c             	sub    esp,0xc
c000e575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e579:	83 ec 08             	sub    esp,0x8
c000e57c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e580:	50                   	push   eax
c000e581:	e8 b8 fd ff ff       	call   c000e33e <Device::Device(char const*)>
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	ba 94 48 02 c0       	mov    edx,0xc0024894
c000e58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e592:	89 10                	mov    DWORD PTR [eax],edx
c000e594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e598:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ae:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e5c0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e5c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ca:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e5d4:	90                   	nop
c000e5d5:	83 c4 0c             	add    esp,0xc
c000e5d8:	c3                   	ret    
c000e5d9:	90                   	nop

c000e5da <PhysicalDisk::startCache()>:
c000e5da:	56                   	push   esi
c000e5db:	53                   	push   ebx
c000e5dc:	83 ec 10             	sub    esp,0x10
c000e5df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5e3:	6a 44                	push   0x44
c000e5e5:	e8 d9 b3 ff ff       	call   c00099c3 <malloc>
c000e5ea:	89 c6                	mov    esi,eax
c000e5ec:	58                   	pop    eax
c000e5ed:	5a                   	pop    edx
c000e5ee:	53                   	push   ebx
c000e5ef:	56                   	push   esi
c000e5f0:	e8 2f 26 00 00       	call   c0010c24 <VCache::VCache(PhysicalDisk*)>
c000e5f5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e5fb:	83 c4 14             	add    esp,0x14
c000e5fe:	5b                   	pop    ebx
c000e5ff:	5e                   	pop    esi
c000e600:	c3                   	ret    
c000e601:	90                   	nop

c000e602 <PhysicalDisk::~PhysicalDisk()>:
c000e602:	83 ec 0c             	sub    esp,0xc
c000e605:	ba 94 48 02 c0       	mov    edx,0xc0024894
c000e60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e60e:	89 10                	mov    DWORD PTR [eax],edx
c000e610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e614:	83 ec 0c             	sub    esp,0xc
c000e617:	50                   	push   eax
c000e618:	e8 eb f9 ff ff       	call   c000e008 <Device::~Device()>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	90                   	nop
c000e621:	83 c4 0c             	add    esp,0xc
c000e624:	c3                   	ret    
c000e625:	90                   	nop

c000e626 <PhysicalDisk::~PhysicalDisk()>:
c000e626:	83 ec 0c             	sub    esp,0xc
c000e629:	83 ec 0c             	sub    esp,0xc
c000e62c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e630:	e8 cd ff ff ff       	call   c000e602 <PhysicalDisk::~PhysicalDisk()>
c000e635:	83 c4 10             	add    esp,0x10
c000e638:	83 ec 08             	sub    esp,0x8
c000e63b:	68 6c 01 00 00       	push   0x16c
c000e640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e644:	e8 89 e5 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000e649:	83 c4 10             	add    esp,0x10
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <FPU::FPU(char const*)>:
c000e650:	83 ec 0c             	sub    esp,0xc
c000e653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e657:	83 ec 08             	sub    esp,0x8
c000e65a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e65e:	50                   	push   eax
c000e65f:	e8 da fc ff ff       	call   c000e33e <Device::Device(char const*)>
c000e664:	83 c4 10             	add    esp,0x10
c000e667:	ba d8 48 02 c0       	mov    edx,0xc00248d8
c000e66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e670:	89 10                	mov    DWORD PTR [eax],edx
c000e672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e676:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e680:	90                   	nop
c000e681:	83 c4 0c             	add    esp,0xc
c000e684:	c3                   	ret    
c000e685:	90                   	nop
c000e686:	66 90                	xchg   ax,ax

c000e688 <FPU::~FPU()>:
c000e688:	83 ec 0c             	sub    esp,0xc
c000e68b:	ba d8 48 02 c0       	mov    edx,0xc00248d8
c000e690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e694:	89 10                	mov    DWORD PTR [eax],edx
c000e696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e69a:	83 ec 0c             	sub    esp,0xc
c000e69d:	50                   	push   eax
c000e69e:	e8 65 f9 ff ff       	call   c000e008 <Device::~Device()>
c000e6a3:	83 c4 10             	add    esp,0x10
c000e6a6:	90                   	nop
c000e6a7:	83 c4 0c             	add    esp,0xc
c000e6aa:	c3                   	ret    
c000e6ab:	90                   	nop

c000e6ac <FPU::~FPU()>:
c000e6ac:	83 ec 0c             	sub    esp,0xc
c000e6af:	83 ec 0c             	sub    esp,0xc
c000e6b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6b6:	e8 cd ff ff ff       	call   c000e688 <FPU::~FPU()>
c000e6bb:	83 c4 10             	add    esp,0x10
c000e6be:	83 ec 08             	sub    esp,0x8
c000e6c1:	68 58 01 00 00       	push   0x158
c000e6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6ca:	e8 03 e5 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000e6cf:	83 c4 10             	add    esp,0x10
c000e6d2:	83 c4 0c             	add    esp,0xc
c000e6d5:	c3                   	ret    

c000e6d6 <setupFPU()>:
c000e6d6:	53                   	push   ebx
c000e6d7:	83 ec 08             	sub    esp,0x8
c000e6da:	8b 15 08 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b08
c000e6e0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e6e7:	74 1b                	je     c000e704 <setupFPU()+0x2e>
c000e6e9:	83 ec 0c             	sub    esp,0xc
c000e6ec:	68 58 01 00 00       	push   0x158
c000e6f1:	e8 cd b2 ff ff       	call   c00099c3 <malloc>
c000e6f6:	89 c3                	mov    ebx,eax
c000e6f8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6fb:	e8 64 28 01 00       	call   c0020f64 <AVX::AVX()>
c000e700:	eb 62                	jmp    c000e764 <setupFPU()+0x8e>
c000e702:	66 90                	xchg   ax,ax
c000e704:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e70a:	84 c0                	test   al,al
c000e70c:	79 1a                	jns    c000e728 <setupFPU()+0x52>
c000e70e:	83 ec 0c             	sub    esp,0xc
c000e711:	68 58 01 00 00       	push   0x158
c000e716:	e8 a8 b2 ff ff       	call   c00099c3 <malloc>
c000e71b:	89 c3                	mov    ebx,eax
c000e71d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e720:	e8 6f 29 01 00       	call   c0021094 <SSE::SSE()>
c000e725:	eb 3d                	jmp    c000e764 <setupFPU()+0x8e>
c000e727:	90                   	nop
c000e728:	a8 20                	test   al,0x20
c000e72a:	74 1c                	je     c000e748 <setupFPU()+0x72>
c000e72c:	83 ec 0c             	sub    esp,0xc
c000e72f:	68 58 01 00 00       	push   0x158
c000e734:	e8 8a b2 ff ff       	call   c00099c3 <malloc>
c000e739:	89 c3                	mov    ebx,eax
c000e73b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e73e:	e8 b5 28 01 00       	call   c0020ff8 <MMX::MMX()>
c000e743:	eb 1f                	jmp    c000e764 <setupFPU()+0x8e>
c000e745:	8d 76 00             	lea    esi,[esi+0x0]
c000e748:	a8 10                	test   al,0x10
c000e74a:	74 20                	je     c000e76c <setupFPU()+0x96>
c000e74c:	83 ec 0c             	sub    esp,0xc
c000e74f:	68 58 01 00 00       	push   0x158
c000e754:	e8 6a b2 ff ff       	call   c00099c3 <malloc>
c000e759:	89 c3                	mov    ebx,eax
c000e75b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e75e:	e8 c5 29 01 00       	call   c0021128 <x87::x87()>
c000e763:	90                   	nop
c000e764:	83 c4 10             	add    esp,0x10
c000e767:	eb 27                	jmp    c000e790 <setupFPU()+0xba>
c000e769:	8d 76 00             	lea    esi,[esi+0x0]
c000e76c:	83 e0 ef             	and    eax,0xffffffef
c000e76f:	83 ec 0c             	sub    esp,0xc
c000e772:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e778:	68 c4 48 02 c0       	push   0xc00248c4
c000e77d:	e8 31 e5 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000e782:	0f 20 c0             	mov    eax,cr0
c000e785:	83 c8 04             	or     eax,0x4
c000e788:	0f 22 c0             	mov    cr0,eax
c000e78b:	31 db                	xor    ebx,ebx
c000e78d:	83 c4 10             	add    esp,0x10
c000e790:	89 d8                	mov    eax,ebx
c000e792:	83 c4 08             	add    esp,0x8
c000e795:	5b                   	pop    ebx
c000e796:	c3                   	ret    
c000e797:	90                   	nop

c000e798 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e798:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e79c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7a0:	c1 e0 04             	shl    eax,0x4
c000e7a3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e7a7:	8d 50 10             	lea    edx,[eax+0x10]
c000e7aa:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e7b0:	74 08                	je     c000e7ba <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e7b2:	83 c0 04             	add    eax,0x4
c000e7b5:	39 d0                	cmp    eax,edx
c000e7b7:	75 f1                	jne    c000e7aa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e7b9:	c3                   	ret    
c000e7ba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e7c4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e7ce:	eb e2                	jmp    c000e7b2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e7d0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e7d0:	57                   	push   edi
c000e7d1:	31 c0                	xor    eax,eax
c000e7d3:	56                   	push   esi
c000e7d4:	53                   	push   ebx
c000e7d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e7dd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e7e1:	89 da                	mov    edx,ebx
c000e7e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e7e7:	c1 e2 04             	shl    edx,0x4
c000e7ea:	01 ca                	add    edx,ecx
c000e7ec:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e7f4:	74 16                	je     c000e80c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e7f6:	40                   	inc    eax
c000e7f7:	83 f8 04             	cmp    eax,0x4
c000e7fa:	75 f0                	jne    c000e7ec <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e7fc:	c7 44 24 10 08 49 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024908
c000e804:	5b                   	pop    ebx
c000e805:	5e                   	pop    esi
c000e806:	5f                   	pop    edi
c000e807:	e9 53 60 00 00       	jmp    c001485f <Krnl::panic(char const*)>
c000e80c:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e80f:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e812:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e818:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e81e:	5b                   	pop    ebx
c000e81f:	5e                   	pop    esi
c000e820:	5f                   	pop    edi
c000e821:	c3                   	ret    

c000e822 <doubleFault(regs*, void*)>:
c000e822:	55                   	push   ebp
c000e823:	89 e5                	mov    ebp,esp
c000e825:	83 ec 08             	sub    esp,0x8
c000e828:	83 ec 0c             	sub    esp,0xc
c000e82b:	68 15 49 02 c0       	push   0xc0024915
c000e830:	e8 2a 60 00 00       	call   c001485f <Krnl::panic(char const*)>
c000e835:	83 c4 10             	add    esp,0x10
c000e838:	90                   	nop
c000e839:	c9                   	leave  
c000e83a:	c3                   	ret    
c000e83b:	90                   	nop

c000e83c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e83c:	56                   	push   esi
c000e83d:	53                   	push   ebx
c000e83e:	50                   	push   eax
c000e83f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e843:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e847:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e84c:	75 35                	jne    c000e883 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e84e:	8d 43 20             	lea    eax,[ebx+0x20]
c000e851:	31 d2                	xor    edx,edx
c000e853:	89 c1                	mov    ecx,eax
c000e855:	c1 e1 04             	shl    ecx,0x4
c000e858:	01 f1                	add    ecx,esi
c000e85a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e862:	74 3e                	je     c000e8a2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e864:	42                   	inc    edx
c000e865:	83 fa 04             	cmp    edx,0x4
c000e868:	75 f0                	jne    c000e85a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e86a:	83 ec 0c             	sub    esp,0xc
c000e86d:	68 2f 49 02 c0       	push   0xc002492f
c000e872:	e8 e8 5f 00 00       	call   c001485f <Krnl::panic(char const*)>
c000e877:	83 c4 10             	add    esp,0x10
c000e87a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e87f:	5a                   	pop    edx
c000e880:	5b                   	pop    ebx
c000e881:	5e                   	pop    esi
c000e882:	c3                   	ret    
c000e883:	83 ec 0c             	sub    esp,0xc
c000e886:	56                   	push   esi
c000e887:	e8 ae fb ff ff       	call   c000e43a <Device::getName()>
c000e88c:	83 c4 10             	add    esp,0x10
c000e88f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e892:	75 ba                	jne    c000e84e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e894:	83 fb 0f             	cmp    ebx,0xf
c000e897:	7f 29                	jg     c000e8c2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e899:	0f b6 9b 00 72 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8e00]
c000e8a0:	eb ac                	jmp    c000e84e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e8a2:	8d 04 82             	lea    eax,[edx+eax*4]
c000e8a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8a9:	8d 04 86             	lea    eax,[esi+eax*4]
c000e8ac:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e8b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8b6:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e8bc:	89 d8                	mov    eax,ebx
c000e8be:	5a                   	pop    edx
c000e8bf:	5b                   	pop    ebx
c000e8c0:	5e                   	pop    esi
c000e8c1:	c3                   	ret    
c000e8c2:	83 ec 0c             	sub    esp,0xc
c000e8c5:	68 22 49 02 c0       	push   0xc0024922
c000e8ca:	e8 90 5f 00 00       	call   c001485f <Krnl::panic(char const*)>
c000e8cf:	83 c4 10             	add    esp,0x10
c000e8d2:	e9 77 ff ff ff       	jmp    c000e84e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e8d7:	90                   	nop

c000e8d8 <InterruptController::clearAllHandlers(int, bool)>:
c000e8d8:	56                   	push   esi
c000e8d9:	53                   	push   ebx
c000e8da:	52                   	push   edx
c000e8db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e8df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e8e3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e8e8:	75 61                	jne    c000e94b <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e8ea:	8d 46 20             	lea    eax,[esi+0x20]
c000e8ed:	c1 e6 04             	shl    esi,0x4
c000e8f0:	c1 e0 04             	shl    eax,0x4
c000e8f3:	01 de                	add    esi,ebx
c000e8f5:	01 d8                	add    eax,ebx
c000e8f7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e901:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e90b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e915:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e91f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e929:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e933:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e93d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e947:	58                   	pop    eax
c000e948:	5b                   	pop    ebx
c000e949:	5e                   	pop    esi
c000e94a:	c3                   	ret    
c000e94b:	83 ec 0c             	sub    esp,0xc
c000e94e:	53                   	push   ebx
c000e94f:	e8 e6 fa ff ff       	call   c000e43a <Device::getName()>
c000e954:	83 c4 10             	add    esp,0x10
c000e957:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e95a:	75 8e                	jne    c000e8ea <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e95c:	83 fe 0f             	cmp    esi,0xf
c000e95f:	7f 09                	jg     c000e96a <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e961:	0f b6 b6 00 72 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8e00]
c000e968:	eb 80                	jmp    c000e8ea <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e96a:	83 ec 0c             	sub    esp,0xc
c000e96d:	68 3c 49 02 c0       	push   0xc002493c
c000e972:	e8 e8 5e 00 00       	call   c001485f <Krnl::panic(char const*)>
c000e977:	83 c4 10             	add    esp,0x10
c000e97a:	e9 6b ff ff ff       	jmp    c000e8ea <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e97f:	90                   	nop

c000e980 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e980:	56                   	push   esi
c000e981:	53                   	push   ebx
c000e982:	52                   	push   edx
c000e983:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e987:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e98b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e990:	75 3a                	jne    c000e9cc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e992:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e996:	8d 50 20             	lea    edx,[eax+0x20]
c000e999:	c1 e2 04             	shl    edx,0x4
c000e99c:	8d 04 16             	lea    eax,[esi+edx*1]
c000e99f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e9a3:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e9a9:	74 0b                	je     c000e9b6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e9ab:	83 c0 04             	add    eax,0x4
c000e9ae:	39 d0                	cmp    eax,edx
c000e9b0:	75 f1                	jne    c000e9a3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e9b2:	58                   	pop    eax
c000e9b3:	5b                   	pop    ebx
c000e9b4:	5e                   	pop    esi
c000e9b5:	c3                   	ret    
c000e9b6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e9c0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e9ca:	eb df                	jmp    c000e9ab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e9cc:	83 ec 0c             	sub    esp,0xc
c000e9cf:	56                   	push   esi
c000e9d0:	e8 65 fa ff ff       	call   c000e43a <Device::getName()>
c000e9d5:	83 c4 10             	add    esp,0x10
c000e9d8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e9db:	75 b5                	jne    c000e992 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e9dd:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e9e2:	7f 11                	jg     c000e9f5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e9e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9e8:	0f b6 80 00 72 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8e00]
c000e9ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e9f3:	eb 9d                	jmp    c000e992 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e9f5:	83 ec 0c             	sub    esp,0xc
c000e9f8:	68 49 49 02 c0       	push   0xc0024949
c000e9fd:	e8 5d 5e 00 00       	call   c001485f <Krnl::panic(char const*)>
c000ea02:	83 c4 10             	add    esp,0x10
c000ea05:	eb 8b                	jmp    c000e992 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ea07 <nmiHandler(regs*, void*)>:
c000ea07:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000ea0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ea10:	e9 79 a7 ff ff       	jmp    c000918e <Computer::handleNMI()>

c000ea15 <int_handler>:
c000ea15:	55                   	push   ebp
c000ea16:	57                   	push   edi
c000ea17:	56                   	push   esi
c000ea18:	53                   	push   ebx
c000ea19:	83 ec 0c             	sub    esp,0xc
c000ea1c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ea20:	80 3d e4 85 02 c0 00 	cmp    BYTE PTR ds:0xc00285e4,0x0
c000ea27:	74 0b                	je     c000ea34 <int_handler+0x1f>
c000ea29:	fa                   	cli    
c000ea2a:	f4                   	hlt    
c000ea2b:	80 3d e4 85 02 c0 00 	cmp    BYTE PTR ds:0xc00285e4,0x0
c000ea32:	75 f5                	jne    c000ea29 <int_handler+0x14>
c000ea34:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000ea39:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ea3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ea42:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ea48:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ea4b:	83 f8 17             	cmp    eax,0x17
c000ea4e:	77 13                	ja     c000ea63 <int_handler+0x4e>
c000ea50:	83 ec 08             	sub    esp,0x8
c000ea53:	8b 17                	mov    edx,DWORD PTR [edi]
c000ea55:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ea58:	0f b6 c0             	movzx  eax,al
c000ea5b:	50                   	push   eax
c000ea5c:	57                   	push   edi
c000ea5d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000ea60:	83 c4 10             	add    esp,0x10
c000ea63:	83 c3 15             	add    ebx,0x15
c000ea66:	c1 e3 04             	shl    ebx,0x4
c000ea69:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000ea6d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000ea74:	31 db                	xor    ebx,ebx
c000ea76:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ea7a:	85 c0                	test   eax,eax
c000ea7c:	74 13                	je     c000ea91 <int_handler+0x7c>
c000ea7e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000ea81:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ea85:	74 1c                	je     c000eaa3 <int_handler+0x8e>
c000ea87:	83 ec 08             	sub    esp,0x8
c000ea8a:	52                   	push   edx
c000ea8b:	56                   	push   esi
c000ea8c:	ff d0                	call   eax
c000ea8e:	83 c4 10             	add    esp,0x10
c000ea91:	43                   	inc    ebx
c000ea92:	83 fb 04             	cmp    ebx,0x4
c000ea95:	75 df                	jne    c000ea76 <int_handler+0x61>
c000ea97:	83 c4 0c             	add    esp,0xc
c000ea9a:	31 c0                	xor    eax,eax
c000ea9c:	5b                   	pop    ebx
c000ea9d:	31 d2                	xor    edx,edx
c000ea9f:	5e                   	pop    esi
c000eaa0:	5f                   	pop    edi
c000eaa1:	5d                   	pop    ebp
c000eaa2:	c3                   	ret    
c000eaa3:	83 ec 08             	sub    esp,0x8
c000eaa6:	52                   	push   edx
c000eaa7:	56                   	push   esi
c000eaa8:	ff d0                	call   eax
c000eaaa:	83 c4 10             	add    esp,0x10
c000eaad:	83 c4 0c             	add    esp,0xc
c000eab0:	5b                   	pop    ebx
c000eab1:	5e                   	pop    esi
c000eab2:	5f                   	pop    edi
c000eab3:	5d                   	pop    ebp
c000eab4:	c3                   	ret    
c000eab5:	90                   	nop

c000eab6 <InterruptController::InterruptController(char const*)>:
c000eab6:	83 ec 1c             	sub    esp,0x1c
c000eab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eabd:	83 ec 08             	sub    esp,0x8
c000eac0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eac4:	50                   	push   eax
c000eac5:	e8 74 f8 ff ff       	call   c000e33e <Device::Device(char const*)>
c000eaca:	83 c4 10             	add    esp,0x10
c000eacd:	ba 00 4c 02 c0       	mov    edx,0xc0024c00
c000ead2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ead6:	89 10                	mov    DWORD PTR [eax],edx
c000ead8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eadc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000eae6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eaee:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000eaf6:	7f 5e                	jg     c000eb56 <InterruptController::InterruptController(char const*)+0xa0>
c000eaf8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb00:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000eb05:	7f 49                	jg     c000eb50 <InterruptController::InterruptController(char const*)+0x9a>
c000eb07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb0f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb1a:	01 ca                	add    edx,ecx
c000eb1c:	83 c2 54             	add    edx,0x54
c000eb1f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000eb27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb2f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb3a:	01 ca                	add    edx,ecx
c000eb3c:	81 c2 54 04 00 00    	add    edx,0x454
c000eb42:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000eb4a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000eb4e:	eb b0                	jmp    c000eb00 <InterruptController::InterruptController(char const*)+0x4a>
c000eb50:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb54:	eb 98                	jmp    c000eaee <InterruptController::InterruptController(char const*)+0x38>
c000eb56:	90                   	nop
c000eb57:	83 c4 1c             	add    esp,0x1c
c000eb5a:	c3                   	ret    
c000eb5b:	90                   	nop

c000eb5c <InterruptController::~InterruptController()>:
c000eb5c:	83 ec 0c             	sub    esp,0xc
c000eb5f:	ba 00 4c 02 c0       	mov    edx,0xc0024c00
c000eb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb68:	89 10                	mov    DWORD PTR [eax],edx
c000eb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb6e:	83 ec 0c             	sub    esp,0xc
c000eb71:	50                   	push   eax
c000eb72:	e8 91 f4 ff ff       	call   c000e008 <Device::~Device()>
c000eb77:	83 c4 10             	add    esp,0x10
c000eb7a:	90                   	nop
c000eb7b:	83 c4 0c             	add    esp,0xc
c000eb7e:	c3                   	ret    
c000eb7f:	90                   	nop

c000eb80 <InterruptController::~InterruptController()>:
c000eb80:	83 ec 0c             	sub    esp,0xc
c000eb83:	83 ec 0c             	sub    esp,0xc
c000eb86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb8a:	e8 cd ff ff ff       	call   c000eb5c <InterruptController::~InterruptController()>
c000eb8f:	83 c4 10             	add    esp,0x10
c000eb92:	83 ec 08             	sub    esp,0x8
c000eb95:	68 58 21 00 00       	push   0x2158
c000eb9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb9e:	e8 2f e0 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000eba3:	83 c4 10             	add    esp,0x10
c000eba6:	83 c4 0c             	add    esp,0xc
c000eba9:	c3                   	ret    

c000ebaa <displayDebugInfo(regs*)>:
c000ebaa:	55                   	push   ebp
c000ebab:	57                   	push   edi
c000ebac:	56                   	push   esi
c000ebad:	53                   	push   ebx
c000ebae:	83 ec 24             	sub    esp,0x24
c000ebb1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ebb5:	0f 20 c2             	mov    edx,cr0
c000ebb8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ebbc:	0f 20 d7             	mov    edi,cr2
c000ebbf:	0f 20 de             	mov    esi,cr3
c000ebc2:	0f 20 e5             	mov    ebp,cr4
c000ebc5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000ebc8:	68 56 49 02 c0       	push   0xc0024956
c000ebcd:	e8 e1 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ebd2:	59                   	pop    ecx
c000ebd3:	58                   	pop    eax
c000ebd4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ebd7:	68 61 49 02 c0       	push   0xc0024961
c000ebdc:	e8 d2 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ebe1:	58                   	pop    eax
c000ebe2:	5a                   	pop    edx
c000ebe3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ebe6:	68 6c 49 02 c0       	push   0xc002496c
c000ebeb:	e8 c3 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ebf0:	59                   	pop    ecx
c000ebf1:	58                   	pop    eax
c000ebf2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ebf5:	68 77 49 02 c0       	push   0xc0024977
c000ebfa:	e8 b4 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ec04:	68 82 49 02 c0       	push   0xc0024982
c000ec09:	e8 a5 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec0e:	59                   	pop    ecx
c000ec0f:	58                   	pop    eax
c000ec10:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ec13:	68 8d 49 02 c0       	push   0xc002498d
c000ec18:	e8 96 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec1d:	58                   	pop    eax
c000ec1e:	5a                   	pop    edx
c000ec1f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ec22:	68 98 49 02 c0       	push   0xc0024998
c000ec27:	e8 87 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec2c:	59                   	pop    ecx
c000ec2d:	58                   	pop    eax
c000ec2e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ec31:	68 a3 49 02 c0       	push   0xc00249a3
c000ec36:	e8 78 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec3b:	58                   	pop    eax
c000ec3c:	5a                   	pop    edx
c000ec3d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ec40:	68 ae 49 02 c0       	push   0xc00249ae
c000ec45:	e8 69 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec4a:	59                   	pop    ecx
c000ec4b:	58                   	pop    eax
c000ec4c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ec4f:	68 bd 49 02 c0       	push   0xc00249bd
c000ec54:	e8 5a e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec59:	58                   	pop    eax
c000ec5a:	5a                   	pop    edx
c000ec5b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ec5e:	68 c8 49 02 c0       	push   0xc00249c8
c000ec63:	e8 4b e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec68:	59                   	pop    ecx
c000ec69:	58                   	pop    eax
c000ec6a:	57                   	push   edi
c000ec6b:	68 d3 49 02 c0       	push   0xc00249d3
c000ec70:	e8 3e e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec75:	58                   	pop    eax
c000ec76:	5a                   	pop    edx
c000ec77:	56                   	push   esi
c000ec78:	68 de 49 02 c0       	push   0xc00249de
c000ec7d:	e8 31 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec82:	59                   	pop    ecx
c000ec83:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ec88:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec8e:	e8 2a be ff ff       	call   c000aabd <setActiveTerminal(VgaText*)>
c000ec93:	58                   	pop    eax
c000ec94:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ec97:	5a                   	pop    edx
c000ec98:	c1 e0 05             	shl    eax,0x5
c000ec9b:	05 60 6f 02 c0       	add    eax,0xc0026f60
c000eca0:	50                   	push   eax
c000eca1:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000eca6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecac:	e8 19 c3 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ecb1:	59                   	pop    ecx
c000ecb2:	58                   	pop    eax
c000ecb3:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ecb8:	68 e9 49 02 c0       	push   0xc00249e9
c000ecbd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecc3:	e8 02 c3 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ecc8:	58                   	pop    eax
c000ecc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ecce:	5a                   	pop    edx
c000eccf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ecd2:	83 c0 0c             	add    eax,0xc
c000ecd5:	50                   	push   eax
c000ecd6:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ecdb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ece1:	e8 e4 c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ece6:	59                   	pop    ecx
c000ece7:	58                   	pop    eax
c000ece8:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000eced:	68 f2 49 02 c0       	push   0xc00249f2
c000ecf2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecf8:	e8 cd c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ecfd:	58                   	pop    eax
c000ecfe:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ed03:	5a                   	pop    edx
c000ed04:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed0d:	e8 72 c2 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ed12:	59                   	pop    ecx
c000ed13:	58                   	pop    eax
c000ed14:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ed19:	68 fa 49 02 c0       	push   0xc00249fa
c000ed1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed24:	e8 a1 c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ed29:	58                   	pop    eax
c000ed2a:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ed2f:	5a                   	pop    edx
c000ed30:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ed33:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed39:	e8 46 c2 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ed3e:	59                   	pop    ecx
c000ed3f:	58                   	pop    eax
c000ed40:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ed45:	68 02 4a 02 c0       	push   0xc0024a02
c000ed4a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed50:	e8 75 c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ed55:	58                   	pop    eax
c000ed56:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ed5b:	5a                   	pop    edx
c000ed5c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ed5f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed65:	e8 1a c2 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ed6a:	59                   	pop    ecx
c000ed6b:	58                   	pop    eax
c000ed6c:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ed71:	68 0a 4a 02 c0       	push   0xc0024a0a
c000ed76:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed7c:	e8 49 c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ed81:	58                   	pop    eax
c000ed82:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ed87:	5a                   	pop    edx
c000ed88:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000ed8b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed91:	e8 ee c1 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ed96:	59                   	pop    ecx
c000ed97:	58                   	pop    eax
c000ed98:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ed9d:	68 12 4a 02 c0       	push   0xc0024a12
c000eda2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eda8:	e8 1d c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000edad:	58                   	pop    eax
c000edae:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000edb3:	5a                   	pop    edx
c000edb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000edb7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edbd:	e8 c2 c1 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000edc2:	59                   	pop    ecx
c000edc3:	58                   	pop    eax
c000edc4:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000edc9:	68 1a 4a 02 c0       	push   0xc0024a1a
c000edce:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edd4:	e8 f1 c1 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000edd9:	58                   	pop    eax
c000edda:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000eddf:	5a                   	pop    edx
c000ede0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000ede3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ede9:	e8 96 c1 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000edee:	59                   	pop    ecx
c000edef:	58                   	pop    eax
c000edf0:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000edf5:	68 22 4a 02 c0       	push   0xc0024a22
c000edfa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee00:	e8 c5 c1 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ee05:	58                   	pop    eax
c000ee06:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ee0b:	5a                   	pop    edx
c000ee0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ee10:	52                   	push   edx
c000ee11:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee17:	e8 68 c1 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ee1c:	59                   	pop    ecx
c000ee1d:	58                   	pop    eax
c000ee1e:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ee23:	68 2b 4a 02 c0       	push   0xc0024a2b
c000ee28:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee2e:	e8 97 c1 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ee33:	58                   	pop    eax
c000ee34:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ee39:	5a                   	pop    edx
c000ee3a:	57                   	push   edi
c000ee3b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee41:	e8 3e c1 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ee46:	59                   	pop    ecx
c000ee47:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ee4c:	5f                   	pop    edi
c000ee4d:	68 33 4a 02 c0       	push   0xc0024a33
c000ee52:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee58:	e8 6d c1 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ee5d:	58                   	pop    eax
c000ee5e:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ee63:	5a                   	pop    edx
c000ee64:	56                   	push   esi
c000ee65:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee6b:	e8 14 c1 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ee70:	59                   	pop    ecx
c000ee71:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ee76:	5e                   	pop    esi
c000ee77:	68 3b 4a 02 c0       	push   0xc0024a3b
c000ee7c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee82:	e8 43 c1 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ee87:	5f                   	pop    edi
c000ee88:	58                   	pop    eax
c000ee89:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ee8e:	55                   	push   ebp
c000ee8f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee95:	e8 ea c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ee9a:	58                   	pop    eax
c000ee9b:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000eea0:	5a                   	pop    edx
c000eea1:	68 43 4a 02 c0       	push   0xc0024a43
c000eea6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeac:	e8 19 c1 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000eeb1:	0f 21 c0             	mov    eax,db0
c000eeb4:	59                   	pop    ecx
c000eeb5:	5e                   	pop    esi
c000eeb6:	50                   	push   eax
c000eeb7:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000eebc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eec2:	e8 bd c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000eec7:	5f                   	pop    edi
c000eec8:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000eecd:	5d                   	pop    ebp
c000eece:	68 4c 4a 02 c0       	push   0xc0024a4c
c000eed3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eed9:	e8 ec c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000eede:	0f 21 c8             	mov    eax,db1
c000eee1:	5a                   	pop    edx
c000eee2:	59                   	pop    ecx
c000eee3:	50                   	push   eax
c000eee4:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000eee9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeef:	e8 90 c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000eef4:	5e                   	pop    esi
c000eef5:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000eefa:	5f                   	pop    edi
c000eefb:	68 54 4a 02 c0       	push   0xc0024a54
c000ef00:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef06:	e8 bf c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ef0b:	0f 21 d0             	mov    eax,db2
c000ef0e:	5d                   	pop    ebp
c000ef0f:	5a                   	pop    edx
c000ef10:	50                   	push   eax
c000ef11:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ef16:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef1c:	e8 63 c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ef21:	59                   	pop    ecx
c000ef22:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ef27:	5e                   	pop    esi
c000ef28:	68 5c 4a 02 c0       	push   0xc0024a5c
c000ef2d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef33:	e8 92 c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ef38:	0f 21 d8             	mov    eax,db3
c000ef3b:	5f                   	pop    edi
c000ef3c:	5d                   	pop    ebp
c000ef3d:	50                   	push   eax
c000ef3e:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ef43:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef49:	e8 36 c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ef4e:	58                   	pop    eax
c000ef4f:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ef54:	5a                   	pop    edx
c000ef55:	68 64 4a 02 c0       	push   0xc0024a64
c000ef5a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef60:	e8 65 c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ef65:	0f 21 f0             	mov    eax,db6
c000ef68:	59                   	pop    ecx
c000ef69:	5e                   	pop    esi
c000ef6a:	50                   	push   eax
c000ef6b:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ef70:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef76:	e8 09 c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ef7b:	5f                   	pop    edi
c000ef7c:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ef81:	5d                   	pop    ebp
c000ef82:	68 6c 4a 02 c0       	push   0xc0024a6c
c000ef87:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef8d:	e8 38 c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ef92:	0f 21 f8             	mov    eax,db7
c000ef95:	5a                   	pop    edx
c000ef96:	59                   	pop    ecx
c000ef97:	50                   	push   eax
c000ef98:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000ef9d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efa3:	e8 dc bf ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000efa8:	5e                   	pop    esi
c000efa9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000efac:	e8 48 8a 00 00       	call   c00179f9 <Thr::getDriverNameFromAddress(unsigned long)>
c000efb1:	83 c4 10             	add    esp,0x10
c000efb4:	85 c0                	test   eax,eax
c000efb6:	74 7d                	je     c000f035 <displayDebugInfo(regs*)+0x48b>
c000efb8:	89 c6                	mov    esi,eax
c000efba:	50                   	push   eax
c000efbb:	50                   	push   eax
c000efbc:	56                   	push   esi
c000efbd:	68 74 4a 02 c0       	push   0xc0024a74
c000efc2:	e8 ec dc ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000efc7:	5a                   	pop    edx
c000efc8:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000efcd:	59                   	pop    ecx
c000efce:	68 82 4a 02 c0       	push   0xc0024a82
c000efd3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efd9:	e8 ec bf ff ff       	call   c000afca <VgaText::puts(char const*)>
c000efde:	5f                   	pop    edi
c000efdf:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000efe4:	5d                   	pop    ebp
c000efe5:	56                   	push   esi
c000efe6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efec:	e8 d9 bf ff ff       	call   c000afca <VgaText::puts(char const*)>
c000eff1:	58                   	pop    eax
c000eff2:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000eff7:	5a                   	pop    edx
c000eff8:	68 8e 4a 02 c0       	push   0xc0024a8e
c000effd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f003:	e8 c2 bf ff ff       	call   c000afca <VgaText::puts(char const*)>
c000f008:	59                   	pop    ecx
c000f009:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000f00e:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f014:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f017:	e8 14 8a 00 00       	call   c0017a30 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f01c:	5b                   	pop    ebx
c000f01d:	5d                   	pop    ebp
c000f01e:	50                   	push   eax
c000f01f:	57                   	push   edi
c000f020:	e8 5f bf ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000f025:	58                   	pop    eax
c000f026:	5a                   	pop    edx
c000f027:	56                   	push   esi
c000f028:	68 9a 4a 02 c0       	push   0xc0024a9a
c000f02d:	e8 81 dc ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f032:	83 c4 10             	add    esp,0x10
c000f035:	fa                   	cli    
c000f036:	f4                   	hlt    
c000f037:	eb fe                	jmp    c000f037 <displayDebugInfo(regs*)+0x48d>

c000f039 <x87EmulHandler(regs*, void*)>:
c000f039:	83 ec 0c             	sub    esp,0xc
c000f03c:	0f 20 c2             	mov    edx,cr0
c000f03f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f044:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f048:	75 4b                	jne    c000f095 <x87EmulHandler(regs*, void*)+0x5c>
c000f04a:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000f04f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f055:	85 c0                	test   eax,eax
c000f057:	74 05                	je     c000f05e <x87EmulHandler(regs*, void*)+0x25>
c000f059:	83 e2 08             	and    edx,0x8
c000f05c:	75 17                	jne    c000f075 <x87EmulHandler(regs*, void*)+0x3c>
c000f05e:	83 ec 0c             	sub    esp,0xc
c000f061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f065:	e8 3c ae 00 00       	call   c0019ea6 <Vm::x87Handler(regs*)>
c000f06a:	83 c4 10             	add    esp,0x10
c000f06d:	84 c0                	test   al,al
c000f06f:	74 24                	je     c000f095 <x87EmulHandler(regs*, void*)+0x5c>
c000f071:	83 c4 0c             	add    esp,0xc
c000f074:	c3                   	ret    
c000f075:	83 ec 0c             	sub    esp,0xc
c000f078:	68 c0 4a 02 c0       	push   0xc0024ac0
c000f07d:	e8 31 dc ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f082:	0f 06                	clts   
c000f084:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f089:	83 c4 10             	add    esp,0x10
c000f08c:	a3 48 7c 02 c0       	mov    ds:0xc0027c48,eax
c000f091:	83 c4 0c             	add    esp,0xc
c000f094:	c3                   	ret    
c000f095:	83 ec 0c             	sub    esp,0xc
c000f098:	68 aa 4a 02 c0       	push   0xc0024aaa
c000f09d:	e8 11 dc ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f0a2:	5a                   	pop    edx
c000f0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0a7:	e8 fe fa ff ff       	call   c000ebaa <displayDebugInfo(regs*)>

c000f0ac <gpFault(regs*, void*)>:
c000f0ac:	53                   	push   ebx
c000f0ad:	83 ec 14             	sub    esp,0x14
c000f0b0:	c7 05 44 7c 02 c0 62 93 01 c0 	mov    DWORD PTR ds:0xc0027c44,0xc0019362
c000f0ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f0be:	53                   	push   ebx
c000f0bf:	e8 9e a2 00 00       	call   c0019362 <Vm::faultHandler(regs*)>
c000f0c4:	83 c4 10             	add    esp,0x10
c000f0c7:	84 c0                	test   al,al
c000f0c9:	74 05                	je     c000f0d0 <gpFault(regs*, void*)+0x24>
c000f0cb:	83 c4 08             	add    esp,0x8
c000f0ce:	5b                   	pop    ebx
c000f0cf:	c3                   	ret    
c000f0d0:	83 ec 0c             	sub    esp,0xc
c000f0d3:	68 cd 4a 02 c0       	push   0xc0024acd
c000f0d8:	e8 d6 db ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f0dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0e0:	e8 c5 fa ff ff       	call   c000ebaa <displayDebugInfo(regs*)>

c000f0e5 <pgFault(regs*, void*)>:
c000f0e5:	53                   	push   ebx
c000f0e6:	83 ec 10             	sub    esp,0x10
c000f0e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f0ed:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f0f0:	68 e8 4a 02 c0       	push   0xc0024ae8
c000f0f5:	e8 b9 db ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f0fa:	0f 20 d0             	mov    eax,cr2
c000f0fd:	5a                   	pop    edx
c000f0fe:	59                   	pop    ecx
c000f0ff:	50                   	push   eax
c000f100:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f105:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f108:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f10e:	e8 1b d7 ff ff       	call   c000c82e <VAS::tryLoadBackOffDisk(unsigned long)>
c000f113:	83 c4 10             	add    esp,0x10
c000f116:	84 c0                	test   al,al
c000f118:	74 05                	je     c000f11f <pgFault(regs*, void*)+0x3a>
c000f11a:	83 c4 08             	add    esp,0x8
c000f11d:	5b                   	pop    ebx
c000f11e:	c3                   	ret    
c000f11f:	83 ec 0c             	sub    esp,0xc
c000f122:	68 fd 4a 02 c0       	push   0xc0024afd
c000f127:	e8 87 db ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f12c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f12f:	e8 76 fa ff ff       	call   c000ebaa <displayDebugInfo(regs*)>

c000f134 <otherISRHandler(regs*, void*)>:
c000f134:	53                   	push   ebx
c000f135:	83 ec 0c             	sub    esp,0xc
c000f138:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f13c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f13f:	50                   	push   eax
c000f140:	50                   	push   eax
c000f141:	68 0a 4b 02 c0       	push   0xc0024b0a
c000f146:	e8 68 db ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f14b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f14e:	e8 57 fa ff ff       	call   c000ebaa <displayDebugInfo(regs*)>

c000f153 <opcodeFault(regs*, void*)>:
c000f153:	55                   	push   ebp
c000f154:	89 e5                	mov    ebp,esp
c000f156:	56                   	push   esi
c000f157:	53                   	push   ebx
c000f158:	83 ec 30             	sub    esp,0x30
c000f15b:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000f160:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f166:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f16c:	84 c0                	test   al,al
c000f16e:	74 24                	je     c000f194 <opcodeFault(regs*, void*)+0x41>
c000f170:	83 ec 0c             	sub    esp,0xc
c000f173:	68 28 4b 02 c0       	push   0xc0024b28
c000f178:	e8 36 db ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f17d:	83 c4 10             	add    esp,0x10
c000f180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f183:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f186:	8d 50 19             	lea    edx,[eax+0x19]
c000f189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f18c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f18f:	e9 7b 03 00 00       	jmp    c000f50f <opcodeFault(regs*, void*)+0x3bc>
c000f194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f197:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f19a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f19d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f1a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1a7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f1aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1ad:	8a 00                	mov    al,BYTE PTR [eax]
c000f1af:	3c f0                	cmp    al,0xf0
c000f1b1:	75 17                	jne    c000f1ca <opcodeFault(regs*, void*)+0x77>
c000f1b3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f1b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1bc:	8d 50 01             	lea    edx,[eax+0x1]
c000f1bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1c5:	e9 d6 00 00 00       	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x14d>
c000f1ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1cd:	8a 00                	mov    al,BYTE PTR [eax]
c000f1cf:	3c f2                	cmp    al,0xf2
c000f1d1:	74 09                	je     c000f1dc <opcodeFault(regs*, void*)+0x89>
c000f1d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1d6:	8a 00                	mov    al,BYTE PTR [eax]
c000f1d8:	3c f3                	cmp    al,0xf3
c000f1da:	75 1b                	jne    c000f1f7 <opcodeFault(regs*, void*)+0xa4>
c000f1dc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f1e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f1e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1e9:	8d 50 01             	lea    edx,[eax+0x1]
c000f1ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1f2:	e9 a9 00 00 00       	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x14d>
c000f1f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1fa:	8a 00                	mov    al,BYTE PTR [eax]
c000f1fc:	3c 66                	cmp    al,0x66
c000f1fe:	75 1b                	jne    c000f21b <opcodeFault(regs*, void*)+0xc8>
c000f200:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f204:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f20a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f20d:	8d 50 01             	lea    edx,[eax+0x1]
c000f210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f213:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f216:	e9 85 00 00 00       	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x14d>
c000f21b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f21e:	8a 00                	mov    al,BYTE PTR [eax]
c000f220:	3c 67                	cmp    al,0x67
c000f222:	75 18                	jne    c000f23c <opcodeFault(regs*, void*)+0xe9>
c000f224:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f228:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f22b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f22e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f231:	8d 50 01             	lea    edx,[eax+0x1]
c000f234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f237:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f23a:	eb 64                	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x14d>
c000f23c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f23f:	8a 00                	mov    al,BYTE PTR [eax]
c000f241:	3c 2e                	cmp    al,0x2e
c000f243:	74 09                	je     c000f24e <opcodeFault(regs*, void*)+0xfb>
c000f245:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f248:	8a 00                	mov    al,BYTE PTR [eax]
c000f24a:	3c 3e                	cmp    al,0x3e
c000f24c:	75 18                	jne    c000f266 <opcodeFault(regs*, void*)+0x113>
c000f24e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f252:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f258:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f25b:	8d 50 01             	lea    edx,[eax+0x1]
c000f25e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f261:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f264:	eb 3a                	jmp    c000f2a0 <opcodeFault(regs*, void*)+0x14d>
c000f266:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f269:	8a 00                	mov    al,BYTE PTR [eax]
c000f26b:	3c 36                	cmp    al,0x36
c000f26d:	74 1b                	je     c000f28a <opcodeFault(regs*, void*)+0x137>
c000f26f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f272:	8a 00                	mov    al,BYTE PTR [eax]
c000f274:	3c 26                	cmp    al,0x26
c000f276:	74 12                	je     c000f28a <opcodeFault(regs*, void*)+0x137>
c000f278:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f27b:	8a 00                	mov    al,BYTE PTR [eax]
c000f27d:	3c 64                	cmp    al,0x64
c000f27f:	74 09                	je     c000f28a <opcodeFault(regs*, void*)+0x137>
c000f281:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f284:	8a 00                	mov    al,BYTE PTR [eax]
c000f286:	3c 65                	cmp    al,0x65
c000f288:	75 16                	jne    c000f2a0 <opcodeFault(regs*, void*)+0x14d>
c000f28a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f28e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f294:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f297:	8d 50 01             	lea    edx,[eax+0x1]
c000f29a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f29d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2a3:	8a 00                	mov    al,BYTE PTR [eax]
c000f2a5:	3c 0f                	cmp    al,0xf
c000f2a7:	0f 85 8d 01 00 00    	jne    c000f43a <opcodeFault(regs*, void*)+0x2e7>
c000f2ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2b0:	40                   	inc    eax
c000f2b1:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b3:	3c c7                	cmp    al,0xc7
c000f2b5:	0f 85 7f 01 00 00    	jne    c000f43a <opcodeFault(regs*, void*)+0x2e7>
c000f2bb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2c4:	8d 50 01             	lea    edx,[eax+0x1]
c000f2c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2cd:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f2d0:	50                   	push   eax
c000f2d1:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f2d4:	50                   	push   eax
c000f2d5:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f2d8:	50                   	push   eax
c000f2d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f2dc:	e8 97 4c 00 00       	call   c0013f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f2e1:	83 c4 10             	add    esp,0x10
c000f2e4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f2e7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f2ea:	83 f0 01             	xor    eax,0x1
c000f2ed:	84 c0                	test   al,al
c000f2ef:	0f 84 45 01 00 00    	je     c000f43a <opcodeFault(regs*, void*)+0x2e7>
c000f2f5:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f2f8:	3c 01                	cmp    al,0x1
c000f2fa:	0f 85 3a 01 00 00    	jne    c000f43a <opcodeFault(regs*, void*)+0x2e7>
c000f300:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f303:	83 f0 01             	xor    eax,0x1
c000f306:	84 c0                	test   al,al
c000f308:	0f 84 2c 01 00 00    	je     c000f43a <opcodeFault(regs*, void*)+0x2e7>
c000f30e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f311:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f314:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f317:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f31e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f321:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f324:	89 c2                	mov    edx,eax
c000f326:	b8 00 00 00 00       	mov    eax,0x0
c000f32b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f32e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f334:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f337:	ba 00 00 00 00       	mov    edx,0x0
c000f33c:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f33f:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f345:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f348:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f34b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f352:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f355:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f358:	89 c2                	mov    edx,eax
c000f35a:	b8 00 00 00 00       	mov    eax,0x0
c000f35f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f362:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f368:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f36b:	ba 00 00 00 00       	mov    edx,0x0
c000f370:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f373:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f376:	fa                   	cli    
c000f377:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000f37c:	40                   	inc    eax
c000f37d:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000f382:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f385:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f388:	8b 00                	mov    eax,DWORD PTR [eax]
c000f38a:	89 c1                	mov    ecx,eax
c000f38c:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f38f:	89 cb                	mov    ebx,ecx
c000f391:	89 d0                	mov    eax,edx
c000f393:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f396:	89 c6                	mov    esi,eax
c000f398:	89 f0                	mov    eax,esi
c000f39a:	09 d8                	or     eax,ebx
c000f39c:	85 c0                	test   eax,eax
c000f39e:	75 21                	jne    c000f3c1 <opcodeFault(regs*, void*)+0x26e>
c000f3a0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f3a3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f3a6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f3a9:	89 01                	mov    DWORD PTR [ecx],eax
c000f3ab:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f3ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f3b4:	83 c8 40             	or     eax,0x40
c000f3b7:	89 c2                	mov    edx,eax
c000f3b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3bc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f3bf:	eb 3e                	jmp    c000f3ff <opcodeFault(regs*, void*)+0x2ac>
c000f3c1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f3c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f3c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3c9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f3cc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f3cf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f3d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3d5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f3d8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f3db:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f3de:	89 d0                	mov    eax,edx
c000f3e0:	31 d2                	xor    edx,edx
c000f3e2:	89 c3                	mov    ebx,eax
c000f3e4:	89 d6                	mov    esi,edx
c000f3e6:	89 da                	mov    edx,ebx
c000f3e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3eb:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f3ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f3f4:	83 e0 bf             	and    eax,0xffffffbf
c000f3f7:	89 c2                	mov    edx,eax
c000f3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3fc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f3ff:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000f404:	48                   	dec    eax
c000f405:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000f40a:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000f40f:	85 c0                	test   eax,eax
c000f411:	75 01                	jne    c000f414 <opcodeFault(regs*, void*)+0x2c1>
c000f413:	fb                   	sti    
c000f414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f417:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f41a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f41d:	01 c2                	add    edx,eax
c000f41f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f422:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f425:	83 ec 0c             	sub    esp,0xc
c000f428:	68 4b 4b 02 c0       	push   0xc0024b4b
c000f42d:	e8 81 d8 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f432:	83 c4 10             	add    esp,0x10
c000f435:	e9 d5 00 00 00       	jmp    c000f50f <opcodeFault(regs*, void*)+0x3bc>
c000f43a:	83 ec 0c             	sub    esp,0xc
c000f43d:	68 5e 4b 02 c0       	push   0xc0024b5e
c000f442:	e8 6c d8 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f447:	83 c4 10             	add    esp,0x10
c000f44a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f44d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f453:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f456:	c1 e0 04             	shl    eax,0x4
c000f459:	01 d0                	add    eax,edx
c000f45b:	83 c0 03             	add    eax,0x3
c000f45e:	8a 00                	mov    al,BYTE PTR [eax]
c000f460:	0f b6 d8             	movzx  ebx,al
c000f463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f466:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f46c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f46f:	c1 e0 04             	shl    eax,0x4
c000f472:	01 d0                	add    eax,edx
c000f474:	83 c0 02             	add    eax,0x2
c000f477:	8a 00                	mov    al,BYTE PTR [eax]
c000f479:	0f b6 c8             	movzx  ecx,al
c000f47c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f47f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f485:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f488:	c1 e0 04             	shl    eax,0x4
c000f48b:	01 d0                	add    eax,edx
c000f48d:	40                   	inc    eax
c000f48e:	8a 00                	mov    al,BYTE PTR [eax]
c000f490:	0f b6 d0             	movzx  edx,al
c000f493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f496:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f49c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f49f:	c1 e0 04             	shl    eax,0x4
c000f4a2:	01 f0                	add    eax,esi
c000f4a4:	8a 00                	mov    al,BYTE PTR [eax]
c000f4a6:	0f b6 c0             	movzx  eax,al
c000f4a9:	83 ec 0c             	sub    esp,0xc
c000f4ac:	53                   	push   ebx
c000f4ad:	51                   	push   ecx
c000f4ae:	52                   	push   edx
c000f4af:	50                   	push   eax
c000f4b0:	68 70 4b 02 c0       	push   0xc0024b70
c000f4b5:	e8 f9 d7 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f4ba:	83 c4 20             	add    esp,0x20
c000f4bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4c3:	83 c0 03             	add    eax,0x3
c000f4c6:	8a 00                	mov    al,BYTE PTR [eax]
c000f4c8:	0f b6 d8             	movzx  ebx,al
c000f4cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4d1:	83 c0 02             	add    eax,0x2
c000f4d4:	8a 00                	mov    al,BYTE PTR [eax]
c000f4d6:	0f b6 c8             	movzx  ecx,al
c000f4d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4df:	40                   	inc    eax
c000f4e0:	8a 00                	mov    al,BYTE PTR [eax]
c000f4e2:	0f b6 d0             	movzx  edx,al
c000f4e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4eb:	8a 00                	mov    al,BYTE PTR [eax]
c000f4ed:	0f b6 c0             	movzx  eax,al
c000f4f0:	83 ec 0c             	sub    esp,0xc
c000f4f3:	53                   	push   ebx
c000f4f4:	51                   	push   ecx
c000f4f5:	52                   	push   edx
c000f4f6:	50                   	push   eax
c000f4f7:	68 98 4b 02 c0       	push   0xc0024b98
c000f4fc:	e8 b2 d7 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f501:	83 c4 20             	add    esp,0x20
c000f504:	83 ec 0c             	sub    esp,0xc
c000f507:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f50a:	e8 9b f6 ff ff       	call   c000ebaa <displayDebugInfo(regs*)>
c000f50f:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f512:	5b                   	pop    ebx
c000f513:	5e                   	pop    esi
c000f514:	5d                   	pop    ebp
c000f515:	c3                   	ret    

c000f516 <displayProgramFault(char const*)>:
c000f516:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f51b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f51e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f524:	85 c0                	test   eax,eax
c000f526:	74 15                	je     c000f53d <displayProgramFault(char const*)+0x27>
c000f528:	83 ec 0c             	sub    esp,0xc
c000f52b:	6a 04                	push   0x4
c000f52d:	6a 0f                	push   0xf
c000f52f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f533:	50                   	push   eax
c000f534:	e8 8d b7 ff ff       	call   c000acc6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f539:	83 c4 1c             	add    esp,0x1c
c000f53c:	c3                   	ret    
c000f53d:	c3                   	ret    

c000f53e <setupInterruptController()>:
c000f53e:	55                   	push   ebp
c000f53f:	89 e5                	mov    ebp,esp
c000f541:	53                   	push   ebx
c000f542:	83 ec 24             	sub    esp,0x24
c000f545:	b8 00 00 00 00       	mov    eax,0x0
c000f54a:	85 c0                	test   eax,eax
c000f54c:	0f 95 c0             	setne  al
c000f54f:	84 c0                	test   al,al
c000f551:	74 5b                	je     c000f5ae <setupInterruptController()+0x70>
c000f553:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f55a:	83 ec 0c             	sub    esp,0xc
c000f55d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f560:	e8 5e a4 ff ff       	call   c00099c3 <malloc>
c000f565:	83 c4 10             	add    esp,0x10
c000f568:	89 c3                	mov    ebx,eax
c000f56a:	83 ec 0c             	sub    esp,0xc
c000f56d:	53                   	push   ebx
c000f56e:	e8 f3 1d 01 00       	call   c0021366 <APIC::APIC()>
c000f573:	83 c4 10             	add    esp,0x10
c000f576:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f579:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f57c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f57f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f581:	83 c0 08             	add    eax,0x8
c000f584:	8b 00                	mov    eax,DWORD PTR [eax]
c000f586:	6a 00                	push   0x0
c000f588:	6a 00                	push   0x0
c000f58a:	6a 00                	push   0x0
c000f58c:	52                   	push   edx
c000f58d:	ff d0                	call   eax
c000f58f:	83 c4 10             	add    esp,0x10
c000f592:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000f597:	83 ec 08             	sub    esp,0x8
c000f59a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f59d:	50                   	push   eax
c000f59e:	e8 97 eb ff ff       	call   c000e13a <Device::addChild(Device*)>
c000f5a3:	83 c4 10             	add    esp,0x10
c000f5a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f5a9:	e9 79 03 00 00       	jmp    c000f927 <setupInterruptController()+0x3e9>
c000f5ae:	a0 20 84 02 c0       	mov    al,ds:0xc0028420
c000f5b3:	84 c0                	test   al,al
c000f5b5:	75 14                	jne    c000f5cb <setupInterruptController()+0x8d>
c000f5b7:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000f5bc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f5c2:	83 e2 fe             	and    edx,0xfffffffe
c000f5c5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f5cb:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000f5d0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f5d6:	83 e0 01             	and    eax,0x1
c000f5d9:	84 c0                	test   al,al
c000f5db:	0f 95 c0             	setne  al
c000f5de:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f5e1:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f5e8:	83 ec 0c             	sub    esp,0xc
c000f5eb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f5ee:	e8 d0 a3 ff ff       	call   c00099c3 <malloc>
c000f5f3:	83 c4 10             	add    esp,0x10
c000f5f6:	89 c3                	mov    ebx,eax
c000f5f8:	83 ec 0c             	sub    esp,0xc
c000f5fb:	53                   	push   ebx
c000f5fc:	e8 bd 22 01 00       	call   c00218be <PIC::PIC()>
c000f601:	83 c4 10             	add    esp,0x10
c000f604:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f607:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f60a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f60d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60f:	83 c0 08             	add    eax,0x8
c000f612:	8b 00                	mov    eax,DWORD PTR [eax]
c000f614:	6a 00                	push   0x0
c000f616:	6a 00                	push   0x0
c000f618:	6a 00                	push   0x0
c000f61a:	52                   	push   edx
c000f61b:	ff d0                	call   eax
c000f61d:	83 c4 10             	add    esp,0x10
c000f620:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f624:	74 73                	je     c000f699 <setupInterruptController()+0x15b>
c000f626:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f629:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f62c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f62e:	83 c0 0c             	add    eax,0xc
c000f631:	8b 00                	mov    eax,DWORD PTR [eax]
c000f633:	6a 00                	push   0x0
c000f635:	6a 00                	push   0x0
c000f637:	6a 00                	push   0x0
c000f639:	52                   	push   edx
c000f63a:	ff d0                	call   eax
c000f63c:	83 c4 10             	add    esp,0x10
c000f63f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f643:	74 15                	je     c000f65a <setupInterruptController()+0x11c>
c000f645:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f648:	8b 00                	mov    eax,DWORD PTR [eax]
c000f64a:	83 c0 04             	add    eax,0x4
c000f64d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f64f:	83 ec 0c             	sub    esp,0xc
c000f652:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f655:	ff d0                	call   eax
c000f657:	83 c4 10             	add    esp,0x10
c000f65a:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f661:	83 ec 0c             	sub    esp,0xc
c000f664:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f667:	e8 57 a3 ff ff       	call   c00099c3 <malloc>
c000f66c:	83 c4 10             	add    esp,0x10
c000f66f:	89 c3                	mov    ebx,eax
c000f671:	83 ec 0c             	sub    esp,0xc
c000f674:	53                   	push   ebx
c000f675:	e8 ec 1c 01 00       	call   c0021366 <APIC::APIC()>
c000f67a:	83 c4 10             	add    esp,0x10
c000f67d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f680:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f683:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f686:	8b 00                	mov    eax,DWORD PTR [eax]
c000f688:	83 c0 08             	add    eax,0x8
c000f68b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68d:	6a 00                	push   0x0
c000f68f:	6a 00                	push   0x0
c000f691:	6a 00                	push   0x0
c000f693:	52                   	push   edx
c000f694:	ff d0                	call   eax
c000f696:	83 c4 10             	add    esp,0x10
c000f699:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c000f69e:	83 ec 08             	sub    esp,0x8
c000f6a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6a4:	50                   	push   eax
c000f6a5:	e8 90 ea ff ff       	call   c000e13a <Device::addChild(Device*)>
c000f6aa:	83 c4 10             	add    esp,0x10
c000f6ad:	c7 05 48 7c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027c48,0x0
c000f6b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6bc:	83 c0 24             	add    eax,0x24
c000f6bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6c1:	6a 00                	push   0x0
c000f6c3:	68 34 f1 00 c0       	push   0xc000f134
c000f6c8:	6a 00                	push   0x0
c000f6ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6cd:	ff d0                	call   eax
c000f6cf:	83 c4 10             	add    esp,0x10
c000f6d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6d7:	83 c0 24             	add    eax,0x24
c000f6da:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6dc:	6a 00                	push   0x0
c000f6de:	68 34 f1 00 c0       	push   0xc000f134
c000f6e3:	6a 01                	push   0x1
c000f6e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6e8:	ff d0                	call   eax
c000f6ea:	83 c4 10             	add    esp,0x10
c000f6ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6f2:	83 c0 24             	add    eax,0x24
c000f6f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6f7:	6a 00                	push   0x0
c000f6f9:	68 07 ea 00 c0       	push   0xc000ea07
c000f6fe:	6a 02                	push   0x2
c000f700:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f703:	ff d0                	call   eax
c000f705:	83 c4 10             	add    esp,0x10
c000f708:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f70b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f70d:	83 c0 24             	add    eax,0x24
c000f710:	8b 00                	mov    eax,DWORD PTR [eax]
c000f712:	6a 00                	push   0x0
c000f714:	68 34 f1 00 c0       	push   0xc000f134
c000f719:	6a 03                	push   0x3
c000f71b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f71e:	ff d0                	call   eax
c000f720:	83 c4 10             	add    esp,0x10
c000f723:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f726:	8b 00                	mov    eax,DWORD PTR [eax]
c000f728:	83 c0 24             	add    eax,0x24
c000f72b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f72d:	6a 00                	push   0x0
c000f72f:	68 34 f1 00 c0       	push   0xc000f134
c000f734:	6a 04                	push   0x4
c000f736:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f739:	ff d0                	call   eax
c000f73b:	83 c4 10             	add    esp,0x10
c000f73e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f741:	8b 00                	mov    eax,DWORD PTR [eax]
c000f743:	83 c0 24             	add    eax,0x24
c000f746:	8b 00                	mov    eax,DWORD PTR [eax]
c000f748:	6a 00                	push   0x0
c000f74a:	68 34 f1 00 c0       	push   0xc000f134
c000f74f:	6a 05                	push   0x5
c000f751:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f754:	ff d0                	call   eax
c000f756:	83 c4 10             	add    esp,0x10
c000f759:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f75c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f75e:	83 c0 24             	add    eax,0x24
c000f761:	8b 00                	mov    eax,DWORD PTR [eax]
c000f763:	6a 00                	push   0x0
c000f765:	68 53 f1 00 c0       	push   0xc000f153
c000f76a:	6a 06                	push   0x6
c000f76c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f76f:	ff d0                	call   eax
c000f771:	83 c4 10             	add    esp,0x10
c000f774:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f777:	8b 00                	mov    eax,DWORD PTR [eax]
c000f779:	83 c0 24             	add    eax,0x24
c000f77c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f77e:	6a 00                	push   0x0
c000f780:	68 39 f0 00 c0       	push   0xc000f039
c000f785:	6a 07                	push   0x7
c000f787:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f78a:	ff d0                	call   eax
c000f78c:	83 c4 10             	add    esp,0x10
c000f78f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f792:	8b 00                	mov    eax,DWORD PTR [eax]
c000f794:	83 c0 24             	add    eax,0x24
c000f797:	8b 00                	mov    eax,DWORD PTR [eax]
c000f799:	6a 00                	push   0x0
c000f79b:	68 22 e8 00 c0       	push   0xc000e822
c000f7a0:	6a 08                	push   0x8
c000f7a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7a5:	ff d0                	call   eax
c000f7a7:	83 c4 10             	add    esp,0x10
c000f7aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7af:	83 c0 24             	add    eax,0x24
c000f7b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7b4:	6a 00                	push   0x0
c000f7b6:	68 34 f1 00 c0       	push   0xc000f134
c000f7bb:	6a 09                	push   0x9
c000f7bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7c0:	ff d0                	call   eax
c000f7c2:	83 c4 10             	add    esp,0x10
c000f7c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7ca:	83 c0 24             	add    eax,0x24
c000f7cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7cf:	6a 00                	push   0x0
c000f7d1:	68 34 f1 00 c0       	push   0xc000f134
c000f7d6:	6a 0a                	push   0xa
c000f7d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7db:	ff d0                	call   eax
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e5:	83 c0 24             	add    eax,0x24
c000f7e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7ea:	6a 00                	push   0x0
c000f7ec:	68 34 f1 00 c0       	push   0xc000f134
c000f7f1:	6a 0b                	push   0xb
c000f7f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7f6:	ff d0                	call   eax
c000f7f8:	83 c4 10             	add    esp,0x10
c000f7fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f800:	83 c0 24             	add    eax,0x24
c000f803:	8b 00                	mov    eax,DWORD PTR [eax]
c000f805:	6a 00                	push   0x0
c000f807:	68 34 f1 00 c0       	push   0xc000f134
c000f80c:	6a 0c                	push   0xc
c000f80e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f811:	ff d0                	call   eax
c000f813:	83 c4 10             	add    esp,0x10
c000f816:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f819:	8b 00                	mov    eax,DWORD PTR [eax]
c000f81b:	83 c0 24             	add    eax,0x24
c000f81e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f820:	6a 00                	push   0x0
c000f822:	68 ac f0 00 c0       	push   0xc000f0ac
c000f827:	6a 0d                	push   0xd
c000f829:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f82c:	ff d0                	call   eax
c000f82e:	83 c4 10             	add    esp,0x10
c000f831:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f834:	8b 00                	mov    eax,DWORD PTR [eax]
c000f836:	83 c0 24             	add    eax,0x24
c000f839:	8b 00                	mov    eax,DWORD PTR [eax]
c000f83b:	6a 00                	push   0x0
c000f83d:	68 e5 f0 00 c0       	push   0xc000f0e5
c000f842:	6a 0e                	push   0xe
c000f844:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f847:	ff d0                	call   eax
c000f849:	83 c4 10             	add    esp,0x10
c000f84c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f84f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f851:	83 c0 24             	add    eax,0x24
c000f854:	8b 00                	mov    eax,DWORD PTR [eax]
c000f856:	6a 00                	push   0x0
c000f858:	68 34 f1 00 c0       	push   0xc000f134
c000f85d:	6a 0f                	push   0xf
c000f85f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f862:	ff d0                	call   eax
c000f864:	83 c4 10             	add    esp,0x10
c000f867:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f86a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f86c:	83 c0 24             	add    eax,0x24
c000f86f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f871:	6a 00                	push   0x0
c000f873:	68 34 f1 00 c0       	push   0xc000f134
c000f878:	6a 10                	push   0x10
c000f87a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f87d:	ff d0                	call   eax
c000f87f:	83 c4 10             	add    esp,0x10
c000f882:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f885:	8b 00                	mov    eax,DWORD PTR [eax]
c000f887:	83 c0 24             	add    eax,0x24
c000f88a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f88c:	6a 00                	push   0x0
c000f88e:	68 34 f1 00 c0       	push   0xc000f134
c000f893:	6a 11                	push   0x11
c000f895:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f898:	ff d0                	call   eax
c000f89a:	83 c4 10             	add    esp,0x10
c000f89d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a2:	83 c0 24             	add    eax,0x24
c000f8a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a7:	6a 00                	push   0x0
c000f8a9:	68 34 f1 00 c0       	push   0xc000f134
c000f8ae:	6a 12                	push   0x12
c000f8b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8b3:	ff d0                	call   eax
c000f8b5:	83 c4 10             	add    esp,0x10
c000f8b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8bd:	83 c0 24             	add    eax,0x24
c000f8c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8c2:	6a 00                	push   0x0
c000f8c4:	68 34 f1 00 c0       	push   0xc000f134
c000f8c9:	6a 13                	push   0x13
c000f8cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8ce:	ff d0                	call   eax
c000f8d0:	83 c4 10             	add    esp,0x10
c000f8d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d8:	83 c0 24             	add    eax,0x24
c000f8db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8dd:	6a 00                	push   0x0
c000f8df:	68 34 f1 00 c0       	push   0xc000f134
c000f8e4:	6a 14                	push   0x14
c000f8e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8e9:	ff d0                	call   eax
c000f8eb:	83 c4 10             	add    esp,0x10
c000f8ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f3:	83 c0 24             	add    eax,0x24
c000f8f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f8:	6a 00                	push   0x0
c000f8fa:	68 34 f1 00 c0       	push   0xc000f134
c000f8ff:	6a 1e                	push   0x1e
c000f901:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f904:	ff d0                	call   eax
c000f906:	83 c4 10             	add    esp,0x10
c000f909:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f90c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f90e:	83 c0 24             	add    eax,0x24
c000f911:	8b 00                	mov    eax,DWORD PTR [eax]
c000f913:	6a 00                	push   0x0
c000f915:	68 6f 6a 01 c0       	push   0xc0016a6f
c000f91a:	6a 60                	push   0x60
c000f91c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f91f:	ff d0                	call   eax
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f927:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f92a:	c9                   	leave  
c000f92b:	c3                   	ret    

c000f92c <InterruptController::convertLegacyIRQNumber(int)>:
c000f92c:	55                   	push   ebp
c000f92d:	89 e5                	mov    ebp,esp
c000f92f:	83 ec 08             	sub    esp,0x8
c000f932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f935:	83 ec 0c             	sub    esp,0xc
c000f938:	50                   	push   eax
c000f939:	e8 fc ea ff ff       	call   c000e43a <Device::getName()>
c000f93e:	83 c4 10             	add    esp,0x10
c000f941:	8a 00                	mov    al,BYTE PTR [eax]
c000f943:	3c 41                	cmp    al,0x41
c000f945:	0f 94 c0             	sete   al
c000f948:	84 c0                	test   al,al
c000f94a:	74 28                	je     c000f974 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f94c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f950:	7f 12                	jg     c000f964 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f952:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f955:	05 00 72 02 c0       	add    eax,0xc0027200
c000f95a:	8a 00                	mov    al,BYTE PTR [eax]
c000f95c:	0f b6 c0             	movzx  eax,al
c000f95f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f962:	eb 10                	jmp    c000f974 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f964:	83 ec 0c             	sub    esp,0xc
c000f967:	68 c0 4b 02 c0       	push   0xc0024bc0
c000f96c:	e8 ee 4e 00 00       	call   c001485f <Krnl::panic(char const*)>
c000f971:	83 c4 10             	add    esp,0x10
c000f974:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f977:	c9                   	leave  
c000f978:	c3                   	ret    
c000f979:	90                   	nop

c000f97a <startGUI(void*)>:
c000f97a:	55                   	push   ebp
c000f97b:	89 e5                	mov    ebp,esp
c000f97d:	53                   	push   ebx
c000f97e:	83 ec 04             	sub    esp,0x4
c000f981:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000f986:	48                   	dec    eax
c000f987:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000f98c:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000f991:	85 c0                	test   eax,eax
c000f993:	75 01                	jne    c000f996 <startGUI(void*)+0x1c>
c000f995:	fb                   	sti    
c000f996:	8b 1d 08 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b08
c000f99c:	83 ec 08             	sub    esp,0x8
c000f99f:	6a 01                	push   0x1
c000f9a1:	68 40 4c 02 c0       	push   0xc0024c40
c000f9a6:	e8 9f 80 00 00       	call   c0017a4a <Thr::loadDLL(char const*, bool)>
c000f9ab:	83 c4 10             	add    esp,0x10
c000f9ae:	83 ec 08             	sub    esp,0x8
c000f9b1:	53                   	push   ebx
c000f9b2:	50                   	push   eax
c000f9b3:	e8 c3 82 00 00       	call   c0017c7b <Thr::executeDLL(unsigned long, void*)>
c000f9b8:	83 c4 10             	add    esp,0x10
c000f9bb:	8b 1d 08 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b08
c000f9c1:	83 ec 08             	sub    esp,0x8
c000f9c4:	6a 01                	push   0x1
c000f9c6:	68 5a 4c 02 c0       	push   0xc0024c5a
c000f9cb:	e8 7a 80 00 00       	call   c0017a4a <Thr::loadDLL(char const*, bool)>
c000f9d0:	83 c4 10             	add    esp,0x10
c000f9d3:	83 ec 08             	sub    esp,0x8
c000f9d6:	53                   	push   ebx
c000f9d7:	50                   	push   eax
c000f9d8:	e8 9e 82 00 00       	call   c0017c7b <Thr::executeDLL(unsigned long, void*)>
c000f9dd:	83 c4 10             	add    esp,0x10
c000f9e0:	90                   	nop
c000f9e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f9e4:	c9                   	leave  
c000f9e5:	c3                   	ret    

c000f9e6 <startGUIVESA(void*)>:
c000f9e6:	55                   	push   ebp
c000f9e7:	89 e5                	mov    ebp,esp
c000f9e9:	53                   	push   ebx
c000f9ea:	83 ec 04             	sub    esp,0x4
c000f9ed:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000f9f2:	48                   	dec    eax
c000f9f3:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000f9f8:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000f9fd:	85 c0                	test   eax,eax
c000f9ff:	75 01                	jne    c000fa02 <startGUIVESA(void*)+0x1c>
c000fa01:	fb                   	sti    
c000fa02:	8b 1d 08 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b08
c000fa08:	83 ec 08             	sub    esp,0x8
c000fa0b:	6a 01                	push   0x1
c000fa0d:	68 74 4c 02 c0       	push   0xc0024c74
c000fa12:	e8 33 80 00 00       	call   c0017a4a <Thr::loadDLL(char const*, bool)>
c000fa17:	83 c4 10             	add    esp,0x10
c000fa1a:	83 ec 08             	sub    esp,0x8
c000fa1d:	53                   	push   ebx
c000fa1e:	50                   	push   eax
c000fa1f:	e8 57 82 00 00       	call   c0017c7b <Thr::executeDLL(unsigned long, void*)>
c000fa24:	83 c4 10             	add    esp,0x10
c000fa27:	8b 1d 08 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b08
c000fa2d:	83 ec 08             	sub    esp,0x8
c000fa30:	6a 01                	push   0x1
c000fa32:	68 5a 4c 02 c0       	push   0xc0024c5a
c000fa37:	e8 0e 80 00 00       	call   c0017a4a <Thr::loadDLL(char const*, bool)>
c000fa3c:	83 c4 10             	add    esp,0x10
c000fa3f:	83 ec 08             	sub    esp,0x8
c000fa42:	53                   	push   ebx
c000fa43:	50                   	push   eax
c000fa44:	e8 32 82 00 00       	call   c0017c7b <Thr::executeDLL(unsigned long, void*)>
c000fa49:	83 c4 10             	add    esp,0x10
c000fa4c:	90                   	nop
c000fa4d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa50:	c9                   	leave  
c000fa51:	c3                   	ret    

c000fa52 <sendKeyToTerminal(unsigned char)>:
c000fa52:	55                   	push   ebp
c000fa53:	89 e5                	mov    ebp,esp
c000fa55:	83 ec 28             	sub    esp,0x28
c000fa58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa5b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fa5e:	a1 84 7b 02 c0       	mov    eax,ds:0xc0027b84
c000fa63:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fa67:	83 ec 08             	sub    esp,0x8
c000fa6a:	52                   	push   edx
c000fa6b:	50                   	push   eax
c000fa6c:	e8 fd b6 ff ff       	call   c000b16e <VgaText::receiveKey(unsigned char)>
c000fa71:	83 c4 10             	add    esp,0x10
c000fa74:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fa78:	0f 85 8f 00 00 00    	jne    c000fb0d <sendKeyToTerminal(unsigned char)+0xbb>
c000fa7e:	fa                   	cli    
c000fa7f:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000fa84:	40                   	inc    eax
c000fa85:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000fa8a:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c000fa8f:	40                   	inc    eax
c000fa90:	a3 c4 8f 02 c0       	mov    ds:0xc0028fc4,eax
c000fa95:	a1 60 7c 02 c0       	mov    eax,ds:0xc0027c60
c000fa9a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fa9d:	c7 05 60 7c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027c60,0x0
c000faa7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000faab:	74 1f                	je     c000facc <sendKeyToTerminal(unsigned char)+0x7a>
c000faad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fab0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fab3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fab6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fab9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fabc:	83 ec 0c             	sub    esp,0xc
c000fabf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fac2:	e8 25 8e 00 00       	call   c00188ec <unblockTask(ThreadControlBlock*)>
c000fac7:	83 c4 10             	add    esp,0x10
c000faca:	eb db                	jmp    c000faa7 <sendKeyToTerminal(unsigned char)+0x55>
c000facc:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c000fad1:	48                   	dec    eax
c000fad2:	a3 c4 8f 02 c0       	mov    ds:0xc0028fc4,eax
c000fad7:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c000fadc:	85 c0                	test   eax,eax
c000fade:	75 18                	jne    c000faf8 <sendKeyToTerminal(unsigned char)+0xa6>
c000fae0:	a1 c0 8f 02 c0       	mov    eax,ds:0xc0028fc0
c000fae5:	85 c0                	test   eax,eax
c000fae7:	74 0f                	je     c000faf8 <sendKeyToTerminal(unsigned char)+0xa6>
c000fae9:	c7 05 c0 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x0
c000faf3:	e8 38 89 00 00       	call   c0018430 <schedule()>
c000faf8:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000fafd:	48                   	dec    eax
c000fafe:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000fb03:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000fb08:	85 c0                	test   eax,eax
c000fb0a:	75 01                	jne    c000fb0d <sendKeyToTerminal(unsigned char)+0xbb>
c000fb0c:	fb                   	sti    
c000fb0d:	90                   	nop
c000fb0e:	c9                   	leave  
c000fb0f:	c3                   	ret    

c000fb10 <sendKeyboardToken(KeyboardToken)>:
c000fb10:	55                   	push   ebp
c000fb11:	89 e5                	mov    ebp,esp
c000fb13:	83 ec 18             	sub    esp,0x18
c000fb16:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fb19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb1c:	0f b7 c0             	movzx  eax,ax
c000fb1f:	83 f2 01             	xor    edx,0x1
c000fb22:	88 90 80 7c 02 c0    	mov    BYTE PTR [eax-0x3ffd8380],dl
c000fb28:	a1 68 7c 02 c0       	mov    eax,ds:0xc0027c68
c000fb2d:	85 c0                	test   eax,eax
c000fb2f:	74 24                	je     c000fb55 <sendKeyboardToken(KeyboardToken)+0x45>
c000fb31:	8b 0d 68 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027c68
c000fb37:	83 ec 04             	sub    esp,0x4
c000fb3a:	68 80 7c 02 c0       	push   0xc0027c80
c000fb3f:	83 ec 08             	sub    esp,0x8
c000fb42:	89 e2                	mov    edx,esp
c000fb44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb47:	89 02                	mov    DWORD PTR [edx],eax
c000fb49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fb4c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fb50:	ff d1                	call   ecx
c000fb52:	83 c4 10             	add    esp,0x10
c000fb55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb58:	66 3d 03 02          	cmp    ax,0x203
c000fb5c:	75 07                	jne    c000fb65 <sendKeyboardToken(KeyboardToken)+0x55>
c000fb5e:	a0 80 7d 02 c0       	mov    al,ds:0xc0027d80
c000fb63:	84 c0                	test   al,al
c000fb65:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fb69:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fb6c:	a0 88 80 02 c0       	mov    al,ds:0xc0028088
c000fb71:	38 c2                	cmp    dl,al
c000fb73:	74 1c                	je     c000fb91 <sendKeyboardToken(KeyboardToken)+0x81>
c000fb75:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fb78:	a2 88 80 02 c0       	mov    ds:0xc0028088,al
c000fb7d:	a0 88 80 02 c0       	mov    al,ds:0xc0028088
c000fb82:	0f b6 c0             	movzx  eax,al
c000fb85:	83 ec 0c             	sub    esp,0xc
c000fb88:	50                   	push   eax
c000fb89:	e8 20 ac ff ff       	call   c000a7ae <setTerminalScrollLock(bool)>
c000fb8e:	83 c4 10             	add    esp,0x10
c000fb91:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fb94:	84 c0                	test   al,al
c000fb96:	0f 84 ae 00 00 00    	je     c000fc4a <sendKeyboardToken(KeyboardToken)+0x13a>
c000fb9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb9f:	66 3d 10 03          	cmp    ax,0x310
c000fba3:	75 06                	jne    c000fbab <sendKeyboardToken(KeyboardToken)+0x9b>
c000fba5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fbab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbae:	66 3d 11 03          	cmp    ax,0x311
c000fbb2:	75 06                	jne    c000fbba <sendKeyboardToken(KeyboardToken)+0xaa>
c000fbb4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fbba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbbd:	66 3d 12 03          	cmp    ax,0x312
c000fbc1:	75 06                	jne    c000fbc9 <sendKeyboardToken(KeyboardToken)+0xb9>
c000fbc3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fbc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbcc:	66 3d 13 03          	cmp    ax,0x313
c000fbd0:	75 06                	jne    c000fbd8 <sendKeyboardToken(KeyboardToken)+0xc8>
c000fbd2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fbd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbdb:	66 3d 14 03          	cmp    ax,0x314
c000fbdf:	75 06                	jne    c000fbe7 <sendKeyboardToken(KeyboardToken)+0xd7>
c000fbe1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fbe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbea:	66 3d 15 03          	cmp    ax,0x315
c000fbee:	75 06                	jne    c000fbf6 <sendKeyboardToken(KeyboardToken)+0xe6>
c000fbf0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fbf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbf9:	66 3d 16 03          	cmp    ax,0x316
c000fbfd:	75 06                	jne    c000fc05 <sendKeyboardToken(KeyboardToken)+0xf5>
c000fbff:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fc05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc08:	66 3d 17 03          	cmp    ax,0x317
c000fc0c:	75 06                	jne    c000fc14 <sendKeyboardToken(KeyboardToken)+0x104>
c000fc0e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fc14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc17:	66 3d 18 03          	cmp    ax,0x318
c000fc1b:	75 06                	jne    c000fc23 <sendKeyboardToken(KeyboardToken)+0x113>
c000fc1d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fc23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc26:	66 3d 19 03          	cmp    ax,0x319
c000fc2a:	75 06                	jne    c000fc32 <sendKeyboardToken(KeyboardToken)+0x122>
c000fc2c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fc32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc35:	66 3d 1a 03          	cmp    ax,0x31a
c000fc39:	0f 85 c9 00 00 00    	jne    c000fd08 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fc3f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fc45:	e9 be 00 00 00       	jmp    c000fd08 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fc4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc4d:	66 3d 10 03          	cmp    ax,0x310
c000fc51:	75 0a                	jne    c000fc5d <sendKeyboardToken(KeyboardToken)+0x14d>
c000fc53:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fc59:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc60:	66 3d 11 03          	cmp    ax,0x311
c000fc64:	75 0a                	jne    c000fc70 <sendKeyboardToken(KeyboardToken)+0x160>
c000fc66:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fc6c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc73:	66 3d 12 03          	cmp    ax,0x312
c000fc77:	75 0a                	jne    c000fc83 <sendKeyboardToken(KeyboardToken)+0x173>
c000fc79:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fc7f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc86:	66 3d 13 03          	cmp    ax,0x313
c000fc8a:	75 0a                	jne    c000fc96 <sendKeyboardToken(KeyboardToken)+0x186>
c000fc8c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fc92:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc99:	66 3d 14 03          	cmp    ax,0x314
c000fc9d:	75 0a                	jne    c000fca9 <sendKeyboardToken(KeyboardToken)+0x199>
c000fc9f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fca5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcac:	66 3d 15 03          	cmp    ax,0x315
c000fcb0:	75 0a                	jne    c000fcbc <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fcb2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fcb8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcbf:	66 3d 16 03          	cmp    ax,0x316
c000fcc3:	75 0a                	jne    c000fccf <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fcc5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fccb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd2:	66 3d 17 03          	cmp    ax,0x317
c000fcd6:	75 0a                	jne    c000fce2 <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fcd8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fcde:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fce5:	66 3d 18 03          	cmp    ax,0x318
c000fce9:	75 0a                	jne    c000fcf5 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fceb:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fcf1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcf8:	66 3d 19 03          	cmp    ax,0x319
c000fcfc:	75 0a                	jne    c000fd08 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fcfe:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fd04:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd0b:	66 3d 00 02          	cmp    ax,0x200
c000fd0f:	75 2c                	jne    c000fd3d <sendKeyboardToken(KeyboardToken)+0x22d>
c000fd11:	a0 80 80 02 c0       	mov    al,ds:0xc0028080
c000fd16:	83 f0 01             	xor    eax,0x1
c000fd19:	84 c0                	test   al,al
c000fd1b:	74 20                	je     c000fd3d <sendKeyboardToken(KeyboardToken)+0x22d>
c000fd1d:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000fd22:	6a 01                	push   0x1
c000fd24:	6a 00                	push   0x0
c000fd26:	68 7a f9 00 c0       	push   0xc000f97a
c000fd2b:	50                   	push   eax
c000fd2c:	e8 e3 84 00 00       	call   c0018214 <Process::createThread(void (*)(void*), void*, int)>
c000fd31:	83 c4 10             	add    esp,0x10
c000fd34:	c6 05 80 80 02 c0 01 	mov    BYTE PTR ds:0xc0028080,0x1
c000fd3b:	eb 33                	jmp    c000fd70 <sendKeyboardToken(KeyboardToken)+0x260>
c000fd3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd40:	66 3d 01 02          	cmp    ax,0x201
c000fd44:	75 2a                	jne    c000fd70 <sendKeyboardToken(KeyboardToken)+0x260>
c000fd46:	a0 80 80 02 c0       	mov    al,ds:0xc0028080
c000fd4b:	83 f0 01             	xor    eax,0x1
c000fd4e:	84 c0                	test   al,al
c000fd50:	74 1e                	je     c000fd70 <sendKeyboardToken(KeyboardToken)+0x260>
c000fd52:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c000fd57:	6a 01                	push   0x1
c000fd59:	6a 00                	push   0x0
c000fd5b:	68 e6 f9 00 c0       	push   0xc000f9e6
c000fd60:	50                   	push   eax
c000fd61:	e8 ae 84 00 00       	call   c0018214 <Process::createThread(void (*)(void*), void*, int)>
c000fd66:	83 c4 10             	add    esp,0x10
c000fd69:	c6 05 80 80 02 c0 01 	mov    BYTE PTR ds:0xc0028080,0x1
c000fd70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd73:	66 3d 1d 03          	cmp    ax,0x31d
c000fd77:	75 06                	jne    c000fd7f <sendKeyboardToken(KeyboardToken)+0x26f>
c000fd79:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fd7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd82:	66 3d 1c 03          	cmp    ax,0x31c
c000fd86:	75 06                	jne    c000fd8e <sendKeyboardToken(KeyboardToken)+0x27e>
c000fd88:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fd8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd91:	66 3d 1b 03          	cmp    ax,0x31b
c000fd95:	75 06                	jne    c000fd9d <sendKeyboardToken(KeyboardToken)+0x28d>
c000fd97:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fd9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fda0:	66 3d 1e 03          	cmp    ax,0x31e
c000fda4:	75 06                	jne    c000fdac <sendKeyboardToken(KeyboardToken)+0x29c>
c000fda6:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fdac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdaf:	66 3d 1f 03          	cmp    ax,0x31f
c000fdb3:	75 06                	jne    c000fdbb <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fdb5:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fdbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdbe:	66 3d 1a 03          	cmp    ax,0x31a
c000fdc2:	75 06                	jne    c000fdca <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fdc4:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fdca:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fdce:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fdd1:	83 f0 01             	xor    eax,0x1
c000fdd4:	84 c0                	test   al,al
c000fdd6:	74 77                	je     c000fe4f <sendKeyboardToken(KeyboardToken)+0x33f>
c000fdd8:	a0 81 7d 02 c0       	mov    al,ds:0xc0027d81
c000fddd:	84 c0                	test   al,al
c000fddf:	74 41                	je     c000fe22 <sendKeyboardToken(KeyboardToken)+0x312>
c000fde1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fde5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fde9:	74 2b                	je     c000fe16 <sendKeyboardToken(KeyboardToken)+0x306>
c000fdeb:	8b 15 84 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028084
c000fdf1:	89 d0                	mov    eax,edx
c000fdf3:	c1 e0 02             	shl    eax,0x2
c000fdf6:	01 d0                	add    eax,edx
c000fdf8:	01 c0                	add    eax,eax
c000fdfa:	a3 84 80 02 c0       	mov    ds:0xc0028084,eax
c000fdff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe02:	0f b7 c0             	movzx  eax,ax
c000fe05:	8d 50 d0             	lea    edx,[eax-0x30]
c000fe08:	a1 84 80 02 c0       	mov    eax,ds:0xc0028084
c000fe0d:	01 d0                	add    eax,edx
c000fe0f:	a3 84 80 02 c0       	mov    ds:0xc0028084,eax
c000fe14:	eb 6d                	jmp    c000fe83 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe16:	c7 05 84 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028084,0x0
c000fe20:	eb 61                	jmp    c000fe83 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe22:	a1 84 80 02 c0       	mov    eax,ds:0xc0028084
c000fe27:	85 c0                	test   eax,eax
c000fe29:	74 18                	je     c000fe43 <sendKeyboardToken(KeyboardToken)+0x333>
c000fe2b:	a1 84 80 02 c0       	mov    eax,ds:0xc0028084
c000fe30:	0f b6 c0             	movzx  eax,al
c000fe33:	83 ec 0c             	sub    esp,0xc
c000fe36:	50                   	push   eax
c000fe37:	e8 16 fc ff ff       	call   c000fa52 <sendKeyToTerminal(unsigned char)>
c000fe3c:	83 c4 10             	add    esp,0x10
c000fe3f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fe43:	c7 05 84 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028084,0x0
c000fe4d:	eb 34                	jmp    c000fe83 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe52:	66 3d 01 01          	cmp    ax,0x101
c000fe56:	75 2b                	jne    c000fe83 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe58:	a1 84 80 02 c0       	mov    eax,ds:0xc0028084
c000fe5d:	85 c0                	test   eax,eax
c000fe5f:	74 18                	je     c000fe79 <sendKeyboardToken(KeyboardToken)+0x369>
c000fe61:	a1 84 80 02 c0       	mov    eax,ds:0xc0028084
c000fe66:	0f b6 c0             	movzx  eax,al
c000fe69:	83 ec 0c             	sub    esp,0xc
c000fe6c:	50                   	push   eax
c000fe6d:	e8 e0 fb ff ff       	call   c000fa52 <sendKeyToTerminal(unsigned char)>
c000fe72:	83 c4 10             	add    esp,0x10
c000fe75:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fe79:	c7 05 84 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028084,0x0
c000fe83:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fe86:	83 f0 01             	xor    eax,0x1
c000fe89:	84 c0                	test   al,al
c000fe8b:	74 4c                	je     c000fed9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fe8d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fe90:	83 f0 01             	xor    eax,0x1
c000fe93:	84 c0                	test   al,al
c000fe95:	74 42                	je     c000fed9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fe97:	a0 80 7d 02 c0       	mov    al,ds:0xc0027d80
c000fe9c:	83 f0 01             	xor    eax,0x1
c000fe9f:	84 c0                	test   al,al
c000fea1:	74 36                	je     c000fed9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fea6:	66 83 f8 1f          	cmp    ax,0x1f
c000feaa:	76 09                	jbe    c000feb5 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000feac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feaf:	66 83 f8 7e          	cmp    ax,0x7e
c000feb3:	76 12                	jbe    c000fec7 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000feb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feb8:	66 83 f8 0a          	cmp    ax,0xa
c000febc:	74 09                	je     c000fec7 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000febe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fec1:	66 83 f8 08          	cmp    ax,0x8
c000fec5:	75 12                	jne    c000fed9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feca:	0f b6 c0             	movzx  eax,al
c000fecd:	83 ec 0c             	sub    esp,0xc
c000fed0:	50                   	push   eax
c000fed1:	e8 7c fb ff ff       	call   c000fa52 <sendKeyToTerminal(unsigned char)>
c000fed6:	83 c4 10             	add    esp,0x10
c000fed9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fedc:	83 f0 01             	xor    eax,0x1
c000fedf:	84 c0                	test   al,al
c000fee1:	74 4f                	je     c000ff32 <sendKeyboardToken(KeyboardToken)+0x422>
c000fee3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fee6:	83 f0 01             	xor    eax,0x1
c000fee9:	84 c0                	test   al,al
c000feeb:	74 45                	je     c000ff32 <sendKeyboardToken(KeyboardToken)+0x422>
c000feed:	a0 80 7d 02 c0       	mov    al,ds:0xc0027d80
c000fef2:	84 c0                	test   al,al
c000fef4:	74 3c                	je     c000ff32 <sendKeyboardToken(KeyboardToken)+0x422>
c000fef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fef9:	66 83 f8 3f          	cmp    ax,0x3f
c000fefd:	76 33                	jbe    c000ff32 <sendKeyboardToken(KeyboardToken)+0x422>
c000feff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff02:	66 83 f8 7f          	cmp    ax,0x7f
c000ff06:	77 2a                	ja     c000ff32 <sendKeyboardToken(KeyboardToken)+0x422>
c000ff08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff0b:	88 c2                	mov    dl,al
c000ff0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff10:	66 83 f8 5f          	cmp    ax,0x5f
c000ff14:	76 04                	jbe    c000ff1a <sendKeyboardToken(KeyboardToken)+0x40a>
c000ff16:	b0 20                	mov    al,0x20
c000ff18:	eb 02                	jmp    c000ff1c <sendKeyboardToken(KeyboardToken)+0x40c>
c000ff1a:	b0 00                	mov    al,0x0
c000ff1c:	29 c2                	sub    edx,eax
c000ff1e:	88 d0                	mov    al,dl
c000ff20:	83 e8 40             	sub    eax,0x40
c000ff23:	0f b6 c0             	movzx  eax,al
c000ff26:	83 ec 0c             	sub    esp,0xc
c000ff29:	50                   	push   eax
c000ff2a:	e8 23 fb ff ff       	call   c000fa52 <sendKeyToTerminal(unsigned char)>
c000ff2f:	83 c4 10             	add    esp,0x10
c000ff32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff35:	66 3d 00 03          	cmp    ax,0x300
c000ff39:	75 0f                	jne    c000ff4a <sendKeyboardToken(KeyboardToken)+0x43a>
c000ff3b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff3e:	83 f0 01             	xor    eax,0x1
c000ff41:	84 c0                	test   al,al
c000ff43:	74 05                	je     c000ff4a <sendKeyboardToken(KeyboardToken)+0x43a>
c000ff45:	e8 d5 ab ff ff       	call   c000ab1f <doTerminalCycle()>
c000ff4a:	90                   	nop
c000ff4b:	c9                   	leave  
c000ff4c:	c3                   	ret    

c000ff4d <clearInternalKeybuffer(VgaText*)>:
c000ff4d:	55                   	push   ebp
c000ff4e:	89 e5                	mov    ebp,esp
c000ff50:	83 ec 08             	sub    esp,0x8
c000ff53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff56:	05 98 01 00 00       	add    eax,0x198
c000ff5b:	83 ec 0c             	sub    esp,0xc
c000ff5e:	50                   	push   eax
c000ff5f:	e8 3c 07 ff ff       	call   c00006a0 <strlen>
c000ff64:	83 c4 10             	add    esp,0x10
c000ff67:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ff6a:	81 c2 98 01 00 00    	add    edx,0x198
c000ff70:	83 ec 04             	sub    esp,0x4
c000ff73:	50                   	push   eax
c000ff74:	6a 00                	push   0x0
c000ff76:	52                   	push   edx
c000ff77:	e8 08 07 ff ff       	call   c0000684 <memset>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	90                   	nop
c000ff80:	c9                   	leave  
c000ff81:	c3                   	ret    

c000ff82 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ff82:	55                   	push   ebp
c000ff83:	89 e5                	mov    ebp,esp
c000ff85:	83 ec 18             	sub    esp,0x18
c000ff88:	a1 68 7c 02 c0       	mov    eax,ds:0xc0027c68
c000ff8d:	85 c0                	test   eax,eax
c000ff8f:	74 2a                	je     c000ffbb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ff91:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ff97:	8b 0d 68 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027c68
c000ff9d:	83 ec 04             	sub    esp,0x4
c000ffa0:	68 80 7c 02 c0       	push   0xc0027c80
c000ffa5:	83 ec 08             	sub    esp,0x8
c000ffa8:	89 e2                	mov    edx,esp
c000ffaa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ffad:	89 02                	mov    DWORD PTR [edx],eax
c000ffaf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ffb2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ffb6:	ff d1                	call   ecx
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	fb                   	sti    
c000ffbc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ffc3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ffc7:	0f 84 a1 00 00 00    	je     c001006e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ffcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffd0:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000ffd6:	84 c0                	test   al,al
c000ffd8:	75 28                	jne    c0010002 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ffda:	fa                   	cli    
c000ffdb:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000ffe0:	40                   	inc    eax
c000ffe1:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000ffe6:	e8 45 84 00 00       	call   c0018430 <schedule()>
c000ffeb:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000fff0:	48                   	dec    eax
c000fff1:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c000fff6:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c000fffb:	85 c0                	test   eax,eax
c000fffd:	75 ce                	jne    c000ffcd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ffff:	fb                   	sti    
c0010000:	eb cb                	jmp    c000ffcd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010002:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010005:	8d 50 01             	lea    edx,[eax+0x1]
c0010008:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001000b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001000e:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0010014:	88 10                	mov    BYTE PTR [eax],dl
c0010016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010019:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001001f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0010022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010025:	05 98 01 00 00       	add    eax,0x198
c001002a:	83 ec 0c             	sub    esp,0xc
c001002d:	50                   	push   eax
c001002e:	e8 6d 06 ff ff       	call   c00006a0 <strlen>
c0010033:	83 c4 10             	add    esp,0x10
c0010036:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010039:	81 c2 98 01 00 00    	add    edx,0x198
c001003f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010042:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010045:	81 c2 98 01 00 00    	add    edx,0x198
c001004b:	83 ec 04             	sub    esp,0x4
c001004e:	50                   	push   eax
c001004f:	51                   	push   ecx
c0010050:	52                   	push   edx
c0010051:	e8 66 05 ff ff       	call   c00005bc <memmove>
c0010056:	83 c4 10             	add    esp,0x10
c0010059:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001005c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001005f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0010063:	0f 85 5a ff ff ff    	jne    c000ffc3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0010069:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001006c:	eb 03                	jmp    c0010071 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c001006e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010071:	c9                   	leave  
c0010072:	c3                   	ret    
c0010073:	90                   	nop

c0010074 <Keyboard::Keyboard(char const*)>:
c0010074:	83 ec 0c             	sub    esp,0xc
c0010077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001007b:	83 ec 08             	sub    esp,0x8
c001007e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010082:	50                   	push   eax
c0010083:	e8 b6 e2 ff ff       	call   c000e33e <Device::Device(char const*)>
c0010088:	83 c4 10             	add    esp,0x10
c001008b:	ba 98 4c 02 c0       	mov    edx,0xc0024c98
c0010090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010094:	89 10                	mov    DWORD PTR [eax],edx
c0010096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001009a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00100a4:	c6 05 64 7c 02 c0 01 	mov    BYTE PTR ds:0xc0027c64,0x1
c00100ab:	90                   	nop
c00100ac:	83 c4 0c             	add    esp,0xc
c00100af:	c3                   	ret    

c00100b0 <Keyboard::~Keyboard()>:
c00100b0:	83 ec 0c             	sub    esp,0xc
c00100b3:	ba 98 4c 02 c0       	mov    edx,0xc0024c98
c00100b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100bc:	89 10                	mov    DWORD PTR [eax],edx
c00100be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c2:	83 ec 0c             	sub    esp,0xc
c00100c5:	50                   	push   eax
c00100c6:	e8 3d df ff ff       	call   c000e008 <Device::~Device()>
c00100cb:	83 c4 10             	add    esp,0x10
c00100ce:	90                   	nop
c00100cf:	83 c4 0c             	add    esp,0xc
c00100d2:	c3                   	ret    
c00100d3:	90                   	nop

c00100d4 <Keyboard::~Keyboard()>:
c00100d4:	83 ec 0c             	sub    esp,0xc
c00100d7:	83 ec 0c             	sub    esp,0xc
c00100da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100de:	e8 cd ff ff ff       	call   c00100b0 <Keyboard::~Keyboard()>
c00100e3:	83 c4 10             	add    esp,0x10
c00100e6:	83 ec 08             	sub    esp,0x8
c00100e9:	68 5c 01 00 00       	push   0x15c
c00100ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f2:	e8 db ca ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00100f7:	83 c4 10             	add    esp,0x10
c00100fa:	83 c4 0c             	add    esp,0xc
c00100fd:	c3                   	ret    

c00100fe <LogicalDisk::close(int, int, void*)>:
c00100fe:	83 c8 ff             	or     eax,0xffffffff
c0010101:	c3                   	ret    

c0010102 <LogicalDisk::~LogicalDisk()>:
c0010102:	83 ec 0c             	sub    esp,0xc
c0010105:	ba 10 4d 02 c0       	mov    edx,0xc0024d10
c001010a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001010e:	89 10                	mov    DWORD PTR [eax],edx
c0010110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010114:	83 ec 0c             	sub    esp,0xc
c0010117:	50                   	push   eax
c0010118:	e8 eb de ff ff       	call   c000e008 <Device::~Device()>
c001011d:	83 c4 10             	add    esp,0x10
c0010120:	90                   	nop
c0010121:	83 c4 0c             	add    esp,0xc
c0010124:	c3                   	ret    
c0010125:	90                   	nop

c0010126 <LogicalDisk::~LogicalDisk()>:
c0010126:	83 ec 0c             	sub    esp,0xc
c0010129:	83 ec 0c             	sub    esp,0xc
c001012c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010130:	e8 cd ff ff ff       	call   c0010102 <LogicalDisk::~LogicalDisk()>
c0010135:	83 c4 10             	add    esp,0x10
c0010138:	83 ec 08             	sub    esp,0x8
c001013b:	68 74 01 00 00       	push   0x174
c0010140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010144:	e8 89 ca ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0010149:	83 c4 10             	add    esp,0x10
c001014c:	83 c4 0c             	add    esp,0xc
c001014f:	c3                   	ret    

c0010150 <LogicalDisk::open(int, int, void*)>:
c0010150:	83 ec 18             	sub    esp,0x18
c0010153:	68 c4 4c 02 c0       	push   0xc0024cc4
c0010158:	e8 02 47 00 00       	call   c001485f <Krnl::panic(char const*)>
c001015d:	83 c8 ff             	or     eax,0xffffffff
c0010160:	83 c4 1c             	add    esp,0x1c
c0010163:	c3                   	ret    

c0010164 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0010164:	53                   	push   ebx
c0010165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010169:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001016d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010171:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0010177:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001017d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0010183:	77 10                	ja     c0010195 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0010185:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001018b:	89 d3                	mov    ebx,edx
c001018d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0010193:	72 05                	jb     c001019a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0010195:	83 c8 ff             	or     eax,0xffffffff
c0010198:	89 c2                	mov    edx,eax
c001019a:	5b                   	pop    ebx
c001019b:	c3                   	ret    

c001019c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001019c:	56                   	push   esi
c001019d:	83 c8 ff             	or     eax,0xffffffff
c00101a0:	53                   	push   ebx
c00101a1:	89 c2                	mov    edx,eax
c00101a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00101a7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00101ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00101af:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00101b5:	77 27                	ja     c00101de <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00101b7:	89 d8                	mov    eax,ebx
c00101b9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00101bf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00101c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00101ca:	89 c2                	mov    edx,eax
c00101cc:	73 10                	jae    c00101de <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00101ce:	89 c8                	mov    eax,ecx
c00101d0:	89 da                	mov    edx,ebx
c00101d2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00101d8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00101de:	5b                   	pop    ebx
c00101df:	5e                   	pop    esi
c00101e0:	c3                   	ret    
c00101e1:	90                   	nop

c00101e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00101e2:	83 ec 1c             	sub    esp,0x1c
c00101e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00101e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00101ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00101f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00101fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010200:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010208:	83 ec 08             	sub    esp,0x8
c001020b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001020f:	50                   	push   eax
c0010210:	e8 29 e1 ff ff       	call   c000e33e <Device::Device(char const*)>
c0010215:	83 c4 10             	add    esp,0x10
c0010218:	ba 10 4d 02 c0       	mov    edx,0xc0024d10
c001021d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010221:	89 10                	mov    DWORD PTR [eax],edx
c0010223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010227:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001022e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010232:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001023d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010247:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001024b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001024f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010253:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010259:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001025f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010263:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010266:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001026a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010270:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0010276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001027a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001027e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010288:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010292:	90                   	nop
c0010293:	83 c4 1c             	add    esp,0x1c
c0010296:	c3                   	ret    
c0010297:	90                   	nop

c0010298 <LogicalDisk::assignDriveLetter()>:
c0010298:	55                   	push   ebp
c0010299:	57                   	push   edi
c001029a:	56                   	push   esi
c001029b:	53                   	push   ebx
c001029c:	83 ec 14             	sub    esp,0x14
c001029f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102a3:	8b 3d a0 80 02 c0    	mov    edi,DWORD PTR ds:0xc00280a0
c00102a9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00102af:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102b3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00102b9:	8b 3d a4 80 02 c0    	mov    edi,DWORD PTR ds:0xc00280a4
c00102bf:	3c 01                	cmp    al,0x1
c00102c1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00102c5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00102c9:	19 c0                	sbb    eax,eax
c00102cb:	83 e0 02             	and    eax,0x2
c00102ce:	83 c0 41             	add    eax,0x41
c00102d1:	0f be e8             	movsx  ebp,al
c00102d4:	3c 43                	cmp    al,0x43
c00102d6:	75 10                	jne    c00102e8 <LogicalDisk::assignDriveLetter()+0x50>
c00102d8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00102df:	75 5d                	jne    c001033e <LogicalDisk::assignDriveLetter()+0xa6>
c00102e1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00102e6:	75 56                	jne    c001033e <LogicalDisk::assignDriveLetter()+0xa6>
c00102e8:	8d 75 bf             	lea    esi,[ebp-0x41]
c00102eb:	ba 01 00 00 00       	mov    edx,0x1
c00102f0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00102f4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00102f8:	d3 e2                	shl    edx,cl
c00102fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102fe:	89 d7                	mov    edi,edx
c0010300:	89 d6                	mov    esi,edx
c0010302:	c1 ff 1f             	sar    edi,0x1f
c0010305:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010309:	21 f9                	and    ecx,edi
c001030b:	09 d1                	or     ecx,edx
c001030d:	75 2f                	jne    c001033e <LogicalDisk::assignDriveLetter()+0xa6>
c001030f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010313:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010317:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001031d:	09 f2                	or     edx,esi
c001031f:	89 15 a0 80 02 c0    	mov    DWORD PTR ds:0xc00280a0,edx
c0010325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010329:	09 fa                	or     edx,edi
c001032b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001032f:	89 15 a4 80 02 c0    	mov    DWORD PTR ds:0xc00280a4,edx
c0010335:	89 1c bd c0 80 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7f40],ebx
c001033c:	eb 08                	jmp    c0010346 <LogicalDisk::assignDriveLetter()+0xae>
c001033e:	45                   	inc    ebp
c001033f:	40                   	inc    eax
c0010340:	3c 5b                	cmp    al,0x5b
c0010342:	75 90                	jne    c00102d4 <LogicalDisk::assignDriveLetter()+0x3c>
c0010344:	31 c0                	xor    eax,eax
c0010346:	83 c4 14             	add    esp,0x14
c0010349:	5b                   	pop    ebx
c001034a:	5e                   	pop    esi
c001034b:	5f                   	pop    edi
c001034c:	5d                   	pop    ebp
c001034d:	c3                   	ret    

c001034e <LogicalDisk::mount()>:
c001034e:	56                   	push   esi
c001034f:	53                   	push   ebx
c0010350:	53                   	push   ebx
c0010351:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010355:	8b 1d 34 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c34
c001035b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010365:	85 db                	test   ebx,ebx
c0010367:	74 27                	je     c0010390 <LogicalDisk::mount()+0x42>
c0010369:	51                   	push   ecx
c001036a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010371:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010373:	83 e8 41             	sub    eax,0x41
c0010376:	50                   	push   eax
c0010377:	56                   	push   esi
c0010378:	53                   	push   ebx
c0010379:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001037c:	83 c4 10             	add    esp,0x10
c001037f:	84 c0                	test   al,al
c0010381:	74 08                	je     c001038b <LogicalDisk::mount()+0x3d>
c0010383:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010389:	eb 07                	jmp    c0010392 <LogicalDisk::mount()+0x44>
c001038b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001038e:	eb d5                	jmp    c0010365 <LogicalDisk::mount()+0x17>
c0010390:	31 c0                	xor    eax,eax
c0010392:	5a                   	pop    edx
c0010393:	5b                   	pop    ebx
c0010394:	5e                   	pop    esi
c0010395:	c3                   	ret    

c0010396 <LogicalDisk::unmount()>:
c0010396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001039a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00103a4:	c3                   	ret    
c00103a5:	90                   	nop

c00103a6 <LogicalDisk::eject()>:
c00103a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00103b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00103b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00103b6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00103b9:	90                   	nop

c00103ba <LogicalDisk::unassignDriveLetter()>:
c00103ba:	57                   	push   edi
c00103bb:	56                   	push   esi
c00103bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00103c0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00103c7:	84 c9                	test   cl,cl
c00103c9:	75 0f                	jne    c00103da <LogicalDisk::unassignDriveLetter()+0x20>
c00103cb:	c7 44 24 0c e8 4c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024ce8
c00103d3:	5e                   	pop    esi
c00103d4:	5f                   	pop    edi
c00103d5:	e9 85 44 00 00       	jmp    c001485f <Krnl::panic(char const*)>
c00103da:	83 e9 41             	sub    ecx,0x41
c00103dd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00103e4:	b8 01 00 00 00       	mov    eax,0x1
c00103e9:	c7 04 8d c0 80 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7f40],0x0
c00103f4:	d3 e0                	shl    eax,cl
c00103f6:	89 c7                	mov    edi,eax
c00103f8:	f7 d0                	not    eax
c00103fa:	c1 ff 1f             	sar    edi,0x1f
c00103fd:	21 05 a0 80 02 c0    	and    DWORD PTR ds:0xc00280a0,eax
c0010403:	89 fe                	mov    esi,edi
c0010405:	f7 d6                	not    esi
c0010407:	21 35 a4 80 02 c0    	and    DWORD PTR ds:0xc00280a4,esi
c001040d:	5e                   	pop    esi
c001040e:	5f                   	pop    edi
c001040f:	c3                   	ret    

c0010410 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010410:	57                   	push   edi
c0010411:	56                   	push   esi
c0010412:	53                   	push   ebx
c0010413:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010417:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001041b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001041f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010423:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010429:	77 41                	ja     c001046c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001042b:	99                   	cdq    
c001042c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010432:	01 c8                	add    eax,ecx
c0010434:	11 da                	adc    edx,ebx
c0010436:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001043c:	19 d7                	sbb    edi,edx
c001043e:	72 33                	jb     c0010473 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010440:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010446:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001044c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010450:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010454:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001045a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010460:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010464:	5b                   	pop    ebx
c0010465:	5e                   	pop    esi
c0010466:	5f                   	pop    edi
c0010467:	e9 e2 0a 00 00       	jmp    c0010f4e <VCache::read(unsigned long long, int, void*)>
c001046c:	b8 05 00 00 00       	mov    eax,0x5
c0010471:	eb 05                	jmp    c0010478 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010473:	b8 07 00 00 00       	mov    eax,0x7
c0010478:	5b                   	pop    ebx
c0010479:	5e                   	pop    esi
c001047a:	5f                   	pop    edi
c001047b:	c3                   	ret    

c001047c <LogicalDisk::write(unsigned long long, int, void*)>:
c001047c:	57                   	push   edi
c001047d:	56                   	push   esi
c001047e:	53                   	push   ebx
c001047f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010483:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010487:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001048b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001048f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010495:	77 41                	ja     c00104d8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010497:	99                   	cdq    
c0010498:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001049e:	01 c8                	add    eax,ecx
c00104a0:	11 da                	adc    edx,ebx
c00104a2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00104a8:	19 d7                	sbb    edi,edx
c00104aa:	72 33                	jb     c00104df <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00104ac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00104b2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00104b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104bc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00104c0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00104c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00104cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104d0:	5b                   	pop    ebx
c00104d1:	5e                   	pop    esi
c00104d2:	5f                   	pop    edi
c00104d3:	e9 7c 09 00 00       	jmp    c0010e54 <VCache::write(unsigned long long, int, void*)>
c00104d8:	b8 05 00 00 00       	mov    eax,0x5
c00104dd:	eb 05                	jmp    c00104e4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00104df:	b8 07 00 00 00       	mov    eax,0x7
c00104e4:	5b                   	pop    ebx
c00104e5:	5e                   	pop    esi
c00104e6:	5f                   	pop    edi
c00104e7:	c3                   	ret    

c00104e8 <Mouse::Mouse(char const*)>:
c00104e8:	83 ec 0c             	sub    esp,0xc
c00104eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ef:	83 ec 08             	sub    esp,0x8
c00104f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f6:	50                   	push   eax
c00104f7:	e8 42 de ff ff       	call   c000e33e <Device::Device(char const*)>
c00104fc:	83 c4 10             	add    esp,0x10
c00104ff:	ba 3c 4d 02 c0       	mov    edx,0xc0024d3c
c0010504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010508:	89 10                	mov    DWORD PTR [eax],edx
c001050a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010518:	90                   	nop
c0010519:	83 c4 0c             	add    esp,0xc
c001051c:	c3                   	ret    
c001051d:	90                   	nop
c001051e:	66 90                	xchg   ax,ax

c0010520 <Mouse::~Mouse()>:
c0010520:	83 ec 0c             	sub    esp,0xc
c0010523:	ba 3c 4d 02 c0       	mov    edx,0xc0024d3c
c0010528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052c:	89 10                	mov    DWORD PTR [eax],edx
c001052e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010532:	83 ec 0c             	sub    esp,0xc
c0010535:	50                   	push   eax
c0010536:	e8 cd da ff ff       	call   c000e008 <Device::~Device()>
c001053b:	83 c4 10             	add    esp,0x10
c001053e:	90                   	nop
c001053f:	83 c4 0c             	add    esp,0xc
c0010542:	c3                   	ret    
c0010543:	90                   	nop

c0010544 <Mouse::~Mouse()>:
c0010544:	83 ec 0c             	sub    esp,0xc
c0010547:	83 ec 0c             	sub    esp,0xc
c001054a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001054e:	e8 cd ff ff ff       	call   c0010520 <Mouse::~Mouse()>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	83 ec 08             	sub    esp,0x8
c0010559:	68 58 01 00 00       	push   0x158
c001055e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010562:	e8 6b c6 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	83 c4 0c             	add    esp,0xc
c001056d:	c3                   	ret    

c001056e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001056e:	55                   	push   ebp
c001056f:	57                   	push   edi
c0010570:	56                   	push   esi
c0010571:	53                   	push   ebx
c0010572:	81 ec 28 01 00 00    	sub    esp,0x128
c0010578:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001057f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010586:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001058d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010594:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010598:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001059c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00105a3:	e8 92 de ff ff       	call   c000e43a <Device::getName()>
c00105a8:	5a                   	pop    edx
c00105a9:	59                   	pop    ecx
c00105aa:	50                   	push   eax
c00105ab:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00105af:	55                   	push   ebp
c00105b0:	e8 8b 01 ff ff       	call   c0000740 <strcpy>
c00105b5:	5b                   	pop    ebx
c00105b6:	58                   	pop    eax
c00105b7:	68 60 4d 02 c0       	push   0xc0024d60
c00105bc:	55                   	push   ebp
c00105bd:	e8 be 02 ff ff       	call   c0000880 <strcat>
c00105c2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00105c9:	e8 f5 93 ff ff       	call   c00099c3 <malloc>
c00105ce:	83 c4 0c             	add    esp,0xc
c00105d1:	89 c3                	mov    ebx,eax
c00105d3:	57                   	push   edi
c00105d4:	56                   	push   esi
c00105d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105dd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00105e4:	55                   	push   ebp
c00105e5:	50                   	push   eax
c00105e6:	e8 f7 fb ff ff       	call   c00101e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00105eb:	83 c4 14             	add    esp,0x14
c00105ee:	53                   	push   ebx
c00105ef:	e8 a4 fc ff ff       	call   c0010298 <LogicalDisk::assignDriveLetter()>
c00105f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105f7:	e8 52 fd ff ff       	call   c001034e <LogicalDisk::mount()>
c00105fc:	58                   	pop    eax
c00105fd:	5a                   	pop    edx
c00105fe:	53                   	push   ebx
c00105ff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010606:	e8 2f db ff ff       	call   c000e13a <Device::addChild(Device*)>
c001060b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010611:	5b                   	pop    ebx
c0010612:	5e                   	pop    esi
c0010613:	5f                   	pop    edi
c0010614:	5d                   	pop    ebp
c0010615:	c3                   	ret    

c0010616 <createPartitionsForDisk(PhysicalDisk*)>:
c0010616:	55                   	push   ebp
c0010617:	57                   	push   edi
c0010618:	56                   	push   esi
c0010619:	53                   	push   ebx
c001061a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010620:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010627:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001062d:	3d 00 02 00 00       	cmp    eax,0x200
c0010632:	74 27                	je     c001065b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010634:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001063a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010640:	83 ec 10             	sub    esp,0x10
c0010643:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010647:	99                   	cdq    
c0010648:	c1 e6 0a             	shl    esi,0xa
c001064b:	52                   	push   edx
c001064c:	89 fd                	mov    ebp,edi
c001064e:	50                   	push   eax
c001064f:	55                   	push   ebp
c0010650:	56                   	push   esi
c0010651:	e8 7e 1d 01 00       	call   c00223d4 <__udivdi3>
c0010656:	e9 b1 00 00 00       	jmp    c001070c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001065b:	83 ec 0c             	sub    esp,0xc
c001065e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010660:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010664:	56                   	push   esi
c0010665:	6a 01                	push   0x1
c0010667:	6a 00                	push   0x0
c0010669:	6a 00                	push   0x0
c001066b:	53                   	push   ebx
c001066c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001066f:	83 c4 20             	add    esp,0x20
c0010672:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001067a:	75 0a                	jne    c0010686 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001067c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010684:	74 2c                	je     c00106b2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010686:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001068c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010692:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010698:	83 ec 10             	sub    esp,0x10
c001069b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001069f:	89 f7                	mov    edi,esi
c00106a1:	c1 e0 0a             	shl    eax,0xa
c00106a4:	c1 ff 1f             	sar    edi,0x1f
c00106a7:	57                   	push   edi
c00106a8:	56                   	push   esi
c00106a9:	52                   	push   edx
c00106aa:	50                   	push   eax
c00106ab:	e8 24 1d 01 00       	call   c00223d4 <__udivdi3>
c00106b0:	eb 5a                	jmp    c001070c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00106b2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00106b9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00106c0:	83 e1 7f             	and    ecx,0x7f
c00106c3:	83 e0 7f             	and    eax,0x7f
c00106c6:	01 c1                	add    ecx,eax
c00106c8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00106cf:	83 e0 7f             	and    eax,0x7f
c00106d2:	01 c1                	add    ecx,eax
c00106d4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00106db:	83 e0 7f             	and    eax,0x7f
c00106de:	00 c1                	add    cl,al
c00106e0:	74 41                	je     c0010723 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00106e2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00106e8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00106ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00106f4:	83 ec 10             	sub    esp,0x10
c00106f7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00106fb:	89 f7                	mov    edi,esi
c00106fd:	c1 e0 0a             	shl    eax,0xa
c0010700:	c1 ff 1f             	sar    edi,0x1f
c0010703:	57                   	push   edi
c0010704:	56                   	push   esi
c0010705:	52                   	push   edx
c0010706:	50                   	push   eax
c0010707:	e8 c8 1c 01 00       	call   c00223d4 <__udivdi3>
c001070c:	83 c4 14             	add    esp,0x14
c001070f:	52                   	push   edx
c0010710:	50                   	push   eax
c0010711:	6a 00                	push   0x0
c0010713:	6a 00                	push   0x0
c0010715:	53                   	push   ebx
c0010716:	e8 53 fe ff ff       	call   c001056e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001071b:	83 c4 20             	add    esp,0x20
c001071e:	e9 79 01 00 00       	jmp    c001089c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010723:	89 f0                	mov    eax,esi
c0010725:	31 f6                	xor    esi,esi
c0010727:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001072e:	75 02                	jne    c0010732 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010730:	89 f1                	mov    ecx,esi
c0010732:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010739:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010740:	c1 e2 08             	shl    edx,0x8
c0010743:	c1 e7 10             	shl    edi,0x10
c0010746:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001074e:	09 fa                	or     edx,edi
c0010750:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010758:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001075f:	83 c0 10             	add    eax,0x10
c0010762:	09 fa                	or     edx,edi
c0010764:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001076b:	c1 e7 18             	shl    edi,0x18
c001076e:	09 fa                	or     edx,edi
c0010770:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010777:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001077b:	c1 e7 10             	shl    edi,0x10
c001077e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010785:	c1 e2 08             	shl    edx,0x8
c0010788:	09 fa                	or     edx,edi
c001078a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010791:	09 fa                	or     edx,edi
c0010793:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001079a:	c1 e7 18             	shl    edi,0x18
c001079d:	09 fa                	or     edx,edi
c001079f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00107a3:	46                   	inc    esi
c00107a4:	83 fe 04             	cmp    esi,0x4
c00107a7:	0f 85 7a ff ff ff    	jne    c0010727 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00107ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b1:	83 f0 01             	xor    eax,0x1
c00107b4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00107b8:	75 57                	jne    c0010811 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00107ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107be:	83 f0 01             	xor    eax,0x1
c00107c1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00107c5:	75 4a                	jne    c0010811 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00107c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00107cb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00107d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00107db:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00107e1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00107e7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00107ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c00107f1:	89 f7                	mov    edi,esi
c00107f3:	c1 e0 0a             	shl    eax,0xa
c00107f6:	c1 ff 1f             	sar    edi,0x1f
c00107f9:	57                   	push   edi
c00107fa:	56                   	push   esi
c00107fb:	52                   	push   edx
c00107fc:	50                   	push   eax
c00107fd:	e8 d2 1b 01 00       	call   c00223d4 <__udivdi3>
c0010802:	83 c4 10             	add    esp,0x10
c0010805:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010809:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001080d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010811:	84 c9                	test   cl,cl
c0010813:	74 53                	je     c0010868 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010815:	0f b6 c9             	movzx  ecx,cl
c0010818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010820:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010824:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001082c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010830:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010834:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010838:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001083c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010840:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010844:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010848:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001084c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010850:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010854:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010858:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001085c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010860:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010864:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010868:	31 ed                	xor    ebp,ebp
c001086a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001086e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010872:	89 f8                	mov    eax,edi
c0010874:	09 f0                	or     eax,esi
c0010876:	74 1e                	je     c0010896 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010878:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001087c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010880:	89 d1                	mov    ecx,edx
c0010882:	09 c1                	or     ecx,eax
c0010884:	74 10                	je     c0010896 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010886:	83 ec 0c             	sub    esp,0xc
c0010889:	57                   	push   edi
c001088a:	56                   	push   esi
c001088b:	52                   	push   edx
c001088c:	50                   	push   eax
c001088d:	53                   	push   ebx
c001088e:	e8 db fc ff ff       	call   c001056e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010893:	83 c4 20             	add    esp,0x20
c0010896:	45                   	inc    ebp
c0010897:	83 fd 04             	cmp    ebp,0x4
c001089a:	75 ce                	jne    c001086a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001089c:	81 c4 5c 02 00 00    	add    esp,0x25c
c00108a2:	5b                   	pop    ebx
c00108a3:	5e                   	pop    esi
c00108a4:	5f                   	pop    edi
c00108a5:	5d                   	pop    ebp
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <Serial::Serial(char const*)>:
c00108a8:	83 ec 0c             	sub    esp,0xc
c00108ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108af:	83 ec 08             	sub    esp,0x8
c00108b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108b6:	50                   	push   eax
c00108b7:	e8 82 da ff ff       	call   c000e33e <Device::Device(char const*)>
c00108bc:	83 c4 10             	add    esp,0x10
c00108bf:	ba 74 4d 02 c0       	mov    edx,0xc0024d74
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	89 10                	mov    DWORD PTR [eax],edx
c00108ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ce:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00108d8:	90                   	nop
c00108d9:	83 c4 0c             	add    esp,0xc
c00108dc:	c3                   	ret    
c00108dd:	90                   	nop
c00108de:	66 90                	xchg   ax,ax

c00108e0 <Serial::~Serial()>:
c00108e0:	83 ec 0c             	sub    esp,0xc
c00108e3:	ba 74 4d 02 c0       	mov    edx,0xc0024d74
c00108e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ec:	89 10                	mov    DWORD PTR [eax],edx
c00108ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f2:	83 ec 0c             	sub    esp,0xc
c00108f5:	50                   	push   eax
c00108f6:	e8 0d d7 ff ff       	call   c000e008 <Device::~Device()>
c00108fb:	83 c4 10             	add    esp,0x10
c00108fe:	90                   	nop
c00108ff:	83 c4 0c             	add    esp,0xc
c0010902:	c3                   	ret    
c0010903:	90                   	nop

c0010904 <Serial::~Serial()>:
c0010904:	83 ec 0c             	sub    esp,0xc
c0010907:	83 ec 0c             	sub    esp,0xc
c001090a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001090e:	e8 cd ff ff ff       	call   c00108e0 <Serial::~Serial()>
c0010913:	83 c4 10             	add    esp,0x10
c0010916:	83 ec 08             	sub    esp,0x8
c0010919:	68 58 01 00 00       	push   0x158
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	e8 ab c2 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0010927:	83 c4 10             	add    esp,0x10
c001092a:	83 c4 0c             	add    esp,0xc
c001092d:	c3                   	ret    
c001092e:	66 90                	xchg   ax,ax

c0010930 <Timer::Timer(char const*)>:
c0010930:	83 ec 0c             	sub    esp,0xc
c0010933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010937:	83 ec 08             	sub    esp,0x8
c001093a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001093e:	50                   	push   eax
c001093f:	e8 fa d9 ff ff       	call   c000e33e <Device::Device(char const*)>
c0010944:	83 c4 10             	add    esp,0x10
c0010947:	ba b8 4d 02 c0       	mov    edx,0xc0024db8
c001094c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010950:	89 10                	mov    DWORD PTR [eax],edx
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010960:	90                   	nop
c0010961:	83 c4 0c             	add    esp,0xc
c0010964:	c3                   	ret    
c0010965:	90                   	nop
c0010966:	66 90                	xchg   ax,ax

c0010968 <Timer::~Timer()>:
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	ba b8 4d 02 c0       	mov    edx,0xc0024db8
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	89 10                	mov    DWORD PTR [eax],edx
c0010976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097a:	83 ec 0c             	sub    esp,0xc
c001097d:	50                   	push   eax
c001097e:	e8 85 d6 ff ff       	call   c000e008 <Device::~Device()>
c0010983:	83 c4 10             	add    esp,0x10
c0010986:	90                   	nop
c0010987:	83 c4 0c             	add    esp,0xc
c001098a:	c3                   	ret    
c001098b:	90                   	nop

c001098c <Timer::~Timer()>:
c001098c:	83 ec 0c             	sub    esp,0xc
c001098f:	83 ec 0c             	sub    esp,0xc
c0010992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010996:	e8 cd ff ff ff       	call   c0010968 <Timer::~Timer()>
c001099b:	83 c4 10             	add    esp,0x10
c001099e:	83 ec 08             	sub    esp,0x8
c00109a1:	68 5c 01 00 00       	push   0x15c
c00109a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109aa:	e8 23 c2 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00109af:	83 c4 10             	add    esp,0x10
c00109b2:	83 c4 0c             	add    esp,0xc
c00109b5:	c3                   	ret    

c00109b6 <Timer::read()>:
c00109b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00109c0:	c3                   	ret    

c00109c1 <timerHandler(unsigned int)>:
c00109c1:	56                   	push   esi
c00109c2:	53                   	push   ebx
c00109c3:	51                   	push   ecx
c00109c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c8:	01 05 2c 81 02 c0    	add    DWORD PTR ds:0xc002812c,eax
c00109ce:	80 3d 0d 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b0d,0x0
c00109d5:	0f 84 49 01 00 00    	je     c0010b24 <timerHandler(unsigned int)+0x163>
c00109db:	fa                   	cli    
c00109dc:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c00109e2:	83 ec 0c             	sub    esp,0xc
c00109e5:	ff 05 c4 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc4
c00109eb:	68 d8 8f 02 c0       	push   0xc0028fd8
c00109f0:	e8 af 1f 01 00       	call   c00229a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	84 c0                	test   al,al
c00109fa:	0f 85 a0 00 00 00    	jne    c0010aa0 <timerHandler(unsigned int)+0xdf>
c0010a00:	83 ec 0c             	sub    esp,0xc
c0010a03:	68 d8 8f 02 c0       	push   0xc0028fd8
c0010a08:	e8 b3 1f 01 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a0d:	83 c4 10             	add    esp,0x10
c0010a10:	89 c6                	mov    esi,eax
c0010a12:	66 90                	xchg   ax,ax
c0010a14:	83 ec 0c             	sub    esp,0xc
c0010a17:	68 d8 8f 02 c0       	push   0xc0028fd8
c0010a1c:	e8 9f 1f 01 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a21:	c7 04 24 d8 8f 02 c0 	mov    DWORD PTR [esp],0xc0028fd8
c0010a28:	89 c3                	mov    ebx,eax
c0010a2a:	e8 99 1f 01 00       	call   c00229c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010a2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010a32:	83 c4 10             	add    esp,0x10
c0010a35:	3b 05 2c 81 02 c0    	cmp    eax,DWORD PTR ds:0xc002812c
c0010a3b:	77 23                	ja     c0010a60 <timerHandler(unsigned int)+0x9f>
c0010a3d:	83 ec 0c             	sub    esp,0xc
c0010a40:	53                   	push   ebx
c0010a41:	e8 a6 7e 00 00       	call   c00188ec <unblockTask(ThreadControlBlock*)>
c0010a46:	83 c4 10             	add    esp,0x10
c0010a49:	39 de                	cmp    esi,ebx
c0010a4b:	75 27                	jne    c0010a74 <timerHandler(unsigned int)+0xb3>
c0010a4d:	83 ec 0c             	sub    esp,0xc
c0010a50:	68 d8 8f 02 c0       	push   0xc0028fd8
c0010a55:	e8 66 1f 01 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a5a:	89 c6                	mov    esi,eax
c0010a5c:	eb 12                	jmp    c0010a70 <timerHandler(unsigned int)+0xaf>
c0010a5e:	66 90                	xchg   ax,ax
c0010a60:	52                   	push   edx
c0010a61:	52                   	push   edx
c0010a62:	53                   	push   ebx
c0010a63:	68 d8 8f 02 c0       	push   0xc0028fd8
c0010a68:	e8 13 20 01 00       	call   c0022a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a70:	83 c4 10             	add    esp,0x10
c0010a73:	90                   	nop
c0010a74:	83 ec 0c             	sub    esp,0xc
c0010a77:	68 d8 8f 02 c0       	push   0xc0028fd8
c0010a7c:	e8 23 1f 01 00       	call   c00229a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010a81:	83 c4 10             	add    esp,0x10
c0010a84:	84 c0                	test   al,al
c0010a86:	75 18                	jne    c0010aa0 <timerHandler(unsigned int)+0xdf>
c0010a88:	83 ec 0c             	sub    esp,0xc
c0010a8b:	68 d8 8f 02 c0       	push   0xc0028fd8
c0010a90:	e8 2b 1f 01 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a95:	83 c4 10             	add    esp,0x10
c0010a98:	39 f0                	cmp    eax,esi
c0010a9a:	0f 85 74 ff ff ff    	jne    c0010a14 <timerHandler(unsigned int)+0x53>
c0010aa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010aa5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010aa9:	74 41                	je     c0010aec <timerHandler(unsigned int)+0x12b>
c0010aab:	80 3d 0c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b0c,0x0
c0010ab2:	74 38                	je     c0010aec <timerHandler(unsigned int)+0x12b>
c0010ab4:	fa                   	cli    
c0010ab5:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0010abb:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0010ac0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010ac6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010ac9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010acf:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010ad2:	72 08                	jb     c0010adc <timerHandler(unsigned int)+0x11b>
c0010ad4:	e8 57 79 00 00       	call   c0018430 <schedule()>
c0010ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0010adc:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0010ae1:	48                   	dec    eax
c0010ae2:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0010ae7:	75 03                	jne    c0010aec <timerHandler(unsigned int)+0x12b>
c0010ae9:	fb                   	sti    
c0010aea:	66 90                	xchg   ax,ax
c0010aec:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c0010af1:	48                   	dec    eax
c0010af2:	a3 c4 8f 02 c0       	mov    ds:0xc0028fc4,eax
c0010af7:	75 1b                	jne    c0010b14 <timerHandler(unsigned int)+0x153>
c0010af9:	83 3d c0 8f 02 c0 00 	cmp    DWORD PTR ds:0xc0028fc0,0x0
c0010b00:	74 12                	je     c0010b14 <timerHandler(unsigned int)+0x153>
c0010b02:	c7 05 c0 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x0
c0010b0c:	e8 1f 79 00 00       	call   c0018430 <schedule()>
c0010b11:	8d 76 00             	lea    esi,[esi+0x0]
c0010b14:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0010b19:	48                   	dec    eax
c0010b1a:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0010b1f:	75 03                	jne    c0010b24 <timerHandler(unsigned int)+0x163>
c0010b21:	fb                   	sti    
c0010b22:	66 90                	xchg   ax,ax
c0010b24:	58                   	pop    eax
c0010b25:	5b                   	pop    ebx
c0010b26:	5e                   	pop    esi
c0010b27:	c3                   	ret    

c0010b28 <setupTimer(int)>:
c0010b28:	57                   	push   edi
c0010b29:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0010b2e:	56                   	push   esi
c0010b2f:	53                   	push   ebx
c0010b30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b3a:	83 ec 0c             	sub    esp,0xc
c0010b3d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010b43:	e8 f2 d8 ff ff       	call   c000e43a <Device::getName()>
c0010b48:	83 c4 10             	add    esp,0x10
c0010b4b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b4e:	0f 85 94 00 00 00    	jne    c0010be8 <setupTimer(int)+0xc0>
c0010b54:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0010b59:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010b60:	0f 84 82 00 00 00    	je     c0010be8 <setupTimer(int)+0xc0>
c0010b66:	83 ec 0c             	sub    esp,0xc
c0010b69:	68 5c 01 00 00       	push   0x15c
c0010b6e:	e8 50 8e ff ff       	call   c00099c3 <malloc>
c0010b73:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b76:	89 c3                	mov    ebx,eax
c0010b78:	e8 2b 14 01 00       	call   c0021fa8 <PIT::PIT()>
c0010b7d:	59                   	pop    ecx
c0010b7e:	5f                   	pop    edi
c0010b7f:	53                   	push   ebx
c0010b80:	ff 35 08 7b 02 c0    	push   DWORD PTR ds:0xc0027b08
c0010b86:	e8 af d5 ff ff       	call   c000e13a <Device::addChild(Device*)>
c0010b8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b8d:	6a 00                	push   0x0
c0010b8f:	6a 00                	push   0x0
c0010b91:	56                   	push   esi
c0010b92:	53                   	push   ebx
c0010b93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b96:	83 c4 14             	add    esp,0x14
c0010b99:	68 60 01 00 00       	push   0x160
c0010b9e:	e8 20 8e ff ff       	call   c00099c3 <malloc>
c0010ba3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ba6:	89 c7                	mov    edi,eax
c0010ba8:	e8 af 12 01 00       	call   c0021e5c <APICTimer::APICTimer()>
c0010bad:	6a 00                	push   0x0
c0010baf:	6a 00                	push   0x0
c0010bb1:	56                   	push   esi
c0010bb2:	57                   	push   edi
c0010bb3:	e8 a4 11 01 00       	call   c0021d5c <APICTimer::open(int, int, void*)>
c0010bb8:	83 c4 20             	add    esp,0x20
c0010bbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bbd:	6a 00                	push   0x0
c0010bbf:	6a 00                	push   0x0
c0010bc1:	6a 00                	push   0x0
c0010bc3:	53                   	push   ebx
c0010bc4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010bc7:	58                   	pop    eax
c0010bc8:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0010bcd:	5a                   	pop    edx
c0010bce:	57                   	push   edi
c0010bcf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010bd5:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010bdb:	e8 5a d5 ff ff       	call   c000e13a <Device::addChild(Device*)>
c0010be0:	83 c4 10             	add    esp,0x10
c0010be3:	eb 37                	jmp    c0010c1c <setupTimer(int)+0xf4>
c0010be5:	8d 76 00             	lea    esi,[esi+0x0]
c0010be8:	83 ec 0c             	sub    esp,0xc
c0010beb:	68 5c 01 00 00       	push   0x15c
c0010bf0:	e8 ce 8d ff ff       	call   c00099c3 <malloc>
c0010bf5:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bf8:	89 c3                	mov    ebx,eax
c0010bfa:	e8 a9 13 01 00       	call   c0021fa8 <PIT::PIT()>
c0010bff:	58                   	pop    eax
c0010c00:	5a                   	pop    edx
c0010c01:	53                   	push   ebx
c0010c02:	ff 35 08 7b 02 c0    	push   DWORD PTR ds:0xc0027b08
c0010c08:	e8 2d d5 ff ff       	call   c000e13a <Device::addChild(Device*)>
c0010c0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c0f:	6a 00                	push   0x0
c0010c11:	6a 00                	push   0x0
c0010c13:	56                   	push   esi
c0010c14:	53                   	push   ebx
c0010c15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c18:	83 c4 20             	add    esp,0x20
c0010c1b:	90                   	nop
c0010c1c:	89 d8                	mov    eax,ebx
c0010c1e:	5b                   	pop    ebx
c0010c1f:	5e                   	pop    esi
c0010c20:	5f                   	pop    edi
c0010c21:	c3                   	ret    
c0010c22:	66 90                	xchg   ax,ax

c0010c24 <VCache::VCache(PhysicalDisk*)>:
c0010c24:	53                   	push   ebx
c0010c25:	83 ec 18             	sub    esp,0x18
c0010c28:	ba e8 4d 02 c0       	mov    edx,0xc0024de8
c0010c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c31:	89 10                	mov    DWORD PTR [eax],edx
c0010c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c37:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010c3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c42:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c4d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010c54:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010c5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c5f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010c66:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010c6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c71:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010c78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c7c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010c80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c84:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010c8b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010c92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c96:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c9e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ca6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cae:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010cb5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010cbd:	83 ec 0c             	sub    esp,0xc
c0010cc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010cc4:	e8 fa 8c ff ff       	call   c00099c3 <malloc>
c0010cc9:	83 c4 10             	add    esp,0x10
c0010ccc:	89 c3                	mov    ebx,eax
c0010cce:	83 ec 0c             	sub    esp,0xc
c0010cd1:	53                   	push   ebx
c0010cd2:	e8 29 75 00 00       	call   c0018200 <Mutex::Mutex()>
c0010cd7:	83 c4 10             	add    esp,0x10
c0010cda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cde:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010ce1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ce5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010ce9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cf0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010cf7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010cfb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d05:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d0c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010d12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d18:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010d1c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010d1f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d26:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010d2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d2e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d34:	05 00 01 00 00       	add    eax,0x100
c0010d39:	c1 e0 04             	shl    eax,0x4
c0010d3c:	83 ec 0c             	sub    esp,0xc
c0010d3f:	50                   	push   eax
c0010d40:	e8 7e 8c ff ff       	call   c00099c3 <malloc>
c0010d45:	83 c4 10             	add    esp,0x10
c0010d48:	89 c2                	mov    edx,eax
c0010d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d4e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d55:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d60:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010d64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d68:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d6e:	c1 e0 06             	shl    eax,0x6
c0010d71:	83 ec 0c             	sub    esp,0xc
c0010d74:	50                   	push   eax
c0010d75:	e8 49 8c ff ff       	call   c00099c3 <malloc>
c0010d7a:	83 c4 10             	add    esp,0x10
c0010d7d:	89 c2                	mov    edx,eax
c0010d7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d83:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010d86:	90                   	nop
c0010d87:	83 c4 18             	add    esp,0x18
c0010d8a:	5b                   	pop    ebx
c0010d8b:	c3                   	ret    

c0010d8c <VCache::invalidateReadBuffer()>:
c0010d8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d90:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010d96:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010d9a:	c3                   	ret    
c0010d9b:	90                   	nop

c0010d9c <VCache::writeWriteBuffer()>:
c0010d9c:	53                   	push   ebx
c0010d9d:	83 ec 14             	sub    esp,0x14
c0010da0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010da4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010da7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010da9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010dac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010daf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010db2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010db5:	50                   	push   eax
c0010db6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010db9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010dc0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010dc7:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010dcb:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010dd2:	83 c4 28             	add    esp,0x28
c0010dd5:	5b                   	pop    ebx
c0010dd6:	c3                   	ret    
c0010dd7:	90                   	nop

c0010dd8 <VCache::~VCache()>:
c0010dd8:	83 ec 0c             	sub    esp,0xc
c0010ddb:	ba e8 4d 02 c0       	mov    edx,0xc0024de8
c0010de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de4:	89 10                	mov    DWORD PTR [eax],edx
c0010de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dea:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010ded:	84 c0                	test   al,al
c0010def:	74 0f                	je     c0010e00 <VCache::~VCache()+0x28>
c0010df1:	83 ec 0c             	sub    esp,0xc
c0010df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df8:	e8 9f ff ff ff       	call   c0010d9c <VCache::writeWriteBuffer()>
c0010dfd:	83 c4 10             	add    esp,0x10
c0010e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e04:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010e07:	83 ec 0c             	sub    esp,0xc
c0010e0a:	50                   	push   eax
c0010e0b:	e8 c3 8b ff ff       	call   c00099d3 <free>
c0010e10:	83 c4 10             	add    esp,0x10
c0010e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e17:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010e1a:	83 ec 0c             	sub    esp,0xc
c0010e1d:	50                   	push   eax
c0010e1e:	e8 b0 8b ff ff       	call   c00099d3 <free>
c0010e23:	83 c4 10             	add    esp,0x10
c0010e26:	90                   	nop
c0010e27:	83 c4 0c             	add    esp,0xc
c0010e2a:	c3                   	ret    
c0010e2b:	90                   	nop

c0010e2c <VCache::~VCache()>:
c0010e2c:	83 ec 0c             	sub    esp,0xc
c0010e2f:	83 ec 0c             	sub    esp,0xc
c0010e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e36:	e8 9d ff ff ff       	call   c0010dd8 <VCache::~VCache()>
c0010e3b:	83 c4 10             	add    esp,0x10
c0010e3e:	83 ec 08             	sub    esp,0x8
c0010e41:	6a 44                	push   0x44
c0010e43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e47:	e8 86 bd ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0010e4c:	83 c4 10             	add    esp,0x10
c0010e4f:	83 c4 0c             	add    esp,0xc
c0010e52:	c3                   	ret    
c0010e53:	90                   	nop

c0010e54 <VCache::write(unsigned long long, int, void*)>:
c0010e54:	55                   	push   ebp
c0010e55:	31 c0                	xor    eax,eax
c0010e57:	57                   	push   edi
c0010e58:	56                   	push   esi
c0010e59:	53                   	push   ebx
c0010e5a:	83 ec 0c             	sub    esp,0xc
c0010e5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010e61:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010e65:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010e69:	8d 76 00             	lea    esi,[esi+0x0]
c0010e6c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010e70:	7d 1a                	jge    c0010e8c <VCache::write(unsigned long long, int, void*)+0x38>
c0010e72:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010e75:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010e7b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e7f:	0f af c8             	imul   ecx,eax
c0010e82:	01 ca                	add    edx,ecx
c0010e84:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010e86:	40                   	inc    eax
c0010e87:	eb e3                	jmp    c0010e6c <VCache::write(unsigned long long, int, void*)+0x18>
c0010e89:	8d 76 00             	lea    esi,[esi+0x0]
c0010e8c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010e90:	74 0a                	je     c0010e9c <VCache::write(unsigned long long, int, void*)+0x48>
c0010e92:	53                   	push   ebx
c0010e93:	e8 f4 fe ff ff       	call   c0010d8c <VCache::invalidateReadBuffer()>
c0010e98:	58                   	pop    eax
c0010e99:	8d 76 00             	lea    esi,[esi+0x0]
c0010e9c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010ea0:	74 5e                	je     c0010f00 <VCache::write(unsigned long long, int, void*)+0xac>
c0010ea2:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010ea5:	89 e8                	mov    eax,ebp
c0010ea7:	99                   	cdq    
c0010ea8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010eab:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010eae:	89 c1                	mov    ecx,eax
c0010eb0:	89 d0                	mov    eax,edx
c0010eb2:	31 f1                	xor    ecx,esi
c0010eb4:	31 f8                	xor    eax,edi
c0010eb6:	09 c1                	or     ecx,eax
c0010eb8:	75 3a                	jne    c0010ef4 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010eba:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010ebf:	75 33                	jne    c0010ef4 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010ec1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ec4:	89 ef                	mov    edi,ebp
c0010ec6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010ecc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ed0:	0f af f9             	imul   edi,ecx
c0010ed3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010ed6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ed8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010edb:	40                   	inc    eax
c0010edc:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010edf:	83 f8 40             	cmp    eax,0x40
c0010ee2:	75 60                	jne    c0010f44 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010ee4:	83 ec 0c             	sub    esp,0xc
c0010ee7:	53                   	push   ebx
c0010ee8:	e8 af fe ff ff       	call   c0010d9c <VCache::writeWriteBuffer()>
c0010eed:	83 c4 10             	add    esp,0x10
c0010ef0:	eb 52                	jmp    c0010f44 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010ef2:	66 90                	xchg   ax,ax
c0010ef4:	83 ec 0c             	sub    esp,0xc
c0010ef7:	53                   	push   ebx
c0010ef8:	e8 9f fe ff ff       	call   c0010d9c <VCache::writeWriteBuffer()>
c0010efd:	83 c4 10             	add    esp,0x10
c0010f00:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f03:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010f08:	7f 22                	jg     c0010f2c <VCache::write(unsigned long long, int, void*)+0xd8>
c0010f0a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0010f0d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0010f10:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010f14:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010f18:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0010f1b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010f1e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010f24:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f2a:	eb 18                	jmp    c0010f44 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010f2c:	83 ec 0c             	sub    esp,0xc
c0010f2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f39:	57                   	push   edi
c0010f3a:	56                   	push   esi
c0010f3b:	50                   	push   eax
c0010f3c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010f3f:	83 c4 20             	add    esp,0x20
c0010f42:	66 90                	xchg   ax,ax
c0010f44:	83 c4 0c             	add    esp,0xc
c0010f47:	31 c0                	xor    eax,eax
c0010f49:	5b                   	pop    ebx
c0010f4a:	5e                   	pop    esi
c0010f4b:	5f                   	pop    edi
c0010f4c:	5d                   	pop    ebp
c0010f4d:	c3                   	ret    

c0010f4e <VCache::read(unsigned long long, int, void*)>:
c0010f4e:	55                   	push   ebp
c0010f4f:	31 c0                	xor    eax,eax
c0010f51:	57                   	push   edi
c0010f52:	56                   	push   esi
c0010f53:	53                   	push   ebx
c0010f54:	83 ec 1c             	sub    esp,0x1c
c0010f57:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f5b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010f5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010f63:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010f67:	90                   	nop
c0010f68:	39 e8                	cmp    eax,ebp
c0010f6a:	7d 18                	jge    c0010f84 <VCache::read(unsigned long long, int, void*)+0x36>
c0010f6c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010f6f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010f75:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010f79:	0f af c8             	imul   ecx,eax
c0010f7c:	01 ca                	add    edx,ecx
c0010f7e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010f80:	40                   	inc    eax
c0010f81:	eb e5                	jmp    c0010f68 <VCache::read(unsigned long long, int, void*)+0x1a>
c0010f83:	90                   	nop
c0010f84:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010f88:	74 0e                	je     c0010f98 <VCache::read(unsigned long long, int, void*)+0x4a>
c0010f8a:	83 ec 0c             	sub    esp,0xc
c0010f8d:	53                   	push   ebx
c0010f8e:	e8 09 fe ff ff       	call   c0010d9c <VCache::writeWriteBuffer()>
c0010f93:	83 c4 10             	add    esp,0x10
c0010f96:	66 90                	xchg   ax,ax
c0010f98:	83 fd 01             	cmp    ebp,0x1
c0010f9b:	0f 85 87 00 00 00    	jne    c0011028 <VCache::read(unsigned long long, int, void*)+0xda>
c0010fa1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010fa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fa8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010faf:	75 77                	jne    c0011028 <VCache::read(unsigned long long, int, void*)+0xda>
c0010fb1:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0010fb4:	89 e9                	mov    ecx,ebp
c0010fb6:	f7 d9                	neg    ecx
c0010fb8:	89 c8                	mov    eax,ecx
c0010fba:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010fbe:	c1 f8 1f             	sar    eax,0x1f
c0010fc1:	21 f1                	and    ecx,esi
c0010fc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fc7:	89 c8                	mov    eax,ecx
c0010fc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010fcd:	21 f9                	and    ecx,edi
c0010fcf:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010fd3:	89 ca                	mov    edx,ecx
c0010fd5:	74 0d                	je     c0010fe4 <VCache::read(unsigned long long, int, void*)+0x96>
c0010fd7:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010fda:	75 08                	jne    c0010fe4 <VCache::read(unsigned long long, int, void*)+0x96>
c0010fdc:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0010fdf:	74 27                	je     c0011008 <VCache::read(unsigned long long, int, void*)+0xba>
c0010fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0010fe4:	83 ec 0c             	sub    esp,0xc
c0010fe7:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010feb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010fef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0010ff2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0010ff5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0010ff7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010ffa:	55                   	push   ebp
c0010ffb:	52                   	push   edx
c0010ffc:	50                   	push   eax
c0010ffd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011001:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011004:	83 c4 20             	add    esp,0x20
c0011007:	90                   	nop
c0011008:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001100b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001100f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011015:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0011018:	48                   	dec    eax
c0011019:	21 c6                	and    esi,eax
c001101b:	0f af f1             	imul   esi,ecx
c001101e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011021:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011023:	eb 23                	jmp    c0011048 <VCache::read(unsigned long long, int, void*)+0xfa>
c0011025:	8d 76 00             	lea    esi,[esi+0x0]
c0011028:	83 ec 0c             	sub    esp,0xc
c001102b:	53                   	push   ebx
c001102c:	e8 5b fd ff ff       	call   c0010d8c <VCache::invalidateReadBuffer()>
c0011031:	5a                   	pop    edx
c0011032:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011035:	8b 10                	mov    edx,DWORD PTR [eax]
c0011037:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001103b:	55                   	push   ebp
c001103c:	57                   	push   edi
c001103d:	56                   	push   esi
c001103e:	50                   	push   eax
c001103f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0011042:	83 c4 20             	add    esp,0x20
c0011045:	8d 76 00             	lea    esi,[esi+0x0]
c0011048:	83 c4 1c             	add    esp,0x1c
c001104b:	31 c0                	xor    eax,eax
c001104d:	5b                   	pop    ebx
c001104e:	5e                   	pop    esi
c001104f:	5f                   	pop    edi
c0011050:	5d                   	pop    ebp
c0011051:	c3                   	ret    

c0011052 <Video::putrect(int, int, int, int, unsigned int)>:
c0011052:	55                   	push   ebp
c0011053:	57                   	push   edi
c0011054:	56                   	push   esi
c0011055:	53                   	push   ebx
c0011056:	83 ec 1c             	sub    esp,0x1c
c0011059:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001105d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011061:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011065:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0011069:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001106d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011071:	01 df                	add    edi,ebx
c0011073:	39 fb                	cmp    ebx,edi
c0011075:	7d 1f                	jge    c0011096 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0011077:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001107b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001107f:	7d 12                	jge    c0011093 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0011081:	8b 16                	mov    edx,DWORD PTR [esi]
c0011083:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011087:	53                   	push   ebx
c0011088:	55                   	push   ebp
c0011089:	45                   	inc    ebp
c001108a:	56                   	push   esi
c001108b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001108e:	83 c4 10             	add    esp,0x10
c0011091:	eb e8                	jmp    c001107b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0011093:	43                   	inc    ebx
c0011094:	eb dd                	jmp    c0011073 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0011096:	83 c4 1c             	add    esp,0x1c
c0011099:	5b                   	pop    ebx
c001109a:	5e                   	pop    esi
c001109b:	5f                   	pop    edi
c001109c:	5d                   	pop    ebp
c001109d:	c3                   	ret    

c001109e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001109e:	55                   	push   ebp
c001109f:	57                   	push   edi
c00110a0:	31 ff                	xor    edi,edi
c00110a2:	56                   	push   esi
c00110a3:	53                   	push   ebx
c00110a4:	83 ec 1c             	sub    esp,0x1c
c00110a7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00110ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00110af:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00110b6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00110bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00110bf:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00110c3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00110c7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00110ca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00110ce:	01 f9                	add    ecx,edi
c00110d0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00110d4:	7d 2f                	jge    c0011105 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00110d6:	31 f6                	xor    esi,esi
c00110d8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00110dc:	01 f2                	add    edx,esi
c00110de:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00110e2:	7d 1a                	jge    c00110fe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00110e4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00110e7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00110ea:	46                   	inc    esi
c00110eb:	51                   	push   ecx
c00110ec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00110f0:	52                   	push   edx
c00110f1:	55                   	push   ebp
c00110f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00110f5:	83 c4 10             	add    esp,0x10
c00110f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00110fc:	eb da                	jmp    c00110d8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00110fe:	47                   	inc    edi
c00110ff:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0011103:	eb c5                	jmp    c00110ca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011105:	83 c4 1c             	add    esp,0x1c
c0011108:	5b                   	pop    ebx
c0011109:	5e                   	pop    esi
c001110a:	5f                   	pop    edi
c001110b:	5d                   	pop    ebp
c001110c:	c3                   	ret    
c001110d:	90                   	nop

c001110e <Video::blit(unsigned int*, int, int, int, int)>:
c001110e:	55                   	push   ebp
c001110f:	57                   	push   edi
c0011110:	56                   	push   esi
c0011111:	53                   	push   ebx
c0011112:	83 ec 1c             	sub    esp,0x1c
c0011115:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011119:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001111d:	85 c0                	test   eax,eax
c001111f:	79 02                	jns    c0011123 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011121:	31 c0                	xor    eax,eax
c0011123:	c1 e0 02             	shl    eax,0x2
c0011126:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001112a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001112e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011132:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0011136:	39 d8                	cmp    eax,ebx
c0011138:	7e 49                	jle    c0011183 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001113a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011140:	7c 41                	jl     c0011183 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011142:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011146:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001114a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001114e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0011152:	39 f9                	cmp    ecx,edi
c0011154:	7e 22                	jle    c0011178 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0011156:	83 c5 04             	add    ebp,0x4
c0011159:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001115f:	7c 14                	jl     c0011175 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0011161:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011163:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0011166:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001116a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001116e:	56                   	push   esi
c001116f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0011172:	83 c4 10             	add    esp,0x10
c0011175:	47                   	inc    edi
c0011176:	eb d2                	jmp    c001114a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0011178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001117c:	43                   	inc    ebx
c001117d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011181:	eb ab                	jmp    c001112e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0011183:	83 c4 1c             	add    esp,0x1c
c0011186:	5b                   	pop    ebx
c0011187:	5e                   	pop    esi
c0011188:	5f                   	pop    edi
c0011189:	5d                   	pop    ebp
c001118a:	c3                   	ret    
c001118b:	90                   	nop

c001118c <Video::clearScreen(unsigned int)>:
c001118c:	57                   	push   edi
c001118d:	56                   	push   esi
c001118e:	53                   	push   ebx
c001118f:	31 db                	xor    ebx,ebx
c0011191:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011195:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001119b:	7e 1f                	jle    c00111bc <Video::clearScreen(unsigned int)+0x30>
c001119d:	31 ff                	xor    edi,edi
c001119f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00111a5:	7e 12                	jle    c00111b9 <Video::clearScreen(unsigned int)+0x2d>
c00111a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00111a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00111ad:	53                   	push   ebx
c00111ae:	57                   	push   edi
c00111af:	47                   	inc    edi
c00111b0:	56                   	push   esi
c00111b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111b4:	83 c4 10             	add    esp,0x10
c00111b7:	eb e6                	jmp    c001119f <Video::clearScreen(unsigned int)+0x13>
c00111b9:	43                   	inc    ebx
c00111ba:	eb d9                	jmp    c0011195 <Video::clearScreen(unsigned int)+0x9>
c00111bc:	5b                   	pop    ebx
c00111bd:	5e                   	pop    esi
c00111be:	5f                   	pop    edi
c00111bf:	c3                   	ret    

c00111c0 <Video::putpixel(int, int, unsigned int)>:
c00111c0:	c7 44 24 04 f0 4d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024df0
c00111c8:	e9 92 36 00 00       	jmp    c001485f <Krnl::panic(char const*)>
c00111cd:	90                   	nop

c00111ce <Video::Video(char const*)>:
c00111ce:	83 ec 0c             	sub    esp,0xc
c00111d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d5:	83 ec 08             	sub    esp,0x8
c00111d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111dc:	50                   	push   eax
c00111dd:	e8 5c d1 ff ff       	call   c000e33e <Device::Device(char const*)>
c00111e2:	83 c4 10             	add    esp,0x10
c00111e5:	ba 60 4e 02 c0       	mov    edx,0xc0024e60
c00111ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ee:	89 10                	mov    DWORD PTR [eax],edx
c00111f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00111fe:	90                   	nop
c00111ff:	83 c4 0c             	add    esp,0xc
c0011202:	c3                   	ret    
c0011203:	90                   	nop

c0011204 <Video::~Video()>:
c0011204:	83 ec 0c             	sub    esp,0xc
c0011207:	ba 60 4e 02 c0       	mov    edx,0xc0024e60
c001120c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011210:	89 10                	mov    DWORD PTR [eax],edx
c0011212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011216:	83 ec 0c             	sub    esp,0xc
c0011219:	50                   	push   eax
c001121a:	e8 e9 cd ff ff       	call   c000e008 <Device::~Device()>
c001121f:	83 c4 10             	add    esp,0x10
c0011222:	90                   	nop
c0011223:	83 c4 0c             	add    esp,0xc
c0011226:	c3                   	ret    
c0011227:	90                   	nop

c0011228 <Video::~Video()>:
c0011228:	83 ec 0c             	sub    esp,0xc
c001122b:	83 ec 0c             	sub    esp,0xc
c001122e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011232:	e8 cd ff ff ff       	call   c0011204 <Video::~Video()>
c0011237:	83 c4 10             	add    esp,0x10
c001123a:	83 ec 08             	sub    esp,0x8
c001123d:	68 64 01 00 00       	push   0x164
c0011242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011246:	e8 87 b9 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c001124b:	83 c4 10             	add    esp,0x10
c001124e:	83 c4 0c             	add    esp,0xc
c0011251:	c3                   	ret    

c0011252 <Video::isMonochrome()>:
c0011252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011256:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001125c:	c3                   	ret    
c001125d:	90                   	nop

c001125e <Video::getWidth()>:
c001125e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011262:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011268:	c3                   	ret    
c0011269:	90                   	nop

c001126a <Video::getHeight()>:
c001126a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001126e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011274:	c3                   	ret    
c0011275:	90                   	nop

c0011276 <Video::drawCursor(int, int, unsigned char*, int)>:
c0011276:	55                   	push   ebp
c0011277:	57                   	push   edi
c0011278:	56                   	push   esi
c0011279:	53                   	push   ebx
c001127a:	83 ec 2c             	sub    esp,0x2c
c001127d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011281:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011285:	83 f8 01             	cmp    eax,0x1
c0011288:	19 c9                	sbb    ecx,ecx
c001128a:	31 db                	xor    ebx,ebx
c001128c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011290:	89 cd                	mov    ebp,ecx
c0011292:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001129a:	f7 d5                	not    ebp
c001129c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00112a2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00112a6:	01 d8                	add    eax,ebx
c00112a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112ac:	56                   	push   esi
c00112ad:	e8 b8 ff ff ff       	call   c001126a <Video::getHeight()>
c00112b2:	59                   	pop    ecx
c00112b3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00112b7:	7e 70                	jle    c0011329 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00112b9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00112bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00112c1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00112c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00112c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00112cc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00112d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00112d7:	89 f8                	mov    eax,edi
c00112d9:	83 c0 20             	add    eax,0x20
c00112dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112e0:	56                   	push   esi
c00112e1:	e8 78 ff ff ff       	call   c001125e <Video::getWidth()>
c00112e6:	5a                   	pop    edx
c00112e7:	39 c7                	cmp    edi,eax
c00112e9:	7d 34                	jge    c001131f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00112eb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00112f0:	74 05                	je     c00112f7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00112f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00112f4:	55                   	push   ebp
c00112f5:	eb 0d                	jmp    c0011304 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00112f7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00112fc:	74 12                	je     c0011310 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00112fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0011300:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011304:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011308:	57                   	push   edi
c0011309:	56                   	push   esi
c001130a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001130d:	83 c4 10             	add    esp,0x10
c0011310:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011314:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011318:	47                   	inc    edi
c0011319:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001131d:	75 c1                	jne    c00112e0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001131f:	43                   	inc    ebx
c0011320:	83 fb 20             	cmp    ebx,0x20
c0011323:	0f 85 79 ff ff ff    	jne    c00112a2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011329:	83 c4 2c             	add    esp,0x2c
c001132c:	5b                   	pop    ebx
c001132d:	5e                   	pop    esi
c001132e:	5f                   	pop    edi
c001132f:	5d                   	pop    ebp
c0011330:	c3                   	ret    
c0011331:	90                   	nop

c0011332 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011332:	55                   	push   ebp
c0011333:	57                   	push   edi
c0011334:	56                   	push   esi
c0011335:	53                   	push   ebx
c0011336:	83 ec 28             	sub    esp,0x28
c0011339:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001133d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011341:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011345:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011349:	c1 e6 08             	shl    esi,0x8
c001134c:	01 c6                	add    esi,eax
c001134e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011352:	c1 e0 08             	shl    eax,0x8
c0011355:	01 d0                	add    eax,edx
c0011357:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001135b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001135f:	0f af c6             	imul   eax,esi
c0011362:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0011369:	50                   	push   eax
c001136a:	e8 54 86 ff ff       	call   c00099c3 <malloc>
c001136f:	83 c4 10             	add    esp,0x10
c0011372:	89 c7                	mov    edi,eax
c0011374:	85 c0                	test   eax,eax
c0011376:	75 10                	jne    c0011388 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011378:	83 ec 0c             	sub    esp,0xc
c001137b:	68 11 4e 02 c0       	push   0xc0024e11
c0011380:	e8 da 34 00 00       	call   c001485f <Krnl::panic(char const*)>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001138b:	ba 12 00 00 00       	mov    edx,0x12
c0011390:	84 c0                	test   al,al
c0011392:	74 11                	je     c00113a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011394:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011398:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001139c:	c1 fa 03             	sar    edx,0x3
c001139f:	0f af d1             	imul   edx,ecx
c00113a2:	83 c2 12             	add    edx,0x12
c00113a5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00113a9:	74 04                	je     c00113af <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00113ab:	85 f6                	test   esi,esi
c00113ad:	75 12                	jne    c00113c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00113af:	83 ec 0c             	sub    esp,0xc
c00113b2:	68 21 4e 02 c0       	push   0xc0024e21
c00113b7:	e8 f7 b8 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00113bc:	e9 b8 00 00 00       	jmp    c0011479 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00113c1:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00113c5:	80 f9 02             	cmp    cl,0x2
c00113c8:	0f 85 96 00 00 00    	jne    c0011464 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00113ce:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00113d3:	75 0e                	jne    c00113e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00113d5:	84 c0                	test   al,al
c00113d7:	75 0a                	jne    c00113e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00113d9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00113dc:	83 e8 18             	sub    eax,0x18
c00113df:	a8 f7                	test   al,0xf7
c00113e1:	74 0a                	je     c00113ed <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00113e3:	83 ec 0c             	sub    esp,0xc
c00113e6:	68 36 4e 02 c0       	push   0xc0024e36
c00113eb:	eb 7f                	jmp    c001146c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00113ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113f5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00113fd:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011401:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011409:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001140d:	75 0c                	jne    c001141b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001140f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011414:	c1 e0 18             	shl    eax,0x18
c0011417:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001141b:	45                   	inc    ebp
c001141c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011421:	c1 e1 10             	shl    ecx,0x10
c0011424:	89 c8                	mov    eax,ecx
c0011426:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001142b:	c1 e1 08             	shl    ecx,0x8
c001142e:	09 c1                	or     ecx,eax
c0011430:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011434:	09 c1                	or     ecx,eax
c0011436:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001143a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001143e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011442:	c1 f8 03             	sar    eax,0x3
c0011445:	01 c2                	add    edx,eax
c0011447:	89 e8                	mov    eax,ebp
c0011449:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001144d:	39 c6                	cmp    esi,eax
c001144f:	7f b0                	jg     c0011401 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011451:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011455:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011459:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001145c:	7e 22                	jle    c0011480 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001145e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011462:	eb 99                	jmp    c00113fd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011464:	50                   	push   eax
c0011465:	50                   	push   eax
c0011466:	51                   	push   ecx
c0011467:	68 44 4e 02 c0       	push   0xc0024e44
c001146c:	e8 42 b8 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0011471:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011474:	e8 5a 85 ff ff       	call   c00099d3 <free>
c0011479:	83 c4 10             	add    esp,0x10
c001147c:	31 ff                	xor    edi,edi
c001147e:	eb 0f                	jmp    c001148f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011480:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011484:	89 30                	mov    DWORD PTR [eax],esi
c0011486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001148a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001148d:	89 30                	mov    DWORD PTR [eax],esi
c001148f:	83 c4 1c             	add    esp,0x1c
c0011492:	89 f8                	mov    eax,edi
c0011494:	5b                   	pop    ebx
c0011495:	5e                   	pop    esi
c0011496:	5f                   	pop    edi
c0011497:	5d                   	pop    ebp
c0011498:	c3                   	ret    
c0011499:	90                   	nop

c001149a <Video::putTGA(int, int, unsigned char*, int)>:
c001149a:	55                   	push   ebp
c001149b:	57                   	push   edi
c001149c:	56                   	push   esi
c001149d:	53                   	push   ebx
c001149e:	83 ec 28             	sub    esp,0x28
c00114a1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00114a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00114a9:	50                   	push   eax
c00114aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00114ae:	50                   	push   eax
c00114af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00114b3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00114b7:	56                   	push   esi
c00114b8:	e8 75 fe ff ff       	call   c0011332 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00114bd:	83 c4 20             	add    esp,0x20
c00114c0:	85 c0                	test   eax,eax
c00114c2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00114c6:	74 35                	je     c00114fd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00114c8:	89 c7                	mov    edi,eax
c00114ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00114ce:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00114d2:	39 d8                	cmp    eax,ebx
c00114d4:	7e 27                	jle    c00114fd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00114d6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00114da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00114e2:	39 e8                	cmp    eax,ebp
c00114e4:	7e 14                	jle    c00114fa <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00114e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00114e8:	83 c7 04             	add    edi,0x4
c00114eb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00114ee:	53                   	push   ebx
c00114ef:	55                   	push   ebp
c00114f0:	45                   	inc    ebp
c00114f1:	56                   	push   esi
c00114f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114f5:	83 c4 10             	add    esp,0x10
c00114f8:	eb e0                	jmp    c00114da <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00114fa:	43                   	inc    ebx
c00114fb:	eb cd                	jmp    c00114ca <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00114fd:	83 c4 1c             	add    esp,0x1c
c0011500:	5b                   	pop    ebx
c0011501:	5e                   	pop    esi
c0011502:	5f                   	pop    edi
c0011503:	5d                   	pop    ebp
c0011504:	c3                   	ret    
c0011505:	66 90                	xchg   ax,ax
c0011507:	90                   	nop

c0011508 <ACPI::close(int, int, void*)>:
c0011508:	83 ec 1c             	sub    esp,0x1c
c001150b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011513:	74 0b                	je     c0011520 <ACPI::close(int, int, void*)+0x18>
c0011515:	b8 00 00 00 00       	mov    eax,0x0
c001151a:	e9 99 00 00 00       	jmp    c00115b8 <ACPI::close(int, int, void*)+0xb0>
c001151f:	90                   	nop
c0011520:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011525:	75 29                	jne    c0011550 <ACPI::close(int, int, void*)+0x48>
c0011527:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c001152c:	85 c0                	test   eax,eax
c001152e:	74 08                	je     c0011538 <ACPI::close(int, int, void*)+0x30>
c0011530:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0011535:	ff d0                	call   eax
c0011537:	90                   	nop
c0011538:	83 ec 0c             	sub    esp,0xc
c001153b:	68 a0 4e 02 c0       	push   0xc0024ea0
c0011540:	e8 1a 33 00 00       	call   c001485f <Krnl::panic(char const*)>
c0011545:	83 c4 10             	add    esp,0x10
c0011548:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001154d:	eb 69                	jmp    c00115b8 <ACPI::close(int, int, void*)+0xb0>
c001154f:	90                   	nop
c0011550:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011555:	75 59                	jne    c00115b0 <ACPI::close(int, int, void*)+0xa8>
c0011557:	a1 44 81 02 c0       	mov    eax,ds:0xc0028144
c001155c:	85 c0                	test   eax,eax
c001155e:	74 08                	je     c0011568 <ACPI::close(int, int, void*)+0x60>
c0011560:	a1 44 81 02 c0       	mov    eax,ds:0xc0028144
c0011565:	ff d0                	call   eax
c0011567:	90                   	nop
c0011568:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001156d:	8d 76 00             	lea    esi,[esi+0x0]
c0011570:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011575:	83 e0 02             	and    eax,0x2
c0011578:	74 1e                	je     c0011598 <ACPI::close(int, int, void*)+0x90>
c001157a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011585:	89 c2                	mov    edx,eax
c0011587:	ec                   	in     al,dx
c0011588:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001158c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011590:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011594:	eb da                	jmp    c0011570 <ACPI::close(int, int, void*)+0x68>
c0011596:	66 90                	xchg   ax,ax
c0011598:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001159f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00115a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00115a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00115ac:	ee                   	out    dx,al
c00115ad:	8d 76 00             	lea    esi,[esi+0x0]
c00115b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115b5:	8d 76 00             	lea    esi,[esi+0x0]
c00115b8:	83 c4 1c             	add    esp,0x1c
c00115bb:	c3                   	ret    

c00115bc <findRSDP()>:
c00115bc:	83 ec 1c             	sub    esp,0x1c
c00115bf:	83 ec 0c             	sub    esp,0xc
c00115c2:	68 c3 4f 02 c0       	push   0xc0024fc3
c00115c7:	e8 51 84 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00115cc:	83 c4 10             	add    esp,0x10
c00115cf:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c00115d4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00115da:	83 e0 04             	and    eax,0x4
c00115dd:	84 c0                	test   al,al
c00115df:	75 0b                	jne    c00115ec <findRSDP()+0x30>
c00115e1:	b8 00 00 00 00       	mov    eax,0x0
c00115e6:	e9 a1 00 00 00       	jmp    c001168c <findRSDP()+0xd0>
c00115eb:	90                   	nop
c00115ec:	a1 38 7b 02 c0       	mov    eax,ds:0xc0027b38
c00115f1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00115f6:	7f 1c                	jg     c0011614 <findRSDP()+0x58>
c00115f8:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c00115fd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011603:	83 e2 fb             	and    edx,0xfffffffb
c0011606:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001160c:	b8 00 00 00 00       	mov    eax,0x0
c0011611:	eb 79                	jmp    c001168c <findRSDP()+0xd0>
c0011613:	90                   	nop
c0011614:	83 ec 0c             	sub    esp,0xc
c0011617:	68 d3 4f 02 c0       	push   0xc0024fd3
c001161c:	e8 fc 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011621:	83 c4 10             	add    esp,0x10
c0011624:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001162c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011634:	77 3e                	ja     c0011674 <findRSDP()+0xb8>
c0011636:	83 ec 04             	sub    esp,0x4
c0011639:	6a 08                	push   0x8
c001163b:	68 ec 4f 02 c0       	push   0xc0024fec
c0011640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011644:	e8 37 ef fe ff       	call   c0000580 <memcmp>
c0011649:	83 c4 10             	add    esp,0x10
c001164c:	85 c0                	test   eax,eax
c001164e:	0f 94 c0             	sete   al
c0011651:	84 c0                	test   al,al
c0011653:	74 17                	je     c001166c <findRSDP()+0xb0>
c0011655:	83 ec 0c             	sub    esp,0xc
c0011658:	68 f5 4f 02 c0       	push   0xc0024ff5
c001165d:	e8 bb 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011662:	83 c4 10             	add    esp,0x10
c0011665:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011669:	eb 21                	jmp    c001168c <findRSDP()+0xd0>
c001166b:	90                   	nop
c001166c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011671:	eb b9                	jmp    c001162c <findRSDP()+0x70>
c0011673:	90                   	nop
c0011674:	83 ec 0c             	sub    esp,0xc
c0011677:	68 03 50 02 c0       	push   0xc0025003
c001167c:	e8 9c 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	b8 00 00 00 00       	mov    eax,0x0
c0011689:	8d 76 00             	lea    esi,[esi+0x0]
c001168c:	83 c4 1c             	add    esp,0x1c
c001168f:	c3                   	ret    

c0011690 <loadACPITables(unsigned char*)>:
c0011690:	57                   	push   edi
c0011691:	56                   	push   esi
c0011692:	53                   	push   ebx
c0011693:	83 ec 60             	sub    esp,0x60
c0011696:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c001169b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00116a1:	83 e0 04             	and    eax,0x4
c00116a4:	84 c0                	test   al,al
c00116a6:	0f 84 3c 02 00 00    	je     c00118e8 <loadACPITables(unsigned char*)+0x258>
c00116ac:	a0 60 83 02 c0       	mov    al,ds:0xc0028360
c00116b1:	84 c0                	test   al,al
c00116b3:	74 77                	je     c001172c <loadACPITables(unsigned char*)+0x9c>
c00116b5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00116b9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00116bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00116c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116c4:	83 e8 24             	sub    eax,0x24
c00116c7:	c1 e8 03             	shr    eax,0x3
c00116ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00116ce:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00116d6:	66 90                	xchg   ax,ax
c00116d8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00116dc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00116e0:	0f 8d b6 00 00 00    	jge    c001179c <loadACPITables(unsigned char*)+0x10c>
c00116e6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00116ea:	83 c0 24             	add    eax,0x24
c00116ed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00116f1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00116f5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00116f9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00116fd:	c1 e0 03             	shl    eax,0x3
c0011700:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011704:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011708:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001170b:	8b 00                	mov    eax,DWORD PTR [eax]
c001170d:	89 c1                	mov    ecx,eax
c001170f:	a1 4c 81 02 c0       	mov    eax,ds:0xc002814c
c0011714:	8d 50 01             	lea    edx,[eax+0x1]
c0011717:	89 15 4c 81 02 c0    	mov    DWORD PTR ds:0xc002814c,edx
c001171d:	89 ca                	mov    edx,ecx
c001171f:	89 14 c5 64 81 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7e9c],edx
c0011726:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001172a:	eb ac                	jmp    c00116d8 <loadACPITables(unsigned char*)+0x48>
c001172c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011730:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011734:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011738:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001173b:	83 e8 24             	sub    eax,0x24
c001173e:	c1 e8 02             	shr    eax,0x2
c0011741:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011745:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001174d:	8d 76 00             	lea    esi,[esi+0x0]
c0011750:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011754:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011758:	7d 42                	jge    c001179c <loadACPITables(unsigned char*)+0x10c>
c001175a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001175e:	83 c0 24             	add    eax,0x24
c0011761:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011769:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001176d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011771:	c1 e0 02             	shl    eax,0x2
c0011774:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011778:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001177c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001177e:	a1 4c 81 02 c0       	mov    eax,ds:0xc002814c
c0011783:	8d 50 01             	lea    edx,[eax+0x1]
c0011786:	89 15 4c 81 02 c0    	mov    DWORD PTR ds:0xc002814c,edx
c001178c:	89 ca                	mov    edx,ecx
c001178e:	89 14 c5 64 81 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7e9c],edx
c0011795:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011799:	eb b5                	jmp    c0011750 <loadACPITables(unsigned char*)+0xc0>
c001179b:	90                   	nop
c001179c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00117a4:	a1 4c 81 02 c0       	mov    eax,ds:0xc002814c
c00117a9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00117ad:	0f 8d 39 01 00 00    	jge    c00118ec <loadACPITables(unsigned char*)+0x25c>
c00117b3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00117b7:	8b 04 c5 64 81 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7e9c]
c00117be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00117c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117c6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00117ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117ce:	25 ff 0f 00 00       	and    eax,0xfff
c00117d3:	89 c6                	mov    esi,eax
c00117d5:	8b 1d 30 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c30
c00117db:	83 ec 0c             	sub    esp,0xc
c00117de:	6a 01                	push   0x1
c00117e0:	e8 a8 a1 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00117ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117f2:	83 ec 0c             	sub    esp,0xc
c00117f5:	6a 01                	push   0x1
c00117f7:	6a 01                	push   0x1
c00117f9:	50                   	push   eax
c00117fa:	52                   	push   edx
c00117fb:	53                   	push   ebx
c00117fc:	e8 29 ab ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011801:	83 c4 20             	add    esp,0x20
c0011804:	09 f0                	or     eax,esi
c0011806:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001180a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001180e:	c1 e0 03             	shl    eax,0x3
c0011811:	05 60 81 02 c0       	add    eax,0xc0028160
c0011816:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001181a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001181e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011822:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001182a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001182e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001183a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001183e:	89 c6                	mov    esi,eax
c0011840:	89 d7                	mov    edi,edx
c0011842:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011844:	89 c8                	mov    eax,ecx
c0011846:	89 fa                	mov    edx,edi
c0011848:	89 f3                	mov    ebx,esi
c001184a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001184e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011852:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011856:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001185a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001185d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011861:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011865:	05 00 10 00 00       	add    eax,0x1000
c001186a:	c1 e8 0c             	shr    eax,0xc
c001186d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011871:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011875:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011879:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001187d:	25 ff 0f 00 00       	and    eax,0xfff
c0011882:	89 c6                	mov    esi,eax
c0011884:	8b 1d 30 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c30
c001188a:	83 ec 0c             	sub    esp,0xc
c001188d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011891:	e8 f7 a0 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c0011896:	83 c4 10             	add    esp,0x10
c0011899:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001189d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00118a3:	83 ec 0c             	sub    esp,0xc
c00118a6:	6a 01                	push   0x1
c00118a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00118ac:	50                   	push   eax
c00118ad:	52                   	push   edx
c00118ae:	53                   	push   ebx
c00118af:	e8 76 aa ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00118b4:	83 c4 20             	add    esp,0x20
c00118b7:	09 f0                	or     eax,esi
c00118b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00118bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118c1:	83 ec 0c             	sub    esp,0xc
c00118c4:	50                   	push   eax
c00118c5:	e8 f3 a3 ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c00118ca:	83 c4 10             	add    esp,0x10
c00118cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00118d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118d5:	89 14 c5 64 81 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7e9c],edx
c00118dc:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00118e0:	e9 bf fe ff ff       	jmp    c00117a4 <loadACPITables(unsigned char*)+0x114>
c00118e5:	8d 76 00             	lea    esi,[esi+0x0]
c00118e8:	90                   	nop
c00118e9:	8d 76 00             	lea    esi,[esi+0x0]
c00118ec:	83 c4 60             	add    esp,0x60
c00118ef:	5b                   	pop    ebx
c00118f0:	5e                   	pop    esi
c00118f1:	5f                   	pop    edi
c00118f2:	c3                   	ret    
c00118f3:	90                   	nop

c00118f4 <findRSDT(unsigned char*)>:
c00118f4:	57                   	push   edi
c00118f5:	56                   	push   esi
c00118f6:	53                   	push   ebx
c00118f7:	83 ec 50             	sub    esp,0x50
c00118fa:	83 ec 0c             	sub    esp,0xc
c00118fd:	68 17 50 02 c0       	push   0xc0025017
c0011902:	e8 16 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011907:	83 c4 10             	add    esp,0x10
c001190a:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c001190f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011915:	83 e0 04             	and    eax,0x4
c0011918:	84 c0                	test   al,al
c001191a:	75 0c                	jne    c0011928 <findRSDT(unsigned char*)+0x34>
c001191c:	b8 00 00 00 00       	mov    eax,0x0
c0011921:	e9 86 01 00 00       	jmp    c0011aac <findRSDT(unsigned char*)+0x1b8>
c0011926:	66 90                	xchg   ax,ax
c0011928:	83 ec 0c             	sub    esp,0xc
c001192b:	68 29 50 02 c0       	push   0xc0025029
c0011930:	e8 e8 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	89 e0                	mov    eax,esp
c001193a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001193e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011942:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011946:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001194e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011952:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011956:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001195a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001195e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011962:	89 c6                	mov    esi,eax
c0011964:	89 d7                	mov    edi,edx
c0011966:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011968:	89 c8                	mov    eax,ecx
c001196a:	89 fa                	mov    edx,edi
c001196c:	89 f3                	mov    ebx,esi
c001196e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011972:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011976:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001197a:	83 ec 0c             	sub    esp,0xc
c001197d:	68 3b 50 02 c0       	push   0xc002503b
c0011982:	e8 96 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011987:	83 c4 10             	add    esp,0x10
c001198a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001198e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011992:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001199a:	83 ec 0c             	sub    esp,0xc
c001199d:	68 4d 50 02 c0       	push   0xc002504d
c00119a2:	e8 76 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119a7:	83 c4 10             	add    esp,0x10
c00119aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00119ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00119b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00119b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00119be:	83 ec 04             	sub    esp,0x4
c00119c1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00119c5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00119c9:	68 c4 4e 02 c0       	push   0xc0024ec4
c00119ce:	e8 e0 b2 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00119d3:	83 c4 10             	add    esp,0x10
c00119d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00119da:	25 ff 0f 00 00       	and    eax,0xfff
c00119df:	89 c6                	mov    esi,eax
c00119e1:	8b 1d 30 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c30
c00119e7:	83 ec 0c             	sub    esp,0xc
c00119ea:	6a 02                	push   0x2
c00119ec:	e8 9c 9f ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c00119f1:	83 c4 10             	add    esp,0x10
c00119f4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00119f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	6a 01                	push   0x1
c0011a03:	6a 02                	push   0x2
c0011a05:	50                   	push   eax
c0011a06:	52                   	push   edx
c0011a07:	53                   	push   ebx
c0011a08:	e8 1d a9 ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a0d:	83 c4 20             	add    esp,0x20
c0011a10:	09 f0                	or     eax,esi
c0011a12:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011a16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a1a:	25 ff 0f 00 00       	and    eax,0xfff
c0011a1f:	89 c6                	mov    esi,eax
c0011a21:	8b 1d 30 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c30
c0011a27:	83 ec 0c             	sub    esp,0xc
c0011a2a:	6a 02                	push   0x2
c0011a2c:	e8 5c 9f ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c0011a31:	83 c4 10             	add    esp,0x10
c0011a34:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011a38:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a3e:	83 ec 0c             	sub    esp,0xc
c0011a41:	6a 01                	push   0x1
c0011a43:	6a 02                	push   0x2
c0011a45:	50                   	push   eax
c0011a46:	52                   	push   edx
c0011a47:	53                   	push   ebx
c0011a48:	e8 dd a8 ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a4d:	83 c4 20             	add    esp,0x20
c0011a50:	09 f0                	or     eax,esi
c0011a52:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011a56:	83 ec 04             	sub    esp,0x4
c0011a59:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a5d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a61:	68 e4 4e 02 c0       	push   0xc0024ee4
c0011a66:	e8 48 b2 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0011a6b:	83 c4 10             	add    esp,0x10
c0011a6e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011a73:	75 13                	jne    c0011a88 <findRSDT(unsigned char*)+0x194>
c0011a75:	c6 05 60 83 02 c0 00 	mov    BYTE PTR ds:0xc0028360,0x0
c0011a7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011a84:	eb 22                	jmp    c0011aa8 <findRSDT(unsigned char*)+0x1b4>
c0011a86:	66 90                	xchg   ax,ax
c0011a88:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011a8d:	75 11                	jne    c0011aa0 <findRSDT(unsigned char*)+0x1ac>
c0011a8f:	c6 05 60 83 02 c0 01 	mov    BYTE PTR ds:0xc0028360,0x1
c0011a96:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011a9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011a9e:	eb 08                	jmp    c0011aa8 <findRSDT(unsigned char*)+0x1b4>
c0011aa0:	b8 00 00 00 00       	mov    eax,0x0
c0011aa5:	eb 05                	jmp    c0011aac <findRSDT(unsigned char*)+0x1b8>
c0011aa7:	90                   	nop
c0011aa8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011aac:	83 c4 50             	add    esp,0x50
c0011aaf:	5b                   	pop    ebx
c0011ab0:	5e                   	pop    esi
c0011ab1:	5f                   	pop    edi
c0011ab2:	c3                   	ret    
c0011ab3:	90                   	nop

c0011ab4 <findDataTable(unsigned char*, char*)>:
c0011ab4:	83 ec 1c             	sub    esp,0x1c
c0011ab7:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0011abc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ac2:	83 e0 04             	and    eax,0x4
c0011ac5:	84 c0                	test   al,al
c0011ac7:	75 07                	jne    c0011ad0 <findDataTable(unsigned char*, char*)+0x1c>
c0011ac9:	b8 00 00 00 00       	mov    eax,0x0
c0011ace:	eb 58                	jmp    c0011b28 <findDataTable(unsigned char*, char*)+0x74>
c0011ad0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ad8:	a1 4c 81 02 c0       	mov    eax,ds:0xc002814c
c0011add:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011ae1:	7d 3d                	jge    c0011b20 <findDataTable(unsigned char*, char*)+0x6c>
c0011ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ae7:	c1 e0 03             	shl    eax,0x3
c0011aea:	05 60 81 02 c0       	add    eax,0xc0028160
c0011aef:	83 ec 04             	sub    esp,0x4
c0011af2:	6a 04                	push   0x4
c0011af4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011af8:	50                   	push   eax
c0011af9:	e8 82 ea fe ff       	call   c0000580 <memcmp>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	85 c0                	test   eax,eax
c0011b03:	0f 94 c0             	sete   al
c0011b06:	84 c0                	test   al,al
c0011b08:	74 0e                	je     c0011b18 <findDataTable(unsigned char*, char*)+0x64>
c0011b0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b0e:	8b 04 c5 64 81 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7e9c]
c0011b15:	eb 11                	jmp    c0011b28 <findDataTable(unsigned char*, char*)+0x74>
c0011b17:	90                   	nop
c0011b18:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011b1c:	eb ba                	jmp    c0011ad8 <findDataTable(unsigned char*, char*)+0x24>
c0011b1e:	66 90                	xchg   ax,ax
c0011b20:	b8 00 00 00 00       	mov    eax,0x0
c0011b25:	8d 76 00             	lea    esi,[esi+0x0]
c0011b28:	83 c4 1c             	add    esp,0x1c
c0011b2b:	c3                   	ret    

c0011b2c <scanMADT()>:
c0011b2c:	53                   	push   ebx
c0011b2d:	83 ec 38             	sub    esp,0x38
c0011b30:	83 ec 0c             	sub    esp,0xc
c0011b33:	68 5f 50 02 c0       	push   0xc002505f
c0011b38:	e8 e0 7e ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011b3d:	83 c4 10             	add    esp,0x10
c0011b40:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c0011b45:	25 00 04 00 00       	and    eax,0x400
c0011b4a:	74 14                	je     c0011b60 <scanMADT()+0x34>
c0011b4c:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0011b51:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011b57:	83 e2 fb             	and    edx,0xfffffffb
c0011b5a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011b60:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0011b65:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b6b:	83 e0 04             	and    eax,0x4
c0011b6e:	84 c0                	test   al,al
c0011b70:	0f 84 82 04 00 00    	je     c0011ff8 <scanMADT()+0x4cc>
c0011b76:	83 ec 0c             	sub    esp,0xc
c0011b79:	68 6c 50 02 c0       	push   0xc002506c
c0011b7e:	e8 9a 7e ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011b83:	83 c4 10             	add    esp,0x10
c0011b86:	e8 31 fa ff ff       	call   c00115bc <findRSDP()>
c0011b8b:	a3 6c 83 02 c0       	mov    ds:0xc002836c,eax
c0011b90:	a1 6c 83 02 c0       	mov    eax,ds:0xc002836c
c0011b95:	85 c0                	test   eax,eax
c0011b97:	75 1b                	jne    c0011bb4 <scanMADT()+0x88>
c0011b99:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0011b9e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011ba4:	83 e2 fb             	and    edx,0xfffffffb
c0011ba7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011bad:	e9 4e 04 00 00       	jmp    c0012000 <scanMADT()+0x4d4>
c0011bb2:	66 90                	xchg   ax,ax
c0011bb4:	83 ec 0c             	sub    esp,0xc
c0011bb7:	68 7e 50 02 c0       	push   0xc002507e
c0011bbc:	e8 5c 7e ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011bc1:	83 c4 10             	add    esp,0x10
c0011bc4:	a1 6c 83 02 c0       	mov    eax,ds:0xc002836c
c0011bc9:	83 ec 0c             	sub    esp,0xc
c0011bcc:	50                   	push   eax
c0011bcd:	e8 22 fd ff ff       	call   c00118f4 <findRSDT(unsigned char*)>
c0011bd2:	83 c4 10             	add    esp,0x10
c0011bd5:	a3 68 83 02 c0       	mov    ds:0xc0028368,eax
c0011bda:	a1 68 83 02 c0       	mov    eax,ds:0xc0028368
c0011bdf:	85 c0                	test   eax,eax
c0011be1:	75 19                	jne    c0011bfc <scanMADT()+0xd0>
c0011be3:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0011be8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011bee:	83 e2 fb             	and    edx,0xfffffffb
c0011bf1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011bf7:	e9 04 04 00 00       	jmp    c0012000 <scanMADT()+0x4d4>
c0011bfc:	83 ec 0c             	sub    esp,0xc
c0011bff:	68 8e 50 02 c0       	push   0xc002508e
c0011c04:	e8 14 7e ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011c09:	83 c4 10             	add    esp,0x10
c0011c0c:	a1 68 83 02 c0       	mov    eax,ds:0xc0028368
c0011c11:	83 ec 0c             	sub    esp,0xc
c0011c14:	50                   	push   eax
c0011c15:	e8 76 fa ff ff       	call   c0011690 <loadACPITables(unsigned char*)>
c0011c1a:	83 c4 10             	add    esp,0x10
c0011c1d:	a1 68 83 02 c0       	mov    eax,ds:0xc0028368
c0011c22:	83 ec 08             	sub    esp,0x8
c0011c25:	68 a6 50 02 c0       	push   0xc00250a6
c0011c2a:	50                   	push   eax
c0011c2b:	e8 84 fe ff ff       	call   c0011ab4 <findDataTable(unsigned char*, char*)>
c0011c30:	83 c4 10             	add    esp,0x10
c0011c33:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011c37:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011c3c:	75 1a                	jne    c0011c58 <scanMADT()+0x12c>
c0011c3e:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0011c43:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c49:	83 e2 fe             	and    edx,0xfffffffe
c0011c4c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c52:	e9 a9 03 00 00       	jmp    c0012000 <scanMADT()+0x4d4>
c0011c57:	90                   	nop
c0011c58:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011c60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c67:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011c6b:	0f 87 8f 03 00 00    	ja     c0012000 <scanMADT()+0x4d4>
c0011c71:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011c79:	0f 87 81 03 00 00    	ja     c0012000 <scanMADT()+0x4d4>
c0011c7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011c87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c8b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c96:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c9a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011c9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ca2:	8d 50 01             	lea    edx,[eax+0x1]
c0011ca5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ca9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cb1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011cb5:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011cba:	0f 86 3c 03 00 00    	jbe    c0011ffc <scanMADT()+0x4d0>
c0011cc0:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011cc5:	75 59                	jne    c0011d20 <scanMADT()+0x1f4>
c0011cc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ccb:	8d 50 01             	lea    edx,[eax+0x1]
c0011cce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cd2:	8a 15 60 85 02 c0    	mov    dl,BYTE PTR ds:0xc0028560
c0011cd8:	0f b6 d2             	movzx  edx,dl
c0011cdb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011cdf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ce3:	88 82 a0 85 02 c0    	mov    BYTE PTR [edx-0x3ffd7a60],al
c0011ce9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ced:	8d 50 01             	lea    edx,[eax+0x1]
c0011cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cf4:	8a 15 60 85 02 c0    	mov    dl,BYTE PTR ds:0xc0028560
c0011cfa:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011cfd:	88 0d 60 85 02 c0    	mov    BYTE PTR ds:0xc0028560,cl
c0011d03:	0f b6 d2             	movzx  edx,dl
c0011d06:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d0a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d0e:	88 82 80 85 02 c0    	mov    BYTE PTR [edx-0x3ffd7a80],al
c0011d14:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d19:	e9 c6 02 00 00       	jmp    c0011fe4 <scanMADT()+0x4b8>
c0011d1e:	66 90                	xchg   ax,ax
c0011d20:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011d25:	0f 85 15 01 00 00    	jne    c0011e40 <scanMADT()+0x314>
c0011d2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d2f:	8d 50 01             	lea    edx,[eax+0x1]
c0011d32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d36:	8a 15 20 84 02 c0    	mov    dl,BYTE PTR ds:0xc0028420
c0011d3c:	0f b6 d2             	movzx  edx,dl
c0011d3f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d43:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d47:	88 82 40 84 02 c0    	mov    BYTE PTR [edx-0x3ffd7bc0],al
c0011d4d:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011d51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d59:	01 d0                	add    eax,edx
c0011d5b:	83 c0 2c             	add    eax,0x2c
c0011d5e:	8a 00                	mov    al,BYTE PTR [eax]
c0011d60:	0f b6 d0             	movzx  edx,al
c0011d63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d67:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d6e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011d72:	0f b6 c0             	movzx  eax,al
c0011d75:	c1 e0 08             	shl    eax,0x8
c0011d78:	89 d1                	mov    ecx,edx
c0011d7a:	09 c1                	or     ecx,eax
c0011d7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d80:	8d 50 02             	lea    edx,[eax+0x2]
c0011d83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d87:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d8b:	0f b6 c0             	movzx  eax,al
c0011d8e:	c1 e0 10             	shl    eax,0x10
c0011d91:	09 c1                	or     ecx,eax
c0011d93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d97:	8d 50 03             	lea    edx,[eax+0x3]
c0011d9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d9e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011da2:	0f b6 c0             	movzx  eax,al
c0011da5:	c1 e0 18             	shl    eax,0x18
c0011da8:	09 c1                	or     ecx,eax
c0011daa:	89 ca                	mov    edx,ecx
c0011dac:	a0 20 84 02 c0       	mov    al,ds:0xc0028420
c0011db1:	0f b6 c0             	movzx  eax,al
c0011db4:	89 14 85 60 84 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7ba0],edx
c0011dbb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011dc0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dc8:	01 d0                	add    eax,edx
c0011dca:	83 c0 2c             	add    eax,0x2c
c0011dcd:	8a 00                	mov    al,BYTE PTR [eax]
c0011dcf:	0f b6 d0             	movzx  edx,al
c0011dd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dd6:	8d 48 01             	lea    ecx,[eax+0x1]
c0011dd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ddd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011de1:	0f b6 c0             	movzx  eax,al
c0011de4:	c1 e0 08             	shl    eax,0x8
c0011de7:	89 d1                	mov    ecx,edx
c0011de9:	09 c1                	or     ecx,eax
c0011deb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011def:	8d 50 02             	lea    edx,[eax+0x2]
c0011df2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011df6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011dfa:	0f b6 c0             	movzx  eax,al
c0011dfd:	c1 e0 10             	shl    eax,0x10
c0011e00:	09 c1                	or     ecx,eax
c0011e02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e06:	8d 50 03             	lea    edx,[eax+0x3]
c0011e09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e0d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e11:	0f b6 c0             	movzx  eax,al
c0011e14:	c1 e0 18             	shl    eax,0x18
c0011e17:	09 c1                	or     ecx,eax
c0011e19:	89 ca                	mov    edx,ecx
c0011e1b:	a0 20 84 02 c0       	mov    al,ds:0xc0028420
c0011e20:	0f b6 c0             	movzx  eax,al
c0011e23:	89 14 85 e0 84 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7b20],edx
c0011e2a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e2f:	a0 20 84 02 c0       	mov    al,ds:0xc0028420
c0011e34:	40                   	inc    eax
c0011e35:	a2 20 84 02 c0       	mov    ds:0xc0028420,al
c0011e3a:	e9 a5 01 00 00       	jmp    c0011fe4 <scanMADT()+0x4b8>
c0011e3f:	90                   	nop
c0011e40:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011e45:	0f 85 e9 00 00 00    	jne    c0011f34 <scanMADT()+0x408>
c0011e4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e4f:	8d 50 01             	lea    edx,[eax+0x1]
c0011e52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e5a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e5e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011e62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e66:	8d 50 01             	lea    edx,[eax+0x1]
c0011e69:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e71:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e75:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011e79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e81:	01 d0                	add    eax,edx
c0011e83:	83 c0 2c             	add    eax,0x2c
c0011e86:	8a 00                	mov    al,BYTE PTR [eax]
c0011e88:	0f b6 d0             	movzx  edx,al
c0011e8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e8f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011e92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e96:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011e9a:	0f b6 c0             	movzx  eax,al
c0011e9d:	c1 e0 08             	shl    eax,0x8
c0011ea0:	89 d1                	mov    ecx,edx
c0011ea2:	09 c1                	or     ecx,eax
c0011ea4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ea8:	8d 50 02             	lea    edx,[eax+0x2]
c0011eab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011eaf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011eb3:	0f b6 c0             	movzx  eax,al
c0011eb6:	c1 e0 10             	shl    eax,0x10
c0011eb9:	09 c1                	or     ecx,eax
c0011ebb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ebf:	8d 50 03             	lea    edx,[eax+0x3]
c0011ec2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ec6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011eca:	0f b6 c0             	movzx  eax,al
c0011ecd:	c1 e0 18             	shl    eax,0x18
c0011ed0:	09 c8                	or     eax,ecx
c0011ed2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ed6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011edb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011edf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ee3:	01 d0                	add    eax,edx
c0011ee5:	83 c0 2c             	add    eax,0x2c
c0011ee8:	8a 00                	mov    al,BYTE PTR [eax]
c0011eea:	0f b6 c0             	movzx  eax,al
c0011eed:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011ef1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011ef4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ef8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011efc:	0f b6 d2             	movzx  edx,dl
c0011eff:	c1 e2 08             	shl    edx,0x8
c0011f02:	09 d0                	or     eax,edx
c0011f04:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011f09:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011f0e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011f13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f17:	88 90 00 72 02 c0    	mov    BYTE PTR [eax-0x3ffd8e00],dl
c0011f1d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011f22:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011f27:	66 89 84 12 00 84 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7c00],ax
c0011f2f:	e9 b0 00 00 00       	jmp    c0011fe4 <scanMADT()+0x4b8>
c0011f34:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011f39:	0f 85 99 00 00 00    	jne    c0011fd8 <scanMADT()+0x4ac>
c0011f3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f43:	8d 50 01             	lea    edx,[eax+0x1]
c0011f46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f4e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011f52:	0f b6 c0             	movzx  eax,al
c0011f55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f61:	01 d0                	add    eax,edx
c0011f63:	83 c0 2c             	add    eax,0x2c
c0011f66:	8a 00                	mov    al,BYTE PTR [eax]
c0011f68:	0f b6 d0             	movzx  edx,al
c0011f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f6f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f76:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f7a:	0f b6 c0             	movzx  eax,al
c0011f7d:	c1 e0 08             	shl    eax,0x8
c0011f80:	09 d0                	or     eax,edx
c0011f82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011f86:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011f8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f8f:	8d 50 01             	lea    edx,[eax+0x1]
c0011f92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f9a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011f9e:	0f b6 c0             	movzx  eax,al
c0011fa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa9:	c1 e0 08             	shl    eax,0x8
c0011fac:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011fb0:	89 c1                	mov    ecx,eax
c0011fb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb6:	c1 e0 18             	shl    eax,0x18
c0011fb9:	89 c3                	mov    ebx,eax
c0011fbb:	a1 70 83 02 c0       	mov    eax,ds:0xc0028370
c0011fc0:	8d 50 01             	lea    edx,[eax+0x1]
c0011fc3:	89 15 70 83 02 c0    	mov    DWORD PTR ds:0xc0028370,edx
c0011fc9:	09 d9                	or     ecx,ebx
c0011fcb:	89 ca                	mov    edx,ecx
c0011fcd:	89 14 85 80 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7c80],edx
c0011fd4:	eb 0e                	jmp    c0011fe4 <scanMADT()+0x4b8>
c0011fd6:	66 90                	xchg   ax,ax
c0011fd8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011fdd:	75 05                	jne    c0011fe4 <scanMADT()+0x4b8>
c0011fdf:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011fe4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011fed:	01 d0                	add    eax,edx
c0011fef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011ff3:	e9 68 fc ff ff       	jmp    c0011c60 <scanMADT()+0x134>
c0011ff8:	90                   	nop
c0011ff9:	eb 05                	jmp    c0012000 <scanMADT()+0x4d4>
c0011ffb:	90                   	nop
c0011ffc:	90                   	nop
c0011ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0012000:	83 c4 38             	add    esp,0x38
c0012003:	5b                   	pop    ebx
c0012004:	c3                   	ret    
c0012005:	90                   	nop
c0012006:	66 90                	xchg   ax,ax

c0012008 <ACPI::ACPI()>:
c0012008:	83 ec 0c             	sub    esp,0xc
c001200b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001200f:	83 ec 08             	sub    esp,0x8
c0012012:	68 ab 50 02 c0       	push   0xc00250ab
c0012017:	50                   	push   eax
c0012018:	e8 21 c3 ff ff       	call   c000e33e <Device::Device(char const*)>
c001201d:	83 c4 10             	add    esp,0x10
c0012020:	ba 44 52 02 c0       	mov    edx,0xc0025244
c0012025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012029:	89 10                	mov    DWORD PTR [eax],edx
c001202b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001202f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0012036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001203a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012048:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0012052:	83 ec 0c             	sub    esp,0xc
c0012055:	68 b0 50 02 c0       	push   0xc00250b0
c001205a:	e8 be 79 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001205f:	83 c4 10             	add    esp,0x10
c0012062:	e8 c5 fa ff ff       	call   c0011b2c <scanMADT()>
c0012067:	90                   	nop
c0012068:	83 c4 0c             	add    esp,0xc
c001206b:	c3                   	ret    

c001206c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001206c:	83 ec 2c             	sub    esp,0x2c
c001206f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012073:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012077:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001207b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001207f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012084:	88 d0                	mov    al,dl
c0012086:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001208a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001208f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012097:	90                   	nop
c0012098:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001209c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00120a2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00120a6:	0f 8d 9c 00 00 00    	jge    c0012148 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c00120ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120b4:	83 c2 2a             	add    edx,0x2a
c00120b7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00120bb:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00120c0:	75 7a                	jne    c001213c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00120c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120ca:	83 c2 2a             	add    edx,0x2a
c00120cd:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00120d1:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00120d5:	75 65                	jne    c001213c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00120d7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00120dc:	74 3a                	je     c0012118 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c00120de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120e6:	83 c2 2a             	add    edx,0x2a
c00120e9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00120ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120f4:	39 c2                	cmp    edx,eax
c00120f6:	74 10                	je     c0012108 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c00120f8:	83 ec 0c             	sub    esp,0xc
c00120fb:	68 04 4f 02 c0       	push   0xc0024f04
c0012100:	e8 5a 27 00 00       	call   c001485f <Krnl::panic(char const*)>
c0012105:	83 c4 10             	add    esp,0x10
c0012108:	83 ec 0c             	sub    esp,0xc
c001210b:	68 be 50 02 c0       	push   0xc00250be
c0012110:	e8 4a 27 00 00       	call   c001485f <Krnl::panic(char const*)>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001211c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012120:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012124:	83 c2 2a             	add    edx,0x2a
c0012127:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001212b:	8b 02                	mov    eax,DWORD PTR [edx]
c001212d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012130:	89 01                	mov    DWORD PTR [ecx],eax
c0012132:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012135:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001213a:	66 90                	xchg   ax,ax
c001213c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012140:	e9 53 ff ff ff       	jmp    c0012098 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012145:	8d 76 00             	lea    esi,[esi+0x0]
c0012148:	90                   	nop
c0012149:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001214d:	83 c4 2c             	add    esp,0x2c
c0012150:	c2 04 00             	ret    0x4
c0012153:	90                   	nop

c0012154 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012154:	83 ec 1c             	sub    esp,0x1c
c0012157:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001215b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001215f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012163:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012168:	88 c8                	mov    al,cl
c001216a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001216e:	88 d0                	mov    al,dl
c0012170:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012174:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012178:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001217e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012182:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012185:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012189:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001218d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012191:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012197:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001219b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001219e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121a2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00121a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121ab:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00121b1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00121b5:	8d 48 01             	lea    ecx,[eax+0x1]
c00121b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121bc:	83 c2 2a             	add    edx,0x2a
c00121bf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00121c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121c7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00121cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121d1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00121d4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00121d8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00121dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121e0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00121e6:	8d 50 01             	lea    edx,[eax+0x1]
c00121e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121ed:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00121f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121f7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00121fd:	3d 00 02 00 00       	cmp    eax,0x200
c0012202:	75 10                	jne    c0012214 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012204:	83 ec 0c             	sub    esp,0xc
c0012207:	68 cd 50 02 c0       	push   0xc00250cd
c001220c:	e8 4e 26 00 00       	call   c001485f <Krnl::panic(char const*)>
c0012211:	83 c4 10             	add    esp,0x10
c0012214:	90                   	nop
c0012215:	83 c4 1c             	add    esp,0x1c
c0012218:	c3                   	ret    
c0012219:	90                   	nop
c001221a:	66 90                	xchg   ax,ax

c001221c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001221c:	b8 00 00 00 00       	mov    eax,0x0
c0012221:	c3                   	ret    
c0012222:	66 90                	xchg   ax,ax

c0012224 <ACPI::detectPCI()>:
c0012224:	53                   	push   ebx
c0012225:	83 ec 68             	sub    esp,0x68
c0012228:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c001222d:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0012232:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0012237:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001223d:	83 e0 04             	and    eax,0x4
c0012240:	84 c0                	test   al,al
c0012242:	74 2c                	je     c0012270 <ACPI::detectPCI()+0x4c>
c0012244:	a1 68 83 02 c0       	mov    eax,ds:0xc0028368
c0012249:	83 ec 08             	sub    esp,0x8
c001224c:	68 ea 50 02 c0       	push   0xc00250ea
c0012251:	50                   	push   eax
c0012252:	e8 5d f8 ff ff       	call   c0011ab4 <findDataTable(unsigned char*, char*)>
c0012257:	83 c4 10             	add    esp,0x10
c001225a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001225e:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0012263:	74 0b                	je     c0012270 <ACPI::detectPCI()+0x4c>
c0012265:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001226a:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001226f:	90                   	nop
c0012270:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0012278:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001227c:	8a 00                	mov    al,BYTE PTR [eax]
c001227e:	3c 01                	cmp    al,0x1
c0012280:	75 0e                	jne    c0012290 <ACPI::detectPCI()+0x6c>
c0012282:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012287:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001228c:	eb 2a                	jmp    c00122b8 <ACPI::detectPCI()+0x94>
c001228e:	66 90                	xchg   ax,ax
c0012290:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012294:	8a 00                	mov    al,BYTE PTR [eax]
c0012296:	3c 02                	cmp    al,0x2
c0012298:	75 1e                	jne    c00122b8 <ACPI::detectPCI()+0x94>
c001229a:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001229f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00122a4:	74 12                	je     c00122b8 <ACPI::detectPCI()+0x94>
c00122a6:	83 ec 0c             	sub    esp,0xc
c00122a9:	68 34 4f 02 c0       	push   0xc0024f34
c00122ae:	e8 ac 25 00 00       	call   c001485f <Krnl::panic(char const*)>
c00122b3:	83 c4 10             	add    esp,0x10
c00122b6:	66 90                	xchg   ax,ax
c00122b8:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c00122bc:	83 f0 01             	xor    eax,0x1
c00122bf:	84 c0                	test   al,al
c00122c1:	74 41                	je     c0012304 <ACPI::detectPCI()+0xe0>
c00122c3:	e8 88 de fe ff       	call   c0000150 <manualPCIProbe>
c00122c8:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00122cc:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c00122d1:	75 0d                	jne    c00122e0 <ACPI::detectPCI()+0xbc>
c00122d3:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00122d8:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00122dd:	eb 25                	jmp    c0012304 <ACPI::detectPCI()+0xe0>
c00122df:	90                   	nop
c00122e0:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c00122e5:	75 1d                	jne    c0012304 <ACPI::detectPCI()+0xe0>
c00122e7:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00122ec:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00122f1:	74 11                	je     c0012304 <ACPI::detectPCI()+0xe0>
c00122f3:	83 ec 0c             	sub    esp,0xc
c00122f6:	68 34 4f 02 c0       	push   0xc0024f34
c00122fb:	e8 5f 25 00 00       	call   c001485f <Krnl::panic(char const*)>
c0012300:	83 c4 10             	add    esp,0x10
c0012303:	90                   	nop
c0012304:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012309:	0f 84 49 03 00 00    	je     c0012658 <ACPI::detectPCI()+0x434>
c001230f:	83 ec 0c             	sub    esp,0xc
c0012312:	68 ef 50 02 c0       	push   0xc00250ef
c0012317:	e8 01 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001231c:	83 c4 10             	add    esp,0x10
c001231f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012324:	0f 84 8e 00 00 00    	je     c00123b8 <ACPI::detectPCI()+0x194>
c001232a:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c001232f:	25 00 08 00 00       	and    eax,0x800
c0012334:	0f 84 16 01 00 00    	je     c0012450 <ACPI::detectPCI()+0x22c>
c001233a:	83 ec 0c             	sub    esp,0xc
c001233d:	68 5c 4f 02 c0       	push   0xc0024f5c
c0012342:	e8 d6 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012347:	83 c4 10             	add    esp,0x10
c001234a:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c001234f:	25 80 00 00 00       	and    eax,0x80
c0012354:	0f 85 f6 00 00 00    	jne    c0012450 <ACPI::detectPCI()+0x22c>
c001235a:	66 90                	xchg   ax,ax
c001235c:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0012363:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0012368:	89 c2                	mov    edx,eax
c001236a:	ec                   	in     al,dx
c001236b:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001236f:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0012373:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0012377:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c001237c:	74 0a                	je     c0012388 <ACPI::detectPCI()+0x164>
c001237e:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0012383:	74 03                	je     c0012388 <ACPI::detectPCI()+0x164>
c0012385:	eb d5                	jmp    c001235c <ACPI::detectPCI()+0x138>
c0012387:	90                   	nop
c0012388:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c001238f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0012394:	89 c2                	mov    edx,eax
c0012396:	ec                   	in     al,dx
c0012397:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c001239b:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001239f:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00123a3:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c00123a8:	74 de                	je     c0012388 <ACPI::detectPCI()+0x164>
c00123aa:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c00123af:	0f 85 93 00 00 00    	jne    c0012448 <ACPI::detectPCI()+0x224>
c00123b5:	eb d1                	jmp    c0012388 <ACPI::detectPCI()+0x164>
c00123b7:	90                   	nop
c00123b8:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c00123bc:	83 f0 01             	xor    eax,0x1
c00123bf:	84 c0                	test   al,al
c00123c1:	0f 84 89 00 00 00    	je     c0012450 <ACPI::detectPCI()+0x22c>
c00123c7:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c00123cc:	25 00 08 00 00       	and    eax,0x800
c00123d1:	74 7d                	je     c0012450 <ACPI::detectPCI()+0x22c>
c00123d3:	83 ec 0c             	sub    esp,0xc
c00123d6:	68 80 4f 02 c0       	push   0xc0024f80
c00123db:	e8 3d 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00123e0:	83 c4 10             	add    esp,0x10
c00123e3:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c00123e8:	25 80 00 00 00       	and    eax,0x80
c00123ed:	75 61                	jne    c0012450 <ACPI::detectPCI()+0x22c>
c00123ef:	90                   	nop
c00123f0:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c00123f7:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c00123fc:	89 c2                	mov    edx,eax
c00123fe:	ec                   	in     al,dx
c00123ff:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012403:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0012407:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c001240b:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012410:	74 0a                	je     c001241c <ACPI::detectPCI()+0x1f8>
c0012412:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0012417:	74 03                	je     c001241c <ACPI::detectPCI()+0x1f8>
c0012419:	eb d5                	jmp    c00123f0 <ACPI::detectPCI()+0x1cc>
c001241b:	90                   	nop
c001241c:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012423:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012428:	89 c2                	mov    edx,eax
c001242a:	ec                   	in     al,dx
c001242b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001242f:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012433:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012437:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c001243c:	74 de                	je     c001241c <ACPI::detectPCI()+0x1f8>
c001243e:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012443:	75 07                	jne    c001244c <ACPI::detectPCI()+0x228>
c0012445:	eb d5                	jmp    c001241c <ACPI::detectPCI()+0x1f8>
c0012447:	90                   	nop
c0012448:	90                   	nop
c0012449:	eb 05                	jmp    c0012450 <ACPI::detectPCI()+0x22c>
c001244b:	90                   	nop
c001244c:	90                   	nop
c001244d:	8d 76 00             	lea    esi,[esi+0x0]
c0012450:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012458:	83 ec 0c             	sub    esp,0xc
c001245b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001245f:	e8 5f 75 ff ff       	call   c00099c3 <malloc>
c0012464:	83 c4 10             	add    esp,0x10
c0012467:	89 c3                	mov    ebx,eax
c0012469:	83 ec 0c             	sub    esp,0xc
c001246c:	53                   	push   ebx
c001246d:	e8 7c ab 00 00       	call   c001cfee <PCI::PCI()>
c0012472:	83 c4 10             	add    esp,0x10
c0012475:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012479:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c001247e:	25 00 08 00 00       	and    eax,0x800
c0012483:	74 7b                	je     c0012500 <ACPI::detectPCI()+0x2dc>
c0012485:	83 ec 0c             	sub    esp,0xc
c0012488:	68 07 51 02 c0       	push   0xc0025107
c001248d:	e8 8b 75 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012492:	83 c4 10             	add    esp,0x10
c0012495:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c001249a:	25 80 00 00 00       	and    eax,0x80
c001249f:	75 5f                	jne    c0012500 <ACPI::detectPCI()+0x2dc>
c00124a1:	8d 76 00             	lea    esi,[esi+0x0]
c00124a4:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c00124ab:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00124b0:	89 c2                	mov    edx,eax
c00124b2:	ec                   	in     al,dx
c00124b3:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c00124b7:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c00124bb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00124bf:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c00124c4:	74 0a                	je     c00124d0 <ACPI::detectPCI()+0x2ac>
c00124c6:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c00124cb:	74 03                	je     c00124d0 <ACPI::detectPCI()+0x2ac>
c00124cd:	eb d5                	jmp    c00124a4 <ACPI::detectPCI()+0x280>
c00124cf:	90                   	nop
c00124d0:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c00124d7:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c00124dc:	89 c2                	mov    edx,eax
c00124de:	ec                   	in     al,dx
c00124df:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00124e3:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c00124e7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00124eb:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c00124f0:	74 de                	je     c00124d0 <ACPI::detectPCI()+0x2ac>
c00124f2:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c00124f7:	75 03                	jne    c00124fc <ACPI::detectPCI()+0x2d8>
c00124f9:	eb d5                	jmp    c00124d0 <ACPI::detectPCI()+0x2ac>
c00124fb:	90                   	nop
c00124fc:	90                   	nop
c00124fd:	8d 76 00             	lea    esi,[esi+0x0]
c0012500:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012504:	83 ec 08             	sub    esp,0x8
c0012507:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001250b:	50                   	push   eax
c001250c:	e8 29 bc ff ff       	call   c000e13a <Device::addChild(Device*)>
c0012511:	83 c4 10             	add    esp,0x10
c0012514:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c0012519:	25 00 08 00 00       	and    eax,0x800
c001251e:	74 78                	je     c0012598 <ACPI::detectPCI()+0x374>
c0012520:	83 ec 0c             	sub    esp,0xc
c0012523:	68 0d 51 02 c0       	push   0xc002510d
c0012528:	e8 f0 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c0012535:	25 80 00 00 00       	and    eax,0x80
c001253a:	75 5c                	jne    c0012598 <ACPI::detectPCI()+0x374>
c001253c:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012543:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012548:	89 c2                	mov    edx,eax
c001254a:	ec                   	in     al,dx
c001254b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001254f:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012553:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012557:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c001255c:	74 0a                	je     c0012568 <ACPI::detectPCI()+0x344>
c001255e:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012563:	74 03                	je     c0012568 <ACPI::detectPCI()+0x344>
c0012565:	eb d5                	jmp    c001253c <ACPI::detectPCI()+0x318>
c0012567:	90                   	nop
c0012568:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c001256f:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012574:	89 c2                	mov    edx,eax
c0012576:	ec                   	in     al,dx
c0012577:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001257b:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c001257f:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012583:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012588:	74 de                	je     c0012568 <ACPI::detectPCI()+0x344>
c001258a:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c001258f:	75 03                	jne    c0012594 <ACPI::detectPCI()+0x370>
c0012591:	eb d5                	jmp    c0012568 <ACPI::detectPCI()+0x344>
c0012593:	90                   	nop
c0012594:	90                   	nop
c0012595:	8d 76 00             	lea    esi,[esi+0x0]
c0012598:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001259c:	8b 00                	mov    eax,DWORD PTR [eax]
c001259e:	83 c0 08             	add    eax,0x8
c00125a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00125a3:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00125a8:	74 0a                	je     c00125b4 <ACPI::detectPCI()+0x390>
c00125aa:	ba 01 00 00 00       	mov    edx,0x1
c00125af:	eb 0b                	jmp    c00125bc <ACPI::detectPCI()+0x398>
c00125b1:	8d 76 00             	lea    esi,[esi+0x0]
c00125b4:	ba 02 00 00 00       	mov    edx,0x2
c00125b9:	8d 76 00             	lea    esi,[esi+0x0]
c00125bc:	6a 00                	push   0x0
c00125be:	6a 00                	push   0x0
c00125c0:	52                   	push   edx
c00125c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00125c5:	ff d0                	call   eax
c00125c7:	83 c4 10             	add    esp,0x10
c00125ca:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c00125cf:	25 00 08 00 00       	and    eax,0x800
c00125d4:	0f 84 26 01 00 00    	je     c0012700 <ACPI::detectPCI()+0x4dc>
c00125da:	83 ec 0c             	sub    esp,0xc
c00125dd:	68 13 51 02 c0       	push   0xc0025113
c00125e2:	e8 36 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00125e7:	83 c4 10             	add    esp,0x10
c00125ea:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c00125ef:	25 80 00 00 00       	and    eax,0x80
c00125f4:	0f 85 06 01 00 00    	jne    c0012700 <ACPI::detectPCI()+0x4dc>
c00125fa:	66 90                	xchg   ax,ax
c00125fc:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012603:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012608:	89 c2                	mov    edx,eax
c001260a:	ec                   	in     al,dx
c001260b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001260f:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012613:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012617:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c001261c:	74 0a                	je     c0012628 <ACPI::detectPCI()+0x404>
c001261e:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012623:	74 03                	je     c0012628 <ACPI::detectPCI()+0x404>
c0012625:	eb d5                	jmp    c00125fc <ACPI::detectPCI()+0x3d8>
c0012627:	90                   	nop
c0012628:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c001262f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012634:	89 c2                	mov    edx,eax
c0012636:	ec                   	in     al,dx
c0012637:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001263b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001263f:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012643:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012648:	74 de                	je     c0012628 <ACPI::detectPCI()+0x404>
c001264a:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c001264f:	0f 85 a7 00 00 00    	jne    c00126fc <ACPI::detectPCI()+0x4d8>
c0012655:	eb d1                	jmp    c0012628 <ACPI::detectPCI()+0x404>
c0012657:	90                   	nop
c0012658:	83 ec 0c             	sub    esp,0xc
c001265b:	68 19 51 02 c0       	push   0xc0025119
c0012660:	e8 4e a6 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0012665:	83 c4 10             	add    esp,0x10
c0012668:	83 ec 0c             	sub    esp,0xc
c001266b:	68 24 51 02 c0       	push   0xc0025124
c0012670:	e8 a8 73 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012675:	83 c4 10             	add    esp,0x10
c0012678:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012680:	83 ec 0c             	sub    esp,0xc
c0012683:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012687:	e8 37 73 ff ff       	call   c00099c3 <malloc>
c001268c:	83 c4 10             	add    esp,0x10
c001268f:	89 c3                	mov    ebx,eax
c0012691:	83 ec 0c             	sub    esp,0xc
c0012694:	53                   	push   ebx
c0012695:	e8 be ba 00 00       	call   c001e158 <IDE::IDE()>
c001269a:	83 c4 10             	add    esp,0x10
c001269d:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00126a1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00126a5:	83 ec 08             	sub    esp,0x8
c00126a8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00126ac:	50                   	push   eax
c00126ad:	e8 88 ba ff ff       	call   c000e13a <Device::addChild(Device*)>
c00126b2:	83 c4 10             	add    esp,0x10
c00126b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b9:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00126c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126c7:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00126d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126d4:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00126dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00126e3:	83 c0 08             	add    eax,0x8
c00126e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00126e8:	6a 00                	push   0x0
c00126ea:	6a 00                	push   0x0
c00126ec:	6a 00                	push   0x0
c00126ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00126f2:	ff d0                	call   eax
c00126f4:	83 c4 10             	add    esp,0x10
c00126f7:	eb 07                	jmp    c0012700 <ACPI::detectPCI()+0x4dc>
c00126f9:	8d 76 00             	lea    esi,[esi+0x0]
c00126fc:	90                   	nop
c00126fd:	8d 76 00             	lea    esi,[esi+0x0]
c0012700:	90                   	nop
c0012701:	83 c4 68             	add    esp,0x68
c0012704:	5b                   	pop    ebx
c0012705:	c3                   	ret    
c0012706:	66 90                	xchg   ax,ax

c0012708 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012708:	83 ec 1c             	sub    esp,0x1c
c001270b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001270f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012712:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012716:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c001271b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012720:	83 ec 08             	sub    esp,0x8
c0012723:	52                   	push   edx
c0012724:	50                   	push   eax
c0012725:	e8 6a 68 ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c001272a:	83 c4 10             	add    esp,0x10
c001272d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012731:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0012736:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001273b:	83 ec 04             	sub    esp,0x4
c001273e:	6a 01                	push   0x1
c0012740:	52                   	push   edx
c0012741:	50                   	push   eax
c0012742:	e8 29 6a ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c0012747:	83 c4 10             	add    esp,0x10
c001274a:	90                   	nop
c001274b:	83 c4 1c             	add    esp,0x1c
c001274e:	c3                   	ret    
c001274f:	90                   	nop

c0012750 <ACPI::sleep()>:
c0012750:	83 ec 0c             	sub    esp,0xc
c0012753:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0012758:	85 c0                	test   eax,eax
c001275a:	74 08                	je     c0012764 <ACPI::sleep()+0x14>
c001275c:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0012761:	ff d0                	call   eax
c0012763:	90                   	nop
c0012764:	90                   	nop
c0012765:	83 c4 0c             	add    esp,0xc
c0012768:	c3                   	ret    
c0012769:	90                   	nop
c001276a:	66 90                	xchg   ax,ax

c001276c <ACPI::open(int, int, void*)>:
c001276c:	57                   	push   edi
c001276d:	56                   	push   esi
c001276e:	53                   	push   ebx
c001276f:	81 ec 70 01 00 00    	sub    esp,0x170
c0012775:	83 ec 0c             	sub    esp,0xc
c0012778:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001277f:	e8 a0 fa ff ff       	call   c0012224 <ACPI::detectPCI()>
c0012784:	83 c4 10             	add    esp,0x10
c0012787:	83 ec 0c             	sub    esp,0xc
c001278a:	68 a4 4f 02 c0       	push   0xc0024fa4
c001278f:	e8 89 72 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012794:	83 c4 10             	add    esp,0x10
c0012797:	83 ec 0c             	sub    esp,0xc
c001279a:	68 39 51 02 c0       	push   0xc0025139
c001279f:	e8 2f 48 00 00       	call   c0016fd3 <Thr::loadKernelSymbolTable(char const*)>
c00127a4:	83 c4 10             	add    esp,0x10
c00127a7:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00127af:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00127ba:	83 ec 0c             	sub    esp,0xc
c00127bd:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00127c4:	e8 fa 71 ff ff       	call   c00099c3 <malloc>
c00127c9:	83 c4 10             	add    esp,0x10
c00127cc:	89 c3                	mov    ebx,eax
c00127ce:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c00127d3:	83 ec 04             	sub    esp,0x4
c00127d6:	50                   	push   eax
c00127d7:	68 57 51 02 c0       	push   0xc0025157
c00127dc:	53                   	push   ebx
c00127dd:	e8 3c aa ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00127e2:	83 c4 10             	add    esp,0x10
c00127e5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c00127ec:	83 ec 08             	sub    esp,0x8
c00127ef:	6a 01                	push   0x1
c00127f1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00127f8:	e8 c3 aa ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c00127fd:	83 c4 10             	add    esp,0x10
c0012800:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012807:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001280f:	75 17                	jne    c0012828 <ACPI::open(int, int, void*)+0xbc>
c0012811:	83 ec 0c             	sub    esp,0xc
c0012814:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001281b:	e8 fe aa ff ff       	call   c000d31e <File::close()>
c0012820:	83 c4 10             	add    esp,0x10
c0012823:	eb 0b                	jmp    c0012830 <ACPI::open(int, int, void*)+0xc4>
c0012825:	8d 76 00             	lea    esi,[esi+0x0]
c0012828:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012830:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012838:	74 1e                	je     c0012858 <ACPI::open(int, int, void*)+0xec>
c001283a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012841:	8b 00                	mov    eax,DWORD PTR [eax]
c0012843:	83 c0 08             	add    eax,0x8
c0012846:	8b 00                	mov    eax,DWORD PTR [eax]
c0012848:	83 ec 0c             	sub    esp,0xc
c001284b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012852:	ff d0                	call   eax
c0012854:	83 c4 10             	add    esp,0x10
c0012857:	90                   	nop
c0012858:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001285f:	83 f0 01             	xor    eax,0x1
c0012862:	84 c0                	test   al,al
c0012864:	74 42                	je     c00128a8 <ACPI::open(int, int, void*)+0x13c>
c0012866:	83 ec 0c             	sub    esp,0xc
c0012869:	68 75 51 02 c0       	push   0xc0025175
c001286e:	e8 aa 71 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012873:	83 c4 10             	add    esp,0x10
c0012876:	83 ec 04             	sub    esp,0x4
c0012879:	6a 0c                	push   0xc
c001287b:	68 90 51 02 c0       	push   0xc0025190
c0012880:	68 a1 51 02 c0       	push   0xc00251a1
c0012885:	e8 b3 2d 00 00       	call   c001563d <Reg::readIntWithDefault(char*, char*, int)>
c001288a:	83 c4 10             	add    esp,0x10
c001288d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012894:	83 ec 0c             	sub    esp,0xc
c0012897:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001289e:	e8 f4 92 ff ff       	call   c000bb97 <Virt::setupPageSwapping(int)>
c00128a3:	83 c4 10             	add    esp,0x10
c00128a6:	66 90                	xchg   ax,ax
c00128a8:	83 ec 0c             	sub    esp,0xc
c00128ab:	68 c6 39 02 c0       	push   0xc00239c6
c00128b0:	e8 68 71 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00128b5:	83 c4 10             	add    esp,0x10
c00128b8:	8b 1d 08 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b08
c00128be:	83 ec 08             	sub    esp,0x8
c00128c1:	6a 01                	push   0x1
c00128c3:	68 a8 51 02 c0       	push   0xc00251a8
c00128c8:	e8 7d 51 00 00       	call   c0017a4a <Thr::loadDLL(char const*, bool)>
c00128cd:	83 c4 10             	add    esp,0x10
c00128d0:	83 ec 08             	sub    esp,0x8
c00128d3:	53                   	push   ebx
c00128d4:	50                   	push   eax
c00128d5:	e8 a1 53 00 00       	call   c0017c7b <Thr::executeDLL(unsigned long, void*)>
c00128da:	83 c4 10             	add    esp,0x10
c00128dd:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00128e4:	83 ec 08             	sub    esp,0x8
c00128e7:	6a 12                	push   0x12
c00128e9:	50                   	push   eax
c00128ea:	e8 cf bb ff ff       	call   c000e4be <getDevicesOfType(DeviceType)>
c00128ef:	83 c4 0c             	add    esp,0xc
c00128f2:	66 90                	xchg   ax,ax
c00128f4:	83 ec 0c             	sub    esp,0xc
c00128f7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00128fe:	50                   	push   eax
c00128ff:	e8 ac 02 01 00       	call   c0022bb0 <LinkedList<Device>::isEmpty()>
c0012904:	83 c4 10             	add    esp,0x10
c0012907:	83 f0 01             	xor    eax,0x1
c001290a:	84 c0                	test   al,al
c001290c:	0f 84 46 01 00 00    	je     c0012a58 <ACPI::open(int, int, void*)+0x2ec>
c0012912:	83 ec 0c             	sub    esp,0xc
c0012915:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001291c:	50                   	push   eax
c001291d:	e8 aa 02 01 00       	call   c0022bcc <LinkedList<Device>::getFirstElement()>
c0012922:	83 c4 10             	add    esp,0x10
c0012925:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001292c:	83 ec 0c             	sub    esp,0xc
c001292f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012936:	50                   	push   eax
c0012937:	e8 98 02 01 00       	call   c0022bd4 <LinkedList<Device>::removeFirst()>
c001293c:	83 c4 10             	add    esp,0x10
c001293f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012946:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001294d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012954:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012958:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001295e:	ba 09 00 00 00       	mov    edx,0x9
c0012963:	fc                   	cld    
c0012964:	89 c7                	mov    edi,eax
c0012966:	89 de                	mov    esi,ebx
c0012968:	89 d1                	mov    ecx,edx
c001296a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001296c:	83 ec 08             	sub    esp,0x8
c001296f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012973:	50                   	push   eax
c0012974:	83 ec 24             	sub    esp,0x24
c0012977:	89 e0                	mov    eax,esp
c0012979:	89 c3                	mov    ebx,eax
c001297b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001297f:	ba 09 00 00 00       	mov    edx,0x9
c0012984:	89 df                	mov    edi,ebx
c0012986:	89 c6                	mov    esi,eax
c0012988:	89 d1                	mov    ecx,edx
c001298a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001298c:	e8 3b ab 00 00       	call   c001d4cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012991:	83 c4 30             	add    esp,0x30
c0012994:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001299b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00129a3:	0f 84 4b ff ff ff    	je     c00128f4 <ACPI::open(int, int, void*)+0x188>
c00129a9:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00129b4:	83 ec 0c             	sub    esp,0xc
c00129b7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00129be:	e8 00 70 ff ff       	call   c00099c3 <malloc>
c00129c3:	83 c4 10             	add    esp,0x10
c00129c6:	89 c3                	mov    ebx,eax
c00129c8:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c00129cd:	83 ec 04             	sub    esp,0x4
c00129d0:	50                   	push   eax
c00129d1:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00129d8:	53                   	push   ebx
c00129d9:	e8 40 a8 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00129de:	83 c4 10             	add    esp,0x10
c00129e1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00129e8:	83 ec 0c             	sub    esp,0xc
c00129eb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00129f2:	e8 37 ab ff ff       	call   c000d52e <File::exists()>
c00129f7:	83 c4 10             	add    esp,0x10
c00129fa:	84 c0                	test   al,al
c00129fc:	74 2a                	je     c0012a28 <ACPI::open(int, int, void*)+0x2bc>
c00129fe:	83 ec 08             	sub    esp,0x8
c0012a01:	6a 01                	push   0x1
c0012a03:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012a0a:	e8 3b 50 00 00       	call   c0017a4a <Thr::loadDLL(char const*, bool)>
c0012a0f:	83 c4 10             	add    esp,0x10
c0012a12:	83 ec 08             	sub    esp,0x8
c0012a15:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012a1c:	50                   	push   eax
c0012a1d:	e8 59 52 00 00       	call   c0017c7b <Thr::executeDLL(unsigned long, void*)>
c0012a22:	83 c4 10             	add    esp,0x10
c0012a25:	8d 76 00             	lea    esi,[esi+0x0]
c0012a28:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012a30:	0f 84 be fe ff ff    	je     c00128f4 <ACPI::open(int, int, void*)+0x188>
c0012a36:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012a3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a3f:	83 c0 08             	add    eax,0x8
c0012a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a44:	83 ec 0c             	sub    esp,0xc
c0012a47:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012a4e:	ff d0                	call   eax
c0012a50:	83 c4 10             	add    esp,0x10
c0012a53:	e9 9c fe ff ff       	jmp    c00128f4 <ACPI::open(int, int, void*)+0x188>
c0012a58:	83 ec 0c             	sub    esp,0xc
c0012a5b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a62:	50                   	push   eax
c0012a63:	e8 44 01 01 00       	call   c0022bac <LinkedList<Device>::~LinkedList()>
c0012a68:	83 c4 10             	add    esp,0x10
c0012a6b:	8b 1d 08 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b08
c0012a71:	83 ec 08             	sub    esp,0x8
c0012a74:	6a 01                	push   0x1
c0012a76:	68 c3 51 02 c0       	push   0xc00251c3
c0012a7b:	e8 ca 4f 00 00       	call   c0017a4a <Thr::loadDLL(char const*, bool)>
c0012a80:	83 c4 10             	add    esp,0x10
c0012a83:	83 ec 08             	sub    esp,0x8
c0012a86:	53                   	push   ebx
c0012a87:	50                   	push   eax
c0012a88:	e8 ee 51 00 00       	call   c0017c7b <Thr::executeDLL(unsigned long, void*)>
c0012a8d:	83 c4 10             	add    esp,0x10
c0012a90:	8b 1d 08 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b08
c0012a96:	83 ec 08             	sub    esp,0x8
c0012a99:	6a 01                	push   0x1
c0012a9b:	68 e0 51 02 c0       	push   0xc00251e0
c0012aa0:	e8 a5 4f 00 00       	call   c0017a4a <Thr::loadDLL(char const*, bool)>
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	83 ec 08             	sub    esp,0x8
c0012aab:	53                   	push   ebx
c0012aac:	50                   	push   eax
c0012aad:	e8 c9 51 00 00       	call   c0017c7b <Thr::executeDLL(unsigned long, void*)>
c0012ab2:	83 c4 10             	add    esp,0x10
c0012ab5:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0012aba:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012ac0:	83 e0 04             	and    eax,0x4
c0012ac3:	84 c0                	test   al,al
c0012ac5:	0f 84 15 01 00 00    	je     c0012be0 <ACPI::open(int, int, void*)+0x474>
c0012acb:	83 ec 0c             	sub    esp,0xc
c0012ace:	68 fd 51 02 c0       	push   0xc00251fd
c0012ad3:	e8 45 6f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012ad8:	83 c4 10             	add    esp,0x10
c0012adb:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012ae6:	83 ec 0c             	sub    esp,0xc
c0012ae9:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012af0:	e8 ce 6e ff ff       	call   c00099c3 <malloc>
c0012af5:	83 c4 10             	add    esp,0x10
c0012af8:	89 c3                	mov    ebx,eax
c0012afa:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0012aff:	83 ec 04             	sub    esp,0x4
c0012b02:	50                   	push   eax
c0012b03:	68 1a 52 02 c0       	push   0xc002521a
c0012b08:	53                   	push   ebx
c0012b09:	e8 10 a7 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0012b0e:	83 c4 10             	add    esp,0x10
c0012b11:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012b18:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012b20:	74 1a                	je     c0012b3c <ACPI::open(int, int, void*)+0x3d0>
c0012b22:	83 ec 0c             	sub    esp,0xc
c0012b25:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012b2c:	e8 fd a9 ff ff       	call   c000d52e <File::exists()>
c0012b31:	83 c4 10             	add    esp,0x10
c0012b34:	84 c0                	test   al,al
c0012b36:	74 04                	je     c0012b3c <ACPI::open(int, int, void*)+0x3d0>
c0012b38:	b0 01                	mov    al,0x1
c0012b3a:	eb 04                	jmp    c0012b40 <ACPI::open(int, int, void*)+0x3d4>
c0012b3c:	b0 00                	mov    al,0x0
c0012b3e:	66 90                	xchg   ax,ax
c0012b40:	84 c0                	test   al,al
c0012b42:	74 28                	je     c0012b6c <ACPI::open(int, int, void*)+0x400>
c0012b44:	83 ec 08             	sub    esp,0x8
c0012b47:	6a 01                	push   0x1
c0012b49:	68 1a 52 02 c0       	push   0xc002521a
c0012b4e:	e8 f7 4e 00 00       	call   c0017a4a <Thr::loadDLL(char const*, bool)>
c0012b53:	83 c4 10             	add    esp,0x10
c0012b56:	83 ec 08             	sub    esp,0x8
c0012b59:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012b60:	50                   	push   eax
c0012b61:	e8 15 51 00 00       	call   c0017c7b <Thr::executeDLL(unsigned long, void*)>
c0012b66:	83 c4 10             	add    esp,0x10
c0012b69:	8d 76 00             	lea    esi,[esi+0x0]
c0012b6c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012b74:	74 2a                	je     c0012ba0 <ACPI::open(int, int, void*)+0x434>
c0012b76:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012b7e:	74 20                	je     c0012ba0 <ACPI::open(int, int, void*)+0x434>
c0012b80:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012b87:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b89:	83 c0 08             	add    eax,0x8
c0012b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b8e:	83 ec 0c             	sub    esp,0xc
c0012b91:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012b98:	ff d0                	call   eax
c0012b9a:	83 c4 10             	add    esp,0x10
c0012b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0012ba0:	a1 68 83 02 c0       	mov    eax,ds:0xc0028368
c0012ba5:	83 ec 08             	sub    esp,0x8
c0012ba8:	68 37 52 02 c0       	push   0xc0025237
c0012bad:	50                   	push   eax
c0012bae:	e8 01 ef ff ff       	call   c0011ab4 <findDataTable(unsigned char*, char*)>
c0012bb3:	83 c4 10             	add    esp,0x10
c0012bb6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012bbd:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012bc5:	74 19                	je     c0012be0 <ACPI::open(int, int, void*)+0x474>
c0012bc7:	83 ec 08             	sub    esp,0x8
c0012bca:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012bd1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012bd8:	e8 2b fb ff ff       	call   c0012708 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	b8 00 00 00 00       	mov    eax,0x0
c0012be5:	81 c4 70 01 00 00    	add    esp,0x170
c0012beb:	5b                   	pop    ebx
c0012bec:	5e                   	pop    esi
c0012bed:	5f                   	pop    edi
c0012bee:	c3                   	ret    
c0012bef:	90                   	nop

c0012bf0 <CPU::close(int, int, void*)>:
c0012bf0:	31 c0                	xor    eax,eax
c0012bf2:	c3                   	ret    
c0012bf3:	90                   	nop

c0012bf4 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012bf4:	55                   	push   ebp
c0012bf5:	57                   	push   edi
c0012bf6:	56                   	push   esi
c0012bf7:	53                   	push   ebx
c0012bf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012bfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012c00:	89 ce                	mov    esi,ecx
c0012c02:	89 d5                	mov    ebp,edx
c0012c04:	80 f9 04             	cmp    cl,0x4
c0012c07:	75 28                	jne    c0012c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012c09:	8d 42 f9             	lea    eax,[edx-0x7]
c0012c0c:	3c 03                	cmp    al,0x3
c0012c0e:	0f 86 63 01 00 00    	jbe    c0012d77 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012c14:	80 fa 03             	cmp    dl,0x3
c0012c17:	0f 84 5a 01 00 00    	je     c0012d77 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012c1d:	8d 7a f2             	lea    edi,[edx-0xe]
c0012c20:	b8 d0 73 02 c0       	mov    eax,0xc00273d0
c0012c25:	89 fb                	mov    ebx,edi
c0012c27:	80 fb 01             	cmp    bl,0x1
c0012c2a:	77 4e                	ja     c0012c7a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012c2c:	e9 52 01 00 00       	jmp    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c31:	80 f9 05             	cmp    cl,0x5
c0012c34:	75 4d                	jne    c0012c83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012c36:	b8 e0 73 02 c0       	mov    eax,0xc00273e0
c0012c3b:	80 fa 03             	cmp    dl,0x3
c0012c3e:	0f 86 3f 01 00 00    	jbe    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c44:	8d 7a fa             	lea    edi,[edx-0x6]
c0012c47:	b8 f0 73 02 c0       	mov    eax,0xc00273f0
c0012c4c:	89 fb                	mov    ebx,edi
c0012c4e:	80 fb 01             	cmp    bl,0x1
c0012c51:	0f 86 2c 01 00 00    	jbe    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c57:	b8 00 74 02 c0       	mov    eax,0xc0027400
c0012c5c:	80 fa 08             	cmp    dl,0x8
c0012c5f:	0f 84 1e 01 00 00    	je     c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c65:	89 d7                	mov    edi,edx
c0012c67:	b8 10 74 02 c0       	mov    eax,0xc0027410
c0012c6c:	83 e7 fb             	and    edi,0xfffffffb
c0012c6f:	89 fb                	mov    ebx,edi
c0012c71:	80 fb 09             	cmp    bl,0x9
c0012c74:	0f 84 09 01 00 00    	je     c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c7a:	31 c0                	xor    eax,eax
c0012c7c:	89 eb                	mov    ebx,ebp
c0012c7e:	0f b6 fb             	movzx  edi,bl
c0012c81:	eb 30                	jmp    c0012cb3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012c83:	31 c0                	xor    eax,eax
c0012c85:	80 f9 06             	cmp    cl,0x6
c0012c88:	75 f2                	jne    c0012c7c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012c8a:	80 fa 0a             	cmp    dl,0xa
c0012c8d:	77 ed                	ja     c0012c7c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012c8f:	bf de 05 00 00       	mov    edi,0x5de
c0012c94:	0f a3 d7             	bt     edi,edx
c0012c97:	73 e3                	jae    c0012c7c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012c99:	b8 20 74 02 c0       	mov    eax,0xc0027420
c0012c9e:	e9 e0 00 00 00       	jmp    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ca3:	39 c7                	cmp    edi,eax
c0012ca5:	0f 84 d3 00 00 00    	je     c0012d7e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012cab:	40                   	inc    eax
c0012cac:	3d d0 00 00 00       	cmp    eax,0xd0
c0012cb1:	74 09                	je     c0012cbc <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012cb3:	89 f3                	mov    ebx,esi
c0012cb5:	80 fb 0f             	cmp    bl,0xf
c0012cb8:	75 f1                	jne    c0012cab <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012cba:	eb e7                	jmp    c0012ca3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012cbc:	80 f9 10             	cmp    cl,0x10
c0012cbf:	75 14                	jne    c0012cd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012cc1:	8d 42 fc             	lea    eax,[edx-0x4]
c0012cc4:	83 e0 fb             	and    eax,0xfffffffb
c0012cc7:	3c 02                	cmp    al,0x2
c0012cc9:	76 34                	jbe    c0012cff <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012ccb:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0012cd0:	80 fa 02             	cmp    dl,0x2
c0012cd3:	eb 24                	jmp    c0012cf9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012cd5:	80 f9 11             	cmp    cl,0x11
c0012cd8:	75 13                	jne    c0012ced <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012cda:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0012cdf:	80 fa 03             	cmp    dl,0x3
c0012ce2:	0f 85 9b 00 00 00    	jne    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ce8:	e9 91 00 00 00       	jmp    c0012d7e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012ced:	80 f9 12             	cmp    cl,0x12
c0012cf0:	75 14                	jne    c0012d06 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012cf2:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0012cf7:	fe ca                	dec    dl
c0012cf9:	0f 85 84 00 00 00    	jne    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cff:	b8 40 74 02 c0       	mov    eax,0xc0027440
c0012d04:	eb 7d                	jmp    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d06:	80 f9 14             	cmp    cl,0x14
c0012d09:	75 12                	jne    c0012d1d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012d0b:	4a                   	dec    edx
c0012d0c:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0012d11:	80 fa 01             	cmp    dl,0x1
c0012d14:	77 6d                	ja     c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d16:	b8 50 74 02 c0       	mov    eax,0xc0027450
c0012d1b:	eb 66                	jmp    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d1d:	80 f9 15             	cmp    cl,0x15
c0012d20:	75 31                	jne    c0012d53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012d22:	b8 60 74 02 c0       	mov    eax,0xc0027460
c0012d27:	80 fa 01             	cmp    dl,0x1
c0012d2a:	74 57                	je     c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d2c:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0012d31:	80 fa 13             	cmp    dl,0x13
c0012d34:	76 0c                	jbe    c0012d42 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012d36:	80 fa 30             	cmp    dl,0x30
c0012d39:	75 48                	jne    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d3b:	b8 80 74 02 c0       	mov    eax,0xc0027480
c0012d40:	eb 41                	jmp    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d42:	b9 04 00 09 00       	mov    ecx,0x90004
c0012d47:	0f a3 d1             	bt     ecx,edx
c0012d4a:	73 37                	jae    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d4c:	b8 70 74 02 c0       	mov    eax,0xc0027470
c0012d51:	eb 30                	jmp    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d53:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0012d58:	80 f9 16             	cmp    cl,0x16
c0012d5b:	75 26                	jne    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d5d:	b8 90 74 02 c0       	mov    eax,0xc0027490
c0012d62:	84 d2                	test   dl,dl
c0012d64:	74 1d                	je     c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d66:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0012d6b:	80 fa 30             	cmp    dl,0x30
c0012d6e:	75 13                	jne    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d70:	b8 a0 74 02 c0       	mov    eax,0xc00274a0
c0012d75:	eb 0c                	jmp    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d77:	b8 c0 73 02 c0       	mov    eax,0xc00273c0
c0012d7c:	eb 05                	jmp    c0012d83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d7e:	b8 30 74 02 c0       	mov    eax,0xc0027430
c0012d83:	5b                   	pop    ebx
c0012d84:	5e                   	pop    esi
c0012d85:	5f                   	pop    edi
c0012d86:	5d                   	pop    ebp
c0012d87:	c3                   	ret    

c0012d88 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012d88:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d90:	80 f9 04             	cmp    cl,0x4
c0012d93:	75 6b                	jne    c0012e00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012d95:	b8 20 72 02 c0       	mov    eax,0xc0027220
c0012d9a:	80 fa 01             	cmp    dl,0x1
c0012d9d:	0f 86 92 02 00 00    	jbe    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012da3:	b8 30 72 02 c0       	mov    eax,0xc0027230
c0012da8:	80 fa 02             	cmp    dl,0x2
c0012dab:	0f 84 84 02 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012db1:	b8 40 72 02 c0       	mov    eax,0xc0027240
c0012db6:	80 fa 03             	cmp    dl,0x3
c0012db9:	0f 84 76 02 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012dbf:	b8 50 72 02 c0       	mov    eax,0xc0027250
c0012dc4:	80 fa 04             	cmp    dl,0x4
c0012dc7:	0f 84 68 02 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012dcd:	b8 60 72 02 c0       	mov    eax,0xc0027260
c0012dd2:	80 fa 05             	cmp    dl,0x5
c0012dd5:	0f 84 5a 02 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ddb:	b8 40 72 02 c0       	mov    eax,0xc0027240
c0012de0:	80 fa 07             	cmp    dl,0x7
c0012de3:	0f 84 4c 02 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012de9:	83 ea 08             	sub    edx,0x8
c0012dec:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0012df1:	80 fa 01             	cmp    dl,0x1
c0012df4:	0f 87 3b 02 00 00    	ja     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012dfa:	b8 70 72 02 c0       	mov    eax,0xc0027270
c0012dff:	c3                   	ret    
c0012e00:	80 f9 05             	cmp    cl,0x5
c0012e03:	75 45                	jne    c0012e4a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012e05:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012e08:	b8 80 72 02 c0       	mov    eax,0xc0027280
c0012e0d:	80 f9 02             	cmp    cl,0x2
c0012e10:	0f 86 1f 02 00 00    	jbe    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e16:	80 fa 04             	cmp    dl,0x4
c0012e19:	0f 84 f3 01 00 00    	je     c0013012 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012e1f:	80 fa 07             	cmp    dl,0x7
c0012e22:	0f 84 0d 02 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e28:	b8 90 72 02 c0       	mov    eax,0xc0027290
c0012e2d:	80 fa 08             	cmp    dl,0x8
c0012e30:	0f 84 ff 01 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e36:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0012e3b:	80 fa 09             	cmp    dl,0x9
c0012e3e:	0f 85 f1 01 00 00    	jne    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e44:	b8 a0 72 02 c0       	mov    eax,0xc00272a0
c0012e49:	c3                   	ret    
c0012e4a:	80 f9 06             	cmp    cl,0x6
c0012e4d:	0f 85 85 01 00 00    	jne    c0012fd8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012e53:	b8 b0 72 02 c0       	mov    eax,0xc00272b0
c0012e58:	80 fa 01             	cmp    dl,0x1
c0012e5b:	0f 84 d4 01 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e61:	8d 42 fb             	lea    eax,[edx-0x5]
c0012e64:	3c 01                	cmp    al,0x1
c0012e66:	0f 86 ac 01 00 00    	jbe    c0013018 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012e6c:	80 fa 03             	cmp    dl,0x3
c0012e6f:	0f 84 a3 01 00 00    	je     c0013018 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012e75:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012e78:	b8 d0 72 02 c0       	mov    eax,0xc00272d0
c0012e7d:	80 f9 01             	cmp    cl,0x1
c0012e80:	0f 86 af 01 00 00    	jbe    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e86:	80 fa 09             	cmp    dl,0x9
c0012e89:	0f 84 8f 01 00 00    	je     c001301e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012e8f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012e92:	80 f9 01             	cmp    cl,0x1
c0012e95:	0f 86 9a 01 00 00    	jbe    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e9b:	b8 e0 72 02 c0       	mov    eax,0xc00272e0
c0012ea0:	80 fa 0d             	cmp    dl,0xd
c0012ea3:	0f 84 8c 01 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ea9:	b8 f0 72 02 c0       	mov    eax,0xc00272f0
c0012eae:	80 fa 0e             	cmp    dl,0xe
c0012eb1:	0f 84 7e 01 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eb7:	b8 00 73 02 c0       	mov    eax,0xc0027300
c0012ebc:	80 fa 0f             	cmp    dl,0xf
c0012ebf:	0f 84 70 01 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ec5:	b8 e0 72 02 c0       	mov    eax,0xc00272e0
c0012eca:	80 fa 15             	cmp    dl,0x15
c0012ecd:	0f 84 62 01 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ed3:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012ed6:	b8 00 73 02 c0       	mov    eax,0xc0027300
c0012edb:	80 f9 01             	cmp    cl,0x1
c0012ede:	0f 86 51 01 00 00    	jbe    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ee4:	80 fa 1a             	cmp    dl,0x1a
c0012ee7:	0f 84 37 01 00 00    	je     c0013024 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012eed:	80 fa 1c             	cmp    dl,0x1c
c0012ef0:	0f 84 34 01 00 00    	je     c001302a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012ef6:	80 fa 1d             	cmp    dl,0x1d
c0012ef9:	0f 84 36 01 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eff:	b8 30 73 02 c0       	mov    eax,0xc0027330
c0012f04:	80 fa 25             	cmp    dl,0x25
c0012f07:	0f 84 28 01 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f0d:	8d 4a da             	lea    ecx,[edx-0x26]
c0012f10:	b8 20 73 02 c0       	mov    eax,0xc0027320
c0012f15:	80 f9 01             	cmp    cl,0x1
c0012f18:	0f 86 17 01 00 00    	jbe    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f1e:	b8 40 73 02 c0       	mov    eax,0xc0027340
c0012f23:	80 fa 2a             	cmp    dl,0x2a
c0012f26:	0f 84 09 01 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f2c:	b8 30 73 02 c0       	mov    eax,0xc0027330
c0012f31:	80 fa 2c             	cmp    dl,0x2c
c0012f34:	0f 84 fb 00 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f3a:	b8 40 73 02 c0       	mov    eax,0xc0027340
c0012f3f:	80 fa 2d             	cmp    dl,0x2d
c0012f42:	0f 84 ed 00 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f48:	b8 10 73 02 c0       	mov    eax,0xc0027310
c0012f4d:	80 fa 2e             	cmp    dl,0x2e
c0012f50:	0f 84 df 00 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f56:	b8 30 73 02 c0       	mov    eax,0xc0027330
c0012f5b:	80 fa 2f             	cmp    dl,0x2f
c0012f5e:	0f 84 d1 00 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f64:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012f67:	b8 20 73 02 c0       	mov    eax,0xc0027320
c0012f6c:	80 f9 01             	cmp    cl,0x1
c0012f6f:	0f 86 c0 00 00 00    	jbe    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f75:	b8 50 73 02 c0       	mov    eax,0xc0027350
c0012f7a:	80 fa 37             	cmp    dl,0x37
c0012f7d:	0f 84 b2 00 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f83:	b8 60 73 02 c0       	mov    eax,0xc0027360
c0012f88:	80 fa 3a             	cmp    dl,0x3a
c0012f8b:	0f 84 a4 00 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f91:	b8 70 73 02 c0       	mov    eax,0xc0027370
c0012f96:	80 fa 3c             	cmp    dl,0x3c
c0012f99:	0f 84 96 00 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f9f:	b8 80 73 02 c0       	mov    eax,0xc0027380
c0012fa4:	80 fa 3d             	cmp    dl,0x3d
c0012fa7:	0f 84 88 00 00 00    	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fad:	b8 60 73 02 c0       	mov    eax,0xc0027360
c0012fb2:	80 fa 3e             	cmp    dl,0x3e
c0012fb5:	74 7e                	je     c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fb7:	8d 42 bb             	lea    eax,[edx-0x45]
c0012fba:	3c 01                	cmp    al,0x1
c0012fbc:	76 72                	jbe    c0013030 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012fbe:	80 fa 3f             	cmp    dl,0x3f
c0012fc1:	74 6d                	je     c0013030 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012fc3:	80 fa 4a             	cmp    dl,0x4a
c0012fc6:	74 0a                	je     c0012fd2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012fc8:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0012fcd:	80 fa 4d             	cmp    dl,0x4d
c0012fd0:	75 63                	jne    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fd2:	b8 50 73 02 c0       	mov    eax,0xc0027350
c0012fd7:	c3                   	ret    
c0012fd8:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0012fdd:	80 f9 0b             	cmp    cl,0xb
c0012fe0:	75 0a                	jne    c0012fec <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012fe2:	fe ca                	dec    dl
c0012fe4:	75 4f                	jne    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fe6:	b8 90 73 02 c0       	mov    eax,0xc0027390
c0012feb:	c3                   	ret    
c0012fec:	80 f9 0f             	cmp    cl,0xf
c0012fef:	75 44                	jne    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ff1:	b8 a0 73 02 c0       	mov    eax,0xc00273a0
c0012ff6:	80 fa 02             	cmp    dl,0x2
c0012ff9:	76 3a                	jbe    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ffb:	8d 42 fd             	lea    eax,[edx-0x3]
c0012ffe:	3c 01                	cmp    al,0x1
c0013000:	76 0a                	jbe    c001300c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0013002:	b8 bd 53 02 c0       	mov    eax,0xc00253bd
c0013007:	80 fa 06             	cmp    dl,0x6
c001300a:	75 29                	jne    c0013035 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001300c:	b8 b0 73 02 c0       	mov    eax,0xc00273b0
c0013011:	c3                   	ret    
c0013012:	b8 90 72 02 c0       	mov    eax,0xc0027290
c0013017:	c3                   	ret    
c0013018:	b8 c0 72 02 c0       	mov    eax,0xc00272c0
c001301d:	c3                   	ret    
c001301e:	b8 e0 72 02 c0       	mov    eax,0xc00272e0
c0013023:	c3                   	ret    
c0013024:	b8 10 73 02 c0       	mov    eax,0xc0027310
c0013029:	c3                   	ret    
c001302a:	b8 20 73 02 c0       	mov    eax,0xc0027320
c001302f:	c3                   	ret    
c0013030:	b8 70 73 02 c0       	mov    eax,0xc0027370
c0013035:	c3                   	ret    

c0013036 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0013036:	60                   	pusha  
c0013037:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001303b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001303f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013043:	9c                   	pushf  
c0013044:	fa                   	cli    
c0013045:	0f 09                	wbinvd 
c0013047:	0f 30                	wrmsr  
c0013049:	9d                   	popf   
c001304a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001304e:	89 02                	mov    DWORD PTR [edx],eax
c0013050:	61                   	popa   
c0013051:	c3                   	ret    

c0013052 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0013052:	60                   	pusha  
c0013053:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013057:	9c                   	pushf  
c0013058:	fa                   	cli    
c0013059:	0f 09                	wbinvd 
c001305b:	31 c0                	xor    eax,eax
c001305d:	31 d2                	xor    edx,edx
c001305f:	0f 32                	rdmsr  
c0013061:	9d                   	popf   
c0013062:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013066:	89 02                	mov    DWORD PTR [edx],eax
c0013068:	61                   	popa   
c0013069:	c3                   	ret    

c001306a <CPU::AMD_K6_writeback(int, int, int)>:
c001306a:	56                   	push   esi
c001306b:	53                   	push   ebx
c001306c:	83 ec 10             	sub    esp,0x10
c001306f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013073:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013078:	75 5d                	jne    c00130d7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001307a:	83 f8 08             	cmp    eax,0x8
c001307d:	75 09                	jne    c0013088 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001307f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013084:	7e 13                	jle    c0013099 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013086:	eb 30                	jmp    c00130b8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013088:	83 f8 06             	cmp    eax,0x6
c001308b:	7c 4a                	jl     c00130d7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001308d:	83 f8 07             	cmp    eax,0x7
c0013090:	7e 07                	jle    c0013099 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013092:	83 f8 09             	cmp    eax,0x9
c0013095:	74 21                	je     c00130b8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013097:	eb 3e                	jmp    c00130d7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013099:	89 e6                	mov    esi,esp
c001309b:	8b 1d 2c 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b2c
c00130a1:	56                   	push   esi
c00130a2:	c1 eb 15             	shr    ebx,0x15
c00130a5:	68 82 00 00 c0       	push   0xc0000082
c00130aa:	83 e3 7e             	and    ebx,0x7e
c00130ad:	e8 a0 ff ff ff       	call   c0013052 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00130b2:	56                   	push   esi
c00130b3:	6a 00                	push   0x0
c00130b5:	53                   	push   ebx
c00130b6:	eb 12                	jmp    c00130ca <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00130b8:	89 e3                	mov    ebx,esp
c00130ba:	53                   	push   ebx
c00130bb:	68 82 00 00 c0       	push   0xc0000082
c00130c0:	e8 8d ff ff ff       	call   c0013052 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00130c5:	53                   	push   ebx
c00130c6:	6a 00                	push   0x0
c00130c8:	6a 00                	push   0x0
c00130ca:	68 82 00 00 c0       	push   0xc0000082
c00130cf:	e8 62 ff ff ff       	call   c0013036 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00130d4:	83 c4 18             	add    esp,0x18
c00130d7:	83 c4 10             	add    esp,0x10
c00130da:	5b                   	pop    ebx
c00130db:	5e                   	pop    esi
c00130dc:	c3                   	ret    
c00130dd:	90                   	nop

c00130de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00130de:	55                   	push   ebp
c00130df:	57                   	push   edi
c00130e0:	56                   	push   esi
c00130e1:	53                   	push   ebx
c00130e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130e6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130ea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00130ee:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00130f2:	39 05 c0 74 02 c0    	cmp    DWORD PTR ds:0xc00274c0,eax
c00130f8:	75 23                	jne    c001311d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00130fa:	a1 cc 85 02 c0       	mov    eax,ds:0xc00285cc
c00130ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013103:	89 06                	mov    DWORD PTR [esi],eax
c0013105:	a1 c8 85 02 c0       	mov    eax,ds:0xc00285c8
c001310a:	89 07                	mov    DWORD PTR [edi],eax
c001310c:	a1 c4 85 02 c0       	mov    eax,ds:0xc00285c4
c0013111:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013114:	a1 c0 85 02 c0       	mov    eax,ds:0xc00285c0
c0013119:	89 02                	mov    DWORD PTR [edx],eax
c001311b:	eb 3f                	jmp    c001315c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001311d:	31 c9                	xor    ecx,ecx
c001311f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013123:	0f a2                	cpuid  
c0013125:	89 06                	mov    DWORD PTR [esi],eax
c0013127:	89 1f                	mov    DWORD PTR [edi],ebx
c0013129:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001312d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013130:	89 10                	mov    DWORD PTR [eax],edx
c0013132:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013136:	a3 c0 74 02 c0       	mov    ds:0xc00274c0,eax
c001313b:	8b 06                	mov    eax,DWORD PTR [esi]
c001313d:	a3 cc 85 02 c0       	mov    ds:0xc00285cc,eax
c0013142:	8b 07                	mov    eax,DWORD PTR [edi]
c0013144:	a3 c8 85 02 c0       	mov    ds:0xc00285c8,eax
c0013149:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001314c:	a3 c4 85 02 c0       	mov    ds:0xc00285c4,eax
c0013151:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013155:	8b 00                	mov    eax,DWORD PTR [eax]
c0013157:	a3 c0 85 02 c0       	mov    ds:0xc00285c0,eax
c001315c:	5b                   	pop    ebx
c001315d:	5e                   	pop    esi
c001315e:	5f                   	pop    edi
c001315f:	5d                   	pop    ebp
c0013160:	c3                   	ret    
c0013161:	90                   	nop

c0013162 <CPU::cpuidCheckEDX(unsigned int)>:
c0013162:	83 ec 10             	sub    esp,0x10
c0013165:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013169:	50                   	push   eax
c001316a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001316e:	50                   	push   eax
c001316f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013173:	50                   	push   eax
c0013174:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013178:	50                   	push   eax
c0013179:	6a 01                	push   0x1
c001317b:	e8 5e ff ff ff       	call   c00130de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013180:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013184:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013188:	0f 95 c0             	setne  al
c001318b:	83 c4 24             	add    esp,0x24
c001318e:	c3                   	ret    
c001318f:	90                   	nop

c0013190 <CPU::cpuidCheckECX(unsigned int)>:
c0013190:	83 ec 10             	sub    esp,0x10
c0013193:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013197:	50                   	push   eax
c0013198:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001319c:	50                   	push   eax
c001319d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131a1:	50                   	push   eax
c00131a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131a6:	50                   	push   eax
c00131a7:	6a 01                	push   0x1
c00131a9:	e8 30 ff ff ff       	call   c00130de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00131ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00131b2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00131b6:	0f 95 c0             	setne  al
c00131b9:	83 c4 24             	add    esp,0x24
c00131bc:	c3                   	ret    
c00131bd:	90                   	nop

c00131be <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00131be:	83 ec 10             	sub    esp,0x10
c00131c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131c5:	50                   	push   eax
c00131c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131ca:	50                   	push   eax
c00131cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131cf:	50                   	push   eax
c00131d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131d4:	50                   	push   eax
c00131d5:	6a 07                	push   0x7
c00131d7:	e8 02 ff ff ff       	call   c00130de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00131dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00131e0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00131e4:	0f 95 c0             	setne  al
c00131e7:	83 c4 24             	add    esp,0x24
c00131ea:	c3                   	ret    
c00131eb:	90                   	nop

c00131ec <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00131ec:	83 ec 10             	sub    esp,0x10
c00131ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131f3:	50                   	push   eax
c00131f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131f8:	50                   	push   eax
c00131f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131fd:	50                   	push   eax
c00131fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013202:	50                   	push   eax
c0013203:	6a 07                	push   0x7
c0013205:	e8 d4 fe ff ff       	call   c00130de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001320a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001320e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013212:	0f 95 c0             	setne  al
c0013215:	83 c4 24             	add    esp,0x24
c0013218:	c3                   	ret    
c0013219:	90                   	nop

c001321a <CPU::CPU()>:
c001321a:	83 ec 0c             	sub    esp,0xc
c001321d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013221:	83 ec 08             	sub    esp,0x8
c0013224:	68 bd 53 02 c0       	push   0xc00253bd
c0013229:	50                   	push   eax
c001322a:	e8 0f b1 ff ff       	call   c000e33e <Device::Device(char const*)>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	ba 20 56 02 c0       	mov    edx,0xc0025620
c0013237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001323b:	89 10                	mov    DWORD PTR [eax],edx
c001323d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013241:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001324b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001324f:	05 78 01 00 00       	add    eax,0x178
c0013254:	83 ec 0c             	sub    esp,0xc
c0013257:	50                   	push   eax
c0013258:	e8 fd 5f ff ff       	call   c000925a <GDT::GDT()>
c001325d:	83 c4 10             	add    esp,0x10
c0013260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013264:	05 7c 09 00 00       	add    eax,0x97c
c0013269:	83 ec 0c             	sub    esp,0xc
c001326c:	50                   	push   eax
c001326d:	e8 3e 62 ff ff       	call   c00094b0 <IDT::IDT()>
c0013272:	83 c4 10             	add    esp,0x10
c0013275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013279:	05 7c 11 00 00       	add    eax,0x117c
c001327e:	83 ec 0c             	sub    esp,0xc
c0013281:	50                   	push   eax
c0013282:	e8 49 80 ff ff       	call   c000b2d0 <TSS::TSS()>
c0013287:	83 c4 10             	add    esp,0x10
c001328a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013299:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00132a3:	90                   	nop
c00132a4:	83 c4 0c             	add    esp,0xc
c00132a7:	c3                   	ret    

c00132a8 <CPU::displayFeatures()>:
c00132a8:	c3                   	ret    
c00132a9:	90                   	nop

c00132aa <CPU::detectFeatures()>:
c00132aa:	55                   	push   ebp
c00132ab:	57                   	push   edi
c00132ac:	56                   	push   esi
c00132ad:	53                   	push   ebx
c00132ae:	83 ec 50             	sub    esp,0x50
c00132b1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00132b5:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00132bf:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00132c6:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00132cc:	6a 0d                	push   0xd
c00132ce:	6a 00                	push   0x0
c00132d0:	55                   	push   ebp
c00132d1:	e8 ae d3 fe ff       	call   c0000684 <memset>
c00132d6:	83 c4 10             	add    esp,0x10
c00132d9:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c00132de:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00132e5:	0f 84 22 09 00 00    	je     c0013c0d <CPU::detectFeatures()+0x963>
c00132eb:	83 ec 0c             	sub    esp,0xc
c00132ee:	89 ef                	mov    edi,ebp
c00132f0:	6a 10                	push   0x10
c00132f2:	e8 6b fe ff ff       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c00132f7:	83 e0 01             	and    eax,0x1
c00132fa:	8d 14 00             	lea    edx,[eax+eax*1]
c00132fd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013303:	83 e0 fd             	and    eax,0xfffffffd
c0013306:	09 d0                	or     eax,edx
c0013308:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001330e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013315:	e8 48 fe ff ff       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c001331a:	83 e0 01             	and    eax,0x1
c001331d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013324:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001332a:	83 e0 fb             	and    eax,0xfffffffb
c001332d:	09 d0                	or     eax,edx
c001332f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013335:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001333c:	e8 21 fe ff ff       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c0013341:	83 e0 01             	and    eax,0x1
c0013344:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001334b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013351:	83 e0 f7             	and    eax,0xfffffff7
c0013354:	09 d0                	or     eax,edx
c0013356:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001335c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013363:	e8 fa fd ff ff       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c0013368:	83 e0 01             	and    eax,0x1
c001336b:	c1 e0 04             	shl    eax,0x4
c001336e:	88 c2                	mov    dl,al
c0013370:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013376:	83 e0 ef             	and    eax,0xffffffef
c0013379:	09 d0                	or     eax,edx
c001337b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013381:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013388:	e8 d5 fd ff ff       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c001338d:	83 e0 01             	and    eax,0x1
c0013390:	c1 e0 05             	shl    eax,0x5
c0013393:	88 c2                	mov    dl,al
c0013395:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001339b:	83 e0 df             	and    eax,0xffffffdf
c001339e:	09 d0                	or     eax,edx
c00133a0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00133a6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00133ad:	e8 b0 fd ff ff       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c00133b2:	83 e0 01             	and    eax,0x1
c00133b5:	8d 14 00             	lea    edx,[eax+eax*1]
c00133b8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00133be:	83 e0 fd             	and    eax,0xfffffffd
c00133c1:	09 d0                	or     eax,edx
c00133c3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00133c9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00133d0:	e8 8d fd ff ff       	call   c0013162 <CPU::cpuidCheckEDX(unsigned int)>
c00133d5:	83 e0 01             	and    eax,0x1
c00133d8:	c1 e0 06             	shl    eax,0x6
c00133db:	88 c2                	mov    dl,al
c00133dd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00133e3:	83 e0 bf             	and    eax,0xffffffbf
c00133e6:	09 d0                	or     eax,edx
c00133e8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00133ee:	58                   	pop    eax
c00133ef:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133f3:	50                   	push   eax
c00133f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133f8:	50                   	push   eax
c00133f9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00133fd:	56                   	push   esi
c00133fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013402:	50                   	push   eax
c0013403:	6a 00                	push   0x0
c0013405:	e8 d4 fc ff ff       	call   c00130de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001340a:	b8 04 00 00 00       	mov    eax,0x4
c001340f:	89 c1                	mov    ecx,eax
c0013411:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013413:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013419:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001341d:	89 c1                	mov    ecx,eax
c001341f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013421:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013427:	8d 74 24 38          	lea    esi,[esp+0x38]
c001342b:	89 c1                	mov    ecx,eax
c001342d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001342f:	83 c4 18             	add    esp,0x18
c0013432:	68 68 52 02 c0       	push   0xc0025268
c0013437:	55                   	push   ebp
c0013438:	e8 8f d3 fe ff       	call   c00007cc <strcmp>
c001343d:	83 c4 10             	add    esp,0x10
c0013440:	85 c0                	test   eax,eax
c0013442:	75 0f                	jne    c0013453 <CPU::detectFeatures()+0x1a9>
c0013444:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001344e:	e9 22 02 00 00       	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c0013453:	50                   	push   eax
c0013454:	50                   	push   eax
c0013455:	68 75 52 02 c0       	push   0xc0025275
c001345a:	55                   	push   ebp
c001345b:	e8 6c d3 fe ff       	call   c00007cc <strcmp>
c0013460:	83 c4 10             	add    esp,0x10
c0013463:	85 c0                	test   eax,eax
c0013465:	74 dd                	je     c0013444 <CPU::detectFeatures()+0x19a>
c0013467:	50                   	push   eax
c0013468:	50                   	push   eax
c0013469:	68 82 52 02 c0       	push   0xc0025282
c001346e:	55                   	push   ebp
c001346f:	e8 58 d3 fe ff       	call   c00007cc <strcmp>
c0013474:	83 c4 10             	add    esp,0x10
c0013477:	85 c0                	test   eax,eax
c0013479:	74 2a                	je     c00134a5 <CPU::detectFeatures()+0x1fb>
c001347b:	50                   	push   eax
c001347c:	50                   	push   eax
c001347d:	68 8f 52 02 c0       	push   0xc002528f
c0013482:	55                   	push   ebp
c0013483:	e8 44 d3 fe ff       	call   c00007cc <strcmp>
c0013488:	83 c4 10             	add    esp,0x10
c001348b:	85 c0                	test   eax,eax
c001348d:	74 16                	je     c00134a5 <CPU::detectFeatures()+0x1fb>
c001348f:	50                   	push   eax
c0013490:	50                   	push   eax
c0013491:	68 9c 52 02 c0       	push   0xc002529c
c0013496:	55                   	push   ebp
c0013497:	e8 30 d3 fe ff       	call   c00007cc <strcmp>
c001349c:	83 c4 10             	add    esp,0x10
c001349f:	85 c0                	test   eax,eax
c00134a1:	74 48                	je     c00134eb <CPU::detectFeatures()+0x241>
c00134a3:	eb 0f                	jmp    c00134b4 <CPU::detectFeatures()+0x20a>
c00134a5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00134af:	e9 c1 01 00 00       	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c00134b4:	50                   	push   eax
c00134b5:	50                   	push   eax
c00134b6:	68 a9 52 02 c0       	push   0xc00252a9
c00134bb:	55                   	push   ebp
c00134bc:	e8 0b d3 fe ff       	call   c00007cc <strcmp>
c00134c1:	83 c4 10             	add    esp,0x10
c00134c4:	85 c0                	test   eax,eax
c00134c6:	74 23                	je     c00134eb <CPU::detectFeatures()+0x241>
c00134c8:	57                   	push   edi
c00134c9:	57                   	push   edi
c00134ca:	68 b6 52 02 c0       	push   0xc00252b6
c00134cf:	55                   	push   ebp
c00134d0:	e8 f7 d2 fe ff       	call   c00007cc <strcmp>
c00134d5:	83 c4 10             	add    esp,0x10
c00134d8:	85 c0                	test   eax,eax
c00134da:	75 1e                	jne    c00134fa <CPU::detectFeatures()+0x250>
c00134dc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00134e6:	e9 8a 01 00 00       	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c00134eb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00134f5:	e9 7b 01 00 00       	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c00134fa:	56                   	push   esi
c00134fb:	56                   	push   esi
c00134fc:	68 c3 52 02 c0       	push   0xc00252c3
c0013501:	55                   	push   ebp
c0013502:	e8 c5 d2 fe ff       	call   c00007cc <strcmp>
c0013507:	83 c4 10             	add    esp,0x10
c001350a:	85 c0                	test   eax,eax
c001350c:	75 0f                	jne    c001351d <CPU::detectFeatures()+0x273>
c001350e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013518:	e9 58 01 00 00       	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c001351d:	51                   	push   ecx
c001351e:	51                   	push   ecx
c001351f:	68 82 52 02 c0       	push   0xc0025282
c0013524:	55                   	push   ebp
c0013525:	e8 a2 d2 fe ff       	call   c00007cc <strcmp>
c001352a:	83 c4 10             	add    esp,0x10
c001352d:	85 c0                	test   eax,eax
c001352f:	75 0f                	jne    c0013540 <CPU::detectFeatures()+0x296>
c0013531:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001353b:	e9 35 01 00 00       	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c0013540:	52                   	push   edx
c0013541:	52                   	push   edx
c0013542:	68 d0 52 02 c0       	push   0xc00252d0
c0013547:	55                   	push   ebp
c0013548:	e8 7f d2 fe ff       	call   c00007cc <strcmp>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	85 c0                	test   eax,eax
c0013552:	75 0f                	jne    c0013563 <CPU::detectFeatures()+0x2b9>
c0013554:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001355e:	e9 12 01 00 00       	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c0013563:	50                   	push   eax
c0013564:	50                   	push   eax
c0013565:	68 dd 52 02 c0       	push   0xc00252dd
c001356a:	55                   	push   ebp
c001356b:	e8 5c d2 fe ff       	call   c00007cc <strcmp>
c0013570:	83 c4 10             	add    esp,0x10
c0013573:	85 c0                	test   eax,eax
c0013575:	75 0f                	jne    c0013586 <CPU::detectFeatures()+0x2dc>
c0013577:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013581:	e9 ef 00 00 00       	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c0013586:	50                   	push   eax
c0013587:	50                   	push   eax
c0013588:	68 ea 52 02 c0       	push   0xc00252ea
c001358d:	55                   	push   ebp
c001358e:	e8 39 d2 fe ff       	call   c00007cc <strcmp>
c0013593:	83 c4 10             	add    esp,0x10
c0013596:	85 c0                	test   eax,eax
c0013598:	75 0f                	jne    c00135a9 <CPU::detectFeatures()+0x2ff>
c001359a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00135a4:	e9 cc 00 00 00       	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c00135a9:	50                   	push   eax
c00135aa:	50                   	push   eax
c00135ab:	68 f7 52 02 c0       	push   0xc00252f7
c00135b0:	55                   	push   ebp
c00135b1:	e8 16 d2 fe ff       	call   c00007cc <strcmp>
c00135b6:	83 c4 10             	add    esp,0x10
c00135b9:	85 c0                	test   eax,eax
c00135bb:	75 0f                	jne    c00135cc <CPU::detectFeatures()+0x322>
c00135bd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00135c7:	e9 a9 00 00 00       	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c00135cc:	50                   	push   eax
c00135cd:	50                   	push   eax
c00135ce:	68 04 53 02 c0       	push   0xc0025304
c00135d3:	55                   	push   ebp
c00135d4:	e8 f3 d1 fe ff       	call   c00007cc <strcmp>
c00135d9:	83 c4 10             	add    esp,0x10
c00135dc:	85 c0                	test   eax,eax
c00135de:	75 0f                	jne    c00135ef <CPU::detectFeatures()+0x345>
c00135e0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00135ea:	e9 86 00 00 00       	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c00135ef:	50                   	push   eax
c00135f0:	50                   	push   eax
c00135f1:	68 11 53 02 c0       	push   0xc0025311
c00135f6:	55                   	push   ebp
c00135f7:	e8 d0 d1 fe ff       	call   c00007cc <strcmp>
c00135fc:	83 c4 10             	add    esp,0x10
c00135ff:	85 c0                	test   eax,eax
c0013601:	75 0c                	jne    c001360f <CPU::detectFeatures()+0x365>
c0013603:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001360d:	eb 66                	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c001360f:	50                   	push   eax
c0013610:	50                   	push   eax
c0013611:	68 1e 53 02 c0       	push   0xc002531e
c0013616:	55                   	push   ebp
c0013617:	e8 b0 d1 fe ff       	call   c00007cc <strcmp>
c001361c:	83 c4 10             	add    esp,0x10
c001361f:	85 c0                	test   eax,eax
c0013621:	75 0c                	jne    c001362f <CPU::detectFeatures()+0x385>
c0013623:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001362d:	eb 46                	jmp    c0013675 <CPU::detectFeatures()+0x3cb>
c001362f:	57                   	push   edi
c0013630:	57                   	push   edi
c0013631:	68 2b 53 02 c0       	push   0xc002532b
c0013636:	55                   	push   ebp
c0013637:	e8 90 d1 fe ff       	call   c00007cc <strcmp>
c001363c:	83 c4 10             	add    esp,0x10
c001363f:	85 c0                	test   eax,eax
c0013641:	74 e0                	je     c0013623 <CPU::detectFeatures()+0x379>
c0013643:	56                   	push   esi
c0013644:	56                   	push   esi
c0013645:	68 38 53 02 c0       	push   0xc0025338
c001364a:	55                   	push   ebp
c001364b:	e8 7c d1 fe ff       	call   c00007cc <strcmp>
c0013650:	83 c4 10             	add    esp,0x10
c0013653:	85 c0                	test   eax,eax
c0013655:	74 cc                	je     c0013623 <CPU::detectFeatures()+0x379>
c0013657:	51                   	push   ecx
c0013658:	51                   	push   ecx
c0013659:	68 45 53 02 c0       	push   0xc0025345
c001365e:	55                   	push   ebp
c001365f:	e8 68 d1 fe ff       	call   c00007cc <strcmp>
c0013664:	83 c4 10             	add    esp,0x10
c0013667:	85 c0                	test   eax,eax
c0013669:	74 b8                	je     c0013623 <CPU::detectFeatures()+0x379>
c001366b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013675:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001367a:	0f 86 be 00 00 00    	jbe    c001373e <CPU::detectFeatures()+0x494>
c0013680:	83 ec 0c             	sub    esp,0xc
c0013683:	68 80 00 00 00       	push   0x80
c0013688:	e8 31 fb ff ff       	call   c00131be <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001368d:	83 e0 01             	and    eax,0x1
c0013690:	c1 e0 06             	shl    eax,0x6
c0013693:	88 c2                	mov    dl,al
c0013695:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001369b:	83 e0 bf             	and    eax,0xffffffbf
c001369e:	09 d0                	or     eax,edx
c00136a0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00136a6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00136ad:	e8 0c fb ff ff       	call   c00131be <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00136b2:	83 e0 01             	and    eax,0x1
c00136b5:	c1 e0 04             	shl    eax,0x4
c00136b8:	88 c2                	mov    dl,al
c00136ba:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00136c0:	83 e0 ef             	and    eax,0xffffffef
c00136c3:	09 d0                	or     eax,edx
c00136c5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00136cb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00136d2:	e8 e7 fa ff ff       	call   c00131be <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00136d7:	c1 e0 07             	shl    eax,0x7
c00136da:	88 c2                	mov    dl,al
c00136dc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00136e2:	83 e0 7f             	and    eax,0x7f
c00136e5:	09 d0                	or     eax,edx
c00136e7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00136ed:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00136f4:	e8 f3 fa ff ff       	call   c00131ec <CPU::cpuidCheckExtendedECX(unsigned int)>
c00136f9:	83 e0 01             	and    eax,0x1
c00136fc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013703:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013709:	83 e0 f7             	and    eax,0xfffffff7
c001370c:	09 d0                	or     eax,edx
c001370e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013714:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001371b:	e8 cc fa ff ff       	call   c00131ec <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013720:	83 c4 10             	add    esp,0x10
c0013723:	83 e0 01             	and    eax,0x1
c0013726:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001372d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013733:	83 e0 fb             	and    eax,0xfffffffb
c0013736:	09 d0                	or     eax,edx
c0013738:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001373e:	83 ec 0c             	sub    esp,0xc
c0013741:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013745:	50                   	push   eax
c0013746:	8d 44 24 28          	lea    eax,[esp+0x28]
c001374a:	50                   	push   eax
c001374b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001374f:	56                   	push   esi
c0013750:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013754:	50                   	push   eax
c0013755:	6a 01                	push   0x1
c0013757:	e8 82 f9 ff ff       	call   c00130de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001375c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013760:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013766:	88 ca                	mov    dl,cl
c0013768:	83 e0 f0             	and    eax,0xfffffff0
c001376b:	83 e2 0f             	and    edx,0xf
c001376e:	09 d0                	or     eax,edx
c0013770:	88 ca                	mov    dl,cl
c0013772:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013778:	c0 ea 04             	shr    dl,0x4
c001377b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001377f:	0f b6 c2             	movzx  eax,dl
c0013782:	83 c4 20             	add    esp,0x20
c0013785:	c1 e0 06             	shl    eax,0x6
c0013788:	89 c7                	mov    edi,eax
c001378a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013790:	66 25 3f c0          	and    ax,0xc03f
c0013794:	09 f8                	or     eax,edi
c0013796:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001379d:	89 c8                	mov    eax,ecx
c001379f:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00137a6:	c1 e8 08             	shr    eax,0x8
c00137a9:	83 e5 3f             	and    ebp,0x3f
c00137ac:	83 e0 0f             	and    eax,0xf
c00137af:	89 c7                	mov    edi,eax
c00137b1:	c1 e7 06             	shl    edi,0x6
c00137b4:	09 ef                	or     edi,ebp
c00137b6:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00137bd:	89 fa                	mov    edx,edi
c00137bf:	83 e5 c0             	and    ebp,0xffffffc0
c00137c2:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00137c8:	88 c2                	mov    dl,al
c00137ca:	c0 ea 02             	shr    dl,0x2
c00137cd:	89 d7                	mov    edi,edx
c00137cf:	09 ef                	or     edi,ebp
c00137d1:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00137d7:	89 fa                	mov    edx,edi
c00137d9:	83 e5 cf             	and    ebp,0xffffffcf
c00137dc:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00137e2:	89 cf                	mov    edi,ecx
c00137e4:	c1 ef 0c             	shr    edi,0xc
c00137e7:	83 e7 03             	and    edi,0x3
c00137ea:	c1 e7 04             	shl    edi,0x4
c00137ed:	09 ef                	or     edi,ebp
c00137ef:	3c 06                	cmp    al,0x6
c00137f1:	89 fa                	mov    edx,edi
c00137f3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00137f9:	74 04                	je     c00137ff <CPU::detectFeatures()+0x555>
c00137fb:	3c 0f                	cmp    al,0xf
c00137fd:	75 5c                	jne    c001385b <CPU::detectFeatures()+0x5b1>
c00137ff:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013803:	89 cf                	mov    edi,ecx
c0013805:	c1 ef 10             	shr    edi,0x10
c0013808:	c1 e7 04             	shl    edi,0x4
c001380b:	09 fa                	or     edx,edi
c001380d:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013813:	0f b6 d2             	movzx  edx,dl
c0013816:	66 81 e7 3f c0       	and    di,0xc03f
c001381b:	c1 e2 06             	shl    edx,0x6
c001381e:	09 fa                	or     edx,edi
c0013820:	3c 0f                	cmp    al,0xf
c0013822:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013829:	75 30                	jne    c001385b <CPU::detectFeatures()+0x5b1>
c001382b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013831:	c1 e9 14             	shr    ecx,0x14
c0013834:	83 e0 3f             	and    eax,0x3f
c0013837:	83 c1 0f             	add    ecx,0xf
c001383a:	88 ca                	mov    dl,cl
c001383c:	c0 e9 02             	shr    cl,0x2
c001383f:	c1 e2 06             	shl    edx,0x6
c0013842:	09 d0                	or     eax,edx
c0013844:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001384a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013850:	83 e0 c0             	and    eax,0xffffffc0
c0013853:	09 c1                	or     ecx,eax
c0013855:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001385b:	83 ec 0c             	sub    esp,0xc
c001385e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013865:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013869:	50                   	push   eax
c001386a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001386e:	55                   	push   ebp
c001386f:	56                   	push   esi
c0013870:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013874:	57                   	push   edi
c0013875:	68 00 00 00 80       	push   0x80000000
c001387a:	e8 5f f8 ff ff       	call   c00130de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001387f:	83 c4 20             	add    esp,0x20
c0013882:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001388a:	76 22                	jbe    c00138ae <CPU::detectFeatures()+0x604>
c001388c:	83 ec 0c             	sub    esp,0xc
c001388f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013893:	50                   	push   eax
c0013894:	55                   	push   ebp
c0013895:	56                   	push   esi
c0013896:	57                   	push   edi
c0013897:	68 01 00 00 80       	push   0x80000001
c001389c:	e8 3d f8 ff ff       	call   c00130de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138a1:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00138ab:	83 c4 20             	add    esp,0x20
c00138ae:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00138b4:	83 f8 01             	cmp    eax,0x1
c00138b7:	75 6f                	jne    c0013928 <CPU::detectFeatures()+0x67e>
c00138b9:	51                   	push   ecx
c00138ba:	51                   	push   ecx
c00138bb:	68 51 53 02 c0       	push   0xc0025351
c00138c0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00138c4:	56                   	push   esi
c00138c5:	e8 76 ce fe ff       	call   c0000740 <strcpy>
c00138ca:	5f                   	pop    edi
c00138cb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138d1:	5d                   	pop    ebp
c00138d2:	66 c1 e8 06          	shr    ax,0x6
c00138d6:	0f b6 c0             	movzx  eax,al
c00138d9:	50                   	push   eax
c00138da:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138e0:	c1 e8 0e             	shr    eax,0xe
c00138e3:	0f b6 c0             	movzx  eax,al
c00138e6:	50                   	push   eax
c00138e7:	e8 9c f4 ff ff       	call   c0012d88 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00138ec:	5a                   	pop    edx
c00138ed:	59                   	pop    ecx
c00138ee:	50                   	push   eax
c00138ef:	56                   	push   esi
c00138f0:	e8 8b cf fe ff       	call   c0000880 <strcat>
c00138f5:	5f                   	pop    edi
c00138f6:	5d                   	pop    ebp
c00138f7:	56                   	push   esi
c00138f8:	53                   	push   ebx
c00138f9:	e8 32 aa ff ff       	call   c000e330 <Device::setName(char const*)>
c00138fe:	58                   	pop    eax
c00138ff:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013905:	5a                   	pop    edx
c0013906:	68 58 53 02 c0       	push   0xc0025358
c001390b:	50                   	push   eax
c001390c:	e8 bb ce fe ff       	call   c00007cc <strcmp>
c0013911:	83 c4 10             	add    esp,0x10
c0013914:	85 c0                	test   eax,eax
c0013916:	0f 85 71 03 00 00    	jne    c0013c8d <CPU::detectFeatures()+0x9e3>
c001391c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013923:	e9 65 03 00 00       	jmp    c0013c8d <CPU::detectFeatures()+0x9e3>
c0013928:	83 f8 02             	cmp    eax,0x2
c001392b:	0f 85 b5 00 00 00    	jne    c00139e6 <CPU::detectFeatures()+0x73c>
c0013931:	57                   	push   edi
c0013932:	57                   	push   edi
c0013933:	68 6a 53 02 c0       	push   0xc002536a
c0013938:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001393c:	56                   	push   esi
c001393d:	e8 fe cd fe ff       	call   c0000740 <strcpy>
c0013942:	5d                   	pop    ebp
c0013943:	58                   	pop    eax
c0013944:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001394a:	66 c1 e8 06          	shr    ax,0x6
c001394e:	0f b6 c0             	movzx  eax,al
c0013951:	50                   	push   eax
c0013952:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013958:	c1 e8 0e             	shr    eax,0xe
c001395b:	0f b6 c0             	movzx  eax,al
c001395e:	50                   	push   eax
c001395f:	e8 90 f2 ff ff       	call   c0012bf4 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013964:	5a                   	pop    edx
c0013965:	59                   	pop    ecx
c0013966:	50                   	push   eax
c0013967:	56                   	push   esi
c0013968:	e8 13 cf fe ff       	call   c0000880 <strcat>
c001396d:	5f                   	pop    edi
c001396e:	5d                   	pop    ebp
c001396f:	56                   	push   esi
c0013970:	53                   	push   ebx
c0013971:	e8 ba a9 ff ff       	call   c000e330 <Device::setName(char const*)>
c0013976:	58                   	pop    eax
c0013977:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001397d:	5a                   	pop    edx
c001397e:	68 6f 53 02 c0       	push   0xc002536f
c0013983:	50                   	push   eax
c0013984:	e8 43 ce fe ff       	call   c00007cc <strcmp>
c0013989:	83 c4 10             	add    esp,0x10
c001398c:	85 c0                	test   eax,eax
c001398e:	75 20                	jne    c00139b0 <CPU::detectFeatures()+0x706>
c0013990:	8b 15 08 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b08
c0013996:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001399c:	a8 01                	test   al,0x1
c001399e:	74 10                	je     c00139b0 <CPU::detectFeatures()+0x706>
c00139a0:	83 e0 fe             	and    eax,0xfffffffe
c00139a3:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00139a9:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00139b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00139b6:	c1 e8 0e             	shr    eax,0xe
c00139b9:	3c 05                	cmp    al,0x5
c00139bb:	0f 85 cc 02 00 00    	jne    c0013c8d <CPU::detectFeatures()+0x9e3>
c00139c1:	56                   	push   esi
c00139c2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00139c8:	83 e0 0f             	and    eax,0xf
c00139cb:	50                   	push   eax
c00139cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00139d2:	66 c1 e8 06          	shr    ax,0x6
c00139d6:	0f b6 c0             	movzx  eax,al
c00139d9:	50                   	push   eax
c00139da:	6a 05                	push   0x5
c00139dc:	e8 89 f6 ff ff       	call   c001306a <CPU::AMD_K6_writeback(int, int, int)>
c00139e1:	e9 1f 02 00 00       	jmp    c0013c05 <CPU::detectFeatures()+0x95b>
c00139e6:	8d 50 fd             	lea    edx,[eax-0x3]
c00139e9:	83 fa 01             	cmp    edx,0x1
c00139ec:	76 09                	jbe    c00139f7 <CPU::detectFeatures()+0x74d>
c00139ee:	83 f8 06             	cmp    eax,0x6
c00139f1:	0f 85 91 01 00 00    	jne    c0013b88 <CPU::detectFeatures()+0x8de>
c00139f7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00139fd:	c1 ea 0e             	shr    edx,0xe
c0013a00:	80 fa 05             	cmp    dl,0x5
c0013a03:	75 7b                	jne    c0013a80 <CPU::detectFeatures()+0x7d6>
c0013a05:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013a0b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013a10:	66 81 fa 00 01       	cmp    dx,0x100
c0013a15:	75 0c                	jne    c0013a23 <CPU::detectFeatures()+0x779>
c0013a17:	51                   	push   ecx
c0013a18:	51                   	push   ecx
c0013a19:	68 76 53 02 c0       	push   0xc0025376
c0013a1e:	e9 dc 01 00 00       	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013a23:	66 81 fa 00 02       	cmp    dx,0x200
c0013a28:	75 0c                	jne    c0013a36 <CPU::detectFeatures()+0x78c>
c0013a2a:	52                   	push   edx
c0013a2b:	52                   	push   edx
c0013a2c:	68 89 53 02 c0       	push   0xc0025389
c0013a31:	e9 c9 01 00 00       	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013a36:	66 81 fa 40 02       	cmp    dx,0x240
c0013a3b:	75 0c                	jne    c0013a49 <CPU::detectFeatures()+0x79f>
c0013a3d:	50                   	push   eax
c0013a3e:	50                   	push   eax
c0013a3f:	68 9b 53 02 c0       	push   0xc002539b
c0013a44:	e9 b6 01 00 00       	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013a49:	83 f8 06             	cmp    eax,0x6
c0013a4c:	75 0c                	jne    c0013a5a <CPU::detectFeatures()+0x7b0>
c0013a4e:	50                   	push   eax
c0013a4f:	50                   	push   eax
c0013a50:	68 ad 53 02 c0       	push   0xc00253ad
c0013a55:	e9 a5 01 00 00       	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013a5a:	83 f8 04             	cmp    eax,0x4
c0013a5d:	75 0c                	jne    c0013a6b <CPU::detectFeatures()+0x7c1>
c0013a5f:	50                   	push   eax
c0013a60:	50                   	push   eax
c0013a61:	68 b9 53 02 c0       	push   0xc00253b9
c0013a66:	e9 94 01 00 00       	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013a6b:	83 f8 03             	cmp    eax,0x3
c0013a6e:	0f 85 19 02 00 00    	jne    c0013c8d <CPU::detectFeatures()+0x9e3>
c0013a74:	50                   	push   eax
c0013a75:	50                   	push   eax
c0013a76:	68 c1 53 02 c0       	push   0xc00253c1
c0013a7b:	e9 7f 01 00 00       	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013a80:	80 fa 06             	cmp    dl,0x6
c0013a83:	0f 85 db 00 00 00    	jne    c0013b64 <CPU::detectFeatures()+0x8ba>
c0013a89:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013a8f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013a94:	66 81 fa 80 01       	cmp    dx,0x180
c0013a99:	75 0c                	jne    c0013aa7 <CPU::detectFeatures()+0x7fd>
c0013a9b:	50                   	push   eax
c0013a9c:	50                   	push   eax
c0013a9d:	68 cc 53 02 c0       	push   0xc00253cc
c0013aa2:	e9 58 01 00 00       	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013aa7:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013aad:	66 f7 c1 80 ff       	test   cx,0xff80
c0013ab2:	75 0c                	jne    c0013ac0 <CPU::detectFeatures()+0x816>
c0013ab4:	50                   	push   eax
c0013ab5:	50                   	push   eax
c0013ab6:	68 dc 53 02 c0       	push   0xc00253dc
c0013abb:	e9 3f 01 00 00       	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013ac0:	66 81 fa 40 02       	cmp    dx,0x240
c0013ac5:	75 0c                	jne    c0013ad3 <CPU::detectFeatures()+0x829>
c0013ac7:	55                   	push   ebp
c0013ac8:	55                   	push   ebp
c0013ac9:	68 e3 53 02 c0       	push   0xc00253e3
c0013ace:	e9 2c 01 00 00       	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013ad3:	66 81 fa 80 02       	cmp    dx,0x280
c0013ad8:	75 0c                	jne    c0013ae6 <CPU::detectFeatures()+0x83c>
c0013ada:	57                   	push   edi
c0013adb:	57                   	push   edi
c0013adc:	68 ec 53 02 c0       	push   0xc00253ec
c0013ae1:	e9 19 01 00 00       	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013ae6:	66 81 fa 40 03       	cmp    dx,0x340
c0013aeb:	74 ed                	je     c0013ada <CPU::detectFeatures()+0x830>
c0013aed:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013af2:	75 0c                	jne    c0013b00 <CPU::detectFeatures()+0x856>
c0013af4:	56                   	push   esi
c0013af5:	56                   	push   esi
c0013af6:	68 f3 53 02 c0       	push   0xc00253f3
c0013afb:	e9 ff 00 00 00       	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013b00:	83 f8 06             	cmp    eax,0x6
c0013b03:	0f 84 45 ff ff ff    	je     c0013a4e <CPU::detectFeatures()+0x7a4>
c0013b09:	83 f8 04             	cmp    eax,0x4
c0013b0c:	0f 84 4d ff ff ff    	je     c0013a5f <CPU::detectFeatures()+0x7b5>
c0013b12:	83 f8 03             	cmp    eax,0x3
c0013b15:	0f 85 72 01 00 00    	jne    c0013c8d <CPU::detectFeatures()+0x9e3>
c0013b1b:	51                   	push   ecx
c0013b1c:	51                   	push   ecx
c0013b1d:	68 fc 53 02 c0       	push   0xc00253fc
c0013b22:	53                   	push   ebx
c0013b23:	e8 08 a8 ff ff       	call   c000e330 <Device::setName(char const*)>
c0013b28:	b1 c1                	mov    cl,0xc1
c0013b2a:	88 c8                	mov    al,cl
c0013b2c:	e6 22                	out    0x22,al
c0013b2e:	e4 23                	in     al,0x23
c0013b30:	88 c2                	mov    dl,al
c0013b32:	88 c8                	mov    al,cl
c0013b34:	e6 22                	out    0x22,al
c0013b36:	88 d0                	mov    al,dl
c0013b38:	83 c8 10             	or     eax,0x10
c0013b3b:	e6 23                	out    0x23,al
c0013b3d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013b44:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013b47:	89 d0                	mov    eax,edx
c0013b49:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013b4f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013b53:	40                   	inc    eax
c0013b54:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013b5a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013b5f:	e9 a1 00 00 00       	jmp    c0013c05 <CPU::detectFeatures()+0x95b>
c0013b64:	83 f8 06             	cmp    eax,0x6
c0013b67:	0f 84 e1 fe ff ff    	je     c0013a4e <CPU::detectFeatures()+0x7a4>
c0013b6d:	83 f8 04             	cmp    eax,0x4
c0013b70:	0f 84 e9 fe ff ff    	je     c0013a5f <CPU::detectFeatures()+0x7b5>
c0013b76:	83 f8 03             	cmp    eax,0x3
c0013b79:	0f 85 0e 01 00 00    	jne    c0013c8d <CPU::detectFeatures()+0x9e3>
c0013b7f:	52                   	push   edx
c0013b80:	52                   	push   edx
c0013b81:	68 07 54 02 c0       	push   0xc0025407
c0013b86:	eb 77                	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013b88:	83 f8 07             	cmp    eax,0x7
c0013b8b:	75 09                	jne    c0013b96 <CPU::detectFeatures()+0x8ec>
c0013b8d:	50                   	push   eax
c0013b8e:	50                   	push   eax
c0013b8f:	68 11 54 02 c0       	push   0xc0025411
c0013b94:	eb 69                	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013b96:	83 f8 0a             	cmp    eax,0xa
c0013b99:	75 09                	jne    c0013ba4 <CPU::detectFeatures()+0x8fa>
c0013b9b:	50                   	push   eax
c0013b9c:	50                   	push   eax
c0013b9d:	68 1c 54 02 c0       	push   0xc002541c
c0013ba2:	eb 5b                	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013ba4:	83 f8 0b             	cmp    eax,0xb
c0013ba7:	75 09                	jne    c0013bb2 <CPU::detectFeatures()+0x908>
c0013ba9:	50                   	push   eax
c0013baa:	50                   	push   eax
c0013bab:	68 24 54 02 c0       	push   0xc0025424
c0013bb0:	eb 4d                	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013bb2:	83 f8 08             	cmp    eax,0x8
c0013bb5:	75 09                	jne    c0013bc0 <CPU::detectFeatures()+0x916>
c0013bb7:	50                   	push   eax
c0013bb8:	50                   	push   eax
c0013bb9:	68 2d 54 02 c0       	push   0xc002542d
c0013bbe:	eb 3f                	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013bc0:	83 f8 09             	cmp    eax,0x9
c0013bc3:	75 09                	jne    c0013bce <CPU::detectFeatures()+0x924>
c0013bc5:	50                   	push   eax
c0013bc6:	50                   	push   eax
c0013bc7:	68 35 54 02 c0       	push   0xc0025435
c0013bcc:	eb 31                	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013bce:	83 f8 05             	cmp    eax,0x5
c0013bd1:	75 09                	jne    c0013bdc <CPU::detectFeatures()+0x932>
c0013bd3:	50                   	push   eax
c0013bd4:	50                   	push   eax
c0013bd5:	68 3d 54 02 c0       	push   0xc002543d
c0013bda:	eb 23                	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013bdc:	83 f8 0c             	cmp    eax,0xc
c0013bdf:	75 09                	jne    c0013bea <CPU::detectFeatures()+0x940>
c0013be1:	55                   	push   ebp
c0013be2:	55                   	push   ebp
c0013be3:	68 4b 54 02 c0       	push   0xc002544b
c0013be8:	eb 15                	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013bea:	83 f8 0d             	cmp    eax,0xd
c0013bed:	75 09                	jne    c0013bf8 <CPU::detectFeatures()+0x94e>
c0013bef:	57                   	push   edi
c0013bf0:	57                   	push   edi
c0013bf1:	68 56 54 02 c0       	push   0xc0025456
c0013bf6:	eb 07                	jmp    c0013bff <CPU::detectFeatures()+0x955>
c0013bf8:	56                   	push   esi
c0013bf9:	56                   	push   esi
c0013bfa:	68 6a 54 02 c0       	push   0xc002546a
c0013bff:	53                   	push   ebx
c0013c00:	e8 2b a7 ff ff       	call   c000e330 <Device::setName(char const*)>
c0013c05:	83 c4 10             	add    esp,0x10
c0013c08:	e9 80 00 00 00       	jmp    c0013c8d <CPU::detectFeatures()+0x9e3>
c0013c0d:	51                   	push   ecx
c0013c0e:	51                   	push   ecx
c0013c0f:	68 b6 52 02 c0       	push   0xc00252b6
c0013c14:	55                   	push   ebp
c0013c15:	e8 26 cb fe ff       	call   c0000740 <strcpy>
c0013c1a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013c24:	e8 ba c5 fe ff       	call   c00001e3 <is486>
c0013c29:	83 c4 10             	add    esp,0x10
c0013c2c:	85 c0                	test   eax,eax
c0013c2e:	74 2b                	je     c0013c5b <CPU::detectFeatures()+0x9b1>
c0013c30:	52                   	push   edx
c0013c31:	52                   	push   edx
c0013c32:	68 76 54 02 c0       	push   0xc0025476
c0013c37:	53                   	push   ebx
c0013c38:	e8 f3 a6 ff ff       	call   c000e330 <Device::setName(char const*)>
c0013c3d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013c44:	0f 20 c0             	mov    eax,cr0
c0013c47:	83 e0 14             	and    eax,0x14
c0013c4a:	83 c4 10             	add    esp,0x10
c0013c4d:	83 f8 04             	cmp    eax,0x4
c0013c50:	75 1f                	jne    c0013c71 <CPU::detectFeatures()+0x9c7>
c0013c52:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013c59:	eb 32                	jmp    c0013c8d <CPU::detectFeatures()+0x9e3>
c0013c5b:	50                   	push   eax
c0013c5c:	50                   	push   eax
c0013c5d:	68 81 54 02 c0       	push   0xc0025481
c0013c62:	53                   	push   ebx
c0013c63:	e8 c8 a6 ff ff       	call   c000e330 <Device::setName(char const*)>
c0013c68:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013c6f:	eb d3                	jmp    c0013c44 <CPU::detectFeatures()+0x99a>
c0013c71:	e8 48 c5 fe ff       	call   c00001be <hasLegacyFPU>
c0013c76:	83 e0 01             	and    eax,0x1
c0013c79:	8d 14 00             	lea    edx,[eax+eax*1]
c0013c7c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013c82:	83 e0 fd             	and    eax,0xfffffffd
c0013c85:	09 d0                	or     eax,edx
c0013c87:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013c8d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013c94:	83 c4 4c             	add    esp,0x4c
c0013c97:	5b                   	pop    ebx
c0013c98:	5e                   	pop    esi
c0013c99:	5f                   	pop    edi
c0013c9a:	5d                   	pop    ebp
c0013c9b:	c3                   	ret    

c0013c9c <CPU::setupSMEP()>:
c0013c9c:	0f 20 e0             	mov    eax,cr4
c0013c9f:	0d 00 00 10 00       	or     eax,0x100000
c0013ca4:	0f 22 e0             	mov    cr4,eax
c0013ca7:	c3                   	ret    

c0013ca8 <CPU::setupUMIP()>:
c0013ca8:	0f 20 e0             	mov    eax,cr4
c0013cab:	80 cc 08             	or     ah,0x8
c0013cae:	0f 22 e0             	mov    cr4,eax
c0013cb1:	c3                   	ret    

c0013cb2 <CPU::setupTSC()>:
c0013cb2:	0f 20 e0             	mov    eax,cr4
c0013cb5:	83 c8 04             	or     eax,0x4
c0013cb8:	0f 22 e0             	mov    cr4,eax
c0013cbb:	c3                   	ret    

c0013cbc <CPU::setupLargePages()>:
c0013cbc:	0f 20 e0             	mov    eax,cr4
c0013cbf:	83 c8 10             	or     eax,0x10
c0013cc2:	0f 22 e0             	mov    cr4,eax
c0013cc5:	c3                   	ret    

c0013cc6 <CPU::setupPAT()>:
c0013cc6:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0013ccb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013cd2:	74 2c                	je     c0013d00 <CPU::setupPAT()+0x3a>
c0013cd4:	53                   	push   ebx
c0013cd5:	83 ec 10             	sub    esp,0x10
c0013cd8:	68 77 02 00 00       	push   0x277
c0013cdd:	50                   	push   eax
c0013cde:	e8 41 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013ce3:	83 e2 f8             	and    edx,0xfffffff8
c0013ce6:	83 ca 01             	or     edx,0x1
c0013ce9:	52                   	push   edx
c0013cea:	50                   	push   eax
c0013ceb:	68 77 02 00 00       	push   0x277
c0013cf0:	ff 35 08 7b 02 c0    	push   DWORD PTR ds:0xc0027b08
c0013cf6:	e8 55 52 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013cfb:	83 c4 28             	add    esp,0x28
c0013cfe:	5b                   	pop    ebx
c0013cff:	c3                   	ret    
c0013d00:	c3                   	ret    
c0013d01:	90                   	nop

c0013d02 <CPU::setupMTRR()>:
c0013d02:	c3                   	ret    
c0013d03:	90                   	nop

c0013d04 <CPU::setupGlobalPages()>:
c0013d04:	0f 20 e0             	mov    eax,cr4
c0013d07:	0c 80                	or     al,0x80
c0013d09:	0f 22 e0             	mov    cr4,eax
c0013d0c:	c3                   	ret    
c0013d0d:	90                   	nop

c0013d0e <CPU::allowUsermodeDataAccess()>:
c0013d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d12:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013d19:	74 03                	je     c0013d1e <CPU::allowUsermodeDataAccess()+0x10>
c0013d1b:	0f 01 cb             	stac   
c0013d1e:	c3                   	ret    
c0013d1f:	90                   	nop

c0013d20 <CPU::prohibitUsermodeDataAccess()>:
c0013d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d24:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013d2b:	74 03                	je     c0013d30 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013d2d:	0f 01 ca             	clac   
c0013d30:	c3                   	ret    
c0013d31:	90                   	nop

c0013d32 <CPU::setupSMAP()>:
c0013d32:	0f 20 e0             	mov    eax,cr4
c0013d35:	0d 00 00 20 00       	or     eax,0x200000
c0013d3a:	0f 22 e0             	mov    cr4,eax
c0013d3d:	eb e1                	jmp    c0013d20 <CPU::prohibitUsermodeDataAccess()>
c0013d3f:	90                   	nop

c0013d40 <CPU::setupFeatures()>:
c0013d40:	53                   	push   ebx
c0013d41:	83 ec 08             	sub    esp,0x8
c0013d44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d48:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013d4f:	74 18                	je     c0013d69 <CPU::setupFeatures()+0x29>
c0013d51:	83 ec 0c             	sub    esp,0xc
c0013d54:	68 8c 54 02 c0       	push   0xc002548c
c0013d59:	e8 55 8f ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013d5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d61:	e8 42 ff ff ff       	call   c0013ca8 <CPU::setupUMIP()>
c0013d66:	83 c4 10             	add    esp,0x10
c0013d69:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013d70:	74 18                	je     c0013d8a <CPU::setupFeatures()+0x4a>
c0013d72:	83 ec 0c             	sub    esp,0xc
c0013d75:	68 96 54 02 c0       	push   0xc0025496
c0013d7a:	e8 34 8f ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013d7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d82:	e8 2b ff ff ff       	call   c0013cb2 <CPU::setupTSC()>
c0013d87:	83 c4 10             	add    esp,0x10
c0013d8a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013d91:	74 18                	je     c0013dab <CPU::setupFeatures()+0x6b>
c0013d93:	83 ec 0c             	sub    esp,0xc
c0013d96:	68 9f 54 02 c0       	push   0xc002549f
c0013d9b:	e8 13 8f ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013da0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013da3:	e8 14 ff ff ff       	call   c0013cbc <CPU::setupLargePages()>
c0013da8:	83 c4 10             	add    esp,0x10
c0013dab:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013db2:	74 18                	je     c0013dcc <CPU::setupFeatures()+0x8c>
c0013db4:	83 ec 0c             	sub    esp,0xc
c0013db7:	68 a8 54 02 c0       	push   0xc00254a8
c0013dbc:	e8 f2 8e ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013dc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dc4:	e8 3b ff ff ff       	call   c0013d04 <CPU::setupGlobalPages()>
c0013dc9:	83 c4 10             	add    esp,0x10
c0013dcc:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013dd3:	74 18                	je     c0013ded <CPU::setupFeatures()+0xad>
c0013dd5:	83 ec 0c             	sub    esp,0xc
c0013dd8:	68 ba 54 02 c0       	push   0xc00254ba
c0013ddd:	e8 d1 8e ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013de2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013de5:	e8 dc fe ff ff       	call   c0013cc6 <CPU::setupPAT()>
c0013dea:	83 c4 10             	add    esp,0x10
c0013ded:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013df4:	74 11                	je     c0013e07 <CPU::setupFeatures()+0xc7>
c0013df6:	c7 44 24 10 c3 54 02 c0 	mov    DWORD PTR [esp+0x10],0xc00254c3
c0013dfe:	83 c4 08             	add    esp,0x8
c0013e01:	5b                   	pop    ebx
c0013e02:	e9 ac 8e ff ff       	jmp    c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013e07:	83 c4 08             	add    esp,0x8
c0013e0a:	5b                   	pop    ebx
c0013e0b:	c3                   	ret    

c0013e0c <CPU::open(int, int, void*)>:
c0013e0c:	57                   	push   edi
c0013e0d:	56                   	push   esi
c0013e0e:	53                   	push   ebx
c0013e0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e17:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013e1d:	83 ec 0c             	sub    esp,0xc
c0013e20:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013e26:	68 cd 54 02 c0       	push   0xc00254cd
c0013e2b:	e8 ed 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e30:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e39:	e8 7e 54 ff ff       	call   c00092bc <GDT::setup()>
c0013e3e:	c7 04 24 df 54 02 c0 	mov    DWORD PTR [esp],0xc00254df
c0013e45:	e8 d3 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e4a:	83 c4 0c             	add    esp,0xc
c0013e4d:	6a 00                	push   0x0
c0013e4f:	68 ef be ad de       	push   0xdeadbeef
c0013e54:	57                   	push   edi
c0013e55:	e8 ba 74 ff ff       	call   c000b314 <TSS::setup(unsigned long, unsigned long)>
c0013e5a:	c7 04 24 f1 54 02 c0 	mov    DWORD PTR [esp],0xc00254f1
c0013e61:	e8 b7 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e66:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e69:	e8 86 74 ff ff       	call   c000b2f4 <TSS::flush()>
c0013e6e:	c7 04 24 05 55 02 c0 	mov    DWORD PTR [esp],0xc0025505
c0013e75:	e8 a3 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e7a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013e80:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e83:	e8 9e 56 ff ff       	call   c0009526 <IDT::setup()>
c0013e88:	c7 04 24 17 55 02 c0 	mov    DWORD PTR [esp],0xc0025517
c0013e8f:	e8 89 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e94:	b8 00 04 00 00       	mov    eax,0x400
c0013e99:	0f 23 f8             	mov    db7,eax
c0013e9c:	c7 04 24 35 55 02 c0 	mov    DWORD PTR [esp],0xc0025535
c0013ea3:	e8 75 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013ea8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013eb2:	e8 c3 61 ff ff       	call   c000a07a <Phys::allocatePage()>
c0013eb7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013ebd:	89 30                	mov    DWORD PTR [eax],esi
c0013ebf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013ec5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013ec8:	c7 04 24 57 55 02 c0 	mov    DWORD PTR [esp],0xc0025557
c0013ecf:	e8 49 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013ed4:	58                   	pop    eax
c0013ed5:	5a                   	pop    edx
c0013ed6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013edc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013ee0:	e8 29 84 ff ff       	call   c000c30e <VAS::setCPUSpecific(unsigned long)>
c0013ee5:	c7 04 24 7f 55 02 c0 	mov    DWORD PTR [esp],0xc002557f
c0013eec:	e8 2c 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013ef1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ef4:	e8 b1 f3 ff ff       	call   c00132aa <CPU::detectFeatures()>
c0013ef9:	c7 04 24 a2 55 02 c0 	mov    DWORD PTR [esp],0xc00255a2
c0013f00:	e8 18 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013f05:	e8 34 b6 ff ff       	call   c000f53e <setupInterruptController()>
c0013f0a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013f10:	c7 04 24 c6 55 02 c0 	mov    DWORD PTR [esp],0xc00255c6
c0013f17:	e8 01 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013f1c:	a1 20 7b 02 c0       	mov    eax,ds:0xc0027b20
c0013f21:	83 e0 10             	and    eax,0x10
c0013f24:	83 f8 01             	cmp    eax,0x1
c0013f27:	19 c0                	sbb    eax,eax
c0013f29:	83 e0 46             	and    eax,0x46
c0013f2c:	83 c0 1e             	add    eax,0x1e
c0013f2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f32:	e8 f1 cb ff ff       	call   c0010b28 <setupTimer(int)>
c0013f37:	83 c4 10             	add    esp,0x10
c0013f3a:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013f40:	f6 05 20 7b 02 c0 20 	test   BYTE PTR ds:0xc0027b20,0x20
c0013f47:	74 18                	je     c0013f61 <CPU::open(int, int, void*)+0x155>
c0013f49:	83 ec 0c             	sub    esp,0xc
c0013f4c:	68 e1 55 02 c0       	push   0xc00255e1
c0013f51:	e8 c7 5a ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013f56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f59:	e8 e2 fd ff ff       	call   c0013d40 <CPU::setupFeatures()>
c0013f5e:	83 c4 10             	add    esp,0x10
c0013f61:	83 ec 0c             	sub    esp,0xc
c0013f64:	68 fc 55 02 c0       	push   0xc00255fc
c0013f69:	e8 af 5a ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013f6e:	83 c4 10             	add    esp,0x10
c0013f71:	31 c0                	xor    eax,eax
c0013f73:	5b                   	pop    ebx
c0013f74:	5e                   	pop    esi
c0013f75:	5f                   	pop    edi
c0013f76:	c3                   	ret    
c0013f77:	90                   	nop

c0013f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013f78:	57                   	push   edi
c0013f79:	56                   	push   esi
c0013f7a:	53                   	push   ebx
c0013f7b:	51                   	push   ecx
c0013f7c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f80:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013f83:	0f 02 c0             	lar    eax,ax
c0013f86:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013f89:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013f8d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013f90:	88 ca                	mov    dl,cl
c0013f92:	c0 ea 06             	shr    dl,0x6
c0013f95:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013f99:	89 ca                	mov    edx,ecx
c0013f9b:	66 c1 ea 03          	shr    dx,0x3
c0013f9f:	83 e2 07             	and    edx,0x7
c0013fa2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013fa7:	88 17                	mov    BYTE PTR [edi],dl
c0013fa9:	0f 84 a6 01 00 00    	je     c0014155 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013faf:	83 e1 07             	and    ecx,0x7
c0013fb2:	80 f9 04             	cmp    cl,0x4
c0013fb5:	0f 84 98 00 00 00    	je     c0014053 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013fbb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013fc0:	0f 95 c0             	setne  al
c0013fc3:	80 f9 05             	cmp    cl,0x5
c0013fc6:	0f 95 c2             	setne  dl
c0013fc9:	08 c2                	or     dl,al
c0013fcb:	74 79                	je     c0014046 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013fcd:	84 c9                	test   cl,cl
c0013fcf:	75 05                	jne    c0013fd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013fd1:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013fd4:	eb 3c                	jmp    c0014012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013fd6:	80 f9 01             	cmp    cl,0x1
c0013fd9:	75 05                	jne    c0013fe0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013fdb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013fde:	eb 32                	jmp    c0014012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013fe0:	80 f9 02             	cmp    cl,0x2
c0013fe3:	75 05                	jne    c0013fea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013fe5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013fe8:	eb 28                	jmp    c0014012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013fea:	31 c0                	xor    eax,eax
c0013fec:	80 f9 03             	cmp    cl,0x3
c0013fef:	75 05                	jne    c0013ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013ff1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013ff4:	eb 1c                	jmp    c0014012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ff6:	80 f9 05             	cmp    cl,0x5
c0013ff9:	75 05                	jne    c0014000 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013ffb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013ffe:	eb 12                	jmp    c0014012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014000:	80 f9 06             	cmp    cl,0x6
c0014003:	75 05                	jne    c001400a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0014005:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014008:	eb 08                	jmp    c0014012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001400a:	80 f9 07             	cmp    cl,0x7
c001400d:	75 03                	jne    c0014012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001400f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014012:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014017:	75 10                	jne    c0014029 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0014019:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001401d:	b9 03 00 00 00       	mov    ecx,0x3
c0014022:	01 d0                	add    eax,edx
c0014024:	e9 37 01 00 00       	jmp    c0014160 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014029:	b9 02 00 00 00       	mov    ecx,0x2
c001402e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0014033:	0f 85 27 01 00 00    	jne    c0014160 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014039:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001403c:	b9 06 00 00 00       	mov    ecx,0x6
c0014041:	e9 1a 01 00 00       	jmp    c0014160 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014046:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0014049:	b9 06 00 00 00       	mov    ecx,0x6
c001404e:	e9 0f 01 00 00       	jmp    c0014162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014053:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0014056:	88 ca                	mov    dl,cl
c0014058:	c0 ea 06             	shr    dl,0x6
c001405b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001405f:	89 ca                	mov    edx,ecx
c0014061:	66 c1 ea 03          	shr    dx,0x3
c0014065:	83 e2 07             	and    edx,0x7
c0014068:	80 e1 07             	and    cl,0x7
c001406b:	75 05                	jne    c0014072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001406d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0014070:	eb 4c                	jmp    c00140be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014072:	80 f9 01             	cmp    cl,0x1
c0014075:	75 05                	jne    c001407c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014077:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001407a:	eb 42                	jmp    c00140be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001407c:	80 f9 02             	cmp    cl,0x2
c001407f:	75 05                	jne    c0014086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014081:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014084:	eb 38                	jmp    c00140be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014086:	80 f9 03             	cmp    cl,0x3
c0014089:	75 05                	jne    c0014090 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001408b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001408e:	eb 2e                	jmp    c00140be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014090:	80 f9 04             	cmp    cl,0x4
c0014093:	75 12                	jne    c00140a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0014095:	f6 c4 60             	test   ah,0x60
c0014098:	75 08                	jne    c00140a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001409a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001409d:	8d 78 14             	lea    edi,[eax+0x14]
c00140a0:	eb 1c                	jmp    c00140be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140a2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00140a5:	eb 17                	jmp    c00140be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140a7:	80 f9 05             	cmp    cl,0x5
c00140aa:	75 05                	jne    c00140b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00140ac:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00140af:	eb 0d                	jmp    c00140be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140b1:	80 f9 06             	cmp    cl,0x6
c00140b4:	75 05                	jne    c00140bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00140b6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00140b9:	eb 03                	jmp    c00140be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140bb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00140be:	84 d2                	test   dl,dl
c00140c0:	75 05                	jne    c00140c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00140c2:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00140c5:	eb 3c                	jmp    c0014103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00140c7:	80 fa 01             	cmp    dl,0x1
c00140ca:	75 05                	jne    c00140d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00140cc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00140cf:	eb 32                	jmp    c0014103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00140d1:	80 fa 02             	cmp    dl,0x2
c00140d4:	75 05                	jne    c00140db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00140d6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00140d9:	eb 28                	jmp    c0014103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00140db:	80 fa 03             	cmp    dl,0x3
c00140de:	75 05                	jne    c00140e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00140e0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00140e3:	eb 1e                	jmp    c0014103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00140e5:	31 c0                	xor    eax,eax
c00140e7:	80 fa 04             	cmp    dl,0x4
c00140ea:	74 17                	je     c0014103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00140ec:	80 fa 05             	cmp    dl,0x5
c00140ef:	75 05                	jne    c00140f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00140f1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00140f4:	eb 0d                	jmp    c0014103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00140f6:	80 fa 06             	cmp    dl,0x6
c00140f9:	75 05                	jne    c0014100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00140fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140fe:	eb 03                	jmp    c0014103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014100:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014103:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014108:	0f 94 c2             	sete   dl
c001410b:	80 f9 05             	cmp    cl,0x5
c001410e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014112:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0014117:	d3 e0                	shl    eax,cl
c0014119:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001411d:	74 0a                	je     c0014129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001411f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014122:	b9 07 00 00 00       	mov    ecx,0x7
c0014127:	eb 37                	jmp    c0014160 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014129:	01 f8                	add    eax,edi
c001412b:	b9 03 00 00 00       	mov    ecx,0x3
c0014130:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014135:	74 2b                	je     c0014162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014137:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001413c:	75 0d                	jne    c001414b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001413e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014142:	01 c8                	add    eax,ecx
c0014144:	b9 04 00 00 00       	mov    ecx,0x4
c0014149:	eb 17                	jmp    c0014162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001414b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001414e:	b9 07 00 00 00       	mov    ecx,0x7
c0014153:	eb 0d                	jmp    c0014162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014155:	b9 02 00 00 00       	mov    ecx,0x2
c001415a:	b2 01                	mov    dl,0x1
c001415c:	31 c0                	xor    eax,eax
c001415e:	eb 02                	jmp    c0014162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014160:	31 d2                	xor    edx,edx
c0014162:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014166:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014168:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001416c:	88 11                	mov    BYTE PTR [ecx],dl
c001416e:	5a                   	pop    edx
c001416f:	5b                   	pop    ebx
c0014170:	5e                   	pop    esi
c0014171:	5f                   	pop    edi
c0014172:	c3                   	ret    

c0014173 <Krnl::smpEntry()>:
c0014173:	eb fe                	jmp    c0014173 <Krnl::smpEntry()>

c0014175 <Krnl::startCPU(int)>:
c0014175:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c001417a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014181:	0f 84 36 01 00 00    	je     c00142bd <Krnl::startCPU(int)+0x148>
c0014187:	53                   	push   ebx
c0014188:	83 ec 10             	sub    esp,0x10
c001418b:	fa                   	cli    
c001418c:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0014192:	6a 1b                	push   0x1b
c0014194:	ff 35 08 7b 02 c0    	push   DWORD PTR ds:0xc0027b08
c001419a:	e8 85 4d ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001419f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141a4:	89 c3                	mov    ebx,eax
c00141a6:	58                   	pop    eax
c00141a7:	5a                   	pop    edx
c00141a8:	53                   	push   ebx
c00141a9:	68 44 56 02 c0       	push   0xc0025644
c00141ae:	e8 00 8b ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00141b3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00141bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141c1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00141cb:	c1 e0 18             	shl    eax,0x18
c00141ce:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00141d4:	83 c4 10             	add    esp,0x10
c00141d7:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00141dd:	09 c2                	or     edx,eax
c00141df:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00141e5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00141eb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00141f1:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00141f7:	80 cd c5             	or     ch,0xc5
c00141fa:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014200:	f3 90                	pause  
c0014202:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014204:	0f ba e1 0c          	bt     ecx,0xc
c0014208:	72 f6                	jb     c0014200 <Krnl::startCPU(int)+0x8b>
c001420a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014210:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014216:	09 c1                	or     ecx,eax
c0014218:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001421e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014224:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001422a:	80 cd 85             	or     ch,0x85
c001422d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014233:	f3 90                	pause  
c0014235:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014237:	0f ba e1 0c          	bt     ecx,0xc
c001423b:	72 f6                	jb     c0014233 <Krnl::startCPU(int)+0xbe>
c001423d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014247:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001424d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014253:	09 c1                	or     ecx,eax
c0014255:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001425b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014261:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014267:	81 c9 02 06 00 00    	or     ecx,0x602
c001426d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014273:	f3 90                	pause  
c0014275:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014277:	0f ba e1 0c          	bt     ecx,0xc
c001427b:	72 f6                	jb     c0014273 <Krnl::startCPU(int)+0xfe>
c001427d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014287:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001428d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014293:	09 c8                	or     eax,ecx
c0014295:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001429b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00142a1:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00142a6:	0d 02 06 00 00       	or     eax,0x602
c00142ab:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00142b1:	f3 90                	pause  
c00142b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00142b5:	0f ba e0 0c          	bt     eax,0xc
c00142b9:	72 f6                	jb     c00142b1 <Krnl::startCPU(int)+0x13c>
c00142bb:	eb fe                	jmp    c00142bb <Krnl::startCPU(int)+0x146>
c00142bd:	c3                   	ret    

c00142be <Krnl::startCPUs()>:
c00142be:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c00142c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00142c9:	88 c2                	mov    dl,al
c00142cb:	83 e2 0a             	and    edx,0xa
c00142ce:	80 fa 0a             	cmp    dl,0xa
c00142d1:	75 09                	jne    c00142dc <Krnl::startCPUs()+0x1e>
c00142d3:	a8 01                	test   al,0x1
c00142d5:	74 05                	je     c00142dc <Krnl::startCPUs()+0x1e>
c00142d7:	e9 bf be fe ff       	jmp    c000019b <prepareTramp>
c00142dc:	c3                   	ret    
c00142dd:	90                   	nop

c00142de <EnvVarContainer::getEnv(char const*)>:
c00142de:	57                   	push   edi
c00142df:	56                   	push   esi
c00142e0:	53                   	push   ebx
c00142e1:	31 db                	xor    ebx,ebx
c00142e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142e7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00142e9:	7e 2b                	jle    c0014316 <EnvVarContainer::getEnv(char const*)+0x38>
c00142eb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00142f2:	50                   	push   eax
c00142f3:	50                   	push   eax
c00142f4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00142fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142fe:	e8 c9 c4 fe ff       	call   c00007cc <strcmp>
c0014303:	83 c4 10             	add    esp,0x10
c0014306:	85 c0                	test   eax,eax
c0014308:	75 09                	jne    c0014313 <EnvVarContainer::getEnv(char const*)+0x35>
c001430a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001430d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014311:	eb 05                	jmp    c0014318 <EnvVarContainer::getEnv(char const*)+0x3a>
c0014313:	43                   	inc    ebx
c0014314:	eb d1                	jmp    c00142e7 <EnvVarContainer::getEnv(char const*)+0x9>
c0014316:	31 c0                	xor    eax,eax
c0014318:	5b                   	pop    ebx
c0014319:	5e                   	pop    esi
c001431a:	5f                   	pop    edi
c001431b:	c3                   	ret    

c001431c <EnvVarContainer::setEnv(char const*, char const*)>:
c001431c:	55                   	push   ebp
c001431d:	57                   	push   edi
c001431e:	56                   	push   esi
c001431f:	53                   	push   ebx
c0014320:	83 ec 28             	sub    esp,0x28
c0014323:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014327:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001432b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001432f:	56                   	push   esi
c0014330:	e8 6b c3 fe ff       	call   c00006a0 <strlen>
c0014335:	40                   	inc    eax
c0014336:	89 04 24             	mov    DWORD PTR [esp],eax
c0014339:	e8 85 56 ff ff       	call   c00099c3 <malloc>
c001433e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014341:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014345:	e8 56 c3 fe ff       	call   c00006a0 <strlen>
c001434a:	40                   	inc    eax
c001434b:	89 04 24             	mov    DWORD PTR [esp],eax
c001434e:	e8 70 56 ff ff       	call   c00099c3 <malloc>
c0014353:	89 34 24             	mov    DWORD PTR [esp],esi
c0014356:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001435a:	e8 41 c3 fe ff       	call   c00006a0 <strlen>
c001435f:	83 c4 0c             	add    esp,0xc
c0014362:	40                   	inc    eax
c0014363:	50                   	push   eax
c0014364:	6a 00                	push   0x0
c0014366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001436a:	e8 15 c3 fe ff       	call   c0000684 <memset>
c001436f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014372:	e8 29 c3 fe ff       	call   c00006a0 <strlen>
c0014377:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001437b:	8d 48 01             	lea    ecx,[eax+0x1]
c001437e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014380:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014383:	89 de                	mov    esi,ebx
c0014385:	e8 16 c3 fe ff       	call   c00006a0 <strlen>
c001438a:	83 c4 0c             	add    esp,0xc
c001438d:	40                   	inc    eax
c001438e:	50                   	push   eax
c001438f:	6a 00                	push   0x0
c0014391:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014395:	e8 ea c2 fe ff       	call   c0000684 <memset>
c001439a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001439d:	e8 fe c2 fe ff       	call   c00006a0 <strlen>
c00143a2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143a6:	8d 48 01             	lea    ecx,[eax+0x1]
c00143a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00143ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00143ae:	40                   	inc    eax
c00143af:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00143b2:	c1 e0 03             	shl    eax,0x3
c00143b5:	5a                   	pop    edx
c00143b6:	59                   	pop    ecx
c00143b7:	50                   	push   eax
c00143b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00143bb:	e8 ef 55 ff ff       	call   c00099af <realloc>
c00143c0:	8d 74 24 18          	lea    esi,[esp+0x18]
c00143c4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00143c7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00143ca:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00143ce:	b9 08 00 00 00       	mov    ecx,0x8
c00143d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00143d5:	83 c4 2c             	add    esp,0x2c
c00143d8:	5b                   	pop    ebx
c00143d9:	5e                   	pop    esi
c00143da:	5f                   	pop    edi
c00143db:	5d                   	pop    ebp
c00143dc:	c3                   	ret    
c00143dd:	90                   	nop

c00143de <EnvVarContainer::deleteEnv(char const*)>:
c00143de:	c3                   	ret    
c00143df:	90                   	nop

c00143e0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00143e0:	55                   	push   ebp
c00143e1:	57                   	push   edi
c00143e2:	56                   	push   esi
c00143e3:	53                   	push   ebx
c00143e4:	81 ec 38 01 00 00    	sub    esp,0x138
c00143ea:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00143f1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00143f8:	68 14 01 00 00       	push   0x114
c00143fd:	e8 c1 55 ff ff       	call   c00099c3 <malloc>
c0014402:	83 c4 0c             	add    esp,0xc
c0014405:	89 c3                	mov    ebx,eax
c0014407:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001440a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014411:	50                   	push   eax
c0014412:	e8 07 8e ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0014417:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001441a:	e8 0f 91 ff ff       	call   c000d52e <File::exists()>
c001441f:	83 c4 10             	add    esp,0x10
c0014422:	84 c0                	test   al,al
c0014424:	75 31                	jne    c0014457 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014426:	50                   	push   eax
c0014427:	50                   	push   eax
c0014428:	6a 12                	push   0x12
c001442a:	53                   	push   ebx
c001442b:	e8 90 8e ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c0014430:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014432:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014435:	89 34 24             	mov    DWORD PTR [esp],esi
c0014438:	e8 63 c2 fe ff       	call   c00006a0 <strlen>
c001443d:	5a                   	pop    edx
c001443e:	31 d2                	xor    edx,edx
c0014440:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014444:	51                   	push   ecx
c0014445:	56                   	push   esi
c0014446:	52                   	push   edx
c0014447:	50                   	push   eax
c0014448:	53                   	push   ebx
c0014449:	ff d7                	call   edi
c001444b:	83 c4 14             	add    esp,0x14
c001444e:	53                   	push   ebx
c001444f:	e8 ca 8e ff ff       	call   c000d31e <File::close()>
c0014454:	83 c4 10             	add    esp,0x10
c0014457:	56                   	push   esi
c0014458:	31 f6                	xor    esi,esi
c001445a:	68 00 01 00 00       	push   0x100
c001445f:	6a 00                	push   0x0
c0014461:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014465:	50                   	push   eax
c0014466:	e8 19 c2 fe ff       	call   c0000684 <memset>
c001446b:	5f                   	pop    edi
c001446c:	58                   	pop    eax
c001446d:	6a 01                	push   0x1
c001446f:	53                   	push   ebx
c0014470:	e8 4b 8e ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c0014475:	83 c4 10             	add    esp,0x10
c0014478:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014480:	83 ec 0c             	sub    esp,0xc
c0014483:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014485:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014489:	51                   	push   ecx
c001448a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001448e:	52                   	push   edx
c001448f:	6a 00                	push   0x0
c0014491:	6a 01                	push   0x1
c0014493:	53                   	push   ebx
c0014494:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014497:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001449b:	83 c4 20             	add    esp,0x20
c001449e:	3c 0d                	cmp    al,0xd
c00144a0:	0f 84 09 01 00 00    	je     c00145af <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00144a6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00144ab:	0f 84 ef 00 00 00    	je     c00145a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00144b1:	3c 0a                	cmp    al,0xa
c00144b3:	74 13                	je     c00144c8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00144b5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00144ba:	74 0c                	je     c00144c8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00144bc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00144c2:	0f 8e d8 00 00 00    	jle    c00145a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00144c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00144cc:	83 ec 0c             	sub    esp,0xc
c00144cf:	8d 78 01             	lea    edi,[eax+0x1]
c00144d2:	57                   	push   edi
c00144d3:	e8 eb 54 ff ff       	call   c00099c3 <malloc>
c00144d8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00144dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00144e0:	8d 56 04             	lea    edx,[esi+0x4]
c00144e3:	89 14 24             	mov    DWORD PTR [esp],edx
c00144e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00144ea:	e8 d4 54 ff ff       	call   c00099c3 <malloc>
c00144ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00144f3:	83 c4 0c             	add    esp,0xc
c00144f6:	57                   	push   edi
c00144f7:	6a 00                	push   0x0
c00144f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144fd:	e8 82 c1 fe ff       	call   c0000684 <memset>
c0014502:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014506:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001450a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001450e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014510:	83 c4 0c             	add    esp,0xc
c0014513:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014517:	52                   	push   edx
c0014518:	6a 00                	push   0x0
c001451a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001451e:	e8 61 c1 fe ff       	call   c0000684 <memset>
c0014523:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014527:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001452b:	89 34 24             	mov    DWORD PTR [esp],esi
c001452e:	e8 6d c1 fe ff       	call   c00006a0 <strlen>
c0014533:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014537:	89 c1                	mov    ecx,eax
c0014539:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001453b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001453e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014541:	40                   	inc    eax
c0014542:	83 c4 10             	add    esp,0x10
c0014545:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014548:	85 d2                	test   edx,edx
c001454a:	75 0c                	jne    c0014558 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	6a 08                	push   0x8
c0014551:	e8 6d 54 ff ff       	call   c00099c3 <malloc>
c0014556:	eb 0c                	jmp    c0014564 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014558:	c1 e0 03             	shl    eax,0x3
c001455b:	51                   	push   ecx
c001455c:	51                   	push   ecx
c001455d:	50                   	push   eax
c001455e:	52                   	push   edx
c001455f:	e8 4b 54 ff ff       	call   c00099af <realloc>
c0014564:	83 c4 10             	add    esp,0x10
c0014567:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001456a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001456d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014570:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014574:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014578:	b9 08 00 00 00       	mov    ecx,0x8
c001457d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001457f:	31 f6                	xor    esi,esi
c0014581:	50                   	push   eax
c0014582:	68 00 01 00 00       	push   0x100
c0014587:	6a 00                	push   0x0
c0014589:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001458d:	50                   	push   eax
c001458e:	e8 f1 c0 fe ff       	call   c0000684 <memset>
c0014593:	83 c4 10             	add    esp,0x10
c0014596:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001459e:	eb 0f                	jmp    c00145af <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00145a0:	3c 3d                	cmp    al,0x3d
c00145a2:	74 07                	je     c00145ab <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00145a4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00145a8:	46                   	inc    esi
c00145a9:	eb 04                	jmp    c00145af <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00145ab:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00145af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00145b4:	0f 85 c6 fe ff ff    	jne    c0014480 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00145ba:	81 c4 2c 01 00 00    	add    esp,0x12c
c00145c0:	5b                   	pop    ebx
c00145c1:	5e                   	pop    esi
c00145c2:	5f                   	pop    edi
c00145c3:	5d                   	pop    ebp
c00145c4:	c3                   	ret    
c00145c5:	90                   	nop

c00145c6 <EnvVarContainer::__loadSystem()>:
c00145c6:	83 ec 10             	sub    esp,0x10
c00145c9:	68 e0 74 02 c0       	push   0xc00274e0
c00145ce:	68 55 56 02 c0       	push   0xc0025655
c00145d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145d7:	e8 04 fe ff ff       	call   c00143e0 <EnvVarContainer::loadFrom(char const*, char const*)>
c00145dc:	83 c4 1c             	add    esp,0x1c
c00145df:	c3                   	ret    

c00145e0 <EnvVarContainer::__loadUser()>:
c00145e0:	c3                   	ret    
c00145e1:	90                   	nop

c00145e2 <EnvVarContainer::EnvVarContainer(Process*)>:
c00145e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00145f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014602:	90                   	nop
c0014603:	c3                   	ret    

c0014604 <EnvVarContainer::~EnvVarContainer()>:
c0014604:	83 ec 0c             	sub    esp,0xc
c0014607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001460b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001460e:	85 c0                	test   eax,eax
c0014610:	74 1d                	je     c001462f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014616:	8b 00                	mov    eax,DWORD PTR [eax]
c0014618:	85 c0                	test   eax,eax
c001461a:	74 13                	je     c001462f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001461c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014620:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014623:	83 ec 0c             	sub    esp,0xc
c0014626:	50                   	push   eax
c0014627:	e8 a7 53 ff ff       	call   c00099d3 <free>
c001462c:	83 c4 10             	add    esp,0x10
c001462f:	90                   	nop
c0014630:	83 c4 0c             	add    esp,0xc
c0014633:	c3                   	ret    

c0014634 <Krnl::getEnv(Process*, char const*)>:
c0014634:	53                   	push   ebx
c0014635:	83 ec 08             	sub    esp,0x8
c0014638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014640:	39 05 f0 8f 02 c0    	cmp    DWORD PTR ds:0xc0028ff0,eax
c0014646:	74 04                	je     c001464c <Krnl::getEnv(Process*, char const*)+0x18>
c0014648:	85 c0                	test   eax,eax
c001464a:	75 0b                	jne    c0014657 <Krnl::getEnv(Process*, char const*)+0x23>
c001464c:	a1 d4 85 02 c0       	mov    eax,ds:0xc00285d4
c0014651:	85 c0                	test   eax,eax
c0014653:	75 19                	jne    c001466e <Krnl::getEnv(Process*, char const*)+0x3a>
c0014655:	eb 27                	jmp    c001467e <Krnl::getEnv(Process*, char const*)+0x4a>
c0014657:	52                   	push   edx
c0014658:	52                   	push   edx
c0014659:	53                   	push   ebx
c001465a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014660:	e8 79 fc ff ff       	call   c00142de <EnvVarContainer::getEnv(char const*)>
c0014665:	83 c4 10             	add    esp,0x10
c0014668:	85 c0                	test   eax,eax
c001466a:	75 28                	jne    c0014694 <Krnl::getEnv(Process*, char const*)+0x60>
c001466c:	eb de                	jmp    c001464c <Krnl::getEnv(Process*, char const*)+0x18>
c001466e:	52                   	push   edx
c001466f:	52                   	push   edx
c0014670:	53                   	push   ebx
c0014671:	50                   	push   eax
c0014672:	e8 67 fc ff ff       	call   c00142de <EnvVarContainer::getEnv(char const*)>
c0014677:	83 c4 10             	add    esp,0x10
c001467a:	85 c0                	test   eax,eax
c001467c:	75 16                	jne    c0014694 <Krnl::getEnv(Process*, char const*)+0x60>
c001467e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014682:	a1 d8 85 02 c0       	mov    eax,ds:0xc00285d8
c0014687:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001468b:	83 c4 08             	add    esp,0x8
c001468e:	5b                   	pop    ebx
c001468f:	e9 4a fc ff ff       	jmp    c00142de <EnvVarContainer::getEnv(char const*)>
c0014694:	83 c4 08             	add    esp,0x8
c0014697:	5b                   	pop    ebx
c0014698:	c3                   	ret    

c0014699 <Krnl::setEnvSystem(char const*, char const*)>:
c0014699:	83 ec 10             	sub    esp,0x10
c001469c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146a4:	ff 35 d8 85 02 c0    	push   DWORD PTR ds:0xc00285d8
c00146aa:	e8 6d fc ff ff       	call   c001431c <EnvVarContainer::setEnv(char const*, char const*)>
c00146af:	83 c4 1c             	add    esp,0x1c
c00146b2:	c3                   	ret    

c00146b3 <Krnl::setEnvUser(char const*, char const*)>:
c00146b3:	a1 d4 85 02 c0       	mov    eax,ds:0xc00285d4
c00146b8:	85 c0                	test   eax,eax
c00146ba:	74 15                	je     c00146d1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00146bc:	83 ec 10             	sub    esp,0x10
c00146bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146c7:	50                   	push   eax
c00146c8:	e8 4f fc ff ff       	call   c001431c <EnvVarContainer::setEnv(char const*, char const*)>
c00146cd:	83 c4 1c             	add    esp,0x1c
c00146d0:	c3                   	ret    
c00146d1:	c3                   	ret    

c00146d2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00146d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146d6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00146dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146e0:	e9 37 fc ff ff       	jmp    c001431c <EnvVarContainer::setEnv(char const*, char const*)>

c00146e5 <Krnl::deleteEnvSystem(char const*)>:
c00146e5:	c3                   	ret    

c00146e6 <Krnl::deleteEnvUser(char const*)>:
c00146e6:	c3                   	ret    

c00146e7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00146e7:	c3                   	ret    

c00146e8 <Krnl::newProcessEnv(Process*)>:
c00146e8:	83 ec 28             	sub    esp,0x28
c00146eb:	6a 0c                	push   0xc
c00146ed:	e8 d1 52 ff ff       	call   c00099c3 <malloc>
c00146f2:	5a                   	pop    edx
c00146f3:	59                   	pop    ecx
c00146f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00146f8:	50                   	push   eax
c00146f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146fd:	e8 e0 fe ff ff       	call   c00145e2 <EnvVarContainer::EnvVarContainer(Process*)>
c0014702:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014706:	83 c4 2c             	add    esp,0x2c
c0014709:	c3                   	ret    

c001470a <Krnl::copyProcessEnv(Process*, Process*)>:
c001470a:	57                   	push   edi
c001470b:	56                   	push   esi
c001470c:	53                   	push   ebx
c001470d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014711:	83 ec 0c             	sub    esp,0xc
c0014714:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001471a:	6a 0c                	push   0xc
c001471c:	e8 a2 52 ff ff       	call   c00099c3 <malloc>
c0014721:	89 c3                	mov    ebx,eax
c0014723:	58                   	pop    eax
c0014724:	5a                   	pop    edx
c0014725:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014729:	53                   	push   ebx
c001472a:	e8 b3 fe ff ff       	call   c00145e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001472f:	8b 07                	mov    eax,DWORD PTR [edi]
c0014731:	89 03                	mov    DWORD PTR [ebx],eax
c0014733:	c1 e0 03             	shl    eax,0x3
c0014736:	89 04 24             	mov    DWORD PTR [esp],eax
c0014739:	e8 85 52 ff ff       	call   c00099c3 <malloc>
c001473e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014741:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014743:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014746:	c1 e1 03             	shl    ecx,0x3
c0014749:	89 c7                	mov    edi,eax
c001474b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	89 d8                	mov    eax,ebx
c0014752:	5b                   	pop    ebx
c0014753:	5e                   	pop    esi
c0014754:	5f                   	pop    edi
c0014755:	c3                   	ret    

c0014756 <Krnl::loadSystemEnv()>:
c0014756:	53                   	push   ebx
c0014757:	83 ec 14             	sub    esp,0x14
c001475a:	6a 0c                	push   0xc
c001475c:	e8 62 52 ff ff       	call   c00099c3 <malloc>
c0014761:	89 c3                	mov    ebx,eax
c0014763:	58                   	pop    eax
c0014764:	5a                   	pop    edx
c0014765:	ff 35 f0 8f 02 c0    	push   DWORD PTR ds:0xc0028ff0
c001476b:	53                   	push   ebx
c001476c:	e8 71 fe ff ff       	call   c00145e2 <EnvVarContainer::EnvVarContainer(Process*)>
c0014771:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014774:	89 1d d8 85 02 c0    	mov    DWORD PTR ds:0xc00285d8,ebx
c001477a:	e8 47 fe ff ff       	call   c00145c6 <EnvVarContainer::__loadSystem()>
c001477f:	83 c4 18             	add    esp,0x18
c0014782:	5b                   	pop    ebx
c0014783:	c3                   	ret    

c0014784 <Krnl::loadUserEnv()>:
c0014784:	53                   	push   ebx
c0014785:	83 ec 14             	sub    esp,0x14
c0014788:	6a 0c                	push   0xc
c001478a:	e8 34 52 ff ff       	call   c00099c3 <malloc>
c001478f:	89 c3                	mov    ebx,eax
c0014791:	58                   	pop    eax
c0014792:	5a                   	pop    edx
c0014793:	ff 35 f0 8f 02 c0    	push   DWORD PTR ds:0xc0028ff0
c0014799:	53                   	push   ebx
c001479a:	e8 43 fe ff ff       	call   c00145e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001479f:	89 1d d4 85 02 c0    	mov    DWORD PTR ds:0xc00285d4,ebx
c00147a5:	83 c4 18             	add    esp,0x18
c00147a8:	5b                   	pop    ebx
c00147a9:	c3                   	ret    

c00147aa <Krnl::flushEnv()>:
c00147aa:	c3                   	ret    

c00147ab <Krnl::getProcessTotalEnvCount(Process*)>:
c00147ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147af:	8b 15 d4 85 02 c0    	mov    edx,DWORD PTR ds:0xc00285d4
c00147b5:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00147bb:	a1 d8 85 02 c0       	mov    eax,ds:0xc00285d8
c00147c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00147c2:	03 01                	add    eax,DWORD PTR [ecx]
c00147c4:	85 d2                	test   edx,edx
c00147c6:	74 02                	je     c00147ca <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00147c8:	03 02                	add    eax,DWORD PTR [edx]
c00147ca:	c3                   	ret    

c00147cb <Krnl::getProcessEnvPair(Process*, int)>:
c00147cb:	57                   	push   edi
c00147cc:	56                   	push   esi
c00147cd:	8b 35 d4 85 02 c0    	mov    esi,DWORD PTR ds:0xc00285d4
c00147d3:	53                   	push   ebx
c00147d4:	85 f6                	test   esi,esi
c00147d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147de:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00147e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147e8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00147ea:	75 16                	jne    c0014802 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00147ec:	39 c2                	cmp    edx,eax
c00147ee:	7c 16                	jl     c0014806 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00147f0:	8b 0d d8 85 02 c0    	mov    ecx,DWORD PTR ds:0xc00285d8
c00147f6:	8b 31                	mov    esi,DWORD PTR [ecx]
c00147f8:	01 c6                	add    esi,eax
c00147fa:	39 d6                	cmp    esi,edx
c00147fc:	7e 3c                	jle    c001483a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00147fe:	29 c2                	sub    edx,eax
c0014800:	eb 04                	jmp    c0014806 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014802:	39 c2                	cmp    edx,eax
c0014804:	7d 05                	jge    c001480b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014806:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014809:	eb 20                	jmp    c001482b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001480b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001480d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014810:	39 d1                	cmp    ecx,edx
c0014812:	7e 04                	jle    c0014818 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014814:	29 c2                	sub    edx,eax
c0014816:	eb 10                	jmp    c0014828 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014818:	8b 35 d8 85 02 c0    	mov    esi,DWORD PTR ds:0xc00285d8
c001481e:	03 0e                	add    ecx,DWORD PTR [esi]
c0014820:	39 d1                	cmp    ecx,edx
c0014822:	7e 16                	jle    c001483a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014824:	29 c2                	sub    edx,eax
c0014826:	29 fa                	sub    edx,edi
c0014828:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001482b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001482e:	8b 02                	mov    eax,DWORD PTR [edx]
c0014830:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014833:	89 03                	mov    DWORD PTR [ebx],eax
c0014835:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014838:	eb 1d                	jmp    c0014857 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001483a:	83 ec 0c             	sub    esp,0xc
c001483d:	68 77 56 02 c0       	push   0xc0025677
c0014842:	e8 18 00 00 00       	call   c001485f <Krnl::panic(char const*)>
c0014847:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001484d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014854:	83 c4 10             	add    esp,0x10
c0014857:	89 d8                	mov    eax,ebx
c0014859:	5b                   	pop    ebx
c001485a:	5e                   	pop    esi
c001485b:	5f                   	pop    edi
c001485c:	c2 04 00             	ret    0x4

c001485f <Krnl::panic(char const*)>:
c001485f:	55                   	push   ebp
c0014860:	89 e5                	mov    ebp,esp
c0014862:	53                   	push   ebx
c0014863:	83 ec 10             	sub    esp,0x10
c0014866:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014869:	fa                   	cli    
c001486a:	c6 05 e4 85 02 c0 01 	mov    BYTE PTR ds:0xc00285e4,0x1
c0014871:	53                   	push   ebx
c0014872:	e8 a6 51 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0014877:	58                   	pop    eax
c0014878:	c6 05 e0 6e 02 c0 00 	mov    BYTE PTR ds:0xc0026ee0,0x0
c001487f:	5a                   	pop    edx
c0014880:	53                   	push   ebx
c0014881:	68 91 56 02 c0       	push   0xc0025691
c0014886:	e8 28 84 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001488b:	59                   	pop    ecx
c001488c:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014891:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014897:	e8 21 62 ff ff       	call   c000aabd <setActiveTerminal(VgaText*)>
c001489c:	83 c4 0c             	add    esp,0xc
c001489f:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c00148a4:	6a 01                	push   0x1
c00148a6:	6a 0f                	push   0xf
c00148a8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148ae:	e8 69 60 ff ff       	call   c000a91c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00148b3:	58                   	pop    eax
c00148b4:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c00148b9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148bf:	e8 7a 65 ff ff       	call   c000ae3e <VgaText::clearScreen()>
c00148c4:	58                   	pop    eax
c00148c5:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c00148ca:	5a                   	pop    edx
c00148cb:	68 aa 56 02 c0       	push   0xc00256aa
c00148d0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148d6:	e8 ef 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00148db:	59                   	pop    ecx
c00148dc:	58                   	pop    eax
c00148dd:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c00148e2:	68 50 57 02 c0       	push   0xc0025750
c00148e7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148ed:	e8 d8 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00148f2:	58                   	pop    eax
c00148f3:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c00148f8:	5a                   	pop    edx
c00148f9:	68 c6 56 02 c0       	push   0xc00256c6
c00148fe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014904:	e8 c1 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014909:	59                   	pop    ecx
c001490a:	58                   	pop    eax
c001490b:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014910:	53                   	push   ebx
c0014911:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014917:	e8 ae 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c001491c:	58                   	pop    eax
c001491d:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014922:	5a                   	pop    edx
c0014923:	68 e6 56 02 c0       	push   0xc00256e6
c0014928:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001492e:	e8 97 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014933:	a1 e0 85 02 c0       	mov    eax,ds:0xc00285e0
c0014938:	83 c4 10             	add    esp,0x10
c001493b:	85 c0                	test   eax,eax
c001493d:	74 02                	je     c0014941 <Krnl::panic(char const*)+0xe2>
c001493f:	ff d0                	call   eax
c0014941:	83 ec 0c             	sub    esp,0xc
c0014944:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014947:	e8 ad 30 00 00       	call   c00179f9 <Thr::getDriverNameFromAddress(unsigned long)>
c001494c:	83 c4 10             	add    esp,0x10
c001494f:	89 c3                	mov    ebx,eax
c0014951:	85 c0                	test   eax,eax
c0014953:	0f 84 4e 02 00 00    	je     c0014ba7 <Krnl::panic(char const*)+0x348>
c0014959:	83 ec 08             	sub    esp,0x8
c001495c:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014961:	68 8c 57 02 c0       	push   0xc002578c
c0014966:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001496c:	e8 59 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014971:	58                   	pop    eax
c0014972:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014977:	5a                   	pop    edx
c0014978:	68 c6 56 02 c0       	push   0xc00256c6
c001497d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014983:	e8 42 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014988:	59                   	pop    ecx
c0014989:	58                   	pop    eax
c001498a:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c001498f:	53                   	push   ebx
c0014990:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014996:	e8 2f 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c001499b:	83 c4 10             	add    esp,0x10
c001499e:	83 ec 08             	sub    esp,0x8
c00149a1:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c00149a6:	68 e5 56 02 c0       	push   0xc00256e5
c00149ab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149b1:	e8 14 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00149b6:	58                   	pop    eax
c00149b7:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c00149bc:	5a                   	pop    edx
c00149bd:	68 e4 57 02 c0       	push   0xc00257e4
c00149c2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149c8:	e8 fd 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00149cd:	59                   	pop    ecx
c00149ce:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c00149d3:	5b                   	pop    ebx
c00149d4:	68 24 58 02 c0       	push   0xc0025824
c00149d9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149df:	e8 e6 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00149e4:	58                   	pop    eax
c00149e5:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c00149ea:	5a                   	pop    edx
c00149eb:	68 d1 56 02 c0       	push   0xc00256d1
c00149f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149f6:	e8 cf 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00149fb:	59                   	pop    ecx
c00149fc:	5b                   	pop    ebx
c00149fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014a00:	68 e9 56 02 c0       	push   0xc00256e9
c0014a05:	e8 a9 82 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0014a0a:	58                   	pop    eax
c0014a0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a0e:	5a                   	pop    edx
c0014a0f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014a12:	68 f2 56 02 c0       	push   0xc00256f2
c0014a17:	e8 97 82 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0014a1c:	59                   	pop    ecx
c0014a1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a20:	5b                   	pop    ebx
c0014a21:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a23:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014a26:	68 fb 56 02 c0       	push   0xc00256fb
c0014a2b:	e8 83 82 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0014a30:	58                   	pop    eax
c0014a31:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014a36:	5a                   	pop    edx
c0014a37:	68 68 58 02 c0       	push   0xc0025868
c0014a3c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a42:	e8 83 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014a47:	59                   	pop    ecx
c0014a48:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014a4d:	5b                   	pop    ebx
c0014a4e:	68 04 57 02 c0       	push   0xc0025704
c0014a53:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a59:	e8 6c 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014a5e:	0f 20 c0             	mov    eax,cr0
c0014a61:	5a                   	pop    edx
c0014a62:	59                   	pop    ecx
c0014a63:	50                   	push   eax
c0014a64:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014a69:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a6f:	e8 10 65 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014a74:	5b                   	pop    ebx
c0014a75:	58                   	pop    eax
c0014a76:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014a7b:	68 0e 57 02 c0       	push   0xc002570e
c0014a80:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a86:	e8 3f 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014a8b:	0f 20 d0             	mov    eax,cr2
c0014a8e:	5a                   	pop    edx
c0014a8f:	59                   	pop    ecx
c0014a90:	50                   	push   eax
c0014a91:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014a96:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a9c:	e8 e3 64 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014aa1:	5b                   	pop    ebx
c0014aa2:	58                   	pop    eax
c0014aa3:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014aa8:	68 18 57 02 c0       	push   0xc0025718
c0014aad:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ab3:	e8 12 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014ab8:	0f 20 d8             	mov    eax,cr3
c0014abb:	5a                   	pop    edx
c0014abc:	59                   	pop    ecx
c0014abd:	50                   	push   eax
c0014abe:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014ac3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ac9:	e8 b6 64 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014ace:	5b                   	pop    ebx
c0014acf:	58                   	pop    eax
c0014ad0:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014ad5:	68 2b 57 02 c0       	push   0xc002572b
c0014ada:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ae0:	e8 e5 64 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014ae5:	0f 20 e0             	mov    eax,cr4
c0014ae8:	5a                   	pop    edx
c0014ae9:	59                   	pop    ecx
c0014aea:	50                   	push   eax
c0014aeb:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014af0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014af6:	e8 89 64 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014afb:	5b                   	pop    ebx
c0014afc:	58                   	pop    eax
c0014afd:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014b02:	68 35 57 02 c0       	push   0xc0025735
c0014b07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b0d:	e8 b8 64 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014b12:	5a                   	pop    edx
c0014b13:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014b18:	59                   	pop    ecx
c0014b19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b1f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b22:	50                   	push   eax
c0014b23:	e8 5c 64 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014b28:	5b                   	pop    ebx
c0014b29:	58                   	pop    eax
c0014b2a:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014b2f:	68 4c 57 02 c0       	push   0xc002574c
c0014b34:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b3a:	e8 8b 64 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014b3f:	5a                   	pop    edx
c0014b40:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014b45:	59                   	pop    ecx
c0014b46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b4c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014b4f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014b52:	50                   	push   eax
c0014b53:	e8 2c 64 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014b58:	5b                   	pop    ebx
c0014b59:	58                   	pop    eax
c0014b5a:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014b5f:	68 4c 57 02 c0       	push   0xc002574c
c0014b64:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b6a:	e8 5b 64 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014b6f:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014b74:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014b77:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b7d:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b7f:	59                   	pop    ecx
c0014b80:	5b                   	pop    ebx
c0014b81:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014b84:	50                   	push   eax
c0014b85:	e8 fa 63 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014b8a:	83 c4 10             	add    esp,0x10
c0014b8d:	b2 fe                	mov    dl,0xfe
c0014b8f:	e4 60                	in     al,0x60
c0014b91:	3c 1c                	cmp    al,0x1c
c0014b93:	74 04                	je     c0014b99 <Krnl::panic(char const*)+0x33a>
c0014b95:	3c 5a                	cmp    al,0x5a
c0014b97:	75 f6                	jne    c0014b8f <Krnl::panic(char const*)+0x330>
c0014b99:	e4 64                	in     al,0x64
c0014b9b:	a8 02                	test   al,0x2
c0014b9d:	75 fa                	jne    c0014b99 <Krnl::panic(char const*)+0x33a>
c0014b9f:	88 d0                	mov    al,dl
c0014ba1:	e6 64                	out    0x64,al
c0014ba3:	fa                   	cli    
c0014ba4:	f4                   	hlt    
c0014ba5:	eb e8                	jmp    c0014b8f <Krnl::panic(char const*)+0x330>
c0014ba7:	50                   	push   eax
c0014ba8:	50                   	push   eax
c0014ba9:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014bae:	68 b8 57 02 c0       	push   0xc00257b8
c0014bb3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bb9:	e8 0c 64 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014bbe:	58                   	pop    eax
c0014bbf:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014bc4:	5a                   	pop    edx
c0014bc5:	68 c6 56 02 c0       	push   0xc00256c6
c0014bca:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bd0:	e8 f5 63 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014bd5:	59                   	pop    ecx
c0014bd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bdb:	5b                   	pop    ebx
c0014bdc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014bdf:	83 c0 0c             	add    eax,0xc
c0014be2:	50                   	push   eax
c0014be3:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0014be8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bee:	e8 d7 63 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014bf3:	83 c4 10             	add    esp,0x10
c0014bf6:	e9 a3 fd ff ff       	jmp    c001499e <Krnl::panic(char const*)+0x13f>
c0014bfb:	90                   	nop

c0014bfc <Net::switchEndian16(unsigned short)>:
c0014bfc:	83 ec 04             	sub    esp,0x4
c0014bff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c03:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014c07:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014c0b:	c1 f8 08             	sar    eax,0x8
c0014c0e:	89 c2                	mov    edx,eax
c0014c10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014c14:	c1 e0 08             	shl    eax,0x8
c0014c17:	09 d0                	or     eax,edx
c0014c19:	83 c4 04             	add    esp,0x4
c0014c1c:	c3                   	ret    
c0014c1d:	8d 76 00             	lea    esi,[esi+0x0]

c0014c20 <Net::switchEndian32(unsigned int)>:
c0014c20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c24:	c1 e8 18             	shr    eax,0x18
c0014c27:	89 c2                	mov    edx,eax
c0014c29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c2d:	c1 e0 08             	shl    eax,0x8
c0014c30:	25 00 00 ff 00       	and    eax,0xff0000
c0014c35:	09 c2                	or     edx,eax
c0014c37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c3b:	c1 e8 08             	shr    eax,0x8
c0014c3e:	25 00 ff 00 00       	and    eax,0xff00
c0014c43:	09 c2                	or     edx,eax
c0014c45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c49:	c1 e0 18             	shl    eax,0x18
c0014c4c:	09 d0                	or     eax,edx
c0014c4e:	c3                   	ret    
c0014c4f:	90                   	nop

c0014c50 <Net::crc32Calc(unsigned char*, int)>:
c0014c50:	83 ec 10             	sub    esp,0x10
c0014c53:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c58:	75 0a                	jne    c0014c64 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014c5a:	b8 00 00 00 00       	mov    eax,0x0
c0014c5f:	e9 8c 00 00 00       	jmp    c0014cf0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014c64:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014c69:	7f 09                	jg     c0014c74 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014c6b:	b8 00 00 00 00       	mov    eax,0x0
c0014c70:	eb 7e                	jmp    c0014cf0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014c72:	66 90                	xchg   ax,ax
c0014c74:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014c7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c88:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014c8c:	7d 5a                	jge    c0014ce8 <Net::crc32Calc(unsigned char*, int)+0x98>
c0014c8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c96:	01 d0                	add    eax,edx
c0014c98:	8a 00                	mov    al,BYTE PTR [eax]
c0014c9a:	0f b6 c0             	movzx  eax,al
c0014c9d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014ca1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0014cac:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014cb1:	7f 2d                	jg     c0014ce0 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014cb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cb7:	83 e0 01             	and    eax,0x1
c0014cba:	74 10                	je     c0014ccc <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cc0:	d1 e8                	shr    eax,1
c0014cc2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014cc7:	eb 0b                	jmp    c0014cd4 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0014ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cd0:	d1 e8                	shr    eax,1
c0014cd2:	66 90                	xchg   ax,ax
c0014cd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cd8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014cdc:	eb ce                	jmp    c0014cac <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014cde:	66 90                	xchg   ax,ax
c0014ce0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014ce4:	eb 9e                	jmp    c0014c84 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014ce6:	66 90                	xchg   ax,ax
c0014ce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cec:	f7 d0                	not    eax
c0014cee:	66 90                	xchg   ax,ax
c0014cf0:	83 c4 10             	add    esp,0x10
c0014cf3:	c3                   	ret    

c0014cf4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014cf4:	57                   	push   edi
c0014cf5:	56                   	push   esi
c0014cf6:	53                   	push   ebx
c0014cf7:	83 ec 60             	sub    esp,0x60
c0014cfa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d01:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014d05:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014d10:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014d15:	7f 1d                	jg     c0014d34 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0014d17:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d1e:	8d 50 01             	lea    edx,[eax+0x1]
c0014d21:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014d28:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0014d2b:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014d2f:	eb df                	jmp    c0014d10 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014d31:	8d 76 00             	lea    esi,[esi+0x0]
c0014d34:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d3b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d3e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014d45:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014d48:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d53:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014d57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d5b:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014d63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014d73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014d77:	89 c6                	mov    esi,eax
c0014d79:	89 d7                	mov    edi,edx
c0014d7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d7d:	89 c8                	mov    eax,ecx
c0014d7f:	89 fa                	mov    edx,edi
c0014d81:	89 f3                	mov    ebx,esi
c0014d83:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014d87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014d8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d8e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014d96:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d9d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014da1:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014da5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014da9:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014db1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014db5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014db9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dbd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014dc1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014dc5:	89 c6                	mov    esi,eax
c0014dc7:	89 d7                	mov    edi,edx
c0014dc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014dcb:	89 c8                	mov    eax,ecx
c0014dcd:	89 fa                	mov    edx,edi
c0014dcf:	89 f3                	mov    ebx,esi
c0014dd1:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014dd5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014dd9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ddd:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014de5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014dec:	0f b7 c0             	movzx  eax,ax
c0014def:	c1 f8 08             	sar    eax,0x8
c0014df2:	89 c1                	mov    ecx,eax
c0014df4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014dfb:	8d 50 01             	lea    edx,[eax+0x1]
c0014dfe:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014e05:	88 ca                	mov    dl,cl
c0014e07:	88 10                	mov    BYTE PTR [eax],dl
c0014e09:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014e10:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014e17:	8d 48 01             	lea    ecx,[eax+0x1]
c0014e1a:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0014e21:	88 10                	mov    BYTE PTR [eax],dl
c0014e23:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014e27:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0014e2b:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014e32:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0014e36:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014e3a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014e3e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014e42:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014e46:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014e4a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014e4e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014e52:	89 c6                	mov    esi,eax
c0014e54:	89 d7                	mov    edi,edx
c0014e56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e58:	89 c8                	mov    eax,ecx
c0014e5a:	89 fa                	mov    edx,edi
c0014e5c:	89 f3                	mov    ebx,esi
c0014e5e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014e62:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014e66:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014e6a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014e6e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014e75:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014e7c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0014e80:	50                   	push   eax
c0014e81:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014e85:	e8 c6 fd ff ff       	call   c0014c50 <Net::crc32Calc(unsigned char*, int)>
c0014e8a:	83 c4 08             	add    esp,0x8
c0014e8d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014e91:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014e95:	c1 e8 18             	shr    eax,0x18
c0014e98:	89 c1                	mov    ecx,eax
c0014e9a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ea1:	8d 50 01             	lea    edx,[eax+0x1]
c0014ea4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014eab:	88 ca                	mov    dl,cl
c0014ead:	88 10                	mov    BYTE PTR [eax],dl
c0014eaf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014eb3:	c1 e8 10             	shr    eax,0x10
c0014eb6:	89 c1                	mov    ecx,eax
c0014eb8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ebf:	8d 50 01             	lea    edx,[eax+0x1]
c0014ec2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014ec9:	88 ca                	mov    dl,cl
c0014ecb:	88 10                	mov    BYTE PTR [eax],dl
c0014ecd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014ed1:	c1 e8 08             	shr    eax,0x8
c0014ed4:	89 c1                	mov    ecx,eax
c0014ed6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014edd:	8d 50 01             	lea    edx,[eax+0x1]
c0014ee0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014ee7:	88 ca                	mov    dl,cl
c0014ee9:	88 10                	mov    BYTE PTR [eax],dl
c0014eeb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ef2:	8d 50 01             	lea    edx,[eax+0x1]
c0014ef5:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014efc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0014f00:	88 10                	mov    BYTE PTR [eax],dl
c0014f02:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014f06:	83 c4 60             	add    esp,0x60
c0014f09:	5b                   	pop    ebx
c0014f0a:	5e                   	pop    esi
c0014f0b:	5f                   	pop    edi
c0014f0c:	c3                   	ret    
c0014f0d:	8d 76 00             	lea    esi,[esi+0x0]

c0014f10 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0014f10:	57                   	push   edi
c0014f11:	56                   	push   esi
c0014f12:	53                   	push   ebx
c0014f13:	83 ec 70             	sub    esp,0x70
c0014f16:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014f1d:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0014f21:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0014f29:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014f30:	83 c0 0e             	add    eax,0xe
c0014f33:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014f37:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014f3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f42:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014f4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f4e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014f52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f56:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014f5a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014f5e:	89 c6                	mov    esi,eax
c0014f60:	89 d7                	mov    edi,edx
c0014f62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f64:	89 c8                	mov    eax,ecx
c0014f66:	89 fa                	mov    edx,edi
c0014f68:	89 f3                	mov    ebx,esi
c0014f6a:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014f6e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014f72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f76:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014f7e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014f85:	83 c0 08             	add    eax,0x8
c0014f88:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014f8c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014f93:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014f97:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014f9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014fa3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014fa7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014fab:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014faf:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014fb3:	89 c6                	mov    esi,eax
c0014fb5:	89 d7                	mov    edi,edx
c0014fb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014fb9:	89 c8                	mov    eax,ecx
c0014fbb:	89 fa                	mov    edx,edi
c0014fbd:	89 f3                	mov    ebx,esi
c0014fbf:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014fc3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014fc7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014fcb:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014fd3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014fda:	8d 50 01             	lea    edx,[eax+0x1]
c0014fdd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014fe4:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe6:	0f b6 c0             	movzx  eax,al
c0014fe9:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014fee:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ff5:	8d 50 01             	lea    edx,[eax+0x1]
c0014ff8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014fff:	8a 00                	mov    al,BYTE PTR [eax]
c0015001:	0f b6 c0             	movzx  eax,al
c0015004:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0015009:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001500e:	c1 e0 08             	shl    eax,0x8
c0015011:	89 c2                	mov    edx,eax
c0015013:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015017:	09 d0                	or     eax,edx
c0015019:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015020:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015024:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001502c:	75 46                	jne    c0015074 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001502e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015035:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015038:	66 3d dc 05          	cmp    ax,0x5dc
c001503c:	77 16                	ja     c0015054 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001503e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015045:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015048:	0f b7 c0             	movzx  eax,ax
c001504b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015052:	eb 20                	jmp    c0015074 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015054:	83 ec 0c             	sub    esp,0xc
c0015057:	68 90 58 02 c0       	push   0xc0025890
c001505c:	e8 52 7c ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0015061:	83 c4 10             	add    esp,0x10
c0015064:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001506b:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001506f:	e9 18 01 00 00       	jmp    c001518c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015074:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001507b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015082:	8b 12                	mov    edx,DWORD PTR [edx]
c0015084:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015088:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001508f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015093:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015097:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001509b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001509f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00150a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00150a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00150ab:	89 c6                	mov    esi,eax
c00150ad:	89 d7                	mov    edi,edx
c00150af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00150b1:	89 c8                	mov    eax,ecx
c00150b3:	89 fa                	mov    edx,edi
c00150b5:	89 f3                	mov    ebx,esi
c00150b7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00150bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00150bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00150c2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00150c9:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c00150d0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00150d7:	8d 50 01             	lea    edx,[eax+0x1]
c00150da:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00150e1:	8a 00                	mov    al,BYTE PTR [eax]
c00150e3:	0f b6 c0             	movzx  eax,al
c00150e6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00150ea:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00150f1:	8d 50 01             	lea    edx,[eax+0x1]
c00150f4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00150fb:	8a 00                	mov    al,BYTE PTR [eax]
c00150fd:	0f b6 c0             	movzx  eax,al
c0015100:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015104:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001510b:	8d 50 01             	lea    edx,[eax+0x1]
c001510e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015115:	8a 00                	mov    al,BYTE PTR [eax]
c0015117:	0f b6 c0             	movzx  eax,al
c001511a:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001511e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015125:	8d 50 01             	lea    edx,[eax+0x1]
c0015128:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001512f:	8a 00                	mov    al,BYTE PTR [eax]
c0015131:	0f b6 c0             	movzx  eax,al
c0015134:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015138:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001513c:	c1 e0 18             	shl    eax,0x18
c001513f:	89 c2                	mov    edx,eax
c0015141:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015145:	c1 e0 10             	shl    eax,0x10
c0015148:	09 c2                	or     edx,eax
c001514a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001514e:	c1 e0 08             	shl    eax,0x8
c0015151:	09 d0                	or     eax,edx
c0015153:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015157:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001515b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015162:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015166:	83 e8 04             	sub    eax,0x4
c0015169:	83 ec 08             	sub    esp,0x8
c001516c:	50                   	push   eax
c001516d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015171:	e8 da fa ff ff       	call   c0014c50 <Net::crc32Calc(unsigned char*, int)>
c0015176:	83 c4 10             	add    esp,0x10
c0015179:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001517d:	0f 94 c2             	sete   dl
c0015180:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015187:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001518a:	90                   	nop
c001518b:	90                   	nop
c001518c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015193:	83 c4 70             	add    esp,0x70
c0015196:	5b                   	pop    ebx
c0015197:	5e                   	pop    esi
c0015198:	5f                   	pop    edi
c0015199:	c2 04 00             	ret    0x4

c001519c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001519c:	55                   	push   ebp
c001519d:	57                   	push   edi
c001519e:	56                   	push   esi
c001519f:	53                   	push   ebx
c00151a0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00151a6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00151ad:	8a 1e                	mov    bl,BYTE PTR [esi]
c00151af:	8d 6e 01             	lea    ebp,[esi+0x1]
c00151b2:	80 fb 40             	cmp    bl,0x40
c00151b5:	75 1b                	jne    c00151d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00151b7:	8a 16                	mov    dl,BYTE PTR [esi]
c00151b9:	84 d2                	test   dl,dl
c00151bb:	0f 84 f1 00 00 00    	je     c00152b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151c1:	8d 46 01             	lea    eax,[esi+0x1]
c00151c4:	80 fa 3a             	cmp    dl,0x3a
c00151c7:	74 04                	je     c00151cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00151c9:	89 c6                	mov    esi,eax
c00151cb:	eb ea                	jmp    c00151b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00151cd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00151d0:	89 c6                	mov    esi,eax
c00151d2:	50                   	push   eax
c00151d3:	6a 40                	push   0x40
c00151d5:	6a 00                	push   0x0
c00151d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00151db:	50                   	push   eax
c00151dc:	e8 a3 b4 fe ff       	call   c0000684 <memset>
c00151e1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00151e8:	31 c0                	xor    eax,eax
c00151ea:	83 c4 10             	add    esp,0x10
c00151ed:	8a 0f                	mov    cl,BYTE PTR [edi]
c00151ef:	84 c9                	test   cl,cl
c00151f1:	0f 84 bb 00 00 00    	je     c00152b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151f7:	3d c7 00 00 00       	cmp    eax,0xc7
c00151fc:	0f 8f b0 00 00 00    	jg     c00152b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015202:	80 f9 0a             	cmp    cl,0xa
c0015205:	0f 85 98 00 00 00    	jne    c00152a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001520b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015210:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015214:	a8 df                	test   al,0xdf
c0015216:	0f 94 c1             	sete   cl
c0015219:	3c 23                	cmp    al,0x23
c001521b:	0f 94 c2             	sete   dl
c001521e:	08 d1                	or     cl,dl
c0015220:	75 4a                	jne    c001526c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015222:	8d 50 f7             	lea    edx,[eax-0x9]
c0015225:	80 fa 01             	cmp    dl,0x1
c0015228:	76 42                	jbe    c001526c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001522a:	3c 5b                	cmp    al,0x5b
c001522c:	75 42                	jne    c0015270 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001522e:	80 fb 40             	cmp    bl,0x40
c0015231:	75 39                	jne    c001526c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015233:	83 ec 0c             	sub    esp,0xc
c0015236:	8d 54 24 65          	lea    edx,[esp+0x65]
c001523a:	52                   	push   edx
c001523b:	e8 60 b4 fe ff       	call   c00006a0 <strlen>
c0015240:	83 c4 10             	add    esp,0x10
c0015243:	83 f8 3f             	cmp    eax,0x3f
c0015246:	77 6a                	ja     c00152b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015248:	50                   	push   eax
c0015249:	50                   	push   eax
c001524a:	8d 54 24 61          	lea    edx,[esp+0x61]
c001524e:	52                   	push   edx
c001524f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015253:	52                   	push   edx
c0015254:	e8 e7 b4 fe ff       	call   c0000740 <strcpy>
c0015259:	58                   	pop    eax
c001525a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001525e:	52                   	push   edx
c001525f:	e8 3c b4 fe ff       	call   c00006a0 <strlen>
c0015264:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015269:	83 c4 10             	add    esp,0x10
c001526c:	31 d2                	xor    edx,edx
c001526e:	eb 3a                	jmp    c00152aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015270:	80 fb 40             	cmp    bl,0x40
c0015273:	74 06                	je     c001527b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015275:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015279:	eb 20                	jmp    c001529b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001527b:	50                   	push   eax
c001527c:	50                   	push   eax
c001527d:	55                   	push   ebp
c001527e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015282:	50                   	push   eax
c0015283:	e8 44 b5 fe ff       	call   c00007cc <strcmp>
c0015288:	83 c4 10             	add    esp,0x10
c001528b:	85 c0                	test   eax,eax
c001528d:	75 dd                	jne    c001526c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001528f:	eb e4                	jmp    c0015275 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015291:	8d 50 01             	lea    edx,[eax+0x1]
c0015294:	80 f9 3d             	cmp    cl,0x3d
c0015297:	74 1d                	je     c00152b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015299:	89 d0                	mov    eax,edx
c001529b:	8a 08                	mov    cl,BYTE PTR [eax]
c001529d:	84 c9                	test   cl,cl
c001529f:	75 f0                	jne    c0015291 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00152a1:	eb 0f                	jmp    c00152b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00152a3:	8d 50 01             	lea    edx,[eax+0x1]
c00152a6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00152aa:	47                   	inc    edi
c00152ab:	89 d0                	mov    eax,edx
c00152ad:	e9 3b ff ff ff       	jmp    c00151ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00152b2:	31 c0                	xor    eax,eax
c00152b4:	eb 33                	jmp    c00152e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00152b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00152ba:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00152bd:	50                   	push   eax
c00152be:	50                   	push   eax
c00152bf:	8d 44 24 60          	lea    eax,[esp+0x60]
c00152c3:	50                   	push   eax
c00152c4:	56                   	push   esi
c00152c5:	e8 02 b5 fe ff       	call   c00007cc <strcmp>
c00152ca:	83 c4 10             	add    esp,0x10
c00152cd:	85 c0                	test   eax,eax
c00152cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00152d3:	75 97                	jne    c001526c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00152d5:	51                   	push   ecx
c00152d6:	51                   	push   ecx
c00152d7:	52                   	push   edx
c00152d8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00152df:	e8 5c b4 fe ff       	call   c0000740 <strcpy>
c00152e4:	83 c4 10             	add    esp,0x10
c00152e7:	b0 01                	mov    al,0x1
c00152e9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00152ef:	5b                   	pop    ebx
c00152f0:	5e                   	pop    esi
c00152f1:	5f                   	pop    edi
c00152f2:	5d                   	pop    ebp
c00152f3:	c3                   	ret    

c00152f4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00152f4:	57                   	push   edi
c00152f5:	56                   	push   esi
c00152f6:	53                   	push   ebx
c00152f7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00152fd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015304:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001530b:	53                   	push   ebx
c001530c:	e8 8f b3 fe ff       	call   c00006a0 <strlen>
c0015311:	89 34 24             	mov    DWORD PTR [esp],esi
c0015314:	89 c7                	mov    edi,eax
c0015316:	e8 85 b3 fe ff       	call   c00006a0 <strlen>
c001531b:	83 c4 10             	add    esp,0x10
c001531e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015322:	3d ff 00 00 00       	cmp    eax,0xff
c0015327:	0f 87 d3 00 00 00    	ja     c0015400 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001532d:	57                   	push   edi
c001532e:	57                   	push   edi
c001532f:	56                   	push   esi
c0015330:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015334:	56                   	push   esi
c0015335:	e8 06 b4 fe ff       	call   c0000740 <strcpy>
c001533a:	58                   	pop    eax
c001533b:	5a                   	pop    edx
c001533c:	68 32 5c 02 c0       	push   0xc0025c32
c0015341:	56                   	push   esi
c0015342:	e8 39 b5 fe ff       	call   c0000880 <strcat>
c0015347:	59                   	pop    ecx
c0015348:	5f                   	pop    edi
c0015349:	53                   	push   ebx
c001534a:	56                   	push   esi
c001534b:	e8 30 b5 fe ff       	call   c0000880 <strcat>
c0015350:	58                   	pop    eax
c0015351:	5a                   	pop    edx
c0015352:	68 dc 58 02 c0       	push   0xc00258dc
c0015357:	56                   	push   esi
c0015358:	e8 23 b5 fe ff       	call   c0000880 <strcat>
c001535d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015364:	e8 5a 46 ff ff       	call   c00099c3 <malloc>
c0015369:	83 c4 0c             	add    esp,0xc
c001536c:	89 c3                	mov    ebx,eax
c001536e:	ff 35 f0 8f 02 c0    	push   DWORD PTR ds:0xc0028ff0
c0015374:	56                   	push   esi
c0015375:	50                   	push   eax
c0015376:	e8 a3 7e ff ff       	call   c000d21e <File::File(char const*, Process*)>
c001537b:	83 c4 10             	add    esp,0x10
c001537e:	85 db                	test   ebx,ebx
c0015380:	74 7e                	je     c0015400 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015382:	51                   	push   ecx
c0015383:	51                   	push   ecx
c0015384:	6a 01                	push   0x1
c0015386:	53                   	push   ebx
c0015387:	e8 34 7f ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c001538c:	83 c4 10             	add    esp,0x10
c001538f:	85 c0                	test   eax,eax
c0015391:	74 08                	je     c001539b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015393:	83 ec 0c             	sub    esp,0xc
c0015396:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015398:	53                   	push   ebx
c0015399:	eb 5f                	jmp    c00153fa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001539b:	52                   	push   edx
c001539c:	8d 44 24 17          	lea    eax,[esp+0x17]
c00153a0:	50                   	push   eax
c00153a1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00153a5:	50                   	push   eax
c00153a6:	53                   	push   ebx
c00153a7:	e8 c0 81 ff ff       	call   c000d56c <File::stat(unsigned long long*, bool*)>
c00153ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153b0:	83 c4 10             	add    esp,0x10
c00153b3:	89 c1                	mov    ecx,eax
c00153b5:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00153b9:	74 31                	je     c00153ec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00153bb:	83 ec 0c             	sub    esp,0xc
c00153be:	50                   	push   eax
c00153bf:	e8 ff 45 ff ff       	call   c00099c3 <malloc>
c00153c4:	89 c6                	mov    esi,eax
c00153c6:	58                   	pop    eax
c00153c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153c9:	8d 54 24 20          	lea    edx,[esp+0x20]
c00153cd:	52                   	push   edx
c00153ce:	56                   	push   esi
c00153cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00153d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00153d7:	53                   	push   ebx
c00153d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00153db:	83 c4 20             	add    esp,0x20
c00153de:	85 c0                	test   eax,eax
c00153e0:	75 0a                	jne    c00153ec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00153e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00153e6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00153ea:	74 18                	je     c0015404 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00153ec:	83 ec 0c             	sub    esp,0xc
c00153ef:	53                   	push   ebx
c00153f0:	e8 29 7f ff ff       	call   c000d31e <File::close()>
c00153f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153fd:	83 c4 10             	add    esp,0x10
c0015400:	31 c0                	xor    eax,eax
c0015402:	eb 3b                	jmp    c001543f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015404:	83 ec 0c             	sub    esp,0xc
c0015407:	53                   	push   ebx
c0015408:	e8 11 7f ff ff       	call   c000d31e <File::close()>
c001540d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001540f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015412:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015415:	83 c4 0c             	add    esp,0xc
c0015418:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001541f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015426:	56                   	push   esi
c0015427:	e8 70 fd ff ff       	call   c001519c <Reg::findLineFromLoadedData(char*, char*, char*)>
c001542c:	89 34 24             	mov    DWORD PTR [esp],esi
c001542f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015433:	e8 9b 45 ff ff       	call   c00099d3 <free>
c0015438:	83 c4 10             	add    esp,0x10
c001543b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001543f:	81 c4 20 01 00 00    	add    esp,0x120
c0015445:	5b                   	pop    ebx
c0015446:	5e                   	pop    esi
c0015447:	5f                   	pop    edi
c0015448:	c3                   	ret    

c0015449 <Reg::getLine(char*, char*, char*)>:
c0015449:	57                   	push   edi
c001544a:	56                   	push   esi
c001544b:	53                   	push   ebx
c001544c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015450:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015454:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015458:	57                   	push   edi
c0015459:	56                   	push   esi
c001545a:	53                   	push   ebx
c001545b:	68 e1 58 02 c0       	push   0xc00258e1
c0015460:	e8 8f fe ff ff       	call   c00152f4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	84 c0                	test   al,al
c001546a:	75 10                	jne    c001547c <Reg::getLine(char*, char*, char*)+0x33>
c001546c:	57                   	push   edi
c001546d:	56                   	push   esi
c001546e:	53                   	push   ebx
c001546f:	68 06 59 02 c0       	push   0xc0025906
c0015474:	e8 7b fe ff ff       	call   c00152f4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015479:	83 c4 10             	add    esp,0x10
c001547c:	5b                   	pop    ebx
c001547d:	5e                   	pop    esi
c001547e:	5f                   	pop    edi
c001547f:	c3                   	ret    

c0015480 <Reg::readInt(char*, char*, int*)>:
c0015480:	55                   	push   ebp
c0015481:	57                   	push   edi
c0015482:	56                   	push   esi
c0015483:	53                   	push   ebx
c0015484:	81 ec f0 00 00 00    	sub    esp,0xf0
c001548a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001548e:	57                   	push   edi
c001548f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015496:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001549d:	e8 a7 ff ff ff       	call   c0015449 <Reg::getLine(char*, char*, char*)>
c00154a2:	83 c4 10             	add    esp,0x10
c00154a5:	84 c0                	test   al,al
c00154a7:	0f 84 b3 00 00 00    	je     c0015560 <Reg::readInt(char*, char*, int*)+0xe0>
c00154ad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00154b1:	80 fa 2b             	cmp    dl,0x2b
c00154b4:	74 0c                	je     c00154c2 <Reg::readInt(char*, char*, int*)+0x42>
c00154b6:	80 fa 2d             	cmp    dl,0x2d
c00154b9:	75 0e                	jne    c00154c9 <Reg::readInt(char*, char*, int*)+0x49>
c00154bb:	ba 01 00 00 00       	mov    edx,0x1
c00154c0:	eb 0b                	jmp    c00154cd <Reg::readInt(char*, char*, int*)+0x4d>
c00154c2:	ba 01 00 00 00       	mov    edx,0x1
c00154c7:	eb 02                	jmp    c00154cb <Reg::readInt(char*, char*, int*)+0x4b>
c00154c9:	31 d2                	xor    edx,edx
c00154cb:	31 c0                	xor    eax,eax
c00154cd:	be 0a 00 00 00       	mov    esi,0xa
c00154d2:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00154d7:	75 20                	jne    c00154f9 <Reg::readInt(char*, char*, int*)+0x79>
c00154d9:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00154dd:	80 f9 78             	cmp    cl,0x78
c00154e0:	75 0a                	jne    c00154ec <Reg::readInt(char*, char*, int*)+0x6c>
c00154e2:	83 c2 02             	add    edx,0x2
c00154e5:	be 10 00 00 00       	mov    esi,0x10
c00154ea:	eb 0d                	jmp    c00154f9 <Reg::readInt(char*, char*, int*)+0x79>
c00154ec:	80 f9 62             	cmp    cl,0x62
c00154ef:	75 08                	jne    c00154f9 <Reg::readInt(char*, char*, int*)+0x79>
c00154f1:	83 c2 02             	add    edx,0x2
c00154f4:	be 02 00 00 00       	mov    esi,0x2
c00154f9:	01 d7                	add    edi,edx
c00154fb:	31 d2                	xor    edx,edx
c00154fd:	8a 1f                	mov    bl,BYTE PTR [edi]
c00154ff:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015503:	80 fb 0d             	cmp    bl,0xd
c0015506:	0f 94 c3             	sete   bl
c0015509:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001550e:	0f 94 c1             	sete   cl
c0015511:	08 cb                	or     bl,cl
c0015513:	75 3a                	jne    c001554f <Reg::readInt(char*, char*, int*)+0xcf>
c0015515:	0f af d6             	imul   edx,esi
c0015518:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001551d:	83 fe 10             	cmp    esi,0x10
c0015520:	75 26                	jne    c0015548 <Reg::readInt(char*, char*, int*)+0xc8>
c0015522:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015526:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015529:	89 e9                	mov    ecx,ebp
c001552b:	80 f9 05             	cmp    cl,0x5
c001552e:	77 06                	ja     c0015536 <Reg::readInt(char*, char*, int*)+0xb6>
c0015530:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015534:	eb 16                	jmp    c001554c <Reg::readInt(char*, char*, int*)+0xcc>
c0015536:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001553a:	83 e9 61             	sub    ecx,0x61
c001553d:	80 f9 05             	cmp    cl,0x5
c0015540:	77 06                	ja     c0015548 <Reg::readInt(char*, char*, int*)+0xc8>
c0015542:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015546:	eb 04                	jmp    c001554c <Reg::readInt(char*, char*, int*)+0xcc>
c0015548:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001554c:	47                   	inc    edi
c001554d:	eb ae                	jmp    c00154fd <Reg::readInt(char*, char*, int*)+0x7d>
c001554f:	84 c0                	test   al,al
c0015551:	74 02                	je     c0015555 <Reg::readInt(char*, char*, int*)+0xd5>
c0015553:	f7 da                	neg    edx
c0015555:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001555c:	89 10                	mov    DWORD PTR [eax],edx
c001555e:	88 d8                	mov    al,bl
c0015560:	81 c4 ec 00 00 00    	add    esp,0xec
c0015566:	5b                   	pop    ebx
c0015567:	5e                   	pop    esi
c0015568:	5f                   	pop    edi
c0015569:	5d                   	pop    ebp
c001556a:	c3                   	ret    

c001556b <Reg::readString(char*, char*, char*, int)>:
c001556b:	57                   	push   edi
c001556c:	56                   	push   esi
c001556d:	53                   	push   ebx
c001556e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015574:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001557b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001557f:	57                   	push   edi
c0015580:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015587:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001558e:	e8 b6 fe ff ff       	call   c0015449 <Reg::getLine(char*, char*, char*)>
c0015593:	83 c4 10             	add    esp,0x10
c0015596:	89 c6                	mov    esi,eax
c0015598:	84 c0                	test   al,al
c001559a:	74 44                	je     c00155e0 <Reg::readString(char*, char*, char*, int)+0x75>
c001559c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00155a3:	31 c0                	xor    eax,eax
c00155a5:	4a                   	dec    edx
c00155a6:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00155a9:	84 c9                	test   cl,cl
c00155ab:	74 0f                	je     c00155bc <Reg::readString(char*, char*, char*, int)+0x51>
c00155ad:	39 c2                	cmp    edx,eax
c00155af:	7e 0b                	jle    c00155bc <Reg::readString(char*, char*, char*, int)+0x51>
c00155b1:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00155b4:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00155b9:	40                   	inc    eax
c00155ba:	eb ea                	jmp    c00155a6 <Reg::readString(char*, char*, char*, int)+0x3b>
c00155bc:	83 ec 0c             	sub    esp,0xc
c00155bf:	53                   	push   ebx
c00155c0:	e8 db b0 fe ff       	call   c00006a0 <strlen>
c00155c5:	83 c4 10             	add    esp,0x10
c00155c8:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00155cd:	75 11                	jne    c00155e0 <Reg::readString(char*, char*, char*, int)+0x75>
c00155cf:	83 ec 0c             	sub    esp,0xc
c00155d2:	53                   	push   ebx
c00155d3:	e8 c8 b0 fe ff       	call   c00006a0 <strlen>
c00155d8:	83 c4 10             	add    esp,0x10
c00155db:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00155e0:	81 c4 d0 00 00 00    	add    esp,0xd0
c00155e6:	89 f0                	mov    eax,esi
c00155e8:	5b                   	pop    ebx
c00155e9:	5e                   	pop    esi
c00155ea:	5f                   	pop    edi
c00155eb:	c3                   	ret    

c00155ec <Reg::readBool(char*, char*, bool*)>:
c00155ec:	83 ec 20             	sub    esp,0x20
c00155ef:	8d 44 24 10          	lea    eax,[esp+0x10]
c00155f3:	50                   	push   eax
c00155f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155fc:	e8 7f fe ff ff       	call   c0015480 <Reg::readInt(char*, char*, int*)>
c0015601:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015606:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001560a:	0f 95 02             	setne  BYTE PTR [edx]
c001560d:	83 c4 2c             	add    esp,0x2c
c0015610:	c3                   	ret    

c0015611 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015611:	53                   	push   ebx
c0015612:	83 ec 1c             	sub    esp,0x1c
c0015615:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015619:	8d 44 24 13          	lea    eax,[esp+0x13]
c001561d:	50                   	push   eax
c001561e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015622:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015626:	e8 c1 ff ff ff       	call   c00155ec <Reg::readBool(char*, char*, bool*)>
c001562b:	83 c4 10             	add    esp,0x10
c001562e:	84 c0                	test   al,al
c0015630:	74 04                	je     c0015636 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015632:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015636:	88 d8                	mov    al,bl
c0015638:	83 c4 18             	add    esp,0x18
c001563b:	5b                   	pop    ebx
c001563c:	c3                   	ret    

c001563d <Reg::readIntWithDefault(char*, char*, int)>:
c001563d:	53                   	push   ebx
c001563e:	83 ec 1c             	sub    esp,0x1c
c0015641:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015645:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015649:	50                   	push   eax
c001564a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001564e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015652:	e8 29 fe ff ff       	call   c0015480 <Reg::readInt(char*, char*, int*)>
c0015657:	83 c4 10             	add    esp,0x10
c001565a:	84 c0                	test   al,al
c001565c:	74 04                	je     c0015662 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001565e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015662:	89 d8                	mov    eax,ebx
c0015664:	83 c4 18             	add    esp,0x18
c0015667:	5b                   	pop    ebx
c0015668:	c3                   	ret    

c0015669 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015669:	57                   	push   edi
c001566a:	56                   	push   esi
c001566b:	56                   	push   esi
c001566c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015670:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015674:	56                   	push   esi
c0015675:	57                   	push   edi
c0015676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001567a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001567e:	e8 e8 fe ff ff       	call   c001556b <Reg::readString(char*, char*, char*, int)>
c0015683:	83 c4 10             	add    esp,0x10
c0015686:	84 c0                	test   al,al
c0015688:	75 1a                	jne    c00156a4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001568a:	51                   	push   ecx
c001568b:	56                   	push   esi
c001568c:	6a 00                	push   0x0
c001568e:	57                   	push   edi
c001568f:	e8 f0 af fe ff       	call   c0000684 <memset>
c0015694:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015697:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001569b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001569d:	83 c4 10             	add    esp,0x10
c00156a0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00156a4:	89 f8                	mov    eax,edi
c00156a6:	5a                   	pop    edx
c00156a7:	5e                   	pop    esi
c00156a8:	5f                   	pop    edi
c00156a9:	c3                   	ret    

c00156aa <Sys::eject(regs*)>:
c00156aa:	83 ec 0c             	sub    esp,0xc
c00156ad:	83 ca ff             	or     edx,0xffffffff
c00156b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156b4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00156b7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156bc:	83 e9 41             	sub    ecx,0x41
c00156bf:	83 f9 19             	cmp    ecx,0x19
c00156c2:	77 18                	ja     c00156dc <Sys::eject(regs*)+0x32>
c00156c4:	8b 0c 8d c0 80 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f40]
c00156cb:	85 c9                	test   ecx,ecx
c00156cd:	74 0d                	je     c00156dc <Sys::eject(regs*)+0x32>
c00156cf:	83 ec 0c             	sub    esp,0xc
c00156d2:	51                   	push   ecx
c00156d3:	e8 ce ac ff ff       	call   c00103a6 <LogicalDisk::eject()>
c00156d8:	83 c4 10             	add    esp,0x10
c00156db:	99                   	cdq    
c00156dc:	83 c4 0c             	add    esp,0xc
c00156df:	c3                   	ret    

c00156e0 <Sys::exit(regs*)>:
c00156e0:	83 ec 18             	sub    esp,0x18
c00156e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156e7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00156ea:	e8 59 36 00 00       	call   c0018d48 <terminateTask(int)>
c00156ef:	83 c8 ff             	or     eax,0xffffffff
c00156f2:	83 c4 1c             	add    esp,0x1c
c00156f5:	89 c2                	mov    edx,eax
c00156f7:	c3                   	ret    

c00156f8 <Sys::getCwd(regs*)>:
c00156f8:	83 ec 10             	sub    esp,0x10
c00156fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156ff:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015702:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015705:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001570a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001570d:	e8 0e 79 ff ff       	call   c000d020 <Fs::getcwd(Process*, char*, int)>
c0015712:	83 c4 1c             	add    esp,0x1c
c0015715:	99                   	cdq    
c0015716:	c3                   	ret    

c0015717 <Sys::getPID(regs*)>:
c0015717:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001571c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001571f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015721:	99                   	cdq    
c0015722:	c3                   	ret    

c0015723 <Sys::getRAMData(regs*)>:
c0015723:	8b 0d 38 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027b38
c0015729:	69 05 34 7b 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0027b34,0xc8
c0015733:	99                   	cdq    
c0015734:	f7 f9                	idiv   ecx
c0015736:	c1 e0 18             	shl    eax,0x18
c0015739:	09 c8                	or     eax,ecx
c001573b:	99                   	cdq    
c001573c:	c3                   	ret    

c001573d <Sys::getVGAPtr(regs*)>:
c001573d:	55                   	push   ebp
c001573e:	57                   	push   edi
c001573f:	56                   	push   esi
c0015740:	53                   	push   ebx
c0015741:	83 ec 18             	sub    esp,0x18
c0015744:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015748:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001574b:	e8 fc 30 00 00       	call   c001884c <Thr::processFromPID(int)>
c0015750:	83 c4 10             	add    esp,0x10
c0015753:	89 c1                	mov    ecx,eax
c0015755:	b8 01 00 00 00       	mov    eax,0x1
c001575a:	85 c9                	test   ecx,ecx
c001575c:	74 59                	je     c00157b7 <Sys::getVGAPtr(regs*)+0x7a>
c001575e:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015764:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015768:	74 0c                	je     c0015776 <Sys::getVGAPtr(regs*)+0x39>
c001576a:	83 ec 0c             	sub    esp,0xc
c001576d:	53                   	push   ebx
c001576e:	e8 4a 53 ff ff       	call   c000aabd <setActiveTerminal(VgaText*)>
c0015773:	83 c4 10             	add    esp,0x10
c0015776:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015779:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001577c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015781:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015783:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015786:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015789:	81 c3 82 00 00 00    	add    ebx,0x82
c001578f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015795:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015798:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001579b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00157a1:	50                   	push   eax
c00157a2:	50                   	push   eax
c00157a3:	53                   	push   ebx
c00157a4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00157a7:	05 a8 0f 00 00       	add    eax,0xfa8
c00157ac:	50                   	push   eax
c00157ad:	e8 8e af fe ff       	call   c0000740 <strcpy>
c00157b2:	83 c4 10             	add    esp,0x10
c00157b5:	31 c0                	xor    eax,eax
c00157b7:	83 c4 0c             	add    esp,0xc
c00157ba:	31 d2                	xor    edx,edx
c00157bc:	5b                   	pop    ebx
c00157bd:	5e                   	pop    esi
c00157be:	5f                   	pop    edi
c00157bf:	5d                   	pop    ebp
c00157c0:	c3                   	ret    

c00157c1 <Sys::loadDLL(regs*)>:
c00157c1:	56                   	push   esi
c00157c2:	53                   	push   ebx
c00157c3:	31 d2                	xor    edx,edx
c00157c5:	51                   	push   ecx
c00157c6:	b8 01 00 00 00       	mov    eax,0x1
c00157cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157cf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00157d3:	0f 84 8c 00 00 00    	je     c0015865 <Sys::loadDLL(regs*)+0xa4>
c00157d9:	83 ec 0c             	sub    esp,0xc
c00157dc:	68 14 01 00 00       	push   0x114
c00157e1:	e8 dd 41 ff ff       	call   c00099c3 <malloc>
c00157e6:	83 c4 0c             	add    esp,0xc
c00157e9:	89 c3                	mov    ebx,eax
c00157eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157f0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00157f3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00157f6:	53                   	push   ebx
c00157f7:	e8 22 7a ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00157fc:	83 c4 10             	add    esp,0x10
c00157ff:	31 d2                	xor    edx,edx
c0015801:	b8 02 00 00 00       	mov    eax,0x2
c0015806:	85 db                	test   ebx,ebx
c0015808:	74 5b                	je     c0015865 <Sys::loadDLL(regs*)+0xa4>
c001580a:	83 ec 0c             	sub    esp,0xc
c001580d:	53                   	push   ebx
c001580e:	e8 1b 7d ff ff       	call   c000d52e <File::exists()>
c0015813:	83 c4 10             	add    esp,0x10
c0015816:	84 c0                	test   al,al
c0015818:	8b 03                	mov    eax,DWORD PTR [ebx]
c001581a:	75 11                	jne    c001582d <Sys::loadDLL(regs*)+0x6c>
c001581c:	83 ec 0c             	sub    esp,0xc
c001581f:	53                   	push   ebx
c0015820:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015823:	83 c4 10             	add    esp,0x10
c0015826:	b8 03 00 00 00       	mov    eax,0x3
c001582b:	eb 36                	jmp    c0015863 <Sys::loadDLL(regs*)+0xa2>
c001582d:	83 ec 0c             	sub    esp,0xc
c0015830:	53                   	push   ebx
c0015831:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015834:	58                   	pop    eax
c0015835:	5a                   	pop    edx
c0015836:	6a 00                	push   0x0
c0015838:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001583b:	e8 0a 22 00 00       	call   c0017a4a <Thr::loadDLL(char const*, bool)>
c0015840:	83 c4 10             	add    esp,0x10
c0015843:	89 c1                	mov    ecx,eax
c0015845:	31 d2                	xor    edx,edx
c0015847:	b8 04 00 00 00       	mov    eax,0x4
c001584c:	85 c9                	test   ecx,ecx
c001584e:	74 15                	je     c0015865 <Sys::loadDLL(regs*)+0xa4>
c0015850:	53                   	push   ebx
c0015851:	53                   	push   ebx
c0015852:	ff 35 08 7b 02 c0    	push   DWORD PTR ds:0xc0027b08
c0015858:	51                   	push   ecx
c0015859:	e8 1d 24 00 00       	call   c0017c7b <Thr::executeDLL(unsigned long, void*)>
c001585e:	83 c4 10             	add    esp,0x10
c0015861:	31 c0                	xor    eax,eax
c0015863:	31 d2                	xor    edx,edx
c0015865:	59                   	pop    ecx
c0015866:	5b                   	pop    ebx
c0015867:	5e                   	pop    esi
c0015868:	c3                   	ret    

c0015869 <Sys::read(regs*)>:
c0015869:	57                   	push   edi
c001586a:	56                   	push   esi
c001586b:	53                   	push   ebx
c001586c:	83 ec 10             	sub    esp,0x10
c001586f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015873:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015876:	83 f8 02             	cmp    eax,0x2
c0015879:	77 10                	ja     c001588b <Sys::read(regs*)+0x22>
c001587b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015880:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015883:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015889:	eb 0e                	jmp    c0015899 <Sys::read(regs*)+0x30>
c001588b:	83 ec 0c             	sub    esp,0xc
c001588e:	50                   	push   eax
c001588f:	e8 a3 5f ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015894:	83 c4 10             	add    esp,0x10
c0015897:	89 c1                	mov    ecx,eax
c0015899:	83 c8 ff             	or     eax,0xffffffff
c001589c:	85 c9                	test   ecx,ecx
c001589e:	89 c2                	mov    edx,eax
c00158a0:	74 28                	je     c00158ca <Sys::read(regs*)+0x61>
c00158a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00158aa:	31 ff                	xor    edi,edi
c00158ac:	83 ec 0c             	sub    esp,0xc
c00158af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00158b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00158b5:	52                   	push   edx
c00158b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00158b9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00158bc:	57                   	push   edi
c00158bd:	56                   	push   esi
c00158be:	51                   	push   ecx
c00158bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00158c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00158c6:	83 c4 20             	add    esp,0x20
c00158c9:	99                   	cdq    
c00158ca:	83 c4 10             	add    esp,0x10
c00158cd:	5b                   	pop    ebx
c00158ce:	5e                   	pop    esi
c00158cf:	5f                   	pop    edi
c00158d0:	c3                   	ret    

c00158d1 <Sys::sbrk(regs*)>:
c00158d1:	56                   	push   esi
c00158d2:	53                   	push   ebx
c00158d3:	50                   	push   eax
c00158d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00158dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158e0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00158e3:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00158e9:	85 db                	test   ebx,ebx
c00158eb:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00158ee:	74 02                	je     c00158f2 <Sys::sbrk(regs*)+0x21>
c00158f0:	79 06                	jns    c00158f8 <Sys::sbrk(regs*)+0x27>
c00158f2:	89 f0                	mov    eax,esi
c00158f4:	31 d2                	xor    edx,edx
c00158f6:	eb 2a                	jmp    c0015922 <Sys::sbrk(regs*)+0x51>
c00158f8:	83 c8 ff             	or     eax,0xffffffff
c00158fb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015901:	89 c2                	mov    edx,eax
c0015903:	77 1d                	ja     c0015922 <Sys::sbrk(regs*)+0x51>
c0015905:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001590b:	50                   	push   eax
c001590c:	c1 ea 0c             	shr    edx,0xc
c001590f:	68 07 0c 00 00       	push   0xc07
c0015914:	52                   	push   edx
c0015915:	51                   	push   ecx
c0015916:	e8 1b 68 ff ff       	call   c000c136 <VAS::allocatePages(int, int)>
c001591b:	89 f0                	mov    eax,esi
c001591d:	31 d2                	xor    edx,edx
c001591f:	83 c4 10             	add    esp,0x10
c0015922:	59                   	pop    ecx
c0015923:	5b                   	pop    ebx
c0015924:	5e                   	pop    esi
c0015925:	c3                   	ret    

c0015926 <Sys::setCwd(regs*)>:
c0015926:	83 ec 14             	sub    esp,0x14
c0015929:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001592d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015930:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015935:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015938:	e8 90 7c ff ff       	call   c000d5cd <Fs::setcwd(Process*, char*)>
c001593d:	83 c4 1c             	add    esp,0x1c
c0015940:	99                   	cdq    
c0015941:	c3                   	ret    

c0015942 <Sys::setTime(regs*)>:
c0015942:	55                   	push   ebp
c0015943:	31 c9                	xor    ecx,ecx
c0015945:	57                   	push   edi
c0015946:	bd 0c 00 00 00       	mov    ebp,0xc
c001594b:	56                   	push   esi
c001594c:	53                   	push   ebx
c001594d:	31 db                	xor    ebx,ebx
c001594f:	83 ec 10             	sub    esp,0x10
c0015952:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015956:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015959:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001595c:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001595f:	89 c2                	mov    edx,eax
c0015961:	66 81 ef 6c 07       	sub    di,0x76c
c0015966:	83 e2 1f             	and    edx,0x1f
c0015969:	c1 e7 10             	shl    edi,0x10
c001596c:	42                   	inc    edx
c001596d:	c1 e8 05             	shr    eax,0x5
c0015970:	88 d1                	mov    cl,dl
c0015972:	31 d2                	xor    edx,edx
c0015974:	f7 f5                	div    ebp
c0015976:	89 dd                	mov    ebp,ebx
c0015978:	88 d5                	mov    ch,dl
c001597a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015980:	0f b7 c1             	movzx  eax,cx
c0015983:	31 d2                	xor    edx,edx
c0015985:	09 f8                	or     eax,edi
c0015987:	bf 3c 00 00 00       	mov    edi,0x3c
c001598c:	89 c1                	mov    ecx,eax
c001598e:	89 f0                	mov    eax,esi
c0015990:	f7 f7                	div    edi
c0015992:	c1 e2 10             	shl    edx,0x10
c0015995:	09 d5                	or     ebp,edx
c0015997:	31 d2                	xor    edx,edx
c0015999:	89 eb                	mov    ebx,ebp
c001599b:	f7 f7                	div    edi
c001599d:	bf 10 0e 00 00       	mov    edi,0xe10
c00159a2:	88 d7                	mov    bh,dl
c00159a4:	89 f0                	mov    eax,esi
c00159a6:	31 d2                	xor    edx,edx
c00159a8:	f7 f7                	div    edi
c00159aa:	bf 18 00 00 00       	mov    edi,0x18
c00159af:	31 d2                	xor    edx,edx
c00159b1:	f7 f7                	div    edi
c00159b3:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c00159b8:	88 d3                	mov    bl,dl
c00159ba:	53                   	push   ebx
c00159bb:	51                   	push   ecx
c00159bc:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00159c2:	e8 53 84 ff ff       	call   c000de1a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00159c7:	83 c4 1c             	add    esp,0x1c
c00159ca:	83 f0 01             	xor    eax,0x1
c00159cd:	5b                   	pop    ebx
c00159ce:	0f b6 c0             	movzx  eax,al
c00159d1:	5e                   	pop    esi
c00159d2:	31 d2                	xor    edx,edx
c00159d4:	5f                   	pop    edi
c00159d5:	5d                   	pop    ebp
c00159d6:	c3                   	ret    

c00159d7 <Sys::timezone(regs*)>:
c00159d7:	53                   	push   ebx
c00159d8:	83 ec 08             	sub    esp,0x8
c00159db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159df:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00159e3:	75 17                	jne    c00159fc <Sys::timezone(regs*)+0x25>
c00159e5:	83 ec 0c             	sub    esp,0xc
c00159e8:	68 21 59 02 c0       	push   0xc0025921
c00159ed:	e8 c1 72 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00159f2:	83 c8 ff             	or     eax,0xffffffff
c00159f5:	83 c4 10             	add    esp,0x10
c00159f8:	89 c2                	mov    edx,eax
c00159fa:	eb 20                	jmp    c0015a1c <Sys::timezone(regs*)+0x45>
c00159fc:	83 ec 0c             	sub    esp,0xc
c00159ff:	68 36 59 02 c0       	push   0xc0025936
c0015a04:	e8 aa 72 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0015a09:	58                   	pop    eax
c0015a0a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015a0d:	e8 6a 81 ff ff       	call   c000db7c <User::loadClockSettings(int)>
c0015a12:	83 c4 10             	add    esp,0x10
c0015a15:	b8 01 00 00 00       	mov    eax,0x1
c0015a1a:	31 d2                	xor    edx,edx
c0015a1c:	83 c4 08             	add    esp,0x8
c0015a1f:	5b                   	pop    ebx
c0015a20:	c3                   	ret    

c0015a21 <Sys::write(regs*)>:
c0015a21:	57                   	push   edi
c0015a22:	56                   	push   esi
c0015a23:	53                   	push   ebx
c0015a24:	83 ec 10             	sub    esp,0x10
c0015a27:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015a2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a2e:	83 f8 02             	cmp    eax,0x2
c0015a31:	77 10                	ja     c0015a43 <Sys::write(regs*)+0x22>
c0015a33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a3b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015a41:	eb 0e                	jmp    c0015a51 <Sys::write(regs*)+0x30>
c0015a43:	83 ec 0c             	sub    esp,0xc
c0015a46:	50                   	push   eax
c0015a47:	e8 eb 5d ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015a4c:	83 c4 10             	add    esp,0x10
c0015a4f:	89 c1                	mov    ecx,eax
c0015a51:	83 c8 ff             	or     eax,0xffffffff
c0015a54:	85 c9                	test   ecx,ecx
c0015a56:	89 c2                	mov    edx,eax
c0015a58:	74 28                	je     c0015a82 <Sys::write(regs*)+0x61>
c0015a5a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a62:	31 ff                	xor    edi,edi
c0015a64:	83 ec 0c             	sub    esp,0xc
c0015a67:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015a69:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015a6d:	52                   	push   edx
c0015a6e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a71:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015a74:	57                   	push   edi
c0015a75:	56                   	push   esi
c0015a76:	51                   	push   ecx
c0015a77:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015a7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a7e:	83 c4 20             	add    esp,0x20
c0015a81:	99                   	cdq    
c0015a82:	83 c4 10             	add    esp,0x10
c0015a85:	5b                   	pop    ebx
c0015a86:	5e                   	pop    esi
c0015a87:	5f                   	pop    edi
c0015a88:	c3                   	ret    

c0015a89 <Sys::wsbe(regs*)>:
c0015a89:	57                   	push   edi
c0015a8a:	b9 0b 00 00 00       	mov    ecx,0xb
c0015a8f:	56                   	push   esi
c0015a90:	be 75 59 02 c0       	mov    esi,0xc0025975
c0015a95:	53                   	push   ebx
c0015a96:	83 ec 30             	sub    esp,0x30
c0015a99:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015a9d:	fc                   	cld    
c0015a9e:	83 ec 0c             	sub    esp,0xc
c0015aa1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015aa3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015aa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015aaf:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015ab5:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ab7:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015aba:	57                   	push   edi
c0015abb:	e8 e0 ab fe ff       	call   c00006a0 <strlen>
c0015ac0:	5a                   	pop    edx
c0015ac1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015ac5:	52                   	push   edx
c0015ac6:	31 d2                	xor    edx,edx
c0015ac8:	57                   	push   edi
c0015ac9:	52                   	push   edx
c0015aca:	50                   	push   eax
c0015acb:	56                   	push   esi
c0015acc:	ff d3                	call   ebx
c0015ace:	83 c4 14             	add    esp,0x14
c0015ad1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015ad5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015ad8:	e8 6b 32 00 00       	call   c0018d48 <terminateTask(int)>
c0015add:	83 c4 40             	add    esp,0x40
c0015ae0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015ae5:	5b                   	pop    ebx
c0015ae6:	31 d2                	xor    edx,edx
c0015ae8:	5e                   	pop    esi
c0015ae9:	5f                   	pop    edi
c0015aea:	c3                   	ret    

c0015aeb <Sys::yield(regs*)>:
c0015aeb:	83 ec 0c             	sub    esp,0xc
c0015aee:	fa                   	cli    
c0015aef:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0015af5:	e8 36 29 00 00       	call   c0018430 <schedule()>
c0015afa:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0015aff:	48                   	dec    eax
c0015b00:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0015b05:	75 01                	jne    c0015b08 <Sys::yield(regs*)+0x1d>
c0015b07:	fb                   	sti    
c0015b08:	8b 15 2c 81 02 c0    	mov    edx,DWORD PTR ds:0xc002812c
c0015b0e:	83 c4 0c             	add    esp,0xc
c0015b11:	89 d0                	mov    eax,edx
c0015b13:	c1 ea 11             	shr    edx,0x11
c0015b16:	c1 e0 07             	shl    eax,0x7
c0015b19:	25 80 30 0f 00       	and    eax,0xf3080
c0015b1e:	31 d0                	xor    eax,edx
c0015b20:	31 d2                	xor    edx,edx
c0015b22:	c3                   	ret    

c0015b23 <sysCallSeekDir(regs*)>:
c0015b23:	31 c0                	xor    eax,eax
c0015b25:	31 d2                	xor    edx,edx
c0015b27:	c3                   	ret    

c0015b28 <sysCallTellDir(regs*)>:
c0015b28:	31 c0                	xor    eax,eax
c0015b2a:	31 d2                	xor    edx,edx
c0015b2c:	c3                   	ret    

c0015b2d <sysCallVerify(regs*)>:
c0015b2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b31:	31 d2                	xor    edx,edx
c0015b33:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b36:	c3                   	ret    

c0015b37 <sysCallGetArgc(regs*)>:
c0015b37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b3c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b3f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015b45:	99                   	cdq    
c0015b46:	c3                   	ret    

c0015b47 <sysFormatDisk(regs*)>:
c0015b47:	56                   	push   esi
c0015b48:	53                   	push   ebx
c0015b49:	53                   	push   ebx
c0015b4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b4e:	8b 1d 34 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c34
c0015b54:	eb 25                	jmp    c0015b7b <sysFormatDisk(regs*)+0x34>
c0015b56:	83 ec 0c             	sub    esp,0xc
c0015b59:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015b5c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015b5e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015b61:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015b64:	50                   	push   eax
c0015b65:	ff 34 85 c0 80 02 c0 	push   DWORD PTR [eax*4-0x3ffd7f40]
c0015b6c:	53                   	push   ebx
c0015b6d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015b70:	83 c4 20             	add    esp,0x20
c0015b73:	83 f8 08             	cmp    eax,0x8
c0015b76:	75 12                	jne    c0015b8a <sysFormatDisk(regs*)+0x43>
c0015b78:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015b7b:	85 db                	test   ebx,ebx
c0015b7d:	75 d7                	jne    c0015b56 <sysFormatDisk(regs*)+0xf>
c0015b7f:	59                   	pop    ecx
c0015b80:	b8 03 00 00 00       	mov    eax,0x3
c0015b85:	31 d2                	xor    edx,edx
c0015b87:	5b                   	pop    ebx
c0015b88:	5e                   	pop    esi
c0015b89:	c3                   	ret    
c0015b8a:	85 c0                	test   eax,eax
c0015b8c:	74 1b                	je     c0015ba9 <sysFormatDisk(regs*)+0x62>
c0015b8e:	83 f8 09             	cmp    eax,0x9
c0015b91:	74 0b                	je     c0015b9e <sysFormatDisk(regs*)+0x57>
c0015b93:	59                   	pop    ecx
c0015b94:	b8 02 00 00 00       	mov    eax,0x2
c0015b99:	31 d2                	xor    edx,edx
c0015b9b:	5b                   	pop    ebx
c0015b9c:	5e                   	pop    esi
c0015b9d:	c3                   	ret    
c0015b9e:	59                   	pop    ecx
c0015b9f:	b8 01 00 00 00       	mov    eax,0x1
c0015ba4:	31 d2                	xor    edx,edx
c0015ba6:	5b                   	pop    ebx
c0015ba7:	5e                   	pop    esi
c0015ba8:	c3                   	ret    
c0015ba9:	59                   	pop    ecx
c0015baa:	31 c0                	xor    eax,eax
c0015bac:	31 d2                	xor    edx,edx
c0015bae:	5b                   	pop    ebx
c0015baf:	5e                   	pop    esi
c0015bb0:	c3                   	ret    

c0015bb1 <sysSetDiskVolumeLabel(regs*)>:
c0015bb1:	56                   	push   esi
c0015bb2:	53                   	push   ebx
c0015bb3:	53                   	push   ebx
c0015bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015bb8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015bbb:	83 f8 19             	cmp    eax,0x19
c0015bbe:	77 2d                	ja     c0015bed <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015bc0:	8b 0c 85 c0 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7f40]
c0015bc7:	85 c9                	test   ecx,ecx
c0015bc9:	74 22                	je     c0015bed <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015bcb:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015bce:	85 db                	test   ebx,ebx
c0015bd0:	74 1b                	je     c0015bed <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015bd2:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015bd8:	85 d2                	test   edx,edx
c0015bda:	74 11                	je     c0015bed <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015bdc:	8b 32                	mov    esi,DWORD PTR [edx]
c0015bde:	53                   	push   ebx
c0015bdf:	50                   	push   eax
c0015be0:	51                   	push   ecx
c0015be1:	52                   	push   edx
c0015be2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	99                   	cdq    
c0015be9:	59                   	pop    ecx
c0015bea:	5b                   	pop    ebx
c0015beb:	5e                   	pop    esi
c0015bec:	c3                   	ret    
c0015bed:	59                   	pop    ecx
c0015bee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015bf3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bf8:	5b                   	pop    ebx
c0015bf9:	5e                   	pop    esi
c0015bfa:	c3                   	ret    

c0015bfb <sysGetDiskVolumeLabel(regs*)>:
c0015bfb:	57                   	push   edi
c0015bfc:	56                   	push   esi
c0015bfd:	53                   	push   ebx
c0015bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c02:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015c05:	83 fa 19             	cmp    edx,0x19
c0015c08:	77 38                	ja     c0015c42 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015c0a:	8b 0c 95 c0 80 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7f40]
c0015c11:	85 c9                	test   ecx,ecx
c0015c13:	74 2d                	je     c0015c42 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015c15:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015c18:	85 db                	test   ebx,ebx
c0015c1a:	74 26                	je     c0015c42 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015c1c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015c1f:	85 f6                	test   esi,esi
c0015c21:	74 1f                	je     c0015c42 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015c23:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015c29:	85 c0                	test   eax,eax
c0015c2b:	74 15                	je     c0015c42 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015c2d:	83 ec 0c             	sub    esp,0xc
c0015c30:	8b 38                	mov    edi,DWORD PTR [eax]
c0015c32:	56                   	push   esi
c0015c33:	53                   	push   ebx
c0015c34:	52                   	push   edx
c0015c35:	51                   	push   ecx
c0015c36:	50                   	push   eax
c0015c37:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015c3a:	83 c4 20             	add    esp,0x20
c0015c3d:	99                   	cdq    
c0015c3e:	5b                   	pop    ebx
c0015c3f:	5e                   	pop    esi
c0015c40:	5f                   	pop    edi
c0015c41:	c3                   	ret    
c0015c42:	5b                   	pop    ebx
c0015c43:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015c48:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c4d:	5e                   	pop    esi
c0015c4e:	5f                   	pop    edi
c0015c4f:	c3                   	ret    

c0015c50 <sysShutdown(regs*)>:
c0015c50:	83 ec 0c             	sub    esp,0xc
c0015c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c57:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015c5a:	85 c0                	test   eax,eax
c0015c5c:	74 18                	je     c0015c76 <sysShutdown(regs*)+0x26>
c0015c5e:	83 f8 01             	cmp    eax,0x1
c0015c61:	74 38                	je     c0015c9b <sysShutdown(regs*)+0x4b>
c0015c63:	83 f8 02             	cmp    eax,0x2
c0015c66:	74 24                	je     c0015c8c <sysShutdown(regs*)+0x3c>
c0015c68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c6d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c72:	83 c4 0c             	add    esp,0xc
c0015c75:	c3                   	ret    
c0015c76:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0015c7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c7d:	6a 00                	push   0x0
c0015c7f:	6a 00                	push   0x0
c0015c81:	6a 00                	push   0x0
c0015c83:	50                   	push   eax
c0015c84:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c87:	83 c4 10             	add    esp,0x10
c0015c8a:	eb dc                	jmp    c0015c68 <sysShutdown(regs*)+0x18>
c0015c8c:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0015c91:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c93:	6a 00                	push   0x0
c0015c95:	6a 00                	push   0x0
c0015c97:	6a 01                	push   0x1
c0015c99:	eb e8                	jmp    c0015c83 <sysShutdown(regs*)+0x33>
c0015c9b:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0015ca0:	85 c0                	test   eax,eax
c0015ca2:	74 02                	je     c0015ca6 <sysShutdown(regs*)+0x56>
c0015ca4:	ff d0                	call   eax
c0015ca6:	31 c0                	xor    eax,eax
c0015ca8:	31 d2                	xor    edx,edx
c0015caa:	83 c4 0c             	add    esp,0xc
c0015cad:	c3                   	ret    

c0015cae <sysCallRealpath(regs*)>:
c0015cae:	83 ec 0c             	sub    esp,0xc
c0015cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cb5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015cb8:	85 d2                	test   edx,edx
c0015cba:	74 07                	je     c0015cc3 <sysCallRealpath(regs*)+0x15>
c0015cbc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015cbf:	85 c0                	test   eax,eax
c0015cc1:	75 0b                	jne    c0015cce <sysCallRealpath(regs*)+0x20>
c0015cc3:	b8 01 00 00 00       	mov    eax,0x1
c0015cc8:	31 d2                	xor    edx,edx
c0015cca:	83 c4 0c             	add    esp,0xc
c0015ccd:	c3                   	ret    
c0015cce:	51                   	push   ecx
c0015ccf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015cd5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015cd8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015cde:	51                   	push   ecx
c0015cdf:	52                   	push   edx
c0015ce0:	50                   	push   eax
c0015ce1:	e8 8e 73 ff ff       	call   c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	31 c0                	xor    eax,eax
c0015ceb:	31 d2                	xor    edx,edx
c0015ced:	83 c4 0c             	add    esp,0xc
c0015cf0:	c3                   	ret    

c0015cf1 <sysCallReadDir(regs*)>:
c0015cf1:	53                   	push   ebx
c0015cf2:	83 ec 18             	sub    esp,0x18
c0015cf5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015cf9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015cfc:	83 f8 02             	cmp    eax,0x2
c0015cff:	76 60                	jbe    c0015d61 <sysCallReadDir(regs*)+0x70>
c0015d01:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015d08:	77 48                	ja     c0015d52 <sysCallReadDir(regs*)+0x61>
c0015d0a:	83 ec 0c             	sub    esp,0xc
c0015d0d:	50                   	push   eax
c0015d0e:	e8 24 5b ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015d13:	83 c4 10             	add    esp,0x10
c0015d16:	85 c0                	test   eax,eax
c0015d18:	74 38                	je     c0015d52 <sysCallReadDir(regs*)+0x61>
c0015d1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015d22:	83 ec 0c             	sub    esp,0xc
c0015d25:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d27:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015d2b:	51                   	push   ecx
c0015d2c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015d2f:	6a 00                	push   0x0
c0015d31:	68 10 01 00 00       	push   0x110
c0015d36:	50                   	push   eax
c0015d37:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015d3a:	83 c4 20             	add    esp,0x20
c0015d3d:	85 c0                	test   eax,eax
c0015d3f:	74 29                	je     c0015d6a <sysCallReadDir(regs*)+0x79>
c0015d41:	83 f8 07             	cmp    eax,0x7
c0015d44:	74 1b                	je     c0015d61 <sysCallReadDir(regs*)+0x70>
c0015d46:	b8 02 00 00 00       	mov    eax,0x2
c0015d4b:	31 d2                	xor    edx,edx
c0015d4d:	83 c4 18             	add    esp,0x18
c0015d50:	5b                   	pop    ebx
c0015d51:	c3                   	ret    
c0015d52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d57:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d5c:	83 c4 18             	add    esp,0x18
c0015d5f:	5b                   	pop    ebx
c0015d60:	c3                   	ret    
c0015d61:	b8 01 00 00 00       	mov    eax,0x1
c0015d66:	31 d2                	xor    edx,edx
c0015d68:	eb e3                	jmp    c0015d4d <sysCallReadDir(regs*)+0x5c>
c0015d6a:	31 c0                	xor    eax,eax
c0015d6c:	31 d2                	xor    edx,edx
c0015d6e:	eb dd                	jmp    c0015d4d <sysCallReadDir(regs*)+0x5c>

c0015d70 <sysCallIsATTY(regs*)>:
c0015d70:	83 ec 0c             	sub    esp,0xc
c0015d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d77:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d7a:	83 f8 02             	cmp    eax,0x2
c0015d7d:	76 07                	jbe    c0015d86 <sysCallIsATTY(regs*)+0x16>
c0015d7f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015d84:	75 26                	jne    c0015dac <sysCallIsATTY(regs*)+0x3c>
c0015d86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d8e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d94:	85 c0                	test   eax,eax
c0015d96:	74 24                	je     c0015dbc <sysCallIsATTY(regs*)+0x4c>
c0015d98:	83 ec 0c             	sub    esp,0xc
c0015d9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d9d:	50                   	push   eax
c0015d9e:	ff 12                	call   DWORD PTR [edx]
c0015da0:	31 d2                	xor    edx,edx
c0015da2:	0f b6 c0             	movzx  eax,al
c0015da5:	83 c4 10             	add    esp,0x10
c0015da8:	83 c4 0c             	add    esp,0xc
c0015dab:	c3                   	ret    
c0015dac:	83 ec 0c             	sub    esp,0xc
c0015daf:	50                   	push   eax
c0015db0:	e8 82 5a ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015db5:	83 c4 10             	add    esp,0x10
c0015db8:	85 c0                	test   eax,eax
c0015dba:	75 dc                	jne    c0015d98 <sysCallIsATTY(regs*)+0x28>
c0015dbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dc1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015dc6:	83 c4 0c             	add    esp,0xc
c0015dc9:	c3                   	ret    

c0015dca <sysCallSeek(regs*)>:
c0015dca:	53                   	push   ebx
c0015dcb:	83 ec 08             	sub    esp,0x8
c0015dce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015dd2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015dd5:	8d 50 fd             	lea    edx,[eax-0x3]
c0015dd8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015dde:	77 32                	ja     c0015e12 <sysCallSeek(regs*)+0x48>
c0015de0:	83 ec 0c             	sub    esp,0xc
c0015de3:	50                   	push   eax
c0015de4:	e8 4e 5a ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015de9:	83 c4 0c             	add    esp,0xc
c0015dec:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015def:	31 db                	xor    ebx,ebx
c0015df1:	53                   	push   ebx
c0015df2:	51                   	push   ecx
c0015df3:	50                   	push   eax
c0015df4:	e8 85 75 ff ff       	call   c000d37e <File::seek(unsigned long long)>
c0015df9:	83 c4 10             	add    esp,0x10
c0015dfc:	85 c0                	test   eax,eax
c0015dfe:	0f 95 c0             	setne  al
c0015e01:	31 d2                	xor    edx,edx
c0015e03:	0f b6 c0             	movzx  eax,al
c0015e06:	f7 d8                	neg    eax
c0015e08:	83 d2 00             	adc    edx,0x0
c0015e0b:	83 c4 08             	add    esp,0x8
c0015e0e:	f7 da                	neg    edx
c0015e10:	5b                   	pop    ebx
c0015e11:	c3                   	ret    
c0015e12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e17:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e1c:	83 c4 08             	add    esp,0x8
c0015e1f:	5b                   	pop    ebx
c0015e20:	c3                   	ret    

c0015e21 <sysCallTell(regs*)>:
c0015e21:	53                   	push   ebx
c0015e22:	83 ec 08             	sub    esp,0x8
c0015e25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e2c:	83 f8 02             	cmp    eax,0x2
c0015e2f:	76 4d                	jbe    c0015e7e <sysCallTell(regs*)+0x5d>
c0015e31:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015e36:	76 19                	jbe    c0015e51 <sysCallTell(regs*)+0x30>
c0015e38:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015e3b:	31 d2                	xor    edx,edx
c0015e3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e4a:	31 c0                	xor    eax,eax
c0015e4c:	83 c4 08             	add    esp,0x8
c0015e4f:	5b                   	pop    ebx
c0015e50:	c3                   	ret    
c0015e51:	83 ec 0c             	sub    esp,0xc
c0015e54:	50                   	push   eax
c0015e55:	e8 dd 59 ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015e5a:	5a                   	pop    edx
c0015e5b:	59                   	pop    ecx
c0015e5c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015e5f:	50                   	push   eax
c0015e60:	e8 6f 75 ff ff       	call   c000d3d4 <File::tell(unsigned long long*)>
c0015e65:	83 c4 10             	add    esp,0x10
c0015e68:	85 c0                	test   eax,eax
c0015e6a:	0f 95 c0             	setne  al
c0015e6d:	31 d2                	xor    edx,edx
c0015e6f:	0f b6 c0             	movzx  eax,al
c0015e72:	f7 d8                	neg    eax
c0015e74:	83 d2 00             	adc    edx,0x0
c0015e77:	83 c4 08             	add    esp,0x8
c0015e7a:	f7 da                	neg    edx
c0015e7c:	5b                   	pop    ebx
c0015e7d:	c3                   	ret    
c0015e7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e83:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e88:	83 c4 08             	add    esp,0x8
c0015e8b:	5b                   	pop    ebx
c0015e8c:	c3                   	ret    

c0015e8d <sysCallSize(regs*)>:
c0015e8d:	53                   	push   ebx
c0015e8e:	83 ec 18             	sub    esp,0x18
c0015e91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015e95:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e98:	83 f8 02             	cmp    eax,0x2
c0015e9b:	76 53                	jbe    c0015ef0 <sysCallSize(regs*)+0x63>
c0015e9d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015ea2:	76 19                	jbe    c0015ebd <sysCallSize(regs*)+0x30>
c0015ea4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015ea7:	31 d2                	xor    edx,edx
c0015ea9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015eaf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015eb6:	31 c0                	xor    eax,eax
c0015eb8:	83 c4 18             	add    esp,0x18
c0015ebb:	5b                   	pop    ebx
c0015ebc:	c3                   	ret    
c0015ebd:	83 ec 0c             	sub    esp,0xc
c0015ec0:	50                   	push   eax
c0015ec1:	e8 71 59 ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015ec6:	83 c4 0c             	add    esp,0xc
c0015ec9:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015ecd:	52                   	push   edx
c0015ece:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015ed1:	50                   	push   eax
c0015ed2:	e8 95 76 ff ff       	call   c000d56c <File::stat(unsigned long long*, bool*)>
c0015ed7:	83 c4 10             	add    esp,0x10
c0015eda:	85 c0                	test   eax,eax
c0015edc:	0f 95 c0             	setne  al
c0015edf:	31 d2                	xor    edx,edx
c0015ee1:	0f b6 c0             	movzx  eax,al
c0015ee4:	f7 d8                	neg    eax
c0015ee6:	83 d2 00             	adc    edx,0x0
c0015ee9:	83 c4 18             	add    esp,0x18
c0015eec:	f7 da                	neg    edx
c0015eee:	5b                   	pop    ebx
c0015eef:	c3                   	ret    
c0015ef0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ef5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015efa:	83 c4 18             	add    esp,0x18
c0015efd:	5b                   	pop    ebx
c0015efe:	c3                   	ret    

c0015eff <sysCallSizeFromFilename(regs*)>:
c0015eff:	57                   	push   edi
c0015f00:	56                   	push   esi
c0015f01:	53                   	push   ebx
c0015f02:	83 ec 20             	sub    esp,0x20
c0015f05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015f09:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015f0c:	83 fb 02             	cmp    ebx,0x2
c0015f0f:	0f 86 88 00 00 00    	jbe    c0015f9d <sysCallSizeFromFilename(regs*)+0x9e>
c0015f15:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015f1b:	76 1b                	jbe    c0015f38 <sysCallSizeFromFilename(regs*)+0x39>
c0015f1d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015f20:	31 d2                	xor    edx,edx
c0015f22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015f28:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015f2f:	83 c4 20             	add    esp,0x20
c0015f32:	31 c0                	xor    eax,eax
c0015f34:	5b                   	pop    ebx
c0015f35:	5e                   	pop    esi
c0015f36:	5f                   	pop    edi
c0015f37:	c3                   	ret    
c0015f38:	83 ec 0c             	sub    esp,0xc
c0015f3b:	68 14 01 00 00       	push   0x114
c0015f40:	e8 7e 3a ff ff       	call   c00099c3 <malloc>
c0015f45:	83 c4 0c             	add    esp,0xc
c0015f48:	89 c7                	mov    edi,eax
c0015f4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f4f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015f52:	53                   	push   ebx
c0015f53:	57                   	push   edi
c0015f54:	e8 c5 72 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0015f59:	83 c4 0c             	add    esp,0xc
c0015f5c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015f60:	50                   	push   eax
c0015f61:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015f64:	57                   	push   edi
c0015f65:	e8 02 76 ff ff       	call   c000d56c <File::stat(unsigned long long*, bool*)>
c0015f6a:	83 c4 10             	add    esp,0x10
c0015f6d:	85 ff                	test   edi,edi
c0015f6f:	74 14                	je     c0015f85 <sysCallSizeFromFilename(regs*)+0x86>
c0015f71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f75:	8b 17                	mov    edx,DWORD PTR [edi]
c0015f77:	83 ec 0c             	sub    esp,0xc
c0015f7a:	57                   	push   edi
c0015f7b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015f7e:	83 c4 10             	add    esp,0x10
c0015f81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f85:	85 c0                	test   eax,eax
c0015f87:	0f 95 c0             	setne  al
c0015f8a:	31 d2                	xor    edx,edx
c0015f8c:	0f b6 c0             	movzx  eax,al
c0015f8f:	f7 d8                	neg    eax
c0015f91:	83 d2 00             	adc    edx,0x0
c0015f94:	83 c4 20             	add    esp,0x20
c0015f97:	f7 da                	neg    edx
c0015f99:	5b                   	pop    ebx
c0015f9a:	5e                   	pop    esi
c0015f9b:	5f                   	pop    edi
c0015f9c:	c3                   	ret    
c0015f9d:	83 c4 20             	add    esp,0x20
c0015fa0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fa5:	5b                   	pop    ebx
c0015fa6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015fab:	5e                   	pop    esi
c0015fac:	5f                   	pop    edi
c0015fad:	c3                   	ret    

c0015fae <sysCallClose(regs*)>:
c0015fae:	53                   	push   ebx
c0015faf:	83 ec 08             	sub    esp,0x8
c0015fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015fb9:	83 f8 02             	cmp    eax,0x2
c0015fbc:	76 41                	jbe    c0015fff <sysCallClose(regs*)+0x51>
c0015fbe:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015fc4:	83 fa 01             	cmp    edx,0x1
c0015fc7:	76 2d                	jbe    c0015ff6 <sysCallClose(regs*)+0x48>
c0015fc9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015fce:	77 2f                	ja     c0015fff <sysCallClose(regs*)+0x51>
c0015fd0:	83 ec 0c             	sub    esp,0xc
c0015fd3:	50                   	push   eax
c0015fd4:	e8 5e 58 ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015fd9:	89 c3                	mov    ebx,eax
c0015fdb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fde:	e8 3b 73 ff ff       	call   c000d31e <File::close()>
c0015fe3:	83 c4 10             	add    esp,0x10
c0015fe6:	85 db                	test   ebx,ebx
c0015fe8:	74 0c                	je     c0015ff6 <sysCallClose(regs*)+0x48>
c0015fea:	83 ec 0c             	sub    esp,0xc
c0015fed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fef:	53                   	push   ebx
c0015ff0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ff3:	83 c4 10             	add    esp,0x10
c0015ff6:	31 c0                	xor    eax,eax
c0015ff8:	31 d2                	xor    edx,edx
c0015ffa:	83 c4 08             	add    esp,0x8
c0015ffd:	5b                   	pop    ebx
c0015ffe:	c3                   	ret    
c0015fff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016004:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016009:	83 c4 08             	add    esp,0x8
c001600c:	5b                   	pop    ebx
c001600d:	c3                   	ret    

c001600e <sysCallOpenDir(regs*)>:
c001600e:	56                   	push   esi
c001600f:	53                   	push   ebx
c0016010:	53                   	push   ebx
c0016011:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016015:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016018:	85 f6                	test   esi,esi
c001601a:	74 59                	je     c0016075 <sysCallOpenDir(regs*)+0x67>
c001601c:	83 ec 0c             	sub    esp,0xc
c001601f:	68 14 01 00 00       	push   0x114
c0016024:	e8 9a 39 ff ff       	call   c00099c3 <malloc>
c0016029:	83 c4 0c             	add    esp,0xc
c001602c:	89 c6                	mov    esi,eax
c001602e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016033:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016036:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016039:	56                   	push   esi
c001603a:	e8 c9 76 ff ff       	call   c000d708 <Directory::Directory(char const*, Process*)>
c001603f:	83 c4 10             	add    esp,0x10
c0016042:	85 f6                	test   esi,esi
c0016044:	74 2f                	je     c0016075 <sysCallOpenDir(regs*)+0x67>
c0016046:	83 ec 0c             	sub    esp,0xc
c0016049:	56                   	push   esi
c001604a:	e8 1d 77 ff ff       	call   c000d76c <Directory::open()>
c001604f:	83 c4 10             	add    esp,0x10
c0016052:	85 c0                	test   eax,eax
c0016054:	75 1f                	jne    c0016075 <sysCallOpenDir(regs*)+0x67>
c0016056:	83 ec 0c             	sub    esp,0xc
c0016059:	56                   	push   esi
c001605a:	e8 e3 54 ff ff       	call   c000b542 <UnixFile::getFileDescriptor()>
c001605f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016062:	83 c4 10             	add    esp,0x10
c0016065:	89 02                	mov    DWORD PTR [edx],eax
c0016067:	c1 f8 1f             	sar    eax,0x1f
c001606a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001606d:	31 c0                	xor    eax,eax
c001606f:	59                   	pop    ecx
c0016070:	31 d2                	xor    edx,edx
c0016072:	5b                   	pop    ebx
c0016073:	5e                   	pop    esi
c0016074:	c3                   	ret    
c0016075:	59                   	pop    ecx
c0016076:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001607b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016080:	5b                   	pop    ebx
c0016081:	5e                   	pop    esi
c0016082:	c3                   	ret    

c0016083 <sysCallCloseDir(regs*)>:
c0016083:	53                   	push   ebx
c0016084:	83 ec 08             	sub    esp,0x8
c0016087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001608b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001608e:	8d 50 fd             	lea    edx,[eax-0x3]
c0016091:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016097:	77 2f                	ja     c00160c8 <sysCallCloseDir(regs*)+0x45>
c0016099:	83 ec 0c             	sub    esp,0xc
c001609c:	50                   	push   eax
c001609d:	e8 95 57 ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c00160a2:	89 c3                	mov    ebx,eax
c00160a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00160a7:	e8 1c 77 ff ff       	call   c000d7c8 <Directory::close()>
c00160ac:	83 c4 10             	add    esp,0x10
c00160af:	85 db                	test   ebx,ebx
c00160b1:	74 0c                	je     c00160bf <sysCallCloseDir(regs*)+0x3c>
c00160b3:	83 ec 0c             	sub    esp,0xc
c00160b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160b8:	53                   	push   ebx
c00160b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160bc:	83 c4 10             	add    esp,0x10
c00160bf:	31 c0                	xor    eax,eax
c00160c1:	31 d2                	xor    edx,edx
c00160c3:	83 c4 08             	add    esp,0x8
c00160c6:	5b                   	pop    ebx
c00160c7:	c3                   	ret    
c00160c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160d2:	83 c4 08             	add    esp,0x8
c00160d5:	5b                   	pop    ebx
c00160d6:	c3                   	ret    

c00160d7 <sysCallMakeDir(regs*)>:
c00160d7:	56                   	push   esi
c00160d8:	53                   	push   ebx
c00160d9:	83 ec 10             	sub    esp,0x10
c00160dc:	68 14 01 00 00       	push   0x114
c00160e1:	e8 dd 38 ff ff       	call   c00099c3 <malloc>
c00160e6:	83 c4 0c             	add    esp,0xc
c00160e9:	89 c3                	mov    ebx,eax
c00160eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160f0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00160f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00160f7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00160fa:	53                   	push   ebx
c00160fb:	e8 08 76 ff ff       	call   c000d708 <Directory::Directory(char const*, Process*)>
c0016100:	83 c4 10             	add    esp,0x10
c0016103:	85 db                	test   ebx,ebx
c0016105:	74 32                	je     c0016139 <sysCallMakeDir(regs*)+0x62>
c0016107:	83 ec 0c             	sub    esp,0xc
c001610a:	53                   	push   ebx
c001610b:	e8 3c 78 ff ff       	call   c000d94c <Directory::create()>
c0016110:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016113:	89 c6                	mov    esi,eax
c0016115:	e8 ae 76 ff ff       	call   c000d7c8 <Directory::close()>
c001611a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001611c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001611f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016122:	83 c4 10             	add    esp,0x10
c0016125:	31 c0                	xor    eax,eax
c0016127:	59                   	pop    ecx
c0016128:	85 f6                	test   esi,esi
c001612a:	5b                   	pop    ebx
c001612b:	0f 95 c0             	setne  al
c001612e:	5e                   	pop    esi
c001612f:	31 d2                	xor    edx,edx
c0016131:	f7 d8                	neg    eax
c0016133:	83 d2 00             	adc    edx,0x0
c0016136:	f7 da                	neg    edx
c0016138:	c3                   	ret    
c0016139:	59                   	pop    ecx
c001613a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001613f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016144:	5b                   	pop    ebx
c0016145:	5e                   	pop    esi
c0016146:	c3                   	ret    

c0016147 <sysCallWait(regs*)>:
c0016147:	83 ec 10             	sub    esp,0x10
c001614a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001614e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016151:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016154:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016157:	e8 fc 24 00 00       	call   c0018658 <waitTask(int, int*, int)>
c001615c:	83 c4 1c             	add    esp,0x1c
c001615f:	99                   	cdq    
c0016160:	c3                   	ret    

c0016161 <sysCallNotImpl(regs*)>:
c0016161:	83 ec 18             	sub    esp,0x18
c0016164:	68 a1 59 02 c0       	push   0xc00259a1
c0016169:	e8 f1 e6 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001616e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016173:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016178:	83 c4 1c             	add    esp,0x1c
c001617b:	c3                   	ret    

c001617c <sysPanic(regs*)>:
c001617c:	83 ec 18             	sub    esp,0x18
c001617f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016183:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016186:	e8 d4 e6 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001618b:	b8 01 00 00 00       	mov    eax,0x1
c0016190:	31 d2                	xor    edx,edx
c0016192:	83 c4 1c             	add    esp,0x1c
c0016195:	c3                   	ret    

c0016196 <sysCallRmdir(regs*)>:
c0016196:	56                   	push   esi
c0016197:	53                   	push   ebx
c0016198:	83 ec 20             	sub    esp,0x20
c001619b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001619f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00161a2:	68 14 01 00 00       	push   0x114
c00161a7:	e8 17 38 ff ff       	call   c00099c3 <malloc>
c00161ac:	83 c4 0c             	add    esp,0xc
c00161af:	89 c3                	mov    ebx,eax
c00161b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161b6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161b9:	56                   	push   esi
c00161ba:	53                   	push   ebx
c00161bb:	e8 5e 70 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00161c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161c3:	e8 70 72 ff ff       	call   c000d438 <File::unlink()>
c00161c8:	83 c4 10             	add    esp,0x10
c00161cb:	85 db                	test   ebx,ebx
c00161cd:	74 14                	je     c00161e3 <sysCallRmdir(regs*)+0x4d>
c00161cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00161d5:	83 ec 0c             	sub    esp,0xc
c00161d8:	53                   	push   ebx
c00161d9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00161dc:	83 c4 10             	add    esp,0x10
c00161df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161e3:	85 c0                	test   eax,eax
c00161e5:	0f 95 c0             	setne  al
c00161e8:	31 d2                	xor    edx,edx
c00161ea:	0f b6 c0             	movzx  eax,al
c00161ed:	f7 d8                	neg    eax
c00161ef:	83 d2 00             	adc    edx,0x0
c00161f2:	83 c4 14             	add    esp,0x14
c00161f5:	f7 da                	neg    edx
c00161f7:	5b                   	pop    ebx
c00161f8:	5e                   	pop    esi
c00161f9:	c3                   	ret    

c00161fa <sysCallUnlink(regs*)>:
c00161fa:	56                   	push   esi
c00161fb:	53                   	push   ebx
c00161fc:	83 ec 20             	sub    esp,0x20
c00161ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016203:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016206:	68 14 01 00 00       	push   0x114
c001620b:	e8 b3 37 ff ff       	call   c00099c3 <malloc>
c0016210:	83 c4 0c             	add    esp,0xc
c0016213:	89 c3                	mov    ebx,eax
c0016215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001621a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001621d:	56                   	push   esi
c001621e:	53                   	push   ebx
c001621f:	e8 fa 6f ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0016224:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016227:	e8 0c 72 ff ff       	call   c000d438 <File::unlink()>
c001622c:	83 c4 10             	add    esp,0x10
c001622f:	85 db                	test   ebx,ebx
c0016231:	74 14                	je     c0016247 <sysCallUnlink(regs*)+0x4d>
c0016233:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016237:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016239:	83 ec 0c             	sub    esp,0xc
c001623c:	53                   	push   ebx
c001623d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016240:	83 c4 10             	add    esp,0x10
c0016243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016247:	85 c0                	test   eax,eax
c0016249:	0f 95 c0             	setne  al
c001624c:	31 d2                	xor    edx,edx
c001624e:	0f b6 c0             	movzx  eax,al
c0016251:	f7 d8                	neg    eax
c0016253:	83 d2 00             	adc    edx,0x0
c0016256:	83 c4 14             	add    esp,0x14
c0016259:	f7 da                	neg    edx
c001625b:	5b                   	pop    ebx
c001625c:	5e                   	pop    esi
c001625d:	c3                   	ret    

c001625e <sysCallGetArgv(regs*)>:
c001625e:	83 ec 0c             	sub    esp,0xc
c0016261:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016265:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016268:	85 c0                	test   eax,eax
c001626a:	78 2b                	js     c0016297 <sysCallGetArgv(regs*)+0x39>
c001626c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016272:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016275:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001627b:	7d 1a                	jge    c0016297 <sysCallGetArgv(regs*)+0x39>
c001627d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016284:	85 c0                	test   eax,eax
c0016286:	74 17                	je     c001629f <sysCallGetArgv(regs*)+0x41>
c0016288:	83 ec 08             	sub    esp,0x8
c001628b:	50                   	push   eax
c001628c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001628f:	e8 ac a4 fe ff       	call   c0000740 <strcpy>
c0016294:	83 c4 10             	add    esp,0x10
c0016297:	31 c0                	xor    eax,eax
c0016299:	31 d2                	xor    edx,edx
c001629b:	83 c4 0c             	add    esp,0xc
c001629e:	c3                   	ret    
c001629f:	b8 01 00 00 00       	mov    eax,0x1
c00162a4:	31 d2                	xor    edx,edx
c00162a6:	83 c4 0c             	add    esp,0xc
c00162a9:	c3                   	ret    

c00162aa <sysCallTTYName(regs*)>:
c00162aa:	56                   	push   esi
c00162ab:	53                   	push   ebx
c00162ac:	53                   	push   ebx
c00162ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162b1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00162b4:	85 c0                	test   eax,eax
c00162b6:	74 5f                	je     c0016317 <sysCallTTYName(regs*)+0x6d>
c00162b8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00162bb:	83 f8 02             	cmp    eax,0x2
c00162be:	77 3e                	ja     c00162fe <sysCallTTYName(regs*)+0x54>
c00162c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00162c8:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c00162ce:	85 db                	test   ebx,ebx
c00162d0:	74 45                	je     c0016317 <sysCallTTYName(regs*)+0x6d>
c00162d2:	83 ec 0c             	sub    esp,0xc
c00162d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162d7:	53                   	push   ebx
c00162d8:	ff 10                	call   DWORD PTR [eax]
c00162da:	83 c4 10             	add    esp,0x10
c00162dd:	84 c0                	test   al,al
c00162df:	74 41                	je     c0016322 <sysCallTTYName(regs*)+0x78>
c00162e1:	83 ec 08             	sub    esp,0x8
c00162e4:	81 c3 82 00 00 00    	add    ebx,0x82
c00162ea:	53                   	push   ebx
c00162eb:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00162ee:	e8 4d a4 fe ff       	call   c0000740 <strcpy>
c00162f3:	83 c4 10             	add    esp,0x10
c00162f6:	31 c0                	xor    eax,eax
c00162f8:	59                   	pop    ecx
c00162f9:	31 d2                	xor    edx,edx
c00162fb:	5b                   	pop    ebx
c00162fc:	5e                   	pop    esi
c00162fd:	c3                   	ret    
c00162fe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016303:	74 bb                	je     c00162c0 <sysCallTTYName(regs*)+0x16>
c0016305:	83 ec 0c             	sub    esp,0xc
c0016308:	50                   	push   eax
c0016309:	e8 29 55 ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c001630e:	83 c4 10             	add    esp,0x10
c0016311:	89 c3                	mov    ebx,eax
c0016313:	85 db                	test   ebx,ebx
c0016315:	75 bb                	jne    c00162d2 <sysCallTTYName(regs*)+0x28>
c0016317:	59                   	pop    ecx
c0016318:	b8 01 00 00 00       	mov    eax,0x1
c001631d:	31 d2                	xor    edx,edx
c001631f:	5b                   	pop    ebx
c0016320:	5e                   	pop    esi
c0016321:	c3                   	ret    
c0016322:	59                   	pop    ecx
c0016323:	b8 02 00 00 00       	mov    eax,0x2
c0016328:	31 d2                	xor    edx,edx
c001632a:	5b                   	pop    ebx
c001632b:	5e                   	pop    esi
c001632c:	c3                   	ret    

c001632d <sysCallUSleep(regs*)>:
c001632d:	83 ec 1c             	sub    esp,0x1c
c0016330:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016334:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016337:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001633a:	6a 00                	push   0x0
c001633c:	6a 64                	push   0x64
c001633e:	52                   	push   edx
c001633f:	50                   	push   eax
c0016340:	e8 8f c0 00 00       	call   c00223d4 <__udivdi3>
c0016345:	83 c4 14             	add    esp,0x14
c0016348:	50                   	push   eax
c0016349:	e8 da 23 00 00       	call   c0018728 <milliTenthSleep(unsigned int)>
c001634e:	31 c0                	xor    eax,eax
c0016350:	31 d2                	xor    edx,edx
c0016352:	83 c4 1c             	add    esp,0x1c
c0016355:	c3                   	ret    

c0016356 <sysCallSpawn(regs*)>:
c0016356:	56                   	push   esi
c0016357:	53                   	push   ebx
c0016358:	50                   	push   eax
c0016359:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001635d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016360:	85 c0                	test   eax,eax
c0016362:	75 08                	jne    c001636c <sysCallSpawn(regs*)+0x16>
c0016364:	59                   	pop    ecx
c0016365:	31 c0                	xor    eax,eax
c0016367:	31 d2                	xor    edx,edx
c0016369:	5b                   	pop    ebx
c001636a:	5e                   	pop    esi
c001636b:	c3                   	ret    
c001636c:	83 ec 0c             	sub    esp,0xc
c001636f:	68 1f 07 00 00       	push   0x71f
c0016374:	e8 4a 36 ff ff       	call   c00099c3 <malloc>
c0016379:	83 c4 10             	add    esp,0x10
c001637c:	89 c6                	mov    esi,eax
c001637e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016381:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016384:	85 c0                	test   eax,eax
c0016386:	75 32                	jne    c00163ba <sysCallSpawn(regs*)+0x64>
c0016388:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001638d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016390:	52                   	push   edx
c0016391:	50                   	push   eax
c0016392:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016395:	56                   	push   esi
c0016396:	e8 85 1a 00 00       	call   c0017e20 <Process::Process(char const*, Process*, char**)>
c001639b:	83 c4 10             	add    esp,0x10
c001639e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00163a5:	75 bd                	jne    c0016364 <sysCallSpawn(regs*)+0xe>
c00163a7:	83 ec 0c             	sub    esp,0xc
c00163aa:	56                   	push   esi
c00163ab:	e8 5c 1f 00 00       	call   c001830c <Process::createUserThread()>
c00163b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00163b2:	83 c4 10             	add    esp,0x10
c00163b5:	99                   	cdq    
c00163b6:	59                   	pop    ecx
c00163b7:	5b                   	pop    ebx
c00163b8:	5e                   	pop    esi
c00163b9:	c3                   	ret    
c00163ba:	31 c0                	xor    eax,eax
c00163bc:	eb d2                	jmp    c0016390 <sysCallSpawn(regs*)+0x3a>

c00163be <sysCallGetEnv(regs*)>:
c00163be:	57                   	push   edi
c00163bf:	56                   	push   esi
c00163c0:	53                   	push   ebx
c00163c1:	83 ec 1c             	sub    esp,0x1c
c00163c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00163c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163cd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00163d0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00163d3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00163d6:	e8 d0 e3 ff ff       	call   c00147ab <Krnl::getProcessTotalEnvCount(Process*)>
c00163db:	83 c4 10             	add    esp,0x10
c00163de:	39 c7                	cmp    edi,eax
c00163e0:	7c 14                	jl     c00163f6 <sysCallGetEnv(regs*)+0x38>
c00163e2:	85 f6                	test   esi,esi
c00163e4:	75 0b                	jne    c00163f1 <sysCallGetEnv(regs*)+0x33>
c00163e6:	83 c4 10             	add    esp,0x10
c00163e9:	31 c0                	xor    eax,eax
c00163eb:	5b                   	pop    ebx
c00163ec:	31 d2                	xor    edx,edx
c00163ee:	5e                   	pop    esi
c00163ef:	5f                   	pop    edi
c00163f0:	c3                   	ret    
c00163f1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00163f4:	eb f0                	jmp    c00163e6 <sysCallGetEnv(regs*)+0x28>
c00163f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00163fa:	52                   	push   edx
c00163fb:	57                   	push   edi
c00163fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016402:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016405:	50                   	push   eax
c0016406:	e8 c0 e3 ff ff       	call   c00147cb <Krnl::getProcessEnvPair(Process*, int)>
c001640b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001640e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016412:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016416:	83 c4 0c             	add    esp,0xc
c0016419:	85 c9                	test   ecx,ecx
c001641b:	75 23                	jne    c0016440 <sysCallGetEnv(regs*)+0x82>
c001641d:	83 ec 0c             	sub    esp,0xc
c0016420:	50                   	push   eax
c0016421:	e8 7a a2 fe ff       	call   c00006a0 <strlen>
c0016426:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016429:	89 c3                	mov    ebx,eax
c001642b:	e8 70 a2 fe ff       	call   c00006a0 <strlen>
c0016430:	83 c4 10             	add    esp,0x10
c0016433:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016437:	83 c4 10             	add    esp,0x10
c001643a:	31 d2                	xor    edx,edx
c001643c:	5b                   	pop    ebx
c001643d:	5e                   	pop    esi
c001643e:	5f                   	pop    edi
c001643f:	c3                   	ret    
c0016440:	83 ec 08             	sub    esp,0x8
c0016443:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016446:	50                   	push   eax
c0016447:	56                   	push   esi
c0016448:	e8 f3 a2 fe ff       	call   c0000740 <strcpy>
c001644d:	58                   	pop    eax
c001644e:	5a                   	pop    edx
c001644f:	68 bb 59 02 c0       	push   0xc00259bb
c0016454:	56                   	push   esi
c0016455:	e8 26 a4 fe ff       	call   c0000880 <strcat>
c001645a:	59                   	pop    ecx
c001645b:	5b                   	pop    ebx
c001645c:	57                   	push   edi
c001645d:	56                   	push   esi
c001645e:	e8 1d a4 fe ff       	call   c0000880 <strcat>
c0016463:	83 c4 10             	add    esp,0x10
c0016466:	e9 7b ff ff ff       	jmp    c00163e6 <sysCallGetEnv(regs*)+0x28>

c001646b <sysAppSettings(regs*)>:
c001646b:	57                   	push   edi
c001646c:	56                   	push   esi
c001646d:	56                   	push   esi
c001646e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016472:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016475:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001647b:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016480:	66 3d c0 09          	cmp    ax,0x9c0
c0016484:	75 2e                	jne    c00164b4 <sysAppSettings(regs*)+0x49>
c0016486:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001648c:	83 e0 1f             	and    eax,0x1f
c001648f:	3c 01                	cmp    al,0x1
c0016491:	74 2c                	je     c00164bf <sysAppSettings(regs*)+0x54>
c0016493:	3c 07                	cmp    al,0x7
c0016495:	0f 84 b3 00 00 00    	je     c001654e <sysAppSettings(regs*)+0xe3>
c001649b:	84 c0                	test   al,al
c001649d:	0f 84 d2 00 00 00    	je     c0016575 <sysAppSettings(regs*)+0x10a>
c00164a3:	3c 08                	cmp    al,0x8
c00164a5:	74 63                	je     c001650a <sysAppSettings(regs*)+0x9f>
c00164a7:	59                   	pop    ecx
c00164a8:	0f b6 c0             	movzx  eax,al
c00164ab:	5e                   	pop    esi
c00164ac:	05 e8 03 00 00       	add    eax,0x3e8
c00164b1:	5f                   	pop    edi
c00164b2:	99                   	cdq    
c00164b3:	c3                   	ret    
c00164b4:	b8 01 00 00 00       	mov    eax,0x1
c00164b9:	59                   	pop    ecx
c00164ba:	31 d2                	xor    edx,edx
c00164bc:	5e                   	pop    esi
c00164bd:	5f                   	pop    edi
c00164be:	c3                   	ret    
c00164bf:	50                   	push   eax
c00164c0:	68 00 01 00 00       	push   0x100
c00164c5:	6a 00                	push   0x0
c00164c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00164cf:	83 c0 0c             	add    eax,0xc
c00164d2:	50                   	push   eax
c00164d3:	e8 ac a1 fe ff       	call   c0000684 <memset>
c00164d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164dd:	b9 ff 00 00 00       	mov    ecx,0xff
c00164e2:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00164e5:	83 c7 0c             	add    edi,0xc
c00164e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00164ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ef:	5a                   	pop    edx
c00164f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00164f3:	59                   	pop    ecx
c00164f4:	8d 50 0c             	lea    edx,[eax+0xc]
c00164f7:	52                   	push   edx
c00164f8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00164fe:	e8 59 44 ff ff       	call   c000a95c <VgaText::setTitle(char*)>
c0016503:	83 c4 10             	add    esp,0x10
c0016506:	31 c0                	xor    eax,eax
c0016508:	eb af                	jmp    c00164b9 <sysAppSettings(regs*)+0x4e>
c001650a:	83 ec 08             	sub    esp,0x8
c001650d:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016513:	83 e0 0f             	and    eax,0xf
c0016516:	50                   	push   eax
c0016517:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001651c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001651f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016525:	e8 22 44 ff ff       	call   c000a94c <VgaText::setTitleColour(VgaColour)>
c001652a:	5f                   	pop    edi
c001652b:	58                   	pop    eax
c001652c:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016532:	c1 e8 04             	shr    eax,0x4
c0016535:	83 e0 0f             	and    eax,0xf
c0016538:	50                   	push   eax
c0016539:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001653e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016541:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016547:	e8 f0 43 ff ff       	call   c000a93c <VgaText::setTitleTextColour(VgaColour)>
c001654c:	eb b5                	jmp    c0016503 <sysAppSettings(regs*)+0x98>
c001654e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016553:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016556:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001655c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016562:	c0 e8 06             	shr    al,0x6
c0016565:	83 e0 01             	and    eax,0x1
c0016568:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001656e:	31 c0                	xor    eax,eax
c0016570:	e9 44 ff ff ff       	jmp    c00164b9 <sysAppSettings(regs*)+0x4e>
c0016575:	b8 02 00 00 00       	mov    eax,0x2
c001657a:	e9 3a ff ff ff       	jmp    c00164b9 <sysAppSettings(regs*)+0x4e>

c001657f <sysSetFatAttrib(regs*)>:
c001657f:	57                   	push   edi
c0016580:	56                   	push   esi
c0016581:	53                   	push   ebx
c0016582:	83 ec 1c             	sub    esp,0x1c
c0016585:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016589:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001658c:	68 14 01 00 00       	push   0x114
c0016591:	e8 2d 34 ff ff       	call   c00099c3 <malloc>
c0016596:	83 c4 0c             	add    esp,0xc
c0016599:	89 c3                	mov    ebx,eax
c001659b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165a0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00165a3:	57                   	push   edi
c00165a4:	53                   	push   ebx
c00165a5:	e8 74 6c ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00165aa:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00165ad:	83 c4 0c             	add    esp,0xc
c00165b0:	0f b6 d4             	movzx  edx,ah
c00165b3:	0f b6 c0             	movzx  eax,al
c00165b6:	52                   	push   edx
c00165b7:	50                   	push   eax
c00165b8:	53                   	push   ebx
c00165b9:	e8 14 6f ff ff       	call   c000d4d2 <File::chfatattr(unsigned char, unsigned char)>
c00165be:	83 c4 10             	add    esp,0x10
c00165c1:	85 db                	test   ebx,ebx
c00165c3:	74 14                	je     c00165d9 <sysSetFatAttrib(regs*)+0x5a>
c00165c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165c9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00165cb:	83 ec 0c             	sub    esp,0xc
c00165ce:	53                   	push   ebx
c00165cf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00165d2:	83 c4 10             	add    esp,0x10
c00165d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165d9:	85 c0                	test   eax,eax
c00165db:	0f 95 c0             	setne  al
c00165de:	31 d2                	xor    edx,edx
c00165e0:	0f b6 c0             	movzx  eax,al
c00165e3:	f7 d8                	neg    eax
c00165e5:	83 d2 00             	adc    edx,0x0
c00165e8:	83 c4 10             	add    esp,0x10
c00165eb:	f7 da                	neg    edx
c00165ed:	5b                   	pop    ebx
c00165ee:	5e                   	pop    esi
c00165ef:	5f                   	pop    edi
c00165f0:	c3                   	ret    

c00165f1 <sysPipe(regs*)>:
c00165f1:	57                   	push   edi
c00165f2:	56                   	push   esi
c00165f3:	53                   	push   ebx
c00165f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165f8:	83 ec 0c             	sub    esp,0xc
c00165fb:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00165fe:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016601:	6a 20                	push   0x20
c0016603:	e8 bb 33 ff ff       	call   c00099c3 <malloc>
c0016608:	89 c3                	mov    ebx,eax
c001660a:	58                   	pop    eax
c001660b:	5a                   	pop    edx
c001660c:	68 00 50 00 00       	push   0x5000
c0016611:	53                   	push   ebx
c0016612:	e8 bd 40 ff ff       	call   c000a6d4 <Pipe::Pipe(int)>
c0016617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001661a:	e8 23 4f ff ff       	call   c000b542 <UnixFile::getFileDescriptor()>
c001661f:	89 07                	mov    DWORD PTR [edi],eax
c0016621:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016624:	e8 19 4f ff ff       	call   c000b542 <UnixFile::getFileDescriptor()>
c0016629:	83 c4 10             	add    esp,0x10
c001662c:	89 06                	mov    DWORD PTR [esi],eax
c001662e:	31 d2                	xor    edx,edx
c0016630:	5b                   	pop    ebx
c0016631:	31 c0                	xor    eax,eax
c0016633:	5e                   	pop    esi
c0016634:	5f                   	pop    edi
c0016635:	c3                   	ret    

c0016636 <sysGetUnixTime(regs*)>:
c0016636:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c001663b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016641:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016645:	e9 08 76 ff ff       	jmp    c000dc52 <Clock::timeInSecondsLocal()>

c001664a <string_ends_with(char const*, char const*)>:
c001664a:	57                   	push   edi
c001664b:	56                   	push   esi
c001664c:	53                   	push   ebx
c001664d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016651:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016655:	83 ec 0c             	sub    esp,0xc
c0016658:	53                   	push   ebx
c0016659:	e8 42 a0 fe ff       	call   c00006a0 <strlen>
c001665e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016661:	89 c6                	mov    esi,eax
c0016663:	e8 38 a0 fe ff       	call   c00006a0 <strlen>
c0016668:	83 c4 10             	add    esp,0x10
c001666b:	39 c6                	cmp    esi,eax
c001666d:	7d 06                	jge    c0016675 <string_ends_with(char const*, char const*)+0x2b>
c001666f:	5b                   	pop    ebx
c0016670:	31 c0                	xor    eax,eax
c0016672:	5e                   	pop    esi
c0016673:	5f                   	pop    edi
c0016674:	c3                   	ret    
c0016675:	83 ec 08             	sub    esp,0x8
c0016678:	29 c6                	sub    esi,eax
c001667a:	57                   	push   edi
c001667b:	01 f3                	add    ebx,esi
c001667d:	53                   	push   ebx
c001667e:	e8 49 a1 fe ff       	call   c00007cc <strcmp>
c0016683:	83 c4 10             	add    esp,0x10
c0016686:	85 c0                	test   eax,eax
c0016688:	5b                   	pop    ebx
c0016689:	0f 94 c0             	sete   al
c001668c:	5e                   	pop    esi
c001668d:	0f b6 c0             	movzx  eax,al
c0016690:	5f                   	pop    edi
c0016691:	c3                   	ret    

c0016692 <sysCallOpen(regs*)>:
c0016692:	56                   	push   esi
c0016693:	53                   	push   ebx
c0016694:	81 ec 04 01 00 00    	sub    esp,0x104
c001669a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00166a1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00166a4:	85 c9                	test   ecx,ecx
c00166a6:	0f 84 ad 01 00 00    	je     c0016859 <sysCallOpen(regs*)+0x1c7>
c00166ac:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00166af:	85 c0                	test   eax,eax
c00166b1:	0f 84 a2 01 00 00    	je     c0016859 <sysCallOpen(regs*)+0x1c7>
c00166b7:	52                   	push   edx
c00166b8:	68 bd 59 02 c0       	push   0xc00259bd
c00166bd:	50                   	push   eax
c00166be:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00166c2:	56                   	push   esi
c00166c3:	e8 ac 69 ff ff       	call   c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>
c00166c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00166cb:	e8 d0 9f fe ff       	call   c00006a0 <strlen>
c00166d0:	83 c4 10             	add    esp,0x10
c00166d3:	48                   	dec    eax
c00166d4:	74 1d                	je     c00166f3 <sysCallOpen(regs*)+0x61>
c00166d6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00166d9:	eb 0f                	jmp    c00166ea <sysCallOpen(regs*)+0x58>
c00166db:	80 fa 3a             	cmp    dl,0x3a
c00166de:	74 0f                	je     c00166ef <sysCallOpen(regs*)+0x5d>
c00166e0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00166e4:	48                   	dec    eax
c00166e5:	74 0c                	je     c00166f3 <sysCallOpen(regs*)+0x61>
c00166e7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00166ea:	80 fa 2e             	cmp    dl,0x2e
c00166ed:	75 ec                	jne    c00166db <sysCallOpen(regs*)+0x49>
c00166ef:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00166f3:	83 ec 08             	sub    esp,0x8
c00166f6:	68 c1 59 02 c0       	push   0xc00259c1
c00166fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166fe:	e8 47 ff ff ff       	call   c001664a <string_ends_with(char const*, char const*)>
c0016703:	83 c4 10             	add    esp,0x10
c0016706:	85 c0                	test   eax,eax
c0016708:	74 1d                	je     c0016727 <sysCallOpen(regs*)+0x95>
c001670a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001670d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016713:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001671a:	81 c4 04 01 00 00    	add    esp,0x104
c0016720:	31 c0                	xor    eax,eax
c0016722:	31 d2                	xor    edx,edx
c0016724:	5b                   	pop    ebx
c0016725:	5e                   	pop    esi
c0016726:	c3                   	ret    
c0016727:	83 ec 08             	sub    esp,0x8
c001672a:	68 c6 59 02 c0       	push   0xc00259c6
c001672f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016732:	e8 13 ff ff ff       	call   c001664a <string_ends_with(char const*, char const*)>
c0016737:	83 c4 10             	add    esp,0x10
c001673a:	85 c0                	test   eax,eax
c001673c:	75 cc                	jne    c001670a <sysCallOpen(regs*)+0x78>
c001673e:	83 ec 08             	sub    esp,0x8
c0016741:	68 c2 59 02 c0       	push   0xc00259c2
c0016746:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016749:	e8 7e a0 fe ff       	call   c00007cc <strcmp>
c001674e:	83 c4 10             	add    esp,0x10
c0016751:	85 c0                	test   eax,eax
c0016753:	74 b5                	je     c001670a <sysCallOpen(regs*)+0x78>
c0016755:	83 ec 08             	sub    esp,0x8
c0016758:	68 c1 59 02 c0       	push   0xc00259c1
c001675d:	56                   	push   esi
c001675e:	e8 e7 fe ff ff       	call   c001664a <string_ends_with(char const*, char const*)>
c0016763:	83 c4 10             	add    esp,0x10
c0016766:	85 c0                	test   eax,eax
c0016768:	75 a0                	jne    c001670a <sysCallOpen(regs*)+0x78>
c001676a:	83 ec 08             	sub    esp,0x8
c001676d:	68 cb 59 02 c0       	push   0xc00259cb
c0016772:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016775:	e8 d0 fe ff ff       	call   c001664a <string_ends_with(char const*, char const*)>
c001677a:	83 c4 10             	add    esp,0x10
c001677d:	85 c0                	test   eax,eax
c001677f:	0f 85 e7 00 00 00    	jne    c001686c <sysCallOpen(regs*)+0x1da>
c0016785:	83 ec 08             	sub    esp,0x8
c0016788:	68 d0 59 02 c0       	push   0xc00259d0
c001678d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016790:	e8 b5 fe ff ff       	call   c001664a <string_ends_with(char const*, char const*)>
c0016795:	83 c4 10             	add    esp,0x10
c0016798:	85 c0                	test   eax,eax
c001679a:	0f 85 cc 00 00 00    	jne    c001686c <sysCallOpen(regs*)+0x1da>
c00167a0:	83 ec 08             	sub    esp,0x8
c00167a3:	68 cc 59 02 c0       	push   0xc00259cc
c00167a8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00167ab:	e8 1c a0 fe ff       	call   c00007cc <strcmp>
c00167b0:	83 c4 10             	add    esp,0x10
c00167b3:	85 c0                	test   eax,eax
c00167b5:	0f 84 b1 00 00 00    	je     c001686c <sysCallOpen(regs*)+0x1da>
c00167bb:	83 ec 08             	sub    esp,0x8
c00167be:	68 cb 59 02 c0       	push   0xc00259cb
c00167c3:	56                   	push   esi
c00167c4:	e8 81 fe ff ff       	call   c001664a <string_ends_with(char const*, char const*)>
c00167c9:	83 c4 10             	add    esp,0x10
c00167cc:	85 c0                	test   eax,eax
c00167ce:	0f 85 98 00 00 00    	jne    c001686c <sysCallOpen(regs*)+0x1da>
c00167d4:	83 ec 0c             	sub    esp,0xc
c00167d7:	68 14 01 00 00       	push   0x114
c00167dc:	e8 e2 31 ff ff       	call   c00099c3 <malloc>
c00167e1:	83 c4 0c             	add    esp,0xc
c00167e4:	89 c6                	mov    esi,eax
c00167e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167eb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00167ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00167f1:	56                   	push   esi
c00167f2:	e8 27 6a ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00167f7:	83 c4 10             	add    esp,0x10
c00167fa:	85 f6                	test   esi,esi
c00167fc:	74 5b                	je     c0016859 <sysCallOpen(regs*)+0x1c7>
c00167fe:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016801:	0f b6 c2             	movzx  eax,dl
c0016804:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016807:	89 d0                	mov    eax,edx
c0016809:	83 e0 01             	and    eax,0x1
c001680c:	f6 c2 02             	test   dl,0x2
c001680f:	74 03                	je     c0016814 <sysCallOpen(regs*)+0x182>
c0016811:	83 c8 02             	or     eax,0x2
c0016814:	f6 c2 04             	test   dl,0x4
c0016817:	74 03                	je     c001681c <sysCallOpen(regs*)+0x18a>
c0016819:	83 c8 04             	or     eax,0x4
c001681c:	f6 c2 08             	test   dl,0x8
c001681f:	74 03                	je     c0016824 <sysCallOpen(regs*)+0x192>
c0016821:	83 c8 0a             	or     eax,0xa
c0016824:	83 e2 10             	and    edx,0x10
c0016827:	74 03                	je     c001682c <sysCallOpen(regs*)+0x19a>
c0016829:	83 c8 12             	or     eax,0x12
c001682c:	83 ec 08             	sub    esp,0x8
c001682f:	50                   	push   eax
c0016830:	56                   	push   esi
c0016831:	e8 8a 6a ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c0016836:	83 c4 10             	add    esp,0x10
c0016839:	85 c0                	test   eax,eax
c001683b:	75 1c                	jne    c0016859 <sysCallOpen(regs*)+0x1c7>
c001683d:	83 ec 0c             	sub    esp,0xc
c0016840:	56                   	push   esi
c0016841:	e8 fc 4c ff ff       	call   c000b542 <UnixFile::getFileDescriptor()>
c0016846:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016849:	83 c4 10             	add    esp,0x10
c001684c:	89 02                	mov    DWORD PTR [edx],eax
c001684e:	c1 f8 1f             	sar    eax,0x1f
c0016851:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016854:	e9 c1 fe ff ff       	jmp    c001671a <sysCallOpen(regs*)+0x88>
c0016859:	81 c4 04 01 00 00    	add    esp,0x104
c001685f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016864:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016869:	5b                   	pop    ebx
c001686a:	5e                   	pop    esi
c001686b:	c3                   	ret    
c001686c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001686f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016875:	e9 99 fe ff ff       	jmp    c0016713 <sysCallOpen(regs*)+0x81>

c001687a <Sys::loadSyscalls()>:
c001687a:	c7 05 00 86 02 c0 eb 5a 01 c0 	mov    DWORD PTR ds:0xc0028600,0xc0015aeb
c0016884:	c7 05 04 86 02 c0 e0 56 01 c0 	mov    DWORD PTR ds:0xc0028604,0xc00156e0
c001688e:	c7 05 08 86 02 c0 d1 58 01 c0 	mov    DWORD PTR ds:0xc0028608,0xc00158d1
c0016898:	c7 05 0c 86 02 c0 21 5a 01 c0 	mov    DWORD PTR ds:0xc002860c,0xc0015a21
c00168a2:	c7 05 10 86 02 c0 69 58 01 c0 	mov    DWORD PTR ds:0xc0028610,0xc0015869
c00168ac:	c7 05 14 86 02 c0 17 57 01 c0 	mov    DWORD PTR ds:0xc0028614,0xc0015717
c00168b6:	c7 05 18 86 02 c0 f8 56 01 c0 	mov    DWORD PTR ds:0xc0028618,0xc00156f8
c00168c0:	c7 05 1c 86 02 c0 26 59 01 c0 	mov    DWORD PTR ds:0xc002861c,0xc0015926
c00168ca:	c7 05 24 86 02 c0 ae 5f 01 c0 	mov    DWORD PTR ds:0xc0028624,0xc0015fae
c00168d4:	c7 05 20 86 02 c0 92 66 01 c0 	mov    DWORD PTR ds:0xc0028620,0xc0016692
c00168de:	c7 05 28 86 02 c0 0e 60 01 c0 	mov    DWORD PTR ds:0xc0028628,0xc001600e
c00168e8:	c7 05 2c 86 02 c0 f1 5c 01 c0 	mov    DWORD PTR ds:0xc002862c,0xc0015cf1
c00168f2:	c7 05 30 86 02 c0 23 5b 01 c0 	mov    DWORD PTR ds:0xc0028630,0xc0015b23
c00168fc:	c7 05 34 86 02 c0 28 5b 01 c0 	mov    DWORD PTR ds:0xc0028634,0xc0015b28
c0016906:	c7 05 38 86 02 c0 d7 60 01 c0 	mov    DWORD PTR ds:0xc0028638,0xc00160d7
c0016910:	c7 05 3c 86 02 c0 83 60 01 c0 	mov    DWORD PTR ds:0xc002863c,0xc0016083
c001691a:	c7 05 40 86 02 c0 ca 5d 01 c0 	mov    DWORD PTR ds:0xc0028640,0xc0015dca
c0016924:	c7 05 44 86 02 c0 21 5e 01 c0 	mov    DWORD PTR ds:0xc0028644,0xc0015e21
c001692e:	c7 05 48 86 02 c0 8d 5e 01 c0 	mov    DWORD PTR ds:0xc0028648,0xc0015e8d
c0016938:	c7 05 4c 86 02 c0 2d 5b 01 c0 	mov    DWORD PTR ds:0xc002864c,0xc0015b2d
c0016942:	c7 05 50 86 02 c0 47 61 01 c0 	mov    DWORD PTR ds:0xc0028650,0xc0016147
c001694c:	c7 05 54 86 02 c0 61 61 01 c0 	mov    DWORD PTR ds:0xc0028654,0xc0016161
c0016956:	c7 05 58 86 02 c0 61 61 01 c0 	mov    DWORD PTR ds:0xc0028658,0xc0016161
c0016960:	c7 05 5c 86 02 c0 96 61 01 c0 	mov    DWORD PTR ds:0xc002865c,0xc0016196
c001696a:	c7 05 60 86 02 c0 fa 61 01 c0 	mov    DWORD PTR ds:0xc0028660,0xc00161fa
c0016974:	c7 05 64 86 02 c0 37 5b 01 c0 	mov    DWORD PTR ds:0xc0028664,0xc0015b37
c001697e:	c7 05 68 86 02 c0 5e 62 01 c0 	mov    DWORD PTR ds:0xc0028668,0xc001625e
c0016988:	c7 05 6c 86 02 c0 ae 5c 01 c0 	mov    DWORD PTR ds:0xc002866c,0xc0015cae
c0016992:	c7 05 70 86 02 c0 aa 62 01 c0 	mov    DWORD PTR ds:0xc0028670,0xc00162aa
c001699c:	c7 05 74 86 02 c0 70 5d 01 c0 	mov    DWORD PTR ds:0xc0028674,0xc0015d70
c00169a6:	c7 05 78 86 02 c0 2d 63 01 c0 	mov    DWORD PTR ds:0xc0028678,0xc001632d
c00169b0:	c7 05 7c 86 02 c0 ff 5e 01 c0 	mov    DWORD PTR ds:0xc002867c,0xc0015eff
c00169ba:	c7 05 80 86 02 c0 56 63 01 c0 	mov    DWORD PTR ds:0xc0028680,0xc0016356
c00169c4:	c7 05 84 86 02 c0 be 63 01 c0 	mov    DWORD PTR ds:0xc0028684,0xc00163be
c00169ce:	c7 05 88 86 02 c0 6b 64 01 c0 	mov    DWORD PTR ds:0xc0028688,0xc001646b
c00169d8:	c7 05 8c 86 02 c0 47 5b 01 c0 	mov    DWORD PTR ds:0xc002868c,0xc0015b47
c00169e2:	c7 05 90 86 02 c0 b1 5b 01 c0 	mov    DWORD PTR ds:0xc0028690,0xc0015bb1
c00169ec:	c7 05 94 86 02 c0 fb 5b 01 c0 	mov    DWORD PTR ds:0xc0028694,0xc0015bfb
c00169f6:	c7 05 98 86 02 c0 7f 65 01 c0 	mov    DWORD PTR ds:0xc0028698,0xc001657f
c0016a00:	c7 05 9c 86 02 c0 7c 61 01 c0 	mov    DWORD PTR ds:0xc002869c,0xc001617c
c0016a0a:	c7 05 a0 86 02 c0 50 5c 01 c0 	mov    DWORD PTR ds:0xc00286a0,0xc0015c50
c0016a14:	c7 05 a4 86 02 c0 f1 65 01 c0 	mov    DWORD PTR ds:0xc00286a4,0xc00165f1
c0016a1e:	c7 05 a8 86 02 c0 36 66 01 c0 	mov    DWORD PTR ds:0xc00286a8,0xc0016636
c0016a28:	c7 05 ac 86 02 c0 c1 57 01 c0 	mov    DWORD PTR ds:0xc00286ac,0xc00157c1
c0016a32:	c7 05 b0 86 02 c0 42 59 01 c0 	mov    DWORD PTR ds:0xc00286b0,0xc0015942
c0016a3c:	c7 05 b4 86 02 c0 d7 59 01 c0 	mov    DWORD PTR ds:0xc00286b4,0xc00159d7
c0016a46:	c7 05 b8 86 02 c0 aa 56 01 c0 	mov    DWORD PTR ds:0xc00286b8,0xc00156aa
c0016a50:	c7 05 bc 86 02 c0 89 5a 01 c0 	mov    DWORD PTR ds:0xc00286bc,0xc0015a89
c0016a5a:	c7 05 c0 86 02 c0 23 57 01 c0 	mov    DWORD PTR ds:0xc00286c0,0xc0015723
c0016a64:	c7 05 c4 86 02 c0 3d 57 01 c0 	mov    DWORD PTR ds:0xc00286c4,0xc001573d
c0016a6e:	c3                   	ret    

c0016a6f <Sys::systemCall(regs*, void*)>:
c0016a6f:	53                   	push   ebx
c0016a70:	83 ec 08             	sub    esp,0x8
c0016a73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a77:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016a7a:	83 f8 7f             	cmp    eax,0x7f
c0016a7d:	77 16                	ja     c0016a95 <Sys::systemCall(regs*, void*)+0x26>
c0016a7f:	8b 14 85 00 86 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7a00]
c0016a86:	85 d2                	test   edx,edx
c0016a88:	74 0b                	je     c0016a95 <Sys::systemCall(regs*, void*)+0x26>
c0016a8a:	83 ec 0c             	sub    esp,0xc
c0016a8d:	53                   	push   ebx
c0016a8e:	ff d2                	call   edx
c0016a90:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a93:	eb 0d                	jmp    c0016aa2 <Sys::systemCall(regs*, void*)+0x33>
c0016a95:	52                   	push   edx
c0016a96:	52                   	push   edx
c0016a97:	50                   	push   eax
c0016a98:	68 d5 59 02 c0       	push   0xc00259d5
c0016a9d:	e8 11 62 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016aa2:	83 c4 10             	add    esp,0x10
c0016aa5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016aaa:	31 d2                	xor    edx,edx
c0016aac:	83 c4 08             	add    esp,0x8
c0016aaf:	5b                   	pop    ebx
c0016ab0:	c3                   	ret    

c0016ab1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016ab1:	55                   	push   ebp
c0016ab2:	57                   	push   edi
c0016ab3:	56                   	push   esi
c0016ab4:	53                   	push   ebx
c0016ab5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016abb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016ac2:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016ac9:	85 c0                	test   eax,eax
c0016acb:	0f 95 c1             	setne  cl
c0016ace:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016ad6:	0f 94 c2             	sete   dl
c0016ad9:	84 d1                	test   cl,dl
c0016adb:	74 23                	je     c0016b00 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016add:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016ae3:	74 1b                	je     c0016b00 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016ae5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016aeb:	89 da                	mov    edx,ebx
c0016aed:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016af3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016af9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016b00:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016b07:	05 ff 0f 00 00       	add    eax,0xfff
c0016b0c:	83 ec 0c             	sub    esp,0xc
c0016b0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b13:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016b19:	c1 e8 0c             	shr    eax,0xc
c0016b1c:	89 fe                	mov    esi,edi
c0016b1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b22:	c1 ee 0c             	shr    esi,0xc
c0016b25:	6a 01                	push   0x1
c0016b27:	e8 61 4e ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c0016b2c:	89 c5                	mov    ebp,eax
c0016b2e:	58                   	pop    eax
c0016b2f:	5a                   	pop    edx
c0016b30:	56                   	push   esi
c0016b31:	68 e9 59 02 c0       	push   0xc00259e9
c0016b36:	e8 78 61 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016b3b:	59                   	pop    ecx
c0016b3c:	58                   	pop    eax
c0016b3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b41:	68 fb 59 02 c0       	push   0xc00259fb
c0016b46:	e8 68 61 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016b4b:	83 c4 10             	add    esp,0x10
c0016b4e:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016b54:	0f 86 31 01 00 00    	jbe    c0016c8b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016b5a:	c1 e6 0c             	shl    esi,0xc
c0016b5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b60:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016b63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b67:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016b6e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016b71:	01 df                	add    edi,ebx
c0016b73:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016b76:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016b7a:	0f 84 08 01 00 00    	je     c0016c88 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016b80:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016b86:	76 05                	jbe    c0016b8d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016b88:	bf 00 10 00 00       	mov    edi,0x1000
c0016b8d:	83 ec 0c             	sub    esp,0xc
c0016b90:	31 d2                	xor    edx,edx
c0016b92:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016b99:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016b9b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016b9f:	50                   	push   eax
c0016ba0:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016ba4:	56                   	push   esi
c0016ba5:	52                   	push   edx
c0016ba6:	57                   	push   edi
c0016ba7:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016bae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016bb1:	83 c4 20             	add    esp,0x20
c0016bb4:	85 c0                	test   eax,eax
c0016bb6:	74 0a                	je     c0016bc2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016bb8:	53                   	push   ebx
c0016bb9:	53                   	push   ebx
c0016bba:	50                   	push   eax
c0016bbb:	68 0d 5a 02 c0       	push   0xc0025a0d
c0016bc0:	eb 0f                	jmp    c0016bd1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016bc2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016bc6:	74 20                	je     c0016be8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016bc8:	51                   	push   ecx
c0016bc9:	51                   	push   ecx
c0016bca:	6a 00                	push   0x0
c0016bcc:	68 38 5a 02 c0       	push   0xc0025a38
c0016bd1:	e8 dd 60 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016bd6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016bd9:	e8 df 50 ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c0016bde:	83 c4 10             	add    esp,0x10
c0016be1:	31 c0                	xor    eax,eax
c0016be3:	e9 68 01 00 00       	jmp    c0016d50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016be8:	fa                   	cli    
c0016be9:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0016bef:	e8 86 34 ff ff       	call   c000a07a <Phys::allocatePage()>
c0016bf4:	6a 07                	push   0x7
c0016bf6:	89 c7                	mov    edi,eax
c0016bf8:	55                   	push   ebp
c0016bf9:	50                   	push   eax
c0016bfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c02:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c08:	e8 27 54 ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016c0d:	83 c4 0c             	add    esp,0xc
c0016c10:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016c17:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c1d:	6a 00                	push   0x0
c0016c1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c27:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c2d:	e8 5c 52 ff ff       	call   c000be8e <VAS::mapOtherVASIn(bool, VAS*)>
c0016c32:	58                   	pop    eax
c0016c33:	5a                   	pop    edx
c0016c34:	68 07 0c 00 00       	push   0xc07
c0016c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016c3d:	57                   	push   edi
c0016c3e:	89 ef                	mov    edi,ebp
c0016c40:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016c47:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c4d:	6a 00                	push   0x0
c0016c4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c57:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c5d:	e8 8e 57 ff ff       	call   c000c3f0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016c62:	b9 00 10 00 00       	mov    ecx,0x1000
c0016c67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c69:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0016c6e:	83 c4 20             	add    esp,0x20
c0016c71:	48                   	dec    eax
c0016c72:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0016c77:	85 c0                	test   eax,eax
c0016c79:	75 01                	jne    c0016c7c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016c7b:	fb                   	sti    
c0016c7c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016c83:	e9 df fe ff ff       	jmp    c0016b67 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016c88:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016c8b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016c93:	0f 86 a9 00 00 00    	jbe    c0016d42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016c99:	fa                   	cli    
c0016c9a:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0016ca0:	51                   	push   ecx
c0016ca1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016ca8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016cae:	6a 00                	push   0x0
c0016cb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cb5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cb8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016cbe:	e8 cb 51 ff ff       	call   c000be8e <VAS::mapOtherVASIn(bool, VAS*)>
c0016cc3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016cc7:	c1 e6 0c             	shl    esi,0xc
c0016cca:	01 de                	add    esi,ebx
c0016ccc:	83 c4 10             	add    esp,0x10
c0016ccf:	39 de                	cmp    esi,ebx
c0016cd1:	74 61                	je     c0016d34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016cd3:	e8 a2 33 ff ff       	call   c000a07a <Phys::allocatePage()>
c0016cd8:	6a 07                	push   0x7
c0016cda:	89 c7                	mov    edi,eax
c0016cdc:	55                   	push   ebp
c0016cdd:	50                   	push   eax
c0016cde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ce3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ce6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016cec:	e8 43 53 ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016cf1:	58                   	pop    eax
c0016cf2:	5a                   	pop    edx
c0016cf3:	68 07 0c 00 00       	push   0xc07
c0016cf8:	53                   	push   ebx
c0016cf9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016cff:	57                   	push   edi
c0016d00:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016d07:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d0d:	6a 00                	push   0x0
c0016d0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d17:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d1d:	e8 ce 56 ff ff       	call   c000c3f0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016d22:	83 c4 1c             	add    esp,0x1c
c0016d25:	68 00 10 00 00       	push   0x1000
c0016d2a:	6a 00                	push   0x0
c0016d2c:	55                   	push   ebp
c0016d2d:	e8 52 99 fe ff       	call   c0000684 <memset>
c0016d32:	eb 98                	jmp    c0016ccc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016d34:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0016d39:	48                   	dec    eax
c0016d3a:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0016d3f:	75 01                	jne    c0016d42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016d41:	fb                   	sti    
c0016d42:	83 ec 0c             	sub    esp,0xc
c0016d45:	55                   	push   ebp
c0016d46:	e8 72 4f ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c0016d4b:	83 c4 10             	add    esp,0x10
c0016d4e:	b0 01                	mov    al,0x1
c0016d50:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016d56:	5b                   	pop    ebx
c0016d57:	5e                   	pop    esi
c0016d58:	5f                   	pop    edi
c0016d59:	5d                   	pop    ebp
c0016d5a:	c3                   	ret    

c0016d5b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016d5b:	55                   	push   ebp
c0016d5c:	57                   	push   edi
c0016d5d:	56                   	push   esi
c0016d5e:	53                   	push   ebx
c0016d5f:	83 ec 48             	sub    esp,0x48
c0016d62:	68 14 01 00 00       	push   0x114
c0016d67:	e8 57 2c ff ff       	call   c00099c3 <malloc>
c0016d6c:	83 c4 0c             	add    esp,0xc
c0016d6f:	89 c6                	mov    esi,eax
c0016d71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d75:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016d79:	50                   	push   eax
c0016d7a:	e8 9f 64 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0016d7f:	58                   	pop    eax
c0016d80:	5a                   	pop    edx
c0016d81:	6a 01                	push   0x1
c0016d83:	56                   	push   esi
c0016d84:	e8 37 65 ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c0016d89:	83 c4 10             	add    esp,0x10
c0016d8c:	85 c0                	test   eax,eax
c0016d8e:	0f 85 47 01 00 00    	jne    c0016edb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d94:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016d9c:	83 ec 0c             	sub    esp,0xc
c0016d9f:	6a 34                	push   0x34
c0016da1:	e8 1d 2c ff ff       	call   c00099c3 <malloc>
c0016da6:	89 c3                	mov    ebx,eax
c0016da8:	58                   	pop    eax
c0016da9:	8b 06                	mov    eax,DWORD PTR [esi]
c0016dab:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016daf:	57                   	push   edi
c0016db0:	53                   	push   ebx
c0016db1:	6a 00                	push   0x0
c0016db3:	6a 34                	push   0x34
c0016db5:	56                   	push   esi
c0016db6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016db9:	83 c4 20             	add    esp,0x20
c0016dbc:	85 c0                	test   eax,eax
c0016dbe:	0f 85 17 01 00 00    	jne    c0016edb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016dc4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016dca:	0f 85 0b 01 00 00    	jne    c0016edb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016dd0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016dd3:	85 c0                	test   eax,eax
c0016dd5:	0f 84 00 01 00 00    	je     c0016edb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016ddb:	31 d2                	xor    edx,edx
c0016ddd:	55                   	push   ebp
c0016dde:	52                   	push   edx
c0016ddf:	50                   	push   eax
c0016de0:	56                   	push   esi
c0016de1:	e8 98 65 ff ff       	call   c000d37e <File::seek(unsigned long long)>
c0016de6:	83 c4 10             	add    esp,0x10
c0016de9:	85 c0                	test   eax,eax
c0016deb:	0f 85 ea 00 00 00    	jne    c0016edb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016df1:	83 ec 0c             	sub    esp,0xc
c0016df4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016df7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016dfb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016dff:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016e03:	0f af c2             	imul   eax,edx
c0016e06:	50                   	push   eax
c0016e07:	e8 b7 2b ff ff       	call   c00099c3 <malloc>
c0016e0c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e19:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016e1d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016e21:	0f af c2             	imul   eax,edx
c0016e24:	99                   	cdq    
c0016e25:	52                   	push   edx
c0016e26:	50                   	push   eax
c0016e27:	56                   	push   esi
c0016e28:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e2b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016e2e:	83 c4 20             	add    esp,0x20
c0016e31:	85 c0                	test   eax,eax
c0016e33:	0f 84 a2 00 00 00    	je     c0016edb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016e39:	31 d2                	xor    edx,edx
c0016e3b:	51                   	push   ecx
c0016e3c:	52                   	push   edx
c0016e3d:	50                   	push   eax
c0016e3e:	56                   	push   esi
c0016e3f:	e8 3a 65 ff ff       	call   c000d37e <File::seek(unsigned long long)>
c0016e44:	83 c4 10             	add    esp,0x10
c0016e47:	85 c0                	test   eax,eax
c0016e49:	0f 85 8c 00 00 00    	jne    c0016edb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016e4f:	83 ec 0c             	sub    esp,0xc
c0016e52:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016e56:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016e5a:	31 ed                	xor    ebp,ebp
c0016e5c:	0f af c2             	imul   eax,edx
c0016e5f:	50                   	push   eax
c0016e60:	e8 5e 2b ff ff       	call   c00099c3 <malloc>
c0016e65:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e72:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016e76:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016e7a:	0f af c2             	imul   eax,edx
c0016e7d:	99                   	cdq    
c0016e7e:	52                   	push   edx
c0016e7f:	50                   	push   eax
c0016e80:	56                   	push   esi
c0016e81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e84:	83 c4 20             	add    esp,0x20
c0016e87:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016e8f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016e93:	0f 86 80 00 00 00    	jbe    c0016f19 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016e99:	0f b7 fd             	movzx  edi,bp
c0016e9c:	c1 e7 05             	shl    edi,0x5
c0016e9f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016ea3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016ea6:	75 6b                	jne    c0016f13 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016ea8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016eab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016eaf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016eb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016eb6:	52                   	push   edx
c0016eb7:	31 d2                	xor    edx,edx
c0016eb9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016ebc:	52                   	push   edx
c0016ebd:	50                   	push   eax
c0016ebe:	56                   	push   esi
c0016ebf:	e8 ba 64 ff ff       	call   c000d37e <File::seek(unsigned long long)>
c0016ec4:	83 c4 10             	add    esp,0x10
c0016ec7:	85 c0                	test   eax,eax
c0016ec9:	74 17                	je     c0016ee2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016ecb:	83 ec 0c             	sub    esp,0xc
c0016ece:	68 64 5a 02 c0       	push   0xc0025a64
c0016ed3:	e8 db 5d ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016ed8:	83 c4 10             	add    esp,0x10
c0016edb:	31 c0                	xor    eax,eax
c0016edd:	e9 87 00 00 00       	jmp    c0016f69 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016ee2:	83 ec 0c             	sub    esp,0xc
c0016ee5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016ee8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016eeb:	50                   	push   eax
c0016eec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ef0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ef4:	56                   	push   esi
c0016ef5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016ef9:	e8 b3 fb ff ff       	call   c0016ab1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016efe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f02:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016f06:	83 c4 20             	add    esp,0x20
c0016f09:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016f0d:	73 04                	jae    c0016f13 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016f0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f13:	45                   	inc    ebp
c0016f14:	e9 76 ff ff ff       	jmp    c0016e8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016f19:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016f1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016f21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f25:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016f2b:	83 ec 0c             	sub    esp,0xc
c0016f2e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016f34:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016f39:	05 00 10 00 00       	add    eax,0x1000
c0016f3e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016f41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f45:	e8 89 2a ff ff       	call   c00099d3 <free>
c0016f4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f4d:	e8 81 2a ff ff       	call   c00099d3 <free>
c0016f52:	58                   	pop    eax
c0016f53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f57:	e8 77 2a ff ff       	call   c00099d3 <free>
c0016f5c:	89 34 24             	mov    DWORD PTR [esp],esi
c0016f5f:	e8 ba 63 ff ff       	call   c000d31e <File::close()>
c0016f64:	83 c4 10             	add    esp,0x10
c0016f67:	b0 01                	mov    al,0x1
c0016f69:	83 c4 3c             	add    esp,0x3c
c0016f6c:	5b                   	pop    ebx
c0016f6d:	5e                   	pop    esi
c0016f6e:	5f                   	pop    edi
c0016f6f:	5d                   	pop    ebp
c0016f70:	c3                   	ret    

c0016f71 <Thr::runtimeReferenceHelper()>:
c0016f71:	83 ec 18             	sub    esp,0x18
c0016f74:	68 6c 5a 02 c0       	push   0xc0025a6c
c0016f79:	e8 35 5d ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016f7e:	fa                   	cli    
c0016f7f:	83 c4 10             	add    esp,0x10
c0016f82:	eb fe                	jmp    c0016f82 <Thr::runtimeReferenceHelper()+0x11>

c0016f84 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016f84:	57                   	push   edi
c0016f85:	56                   	push   esi
c0016f86:	53                   	push   ebx
c0016f87:	31 db                	xor    ebx,ebx
c0016f89:	39 1d a0 8f 02 c0    	cmp    DWORD PTR ds:0xc0028fa0,ebx
c0016f8f:	7e 3c                	jle    c0016fcd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016f91:	8b 34 9d 20 8f 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd70e0]
c0016f98:	31 ff                	xor    edi,edi
c0016f9a:	39 3c 9d 20 8e 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd71e0],edi
c0016fa1:	7e 27                	jle    c0016fca <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016fa3:	50                   	push   eax
c0016fa4:	50                   	push   eax
c0016fa5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fa9:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fab:	03 04 9d a0 8e 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7160]
c0016fb2:	50                   	push   eax
c0016fb3:	e8 14 98 fe ff       	call   c00007cc <strcmp>
c0016fb8:	83 c4 10             	add    esp,0x10
c0016fbb:	85 c0                	test   eax,eax
c0016fbd:	75 05                	jne    c0016fc4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016fbf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016fc2:	eb 0b                	jmp    c0016fcf <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016fc4:	83 c6 10             	add    esi,0x10
c0016fc7:	47                   	inc    edi
c0016fc8:	eb d0                	jmp    c0016f9a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016fca:	43                   	inc    ebx
c0016fcb:	eb bc                	jmp    c0016f89 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016fcd:	31 c0                	xor    eax,eax
c0016fcf:	5b                   	pop    ebx
c0016fd0:	5e                   	pop    esi
c0016fd1:	5f                   	pop    edi
c0016fd2:	c3                   	ret    

c0016fd3 <Thr::loadKernelSymbolTable(char const*)>:
c0016fd3:	55                   	push   ebp
c0016fd4:	57                   	push   edi
c0016fd5:	56                   	push   esi
c0016fd6:	53                   	push   ebx
c0016fd7:	83 ec 68             	sub    esp,0x68
c0016fda:	8b 35 f0 8f 02 c0    	mov    esi,DWORD PTR ds:0xc0028ff0
c0016fe0:	68 14 01 00 00       	push   0x114
c0016fe5:	e8 d9 29 ff ff       	call   c00099c3 <malloc>
c0016fea:	83 c4 0c             	add    esp,0xc
c0016fed:	89 c3                	mov    ebx,eax
c0016fef:	56                   	push   esi
c0016ff0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016ff4:	50                   	push   eax
c0016ff5:	e8 24 62 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0016ffa:	5e                   	pop    esi
c0016ffb:	5f                   	pop    edi
c0016ffc:	6a 01                	push   0x1
c0016ffe:	53                   	push   ebx
c0016fff:	e8 bc 62 ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c0017004:	83 c4 10             	add    esp,0x10
c0017007:	85 c0                	test   eax,eax
c0017009:	74 0a                	je     c0017015 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001700b:	83 ec 0c             	sub    esp,0xc
c001700e:	68 8e 5a 02 c0       	push   0xc0025a8e
c0017013:	eb 34                	jmp    c0017049 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017015:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001701d:	83 ec 0c             	sub    esp,0xc
c0017020:	6a 34                	push   0x34
c0017022:	e8 9c 29 ff ff       	call   c00099c3 <malloc>
c0017027:	59                   	pop    ecx
c0017028:	89 c7                	mov    edi,eax
c001702a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001702e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017030:	56                   	push   esi
c0017031:	57                   	push   edi
c0017032:	6a 00                	push   0x0
c0017034:	6a 34                	push   0x34
c0017036:	53                   	push   ebx
c0017037:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001703a:	83 c4 20             	add    esp,0x20
c001703d:	85 c0                	test   eax,eax
c001703f:	74 17                	je     c0017058 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017041:	83 ec 0c             	sub    esp,0xc
c0017044:	68 a5 5a 02 c0       	push   0xc0025aa5
c0017049:	e8 11 d8 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001704e:	83 c4 10             	add    esp,0x10
c0017051:	31 c0                	xor    eax,eax
c0017053:	e9 31 02 00 00       	jmp    c0017289 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017058:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001705e:	75 e1                	jne    c0017041 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017060:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017063:	85 c0                	test   eax,eax
c0017065:	74 da                	je     c0017041 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017067:	52                   	push   edx
c0017068:	31 d2                	xor    edx,edx
c001706a:	52                   	push   edx
c001706b:	50                   	push   eax
c001706c:	53                   	push   ebx
c001706d:	e8 0c 63 ff ff       	call   c000d37e <File::seek(unsigned long long)>
c0017072:	83 c4 10             	add    esp,0x10
c0017075:	85 c0                	test   eax,eax
c0017077:	75 c8                	jne    c0017041 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017079:	83 ec 0c             	sub    esp,0xc
c001707c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017080:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017084:	31 ed                	xor    ebp,ebp
c0017086:	0f af c2             	imul   eax,edx
c0017089:	50                   	push   eax
c001708a:	e8 34 29 ff ff       	call   c00099c3 <malloc>
c001708f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017091:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017095:	89 34 24             	mov    DWORD PTR [esp],esi
c0017098:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001709c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00170a0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00170a4:	0f af c2             	imul   eax,edx
c00170a7:	99                   	cdq    
c00170a8:	52                   	push   edx
c00170a9:	50                   	push   eax
c00170aa:	53                   	push   ebx
c00170ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170ae:	83 c4 20             	add    esp,0x20
c00170b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00170b9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00170c1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00170c9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170d1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00170d5:	0f 86 aa 00 00 00    	jbe    c0017185 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00170db:	0f b7 f5             	movzx  esi,bp
c00170de:	6b f6 28             	imul   esi,esi,0x28
c00170e1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00170e5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00170e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170ec:	50                   	push   eax
c00170ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170f1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00170f5:	8b 16                	mov    edx,DWORD PTR [esi]
c00170f7:	6b c0 28             	imul   eax,eax,0x28
c00170fa:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00170fe:	89 d0                	mov    eax,edx
c0017100:	31 d2                	xor    edx,edx
c0017102:	52                   	push   edx
c0017103:	50                   	push   eax
c0017104:	53                   	push   ebx
c0017105:	e8 74 62 ff ff       	call   c000d37e <File::seek(unsigned long long)>
c001710a:	83 c4 0c             	add    esp,0xc
c001710d:	6a 20                	push   0x20
c001710f:	6a 00                	push   0x0
c0017111:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017115:	52                   	push   edx
c0017116:	e8 69 95 fe ff       	call   c0000684 <memset>
c001711b:	58                   	pop    eax
c001711c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001711e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017122:	51                   	push   ecx
c0017123:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017127:	52                   	push   edx
c0017128:	6a 00                	push   0x0
c001712a:	6a 1f                	push   0x1f
c001712c:	53                   	push   ebx
c001712d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017130:	83 c4 18             	add    esp,0x18
c0017133:	68 bc 5a 02 c0       	push   0xc0025abc
c0017138:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001713c:	52                   	push   edx
c001713d:	e8 8a 96 fe ff       	call   c00007cc <strcmp>
c0017142:	83 c4 10             	add    esp,0x10
c0017145:	85 c0                	test   eax,eax
c0017147:	75 0f                	jne    c0017158 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017149:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001714c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017150:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017158:	50                   	push   eax
c0017159:	50                   	push   eax
c001715a:	68 c4 5a 02 c0       	push   0xc0025ac4
c001715f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017163:	50                   	push   eax
c0017164:	e8 63 96 fe ff       	call   c00007cc <strcmp>
c0017169:	83 c4 10             	add    esp,0x10
c001716c:	85 c0                	test   eax,eax
c001716e:	75 0f                	jne    c001717f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017170:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017173:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017177:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001717b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001717f:	45                   	inc    ebp
c0017180:	e9 4c ff ff ff       	jmp    c00170d1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017185:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001718a:	75 10                	jne    c001719c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001718c:	83 ec 0c             	sub    esp,0xc
c001718f:	68 cc 5a 02 c0       	push   0xc0025acc
c0017194:	e8 c6 d6 ff ff       	call   c001485f <Krnl::panic(char const*)>
c0017199:	83 c4 10             	add    esp,0x10
c001719c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00171a1:	75 10                	jne    c00171b3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00171a3:	83 ec 0c             	sub    esp,0xc
c00171a6:	68 cc 5a 02 c0       	push   0xc0025acc
c00171ab:	e8 af d6 ff ff       	call   c001485f <Krnl::panic(char const*)>
c00171b0:	83 c4 10             	add    esp,0x10
c00171b3:	31 d2                	xor    edx,edx
c00171b5:	50                   	push   eax
c00171b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ba:	52                   	push   edx
c00171bb:	50                   	push   eax
c00171bc:	53                   	push   ebx
c00171bd:	e8 bc 61 ff ff       	call   c000d37e <File::seek(unsigned long long)>
c00171c2:	5a                   	pop    edx
c00171c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00171c7:	e8 f7 27 ff ff       	call   c00099c3 <malloc>
c00171cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00171d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171d4:	31 c9                	xor    ecx,ecx
c00171d6:	5e                   	pop    esi
c00171d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00171d9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00171dd:	55                   	push   ebp
c00171de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171e2:	51                   	push   ecx
c00171e3:	52                   	push   edx
c00171e4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00171e8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00171ec:	53                   	push   ebx
c00171ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00171f0:	83 c4 14             	add    esp,0x14
c00171f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171f7:	e8 c7 27 ff ff       	call   c00099c3 <malloc>
c00171fc:	89 c6                	mov    esi,eax
c00171fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017200:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017203:	56                   	push   esi
c0017204:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017208:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001720c:	51                   	push   ecx
c001720d:	52                   	push   edx
c001720e:	53                   	push   ebx
c001720f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017212:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017216:	8b 15 a0 8f 02 c0    	mov    edx,DWORD PTR ds:0xc0028fa0
c001721c:	83 c4 1c             	add    esp,0x1c
c001721f:	c1 e8 04             	shr    eax,0x4
c0017222:	89 04 95 20 8e 02 c0 	mov    DWORD PTR [edx*4-0x3ffd71e0],eax
c0017229:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001722d:	31 d2                	xor    edx,edx
c001722f:	52                   	push   edx
c0017230:	50                   	push   eax
c0017231:	53                   	push   ebx
c0017232:	e8 47 61 ff ff       	call   c000d37e <File::seek(unsigned long long)>
c0017237:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017239:	31 d2                	xor    edx,edx
c001723b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001723e:	56                   	push   esi
c001723f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017243:	52                   	push   edx
c0017244:	50                   	push   eax
c0017245:	53                   	push   ebx
c0017246:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017249:	83 c4 14             	add    esp,0x14
c001724c:	53                   	push   ebx
c001724d:	e8 cc 60 ff ff       	call   c000d31e <File::close()>
c0017252:	5d                   	pop    ebp
c0017253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017257:	e8 77 27 ff ff       	call   c00099d3 <free>
c001725c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001725f:	e8 6f 27 ff ff       	call   c00099d3 <free>
c0017264:	a1 a0 8f 02 c0       	mov    eax,ds:0xc0028fa0
c0017269:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001726d:	8d 50 01             	lea    edx,[eax+0x1]
c0017270:	89 0c 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],ecx
c0017277:	89 34 85 a0 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7160],esi
c001727e:	89 15 a0 8f 02 c0    	mov    DWORD PTR ds:0xc0028fa0,edx
c0017284:	83 c4 10             	add    esp,0x10
c0017287:	b0 01                	mov    al,0x1
c0017289:	83 c4 5c             	add    esp,0x5c
c001728c:	5b                   	pop    ebx
c001728d:	5e                   	pop    esi
c001728e:	5f                   	pop    edi
c001728f:	5d                   	pop    ebp
c0017290:	c3                   	ret    

c0017291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017291:	55                   	push   ebp
c0017292:	57                   	push   edi
c0017293:	56                   	push   esi
c0017294:	53                   	push   ebx
c0017295:	81 ec 68 03 00 00    	sub    esp,0x368
c001729b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00172a2:	8b 1d f0 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ff0
c00172a8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00172ac:	68 14 01 00 00       	push   0x114
c00172b1:	e8 0d 27 ff ff       	call   c00099c3 <malloc>
c00172b6:	83 c4 0c             	add    esp,0xc
c00172b9:	89 c5                	mov    ebp,eax
c00172bb:	53                   	push   ebx
c00172bc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00172c3:	50                   	push   eax
c00172c4:	e8 55 5f ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00172c9:	5e                   	pop    esi
c00172ca:	5f                   	pop    edi
c00172cb:	6a 01                	push   0x1
c00172cd:	55                   	push   ebp
c00172ce:	e8 ed 5f ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c00172d3:	83 c4 10             	add    esp,0x10
c00172d6:	85 c0                	test   eax,eax
c00172d8:	0f 85 a7 06 00 00    	jne    c0017985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172de:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00172e6:	83 ec 0c             	sub    esp,0xc
c00172e9:	6a 34                	push   0x34
c00172eb:	e8 d3 26 ff ff       	call   c00099c3 <malloc>
c00172f0:	5b                   	pop    ebx
c00172f1:	89 c7                	mov    edi,eax
c00172f3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00172f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00172fa:	53                   	push   ebx
c00172fb:	57                   	push   edi
c00172fc:	6a 00                	push   0x0
c00172fe:	6a 34                	push   0x34
c0017300:	55                   	push   ebp
c0017301:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017304:	83 c4 20             	add    esp,0x20
c0017307:	85 c0                	test   eax,eax
c0017309:	0f 85 76 06 00 00    	jne    c0017985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001730f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017315:	0f 85 6a 06 00 00    	jne    c0017985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001731b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001731e:	85 c0                	test   eax,eax
c0017320:	0f 84 5f 06 00 00    	je     c0017985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017326:	31 d2                	xor    edx,edx
c0017328:	51                   	push   ecx
c0017329:	52                   	push   edx
c001732a:	50                   	push   eax
c001732b:	55                   	push   ebp
c001732c:	e8 4d 60 ff ff       	call   c000d37e <File::seek(unsigned long long)>
c0017331:	83 c4 10             	add    esp,0x10
c0017334:	85 c0                	test   eax,eax
c0017336:	0f 85 49 06 00 00    	jne    c0017985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001733c:	83 ec 0c             	sub    esp,0xc
c001733f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017342:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017346:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001734a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001734e:	0f af c2             	imul   eax,edx
c0017351:	50                   	push   eax
c0017352:	e8 6c 26 ff ff       	call   c00099c3 <malloc>
c0017357:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001735a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001735e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017361:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017365:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017369:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001736d:	0f af c2             	imul   eax,edx
c0017370:	99                   	cdq    
c0017371:	52                   	push   edx
c0017372:	50                   	push   eax
c0017373:	55                   	push   ebp
c0017374:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017377:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001737a:	83 c4 20             	add    esp,0x20
c001737d:	85 c0                	test   eax,eax
c001737f:	0f 84 00 06 00 00    	je     c0017985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017385:	52                   	push   edx
c0017386:	31 d2                	xor    edx,edx
c0017388:	52                   	push   edx
c0017389:	50                   	push   eax
c001738a:	55                   	push   ebp
c001738b:	e8 ee 5f ff ff       	call   c000d37e <File::seek(unsigned long long)>
c0017390:	83 c4 10             	add    esp,0x10
c0017393:	85 c0                	test   eax,eax
c0017395:	0f 85 ea 05 00 00    	jne    c0017985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001739b:	83 ec 0c             	sub    esp,0xc
c001739e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00173a2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00173a6:	31 f6                	xor    esi,esi
c00173a8:	0f af c2             	imul   eax,edx
c00173ab:	50                   	push   eax
c00173ac:	e8 12 26 ff ff       	call   c00099c3 <malloc>
c00173b1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00173b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00173bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173bf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00173c3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00173c7:	0f af c2             	imul   eax,edx
c00173ca:	99                   	cdq    
c00173cb:	52                   	push   edx
c00173cc:	50                   	push   eax
c00173cd:	55                   	push   ebp
c00173ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00173d1:	83 c4 20             	add    esp,0x20
c00173d4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00173d8:	0f 86 8a 00 00 00    	jbe    c0017468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00173de:	0f b7 de             	movzx  ebx,si
c00173e1:	c1 e3 05             	shl    ebx,0x5
c00173e4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00173e8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00173eb:	75 75                	jne    c0017462 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00173ed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173f0:	31 d2                	xor    edx,edx
c00173f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00173f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173fd:	50                   	push   eax
c00173fe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017401:	52                   	push   edx
c0017402:	50                   	push   eax
c0017403:	55                   	push   ebp
c0017404:	e8 75 5f ff ff       	call   c000d37e <File::seek(unsigned long long)>
c0017409:	83 c4 10             	add    esp,0x10
c001740c:	85 c0                	test   eax,eax
c001740e:	0f 85 71 05 00 00    	jne    c0017985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017414:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001741b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001741e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017422:	31 d2                	xor    edx,edx
c0017424:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017428:	83 ec 0c             	sub    esp,0xc
c001742b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001742f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017436:	50                   	push   eax
c0017437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001743b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001743f:	52                   	push   edx
c0017440:	50                   	push   eax
c0017441:	55                   	push   ebp
c0017442:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017445:	83 c4 1c             	add    esp,0x1c
c0017448:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001744b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001744e:	50                   	push   eax
c001744f:	6a 00                	push   0x0
c0017451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017455:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017459:	50                   	push   eax
c001745a:	e8 25 92 fe ff       	call   c0000684 <memset>
c001745f:	83 c4 10             	add    esp,0x10
c0017462:	46                   	inc    esi
c0017463:	e9 6c ff ff ff       	jmp    c00173d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017468:	53                   	push   ebx
c0017469:	31 db                	xor    ebx,ebx
c001746b:	68 00 01 00 00       	push   0x100
c0017470:	6a 00                	push   0x0
c0017472:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017476:	50                   	push   eax
c0017477:	e8 08 92 fe ff       	call   c0000684 <memset>
c001747c:	83 c4 0c             	add    esp,0xc
c001747f:	68 00 01 00 00       	push   0x100
c0017484:	6a 00                	push   0x0
c0017486:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001748d:	50                   	push   eax
c001748e:	e8 f1 91 fe ff       	call   c0000684 <memset>
c0017493:	83 c4 10             	add    esp,0x10
c0017496:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001749e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00174a6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00174ae:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00174b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00174be:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00174c2:	0f 86 30 01 00 00    	jbe    c00175f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00174c8:	0f b7 f3             	movzx  esi,bx
c00174cb:	6b f6 28             	imul   esi,esi,0x28
c00174ce:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00174d2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00174d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174d9:	52                   	push   edx
c00174da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174de:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00174e2:	8b 06                	mov    eax,DWORD PTR [esi]
c00174e4:	6b d2 28             	imul   edx,edx,0x28
c00174e7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00174eb:	31 d2                	xor    edx,edx
c00174ed:	52                   	push   edx
c00174ee:	50                   	push   eax
c00174ef:	55                   	push   ebp
c00174f0:	e8 89 5e ff ff       	call   c000d37e <File::seek(unsigned long long)>
c00174f5:	83 c4 0c             	add    esp,0xc
c00174f8:	6a 20                	push   0x20
c00174fa:	6a 00                	push   0x0
c00174fc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017503:	51                   	push   ecx
c0017504:	e8 7b 91 fe ff       	call   c0000684 <memset>
c0017509:	59                   	pop    ecx
c001750a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001750d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017511:	52                   	push   edx
c0017512:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017519:	51                   	push   ecx
c001751a:	6a 00                	push   0x0
c001751c:	6a 1f                	push   0x1f
c001751e:	55                   	push   ebp
c001751f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017522:	83 c4 1c             	add    esp,0x1c
c0017525:	6a 09                	push   0x9
c0017527:	68 e6 5a 02 c0       	push   0xc0025ae6
c001752c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017533:	51                   	push   ecx
c0017534:	e8 47 90 fe ff       	call   c0000580 <memcmp>
c0017539:	83 c4 10             	add    esp,0x10
c001753c:	85 c0                	test   eax,eax
c001753e:	75 21                	jne    c0017561 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017544:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017548:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001754c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017550:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017553:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001755a:	89 d0                	mov    eax,edx
c001755c:	40                   	inc    eax
c001755d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017561:	50                   	push   eax
c0017562:	6a 09                	push   0x9
c0017564:	68 f0 5a 02 c0       	push   0xc0025af0
c0017569:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017570:	50                   	push   eax
c0017571:	e8 0a 90 fe ff       	call   c0000580 <memcmp>
c0017576:	83 c4 10             	add    esp,0x10
c0017579:	85 c0                	test   eax,eax
c001757b:	75 21                	jne    c001759e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001757d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017581:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017585:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017589:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001758d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017590:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017597:	89 d0                	mov    eax,edx
c0017599:	40                   	inc    eax
c001759a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001759e:	50                   	push   eax
c001759f:	50                   	push   eax
c00175a0:	68 bc 5a 02 c0       	push   0xc0025abc
c00175a5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00175ac:	50                   	push   eax
c00175ad:	e8 1a 92 fe ff       	call   c00007cc <strcmp>
c00175b2:	83 c4 10             	add    esp,0x10
c00175b5:	85 c0                	test   eax,eax
c00175b7:	75 0f                	jne    c00175c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00175b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00175bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00175c8:	50                   	push   eax
c00175c9:	50                   	push   eax
c00175ca:	68 c4 5a 02 c0       	push   0xc0025ac4
c00175cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00175d6:	50                   	push   eax
c00175d7:	e8 f0 91 fe ff       	call   c00007cc <strcmp>
c00175dc:	83 c4 10             	add    esp,0x10
c00175df:	85 c0                	test   eax,eax
c00175e1:	75 0f                	jne    c00175f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00175e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00175e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00175ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00175f2:	43                   	inc    ebx
c00175f3:	e9 c6 fe ff ff       	jmp    c00174be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00175f8:	31 d2                	xor    edx,edx
c00175fa:	50                   	push   eax
c00175fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175ff:	52                   	push   edx
c0017600:	50                   	push   eax
c0017601:	55                   	push   ebp
c0017602:	e8 77 5d ff ff       	call   c000d37e <File::seek(unsigned long long)>
c0017607:	58                   	pop    eax
c0017608:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001760c:	e8 b2 23 ff ff       	call   c00099c3 <malloc>
c0017611:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017614:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017618:	31 d2                	xor    edx,edx
c001761a:	58                   	pop    eax
c001761b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001761f:	53                   	push   ebx
c0017620:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017624:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017628:	52                   	push   edx
c0017629:	50                   	push   eax
c001762a:	55                   	push   ebp
c001762b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001762e:	83 c4 14             	add    esp,0x14
c0017631:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017635:	e8 89 23 ff ff       	call   c00099c3 <malloc>
c001763a:	31 d2                	xor    edx,edx
c001763c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017640:	83 c4 0c             	add    esp,0xc
c0017643:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017647:	52                   	push   edx
c0017648:	50                   	push   eax
c0017649:	55                   	push   ebp
c001764a:	e8 2f 5d ff ff       	call   c000d37e <File::seek(unsigned long long)>
c001764f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017652:	31 d2                	xor    edx,edx
c0017654:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017657:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001765b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001765f:	52                   	push   edx
c0017660:	50                   	push   eax
c0017661:	55                   	push   ebp
c0017662:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017665:	83 c4 20             	add    esp,0x20
c0017668:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017670:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017674:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017678:	0f 84 0b 03 00 00    	je     c0017989 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001767e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017685:	31 d2                	xor    edx,edx
c0017687:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001768b:	c1 e8 03             	shr    eax,0x3
c001768e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017692:	51                   	push   ecx
c0017693:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017697:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001769b:	52                   	push   edx
c001769c:	50                   	push   eax
c001769d:	55                   	push   ebp
c001769e:	e8 db 5c ff ff       	call   c000d37e <File::seek(unsigned long long)>
c00176a3:	5b                   	pop    ebx
c00176a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176a8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00176af:	e8 0f 23 ff ff       	call   c00099c3 <malloc>
c00176b4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00176b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176bb:	31 d2                	xor    edx,edx
c00176bd:	5e                   	pop    esi
c00176be:	8d 44 24 58          	lea    eax,[esp+0x58]
c00176c2:	50                   	push   eax
c00176c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176cb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00176d2:	52                   	push   edx
c00176d3:	50                   	push   eax
c00176d4:	55                   	push   ebp
c00176d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176d8:	83 c4 20             	add    esp,0x20
c00176db:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00176e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00176e7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00176eb:	0f 8d 7c 02 00 00    	jge    c001796d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00176f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00176f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176f9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00176fe:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017701:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017709:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001770d:	89 d8                	mov    eax,ebx
c001770f:	c1 e8 08             	shr    eax,0x8
c0017712:	89 c6                	mov    esi,eax
c0017714:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017718:	c1 e6 04             	shl    esi,0x4
c001771b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001771f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017722:	85 d2                	test   edx,edx
c0017724:	0f 85 bf 00 00 00    	jne    c00177e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001772a:	83 ec 0c             	sub    esp,0xc
c001772d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017731:	03 06                	add    eax,DWORD PTR [esi]
c0017733:	50                   	push   eax
c0017734:	e8 4b f8 ff ff       	call   c0016f84 <Thr::getAddressOfKernelSymbol(char const*)>
c0017739:	83 c4 10             	add    esp,0x10
c001773c:	89 c2                	mov    edx,eax
c001773e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017743:	85 c0                	test   eax,eax
c0017745:	0f 85 9e 00 00 00    	jne    c00177e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001774b:	83 ec 0c             	sub    esp,0xc
c001774e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017752:	03 06                	add    eax,DWORD PTR [esi]
c0017754:	50                   	push   eax
c0017755:	e8 b6 11 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c001775a:	83 c4 10             	add    esp,0x10
c001775d:	89 c2                	mov    edx,eax
c001775f:	85 c0                	test   eax,eax
c0017761:	0f 85 82 00 00 00    	jne    c00177e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017767:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001776b:	50                   	push   eax
c001776c:	50                   	push   eax
c001776d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017771:	03 06                	add    eax,DWORD PTR [esi]
c0017773:	50                   	push   eax
c0017774:	68 fa 5a 02 c0       	push   0xc0025afa
c0017779:	e8 35 55 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001777e:	58                   	pop    eax
c001777f:	5a                   	pop    edx
c0017780:	68 14 5b 02 c0       	push   0xc0025b14
c0017785:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001778c:	50                   	push   eax
c001778d:	e8 ae 8f fe ff       	call   c0000740 <strcpy>
c0017792:	59                   	pop    ecx
c0017793:	58                   	pop    eax
c0017794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017798:	03 06                	add    eax,DWORD PTR [esi]
c001779a:	50                   	push   eax
c001779b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00177a2:	50                   	push   eax
c00177a3:	e8 d8 90 fe ff       	call   c0000880 <strcat>
c00177a8:	58                   	pop    eax
c00177a9:	5a                   	pop    edx
c00177aa:	68 aa 5b 02 c0       	push   0xc0025baa
c00177af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00177b6:	50                   	push   eax
c00177b7:	e8 c4 90 fe ff       	call   c0000880 <strcat>
c00177bc:	83 c4 10             	add    esp,0x10
c00177bf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00177c4:	0f 84 5d 01 00 00    	je     c0017927 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00177ca:	83 ec 0c             	sub    esp,0xc
c00177cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00177d4:	50                   	push   eax
c00177d5:	e8 85 d0 ff ff       	call   c001485f <Krnl::panic(char const*)>
c00177da:	83 c4 10             	add    esp,0x10
c00177dd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00177e1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00177e5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00177e9:	80 fb 01             	cmp    bl,0x1
c00177ec:	0f 85 88 00 00 00    	jne    c001787a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00177f2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00177f9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00177fd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017801:	01 ce                	add    esi,ecx
c0017803:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017809:	0f 94 c0             	sete   al
c001780c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017812:	0f 94 c3             	sete   bl
c0017815:	09 c3                	or     ebx,eax
c0017817:	8b 06                	mov    eax,DWORD PTR [esi]
c0017819:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001781e:	74 41                	je     c0017861 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017820:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017823:	84 db                	test   bl,bl
c0017825:	75 15                	jne    c001783c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017827:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001782b:	66 83 f8 0c          	cmp    ax,0xc
c001782f:	76 05                	jbe    c0017836 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017831:	b8 0c 00 00 00       	mov    eax,0xc
c0017836:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001783a:	76 37                	jbe    c0017873 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001783c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017840:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017845:	0f 84 dc 00 00 00    	je     c0017927 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001784b:	83 ec 0c             	sub    esp,0xc
c001784e:	68 2b 5b 02 c0       	push   0xc0025b2b
c0017853:	e8 07 d0 ff ff       	call   c001485f <Krnl::panic(char const*)>
c0017858:	83 c4 10             	add    esp,0x10
c001785b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001785f:	eb 12                	jmp    c0017873 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017861:	01 c1                	add    ecx,eax
c0017863:	84 db                	test   bl,bl
c0017865:	75 0c                	jne    c0017873 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017867:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001786b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001786f:	77 02                	ja     c0017873 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017871:	01 d1                	add    ecx,edx
c0017873:	89 0e                	mov    DWORD PTR [esi],ecx
c0017875:	e9 ea 00 00 00       	jmp    c0017964 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001787a:	80 fb 02             	cmp    bl,0x2
c001787d:	75 7c                	jne    c00178fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001787f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017886:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001788a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001788e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017894:	74 20                	je     c00178b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017896:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001789c:	74 18                	je     c00178b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001789e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00178a2:	b9 0a 00 00 00       	mov    ecx,0xa
c00178a7:	66 83 f8 0e          	cmp    ax,0xe
c00178ab:	77 03                	ja     c00178b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00178ad:	8d 48 fc             	lea    ecx,[eax-0x4]
c00178b0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00178b4:	76 1f                	jbe    c00178d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00178b6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00178ba:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00178bf:	74 66                	je     c0017927 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00178c1:	83 ec 0c             	sub    esp,0xc
c00178c4:	68 47 5b 02 c0       	push   0xc0025b47
c00178c9:	e8 91 cf ff ff       	call   c001485f <Krnl::panic(char const*)>
c00178ce:	83 c4 10             	add    esp,0x10
c00178d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00178d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00178d7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00178dc:	74 13                	je     c00178f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00178de:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178e2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00178e9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00178ed:	01 c8                	add    eax,ecx
c00178ef:	eb 04                	jmp    c00178f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00178f1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00178f5:	01 c2                	add    edx,eax
c00178f7:	89 16                	mov    DWORD PTR [esi],edx
c00178f9:	eb 69                	jmp    c0017964 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00178fb:	0f b6 db             	movzx  ebx,bl
c00178fe:	50                   	push   eax
c00178ff:	50                   	push   eax
c0017900:	53                   	push   ebx
c0017901:	68 63 5b 02 c0       	push   0xc0025b63
c0017906:	e8 a8 53 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001790b:	83 c4 10             	add    esp,0x10
c001790e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017913:	74 12                	je     c0017927 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017915:	83 ec 0c             	sub    esp,0xc
c0017918:	68 6e 5b 02 c0       	push   0xc0025b6e
c001791d:	e8 3d cf ff ff       	call   c001485f <Krnl::panic(char const*)>
c0017922:	83 c4 10             	add    esp,0x10
c0017925:	eb 3d                	jmp    c0017964 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017927:	83 ec 0c             	sub    esp,0xc
c001792a:	55                   	push   ebp
c001792b:	e8 ee 59 ff ff       	call   c000d31e <File::close()>
c0017930:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017933:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017936:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017939:	59                   	pop    ecx
c001793a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001793e:	e8 90 20 ff ff       	call   c00099d3 <free>
c0017943:	5b                   	pop    ebx
c0017944:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017948:	e8 86 20 ff ff       	call   c00099d3 <free>
c001794d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017950:	e8 7e 20 ff ff       	call   c00099d3 <free>
c0017955:	5e                   	pop    esi
c0017956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001795a:	e8 74 20 ff ff       	call   c00099d3 <free>
c001795f:	83 c4 10             	add    esp,0x10
c0017962:	eb 21                	jmp    c0017985 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017964:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017968:	e9 76 fd ff ff       	jmp    c00176e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001796d:	83 ec 0c             	sub    esp,0xc
c0017970:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017974:	e8 5a 20 ff ff       	call   c00099d3 <free>
c0017979:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001797d:	83 c4 10             	add    esp,0x10
c0017980:	e9 eb fc ff ff       	jmp    c0017670 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017985:	31 c0                	xor    eax,eax
c0017987:	eb 33                	jmp    c00179bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017989:	83 ec 0c             	sub    esp,0xc
c001798c:	55                   	push   ebp
c001798d:	e8 8c 59 ff ff       	call   c000d31e <File::close()>
c0017992:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017995:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017998:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001799b:	58                   	pop    eax
c001799c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00179a0:	e8 2e 20 ff ff       	call   c00099d3 <free>
c00179a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00179a8:	e8 26 20 ff ff       	call   c00099d3 <free>
c00179ad:	5a                   	pop    edx
c00179ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179b2:	e8 1c 20 ff ff       	call   c00099d3 <free>
c00179b7:	83 c4 10             	add    esp,0x10
c00179ba:	b0 01                	mov    al,0x1
c00179bc:	81 c4 5c 03 00 00    	add    esp,0x35c
c00179c2:	5b                   	pop    ebx
c00179c3:	5e                   	pop    esi
c00179c4:	5f                   	pop    edi
c00179c5:	5d                   	pop    ebp
c00179c6:	c3                   	ret    

c00179c7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00179c7:	56                   	push   esi
c00179c8:	31 d2                	xor    edx,edx
c00179ca:	53                   	push   ebx
c00179cb:	8b 1d 00 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028800
c00179d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00179d5:	39 d3                	cmp    ebx,edx
c00179d7:	7e 1b                	jle    c00179f4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00179d9:	8b 04 95 20 8a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd75e0]
c00179e0:	39 c8                	cmp    eax,ecx
c00179e2:	77 0d                	ja     c00179f1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00179e4:	8b 34 95 20 88 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd77e0]
c00179eb:	01 c6                	add    esi,eax
c00179ed:	39 ce                	cmp    esi,ecx
c00179ef:	77 05                	ja     c00179f6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00179f1:	42                   	inc    edx
c00179f2:	eb e1                	jmp    c00179d5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00179f4:	31 c0                	xor    eax,eax
c00179f6:	5b                   	pop    ebx
c00179f7:	5e                   	pop    esi
c00179f8:	c3                   	ret    

c00179f9 <Thr::getDriverNameFromAddress(unsigned long)>:
c00179f9:	53                   	push   ebx
c00179fa:	31 c0                	xor    eax,eax
c00179fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017a00:	8b 1d 00 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028800
c0017a06:	39 c3                	cmp    ebx,eax
c0017a08:	7e 22                	jle    c0017a2c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017a0a:	8b 14 85 20 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd75e0]
c0017a11:	39 ca                	cmp    edx,ecx
c0017a13:	77 14                	ja     c0017a29 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017a15:	03 14 85 20 88 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd77e0]
c0017a1c:	39 ca                	cmp    edx,ecx
c0017a1e:	76 09                	jbe    c0017a29 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017a20:	8b 04 85 20 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73e0]
c0017a27:	eb 05                	jmp    c0017a2e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017a29:	40                   	inc    eax
c0017a2a:	eb da                	jmp    c0017a06 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017a2c:	31 c0                	xor    eax,eax
c0017a2e:	5b                   	pop    ebx
c0017a2f:	c3                   	ret    

c0017a30 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017a30:	53                   	push   ebx
c0017a31:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017a35:	53                   	push   ebx
c0017a36:	e8 8c ff ff ff       	call   c00179c7 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017a3b:	5a                   	pop    edx
c0017a3c:	31 d2                	xor    edx,edx
c0017a3e:	85 c0                	test   eax,eax
c0017a40:	74 04                	je     c0017a46 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017a42:	89 da                	mov    edx,ebx
c0017a44:	29 c2                	sub    edx,eax
c0017a46:	89 d0                	mov    eax,edx
c0017a48:	5b                   	pop    ebx
c0017a49:	c3                   	ret    

c0017a4a <Thr::loadDLL(char const*, bool)>:
c0017a4a:	55                   	push   ebp
c0017a4b:	57                   	push   edi
c0017a4c:	56                   	push   esi
c0017a4d:	53                   	push   ebx
c0017a4e:	81 ec 34 01 00 00    	sub    esp,0x134
c0017a54:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017a5b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017a62:	56                   	push   esi
c0017a63:	68 86 5b 02 c0       	push   0xc0025b86
c0017a68:	e8 46 52 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0017a6d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017a74:	e8 4a 1f ff ff       	call   c00099c3 <malloc>
c0017a79:	83 c4 0c             	add    esp,0xc
c0017a7c:	89 c3                	mov    ebx,eax
c0017a7e:	ff 35 f0 8f 02 c0    	push   DWORD PTR ds:0xc0028ff0
c0017a84:	56                   	push   esi
c0017a85:	50                   	push   eax
c0017a86:	e8 93 57 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0017a8b:	83 c4 10             	add    esp,0x10
c0017a8e:	85 db                	test   ebx,ebx
c0017a90:	75 3c                	jne    c0017ace <Thr::loadDLL(char const*, bool)+0x84>
c0017a92:	89 f8                	mov    eax,edi
c0017a94:	84 c0                	test   al,al
c0017a96:	0f 84 d2 01 00 00    	je     c0017c6e <Thr::loadDLL(char const*, bool)+0x224>
c0017a9c:	55                   	push   ebp
c0017a9d:	55                   	push   ebp
c0017a9e:	68 97 5b 02 c0       	push   0xc0025b97
c0017aa3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017aa7:	55                   	push   ebp
c0017aa8:	e8 93 8c fe ff       	call   c0000740 <strcpy>
c0017aad:	58                   	pop    eax
c0017aae:	5a                   	pop    edx
c0017aaf:	56                   	push   esi
c0017ab0:	55                   	push   ebp
c0017ab1:	e8 ca 8d fe ff       	call   c0000880 <strcat>
c0017ab6:	59                   	pop    ecx
c0017ab7:	58                   	pop    eax
c0017ab8:	68 aa 5b 02 c0       	push   0xc0025baa
c0017abd:	55                   	push   ebp
c0017abe:	e8 bd 8d fe ff       	call   c0000880 <strcat>
c0017ac3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ac6:	e8 94 cd ff ff       	call   c001485f <Krnl::panic(char const*)>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	51                   	push   ecx
c0017acf:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017ad3:	50                   	push   eax
c0017ad4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017ad8:	50                   	push   eax
c0017ad9:	53                   	push   ebx
c0017ada:	e8 8d 5a ff ff       	call   c000d56c <File::stat(unsigned long long*, bool*)>
c0017adf:	83 c4 10             	add    esp,0x10
c0017ae2:	85 db                	test   ebx,ebx
c0017ae4:	74 0c                	je     c0017af2 <Thr::loadDLL(char const*, bool)+0xa8>
c0017ae6:	83 ec 0c             	sub    esp,0xc
c0017ae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017aeb:	53                   	push   ebx
c0017aec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017aef:	83 c4 10             	add    esp,0x10
c0017af2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017af7:	75 0a                	jne    c0017b03 <Thr::loadDLL(char const*, bool)+0xb9>
c0017af9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017afd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017b01:	75 3c                	jne    c0017b3f <Thr::loadDLL(char const*, bool)+0xf5>
c0017b03:	89 f8                	mov    eax,edi
c0017b05:	84 c0                	test   al,al
c0017b07:	0f 84 49 01 00 00    	je     c0017c56 <Thr::loadDLL(char const*, bool)+0x20c>
c0017b0d:	51                   	push   ecx
c0017b0e:	51                   	push   ecx
c0017b0f:	68 97 5b 02 c0       	push   0xc0025b97
c0017b14:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017b18:	53                   	push   ebx
c0017b19:	e8 22 8c fe ff       	call   c0000740 <strcpy>
c0017b1e:	5d                   	pop    ebp
c0017b1f:	58                   	pop    eax
c0017b20:	56                   	push   esi
c0017b21:	53                   	push   ebx
c0017b22:	e8 59 8d fe ff       	call   c0000880 <strcat>
c0017b27:	58                   	pop    eax
c0017b28:	5a                   	pop    edx
c0017b29:	68 aa 5b 02 c0       	push   0xc0025baa
c0017b2e:	53                   	push   ebx
c0017b2f:	e8 4c 8d fe ff       	call   c0000880 <strcat>
c0017b34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b37:	e8 23 cd ff ff       	call   c001485f <Krnl::panic(char const*)>
c0017b3c:	83 c4 10             	add    esp,0x10
c0017b3f:	52                   	push   edx
c0017b40:	6a 03                	push   0x3
c0017b42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b46:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017b4a:	05 ff 0f 00 00       	add    eax,0xfff
c0017b4f:	83 d2 00             	adc    edx,0x0
c0017b52:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017b56:	50                   	push   eax
c0017b57:	ff 35 30 7c 02 c0    	push   DWORD PTR ds:0xc0027c30
c0017b5d:	e8 d4 45 ff ff       	call   c000c136 <VAS::allocatePages(int, int)>
c0017b62:	59                   	pop    ecx
c0017b63:	89 c3                	mov    ebx,eax
c0017b65:	5d                   	pop    ebp
c0017b66:	50                   	push   eax
c0017b67:	68 26 3e 02 c0       	push   0xc0023e26
c0017b6c:	e8 42 51 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0017b71:	89 34 24             	mov    DWORD PTR [esp],esi
c0017b74:	e8 27 8b fe ff       	call   c00006a0 <strlen>
c0017b79:	8b 2d 00 88 02 c0    	mov    ebp,DWORD PTR ds:0xc0028800
c0017b7f:	40                   	inc    eax
c0017b80:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b83:	e8 3b 1e ff ff       	call   c00099c3 <malloc>
c0017b88:	89 04 ad 20 8c 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd73e0],eax
c0017b8f:	58                   	pop    eax
c0017b90:	a1 00 88 02 c0       	mov    eax,ds:0xc0028800
c0017b95:	5a                   	pop    edx
c0017b96:	56                   	push   esi
c0017b97:	ff 34 85 20 8c 02 c0 	push   DWORD PTR [eax*4-0x3ffd73e0]
c0017b9e:	e8 9d 8b fe ff       	call   c0000740 <strcpy>
c0017ba3:	a1 00 88 02 c0       	mov    eax,ds:0xc0028800
c0017ba8:	8d 50 01             	lea    edx,[eax+0x1]
c0017bab:	89 1c 85 20 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd75e0],ebx
c0017bb2:	89 15 00 88 02 c0    	mov    DWORD PTR ds:0xc0028800,edx
c0017bb8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bbc:	83 c4 0c             	add    esp,0xc
c0017bbf:	89 14 85 20 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77e0],edx
c0017bc6:	6a 01                	push   0x1
c0017bc8:	53                   	push   ebx
c0017bc9:	56                   	push   esi
c0017bca:	e8 c2 f6 ff ff       	call   c0017291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017bcf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017bdb:	0f 85 89 00 00 00    	jne    c0017c6a <Thr::loadDLL(char const*, bool)+0x220>
c0017be1:	89 f8                	mov    eax,edi
c0017be3:	84 c0                	test   al,al
c0017be5:	74 73                	je     c0017c5a <Thr::loadDLL(char const*, bool)+0x210>
c0017be7:	83 ec 0c             	sub    esp,0xc
c0017bea:	68 ac 5b 02 c0       	push   0xc0025bac
c0017bef:	e8 6b cc ff ff       	call   c001485f <Krnl::panic(char const*)>
c0017bf4:	83 c4 10             	add    esp,0x10
c0017bf7:	eb 61                	jmp    c0017c5a <Thr::loadDLL(char const*, bool)+0x210>
c0017bf9:	50                   	push   eax
c0017bfa:	50                   	push   eax
c0017bfb:	89 e8                	mov    eax,ebp
c0017bfd:	c1 e0 0c             	shl    eax,0xc
c0017c00:	01 d8                	add    eax,ebx
c0017c02:	50                   	push   eax
c0017c03:	ff 35 30 7c 02 c0    	push   DWORD PTR ds:0xc0027c30
c0017c09:	e8 90 40 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c0017c0e:	83 c4 10             	add    esp,0x10
c0017c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c13:	a8 60                	test   al,0x60
c0017c15:	75 11                	jne    c0017c28 <Thr::loadDLL(char const*, bool)+0x1de>
c0017c17:	83 ec 0c             	sub    esp,0xc
c0017c1a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017c1f:	50                   	push   eax
c0017c20:	e8 d2 23 ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c0017c25:	83 c4 10             	add    esp,0x10
c0017c28:	45                   	inc    ebp
c0017c29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c2d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c31:	05 ff 0f 00 00       	add    eax,0xfff
c0017c36:	bf 00 00 00 00       	mov    edi,0x0
c0017c3b:	83 d2 00             	adc    edx,0x0
c0017c3e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017c42:	c1 ea 0c             	shr    edx,0xc
c0017c45:	39 c5                	cmp    ebp,eax
c0017c47:	89 d1                	mov    ecx,edx
c0017c49:	89 f8                	mov    eax,edi
c0017c4b:	19 c8                	sbb    eax,ecx
c0017c4d:	72 aa                	jb     c0017bf9 <Thr::loadDLL(char const*, bool)+0x1af>
c0017c4f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017c54:	75 18                	jne    c0017c6e <Thr::loadDLL(char const*, bool)+0x224>
c0017c56:	31 db                	xor    ebx,ebx
c0017c58:	eb 14                	jmp    c0017c6e <Thr::loadDLL(char const*, bool)+0x224>
c0017c5a:	83 ec 0c             	sub    esp,0xc
c0017c5d:	68 cb 5b 02 c0       	push   0xc0025bcb
c0017c62:	e8 f8 cb ff ff       	call   c001485f <Krnl::panic(char const*)>
c0017c67:	83 c4 10             	add    esp,0x10
c0017c6a:	31 ed                	xor    ebp,ebp
c0017c6c:	eb bb                	jmp    c0017c29 <Thr::loadDLL(char const*, bool)+0x1df>
c0017c6e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017c74:	89 d8                	mov    eax,ebx
c0017c76:	5b                   	pop    ebx
c0017c77:	5e                   	pop    esi
c0017c78:	5f                   	pop    edi
c0017c79:	5d                   	pop    ebp
c0017c7a:	c3                   	ret    

c0017c7b <Thr::executeDLL(unsigned long, void*)>:
c0017c7b:	56                   	push   esi
c0017c7c:	53                   	push   ebx
c0017c7d:	52                   	push   edx
c0017c7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c82:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017c86:	85 db                	test   ebx,ebx
c0017c88:	75 10                	jne    c0017c9a <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017c8a:	83 ec 0c             	sub    esp,0xc
c0017c8d:	68 e7 5b 02 c0       	push   0xc0025be7
c0017c92:	e8 c8 cb ff ff       	call   c001485f <Krnl::panic(char const*)>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	50                   	push   eax
c0017c9b:	50                   	push   eax
c0017c9c:	53                   	push   ebx
c0017c9d:	68 11 5c 02 c0       	push   0xc0025c11
c0017ca2:	e8 0c 50 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0017ca7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017cab:	89 d8                	mov    eax,ebx
c0017cad:	83 c4 14             	add    esp,0x14
c0017cb0:	5b                   	pop    ebx
c0017cb1:	5e                   	pop    esi
c0017cb2:	ff e0                	jmp    eax

c0017cb4 <userModeEntryPoint(void*)>:
c0017cb4:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0017cb9:	48                   	dec    eax
c0017cba:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0017cbf:	75 03                	jne    c0017cc4 <userModeEntryPoint(void*)+0x10>
c0017cc1:	fb                   	sti    
c0017cc2:	66 90                	xchg   ax,ax
c0017cc4:	fb                   	sti    
c0017cc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017ccd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017cd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017cd7:	e9 83 85 fe ff       	jmp    c000025f <goToUsermode>

c0017cdc <changeTSS>:
c0017cdc:	83 ec 14             	sub    esp,0x14
c0017cdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ce4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017ce7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017cec:	c1 e2 15             	shl    edx,0x15
c0017cef:	29 d0                	sub    eax,edx
c0017cf1:	50                   	push   eax
c0017cf2:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0017cf7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017cfd:	05 7c 11 00 00       	add    eax,0x117c
c0017d02:	50                   	push   eax
c0017d03:	e8 d8 35 ff ff       	call   c000b2e0 <TSS::setESP(unsigned long)>
c0017d08:	83 c4 1c             	add    esp,0x1c
c0017d0b:	c3                   	ret    

c0017d0c <switchToThread(ThreadControlBlock*)>:
c0017d0c:	57                   	push   edi
c0017d0d:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c0017d12:	56                   	push   esi
c0017d13:	85 c0                	test   eax,eax
c0017d15:	53                   	push   ebx
c0017d16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017d1a:	0f 85 90 00 00 00    	jne    c0017db0 <switchToThread(ThreadControlBlock*)+0xa4>
c0017d20:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017d23:	3c ff                	cmp    al,0xff
c0017d25:	0f 84 81 00 00 00    	je     c0017dac <switchToThread(ThreadControlBlock*)+0xa0>
c0017d2b:	0f b6 d0             	movzx  edx,al
c0017d2e:	b8 00 04 00 00       	mov    eax,0x400
c0017d33:	29 d0                	sub    eax,edx
c0017d35:	d1 f8                	sar    eax,1
c0017d37:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017d3a:	66 90                	xchg   ax,ax
c0017d3c:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017d3f:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0017d44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d4a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017d51:	74 4d                	je     c0017da0 <switchToThread(ThreadControlBlock*)+0x94>
c0017d53:	0f 31                	rdtsc  
c0017d55:	a3 08 90 02 c0       	mov    ds:0xc0029008,eax
c0017d5a:	89 c6                	mov    esi,eax
c0017d5c:	89 d7                	mov    edi,edx
c0017d5e:	2b 35 f8 8f 02 c0    	sub    esi,DWORD PTR ds:0xc0028ff8
c0017d64:	89 15 0c 90 02 c0    	mov    DWORD PTR ds:0xc002900c,edx
c0017d6a:	1b 3d fc 8f 02 c0    	sbb    edi,DWORD PTR ds:0xc0028ffc
c0017d70:	89 35 00 90 02 c0    	mov    DWORD PTR ds:0xc0029000,esi
c0017d76:	a3 f8 8f 02 c0       	mov    ds:0xc0028ff8,eax
c0017d7b:	89 3d 04 90 02 c0    	mov    DWORD PTR ds:0xc0029004,edi
c0017d81:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017d87:	89 15 fc 8f 02 c0    	mov    DWORD PTR ds:0xc0028ffc,edx
c0017d8d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017d90:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0017d93:	01 c6                	add    esi,eax
c0017d95:	11 d7                	adc    edi,edx
c0017d97:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017d9a:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0017da0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017da4:	5b                   	pop    ebx
c0017da5:	5e                   	pop    esi
c0017da6:	5f                   	pop    edi
c0017da7:	e9 eb 84 fe ff       	jmp    c0000297 <switchToThreadASM>
c0017dac:	31 c0                	xor    eax,eax
c0017dae:	eb 8c                	jmp    c0017d3c <switchToThread(ThreadControlBlock*)+0x30>
c0017db0:	5b                   	pop    ebx
c0017db1:	c7 05 c0 8f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x1
c0017dbb:	5e                   	pop    esi
c0017dbc:	5f                   	pop    edi
c0017dbd:	c3                   	ret    
c0017dbe:	66 90                	xchg   ax,ax

c0017dc0 <Process::addArgs(char**)>:
c0017dc0:	57                   	push   edi
c0017dc1:	56                   	push   esi
c0017dc2:	53                   	push   ebx
c0017dc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017dc7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017dcb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017dd5:	85 ff                	test   edi,edi
c0017dd7:	74 43                	je     c0017e1c <Process::addArgs(char**)+0x5c>
c0017dd9:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ddb:	85 c0                	test   eax,eax
c0017ddd:	74 3d                	je     c0017e1c <Process::addArgs(char**)+0x5c>
c0017ddf:	31 db                	xor    ebx,ebx
c0017de1:	8d 76 00             	lea    esi,[esi+0x0]
c0017de4:	83 ec 0c             	sub    esp,0xc
c0017de7:	50                   	push   eax
c0017de8:	e8 b3 88 fe ff       	call   c00006a0 <strlen>
c0017ded:	40                   	inc    eax
c0017dee:	89 04 24             	mov    DWORD PTR [esp],eax
c0017df1:	e8 cd 1b ff ff       	call   c00099c3 <malloc>
c0017df6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017dfd:	5a                   	pop    edx
c0017dfe:	59                   	pop    ecx
c0017dff:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017e02:	43                   	inc    ebx
c0017e03:	50                   	push   eax
c0017e04:	e8 37 89 fe ff       	call   c0000740 <strcpy>
c0017e09:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017e0f:	83 c4 10             	add    esp,0x10
c0017e12:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017e15:	85 c0                	test   eax,eax
c0017e17:	75 cb                	jne    c0017de4 <Process::addArgs(char**)+0x24>
c0017e19:	8d 76 00             	lea    esi,[esi+0x0]
c0017e1c:	5b                   	pop    ebx
c0017e1d:	5e                   	pop    esi
c0017e1e:	5f                   	pop    edi
c0017e1f:	c3                   	ret    

c0017e20 <Process::Process(char const*, Process*, char**)>:
c0017e20:	56                   	push   esi
c0017e21:	53                   	push   ebx
c0017e22:	83 ec 14             	sub    esp,0x14
c0017e25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e29:	05 0c 02 00 00       	add    eax,0x20c
c0017e2e:	bb 07 00 00 00       	mov    ebx,0x7
c0017e33:	89 c6                	mov    esi,eax
c0017e35:	8d 76 00             	lea    esi,[esi+0x0]
c0017e38:	85 db                	test   ebx,ebx
c0017e3a:	78 14                	js     c0017e50 <Process::Process(char const*, Process*, char**)+0x30>
c0017e3c:	83 ec 0c             	sub    esp,0xc
c0017e3f:	56                   	push   esi
c0017e40:	e8 9b ae 00 00       	call   c0022ce0 <ThreadControlBlock::ThreadControlBlock()>
c0017e45:	83 c4 10             	add    esp,0x10
c0017e48:	83 c6 5f             	add    esi,0x5f
c0017e4b:	4b                   	dec    ebx
c0017e4c:	eb ea                	jmp    c0017e38 <Process::Process(char const*, Process*, char**)+0x18>
c0017e4e:	66 90                	xchg   ax,ax
c0017e50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e54:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017e5b:	83 ec 0c             	sub    esp,0xc
c0017e5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e62:	e8 81 c8 ff ff       	call   c00146e8 <Krnl::newProcessEnv(Process*)>
c0017e67:	83 c4 10             	add    esp,0x10
c0017e6a:	89 c2                	mov    edx,eax
c0017e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e70:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e7a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017e83:	a1 30 75 02 c0       	mov    eax,ds:0xc0027530
c0017e88:	8d 50 01             	lea    edx,[eax+0x1]
c0017e8b:	89 15 30 75 02 c0    	mov    DWORD PTR ds:0xc0027530,edx
c0017e91:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e95:	89 02                	mov    DWORD PTR [edx],eax
c0017e97:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017e9f:	83 ec 0c             	sub    esp,0xc
c0017ea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ea6:	e8 18 1b ff ff       	call   c00099c3 <malloc>
c0017eab:	83 c4 10             	add    esp,0x10
c0017eae:	89 c3                	mov    ebx,eax
c0017eb0:	83 ec 08             	sub    esp,0x8
c0017eb3:	6a 00                	push   0x0
c0017eb5:	53                   	push   ebx
c0017eb6:	e8 23 46 ff ff       	call   c000c4de <VAS::VAS(bool)>
c0017ebb:	83 c4 10             	add    esp,0x10
c0017ebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ecc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ede:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017eee:	85 c0                	test   eax,eax
c0017ef0:	74 42                	je     c0017f34 <Process::Process(char const*, Process*, char**)+0x114>
c0017ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017efc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f06:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f10:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017f16:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f20:	05 0c 01 00 00       	add    eax,0x10c
c0017f25:	83 ec 08             	sub    esp,0x8
c0017f28:	52                   	push   edx
c0017f29:	50                   	push   eax
c0017f2a:	e8 11 88 fe ff       	call   c0000740 <strcpy>
c0017f2f:	83 c4 10             	add    esp,0x10
c0017f32:	eb 64                	jmp    c0017f98 <Process::Process(char const*, Process*, char**)+0x178>
c0017f34:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017f3c:	83 ec 0c             	sub    esp,0xc
c0017f3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f43:	e8 7b 1a ff ff       	call   c00099c3 <malloc>
c0017f48:	83 c4 10             	add    esp,0x10
c0017f4b:	89 c3                	mov    ebx,eax
c0017f4d:	83 ec 08             	sub    esp,0x8
c0017f50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f54:	53                   	push   ebx
c0017f55:	e8 96 30 ff ff       	call   c000aff0 <VgaText::VgaText(char const*)>
c0017f5a:	83 c4 10             	add    esp,0x10
c0017f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f61:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f71:	83 ec 0c             	sub    esp,0xc
c0017f74:	50                   	push   eax
c0017f75:	e8 35 28 ff ff       	call   c000a7af <addToTerminalCycle(VgaText*)>
c0017f7a:	83 c4 10             	add    esp,0x10
c0017f7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f81:	05 0c 01 00 00       	add    eax,0x10c
c0017f86:	83 ec 08             	sub    esp,0x8
c0017f89:	68 30 5c 02 c0       	push   0xc0025c30
c0017f8e:	50                   	push   eax
c0017f8f:	e8 ac 87 fe ff       	call   c0000740 <strcpy>
c0017f94:	83 c4 10             	add    esp,0x10
c0017f97:	90                   	nop
c0017f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f9c:	83 c0 0c             	add    eax,0xc
c0017f9f:	83 ec 08             	sub    esp,0x8
c0017fa2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fa6:	50                   	push   eax
c0017fa7:	e8 94 87 fe ff       	call   c0000740 <strcpy>
c0017fac:	83 c4 10             	add    esp,0x10
c0017faf:	83 ec 08             	sub    esp,0x8
c0017fb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017fb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fba:	e8 01 fe ff ff       	call   c0017dc0 <Process::addArgs(char**)>
c0017fbf:	83 c4 10             	add    esp,0x10
c0017fc2:	83 ec 08             	sub    esp,0x8
c0017fc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fcd:	e8 89 ed ff ff       	call   c0016d5b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017fd2:	83 c4 10             	add    esp,0x10
c0017fd5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017fd9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017fdd:	83 f0 01             	xor    eax,0x1
c0017fe0:	88 c2                	mov    dl,al
c0017fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017fec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017ff1:	83 ec 08             	sub    esp,0x8
c0017ff4:	50                   	push   eax
c0017ff5:	68 88 5c 02 c0       	push   0xc0025c88
c0017ffa:	e8 b4 4c ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0017fff:	83 c4 10             	add    esp,0x10
c0018002:	90                   	nop
c0018003:	83 c4 14             	add    esp,0x14
c0018006:	5b                   	pop    ebx
c0018007:	5e                   	pop    esi
c0018008:	c3                   	ret    
c0018009:	90                   	nop
c001800a:	66 90                	xchg   ax,ax

c001800c <Process::Process(bool, char const*, Process*, char**)>:
c001800c:	56                   	push   esi
c001800d:	53                   	push   ebx
c001800e:	83 ec 24             	sub    esp,0x24
c0018011:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018015:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018019:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001801d:	05 0c 02 00 00       	add    eax,0x20c
c0018022:	bb 07 00 00 00       	mov    ebx,0x7
c0018027:	89 c6                	mov    esi,eax
c0018029:	8d 76 00             	lea    esi,[esi+0x0]
c001802c:	85 db                	test   ebx,ebx
c001802e:	78 14                	js     c0018044 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018030:	83 ec 0c             	sub    esp,0xc
c0018033:	56                   	push   esi
c0018034:	e8 a7 ac 00 00       	call   c0022ce0 <ThreadControlBlock::ThreadControlBlock()>
c0018039:	83 c4 10             	add    esp,0x10
c001803c:	83 c6 5f             	add    esi,0x5f
c001803f:	4b                   	dec    ebx
c0018040:	eb ea                	jmp    c001802c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018042:	66 90                	xchg   ax,ax
c0018044:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018048:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001804f:	83 ec 0c             	sub    esp,0xc
c0018052:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018056:	e8 8d c6 ff ff       	call   c00146e8 <Krnl::newProcessEnv(Process*)>
c001805b:	83 c4 10             	add    esp,0x10
c001805e:	89 c2                	mov    edx,eax
c0018060:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018064:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001806a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001806e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018077:	a1 30 75 02 c0       	mov    eax,ds:0xc0027530
c001807c:	8d 50 01             	lea    edx,[eax+0x1]
c001807f:	89 15 30 75 02 c0    	mov    DWORD PTR ds:0xc0027530,edx
c0018085:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018089:	89 02                	mov    DWORD PTR [edx],eax
c001808b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018093:	83 ec 0c             	sub    esp,0xc
c0018096:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001809a:	e8 24 19 ff ff       	call   c00099c3 <malloc>
c001809f:	83 c4 10             	add    esp,0x10
c00180a2:	89 c3                	mov    ebx,eax
c00180a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00180a9:	83 ec 08             	sub    esp,0x8
c00180ac:	50                   	push   eax
c00180ad:	53                   	push   ebx
c00180ae:	e8 2b 44 ff ff       	call   c000c4de <VAS::VAS(bool)>
c00180b3:	83 c4 10             	add    esp,0x10
c00180b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180ba:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00180c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180c4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00180ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00180d6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00180dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00180e6:	85 c0                	test   eax,eax
c00180e8:	74 42                	je     c001812c <Process::Process(bool, char const*, Process*, char**)+0x120>
c00180ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180ee:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00180f4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00180fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180fe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018104:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018108:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001810e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018114:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018118:	05 0c 01 00 00       	add    eax,0x10c
c001811d:	83 ec 08             	sub    esp,0x8
c0018120:	52                   	push   edx
c0018121:	50                   	push   eax
c0018122:	e8 19 86 fe ff       	call   c0000740 <strcpy>
c0018127:	83 c4 10             	add    esp,0x10
c001812a:	eb 64                	jmp    c0018190 <Process::Process(bool, char const*, Process*, char**)+0x184>
c001812c:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0018134:	83 ec 0c             	sub    esp,0xc
c0018137:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001813b:	e8 83 18 ff ff       	call   c00099c3 <malloc>
c0018140:	83 c4 10             	add    esp,0x10
c0018143:	89 c3                	mov    ebx,eax
c0018145:	83 ec 08             	sub    esp,0x8
c0018148:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001814c:	53                   	push   ebx
c001814d:	e8 9e 2e ff ff       	call   c000aff0 <VgaText::VgaText(char const*)>
c0018152:	83 c4 10             	add    esp,0x10
c0018155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018159:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001815f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018163:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018169:	83 ec 0c             	sub    esp,0xc
c001816c:	50                   	push   eax
c001816d:	e8 3d 26 ff ff       	call   c000a7af <addToTerminalCycle(VgaText*)>
c0018172:	83 c4 10             	add    esp,0x10
c0018175:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018179:	05 0c 01 00 00       	add    eax,0x10c
c001817e:	83 ec 08             	sub    esp,0x8
c0018181:	68 30 5c 02 c0       	push   0xc0025c30
c0018186:	50                   	push   eax
c0018187:	e8 b4 85 fe ff       	call   c0000740 <strcpy>
c001818c:	83 c4 10             	add    esp,0x10
c001818f:	90                   	nop
c0018190:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018194:	83 c0 0c             	add    eax,0xc
c0018197:	83 ec 08             	sub    esp,0x8
c001819a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001819e:	50                   	push   eax
c001819f:	e8 9c 85 fe ff       	call   c0000740 <strcpy>
c00181a4:	83 c4 10             	add    esp,0x10
c00181a7:	83 ec 08             	sub    esp,0x8
c00181aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00181ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00181b2:	e8 09 fc ff ff       	call   c0017dc0 <Process::addArgs(char**)>
c00181b7:	83 c4 10             	add    esp,0x10
c00181ba:	90                   	nop
c00181bb:	83 c4 24             	add    esp,0x24
c00181be:	5b                   	pop    ebx
c00181bf:	5e                   	pop    esi
c00181c0:	c3                   	ret    
c00181c1:	8d 76 00             	lea    esi,[esi+0x0]

c00181c4 <taskStartupFunction>:
c00181c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181c9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00181cc:	c3                   	ret    
c00181cd:	90                   	nop
c00181ce:	66 90                	xchg   ax,ax

c00181d0 <Semaphore::Semaphore(int)>:
c00181d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00181d8:	89 10                	mov    DWORD PTR [eax],edx
c00181da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181de:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00181f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00181fb:	90                   	nop
c00181fc:	c3                   	ret    
c00181fd:	90                   	nop
c00181fe:	66 90                	xchg   ax,ax

c0018200 <Mutex::Mutex()>:
c0018200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018204:	6a 01                	push   0x1
c0018206:	50                   	push   eax
c0018207:	e8 c4 ff ff ff       	call   c00181d0 <Semaphore::Semaphore(int)>
c001820c:	83 c4 08             	add    esp,0x8
c001820f:	90                   	nop
c0018210:	c3                   	ret    
c0018211:	90                   	nop
c0018212:	66 90                	xchg   ax,ax

c0018214 <Process::createThread(void (*)(void*), void*, int)>:
c0018214:	57                   	push   edi
c0018215:	31 c9                	xor    ecx,ecx
c0018217:	56                   	push   esi
c0018218:	53                   	push   ebx
c0018219:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001821d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018224:	89 f2                	mov    edx,esi
c0018226:	66 90                	xchg   ax,ax
c0018228:	0f b7 c2             	movzx  eax,dx
c001822b:	83 e2 01             	and    edx,0x1
c001822e:	74 14                	je     c0018244 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018230:	d1 f8                	sar    eax,1
c0018232:	41                   	inc    ecx
c0018233:	89 c2                	mov    edx,eax
c0018235:	83 f9 10             	cmp    ecx,0x10
c0018238:	75 ee                	jne    c0018228 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001823a:	31 db                	xor    ebx,ebx
c001823c:	89 d8                	mov    eax,ebx
c001823e:	5b                   	pop    ebx
c001823f:	5e                   	pop    esi
c0018240:	5f                   	pop    edi
c0018241:	c3                   	ret    
c0018242:	66 90                	xchg   ax,ax
c0018244:	b8 01 00 00 00       	mov    eax,0x1
c0018249:	d3 e0                	shl    eax,cl
c001824b:	09 c6                	or     esi,eax
c001824d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018250:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018257:	01 c0                	add    eax,eax
c0018259:	01 c8                	add    eax,ecx
c001825b:	8d 04 80             	lea    eax,[eax+eax*4]
c001825e:	01 d8                	add    eax,ebx
c0018260:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018267:	75 0b                	jne    c0018274 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018269:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018273:	90                   	nop
c0018274:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001827a:	83 ec 08             	sub    esp,0x8
c001827d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018280:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018283:	01 c0                	add    eax,eax
c0018285:	01 c8                	add    eax,ecx
c0018287:	8d 3c 80             	lea    edi,[eax+eax*4]
c001828a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001828d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018293:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018299:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001829d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00182a3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00182a9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00182b0:	89 ca                	mov    edx,ecx
c00182b2:	f7 da                	neg    edx
c00182b4:	c1 e2 15             	shl    edx,0x15
c00182b7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00182bd:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00182c3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00182c7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00182d1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00182d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00182db:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00182e1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00182eb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00182f5:	53                   	push   ebx
c00182f6:	68 e4 8f 02 c0       	push   0xc0028fe4
c00182fb:	e8 80 a7 00 00       	call   c0022a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018300:	83 c4 10             	add    esp,0x10
c0018303:	89 d8                	mov    eax,ebx
c0018305:	5b                   	pop    ebx
c0018306:	5e                   	pop    esi
c0018307:	5f                   	pop    edi
c0018308:	c3                   	ret    
c0018309:	90                   	nop
c001830a:	66 90                	xchg   ax,ax

c001830c <Process::createUserThread()>:
c001830c:	83 ec 0c             	sub    esp,0xc
c001830f:	68 80 00 00 00       	push   0x80
c0018314:	6a 00                	push   0x0
c0018316:	68 b4 7c 01 c0       	push   0xc0017cb4
c001831b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001831f:	e8 f0 fe ff ff       	call   c0018214 <Process::createThread(void (*)(void*), void*, int)>
c0018324:	83 c4 1c             	add    esp,0x1c
c0018327:	c3                   	ret    

c0018328 <setupMultitasking(void (*)())>:
c0018328:	56                   	push   esi
c0018329:	53                   	push   ebx
c001832a:	51                   	push   ecx
c001832b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001832f:	eb 13                	jmp    c0018344 <setupMultitasking(void (*)())+0x1c>
c0018331:	8d 76 00             	lea    esi,[esi+0x0]
c0018334:	83 ec 0c             	sub    esp,0xc
c0018337:	68 e4 8f 02 c0       	push   0xc0028fe4
c001833c:	e8 87 a6 00 00       	call   c00229c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018341:	83 c4 10             	add    esp,0x10
c0018344:	83 ec 0c             	sub    esp,0xc
c0018347:	68 e4 8f 02 c0       	push   0xc0028fe4
c001834c:	e8 53 a6 00 00       	call   c00229a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018351:	83 c4 10             	add    esp,0x10
c0018354:	84 c0                	test   al,al
c0018356:	74 dc                	je     c0018334 <setupMultitasking(void (*)())+0xc>
c0018358:	83 ec 0c             	sub    esp,0xc
c001835b:	68 1f 07 00 00       	push   0x71f
c0018360:	e8 5e 16 ff ff       	call   c00099c3 <malloc>
c0018365:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001836c:	89 c3                	mov    ebx,eax
c001836e:	6a 00                	push   0x0
c0018370:	68 34 5c 02 c0       	push   0xc0025c34
c0018375:	6a 01                	push   0x1
c0018377:	50                   	push   eax
c0018378:	e8 8f fc ff ff       	call   c001800c <Process::Process(bool, char const*, Process*, char**)>
c001837d:	83 c4 14             	add    esp,0x14
c0018380:	89 1d f0 8f 02 c0    	mov    DWORD PTR ds:0xc0028ff0,ebx
c0018386:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c001838c:	e8 2c 27 ff ff       	call   c000aabd <setActiveTerminal(VgaText*)>
c0018391:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018399:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00183a3:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00183a9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00183ac:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00183b6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00183bc:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00183c2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00183cc:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00183d6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00183e0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00183e6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00183f0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00183f6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018400:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018406:	58                   	pop    eax
c0018407:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001840d:	5a                   	pop    edx
c001840e:	68 30 5c 02 c0       	push   0xc0025c30
c0018413:	50                   	push   eax
c0018414:	e8 27 83 fe ff       	call   c0000740 <strcpy>
c0018419:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018420:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018424:	83 c4 14             	add    esp,0x14
c0018427:	5b                   	pop    ebx
c0018428:	5e                   	pop    esi
c0018429:	e9 5b 7e fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c001842e:	66 90                	xchg   ax,ax

c0018430 <schedule()>:
c0018430:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c0018435:	85 c0                	test   eax,eax
c0018437:	74 0b                	je     c0018444 <schedule()+0x14>
c0018439:	c7 05 c0 8f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x1
c0018443:	c3                   	ret    
c0018444:	53                   	push   ebx
c0018445:	83 ec 14             	sub    esp,0x14
c0018448:	68 e4 8f 02 c0       	push   0xc0028fe4
c001844d:	e8 52 a5 00 00       	call   c00229a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	84 c0                	test   al,al
c0018457:	75 3b                	jne    c0018494 <schedule()+0x64>
c0018459:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001845e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018461:	4a                   	dec    edx
c0018462:	74 38                	je     c001849c <schedule()+0x6c>
c0018464:	83 ec 0c             	sub    esp,0xc
c0018467:	68 e4 8f 02 c0       	push   0xc0028fe4
c001846c:	e8 4f a5 00 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018471:	c7 04 24 e4 8f 02 c0 	mov    DWORD PTR [esp],0xc0028fe4
c0018478:	89 c3                	mov    ebx,eax
c001847a:	e8 49 a5 00 00       	call   c00229c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001847f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018486:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018489:	e8 7e f8 ff ff       	call   c0017d0c <switchToThread(ThreadControlBlock*)>
c001848e:	83 c4 10             	add    esp,0x10
c0018491:	8d 76 00             	lea    esi,[esi+0x0]
c0018494:	83 c4 08             	add    esp,0x8
c0018497:	5b                   	pop    ebx
c0018498:	c3                   	ret    
c0018499:	8d 76 00             	lea    esi,[esi+0x0]
c001849c:	83 ec 08             	sub    esp,0x8
c001849f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00184a6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00184ac:	68 e4 8f 02 c0       	push   0xc0028fe4
c00184b1:	e8 ca a5 00 00       	call   c0022a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00184b6:	83 c4 10             	add    esp,0x10
c00184b9:	eb a9                	jmp    c0018464 <schedule()+0x34>
c00184bb:	90                   	nop

c00184bc <Semaphore::tryAcquire()>:
c00184bc:	53                   	push   ebx
c00184bd:	83 ec 08             	sub    esp,0x8
c00184c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184c4:	fa                   	cli    
c00184c5:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c00184ca:	8d 50 01             	lea    edx,[eax+0x1]
c00184cd:	89 15 c8 8f 02 c0    	mov    DWORD PTR ds:0xc0028fc8,edx
c00184d3:	8b 15 c4 8f 02 c0    	mov    edx,DWORD PTR ds:0xc0028fc4
c00184d9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00184dc:	89 1d c4 8f 02 c0    	mov    DWORD PTR ds:0xc0028fc4,ebx
c00184e2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00184e5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00184e7:	7c 33                	jl     c001851c <Semaphore::tryAcquire()+0x60>
c00184e9:	89 15 c4 8f 02 c0    	mov    DWORD PTR ds:0xc0028fc4,edx
c00184ef:	85 d2                	test   edx,edx
c00184f1:	75 0d                	jne    c0018500 <Semaphore::tryAcquire()+0x44>
c00184f3:	8b 15 c0 8f 02 c0    	mov    edx,DWORD PTR ds:0xc0028fc0
c00184f9:	85 d2                	test   edx,edx
c00184fb:	75 6b                	jne    c0018568 <Semaphore::tryAcquire()+0xac>
c00184fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018500:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0018505:	85 c0                	test   eax,eax
c0018507:	74 0b                	je     c0018514 <Semaphore::tryAcquire()+0x58>
c0018509:	8d 76 00             	lea    esi,[esi+0x0]
c001850c:	31 c0                	xor    eax,eax
c001850e:	83 c4 08             	add    esp,0x8
c0018511:	5b                   	pop    ebx
c0018512:	c3                   	ret    
c0018513:	90                   	nop
c0018514:	fb                   	sti    
c0018515:	83 c4 08             	add    esp,0x8
c0018518:	5b                   	pop    ebx
c0018519:	c3                   	ret    
c001851a:	66 90                	xchg   ax,ax
c001851c:	43                   	inc    ebx
c001851d:	89 15 c4 8f 02 c0    	mov    DWORD PTR ds:0xc0028fc4,edx
c0018523:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0018526:	85 d2                	test   edx,edx
c0018528:	75 22                	jne    c001854c <Semaphore::tryAcquire()+0x90>
c001852a:	8b 0d c0 8f 02 c0    	mov    ecx,DWORD PTR ds:0xc0028fc0
c0018530:	85 c9                	test   ecx,ecx
c0018532:	74 18                	je     c001854c <Semaphore::tryAcquire()+0x90>
c0018534:	c7 05 c0 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x0
c001853e:	e8 ed fe ff ff       	call   c0018430 <schedule()>
c0018543:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018548:	48                   	dec    eax
c0018549:	8d 76 00             	lea    esi,[esi+0x0]
c001854c:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0018551:	85 c0                	test   eax,eax
c0018553:	75 0b                	jne    c0018560 <Semaphore::tryAcquire()+0xa4>
c0018555:	fb                   	sti    
c0018556:	b0 01                	mov    al,0x1
c0018558:	83 c4 08             	add    esp,0x8
c001855b:	5b                   	pop    ebx
c001855c:	c3                   	ret    
c001855d:	8d 76 00             	lea    esi,[esi+0x0]
c0018560:	b0 01                	mov    al,0x1
c0018562:	83 c4 08             	add    esp,0x8
c0018565:	5b                   	pop    ebx
c0018566:	c3                   	ret    
c0018567:	90                   	nop
c0018568:	c7 05 c0 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x0
c0018572:	e8 b9 fe ff ff       	call   c0018430 <schedule()>
c0018577:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c001857c:	48                   	dec    eax
c001857d:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0018582:	85 c0                	test   eax,eax
c0018584:	75 86                	jne    c001850c <Semaphore::tryAcquire()+0x50>
c0018586:	eb 8c                	jmp    c0018514 <Semaphore::tryAcquire()+0x58>

c0018588 <Semaphore::assertLocked(char const*)>:
c0018588:	83 ec 0c             	sub    esp,0xc
c001858b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001858f:	fa                   	cli    
c0018590:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0018596:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c001859b:	8d 48 01             	lea    ecx,[eax+0x1]
c001859e:	89 0d c4 8f 02 c0    	mov    DWORD PTR ds:0xc0028fc4,ecx
c00185a4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00185a6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00185a9:	7c 29                	jl     c00185d4 <Semaphore::assertLocked(char const*)+0x4c>
c00185ab:	90                   	nop
c00185ac:	a3 c4 8f 02 c0       	mov    ds:0xc0028fc4,eax
c00185b1:	85 c0                	test   eax,eax
c00185b3:	75 0b                	jne    c00185c0 <Semaphore::assertLocked(char const*)+0x38>
c00185b5:	a1 c0 8f 02 c0       	mov    eax,ds:0xc0028fc0
c00185ba:	85 c0                	test   eax,eax
c00185bc:	75 2e                	jne    c00185ec <Semaphore::assertLocked(char const*)+0x64>
c00185be:	66 90                	xchg   ax,ax
c00185c0:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c00185c5:	48                   	dec    eax
c00185c6:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c00185cb:	75 03                	jne    c00185d0 <Semaphore::assertLocked(char const*)+0x48>
c00185cd:	fb                   	sti    
c00185ce:	66 90                	xchg   ax,ax
c00185d0:	83 c4 0c             	add    esp,0xc
c00185d3:	c3                   	ret    
c00185d4:	83 ec 0c             	sub    esp,0xc
c00185d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00185db:	e8 7f c2 ff ff       	call   c001485f <Krnl::panic(char const*)>
c00185e0:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c00185e5:	83 c4 10             	add    esp,0x10
c00185e8:	48                   	dec    eax
c00185e9:	eb c1                	jmp    c00185ac <Semaphore::assertLocked(char const*)+0x24>
c00185eb:	90                   	nop
c00185ec:	c7 05 c0 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x0
c00185f6:	e8 35 fe ff ff       	call   c0018430 <schedule()>
c00185fb:	eb c3                	jmp    c00185c0 <Semaphore::assertLocked(char const*)+0x38>
c00185fd:	8d 76 00             	lea    esi,[esi+0x0]

c0018600 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018600:	83 ec 0c             	sub    esp,0xc
c0018603:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001860c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001860f:	e8 1c fe ff ff       	call   c0018430 <schedule()>
c0018614:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018619:	48                   	dec    eax
c001861a:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c001861f:	75 03                	jne    c0018624 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018621:	fb                   	sti    
c0018622:	66 90                	xchg   ax,ax
c0018624:	83 c4 0c             	add    esp,0xc
c0018627:	c3                   	ret    

c0018628 <blockTask(TaskState)>:
c0018628:	83 ec 0c             	sub    esp,0xc
c001862b:	fa                   	cli    
c001862c:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0018632:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018636:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001863b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001863e:	e8 ed fd ff ff       	call   c0018430 <schedule()>
c0018643:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018648:	48                   	dec    eax
c0018649:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c001864e:	75 04                	jne    c0018654 <blockTask(TaskState)+0x2c>
c0018650:	fb                   	sti    
c0018651:	8d 76 00             	lea    esi,[esi+0x0]
c0018654:	83 c4 0c             	add    esp,0xc
c0018657:	c3                   	ret    

c0018658 <waitTask(int, int*, int)>:
c0018658:	83 ec 18             	sub    esp,0x18
c001865b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018660:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018664:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018667:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001866b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018670:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018673:	6a 07                	push   0x7
c0018675:	e8 ae ff ff ff       	call   c0018628 <blockTask(TaskState)>
c001867a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001867f:	83 c4 10             	add    esp,0x10
c0018682:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018685:	85 d2                	test   edx,edx
c0018687:	74 0b                	je     c0018694 <waitTask(int, int*, int)+0x3c>
c0018689:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001868c:	89 02                	mov    DWORD PTR [edx],eax
c001868e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018693:	90                   	nop
c0018694:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018697:	83 c4 0c             	add    esp,0xc
c001869a:	c3                   	ret    
c001869b:	90                   	nop

c001869c <milliTenthSleepUntil(unsigned int)>:
c001869c:	83 ec 0c             	sub    esp,0xc
c001869f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186a3:	39 05 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,eax
c00186a9:	76 05                	jbe    c00186b0 <milliTenthSleepUntil(unsigned int)+0x14>
c00186ab:	90                   	nop
c00186ac:	83 c4 0c             	add    esp,0xc
c00186af:	c3                   	ret    
c00186b0:	fa                   	cli    
c00186b1:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c00186b7:	83 ec 08             	sub    esp,0x8
c00186ba:	ff 05 c4 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc4
c00186c0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00186c6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00186c9:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00186cf:	68 d8 8f 02 c0       	push   0xc0028fd8
c00186d4:	e8 a7 a3 00 00       	call   c0022a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186d9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00186e0:	e8 43 ff ff ff       	call   c0018628 <blockTask(TaskState)>
c00186e5:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c00186ea:	83 c4 10             	add    esp,0x10
c00186ed:	48                   	dec    eax
c00186ee:	a3 c4 8f 02 c0       	mov    ds:0xc0028fc4,eax
c00186f3:	85 c0                	test   eax,eax
c00186f5:	75 09                	jne    c0018700 <milliTenthSleepUntil(unsigned int)+0x64>
c00186f7:	a1 c0 8f 02 c0       	mov    eax,ds:0xc0028fc0
c00186fc:	85 c0                	test   eax,eax
c00186fe:	75 14                	jne    c0018714 <milliTenthSleepUntil(unsigned int)+0x78>
c0018700:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018705:	48                   	dec    eax
c0018706:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c001870b:	75 9f                	jne    c00186ac <milliTenthSleepUntil(unsigned int)+0x10>
c001870d:	fb                   	sti    
c001870e:	83 c4 0c             	add    esp,0xc
c0018711:	c3                   	ret    
c0018712:	66 90                	xchg   ax,ax
c0018714:	c7 05 c0 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x0
c001871e:	e8 0d fd ff ff       	call   c0018430 <schedule()>
c0018723:	eb db                	jmp    c0018700 <milliTenthSleepUntil(unsigned int)+0x64>
c0018725:	8d 76 00             	lea    esi,[esi+0x0]

c0018728 <milliTenthSleep(unsigned int)>:
c0018728:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c001872d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018731:	e9 66 ff ff ff       	jmp    c001869c <milliTenthSleepUntil(unsigned int)>
c0018736:	66 90                	xchg   ax,ax

c0018738 <sleep(unsigned int)>:
c0018738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001873c:	8d 04 80             	lea    eax,[eax+eax*4]
c001873f:	8d 04 80             	lea    eax,[eax+eax*4]
c0018742:	8d 04 80             	lea    eax,[eax+eax*4]
c0018745:	8d 04 80             	lea    eax,[eax+eax*4]
c0018748:	c1 e0 04             	shl    eax,0x4
c001874b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001874f:	eb d7                	jmp    c0018728 <milliTenthSleep(unsigned int)>
c0018751:	90                   	nop
c0018752:	66 90                	xchg   ax,ax

c0018754 <Semaphore::acquire()>:
c0018754:	83 ec 0c             	sub    esp,0xc
c0018757:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001875b:	fa                   	cli    
c001875c:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c0018761:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0018767:	8d 48 01             	lea    ecx,[eax+0x1]
c001876a:	89 0d c4 8f 02 c0    	mov    DWORD PTR ds:0xc0028fc4,ecx
c0018770:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018773:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018775:	7d 2d                	jge    c00187a4 <Semaphore::acquire()+0x50>
c0018777:	41                   	inc    ecx
c0018778:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001877b:	90                   	nop
c001877c:	a3 c4 8f 02 c0       	mov    ds:0xc0028fc4,eax
c0018781:	85 c0                	test   eax,eax
c0018783:	75 0b                	jne    c0018790 <Semaphore::acquire()+0x3c>
c0018785:	a1 c0 8f 02 c0       	mov    eax,ds:0xc0028fc0
c001878a:	85 c0                	test   eax,eax
c001878c:	75 62                	jne    c00187f0 <Semaphore::acquire()+0x9c>
c001878e:	66 90                	xchg   ax,ax
c0018790:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018795:	48                   	dec    eax
c0018796:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c001879b:	75 03                	jne    c00187a0 <Semaphore::acquire()+0x4c>
c001879d:	fb                   	sti    
c001879e:	66 90                	xchg   ax,ax
c00187a0:	83 c4 0c             	add    esp,0xc
c00187a3:	c3                   	ret    
c00187a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187a9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00187b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00187b3:	85 c9                	test   ecx,ecx
c00187b5:	74 4d                	je     c0018804 <Semaphore::acquire()+0xb0>
c00187b7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00187ba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00187c0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00187c3:	90                   	nop
c00187c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187c9:	83 ec 0c             	sub    esp,0xc
c00187cc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00187cf:	68 b0 5c 02 c0       	push   0xc0025cb0
c00187d4:	e8 da 44 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00187d9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00187e0:	e8 43 fe ff ff       	call   c0018628 <blockTask(TaskState)>
c00187e5:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c00187ea:	83 c4 10             	add    esp,0x10
c00187ed:	48                   	dec    eax
c00187ee:	eb 8c                	jmp    c001877c <Semaphore::acquire()+0x28>
c00187f0:	c7 05 c0 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x0
c00187fa:	e8 31 fc ff ff       	call   c0018430 <schedule()>
c00187ff:	eb 8f                	jmp    c0018790 <Semaphore::acquire()+0x3c>
c0018801:	8d 76 00             	lea    esi,[esi+0x0]
c0018804:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018809:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001880c:	eb b6                	jmp    c00187c4 <Semaphore::acquire()+0x70>
c001880e:	66 90                	xchg   ax,ax

c0018810 <taskReturned>:
c0018810:	83 ec 18             	sub    esp,0x18
c0018813:	68 d0 5c 02 c0       	push   0xc0025cd0
c0018818:	e8 42 c0 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001881d:	83 c4 10             	add    esp,0x10
c0018820:	83 ec 0c             	sub    esp,0xc
c0018823:	6a 02                	push   0x2
c0018825:	e8 fe fd ff ff       	call   c0018628 <blockTask(TaskState)>
c001882a:	fa                   	cli    
c001882b:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0018831:	e8 fa fb ff ff       	call   c0018430 <schedule()>
c0018836:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c001883b:	83 c4 10             	add    esp,0x10
c001883e:	48                   	dec    eax
c001883f:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0018844:	85 c0                	test   eax,eax
c0018846:	75 d8                	jne    c0018820 <taskReturned+0x10>
c0018848:	fb                   	sti    
c0018849:	eb d5                	jmp    c0018820 <taskReturned+0x10>
c001884b:	90                   	nop

c001884c <Thr::processFromPID(int)>:
c001884c:	57                   	push   edi
c001884d:	56                   	push   esi
c001884e:	53                   	push   ebx
c001884f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018853:	fa                   	cli    
c0018854:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c001885a:	83 ec 0c             	sub    esp,0xc
c001885d:	68 e4 8f 02 c0       	push   0xc0028fe4
c0018862:	e8 59 a1 00 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018867:	83 c4 10             	add    esp,0x10
c001886a:	89 c7                	mov    edi,eax
c001886c:	eb 16                	jmp    c0018884 <Thr::processFromPID(int)+0x38>
c001886e:	66 90                	xchg   ax,ax
c0018870:	83 ec 0c             	sub    esp,0xc
c0018873:	68 e4 8f 02 c0       	push   0xc0028fe4
c0018878:	e8 43 a1 00 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001887d:	83 c4 10             	add    esp,0x10
c0018880:	39 f8                	cmp    eax,edi
c0018882:	74 4c                	je     c00188d0 <Thr::processFromPID(int)+0x84>
c0018884:	83 ec 0c             	sub    esp,0xc
c0018887:	68 e4 8f 02 c0       	push   0xc0028fe4
c001888c:	e8 2f a1 00 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018891:	c7 04 24 e4 8f 02 c0 	mov    DWORD PTR [esp],0xc0028fe4
c0018898:	89 c3                	mov    ebx,eax
c001889a:	e8 29 a1 00 00       	call   c00229c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001889f:	58                   	pop    eax
c00188a0:	5a                   	pop    edx
c00188a1:	53                   	push   ebx
c00188a2:	68 e4 8f 02 c0       	push   0xc0028fe4
c00188a7:	e8 d4 a1 00 00       	call   c0022a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00188ac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00188af:	83 c4 10             	add    esp,0x10
c00188b2:	39 30                	cmp    DWORD PTR [eax],esi
c00188b4:	75 ba                	jne    c0018870 <Thr::processFromPID(int)+0x24>
c00188b6:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c00188bb:	48                   	dec    eax
c00188bc:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c00188c1:	74 09                	je     c00188cc <Thr::processFromPID(int)+0x80>
c00188c3:	90                   	nop
c00188c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00188c7:	5b                   	pop    ebx
c00188c8:	5e                   	pop    esi
c00188c9:	5f                   	pop    edi
c00188ca:	c3                   	ret    
c00188cb:	90                   	nop
c00188cc:	fb                   	sti    
c00188cd:	eb f5                	jmp    c00188c4 <Thr::processFromPID(int)+0x78>
c00188cf:	90                   	nop
c00188d0:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c00188d5:	48                   	dec    eax
c00188d6:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c00188db:	75 07                	jne    c00188e4 <Thr::processFromPID(int)+0x98>
c00188dd:	fb                   	sti    
c00188de:	5b                   	pop    ebx
c00188df:	5e                   	pop    esi
c00188e0:	5f                   	pop    edi
c00188e1:	c3                   	ret    
c00188e2:	66 90                	xchg   ax,ax
c00188e4:	5b                   	pop    ebx
c00188e5:	31 c0                	xor    eax,eax
c00188e7:	5e                   	pop    esi
c00188e8:	5f                   	pop    edi
c00188e9:	c3                   	ret    
c00188ea:	66 90                	xchg   ax,ax

c00188ec <unblockTask(ThreadControlBlock*)>:
c00188ec:	53                   	push   ebx
c00188ed:	83 ec 08             	sub    esp,0x8
c00188f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00188f4:	fa                   	cli    
c00188f5:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c00188fb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00188fe:	85 c0                	test   eax,eax
c0018900:	74 66                	je     c0018968 <unblockTask(ThreadControlBlock*)+0x7c>
c0018902:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018905:	48                   	dec    eax
c0018906:	74 38                	je     c0018940 <unblockTask(ThreadControlBlock*)+0x54>
c0018908:	83 ec 0c             	sub    esp,0xc
c001890b:	68 e4 8f 02 c0       	push   0xc0028fe4
c0018910:	e8 ab a0 00 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018915:	83 c4 10             	add    esp,0x10
c0018918:	85 c0                	test   eax,eax
c001891a:	75 1c                	jne    c0018938 <unblockTask(ThreadControlBlock*)+0x4c>
c001891c:	eb 5e                	jmp    c001897c <unblockTask(ThreadControlBlock*)+0x90>
c001891e:	66 90                	xchg   ax,ax
c0018920:	83 ec 08             	sub    esp,0x8
c0018923:	50                   	push   eax
c0018924:	68 e4 8f 02 c0       	push   0xc0028fe4
c0018929:	e8 42 a4 00 00       	call   c0022d70 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001892e:	83 c4 10             	add    esp,0x10
c0018931:	85 c0                	test   eax,eax
c0018933:	74 47                	je     c001897c <unblockTask(ThreadControlBlock*)+0x90>
c0018935:	8d 76 00             	lea    esi,[esi+0x0]
c0018938:	39 c3                	cmp    ebx,eax
c001893a:	75 e4                	jne    c0018920 <unblockTask(ThreadControlBlock*)+0x34>
c001893c:	eb 12                	jmp    c0018950 <unblockTask(ThreadControlBlock*)+0x64>
c001893e:	66 90                	xchg   ax,ax
c0018940:	83 ec 0c             	sub    esp,0xc
c0018943:	68 52 5c 02 c0       	push   0xc0025c52
c0018948:	e8 66 43 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001894d:	83 c4 10             	add    esp,0x10
c0018950:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018955:	48                   	dec    eax
c0018956:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c001895b:	75 03                	jne    c0018960 <unblockTask(ThreadControlBlock*)+0x74>
c001895d:	fb                   	sti    
c001895e:	66 90                	xchg   ax,ax
c0018960:	83 c4 08             	add    esp,0x8
c0018963:	5b                   	pop    ebx
c0018964:	c3                   	ret    
c0018965:	8d 76 00             	lea    esi,[esi+0x0]
c0018968:	83 ec 0c             	sub    esp,0xc
c001896b:	68 3b 5c 02 c0       	push   0xc0025c3b
c0018970:	e8 3e 43 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0018975:	83 c4 10             	add    esp,0x10
c0018978:	eb d6                	jmp    c0018950 <unblockTask(ThreadControlBlock*)+0x64>
c001897a:	66 90                	xchg   ax,ax
c001897c:	83 ec 08             	sub    esp,0x8
c001897f:	53                   	push   ebx
c0018980:	68 e4 8f 02 c0       	push   0xc0028fe4
c0018985:	e8 f6 a0 00 00       	call   c0022a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001898a:	83 c4 10             	add    esp,0x10
c001898d:	eb c1                	jmp    c0018950 <unblockTask(ThreadControlBlock*)+0x64>
c001898f:	90                   	nop

c0018990 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018990:	55                   	push   ebp
c0018991:	57                   	push   edi
c0018992:	56                   	push   esi
c0018993:	53                   	push   ebx
c0018994:	83 ec 1c             	sub    esp,0x1c
c0018997:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001899b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001899e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00189a4:	85 ff                	test   edi,edi
c00189a6:	7e 24                	jle    c00189cc <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00189a8:	31 f6                	xor    esi,esi
c00189aa:	66 90                	xchg   ax,ax
c00189ac:	83 ec 0c             	sub    esp,0xc
c00189af:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00189b6:	46                   	inc    esi
c00189b7:	e8 17 10 ff ff       	call   c00099d3 <free>
c00189bc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00189bf:	83 c4 10             	add    esp,0x10
c00189c2:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00189c8:	7f e2                	jg     c00189ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00189ca:	66 90                	xchg   ax,ax
c00189cc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00189d6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00189db:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00189de:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00189e1:	d3 c0                	rol    eax,cl
c00189e3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00189ea:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00189ed:	89 f7                	mov    edi,esi
c00189ef:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00189f7:	0f 85 73 01 00 00    	jne    c0018b70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00189fd:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018a03:	85 ed                	test   ebp,ebp
c0018a05:	74 1d                	je     c0018a24 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018a07:	83 ec 0c             	sub    esp,0xc
c0018a0a:	55                   	push   ebp
c0018a0b:	e8 f4 bb ff ff       	call   c0014604 <EnvVarContainer::~EnvVarContainer()>
c0018a10:	59                   	pop    ecx
c0018a11:	5e                   	pop    esi
c0018a12:	6a 0c                	push   0xc
c0018a14:	55                   	push   ebp
c0018a15:	e8 b8 41 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0018a1a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018a1d:	83 c4 10             	add    esp,0x10
c0018a20:	89 f7                	mov    edi,esi
c0018a22:	66 90                	xchg   ax,ax
c0018a24:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018a2a:	85 c0                	test   eax,eax
c0018a2c:	0f 84 b2 00 00 00    	je     c0018ae4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018a32:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018a35:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018a39:	31 c9                	xor    ecx,ecx
c0018a3b:	eb 17                	jmp    c0018a54 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a40:	41                   	inc    ecx
c0018a41:	83 f9 10             	cmp    ecx,0x10
c0018a44:	0f 84 9a 00 00 00    	je     c0018ae4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018a4a:	66 90                	xchg   ax,ax
c0018a4c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018a52:	66 90                	xchg   ax,ax
c0018a54:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018a5b:	d3 fa                	sar    edx,cl
c0018a5d:	83 e2 01             	and    edx,0x1
c0018a60:	74 de                	je     c0018a40 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018a62:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018a65:	01 d2                	add    edx,edx
c0018a67:	01 ca                	add    edx,ecx
c0018a69:	8d 14 92             	lea    edx,[edx+edx*4]
c0018a6c:	01 d0                	add    eax,edx
c0018a6e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018a74:	83 fd 07             	cmp    ebp,0x7
c0018a77:	75 c7                	jne    c0018a40 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018a79:	05 40 02 00 00       	add    eax,0x240
c0018a7e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018a81:	83 fd ff             	cmp    ebp,0xffffffff
c0018a84:	0f 8c ee 00 00 00    	jl     c0018b78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018a8a:	0f 84 ac 01 00 00    	je     c0018c3c <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018a90:	85 ed                	test   ebp,ebp
c0018a92:	0f 84 90 01 00 00    	je     c0018c28 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018a98:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018a9a:	75 a4                	jne    c0018a40 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018a9c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018aa2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018aa6:	01 d0                	add    eax,edx
c0018aa8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018aac:	83 ec 0c             	sub    esp,0xc
c0018aaf:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018ab5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ab8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018abe:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018ac5:	50                   	push   eax
c0018ac6:	e8 21 fe ff ff       	call   c00188ec <unblockTask(ThreadControlBlock*)>
c0018acb:	83 c4 10             	add    esp,0x10
c0018ace:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018ad1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ad5:	89 f7                	mov    edi,esi
c0018ad7:	41                   	inc    ecx
c0018ad8:	83 f9 10             	cmp    ecx,0x10
c0018adb:	0f 85 6b ff ff ff    	jne    c0018a4c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ae4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018aea:	85 c0                	test   eax,eax
c0018aec:	74 62                	je     c0018b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018aee:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018af4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018afa:	74 54                	je     c0018b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018afc:	83 ec 0c             	sub    esp,0xc
c0018aff:	68 e4 8f 02 c0       	push   0xc0028fe4
c0018b04:	e8 b7 9e 00 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b09:	c7 04 24 e4 8f 02 c0 	mov    DWORD PTR [esp],0xc0028fe4
c0018b10:	89 c7                	mov    edi,eax
c0018b12:	e8 8d 9e 00 00       	call   c00229a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018b17:	83 c4 10             	add    esp,0x10
c0018b1a:	84 c0                	test   al,al
c0018b1c:	0f 84 ce 00 00 00    	je     c0018bf0 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018b22:	66 90                	xchg   ax,ax
c0018b24:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b27:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018b2d:	85 d2                	test   edx,edx
c0018b2f:	74 0f                	je     c0018b40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018b31:	83 ec 0c             	sub    esp,0xc
c0018b34:	8b 02                	mov    eax,DWORD PTR [edx]
c0018b36:	52                   	push   edx
c0018b37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018b3a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b3d:	83 c4 10             	add    esp,0x10
c0018b40:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018b4a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b50:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018b56:	85 db                	test   ebx,ebx
c0018b58:	74 16                	je     c0018b70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018b5a:	83 ec 0c             	sub    esp,0xc
c0018b5d:	53                   	push   ebx
c0018b5e:	e8 55 33 ff ff       	call   c000beb8 <VAS::~VAS()>
c0018b63:	58                   	pop    eax
c0018b64:	5a                   	pop    edx
c0018b65:	6a 14                	push   0x14
c0018b67:	53                   	push   ebx
c0018b68:	e8 65 40 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0018b6d:	83 c4 10             	add    esp,0x10
c0018b70:	83 c4 1c             	add    esp,0x1c
c0018b73:	5b                   	pop    ebx
c0018b74:	5e                   	pop    esi
c0018b75:	5f                   	pop    edi
c0018b76:	5d                   	pop    ebp
c0018b77:	c3                   	ret    
c0018b78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018b7c:	83 ec 0c             	sub    esp,0xc
c0018b7f:	68 04 5d 02 c0       	push   0xc0025d04
c0018b84:	e8 d6 bc ff ff       	call   c001485f <Krnl::panic(char const*)>
c0018b89:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018b8c:	83 c4 10             	add    esp,0x10
c0018b8f:	89 f7                	mov    edi,esi
c0018b91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b95:	e9 a6 fe ff ff       	jmp    c0018a40 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018b9a:	66 90                	xchg   ax,ax
c0018b9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ba2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018ba8:	75 1e                	jne    c0018bc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018baa:	83 ec 0c             	sub    esp,0xc
c0018bad:	68 6c 5d 02 c0       	push   0xc0025d6c
c0018bb2:	e8 fc 40 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0018bb7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018bbe:	e8 65 fa ff ff       	call   c0018628 <blockTask(TaskState)>
c0018bc3:	83 c4 10             	add    esp,0x10
c0018bc6:	66 90                	xchg   ax,ax
c0018bc8:	83 ec 08             	sub    esp,0x8
c0018bcb:	56                   	push   esi
c0018bcc:	68 e4 8f 02 c0       	push   0xc0028fe4
c0018bd1:	e8 aa 9e 00 00       	call   c0022a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018bd6:	c7 04 24 e4 8f 02 c0 	mov    DWORD PTR [esp],0xc0028fe4
c0018bdd:	e8 de 9d 00 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018be2:	83 c4 10             	add    esp,0x10
c0018be5:	39 f8                	cmp    eax,edi
c0018be7:	0f 84 37 ff ff ff    	je     c0018b24 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018bed:	8d 76 00             	lea    esi,[esi+0x0]
c0018bf0:	83 ec 0c             	sub    esp,0xc
c0018bf3:	68 e4 8f 02 c0       	push   0xc0028fe4
c0018bf8:	e8 c3 9d 00 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018bfd:	c7 04 24 e4 8f 02 c0 	mov    DWORD PTR [esp],0xc0028fe4
c0018c04:	89 c6                	mov    esi,eax
c0018c06:	e8 bd 9d 00 00       	call   c00229c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c0b:	83 c4 10             	add    esp,0x10
c0018c0e:	39 f3                	cmp    ebx,esi
c0018c10:	74 b6                	je     c0018bc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018c12:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018c15:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c18:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018c1e:	75 a8                	jne    c0018bc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018c20:	e9 77 ff ff ff       	jmp    c0018b9c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018c25:	8d 76 00             	lea    esi,[esi+0x0]
c0018c28:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018c2c:	83 ec 0c             	sub    esp,0xc
c0018c2f:	68 38 5d 02 c0       	push   0xc0025d38
c0018c34:	e9 4b ff ff ff       	jmp    c0018b84 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018c39:	8d 76 00             	lea    esi,[esi+0x0]
c0018c3c:	8b 36                	mov    esi,DWORD PTR [esi]
c0018c3e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018c42:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018c45:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c48:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018c4e:	01 d7                	add    edi,edx
c0018c50:	89 f8                	mov    eax,edi
c0018c52:	e9 51 fe ff ff       	jmp    c0018aa8 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018c57:	90                   	nop

c0018c58 <cleanerTaskFunction(void*)>:
c0018c58:	53                   	push   ebx
c0018c59:	83 ec 08             	sub    esp,0x8
c0018c5c:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018c61:	48                   	dec    eax
c0018c62:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0018c67:	75 03                	jne    c0018c6c <cleanerTaskFunction(void*)+0x14>
c0018c69:	fb                   	sti    
c0018c6a:	66 90                	xchg   ax,ax
c0018c6c:	fa                   	cli    
c0018c6d:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018c72:	80 3d ac 8f 02 c0 00 	cmp    BYTE PTR ds:0xc0028fac,0x0
c0018c79:	8d 50 01             	lea    edx,[eax+0x1]
c0018c7c:	89 15 c8 8f 02 c0    	mov    DWORD PTR ds:0xc0028fc8,edx
c0018c82:	0f 84 ac 00 00 00    	je     c0018d34 <cleanerTaskFunction(void*)+0xdc>
c0018c88:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0018c8d:	85 c0                	test   eax,eax
c0018c8f:	75 03                	jne    c0018c94 <cleanerTaskFunction(void*)+0x3c>
c0018c91:	fb                   	sti    
c0018c92:	66 90                	xchg   ax,ax
c0018c94:	c6 05 ac 8f 02 c0 00 	mov    BYTE PTR ds:0xc0028fac,0x0
c0018c9b:	fa                   	cli    
c0018c9c:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0018ca2:	ff 05 c4 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc4
c0018ca8:	fa                   	cli    
c0018ca9:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0018caf:	eb 2b                	jmp    c0018cdc <cleanerTaskFunction(void*)+0x84>
c0018cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0018cb4:	83 ec 0c             	sub    esp,0xc
c0018cb7:	68 cc 8f 02 c0       	push   0xc0028fcc
c0018cbc:	e8 ff 9c 00 00       	call   c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018cc1:	c7 04 24 cc 8f 02 c0 	mov    DWORD PTR [esp],0xc0028fcc
c0018cc8:	89 c3                	mov    ebx,eax
c0018cca:	e8 f9 9c 00 00       	call   c00229c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018ccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018cd2:	e8 b9 fc ff ff       	call   c0018990 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018cd7:	83 c4 10             	add    esp,0x10
c0018cda:	66 90                	xchg   ax,ax
c0018cdc:	83 ec 0c             	sub    esp,0xc
c0018cdf:	68 cc 8f 02 c0       	push   0xc0028fcc
c0018ce4:	e8 bb 9c 00 00       	call   c00229a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ce9:	83 c4 10             	add    esp,0x10
c0018cec:	84 c0                	test   al,al
c0018cee:	74 c4                	je     c0018cb4 <cleanerTaskFunction(void*)+0x5c>
c0018cf0:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018cf5:	48                   	dec    eax
c0018cf6:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0018cfb:	75 03                	jne    c0018d00 <cleanerTaskFunction(void*)+0xa8>
c0018cfd:	fb                   	sti    
c0018cfe:	66 90                	xchg   ax,ax
c0018d00:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c0018d05:	48                   	dec    eax
c0018d06:	a3 c4 8f 02 c0       	mov    ds:0xc0028fc4,eax
c0018d0b:	0f 85 4b ff ff ff    	jne    c0018c5c <cleanerTaskFunction(void*)+0x4>
c0018d11:	a1 c0 8f 02 c0       	mov    eax,ds:0xc0028fc0
c0018d16:	85 c0                	test   eax,eax
c0018d18:	0f 84 3e ff ff ff    	je     c0018c5c <cleanerTaskFunction(void*)+0x4>
c0018d1e:	c7 05 c0 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x0
c0018d28:	e8 03 f7 ff ff       	call   c0018430 <schedule()>
c0018d2d:	e9 2a ff ff ff       	jmp    c0018c5c <cleanerTaskFunction(void*)+0x4>
c0018d32:	66 90                	xchg   ax,ax
c0018d34:	83 ec 0c             	sub    esp,0xc
c0018d37:	6a 02                	push   0x2
c0018d39:	e8 c2 f8 ff ff       	call   c0018600 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018d3e:	83 c4 10             	add    esp,0x10
c0018d41:	e9 4e ff ff ff       	jmp    c0018c94 <cleanerTaskFunction(void*)+0x3c>
c0018d46:	66 90                	xchg   ax,ax

c0018d48 <terminateTask(int)>:
c0018d48:	83 ec 14             	sub    esp,0x14
c0018d4b:	fa                   	cli    
c0018d4c:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0018d52:	ff 05 c4 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc4
c0018d58:	fa                   	cli    
c0018d59:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0018d5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018d63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d68:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018d6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d70:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018d73:	50                   	push   eax
c0018d74:	68 cc 8f 02 c0       	push   0xc0028fcc
c0018d79:	e8 02 9d 00 00       	call   c0022a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d83:	83 c4 10             	add    esp,0x10
c0018d86:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018d8d:	a1 a8 8f 02 c0       	mov    eax,ds:0xc0028fa8
c0018d92:	85 c0                	test   eax,eax
c0018d94:	74 5e                	je     c0018df4 <terminateTask(int)+0xac>
c0018d96:	83 ec 0c             	sub    esp,0xc
c0018d99:	c6 05 ac 8f 02 c0 01 	mov    BYTE PTR ds:0xc0028fac,0x1
c0018da0:	50                   	push   eax
c0018da1:	e8 46 fb ff ff       	call   c00188ec <unblockTask(ThreadControlBlock*)>
c0018da6:	83 c4 10             	add    esp,0x10
c0018da9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dac:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018db1:	48                   	dec    eax
c0018db2:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0018db7:	75 03                	jne    c0018dbc <terminateTask(int)+0x74>
c0018db9:	fb                   	sti    
c0018dba:	66 90                	xchg   ax,ax
c0018dbc:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c0018dc1:	48                   	dec    eax
c0018dc2:	a3 c4 8f 02 c0       	mov    ds:0xc0028fc4,eax
c0018dc7:	75 0b                	jne    c0018dd4 <terminateTask(int)+0x8c>
c0018dc9:	83 3d c0 8f 02 c0 00 	cmp    DWORD PTR ds:0xc0028fc0,0x0
c0018dd0:	75 36                	jne    c0018e08 <terminateTask(int)+0xc0>
c0018dd2:	66 90                	xchg   ax,ax
c0018dd4:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018dd9:	48                   	dec    eax
c0018dda:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0018ddf:	75 03                	jne    c0018de4 <terminateTask(int)+0x9c>
c0018de1:	fb                   	sti    
c0018de2:	66 90                	xchg   ax,ax
c0018de4:	fa                   	cli    
c0018de5:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0018deb:	90                   	nop
c0018dec:	e8 3f f6 ff ff       	call   c0018430 <schedule()>
c0018df1:	eb e1                	jmp    c0018dd4 <terminateTask(int)+0x8c>
c0018df3:	90                   	nop
c0018df4:	83 ec 0c             	sub    esp,0xc
c0018df7:	68 69 5c 02 c0       	push   0xc0025c69
c0018dfc:	e8 b2 3e ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0018e01:	83 c4 10             	add    esp,0x10
c0018e04:	eb a6                	jmp    c0018dac <terminateTask(int)+0x64>
c0018e06:	66 90                	xchg   ax,ax
c0018e08:	c7 05 c0 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x0
c0018e12:	eb d8                	jmp    c0018dec <terminateTask(int)+0xa4>

c0018e14 <Thr::terminateFromIRQ(int)>:
c0018e14:	83 ec 18             	sub    esp,0x18
c0018e17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e1b:	e8 28 ff ff ff       	call   c0018d48 <terminateTask(int)>

c0018e20 <Semaphore::release()>:
c0018e20:	83 ec 0c             	sub    esp,0xc
c0018e23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e27:	fa                   	cli    
c0018e28:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c0018e2d:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0018e33:	8d 48 01             	lea    ecx,[eax+0x1]
c0018e36:	89 0d c4 8f 02 c0    	mov    DWORD PTR ds:0xc0028fc4,ecx
c0018e3c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018e3f:	85 c9                	test   ecx,ecx
c0018e41:	74 41                	je     c0018e84 <Semaphore::release()+0x64>
c0018e43:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018e46:	83 ec 0c             	sub    esp,0xc
c0018e49:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018e4c:	51                   	push   ecx
c0018e4d:	e8 9a fa ff ff       	call   c00188ec <unblockTask(ThreadControlBlock*)>
c0018e52:	a1 c4 8f 02 c0       	mov    eax,ds:0xc0028fc4
c0018e57:	83 c4 10             	add    esp,0x10
c0018e5a:	48                   	dec    eax
c0018e5b:	90                   	nop
c0018e5c:	a3 c4 8f 02 c0       	mov    ds:0xc0028fc4,eax
c0018e61:	85 c0                	test   eax,eax
c0018e63:	75 0b                	jne    c0018e70 <Semaphore::release()+0x50>
c0018e65:	a1 c0 8f 02 c0       	mov    eax,ds:0xc0028fc0
c0018e6a:	85 c0                	test   eax,eax
c0018e6c:	75 1e                	jne    c0018e8c <Semaphore::release()+0x6c>
c0018e6e:	66 90                	xchg   ax,ax
c0018e70:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0018e75:	48                   	dec    eax
c0018e76:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0018e7b:	75 03                	jne    c0018e80 <Semaphore::release()+0x60>
c0018e7d:	fb                   	sti    
c0018e7e:	66 90                	xchg   ax,ax
c0018e80:	83 c4 0c             	add    esp,0xc
c0018e83:	c3                   	ret    
c0018e84:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018e87:	eb d3                	jmp    c0018e5c <Semaphore::release()+0x3c>
c0018e89:	8d 76 00             	lea    esi,[esi+0x0]
c0018e8c:	c7 05 c0 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fc0,0x0
c0018e96:	e8 95 f5 ff ff       	call   c0018430 <schedule()>
c0018e9b:	eb d3                	jmp    c0018e70 <Semaphore::release()+0x50>
c0018e9d:	8d 76 00             	lea    esi,[esi+0x0]

c0018ea0 <__static_initialization_and_destruction_0(int, int)>:
c0018ea0:	83 ec 0c             	sub    esp,0xc
c0018ea3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018ea8:	0f 85 8e 00 00 00    	jne    c0018f3c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018eae:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018eb6:	0f 85 80 00 00 00    	jne    c0018f3c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018ebc:	83 ec 0c             	sub    esp,0xc
c0018ebf:	68 e4 8f 02 c0       	push   0xc0028fe4
c0018ec4:	e8 63 9e 00 00       	call   c0022d2c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018ec9:	83 c4 10             	add    esp,0x10
c0018ecc:	83 ec 04             	sub    esp,0x4
c0018ecf:	68 60 6d 02 c0       	push   0xc0026d60
c0018ed4:	68 e4 8f 02 c0       	push   0xc0028fe4
c0018ed9:	68 dc 2c 02 c0       	push   0xc0022cdc
c0018ede:	e8 69 3c ff ff       	call   c000cb4c <__cxa_atexit>
c0018ee3:	83 c4 10             	add    esp,0x10
c0018ee6:	83 ec 0c             	sub    esp,0xc
c0018ee9:	68 d8 8f 02 c0       	push   0xc0028fd8
c0018eee:	e8 39 9e 00 00       	call   c0022d2c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018ef3:	83 c4 10             	add    esp,0x10
c0018ef6:	83 ec 04             	sub    esp,0x4
c0018ef9:	68 60 6d 02 c0       	push   0xc0026d60
c0018efe:	68 d8 8f 02 c0       	push   0xc0028fd8
c0018f03:	68 dc 2c 02 c0       	push   0xc0022cdc
c0018f08:	e8 3f 3c ff ff       	call   c000cb4c <__cxa_atexit>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	83 ec 0c             	sub    esp,0xc
c0018f13:	68 cc 8f 02 c0       	push   0xc0028fcc
c0018f18:	e8 0f 9e 00 00       	call   c0022d2c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018f1d:	83 c4 10             	add    esp,0x10
c0018f20:	83 ec 04             	sub    esp,0x4
c0018f23:	68 60 6d 02 c0       	push   0xc0026d60
c0018f28:	68 cc 8f 02 c0       	push   0xc0028fcc
c0018f2d:	68 dc 2c 02 c0       	push   0xc0022cdc
c0018f32:	e8 15 3c ff ff       	call   c000cb4c <__cxa_atexit>
c0018f37:	83 c4 10             	add    esp,0x10
c0018f3a:	66 90                	xchg   ax,ax
c0018f3c:	90                   	nop
c0018f3d:	83 c4 0c             	add    esp,0xc
c0018f40:	c3                   	ret    
c0018f41:	8d 76 00             	lea    esi,[esi+0x0]

c0018f44 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018f44:	83 ec 0c             	sub    esp,0xc
c0018f47:	83 ec 08             	sub    esp,0x8
c0018f4a:	68 ff ff 00 00       	push   0xffff
c0018f4f:	6a 01                	push   0x1
c0018f51:	e8 4a ff ff ff       	call   c0018ea0 <__static_initialization_and_destruction_0(int, int)>
c0018f56:	83 c4 10             	add    esp,0x10
c0018f59:	83 c4 0c             	add    esp,0xc
c0018f5c:	c3                   	ret    

c0018f5d <Vm::inbv(unsigned short)>:
c0018f5d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f61:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018f66:	75 06                	jne    c0018f6e <Vm::inbv(unsigned short)+0x11>
c0018f68:	a0 2c 90 02 c0       	mov    al,ds:0xc002902c
c0018f6d:	c3                   	ret    
c0018f6e:	ec                   	in     al,dx
c0018f6f:	c3                   	ret    

c0018f70 <Vm::outbv(unsigned short, unsigned char)>:
c0018f70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f78:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018f7d:	75 25                	jne    c0018fa4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018f7f:	8b 0d 2c 90 02 c0    	mov    ecx,DWORD PTR ds:0xc002902c
c0018f85:	8d 51 01             	lea    edx,[ecx+0x1]
c0018f88:	88 81 40 90 02 c0    	mov    BYTE PTR [ecx-0x3ffd6fc0],al
c0018f8e:	89 15 2c 90 02 c0    	mov    DWORD PTR ds:0xc002902c,edx
c0018f94:	83 fa 20             	cmp    edx,0x20
c0018f97:	75 0c                	jne    c0018fa5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018f99:	c7 05 2c 90 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002902c,0x1f
c0018fa3:	c3                   	ret    
c0018fa4:	ee                   	out    dx,al
c0018fa5:	c3                   	ret    

c0018fa6 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018fa6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018fab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018fb0:	c1 e0 04             	shl    eax,0x4
c0018fb3:	01 d0                	add    eax,edx
c0018fb5:	c3                   	ret    

c0018fb6 <Vm::getSegment(unsigned int)>:
c0018fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fba:	c1 e8 10             	shr    eax,0x10
c0018fbd:	c3                   	ret    

c0018fbe <Vm::getOffset(unsigned int)>:
c0018fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fc2:	c3                   	ret    

c0018fc3 <Vm::mainloop2()>:
c0018fc3:	83 ec 18             	sub    esp,0x18
c0018fc6:	fa                   	cli    
c0018fc7:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0018fcd:	6a 02                	push   0x2
c0018fcf:	c6 05 25 90 02 c0 01 	mov    BYTE PTR ds:0xc0029025,0x1
c0018fd6:	e8 25 f6 ff ff       	call   c0018600 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018fdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fe0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018fe4:	52                   	push   edx
c0018fe5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018fe9:	52                   	push   edx
c0018fea:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018fee:	52                   	push   edx
c0018fef:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018ff3:	50                   	push   eax
c0018ff4:	e8 36 72 fe ff       	call   c000022f <goToVM86>
c0018ff9:	83 c4 2c             	add    esp,0x2c
c0018ffc:	c3                   	ret    

c0018ffd <Vm::mainVm8086Loop(void*)>:
c0018ffd:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0019002:	48                   	dec    eax
c0019003:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0019008:	75 01                	jne    c001900b <Vm::mainVm8086Loop(void*)+0xe>
c001900a:	fb                   	sti    
c001900b:	eb b6                	jmp    c0018fc3 <Vm::mainloop2()>

c001900d <Vm::mainloop3(unsigned long)>:
c001900d:	83 ec 18             	sub    esp,0x18
c0019010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019014:	fa                   	cli    
c0019015:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c001901b:	6a 02                	push   0x2
c001901d:	c6 05 24 90 02 c0 01 	mov    BYTE PTR ds:0xc0029024,0x1
c0019024:	a3 20 90 02 c0       	mov    ds:0xc0029020,eax
c0019029:	e8 d2 f5 ff ff       	call   c0018600 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001902e:	83 c4 1c             	add    esp,0x1c
c0019031:	eb 90                	jmp    c0018fc3 <Vm::mainloop2()>

c0019033 <Vm::initialise8086()>:
c0019033:	83 ec 0c             	sub    esp,0xc
c0019036:	68 80 00 00 00       	push   0x80
c001903b:	6a 00                	push   0x0
c001903d:	68 fd 8f 01 c0       	push   0xc0018ffd
c0019042:	ff 35 f0 8f 02 c0    	push   DWORD PTR ds:0xc0028ff0
c0019048:	e8 c7 f1 ff ff       	call   c0018214 <Process::createThread(void (*)(void*), void*, int)>
c001904d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019054:	a3 28 90 02 c0       	mov    ds:0xc0029028,eax
c0019059:	68 00 01 00 00       	push   0x100
c001905e:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c0019063:	6a 00                	push   0x0
c0019065:	6a 00                	push   0x0
c0019067:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001906d:	e8 b8 32 ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019072:	83 c4 2c             	add    esp,0x2c
c0019075:	c3                   	ret    

c0019076 <Vm::finish8086()>:
c0019076:	53                   	push   ebx
c0019077:	83 ec 08             	sub    esp,0x8
c001907a:	fa                   	cli    
c001907b:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0019081:	80 3d 24 90 02 c0 00 	cmp    BYTE PTR ds:0xc0029024,0x0
c0019088:	75 15                	jne    c001909f <Vm::finish8086()+0x29>
c001908a:	e8 a1 f3 ff ff       	call   c0018430 <schedule()>
c001908f:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0019094:	48                   	dec    eax
c0019095:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c001909a:	75 de                	jne    c001907a <Vm::finish8086()+0x4>
c001909c:	fb                   	sti    
c001909d:	eb db                	jmp    c001907a <Vm::finish8086()+0x4>
c001909f:	83 ec 0c             	sub    esp,0xc
c00190a2:	8b 1d 20 90 02 c0    	mov    ebx,DWORD PTR ds:0xc0029020
c00190a8:	ff 35 28 90 02 c0    	push   DWORD PTR ds:0xc0029028
c00190ae:	c6 05 24 90 02 c0 00 	mov    BYTE PTR ds:0xc0029024,0x0
c00190b5:	e8 32 f8 ff ff       	call   c00188ec <unblockTask(ThreadControlBlock*)>
c00190ba:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c00190bf:	83 c4 10             	add    esp,0x10
c00190c2:	8d 50 ff             	lea    edx,[eax-0x1]
c00190c5:	89 15 c8 8f 02 c0    	mov    DWORD PTR ds:0xc0028fc8,edx
c00190cb:	85 d2                	test   edx,edx
c00190cd:	75 01                	jne    c00190d0 <Vm::finish8086()+0x5a>
c00190cf:	fb                   	sti    
c00190d0:	89 d8                	mov    eax,ebx
c00190d2:	83 c4 08             	add    esp,0x8
c00190d5:	5b                   	pop    ebx
c00190d6:	c3                   	ret    

c00190d7 <Vm::getOutput8086(unsigned char*)>:
c00190d7:	57                   	push   edi
c00190d8:	8b 0d 2c 90 02 c0    	mov    ecx,DWORD PTR ds:0xc002902c
c00190de:	56                   	push   esi
c00190df:	be 40 90 02 c0       	mov    esi,0xc0029040
c00190e4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00190e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00190ea:	a1 2c 90 02 c0       	mov    eax,ds:0xc002902c
c00190ef:	5e                   	pop    esi
c00190f0:	c7 05 2c 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002902c,0x0
c00190fa:	5f                   	pop    edi
c00190fb:	c3                   	ret    

c00190fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00190fc:	55                   	push   ebp
c00190fd:	57                   	push   edi
c00190fe:	56                   	push   esi
c00190ff:	53                   	push   ebx
c0019100:	83 ec 2c             	sub    esp,0x2c
c0019103:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019107:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001910b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001910f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019113:	fa                   	cli    
c0019114:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c001911a:	0f b6 35 25 90 02 c0 	movzx  esi,BYTE PTR ds:0xc0029025
c0019121:	89 f0                	mov    eax,esi
c0019123:	84 c0                	test   al,al
c0019125:	75 1d                	jne    c0019144 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019127:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001912b:	e8 00 f3 ff ff       	call   c0018430 <schedule()>
c0019130:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0019135:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019139:	48                   	dec    eax
c001913a:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c001913f:	75 d2                	jne    c0019113 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019141:	fb                   	sti    
c0019142:	eb cf                	jmp    c0019113 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019144:	a1 28 90 02 c0       	mov    eax,ds:0xc0029028
c0019149:	c7 05 2c 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002902c,0x0
c0019153:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019157:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001915b:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001915f:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019163:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019167:	50                   	push   eax
c0019168:	6a 20                	push   0x20
c001916a:	6a 00                	push   0x0
c001916c:	68 40 90 02 c0       	push   0xc0029040
c0019171:	e8 0e 75 fe ff       	call   c0000684 <memset>
c0019176:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001917d:	e8 41 08 ff ff       	call   c00099c3 <malloc>
c0019182:	83 c4 0c             	add    esp,0xc
c0019185:	89 c3                	mov    ebx,eax
c0019187:	ff 35 f0 8f 02 c0    	push   DWORD PTR ds:0xc0028ff0
c001918d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019191:	50                   	push   eax
c0019192:	e8 87 40 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0019197:	83 c4 10             	add    esp,0x10
c001919a:	85 db                	test   ebx,ebx
c001919c:	75 0a                	jne    c00191a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001919e:	83 ec 0c             	sub    esp,0xc
c00191a1:	68 94 5d 02 c0       	push   0xc0025d94
c00191a6:	eb 3e                	jmp    c00191e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00191a8:	50                   	push   eax
c00191a9:	8d 44 24 17          	lea    eax,[esp+0x17]
c00191ad:	50                   	push   eax
c00191ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00191b2:	50                   	push   eax
c00191b3:	53                   	push   ebx
c00191b4:	e8 b3 43 ff ff       	call   c000d56c <File::stat(unsigned long long*, bool*)>
c00191b9:	83 c4 10             	add    esp,0x10
c00191bc:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00191c1:	74 0a                	je     c00191cd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00191c3:	83 ec 0c             	sub    esp,0xc
c00191c6:	68 a8 5d 02 c0       	push   0xc0025da8
c00191cb:	eb 19                	jmp    c00191e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00191cd:	51                   	push   ecx
c00191ce:	51                   	push   ecx
c00191cf:	6a 01                	push   0x1
c00191d1:	53                   	push   ebx
c00191d2:	e8 e9 40 ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c00191d7:	83 c4 10             	add    esp,0x10
c00191da:	85 c0                	test   eax,eax
c00191dc:	74 24                	je     c0019202 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00191de:	83 ec 0c             	sub    esp,0xc
c00191e1:	68 c1 5d 02 c0       	push   0xc0025dc1
c00191e6:	e8 74 b6 ff ff       	call   c001485f <Krnl::panic(char const*)>
c00191eb:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c00191f0:	83 c4 10             	add    esp,0x10
c00191f3:	48                   	dec    eax
c00191f4:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c00191f9:	85 c0                	test   eax,eax
c00191fb:	75 01                	jne    c00191fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00191fd:	fb                   	sti    
c00191fe:	31 f6                	xor    esi,esi
c0019200:	eb 58                	jmp    c001925a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019202:	0f b7 ed             	movzx  ebp,bp
c0019205:	50                   	push   eax
c0019206:	0f b7 ff             	movzx  edi,di
c0019209:	50                   	push   eax
c001920a:	55                   	push   ebp
c001920b:	57                   	push   edi
c001920c:	e8 95 fd ff ff       	call   c0018fa6 <Vm::realToLinear(unsigned short, unsigned short)>
c0019211:	5a                   	pop    edx
c0019212:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019214:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019218:	51                   	push   ecx
c0019219:	50                   	push   eax
c001921a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001921e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019222:	53                   	push   ebx
c0019223:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019226:	83 c4 14             	add    esp,0x14
c0019229:	53                   	push   ebx
c001922a:	e8 ef 40 ff ff       	call   c000d31e <File::close()>
c001922f:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c0019234:	83 c4 10             	add    esp,0x10
c0019237:	48                   	dec    eax
c0019238:	c6 05 25 90 02 c0 00 	mov    BYTE PTR ds:0xc0029025,0x0
c001923f:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0019244:	85 c0                	test   eax,eax
c0019246:	75 01                	jne    c0019249 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019248:	fb                   	sti    
c0019249:	83 ec 0c             	sub    esp,0xc
c001924c:	ff 35 28 90 02 c0    	push   DWORD PTR ds:0xc0029028
c0019252:	e8 95 f6 ff ff       	call   c00188ec <unblockTask(ThreadControlBlock*)>
c0019257:	83 c4 10             	add    esp,0x10
c001925a:	83 c4 2c             	add    esp,0x2c
c001925d:	89 f0                	mov    eax,esi
c001925f:	5b                   	pop    ebx
c0019260:	5e                   	pop    esi
c0019261:	5f                   	pop    edi
c0019262:	5d                   	pop    ebp
c0019263:	c3                   	ret    

c0019264 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019264:	57                   	push   edi
c0019265:	56                   	push   esi
c0019266:	53                   	push   ebx
c0019267:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001926b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001926f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019273:	83 e8 06             	sub    eax,0x6
c0019276:	0f b7 c0             	movzx  eax,ax
c0019279:	50                   	push   eax
c001927a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001927f:	50                   	push   eax
c0019280:	e8 21 fd ff ff       	call   c0018fa6 <Vm::realToLinear(unsigned short, unsigned short)>
c0019285:	5a                   	pop    edx
c0019286:	5e                   	pop    esi
c0019287:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001928a:	8d 56 fa             	lea    edx,[esi-0x6]
c001928d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019293:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019296:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019299:	83 c2 02             	add    edx,0x2
c001929c:	66 89 10             	mov    WORD PTR [eax],dx
c001929f:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00192a2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00192a6:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00192a9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00192ad:	89 d6                	mov    esi,edx
c00192af:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00192b5:	66 81 e6 ff fd       	and    si,0xfdff
c00192ba:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00192be:	74 07                	je     c00192c7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00192c0:	89 d6                	mov    esi,edx
c00192c2:	66 81 ce 00 02       	or     si,0x200
c00192c7:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00192cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192d0:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00192d4:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00192dc:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00192df:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00192e7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00192ea:	5b                   	pop    ebx
c00192eb:	5e                   	pop    esi
c00192ec:	5f                   	pop    edi
c00192ed:	c3                   	ret    

c00192ee <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00192ee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00192f3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00192f8:	c1 e0 04             	shl    eax,0x4
c00192fb:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00192fe:	c3                   	ret    

c00192ff <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00192ff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019304:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019309:	c1 e0 04             	shl    eax,0x4
c001930c:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019310:	c3                   	ret    

c0019311 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019311:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019316:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001931b:	c1 e0 04             	shl    eax,0x4
c001931e:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019321:	c3                   	ret    

c0019322 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019322:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019327:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001932c:	c1 e0 04             	shl    eax,0x4
c001932f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019333:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019336:	c3                   	ret    

c0019337 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019337:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001933c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019341:	c1 e0 04             	shl    eax,0x4
c0019344:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019348:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001934c:	c3                   	ret    

c001934d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001934d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019352:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019357:	c1 e0 04             	shl    eax,0x4
c001935a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001935e:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019361:	c3                   	ret    

c0019362 <Vm::faultHandler(regs*)>:
c0019362:	55                   	push   ebp
c0019363:	57                   	push   edi
c0019364:	56                   	push   esi
c0019365:	53                   	push   ebx
c0019366:	83 ec 1c             	sub    esp,0x1c
c0019369:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001936d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019370:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019374:	0f b7 f8             	movzx  edi,ax
c0019377:	52                   	push   edx
c0019378:	0f b7 c0             	movzx  eax,ax
c001937b:	50                   	push   eax
c001937c:	e8 25 fc ff ff       	call   c0018fa6 <Vm::realToLinear(unsigned short, unsigned short)>
c0019381:	5a                   	pop    edx
c0019382:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019385:	59                   	pop    ecx
c0019386:	89 c1                	mov    ecx,eax
c0019388:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001938b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001938f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019394:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019398:	0f b7 c5             	movzx  eax,bp
c001939b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001939f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00193a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00193a7:	e8 fa fb ff ff       	call   c0018fa6 <Vm::realToLinear(unsigned short, unsigned short)>
c00193ac:	5e                   	pop    esi
c00193ad:	be 06 00 00 00       	mov    esi,0x6
c00193b2:	5a                   	pop    edx
c00193b3:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00193b8:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00193bd:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00193c0:	80 fa 9d             	cmp    dl,0x9d
c00193c3:	0f 84 2c 02 00 00    	je     c00195f5 <Vm::faultHandler(regs*)+0x293>
c00193c9:	0f 87 91 00 00 00    	ja     c0019460 <Vm::faultHandler(regs*)+0xfe>
c00193cf:	80 fa 66             	cmp    dl,0x66
c00193d2:	0f 84 98 01 00 00    	je     c0019570 <Vm::faultHandler(regs*)+0x20e>
c00193d8:	77 47                	ja     c0019421 <Vm::faultHandler(regs*)+0xbf>
c00193da:	80 fa 36             	cmp    dl,0x36
c00193dd:	0f 84 80 01 00 00    	je     c0019563 <Vm::faultHandler(regs*)+0x201>
c00193e3:	77 1a                	ja     c00193ff <Vm::faultHandler(regs*)+0x9d>
c00193e5:	80 fa 26             	cmp    dl,0x26
c00193e8:	0f 84 4e 01 00 00    	je     c001953c <Vm::faultHandler(regs*)+0x1da>
c00193ee:	80 fa 2e             	cmp    dl,0x2e
c00193f1:	0f 85 e2 05 00 00    	jne    c00199d9 <Vm::faultHandler(regs*)+0x677>
c00193f7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00193fa:	31 f6                	xor    esi,esi
c00193fc:	41                   	inc    ecx
c00193fd:	eb be                	jmp    c00193bd <Vm::faultHandler(regs*)+0x5b>
c00193ff:	80 fa 64             	cmp    dl,0x64
c0019402:	0f 84 41 01 00 00    	je     c0019549 <Vm::faultHandler(regs*)+0x1e7>
c0019408:	0f 87 48 01 00 00    	ja     c0019556 <Vm::faultHandler(regs*)+0x1f4>
c001940e:	80 fa 3e             	cmp    dl,0x3e
c0019411:	0f 85 c2 05 00 00    	jne    c00199d9 <Vm::faultHandler(regs*)+0x677>
c0019417:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001941a:	be 01 00 00 00       	mov    esi,0x1
c001941f:	eb db                	jmp    c00193fc <Vm::faultHandler(regs*)+0x9a>
c0019421:	80 fa 6d             	cmp    dl,0x6d
c0019424:	0f 84 ec 02 00 00    	je     c0019716 <Vm::faultHandler(regs*)+0x3b4>
c001942a:	77 17                	ja     c0019443 <Vm::faultHandler(regs*)+0xe1>
c001942c:	80 fa 67             	cmp    dl,0x67
c001942f:	0f 84 48 01 00 00    	je     c001957d <Vm::faultHandler(regs*)+0x21b>
c0019435:	80 fa 6c             	cmp    dl,0x6c
c0019438:	0f 84 69 02 00 00    	je     c00196a7 <Vm::faultHandler(regs*)+0x345>
c001943e:	e9 96 05 00 00       	jmp    c00199d9 <Vm::faultHandler(regs*)+0x677>
c0019443:	80 fa 6f             	cmp    dl,0x6f
c0019446:	0f 84 f4 03 00 00    	je     c0019840 <Vm::faultHandler(regs*)+0x4de>
c001944c:	0f 82 59 03 00 00    	jb     c00197ab <Vm::faultHandler(regs*)+0x449>
c0019452:	80 fa 9c             	cmp    dl,0x9c
c0019455:	0f 84 2f 01 00 00    	je     c001958a <Vm::faultHandler(regs*)+0x228>
c001945b:	e9 79 05 00 00       	jmp    c00199d9 <Vm::faultHandler(regs*)+0x677>
c0019460:	80 fa ec             	cmp    dl,0xec
c0019463:	0f 84 14 05 00 00    	je     c001997d <Vm::faultHandler(regs*)+0x61b>
c0019469:	77 7b                	ja     c00194e6 <Vm::faultHandler(regs*)+0x184>
c001946b:	80 fa e4             	cmp    dl,0xe4
c001946e:	0f 84 93 04 00 00    	je     c0019907 <Vm::faultHandler(regs*)+0x5a5>
c0019474:	77 53                	ja     c00194c9 <Vm::faultHandler(regs*)+0x167>
c0019476:	80 fa cd             	cmp    dl,0xcd
c0019479:	0f 84 d9 01 00 00    	je     c0019658 <Vm::faultHandler(regs*)+0x2f6>
c001947f:	80 fa cf             	cmp    dl,0xcf
c0019482:	0f 85 51 05 00 00    	jne    c00199d9 <Vm::faultHandler(regs*)+0x677>
c0019488:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001948b:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001948e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019492:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019495:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019499:	81 ca 00 02 02 00    	or     edx,0x20200
c001949f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00194a2:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00194a6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00194ac:	66 c1 e8 09          	shr    ax,0x9
c00194b0:	83 e0 01             	and    eax,0x1
c00194b3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00194b6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00194b9:	83 c0 06             	add    eax,0x6
c00194bc:	25 ff ff 00 00       	and    eax,0xffff
c00194c1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00194c4:	e9 0c 05 00 00       	jmp    c00199d5 <Vm::faultHandler(regs*)+0x673>
c00194c9:	80 fa e6             	cmp    dl,0xe6
c00194cc:	0f 84 7f 04 00 00    	je     c0019951 <Vm::faultHandler(regs*)+0x5ef>
c00194d2:	0f 82 4b 04 00 00    	jb     c0019923 <Vm::faultHandler(regs*)+0x5c1>
c00194d8:	80 fa e7             	cmp    dl,0xe7
c00194db:	0f 84 87 04 00 00    	je     c0019968 <Vm::faultHandler(regs*)+0x606>
c00194e1:	e9 f3 04 00 00       	jmp    c00199d9 <Vm::faultHandler(regs*)+0x677>
c00194e6:	80 fa ef             	cmp    dl,0xef
c00194e9:	0f 84 d1 04 00 00    	je     c00199c0 <Vm::faultHandler(regs*)+0x65e>
c00194ef:	77 28                	ja     c0019519 <Vm::faultHandler(regs*)+0x1b7>
c00194f1:	80 fa ed             	cmp    dl,0xed
c00194f4:	0f 84 9f 04 00 00    	je     c0019999 <Vm::faultHandler(regs*)+0x637>
c00194fa:	80 fa ee             	cmp    dl,0xee
c00194fd:	0f 85 d6 04 00 00    	jne    c00199d9 <Vm::faultHandler(regs*)+0x677>
c0019503:	50                   	push   eax
c0019504:	50                   	push   eax
c0019505:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019509:	50                   	push   eax
c001950a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001950e:	50                   	push   eax
c001950f:	e8 5c fa ff ff       	call   c0018f70 <Vm::outbv(unsigned short, unsigned char)>
c0019514:	e9 9f 04 00 00       	jmp    c00199b8 <Vm::faultHandler(regs*)+0x656>
c0019519:	80 fa fa             	cmp    dl,0xfa
c001951c:	0f 84 69 01 00 00    	je     c001968b <Vm::faultHandler(regs*)+0x329>
c0019522:	80 fa fb             	cmp    dl,0xfb
c0019525:	0f 84 6e 01 00 00    	je     c0019699 <Vm::faultHandler(regs*)+0x337>
c001952b:	80 fa f3             	cmp    dl,0xf3
c001952e:	0f 85 a5 04 00 00    	jne    c00199d9 <Vm::faultHandler(regs*)+0x677>
c0019534:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019537:	e9 c0 fe ff ff       	jmp    c00193fc <Vm::faultHandler(regs*)+0x9a>
c001953c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001953f:	be 02 00 00 00       	mov    esi,0x2
c0019544:	e9 b3 fe ff ff       	jmp    c00193fc <Vm::faultHandler(regs*)+0x9a>
c0019549:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001954c:	be 03 00 00 00       	mov    esi,0x3
c0019551:	e9 a6 fe ff ff       	jmp    c00193fc <Vm::faultHandler(regs*)+0x9a>
c0019556:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019559:	be 04 00 00 00       	mov    esi,0x4
c001955e:	e9 99 fe ff ff       	jmp    c00193fc <Vm::faultHandler(regs*)+0x9a>
c0019563:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019566:	be 05 00 00 00       	mov    esi,0x5
c001956b:	e9 8c fe ff ff       	jmp    c00193fc <Vm::faultHandler(regs*)+0x9a>
c0019570:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019573:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019578:	e9 7f fe ff ff       	jmp    c00193fc <Vm::faultHandler(regs*)+0x9a>
c001957d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019580:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019585:	e9 72 fe ff ff       	jmp    c00193fc <Vm::faultHandler(regs*)+0x9a>
c001958a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001958d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019591:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019596:	74 30                	je     c00195c8 <Vm::faultHandler(regs*)+0x266>
c0019598:	83 e9 04             	sub    ecx,0x4
c001959b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00195a1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00195a7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00195aa:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00195ad:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00195b3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00195b7:	0f 84 15 04 00 00    	je     c00199d2 <Vm::faultHandler(regs*)+0x670>
c00195bd:	80 ce 02             	or     dh,0x2
c00195c0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00195c3:	e9 0a 04 00 00       	jmp    c00199d2 <Vm::faultHandler(regs*)+0x670>
c00195c8:	83 e9 02             	sub    ecx,0x2
c00195cb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00195d1:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00195d4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00195d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00195de:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00195e2:	74 05                	je     c00195e9 <Vm::faultHandler(regs*)+0x287>
c00195e4:	80 ce 02             	or     dh,0x2
c00195e7:	eb 03                	jmp    c00195ec <Vm::faultHandler(regs*)+0x28a>
c00195e9:	80 e6 fd             	and    dh,0xfd
c00195ec:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00195f0:	e9 dd 03 00 00       	jmp    c00199d2 <Vm::faultHandler(regs*)+0x670>
c00195f5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00195fa:	74 2a                	je     c0019626 <Vm::faultHandler(regs*)+0x2c4>
c00195fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00195fe:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019604:	81 ca 00 02 02 00    	or     edx,0x20200
c001960a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001960d:	8b 00                	mov    eax,DWORD PTR [eax]
c001960f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019615:	c1 e8 09             	shr    eax,0x9
c0019618:	83 e0 01             	and    eax,0x1
c001961b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001961e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019621:	83 c0 04             	add    eax,0x4
c0019624:	eb 25                	jmp    c001964b <Vm::faultHandler(regs*)+0x2e9>
c0019626:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019629:	81 ca 00 02 02 00    	or     edx,0x20200
c001962f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019632:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019635:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001963b:	66 c1 e8 09          	shr    ax,0x9
c001963f:	83 e0 01             	and    eax,0x1
c0019642:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019645:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019648:	83 c0 02             	add    eax,0x2
c001964b:	25 ff ff 00 00       	and    eax,0xffff
c0019650:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019653:	e9 7a 03 00 00       	jmp    c00199d2 <Vm::faultHandler(regs*)+0x670>
c0019658:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001965c:	3c ee                	cmp    al,0xee
c001965e:	75 10                	jne    c0019670 <Vm::faultHandler(regs*)+0x30e>
c0019660:	83 ec 0c             	sub    esp,0xc
c0019663:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019666:	e8 a2 f9 ff ff       	call   c001900d <Vm::mainloop3(unsigned long)>
c001966b:	e9 4b 03 00 00       	jmp    c00199bb <Vm::faultHandler(regs*)+0x659>
c0019670:	83 ec 0c             	sub    esp,0xc
c0019673:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019677:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001967b:	51                   	push   ecx
c001967c:	50                   	push   eax
c001967d:	53                   	push   ebx
c001967e:	e8 e1 fb ff ff       	call   c0019264 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019683:	83 c4 20             	add    esp,0x20
c0019686:	e9 4a 03 00 00       	jmp    c00199d5 <Vm::faultHandler(regs*)+0x673>
c001968b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019690:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019694:	e9 39 03 00 00       	jmp    c00199d2 <Vm::faultHandler(regs*)+0x670>
c0019699:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001969e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00196a2:	e9 2b 03 00 00       	jmp    c00199d2 <Vm::faultHandler(regs*)+0x670>
c00196a7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00196aa:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00196af:	74 2b                	je     c00196dc <Vm::faultHandler(regs*)+0x37a>
c00196b1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00196b8:	76 22                	jbe    c00196dc <Vm::faultHandler(regs*)+0x37a>
c00196ba:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00196be:	50                   	push   eax
c00196bf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00196c3:	50                   	push   eax
c00196c4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00196c8:	50                   	push   eax
c00196c9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00196cd:	50                   	push   eax
c00196ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00196d2:	50                   	push   eax
c00196d3:	6a 6c                	push   0x6c
c00196d5:	6a 6c                	push   0x6c
c00196d7:	e9 b9 01 00 00       	jmp    c0019895 <Vm::faultHandler(regs*)+0x533>
c00196dc:	83 ec 0c             	sub    esp,0xc
c00196df:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00196e3:	0f b7 f6             	movzx  esi,si
c00196e6:	50                   	push   eax
c00196e7:	e8 71 f8 ff ff       	call   c0018f5d <Vm::inbv(unsigned short)>
c00196ec:	83 c4 0c             	add    esp,0xc
c00196ef:	0f b6 c0             	movzx  eax,al
c00196f2:	50                   	push   eax
c00196f3:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00196f7:	50                   	push   eax
c00196f8:	56                   	push   esi
c00196f9:	e8 24 fc ff ff       	call   c0019322 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00196fe:	83 c4 10             	add    esp,0x10
c0019701:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019704:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019708:	74 03                	je     c001970d <Vm::faultHandler(regs*)+0x3ab>
c001970a:	48                   	dec    eax
c001970b:	eb 01                	jmp    c001970e <Vm::faultHandler(regs*)+0x3ac>
c001970d:	40                   	inc    eax
c001970e:	0f b7 c0             	movzx  eax,ax
c0019711:	e9 8d 00 00 00       	jmp    c00197a3 <Vm::faultHandler(regs*)+0x441>
c0019716:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019719:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001971c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019721:	74 29                	je     c001974c <Vm::faultHandler(regs*)+0x3ea>
c0019723:	3d ff ff 00 00       	cmp    eax,0xffff
c0019728:	76 22                	jbe    c001974c <Vm::faultHandler(regs*)+0x3ea>
c001972a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001972e:	50                   	push   eax
c001972f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019733:	50                   	push   eax
c0019734:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019738:	50                   	push   eax
c0019739:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001973d:	50                   	push   eax
c001973e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019742:	50                   	push   eax
c0019743:	6a 6d                	push   0x6d
c0019745:	6a 6d                	push   0x6d
c0019747:	e9 49 01 00 00       	jmp    c0019895 <Vm::faultHandler(regs*)+0x533>
c001974c:	0f b7 c8             	movzx  ecx,ax
c001974f:	0f b7 f6             	movzx  esi,si
c0019752:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019755:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001975a:	74 20                	je     c001977c <Vm::faultHandler(regs*)+0x41a>
c001975c:	ed                   	in     eax,dx
c001975d:	55                   	push   ebp
c001975e:	50                   	push   eax
c001975f:	51                   	push   ecx
c0019760:	56                   	push   esi
c0019761:	e8 e7 fb ff ff       	call   c001934d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019766:	83 c4 10             	add    esp,0x10
c0019769:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001976c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019770:	74 05                	je     c0019777 <Vm::faultHandler(regs*)+0x415>
c0019772:	83 e8 04             	sub    eax,0x4
c0019775:	eb 27                	jmp    c001979e <Vm::faultHandler(regs*)+0x43c>
c0019777:	83 c0 04             	add    eax,0x4
c001977a:	eb 22                	jmp    c001979e <Vm::faultHandler(regs*)+0x43c>
c001977c:	66 ed                	in     ax,dx
c001977e:	0f b7 c0             	movzx  eax,ax
c0019781:	57                   	push   edi
c0019782:	50                   	push   eax
c0019783:	51                   	push   ecx
c0019784:	56                   	push   esi
c0019785:	e8 ad fb ff ff       	call   c0019337 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001978a:	83 c4 10             	add    esp,0x10
c001978d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019790:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019794:	74 05                	je     c001979b <Vm::faultHandler(regs*)+0x439>
c0019796:	83 e8 02             	sub    eax,0x2
c0019799:	eb 03                	jmp    c001979e <Vm::faultHandler(regs*)+0x43c>
c001979b:	83 c0 02             	add    eax,0x2
c001979e:	25 ff ff 00 00       	and    eax,0xffff
c00197a3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00197a6:	e9 27 02 00 00       	jmp    c00199d2 <Vm::faultHandler(regs*)+0x670>
c00197ab:	8d 46 ff             	lea    eax,[esi-0x1]
c00197ae:	3c 05                	cmp    al,0x5
c00197b0:	77 24                	ja     c00197d6 <Vm::faultHandler(regs*)+0x474>
c00197b2:	0f b6 c0             	movzx  eax,al
c00197b5:	ff 24 85 34 5e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda1cc]
c00197bc:	0f b7 fd             	movzx  edi,bp
c00197bf:	eb 15                	jmp    c00197d6 <Vm::faultHandler(regs*)+0x474>
c00197c1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00197c5:	eb 0f                	jmp    c00197d6 <Vm::faultHandler(regs*)+0x474>
c00197c7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00197cb:	eb 09                	jmp    c00197d6 <Vm::faultHandler(regs*)+0x474>
c00197cd:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00197d1:	eb 03                	jmp    c00197d6 <Vm::faultHandler(regs*)+0x474>
c00197d3:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00197d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00197d9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00197de:	74 29                	je     c0019809 <Vm::faultHandler(regs*)+0x4a7>
c00197e0:	3d ff ff 00 00       	cmp    eax,0xffff
c00197e5:	76 22                	jbe    c0019809 <Vm::faultHandler(regs*)+0x4a7>
c00197e7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00197eb:	50                   	push   eax
c00197ec:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00197f0:	50                   	push   eax
c00197f1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00197f5:	50                   	push   eax
c00197f6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00197fa:	50                   	push   eax
c00197fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00197ff:	50                   	push   eax
c0019800:	6a 6e                	push   0x6e
c0019802:	6a 6e                	push   0x6e
c0019804:	e9 8c 00 00 00       	jmp    c0019895 <Vm::faultHandler(regs*)+0x533>
c0019809:	0f b7 c0             	movzx  eax,ax
c001980c:	52                   	push   edx
c001980d:	52                   	push   edx
c001980e:	50                   	push   eax
c001980f:	57                   	push   edi
c0019810:	e8 d9 fa ff ff       	call   c00192ee <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019815:	59                   	pop    ecx
c0019816:	0f b6 c0             	movzx  eax,al
c0019819:	5e                   	pop    esi
c001981a:	50                   	push   eax
c001981b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001981f:	50                   	push   eax
c0019820:	e8 4b f7 ff ff       	call   c0018f70 <Vm::outbv(unsigned short, unsigned char)>
c0019825:	83 c4 10             	add    esp,0x10
c0019828:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001982b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001982f:	74 03                	je     c0019834 <Vm::faultHandler(regs*)+0x4d2>
c0019831:	48                   	dec    eax
c0019832:	eb 01                	jmp    c0019835 <Vm::faultHandler(regs*)+0x4d3>
c0019834:	40                   	inc    eax
c0019835:	0f b7 c0             	movzx  eax,ax
c0019838:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001983b:	e9 92 01 00 00       	jmp    c00199d2 <Vm::faultHandler(regs*)+0x670>
c0019840:	8d 46 ff             	lea    eax,[esi-0x1]
c0019843:	3c 05                	cmp    al,0x5
c0019845:	77 1f                	ja     c0019866 <Vm::faultHandler(regs*)+0x504>
c0019847:	0f b6 c0             	movzx  eax,al
c001984a:	ff 24 85 4c 5e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda1b4]
c0019851:	89 ef                	mov    edi,ebp
c0019853:	eb 11                	jmp    c0019866 <Vm::faultHandler(regs*)+0x504>
c0019855:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019858:	eb 0c                	jmp    c0019866 <Vm::faultHandler(regs*)+0x504>
c001985a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001985d:	eb 07                	jmp    c0019866 <Vm::faultHandler(regs*)+0x504>
c001985f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019862:	eb 02                	jmp    c0019866 <Vm::faultHandler(regs*)+0x504>
c0019864:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019866:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019869:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001986e:	74 37                	je     c00198a7 <Vm::faultHandler(regs*)+0x545>
c0019870:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019876:	76 2f                	jbe    c00198a7 <Vm::faultHandler(regs*)+0x545>
c0019878:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001987c:	50                   	push   eax
c001987d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019881:	50                   	push   eax
c0019882:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019886:	50                   	push   eax
c0019887:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001988b:	50                   	push   eax
c001988c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019890:	50                   	push   eax
c0019891:	6a 6f                	push   0x6f
c0019893:	6a 6f                	push   0x6f
c0019895:	68 da 5d 02 c0       	push   0xc0025dda
c001989a:	e8 14 34 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001989f:	83 c4 20             	add    esp,0x20
c00198a2:	e9 86 01 00 00       	jmp    c0019a2d <Vm::faultHandler(regs*)+0x6cb>
c00198a7:	0f b7 d7             	movzx  edx,di
c00198aa:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00198ad:	0f b7 c6             	movzx  eax,si
c00198b0:	81 e1 00 04 00 00    	and    ecx,0x400
c00198b6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00198b9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198be:	74 1d                	je     c00198dd <Vm::faultHandler(regs*)+0x57b>
c00198c0:	55                   	push   ebp
c00198c1:	55                   	push   ebp
c00198c2:	50                   	push   eax
c00198c3:	52                   	push   edx
c00198c4:	e8 48 fa ff ff       	call   c0019311 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00198c9:	83 c4 10             	add    esp,0x10
c00198cc:	89 fa                	mov    edx,edi
c00198ce:	ef                   	out    dx,eax
c00198cf:	85 c9                	test   ecx,ecx
c00198d1:	74 05                	je     c00198d8 <Vm::faultHandler(regs*)+0x576>
c00198d3:	83 ee 04             	sub    esi,0x4
c00198d6:	eb 21                	jmp    c00198f9 <Vm::faultHandler(regs*)+0x597>
c00198d8:	83 c6 04             	add    esi,0x4
c00198db:	eb 1c                	jmp    c00198f9 <Vm::faultHandler(regs*)+0x597>
c00198dd:	55                   	push   ebp
c00198de:	55                   	push   ebp
c00198df:	50                   	push   eax
c00198e0:	52                   	push   edx
c00198e1:	e8 19 fa ff ff       	call   c00192ff <Vm::readWordFromReal(unsigned short, unsigned short)>
c00198e6:	83 c4 10             	add    esp,0x10
c00198e9:	89 fa                	mov    edx,edi
c00198eb:	66 ef                	out    dx,ax
c00198ed:	85 c9                	test   ecx,ecx
c00198ef:	74 05                	je     c00198f6 <Vm::faultHandler(regs*)+0x594>
c00198f1:	83 ee 02             	sub    esi,0x2
c00198f4:	eb 03                	jmp    c00198f9 <Vm::faultHandler(regs*)+0x597>
c00198f6:	83 c6 02             	add    esi,0x2
c00198f9:	81 e6 ff ff 00 00    	and    esi,0xffff
c00198ff:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019902:	e9 cb 00 00 00       	jmp    c00199d2 <Vm::faultHandler(regs*)+0x670>
c0019907:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001990e:	83 ec 0c             	sub    esp,0xc
c0019911:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019915:	50                   	push   eax
c0019916:	e8 42 f6 ff ff       	call   c0018f5d <Vm::inbv(unsigned short)>
c001991b:	0f b6 c0             	movzx  eax,al
c001991e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019921:	eb 3f                	jmp    c0019962 <Vm::faultHandler(regs*)+0x600>
c0019923:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019928:	74 07                	je     c0019931 <Vm::faultHandler(regs*)+0x5cf>
c001992a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001992e:	ed                   	in     eax,dx
c001992f:	eb 14                	jmp    c0019945 <Vm::faultHandler(regs*)+0x5e3>
c0019931:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019934:	66 31 f6             	xor    si,si
c0019937:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001993a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001993e:	66 ed                	in     ax,dx
c0019940:	0f b7 c0             	movzx  eax,ax
c0019943:	09 f0                	or     eax,esi
c0019945:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019948:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001994c:	e9 84 00 00 00       	jmp    c00199d5 <Vm::faultHandler(regs*)+0x673>
c0019951:	52                   	push   edx
c0019952:	52                   	push   edx
c0019953:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019957:	50                   	push   eax
c0019958:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001995c:	50                   	push   eax
c001995d:	e8 0e f6 ff ff       	call   c0018f70 <Vm::outbv(unsigned short, unsigned char)>
c0019962:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019966:	eb 53                	jmp    c00199bb <Vm::faultHandler(regs*)+0x659>
c0019968:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001996b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001996f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019974:	74 03                	je     c0019979 <Vm::faultHandler(regs*)+0x617>
c0019976:	ef                   	out    dx,eax
c0019977:	eb cf                	jmp    c0019948 <Vm::faultHandler(regs*)+0x5e6>
c0019979:	66 ef                	out    dx,ax
c001997b:	eb cb                	jmp    c0019948 <Vm::faultHandler(regs*)+0x5e6>
c001997d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019984:	83 ec 0c             	sub    esp,0xc
c0019987:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001998b:	50                   	push   eax
c001998c:	e8 cc f5 ff ff       	call   c0018f5d <Vm::inbv(unsigned short)>
c0019991:	0f b6 c0             	movzx  eax,al
c0019994:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019997:	eb 1f                	jmp    c00199b8 <Vm::faultHandler(regs*)+0x656>
c0019999:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001999c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199a1:	74 03                	je     c00199a6 <Vm::faultHandler(regs*)+0x644>
c00199a3:	ed                   	in     eax,dx
c00199a4:	eb 0d                	jmp    c00199b3 <Vm::faultHandler(regs*)+0x651>
c00199a6:	66 ed                	in     ax,dx
c00199a8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00199ab:	0f b7 c0             	movzx  eax,ax
c00199ae:	66 31 d2             	xor    dx,dx
c00199b1:	09 d0                	or     eax,edx
c00199b3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00199b6:	eb 1a                	jmp    c00199d2 <Vm::faultHandler(regs*)+0x670>
c00199b8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199bb:	83 c4 10             	add    esp,0x10
c00199be:	eb 15                	jmp    c00199d5 <Vm::faultHandler(regs*)+0x673>
c00199c0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00199c3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00199c6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199cb:	74 03                	je     c00199d0 <Vm::faultHandler(regs*)+0x66e>
c00199cd:	ef                   	out    dx,eax
c00199ce:	eb 02                	jmp    c00199d2 <Vm::faultHandler(regs*)+0x670>
c00199d0:	66 ef                	out    dx,ax
c00199d2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199d5:	b0 01                	mov    al,0x1
c00199d7:	eb 56                	jmp    c0019a2f <Vm::faultHandler(regs*)+0x6cd>
c00199d9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00199dd:	50                   	push   eax
c00199de:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00199e2:	50                   	push   eax
c00199e3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00199e7:	50                   	push   eax
c00199e8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00199ec:	50                   	push   eax
c00199ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199f1:	50                   	push   eax
c00199f2:	52                   	push   edx
c00199f3:	52                   	push   edx
c00199f4:	68 07 5e 02 c0       	push   0xc0025e07
c00199f9:	e8 b5 32 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00199fe:	83 c4 20             	add    esp,0x20
c0019a01:	83 ec 0c             	sub    esp,0xc
c0019a04:	6a 60                	push   0x60
c0019a06:	e8 52 f5 ff ff       	call   c0018f5d <Vm::inbv(unsigned short)>
c0019a0b:	83 c4 10             	add    esp,0x10
c0019a0e:	3c 1c                	cmp    al,0x1c
c0019a10:	74 04                	je     c0019a16 <Vm::faultHandler(regs*)+0x6b4>
c0019a12:	3c 5a                	cmp    al,0x5a
c0019a14:	75 eb                	jne    c0019a01 <Vm::faultHandler(regs*)+0x69f>
c0019a16:	3c 5a                	cmp    al,0x5a
c0019a18:	74 04                	je     c0019a1e <Vm::faultHandler(regs*)+0x6bc>
c0019a1a:	3c 1c                	cmp    al,0x1c
c0019a1c:	75 0f                	jne    c0019a2d <Vm::faultHandler(regs*)+0x6cb>
c0019a1e:	83 ec 0c             	sub    esp,0xc
c0019a21:	6a 60                	push   0x60
c0019a23:	e8 35 f5 ff ff       	call   c0018f5d <Vm::inbv(unsigned short)>
c0019a28:	83 c4 10             	add    esp,0x10
c0019a2b:	eb e9                	jmp    c0019a16 <Vm::faultHandler(regs*)+0x6b4>
c0019a2d:	31 c0                	xor    eax,eax
c0019a2f:	83 c4 1c             	add    esp,0x1c
c0019a32:	5b                   	pop    ebx
c0019a33:	5e                   	pop    esi
c0019a34:	5f                   	pop    edi
c0019a35:	5d                   	pop    ebp
c0019a36:	c3                   	ret    
c0019a37:	90                   	nop

c0019a38 <Vm::fpuInternalTo32(unsigned long long)>:
c0019a38:	57                   	push   edi
c0019a39:	56                   	push   esi
c0019a3a:	53                   	push   ebx
c0019a3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a43:	89 d6                	mov    esi,edx
c0019a45:	89 d7                	mov    edi,edx
c0019a47:	89 c1                	mov    ecx,eax
c0019a49:	c1 ef 14             	shr    edi,0x14
c0019a4c:	89 d3                	mov    ebx,edx
c0019a4e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019a54:	31 d2                	xor    edx,edx
c0019a56:	89 f8                	mov    eax,edi
c0019a58:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019a5e:	bf ff 00 00 00       	mov    edi,0xff
c0019a63:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019a68:	83 d2 ff             	adc    edx,0xffffffff
c0019a6b:	39 c7                	cmp    edi,eax
c0019a6d:	bf 00 00 00 00       	mov    edi,0x0
c0019a72:	19 d7                	sbb    edi,edx
c0019a74:	72 16                	jb     c0019a8c <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019a76:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019a7a:	c1 e0 17             	shl    eax,0x17
c0019a7d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019a83:	09 f1                	or     ecx,esi
c0019a85:	09 c1                	or     ecx,eax
c0019a87:	89 cf                	mov    edi,ecx
c0019a89:	eb 05                	jmp    c0019a90 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019a8b:	90                   	nop
c0019a8c:	31 ff                	xor    edi,edi
c0019a8e:	66 90                	xchg   ax,ax
c0019a90:	89 f8                	mov    eax,edi
c0019a92:	5b                   	pop    ebx
c0019a93:	5e                   	pop    esi
c0019a94:	5f                   	pop    edi
c0019a95:	c3                   	ret    

c0019a96 <Vm::fpuInternalTo64(unsigned long long)>:
c0019a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a9e:	c3                   	ret    

c0019a9f <Vm::fpu32ToInternal(unsigned int)>:
c0019a9f:	57                   	push   edi
c0019aa0:	31 ff                	xor    edi,edi
c0019aa2:	56                   	push   esi
c0019aa3:	53                   	push   ebx
c0019aa4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019aa8:	89 cb                	mov    ebx,ecx
c0019aaa:	89 ce                	mov    esi,ecx
c0019aac:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019ab2:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019ab8:	c1 e9 17             	shr    ecx,0x17
c0019abb:	89 f0                	mov    eax,esi
c0019abd:	0f b6 d1             	movzx  edx,cl
c0019ac0:	81 c2 80 03 00 00    	add    edx,0x380
c0019ac6:	89 d1                	mov    ecx,edx
c0019ac8:	89 fa                	mov    edx,edi
c0019aca:	c1 e1 14             	shl    ecx,0x14
c0019acd:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019ad1:	c1 e0 1d             	shl    eax,0x1d
c0019ad4:	89 d7                	mov    edi,edx
c0019ad6:	89 c6                	mov    esi,eax
c0019ad8:	89 ca                	mov    edx,ecx
c0019ada:	89 f0                	mov    eax,esi
c0019adc:	09 fa                	or     edx,edi
c0019ade:	09 da                	or     edx,ebx
c0019ae0:	5b                   	pop    ebx
c0019ae1:	5e                   	pop    esi
c0019ae2:	5f                   	pop    edi
c0019ae3:	c3                   	ret    

c0019ae4 <Vm::fpu64ToInternal(unsigned long long)>:
c0019ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ae8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019aec:	c3                   	ret    

c0019aed <Vm::fpuFloatToLong(unsigned long long)>:
c0019aed:	57                   	push   edi
c0019aee:	31 c0                	xor    eax,eax
c0019af0:	56                   	push   esi
c0019af1:	31 d2                	xor    edx,edx
c0019af3:	53                   	push   ebx
c0019af4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019af8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019afc:	89 d9                	mov    ecx,ebx
c0019afe:	c1 e9 14             	shr    ecx,0x14
c0019b01:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019b07:	89 cf                	mov    edi,ecx
c0019b09:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019b0f:	78 37                	js     c0019b48 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019b11:	89 d9                	mov    ecx,ebx
c0019b13:	89 f0                	mov    eax,esi
c0019b15:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019b1b:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019b21:	89 ca                	mov    edx,ecx
c0019b23:	b9 34 00 00 00       	mov    ecx,0x34
c0019b28:	29 f9                	sub    ecx,edi
c0019b2a:	0f ad d0             	shrd   eax,edx,cl
c0019b2d:	d3 fa                	sar    edx,cl
c0019b2f:	f6 c1 20             	test   cl,0x20
c0019b32:	74 08                	je     c0019b3c <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019b34:	89 d0                	mov    eax,edx
c0019b36:	c1 fa 1f             	sar    edx,0x1f
c0019b39:	8d 76 00             	lea    esi,[esi+0x0]
c0019b3c:	85 db                	test   ebx,ebx
c0019b3e:	79 08                	jns    c0019b48 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019b40:	f7 d8                	neg    eax
c0019b42:	83 d2 00             	adc    edx,0x0
c0019b45:	f7 da                	neg    edx
c0019b47:	90                   	nop
c0019b48:	5b                   	pop    ebx
c0019b49:	5e                   	pop    esi
c0019b4a:	5f                   	pop    edi
c0019b4b:	c3                   	ret    

c0019b4c <Vm::fpuULongToFloat(unsigned long long)>:
c0019b4c:	57                   	push   edi
c0019b4d:	31 c9                	xor    ecx,ecx
c0019b4f:	56                   	push   esi
c0019b50:	53                   	push   ebx
c0019b51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b55:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019b59:	8d 76 00             	lea    esi,[esi+0x0]
c0019b5c:	0f ba e7 14          	bt     edi,0x14
c0019b60:	72 0a                	jb     c0019b6c <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019b62:	01 f6                	add    esi,esi
c0019b64:	11 ff                	adc    edi,edi
c0019b66:	41                   	inc    ecx
c0019b67:	eb f3                	jmp    c0019b5c <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019b69:	8d 76 00             	lea    esi,[esi+0x0]
c0019b6c:	89 fa                	mov    edx,edi
c0019b6e:	89 f0                	mov    eax,esi
c0019b70:	bb 33 04 00 00       	mov    ebx,0x433
c0019b75:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019b7b:	29 cb                	sub    ebx,ecx
c0019b7d:	89 d9                	mov    ecx,ebx
c0019b7f:	5b                   	pop    ebx
c0019b80:	c1 e1 14             	shl    ecx,0x14
c0019b83:	5e                   	pop    esi
c0019b84:	09 ca                	or     edx,ecx
c0019b86:	5f                   	pop    edi
c0019b87:	c3                   	ret    

c0019b88 <Vm::fpuLongToFloat(long long)>:
c0019b88:	56                   	push   esi
c0019b89:	31 c0                	xor    eax,eax
c0019b8b:	53                   	push   ebx
c0019b8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019b90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b94:	39 c8                	cmp    eax,ecx
c0019b96:	19 d8                	sbb    eax,ebx
c0019b98:	7d 06                	jge    c0019ba0 <Vm::fpuLongToFloat(long long)+0x18>
c0019b9a:	31 f6                	xor    esi,esi
c0019b9c:	eb 0e                	jmp    c0019bac <Vm::fpuLongToFloat(long long)+0x24>
c0019b9e:	66 90                	xchg   ax,ax
c0019ba0:	f7 d9                	neg    ecx
c0019ba2:	be 01 00 00 00       	mov    esi,0x1
c0019ba7:	83 d3 00             	adc    ebx,0x0
c0019baa:	f7 db                	neg    ebx
c0019bac:	31 c0                	xor    eax,eax
c0019bae:	66 90                	xchg   ax,ax
c0019bb0:	0f ba e3 14          	bt     ebx,0x14
c0019bb4:	72 0a                	jb     c0019bc0 <Vm::fpuLongToFloat(long long)+0x38>
c0019bb6:	01 c9                	add    ecx,ecx
c0019bb8:	11 db                	adc    ebx,ebx
c0019bba:	40                   	inc    eax
c0019bbb:	eb f3                	jmp    c0019bb0 <Vm::fpuLongToFloat(long long)+0x28>
c0019bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc0:	ba 33 04 00 00       	mov    edx,0x433
c0019bc5:	29 c2                	sub    edx,eax
c0019bc7:	89 c8                	mov    eax,ecx
c0019bc9:	c1 e2 14             	shl    edx,0x14
c0019bcc:	89 d9                	mov    ecx,ebx
c0019bce:	89 f3                	mov    ebx,esi
c0019bd0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019bd6:	09 ca                	or     edx,ecx
c0019bd8:	84 db                	test   bl,bl
c0019bda:	74 08                	je     c0019be4 <Vm::fpuLongToFloat(long long)+0x5c>
c0019bdc:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019be2:	66 90                	xchg   ax,ax
c0019be4:	5b                   	pop    ebx
c0019be5:	5e                   	pop    esi
c0019be6:	c3                   	ret    

c0019be7 <Vm::fpuGet0()>:
c0019be7:	31 c0                	xor    eax,eax
c0019be9:	31 d2                	xor    edx,edx
c0019beb:	c3                   	ret    

c0019bec <Vm::fpuGet1()>:
c0019bec:	b8 01 00 00 00       	mov    eax,0x1
c0019bf1:	31 d2                	xor    edx,edx
c0019bf3:	c3                   	ret    

c0019bf4 <Vm::fpuGetPi()>:
c0019bf4:	b8 03 00 00 00       	mov    eax,0x3
c0019bf9:	31 d2                	xor    edx,edx
c0019bfb:	c3                   	ret    

c0019bfc <Vm::fpuGetLog2E()>:
c0019bfc:	83 ec 18             	sub    esp,0x18
c0019bff:	68 64 5e 02 c0       	push   0xc0025e64
c0019c04:	e8 56 ac ff ff       	call   c001485f <Krnl::panic(char const*)>
c0019c09:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c0e:	31 d2                	xor    edx,edx
c0019c10:	83 c4 1c             	add    esp,0x1c
c0019c13:	c3                   	ret    

c0019c14 <Vm::fpuGetLogE2()>:
c0019c14:	83 ec 18             	sub    esp,0x18
c0019c17:	68 70 5e 02 c0       	push   0xc0025e70
c0019c1c:	e8 3e ac ff ff       	call   c001485f <Krnl::panic(char const*)>
c0019c21:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c26:	31 d2                	xor    edx,edx
c0019c28:	83 c4 1c             	add    esp,0x1c
c0019c2b:	c3                   	ret    

c0019c2c <Vm::fpuGetLog210()>:
c0019c2c:	83 ec 18             	sub    esp,0x18
c0019c2f:	68 7c 5e 02 c0       	push   0xc0025e7c
c0019c34:	e8 26 ac ff ff       	call   c001485f <Krnl::panic(char const*)>
c0019c39:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c3e:	31 d2                	xor    edx,edx
c0019c40:	83 c4 1c             	add    esp,0x1c
c0019c43:	c3                   	ret    

c0019c44 <Vm::fpuGetLog102()>:
c0019c44:	83 ec 18             	sub    esp,0x18
c0019c47:	68 89 5e 02 c0       	push   0xc0025e89
c0019c4c:	e8 0e ac ff ff       	call   c001485f <Krnl::panic(char const*)>
c0019c51:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c56:	31 d2                	xor    edx,edx
c0019c58:	83 c4 1c             	add    esp,0x1c
c0019c5b:	c3                   	ret    

c0019c5c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019c5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c60:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019c64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c68:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019c6c:	0f 92 c0             	setb   al
c0019c6f:	c3                   	ret    

c0019c70 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019c70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c78:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019c7c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019c80:	09 c2                	or     edx,eax
c0019c82:	0f 94 c0             	sete   al
c0019c85:	c3                   	ret    

c0019c86 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019c86:	57                   	push   edi
c0019c87:	56                   	push   esi
c0019c88:	53                   	push   ebx
c0019c89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019c8d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c91:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019c95:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019c99:	57                   	push   edi
c0019c9a:	56                   	push   esi
c0019c9b:	53                   	push   ebx
c0019c9c:	51                   	push   ecx
c0019c9d:	e8 ce ff ff ff       	call   c0019c70 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019ca2:	83 c4 10             	add    esp,0x10
c0019ca5:	88 c2                	mov    dl,al
c0019ca7:	31 c0                	xor    eax,eax
c0019ca9:	84 d2                	test   dl,dl
c0019cab:	75 0f                	jne    c0019cbc <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019cad:	57                   	push   edi
c0019cae:	56                   	push   esi
c0019caf:	53                   	push   ebx
c0019cb0:	51                   	push   ecx
c0019cb1:	e8 a6 ff ff ff       	call   c0019c5c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019cb6:	83 c4 10             	add    esp,0x10
c0019cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cbc:	83 e0 01             	and    eax,0x1
c0019cbf:	5b                   	pop    ebx
c0019cc0:	88 c1                	mov    cl,al
c0019cc2:	83 e2 01             	and    edx,0x1
c0019cc5:	a0 61 90 02 c0       	mov    al,ds:0xc0029061
c0019cca:	c1 e2 06             	shl    edx,0x6
c0019ccd:	83 e0 ba             	and    eax,0xffffffba
c0019cd0:	5e                   	pop    esi
c0019cd1:	09 c8                	or     eax,ecx
c0019cd3:	5f                   	pop    edi
c0019cd4:	09 d0                	or     eax,edx
c0019cd6:	a2 61 90 02 c0       	mov    ds:0xc0029061,al
c0019cdb:	c3                   	ret    

c0019cdc <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ce0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ce4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019ce8:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019cec:	c3                   	ret    

c0019ced <Vm::fpuAbs(unsigned long long)>:
c0019ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cf1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019cf5:	c3                   	ret    

c0019cf6 <Vm::fpuChs(unsigned long long)>:
c0019cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019cfe:	f7 d8                	neg    eax
c0019d00:	83 d2 00             	adc    edx,0x0
c0019d03:	f7 da                	neg    edx
c0019d05:	c3                   	ret    

c0019d06 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019d06:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019d0a:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019d0f:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019d13:	eb c7                	jmp    c0019cdc <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019d15 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019d15:	53                   	push   ebx
c0019d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d22:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019d26:	0f af ca             	imul   ecx,edx
c0019d29:	0f af d8             	imul   ebx,eax
c0019d2c:	f7 e2                	mul    edx
c0019d2e:	01 d9                	add    ecx,ebx
c0019d30:	5b                   	pop    ebx
c0019d31:	01 ca                	add    edx,ecx
c0019d33:	c3                   	ret    

c0019d34 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019d34:	83 ec 0c             	sub    esp,0xc
c0019d37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d47:	e8 88 86 00 00       	call   c00223d4 <__udivdi3>
c0019d4c:	83 c4 1c             	add    esp,0x1c
c0019d4f:	c3                   	ret    

c0019d50 <Vm::fpuSquare(unsigned long long)>:
c0019d50:	50                   	push   eax
c0019d51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d59:	52                   	push   edx
c0019d5a:	50                   	push   eax
c0019d5b:	52                   	push   edx
c0019d5c:	50                   	push   eax
c0019d5d:	e8 b3 ff ff ff       	call   c0019d15 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019d62:	83 c4 14             	add    esp,0x14
c0019d65:	c3                   	ret    

c0019d66 <Vm::fpuGetReg(int)>:
c0019d66:	83 ec 0c             	sub    esp,0xc
c0019d69:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019d6e:	76 10                	jbe    c0019d80 <Vm::fpuGetReg(int)+0x1a>
c0019d70:	83 ec 0c             	sub    esp,0xc
c0019d73:	68 96 5e 02 c0       	push   0xc0025e96
c0019d78:	e8 e2 aa ff ff       	call   c001485f <Krnl::panic(char const*)>
c0019d7d:	83 c4 10             	add    esp,0x10
c0019d80:	a0 61 90 02 c0       	mov    al,ds:0xc0029061
c0019d85:	b9 08 00 00 00       	mov    ecx,0x8
c0019d8a:	c0 e8 03             	shr    al,0x3
c0019d8d:	83 e0 07             	and    eax,0x7
c0019d90:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019d94:	99                   	cdq    
c0019d95:	f7 f9                	idiv   ecx
c0019d97:	8b 04 d5 64 90 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd6f9c]
c0019d9e:	8b 14 d5 68 90 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6f98]
c0019da5:	83 c4 0c             	add    esp,0xc
c0019da8:	c3                   	ret    

c0019da9 <Vm::fpuSetReg(int, unsigned long long)>:
c0019da9:	57                   	push   edi
c0019daa:	56                   	push   esi
c0019dab:	52                   	push   edx
c0019dac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019db0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019db4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019db9:	76 11                	jbe    c0019dcc <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019dbb:	83 ec 0c             	sub    esp,0xc
c0019dbe:	68 a9 5e 02 c0       	push   0xc0025ea9
c0019dc3:	e8 97 aa ff ff       	call   c001485f <Krnl::panic(char const*)>
c0019dc8:	83 c4 10             	add    esp,0x10
c0019dcb:	90                   	nop
c0019dcc:	a0 61 90 02 c0       	mov    al,ds:0xc0029061
c0019dd1:	b9 08 00 00 00       	mov    ecx,0x8
c0019dd6:	c0 e8 03             	shr    al,0x3
c0019dd9:	83 e0 07             	and    eax,0x7
c0019ddc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019de0:	99                   	cdq    
c0019de1:	f7 f9                	idiv   ecx
c0019de3:	89 34 d5 64 90 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6f9c],esi
c0019dea:	89 3c d5 68 90 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6f98],edi
c0019df1:	58                   	pop    eax
c0019df2:	5e                   	pop    esi
c0019df3:	5f                   	pop    edi
c0019df4:	c3                   	ret    

c0019df5 <Vm::fpuPush(unsigned long long)>:
c0019df5:	a0 61 90 02 c0       	mov    al,ds:0xc0029061
c0019dfa:	c0 e8 03             	shr    al,0x3
c0019dfd:	83 e0 07             	and    eax,0x7
c0019e00:	83 c0 07             	add    eax,0x7
c0019e03:	88 c2                	mov    dl,al
c0019e05:	83 e0 07             	and    eax,0x7
c0019e08:	83 e2 07             	and    edx,0x7
c0019e0b:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019e12:	8a 15 61 90 02 c0    	mov    dl,BYTE PTR ds:0xc0029061
c0019e18:	83 e2 c7             	and    edx,0xffffffc7
c0019e1b:	09 ca                	or     edx,ecx
c0019e1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019e21:	88 15 61 90 02 c0    	mov    BYTE PTR ds:0xc0029061,dl
c0019e27:	89 0c c5 68 90 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6f98],ecx
c0019e2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e32:	89 14 c5 64 90 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6f9c],edx
c0019e39:	a1 a4 90 02 c0       	mov    eax,ds:0xc00290a4
c0019e3e:	83 f8 08             	cmp    eax,0x8
c0019e41:	75 09                	jne    c0019e4c <Vm::fpuPush(unsigned long long)+0x57>
c0019e43:	80 0d 60 90 02 c0 40 	or     BYTE PTR ds:0xc0029060,0x40
c0019e4a:	c3                   	ret    
c0019e4b:	90                   	nop
c0019e4c:	40                   	inc    eax
c0019e4d:	a3 a4 90 02 c0       	mov    ds:0xc00290a4,eax
c0019e52:	c3                   	ret    

c0019e53 <Vm::fpuPop()>:
c0019e53:	8a 0d 61 90 02 c0    	mov    cl,BYTE PTR ds:0xc0029061
c0019e59:	53                   	push   ebx
c0019e5a:	c0 e9 03             	shr    cl,0x3
c0019e5d:	8a 1d 61 90 02 c0    	mov    bl,BYTE PTR ds:0xc0029061
c0019e63:	83 e1 07             	and    ecx,0x7
c0019e66:	83 e3 c7             	and    ebx,0xffffffc7
c0019e69:	8b 04 cd 64 90 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd6f9c]
c0019e70:	8b 14 cd 68 90 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6f98]
c0019e77:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0019e7e:	83 e1 38             	and    ecx,0x38
c0019e81:	09 d9                	or     ecx,ebx
c0019e83:	88 0d 61 90 02 c0    	mov    BYTE PTR ds:0xc0029061,cl
c0019e89:	8b 0d a4 90 02 c0    	mov    ecx,DWORD PTR ds:0xc00290a4
c0019e8f:	85 c9                	test   ecx,ecx
c0019e91:	74 09                	je     c0019e9c <Vm::fpuPop()+0x49>
c0019e93:	49                   	dec    ecx
c0019e94:	89 0d a4 90 02 c0    	mov    DWORD PTR ds:0xc00290a4,ecx
c0019e9a:	eb 08                	jmp    c0019ea4 <Vm::fpuPop()+0x51>
c0019e9c:	80 0d 60 90 02 c0 40 	or     BYTE PTR ds:0xc0029060,0x40
c0019ea3:	90                   	nop
c0019ea4:	5b                   	pop    ebx
c0019ea5:	c3                   	ret    

c0019ea6 <Vm::x87Handler(regs*)>:
c0019ea6:	55                   	push   ebp
c0019ea7:	57                   	push   edi
c0019ea8:	56                   	push   esi
c0019ea9:	53                   	push   ebx
c0019eaa:	83 ec 1c             	sub    esp,0x1c
c0019ead:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019eb1:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019eb6:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019eb9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019ec1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019ec5:	50                   	push   eax
c0019ec6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019eca:	50                   	push   eax
c0019ecb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ecf:	50                   	push   eax
c0019ed0:	53                   	push   ebx
c0019ed1:	e8 a2 a0 ff ff       	call   c0013f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019ed6:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019ed9:	83 c4 10             	add    esp,0x10
c0019edc:	89 c6                	mov    esi,eax
c0019ede:	80 fa d9             	cmp    dl,0xd9
c0019ee1:	0f 85 79 01 00 00    	jne    c001a060 <Vm::x87Handler(regs*)+0x1ba>
c0019ee7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019eeb:	8d 50 20             	lea    edx,[eax+0x20]
c0019eee:	80 fa 0e             	cmp    dl,0xe
c0019ef1:	0f 87 a5 00 00 00    	ja     c0019f9c <Vm::x87Handler(regs*)+0xf6>
c0019ef7:	0f b6 d2             	movzx  edx,dl
c0019efa:	ff 24 95 bc 5e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffda144]
c0019f01:	8d 76 00             	lea    esi,[esi+0x0]
c0019f04:	e8 de fc ff ff       	call   c0019be7 <Vm::fpuGet0()>
c0019f09:	eb 09                	jmp    c0019f14 <Vm::x87Handler(regs*)+0x6e>
c0019f0b:	90                   	nop
c0019f0c:	e8 db fc ff ff       	call   c0019bec <Vm::fpuGet1()>
c0019f11:	8d 76 00             	lea    esi,[esi+0x0]
c0019f14:	57                   	push   edi
c0019f15:	57                   	push   edi
c0019f16:	66 90                	xchg   ax,ax
c0019f18:	52                   	push   edx
c0019f19:	50                   	push   eax
c0019f1a:	e8 d6 fe ff ff       	call   c0019df5 <Vm::fpuPush(unsigned long long)>
c0019f1f:	90                   	nop
c0019f20:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019f24:	83 c4 10             	add    esp,0x10
c0019f27:	90                   	nop
c0019f28:	b0 01                	mov    al,0x1
c0019f2a:	e9 89 0a 00 00       	jmp    c001a9b8 <Vm::x87Handler(regs*)+0xb12>
c0019f2f:	90                   	nop
c0019f30:	83 ec 0c             	sub    esp,0xc
c0019f33:	6a 00                	push   0x0
c0019f35:	e8 2c fe ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c0019f3a:	59                   	pop    ecx
c0019f3b:	5e                   	pop    esi
c0019f3c:	52                   	push   edx
c0019f3d:	50                   	push   eax
c0019f3e:	e8 b3 fd ff ff       	call   c0019cf6 <Vm::fpuChs(unsigned long long)>
c0019f43:	eb 17                	jmp    c0019f5c <Vm::x87Handler(regs*)+0xb6>
c0019f45:	8d 76 00             	lea    esi,[esi+0x0]
c0019f48:	83 ec 0c             	sub    esp,0xc
c0019f4b:	6a 00                	push   0x0
c0019f4d:	e8 14 fe ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c0019f52:	5f                   	pop    edi
c0019f53:	5d                   	pop    ebp
c0019f54:	52                   	push   edx
c0019f55:	50                   	push   eax
c0019f56:	e8 92 fd ff ff       	call   c0019ced <Vm::fpuAbs(unsigned long long)>
c0019f5b:	90                   	nop
c0019f5c:	83 c4 0c             	add    esp,0xc
c0019f5f:	90                   	nop
c0019f60:	52                   	push   edx
c0019f61:	50                   	push   eax
c0019f62:	66 90                	xchg   ax,ax
c0019f64:	6a 00                	push   0x0
c0019f66:	66 90                	xchg   ax,ax
c0019f68:	e8 3c fe ff ff       	call   c0019da9 <Vm::fpuSetReg(int, unsigned long long)>
c0019f6d:	eb b1                	jmp    c0019f20 <Vm::x87Handler(regs*)+0x7a>
c0019f6f:	90                   	nop
c0019f70:	e8 b7 fc ff ff       	call   c0019c2c <Vm::fpuGetLog210()>
c0019f75:	eb 9d                	jmp    c0019f14 <Vm::x87Handler(regs*)+0x6e>
c0019f77:	90                   	nop
c0019f78:	e8 7f fc ff ff       	call   c0019bfc <Vm::fpuGetLog2E()>
c0019f7d:	eb 95                	jmp    c0019f14 <Vm::x87Handler(regs*)+0x6e>
c0019f7f:	90                   	nop
c0019f80:	e8 6f fc ff ff       	call   c0019bf4 <Vm::fpuGetPi()>
c0019f85:	eb 8d                	jmp    c0019f14 <Vm::x87Handler(regs*)+0x6e>
c0019f87:	90                   	nop
c0019f88:	e8 b7 fc ff ff       	call   c0019c44 <Vm::fpuGetLog102()>
c0019f8d:	eb 85                	jmp    c0019f14 <Vm::x87Handler(regs*)+0x6e>
c0019f8f:	90                   	nop
c0019f90:	e8 7f fc ff ff       	call   c0019c14 <Vm::fpuGetLogE2()>
c0019f95:	e9 7a ff ff ff       	jmp    c0019f14 <Vm::x87Handler(regs*)+0x6e>
c0019f9a:	66 90                	xchg   ax,ax
c0019f9c:	8d 50 40             	lea    edx,[eax+0x40]
c0019f9f:	80 fa 07             	cmp    dl,0x7
c0019fa2:	77 18                	ja     c0019fbc <Vm::x87Handler(regs*)+0x116>
c0019fa4:	83 ec 0c             	sub    esp,0xc
c0019fa7:	2d c0 00 00 00       	sub    eax,0xc0
c0019fac:	50                   	push   eax
c0019fad:	e8 b4 fd ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c0019fb2:	59                   	pop    ecx
c0019fb3:	5e                   	pop    esi
c0019fb4:	e9 5f ff ff ff       	jmp    c0019f18 <Vm::x87Handler(regs*)+0x72>
c0019fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fbc:	8d 50 38             	lea    edx,[eax+0x38]
c0019fbf:	80 fa 07             	cmp    dl,0x7
c0019fc2:	77 3c                	ja     c001a000 <Vm::x87Handler(regs*)+0x15a>
c0019fc4:	83 ec 0c             	sub    esp,0xc
c0019fc7:	2d c8 00 00 00       	sub    eax,0xc8
c0019fcc:	50                   	push   eax
c0019fcd:	e8 94 fd ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c0019fd2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019fd9:	89 c6                	mov    esi,eax
c0019fdb:	89 d7                	mov    edi,edx
c0019fdd:	e8 84 fd ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c0019fe2:	83 c4 0c             	add    esp,0xc
c0019fe5:	52                   	push   edx
c0019fe6:	50                   	push   eax
c0019fe7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019feb:	2d c8 00 00 00       	sub    eax,0xc8
c0019ff0:	50                   	push   eax
c0019ff1:	e8 b3 fd ff ff       	call   c0019da9 <Vm::fpuSetReg(int, unsigned long long)>
c0019ff6:	83 c4 0c             	add    esp,0xc
c0019ff9:	57                   	push   edi
c0019ffa:	56                   	push   esi
c0019ffb:	e9 64 ff ff ff       	jmp    c0019f64 <Vm::x87Handler(regs*)+0xbe>
c001a000:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a004:	84 d2                	test   dl,dl
c001a006:	75 10                	jne    c001a018 <Vm::x87Handler(regs*)+0x172>
c001a008:	83 ec 0c             	sub    esp,0xc
c001a00b:	ff 36                	push   DWORD PTR [esi]
c001a00d:	e8 8d fa ff ff       	call   c0019a9f <Vm::fpu32ToInternal(unsigned int)>
c001a012:	e9 c9 00 00 00       	jmp    c001a0e0 <Vm::x87Handler(regs*)+0x23a>
c001a017:	90                   	nop
c001a018:	80 fa 03             	cmp    dl,0x3
c001a01b:	75 13                	jne    c001a030 <Vm::x87Handler(regs*)+0x18a>
c001a01d:	e8 31 fe ff ff       	call   c0019e53 <Vm::fpuPop()>
c001a022:	55                   	push   ebp
c001a023:	55                   	push   ebp
c001a024:	52                   	push   edx
c001a025:	50                   	push   eax
c001a026:	e8 0d fa ff ff       	call   c0019a38 <Vm::fpuInternalTo32(unsigned long long)>
c001a02b:	e9 90 00 00 00       	jmp    c001a0c0 <Vm::x87Handler(regs*)+0x21a>
c001a030:	80 fa 05             	cmp    dl,0x5
c001a033:	75 0f                	jne    c001a044 <Vm::x87Handler(regs*)+0x19e>
c001a035:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a038:	66 a3 62 90 02 c0    	mov    ds:0xc0029062,ax
c001a03e:	e9 ed 00 00 00       	jmp    c001a130 <Vm::x87Handler(regs*)+0x28a>
c001a043:	90                   	nop
c001a044:	31 c0                	xor    eax,eax
c001a046:	80 fa 07             	cmp    dl,0x7
c001a049:	0f 85 69 09 00 00    	jne    c001a9b8 <Vm::x87Handler(regs*)+0xb12>
c001a04f:	66 a1 62 90 02 c0    	mov    ax,ds:0xc0029062
c001a055:	66 89 06             	mov    WORD PTR [esi],ax
c001a058:	e9 d3 00 00 00       	jmp    c001a130 <Vm::x87Handler(regs*)+0x28a>
c001a05d:	8d 76 00             	lea    esi,[esi+0x0]
c001a060:	80 fa d8             	cmp    dl,0xd8
c001a063:	0f 84 d3 00 00 00    	je     c001a13c <Vm::x87Handler(regs*)+0x296>
c001a069:	80 fa dc             	cmp    dl,0xdc
c001a06c:	0f 84 2a 02 00 00    	je     c001a29c <Vm::x87Handler(regs*)+0x3f6>
c001a072:	80 fa de             	cmp    dl,0xde
c001a075:	0f 84 f1 02 00 00    	je     c001a36c <Vm::x87Handler(regs*)+0x4c6>
c001a07b:	80 fa dd             	cmp    dl,0xdd
c001a07e:	0f 84 94 04 00 00    	je     c001a518 <Vm::x87Handler(regs*)+0x672>
c001a084:	80 fa da             	cmp    dl,0xda
c001a087:	0f 84 5f 05 00 00    	je     c001a5ec <Vm::x87Handler(regs*)+0x746>
c001a08d:	80 fa df             	cmp    dl,0xdf
c001a090:	0f 84 aa 05 00 00    	je     c001a640 <Vm::x87Handler(regs*)+0x79a>
c001a096:	31 c0                	xor    eax,eax
c001a098:	80 fa db             	cmp    dl,0xdb
c001a09b:	0f 85 17 09 00 00    	jne    c001a9b8 <Vm::x87Handler(regs*)+0xb12>
c001a0a1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a0a5:	80 fa 03             	cmp    dl,0x3
c001a0a8:	0f 85 c2 06 00 00    	jne    c001a770 <Vm::x87Handler(regs*)+0x8ca>
c001a0ae:	e8 a0 fd ff ff       	call   c0019e53 <Vm::fpuPop()>
c001a0b3:	55                   	push   ebp
c001a0b4:	55                   	push   ebp
c001a0b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b8:	52                   	push   edx
c001a0b9:	50                   	push   eax
c001a0ba:	e8 2e fa ff ff       	call   c0019aed <Vm::fpuFloatToLong(unsigned long long)>
c001a0bf:	90                   	nop
c001a0c0:	83 c4 10             	add    esp,0x10
c001a0c3:	89 06                	mov    DWORD PTR [esi],eax
c001a0c5:	eb 69                	jmp    c001a130 <Vm::x87Handler(regs*)+0x28a>
c001a0c7:	90                   	nop
c001a0c8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a0cc:	84 d2                	test   dl,dl
c001a0ce:	0f 85 2c 06 00 00    	jne    c001a700 <Vm::x87Handler(regs*)+0x85a>
c001a0d4:	57                   	push   edi
c001a0d5:	57                   	push   edi
c001a0d6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a0d9:	ff 36                	push   DWORD PTR [esi]
c001a0db:	e8 04 fa ff ff       	call   c0019ae4 <Vm::fpu64ToInternal(unsigned long long)>
c001a0e0:	5e                   	pop    esi
c001a0e1:	5f                   	pop    edi
c001a0e2:	52                   	push   edx
c001a0e3:	50                   	push   eax
c001a0e4:	e8 0c fd ff ff       	call   c0019df5 <Vm::fpuPush(unsigned long long)>
c001a0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0f0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a0f3:	e9 2c fe ff ff       	jmp    c0019f24 <Vm::x87Handler(regs*)+0x7e>
c001a0f8:	80 fa 03             	cmp    dl,0x3
c001a0fb:	0f 85 2b 07 00 00    	jne    c001a82c <Vm::x87Handler(regs*)+0x986>
c001a101:	57                   	push   edi
c001a102:	57                   	push   edi
c001a103:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a106:	ff 36                	push   DWORD PTR [esi]
c001a108:	e8 d7 f9 ff ff       	call   c0019ae4 <Vm::fpu64ToInternal(unsigned long long)>
c001a10d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a114:	89 c6                	mov    esi,eax
c001a116:	89 d7                	mov    edi,edx
c001a118:	e8 49 fc ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a11d:	57                   	push   edi
c001a11e:	56                   	push   esi
c001a11f:	52                   	push   edx
c001a120:	50                   	push   eax
c001a121:	e8 60 fb ff ff       	call   c0019c86 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a126:	83 c4 20             	add    esp,0x20
c001a129:	e8 25 fd ff ff       	call   c0019e53 <Vm::fpuPop()>
c001a12e:	66 90                	xchg   ax,ax
c001a130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a134:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a137:	e9 ec fd ff ff       	jmp    c0019f28 <Vm::x87Handler(regs*)+0x82>
c001a13c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a140:	8d 50 40             	lea    edx,[eax+0x40]
c001a143:	80 fa 07             	cmp    dl,0x7
c001a146:	77 2c                	ja     c001a174 <Vm::x87Handler(regs*)+0x2ce>
c001a148:	83 ec 0c             	sub    esp,0xc
c001a14b:	2d c0 00 00 00       	sub    eax,0xc0
c001a150:	50                   	push   eax
c001a151:	e8 10 fc ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a156:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a15d:	89 c6                	mov    esi,eax
c001a15f:	89 d7                	mov    edi,edx
c001a161:	e8 00 fc ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a166:	57                   	push   edi
c001a167:	56                   	push   esi
c001a168:	52                   	push   edx
c001a169:	50                   	push   eax
c001a16a:	e8 6d fb ff ff       	call   c0019cdc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a16f:	eb 33                	jmp    c001a1a4 <Vm::x87Handler(regs*)+0x2fe>
c001a171:	8d 76 00             	lea    esi,[esi+0x0]
c001a174:	8d 50 38             	lea    edx,[eax+0x38]
c001a177:	80 fa 07             	cmp    dl,0x7
c001a17a:	77 30                	ja     c001a1ac <Vm::x87Handler(regs*)+0x306>
c001a17c:	83 ec 0c             	sub    esp,0xc
c001a17f:	2d c8 00 00 00       	sub    eax,0xc8
c001a184:	50                   	push   eax
c001a185:	e8 dc fb ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a18a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a191:	89 c6                	mov    esi,eax
c001a193:	89 d7                	mov    edi,edx
c001a195:	e8 cc fb ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a19a:	57                   	push   edi
c001a19b:	56                   	push   esi
c001a19c:	52                   	push   edx
c001a19d:	50                   	push   eax
c001a19e:	e8 72 fb ff ff       	call   c0019d15 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a1a3:	90                   	nop
c001a1a4:	83 c4 1c             	add    esp,0x1c
c001a1a7:	e9 b4 fd ff ff       	jmp    c0019f60 <Vm::x87Handler(regs*)+0xba>
c001a1ac:	8d 50 30             	lea    edx,[eax+0x30]
c001a1af:	80 fa 07             	cmp    dl,0x7
c001a1b2:	77 10                	ja     c001a1c4 <Vm::x87Handler(regs*)+0x31e>
c001a1b4:	83 ec 0c             	sub    esp,0xc
c001a1b7:	2d d0 00 00 00       	sub    eax,0xd0
c001a1bc:	e9 c3 03 00 00       	jmp    c001a584 <Vm::x87Handler(regs*)+0x6de>
c001a1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1c4:	8d 50 28             	lea    edx,[eax+0x28]
c001a1c7:	80 fa 07             	cmp    dl,0x7
c001a1ca:	77 10                	ja     c001a1dc <Vm::x87Handler(regs*)+0x336>
c001a1cc:	83 ec 0c             	sub    esp,0xc
c001a1cf:	2d d8 00 00 00       	sub    eax,0xd8
c001a1d4:	e9 e7 03 00 00       	jmp    c001a5c0 <Vm::x87Handler(regs*)+0x71a>
c001a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1dc:	8d 50 20             	lea    edx,[eax+0x20]
c001a1df:	80 fa 07             	cmp    dl,0x7
c001a1e2:	77 1c                	ja     c001a200 <Vm::x87Handler(regs*)+0x35a>
c001a1e4:	83 ec 0c             	sub    esp,0xc
c001a1e7:	2d e0 00 00 00       	sub    eax,0xe0
c001a1ec:	50                   	push   eax
c001a1ed:	e8 74 fb ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a1f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a1f9:	89 c6                	mov    esi,eax
c001a1fb:	89 d7                	mov    edi,edx
c001a1fd:	eb 25                	jmp    c001a224 <Vm::x87Handler(regs*)+0x37e>
c001a1ff:	90                   	nop
c001a200:	8d 50 18             	lea    edx,[eax+0x18]
c001a203:	80 fa 07             	cmp    dl,0x7
c001a206:	77 30                	ja     c001a238 <Vm::x87Handler(regs*)+0x392>
c001a208:	83 ec 0c             	sub    esp,0xc
c001a20b:	6a 00                	push   0x0
c001a20d:	e8 54 fb ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a212:	89 c6                	mov    esi,eax
c001a214:	89 d7                	mov    edi,edx
c001a216:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a21a:	2d e8 00 00 00       	sub    eax,0xe8
c001a21f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a222:	66 90                	xchg   ax,ax
c001a224:	e8 3d fb ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a229:	57                   	push   edi
c001a22a:	56                   	push   esi
c001a22b:	52                   	push   edx
c001a22c:	50                   	push   eax
c001a22d:	e8 d4 fa ff ff       	call   c0019d06 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a232:	e9 6d ff ff ff       	jmp    c001a1a4 <Vm::x87Handler(regs*)+0x2fe>
c001a237:	90                   	nop
c001a238:	8d 50 10             	lea    edx,[eax+0x10]
c001a23b:	80 fa 07             	cmp    dl,0x7
c001a23e:	77 1c                	ja     c001a25c <Vm::x87Handler(regs*)+0x3b6>
c001a240:	83 ec 0c             	sub    esp,0xc
c001a243:	2d f0 00 00 00       	sub    eax,0xf0
c001a248:	50                   	push   eax
c001a249:	e8 18 fb ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a24e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a255:	89 c6                	mov    esi,eax
c001a257:	89 d7                	mov    edi,edx
c001a259:	eb 25                	jmp    c001a280 <Vm::x87Handler(regs*)+0x3da>
c001a25b:	90                   	nop
c001a25c:	3c f7                	cmp    al,0xf7
c001a25e:	0f 86 00 04 00 00    	jbe    c001a664 <Vm::x87Handler(regs*)+0x7be>
c001a264:	83 ec 0c             	sub    esp,0xc
c001a267:	6a 00                	push   0x0
c001a269:	e8 f8 fa ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a26e:	89 c6                	mov    esi,eax
c001a270:	89 d7                	mov    edi,edx
c001a272:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a276:	2d f8 00 00 00       	sub    eax,0xf8
c001a27b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a27e:	66 90                	xchg   ax,ax
c001a280:	e8 e1 fa ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a285:	57                   	push   edi
c001a286:	56                   	push   esi
c001a287:	52                   	push   edx
c001a288:	50                   	push   eax
c001a289:	e8 a6 fa ff ff       	call   c0019d34 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a28e:	83 c4 1c             	add    esp,0x1c
c001a291:	52                   	push   edx
c001a292:	50                   	push   eax
c001a293:	6a 00                	push   0x0
c001a295:	e9 6a 02 00 00       	jmp    c001a504 <Vm::x87Handler(regs*)+0x65e>
c001a29a:	66 90                	xchg   ax,ax
c001a29c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2a0:	8d 50 40             	lea    edx,[eax+0x40]
c001a2a3:	80 fa 07             	cmp    dl,0x7
c001a2a6:	77 38                	ja     c001a2e0 <Vm::x87Handler(regs*)+0x43a>
c001a2a8:	83 ec 0c             	sub    esp,0xc
c001a2ab:	2d c0 00 00 00       	sub    eax,0xc0
c001a2b0:	50                   	push   eax
c001a2b1:	e8 b0 fa ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a2b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2bd:	89 c6                	mov    esi,eax
c001a2bf:	89 d7                	mov    edi,edx
c001a2c1:	e8 a0 fa ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a2c6:	57                   	push   edi
c001a2c7:	56                   	push   esi
c001a2c8:	52                   	push   edx
c001a2c9:	50                   	push   eax
c001a2ca:	e8 0d fa ff ff       	call   c0019cdc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a2cf:	83 c4 1c             	add    esp,0x1c
c001a2d2:	52                   	push   edx
c001a2d3:	50                   	push   eax
c001a2d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2d8:	2d c0 00 00 00       	sub    eax,0xc0
c001a2dd:	eb 41                	jmp    c001a320 <Vm::x87Handler(regs*)+0x47a>
c001a2df:	90                   	nop
c001a2e0:	8d 50 38             	lea    edx,[eax+0x38]
c001a2e3:	80 fa 07             	cmp    dl,0x7
c001a2e6:	77 40                	ja     c001a328 <Vm::x87Handler(regs*)+0x482>
c001a2e8:	83 ec 0c             	sub    esp,0xc
c001a2eb:	2d c8 00 00 00       	sub    eax,0xc8
c001a2f0:	50                   	push   eax
c001a2f1:	e8 70 fa ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a2f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2fd:	89 c6                	mov    esi,eax
c001a2ff:	89 d7                	mov    edi,edx
c001a301:	e8 60 fa ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a306:	57                   	push   edi
c001a307:	56                   	push   esi
c001a308:	52                   	push   edx
c001a309:	50                   	push   eax
c001a30a:	e8 06 fa ff ff       	call   c0019d15 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a30f:	83 c4 1c             	add    esp,0x1c
c001a312:	52                   	push   edx
c001a313:	50                   	push   eax
c001a314:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a318:	2d c8 00 00 00       	sub    eax,0xc8
c001a31d:	8d 76 00             	lea    esi,[esi+0x0]
c001a320:	50                   	push   eax
c001a321:	e9 42 fc ff ff       	jmp    c0019f68 <Vm::x87Handler(regs*)+0xc2>
c001a326:	66 90                	xchg   ax,ax
c001a328:	83 c0 18             	add    eax,0x18
c001a32b:	3c 07                	cmp    al,0x7
c001a32d:	0f 87 6d 04 00 00    	ja     c001a7a0 <Vm::x87Handler(regs*)+0x8fa>
c001a333:	83 ec 0c             	sub    esp,0xc
c001a336:	6a 00                	push   0x0
c001a338:	e8 29 fa ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a33d:	89 c6                	mov    esi,eax
c001a33f:	89 d7                	mov    edi,edx
c001a341:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a345:	2d e8 00 00 00       	sub    eax,0xe8
c001a34a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a34d:	e8 14 fa ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a352:	57                   	push   edi
c001a353:	56                   	push   esi
c001a354:	52                   	push   edx
c001a355:	50                   	push   eax
c001a356:	e8 ab f9 ff ff       	call   c0019d06 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a35b:	83 c4 1c             	add    esp,0x1c
c001a35e:	52                   	push   edx
c001a35f:	50                   	push   eax
c001a360:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a364:	2d e8 00 00 00       	sub    eax,0xe8
c001a369:	eb b5                	jmp    c001a320 <Vm::x87Handler(regs*)+0x47a>
c001a36b:	90                   	nop
c001a36c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a370:	8d 50 40             	lea    edx,[eax+0x40]
c001a373:	80 fa 07             	cmp    dl,0x7
c001a376:	77 3c                	ja     c001a3b4 <Vm::x87Handler(regs*)+0x50e>
c001a378:	83 ec 0c             	sub    esp,0xc
c001a37b:	2d c0 00 00 00       	sub    eax,0xc0
c001a380:	50                   	push   eax
c001a381:	e8 e0 f9 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a386:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a38d:	89 c6                	mov    esi,eax
c001a38f:	89 d7                	mov    edi,edx
c001a391:	e8 d0 f9 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a396:	57                   	push   edi
c001a397:	56                   	push   esi
c001a398:	52                   	push   edx
c001a399:	50                   	push   eax
c001a39a:	e8 3d f9 ff ff       	call   c0019cdc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a39f:	83 c4 1c             	add    esp,0x1c
c001a3a2:	52                   	push   edx
c001a3a3:	50                   	push   eax
c001a3a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3a8:	2d c0 00 00 00       	sub    eax,0xc0
c001a3ad:	e9 b2 01 00 00       	jmp    c001a564 <Vm::x87Handler(regs*)+0x6be>
c001a3b2:	66 90                	xchg   ax,ax
c001a3b4:	8d 50 20             	lea    edx,[eax+0x20]
c001a3b7:	80 fa 07             	cmp    dl,0x7
c001a3ba:	77 3c                	ja     c001a3f8 <Vm::x87Handler(regs*)+0x552>
c001a3bc:	83 ec 0c             	sub    esp,0xc
c001a3bf:	2d e0 00 00 00       	sub    eax,0xe0
c001a3c4:	50                   	push   eax
c001a3c5:	e8 9c f9 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a3ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3d1:	89 c6                	mov    esi,eax
c001a3d3:	89 d7                	mov    edi,edx
c001a3d5:	e8 8c f9 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a3da:	57                   	push   edi
c001a3db:	56                   	push   esi
c001a3dc:	52                   	push   edx
c001a3dd:	50                   	push   eax
c001a3de:	e8 23 f9 ff ff       	call   c0019d06 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3e3:	83 c4 1c             	add    esp,0x1c
c001a3e6:	52                   	push   edx
c001a3e7:	50                   	push   eax
c001a3e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3ec:	2d e0 00 00 00       	sub    eax,0xe0
c001a3f1:	e9 6e 01 00 00       	jmp    c001a564 <Vm::x87Handler(regs*)+0x6be>
c001a3f6:	66 90                	xchg   ax,ax
c001a3f8:	8d 50 18             	lea    edx,[eax+0x18]
c001a3fb:	80 fa 07             	cmp    dl,0x7
c001a3fe:	77 3c                	ja     c001a43c <Vm::x87Handler(regs*)+0x596>
c001a400:	83 ec 0c             	sub    esp,0xc
c001a403:	6a 00                	push   0x0
c001a405:	e8 5c f9 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a40a:	89 c6                	mov    esi,eax
c001a40c:	89 d7                	mov    edi,edx
c001a40e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a412:	2d e8 00 00 00       	sub    eax,0xe8
c001a417:	89 04 24             	mov    DWORD PTR [esp],eax
c001a41a:	e8 47 f9 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a41f:	57                   	push   edi
c001a420:	56                   	push   esi
c001a421:	52                   	push   edx
c001a422:	50                   	push   eax
c001a423:	e8 de f8 ff ff       	call   c0019d06 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a428:	83 c4 1c             	add    esp,0x1c
c001a42b:	52                   	push   edx
c001a42c:	50                   	push   eax
c001a42d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a431:	2d e8 00 00 00       	sub    eax,0xe8
c001a436:	e9 29 01 00 00       	jmp    c001a564 <Vm::x87Handler(regs*)+0x6be>
c001a43b:	90                   	nop
c001a43c:	8d 50 38             	lea    edx,[eax+0x38]
c001a43f:	80 fa 07             	cmp    dl,0x7
c001a442:	77 3c                	ja     c001a480 <Vm::x87Handler(regs*)+0x5da>
c001a444:	83 ec 0c             	sub    esp,0xc
c001a447:	2d c8 00 00 00       	sub    eax,0xc8
c001a44c:	50                   	push   eax
c001a44d:	e8 14 f9 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a452:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a459:	89 c6                	mov    esi,eax
c001a45b:	89 d7                	mov    edi,edx
c001a45d:	e8 04 f9 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a462:	57                   	push   edi
c001a463:	56                   	push   esi
c001a464:	52                   	push   edx
c001a465:	50                   	push   eax
c001a466:	e8 aa f8 ff ff       	call   c0019d15 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a46b:	83 c4 1c             	add    esp,0x1c
c001a46e:	52                   	push   edx
c001a46f:	50                   	push   eax
c001a470:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a474:	2d c8 00 00 00       	sub    eax,0xc8
c001a479:	e9 82 00 00 00       	jmp    c001a500 <Vm::x87Handler(regs*)+0x65a>
c001a47e:	66 90                	xchg   ax,ax
c001a480:	3c f7                	cmp    al,0xf7
c001a482:	76 38                	jbe    c001a4bc <Vm::x87Handler(regs*)+0x616>
c001a484:	83 ec 0c             	sub    esp,0xc
c001a487:	6a 00                	push   0x0
c001a489:	e8 d8 f8 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a48e:	89 c6                	mov    esi,eax
c001a490:	89 d7                	mov    edi,edx
c001a492:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a496:	2d f8 00 00 00       	sub    eax,0xf8
c001a49b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a49e:	e8 c3 f8 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a4a3:	57                   	push   edi
c001a4a4:	56                   	push   esi
c001a4a5:	52                   	push   edx
c001a4a6:	50                   	push   eax
c001a4a7:	e8 88 f8 ff ff       	call   c0019d34 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a4ac:	83 c4 1c             	add    esp,0x1c
c001a4af:	52                   	push   edx
c001a4b0:	50                   	push   eax
c001a4b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4b5:	2d f8 00 00 00       	sub    eax,0xf8
c001a4ba:	eb 44                	jmp    c001a500 <Vm::x87Handler(regs*)+0x65a>
c001a4bc:	8d 50 10             	lea    edx,[eax+0x10]
c001a4bf:	80 fa 07             	cmp    dl,0x7
c001a4c2:	0f 87 6c 01 00 00    	ja     c001a634 <Vm::x87Handler(regs*)+0x78e>
c001a4c8:	83 ec 0c             	sub    esp,0xc
c001a4cb:	2d f0 00 00 00       	sub    eax,0xf0
c001a4d0:	50                   	push   eax
c001a4d1:	e8 90 f8 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a4d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4dd:	89 c6                	mov    esi,eax
c001a4df:	89 d7                	mov    edi,edx
c001a4e1:	e8 80 f8 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a4e6:	57                   	push   edi
c001a4e7:	56                   	push   esi
c001a4e8:	52                   	push   edx
c001a4e9:	50                   	push   eax
c001a4ea:	e8 45 f8 ff ff       	call   c0019d34 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a4ef:	83 c4 1c             	add    esp,0x1c
c001a4f2:	52                   	push   edx
c001a4f3:	50                   	push   eax
c001a4f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4f8:	2d f0 00 00 00       	sub    eax,0xf0
c001a4fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a500:	50                   	push   eax
c001a501:	8d 76 00             	lea    esi,[esi+0x0]
c001a504:	e8 a0 f8 ff ff       	call   c0019da9 <Vm::fpuSetReg(int, unsigned long long)>
c001a509:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a50d:	e8 41 f9 ff ff       	call   c0019e53 <Vm::fpuPop()>
c001a512:	e9 0d fa ff ff       	jmp    c0019f24 <Vm::x87Handler(regs*)+0x7e>
c001a517:	90                   	nop
c001a518:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a51c:	8d 50 30             	lea    edx,[eax+0x30]
c001a51f:	80 fa 07             	cmp    dl,0x7
c001a522:	77 20                	ja     c001a544 <Vm::x87Handler(regs*)+0x69e>
c001a524:	83 ec 0c             	sub    esp,0xc
c001a527:	6a 00                	push   0x0
c001a529:	e8 38 f8 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a52e:	83 c4 0c             	add    esp,0xc
c001a531:	52                   	push   edx
c001a532:	50                   	push   eax
c001a533:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a537:	2d d0 00 00 00       	sub    eax,0xd0
c001a53c:	e9 df fd ff ff       	jmp    c001a320 <Vm::x87Handler(regs*)+0x47a>
c001a541:	8d 76 00             	lea    esi,[esi+0x0]
c001a544:	8d 50 28             	lea    edx,[eax+0x28]
c001a547:	80 fa 07             	cmp    dl,0x7
c001a54a:	77 28                	ja     c001a574 <Vm::x87Handler(regs*)+0x6ce>
c001a54c:	83 ec 0c             	sub    esp,0xc
c001a54f:	6a 00                	push   0x0
c001a551:	e8 10 f8 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a556:	83 c4 0c             	add    esp,0xc
c001a559:	52                   	push   edx
c001a55a:	50                   	push   eax
c001a55b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a55f:	2d d8 00 00 00       	sub    eax,0xd8
c001a564:	50                   	push   eax
c001a565:	e8 3f f8 ff ff       	call   c0019da9 <Vm::fpuSetReg(int, unsigned long long)>
c001a56a:	e8 e4 f8 ff ff       	call   c0019e53 <Vm::fpuPop()>
c001a56f:	e9 ac f9 ff ff       	jmp    c0019f20 <Vm::x87Handler(regs*)+0x7a>
c001a574:	8d 50 20             	lea    edx,[eax+0x20]
c001a577:	80 fa 07             	cmp    dl,0x7
c001a57a:	77 30                	ja     c001a5ac <Vm::x87Handler(regs*)+0x706>
c001a57c:	83 ec 0c             	sub    esp,0xc
c001a57f:	2d e0 00 00 00       	sub    eax,0xe0
c001a584:	50                   	push   eax
c001a585:	e8 dc f7 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a58a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a591:	89 c6                	mov    esi,eax
c001a593:	89 d7                	mov    edi,edx
c001a595:	e8 cc f7 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a59a:	57                   	push   edi
c001a59b:	56                   	push   esi
c001a59c:	52                   	push   edx
c001a59d:	50                   	push   eax
c001a59e:	e8 e3 f6 ff ff       	call   c0019c86 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a5a3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a5a7:	e9 78 02 00 00       	jmp    c001a824 <Vm::x87Handler(regs*)+0x97e>
c001a5ac:	8d 50 18             	lea    edx,[eax+0x18]
c001a5af:	80 fa 07             	cmp    dl,0x7
c001a5b2:	0f 87 10 fb ff ff    	ja     c001a0c8 <Vm::x87Handler(regs*)+0x222>
c001a5b8:	83 ec 0c             	sub    esp,0xc
c001a5bb:	2d e8 00 00 00       	sub    eax,0xe8
c001a5c0:	50                   	push   eax
c001a5c1:	e8 a0 f7 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a5c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5cd:	89 c6                	mov    esi,eax
c001a5cf:	89 d7                	mov    edi,edx
c001a5d1:	e8 90 f7 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a5d6:	57                   	push   edi
c001a5d7:	56                   	push   esi
c001a5d8:	52                   	push   edx
c001a5d9:	50                   	push   eax
c001a5da:	e8 a7 f6 ff ff       	call   c0019c86 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a5df:	83 c4 20             	add    esp,0x20
c001a5e2:	e8 6c f8 ff ff       	call   c0019e53 <Vm::fpuPop()>
c001a5e7:	eb 6f                	jmp    c001a658 <Vm::x87Handler(regs*)+0x7b2>
c001a5e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a5ec:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a5f0:	0f 85 22 01 00 00    	jne    c001a718 <Vm::x87Handler(regs*)+0x872>
c001a5f6:	66 90                	xchg   ax,ax
c001a5f8:	83 ec 0c             	sub    esp,0xc
c001a5fb:	6a 01                	push   0x1
c001a5fd:	e8 64 f7 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a602:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a609:	89 c6                	mov    esi,eax
c001a60b:	89 d7                	mov    edi,edx
c001a60d:	e8 54 f7 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a612:	57                   	push   edi
c001a613:	56                   	push   esi
c001a614:	52                   	push   edx
c001a615:	50                   	push   eax
c001a616:	e8 6b f6 ff ff       	call   c0019c86 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a61b:	83 c4 20             	add    esp,0x20
c001a61e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a622:	e8 2c f8 ff ff       	call   c0019e53 <Vm::fpuPop()>
c001a627:	e8 27 f8 ff ff       	call   c0019e53 <Vm::fpuPop()>
c001a62c:	e9 f7 f8 ff ff       	jmp    c0019f28 <Vm::x87Handler(regs*)+0x82>
c001a631:	8d 76 00             	lea    esi,[esi+0x0]
c001a634:	3c d9                	cmp    al,0xd9
c001a636:	0f 85 e8 02 00 00    	jne    c001a924 <Vm::x87Handler(regs*)+0xa7e>
c001a63c:	eb ba                	jmp    c001a5f8 <Vm::x87Handler(regs*)+0x752>
c001a63e:	66 90                	xchg   ax,ax
c001a640:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a644:	0f 85 2a 03 00 00    	jne    c001a974 <Vm::x87Handler(regs*)+0xace>
c001a64a:	0f b7 05 60 90 02 c0 	movzx  eax,WORD PTR ds:0xc0029060
c001a651:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a655:	8d 76 00             	lea    esi,[esi+0x0]
c001a658:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a65c:	e9 c7 f8 ff ff       	jmp    c0019f28 <Vm::x87Handler(regs*)+0x82>
c001a661:	8d 76 00             	lea    esi,[esi+0x0]
c001a664:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a668:	84 d2                	test   dl,dl
c001a66a:	75 10                	jne    c001a67c <Vm::x87Handler(regs*)+0x7d6>
c001a66c:	83 ec 0c             	sub    esp,0xc
c001a66f:	ff 36                	push   DWORD PTR [esi]
c001a671:	e8 29 f4 ff ff       	call   c0019a9f <Vm::fpu32ToInternal(unsigned int)>
c001a676:	e9 39 01 00 00       	jmp    c001a7b4 <Vm::x87Handler(regs*)+0x90e>
c001a67b:	90                   	nop
c001a67c:	80 fa 01             	cmp    dl,0x1
c001a67f:	75 0f                	jne    c001a690 <Vm::x87Handler(regs*)+0x7ea>
c001a681:	83 ec 0c             	sub    esp,0xc
c001a684:	ff 36                	push   DWORD PTR [esi]
c001a686:	e8 14 f4 ff ff       	call   c0019a9f <Vm::fpu32ToInternal(unsigned int)>
c001a68b:	e9 b4 02 00 00       	jmp    c001a944 <Vm::x87Handler(regs*)+0xa9e>
c001a690:	80 fa 04             	cmp    dl,0x4
c001a693:	75 0f                	jne    c001a6a4 <Vm::x87Handler(regs*)+0x7fe>
c001a695:	83 ec 0c             	sub    esp,0xc
c001a698:	ff 36                	push   DWORD PTR [esi]
c001a69a:	e8 00 f4 ff ff       	call   c0019a9f <Vm::fpu32ToInternal(unsigned int)>
c001a69f:	e9 9c 01 00 00       	jmp    c001a840 <Vm::x87Handler(regs*)+0x99a>
c001a6a4:	80 fa 05             	cmp    dl,0x5
c001a6a7:	75 1b                	jne    c001a6c4 <Vm::x87Handler(regs*)+0x81e>
c001a6a9:	83 ec 0c             	sub    esp,0xc
c001a6ac:	6a 00                	push   0x0
c001a6ae:	e8 b3 f6 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a6b3:	89 c7                	mov    edi,eax
c001a6b5:	89 d5                	mov    ebp,edx
c001a6b7:	58                   	pop    eax
c001a6b8:	ff 36                	push   DWORD PTR [esi]
c001a6ba:	e8 e0 f3 ff ff       	call   c0019a9f <Vm::fpu32ToInternal(unsigned int)>
c001a6bf:	e9 bc 01 00 00       	jmp    c001a880 <Vm::x87Handler(regs*)+0x9da>
c001a6c4:	80 fa 06             	cmp    dl,0x6
c001a6c7:	75 0f                	jne    c001a6d8 <Vm::x87Handler(regs*)+0x832>
c001a6c9:	83 ec 0c             	sub    esp,0xc
c001a6cc:	ff 36                	push   DWORD PTR [esi]
c001a6ce:	e8 cc f3 ff ff       	call   c0019a9f <Vm::fpu32ToInternal(unsigned int)>
c001a6d3:	e9 cc 01 00 00       	jmp    c001a8a4 <Vm::x87Handler(regs*)+0x9fe>
c001a6d8:	31 c0                	xor    eax,eax
c001a6da:	80 fa 07             	cmp    dl,0x7
c001a6dd:	0f 85 d5 02 00 00    	jne    c001a9b8 <Vm::x87Handler(regs*)+0xb12>
c001a6e3:	83 ec 0c             	sub    esp,0xc
c001a6e6:	6a 00                	push   0x0
c001a6e8:	e8 79 f6 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a6ed:	89 c7                	mov    edi,eax
c001a6ef:	89 d5                	mov    ebp,edx
c001a6f1:	58                   	pop    eax
c001a6f2:	ff 36                	push   DWORD PTR [esi]
c001a6f4:	e8 a6 f3 ff ff       	call   c0019a9f <Vm::fpu32ToInternal(unsigned int)>
c001a6f9:	e9 ee 01 00 00       	jmp    c001a8ec <Vm::x87Handler(regs*)+0xa46>
c001a6fe:	66 90                	xchg   ax,ax
c001a700:	80 fa 03             	cmp    dl,0x3
c001a703:	0f 85 f7 01 00 00    	jne    c001a900 <Vm::x87Handler(regs*)+0xa5a>
c001a709:	e8 45 f7 ff ff       	call   c0019e53 <Vm::fpuPop()>
c001a70e:	51                   	push   ecx
c001a70f:	51                   	push   ecx
c001a710:	e9 03 02 00 00       	jmp    c001a918 <Vm::x87Handler(regs*)+0xa72>
c001a715:	8d 76 00             	lea    esi,[esi+0x0]
c001a718:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a71c:	80 fa 01             	cmp    dl,0x1
c001a71f:	75 0b                	jne    c001a72c <Vm::x87Handler(regs*)+0x886>
c001a721:	57                   	push   edi
c001a722:	57                   	push   edi
c001a723:	8b 06                	mov    eax,DWORD PTR [esi]
c001a725:	e9 0e 02 00 00       	jmp    c001a938 <Vm::x87Handler(regs*)+0xa92>
c001a72a:	66 90                	xchg   ax,ax
c001a72c:	80 fa 04             	cmp    dl,0x4
c001a72f:	75 13                	jne    c001a744 <Vm::x87Handler(regs*)+0x89e>
c001a731:	31 d2                	xor    edx,edx
c001a733:	51                   	push   ecx
c001a734:	51                   	push   ecx
c001a735:	8b 06                	mov    eax,DWORD PTR [esi]
c001a737:	52                   	push   edx
c001a738:	50                   	push   eax
c001a739:	e8 4a f4 ff ff       	call   c0019b88 <Vm::fpuLongToFloat(long long)>
c001a73e:	e9 fd 00 00 00       	jmp    c001a840 <Vm::x87Handler(regs*)+0x99a>
c001a743:	90                   	nop
c001a744:	31 c0                	xor    eax,eax
c001a746:	80 fa 07             	cmp    dl,0x7
c001a749:	0f 85 69 02 00 00    	jne    c001a9b8 <Vm::x87Handler(regs*)+0xb12>
c001a74f:	83 ec 0c             	sub    esp,0xc
c001a752:	6a 00                	push   0x0
c001a754:	e8 0d f6 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a759:	89 c7                	mov    edi,eax
c001a75b:	89 d5                	mov    ebp,edx
c001a75d:	58                   	pop    eax
c001a75e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a760:	5a                   	pop    edx
c001a761:	31 d2                	xor    edx,edx
c001a763:	52                   	push   edx
c001a764:	50                   	push   eax
c001a765:	e8 1e f4 ff ff       	call   c0019b88 <Vm::fpuLongToFloat(long long)>
c001a76a:	e9 7d 01 00 00       	jmp    c001a8ec <Vm::x87Handler(regs*)+0xa46>
c001a76f:	90                   	nop
c001a770:	84 d2                	test   dl,dl
c001a772:	75 10                	jne    c001a784 <Vm::x87Handler(regs*)+0x8de>
c001a774:	31 d2                	xor    edx,edx
c001a776:	55                   	push   ebp
c001a777:	55                   	push   ebp
c001a778:	8b 06                	mov    eax,DWORD PTR [esi]
c001a77a:	52                   	push   edx
c001a77b:	50                   	push   eax
c001a77c:	e9 03 02 00 00       	jmp    c001a984 <Vm::x87Handler(regs*)+0xade>
c001a781:	8d 76 00             	lea    esi,[esi+0x0]
c001a784:	31 c0                	xor    eax,eax
c001a786:	80 fa 02             	cmp    dl,0x2
c001a789:	0f 85 29 02 00 00    	jne    c001a9b8 <Vm::x87Handler(regs*)+0xb12>
c001a78f:	83 ec 0c             	sub    esp,0xc
c001a792:	6a 00                	push   0x0
c001a794:	e8 cd f5 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a799:	59                   	pop    ecx
c001a79a:	5f                   	pop    edi
c001a79b:	e9 18 f9 ff ff       	jmp    c001a0b8 <Vm::x87Handler(regs*)+0x212>
c001a7a0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a7a4:	84 d2                	test   dl,dl
c001a7a6:	75 2c                	jne    c001a7d4 <Vm::x87Handler(regs*)+0x92e>
c001a7a8:	50                   	push   eax
c001a7a9:	50                   	push   eax
c001a7aa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a7ad:	ff 36                	push   DWORD PTR [esi]
c001a7af:	e8 30 f3 ff ff       	call   c0019ae4 <Vm::fpu64ToInternal(unsigned long long)>
c001a7b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7bb:	89 c6                	mov    esi,eax
c001a7bd:	89 d7                	mov    edi,edx
c001a7bf:	e8 a2 f5 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a7c4:	57                   	push   edi
c001a7c5:	56                   	push   esi
c001a7c6:	52                   	push   edx
c001a7c7:	50                   	push   eax
c001a7c8:	e8 0f f5 ff ff       	call   c0019cdc <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a7cd:	e9 8e 01 00 00       	jmp    c001a960 <Vm::x87Handler(regs*)+0xaba>
c001a7d2:	66 90                	xchg   ax,ax
c001a7d4:	80 fa 01             	cmp    dl,0x1
c001a7d7:	75 13                	jne    c001a7ec <Vm::x87Handler(regs*)+0x946>
c001a7d9:	50                   	push   eax
c001a7da:	50                   	push   eax
c001a7db:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a7de:	ff 36                	push   DWORD PTR [esi]
c001a7e0:	e8 ff f2 ff ff       	call   c0019ae4 <Vm::fpu64ToInternal(unsigned long long)>
c001a7e5:	e9 5a 01 00 00       	jmp    c001a944 <Vm::x87Handler(regs*)+0xa9e>
c001a7ea:	66 90                	xchg   ax,ax
c001a7ec:	80 fa 02             	cmp    dl,0x2
c001a7ef:	0f 85 03 f9 ff ff    	jne    c001a0f8 <Vm::x87Handler(regs*)+0x252>
c001a7f5:	55                   	push   ebp
c001a7f6:	55                   	push   ebp
c001a7f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a7fa:	ff 36                	push   DWORD PTR [esi]
c001a7fc:	e8 e3 f2 ff ff       	call   c0019ae4 <Vm::fpu64ToInternal(unsigned long long)>
c001a801:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a808:	89 c6                	mov    esi,eax
c001a80a:	89 d7                	mov    edi,edx
c001a80c:	e8 55 f5 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a811:	57                   	push   edi
c001a812:	56                   	push   esi
c001a813:	52                   	push   edx
c001a814:	50                   	push   eax
c001a815:	e8 6c f4 ff ff       	call   c0019c86 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a81a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a81e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a821:	8d 76 00             	lea    esi,[esi+0x0]
c001a824:	83 c4 20             	add    esp,0x20
c001a827:	e9 fc f6 ff ff       	jmp    c0019f28 <Vm::x87Handler(regs*)+0x82>
c001a82c:	80 fa 04             	cmp    dl,0x4
c001a82f:	75 2f                	jne    c001a860 <Vm::x87Handler(regs*)+0x9ba>
c001a831:	51                   	push   ecx
c001a832:	51                   	push   ecx
c001a833:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a836:	ff 36                	push   DWORD PTR [esi]
c001a838:	e8 a7 f2 ff ff       	call   c0019ae4 <Vm::fpu64ToInternal(unsigned long long)>
c001a83d:	8d 76 00             	lea    esi,[esi+0x0]
c001a840:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a847:	89 c6                	mov    esi,eax
c001a849:	89 d7                	mov    edi,edx
c001a84b:	e8 16 f5 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a850:	57                   	push   edi
c001a851:	56                   	push   esi
c001a852:	52                   	push   edx
c001a853:	50                   	push   eax
c001a854:	e8 ad f4 ff ff       	call   c0019d06 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a859:	e9 02 01 00 00       	jmp    c001a960 <Vm::x87Handler(regs*)+0xaba>
c001a85e:	66 90                	xchg   ax,ax
c001a860:	80 fa 05             	cmp    dl,0x5
c001a863:	75 2b                	jne    c001a890 <Vm::x87Handler(regs*)+0x9ea>
c001a865:	83 ec 0c             	sub    esp,0xc
c001a868:	6a 00                	push   0x0
c001a86a:	e8 f7 f4 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a86f:	89 c7                	mov    edi,eax
c001a871:	89 d5                	mov    ebp,edx
c001a873:	58                   	pop    eax
c001a874:	5a                   	pop    edx
c001a875:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a878:	ff 36                	push   DWORD PTR [esi]
c001a87a:	e8 65 f2 ff ff       	call   c0019ae4 <Vm::fpu64ToInternal(unsigned long long)>
c001a87f:	90                   	nop
c001a880:	83 c4 10             	add    esp,0x10
c001a883:	55                   	push   ebp
c001a884:	57                   	push   edi
c001a885:	52                   	push   edx
c001a886:	50                   	push   eax
c001a887:	e8 7a f4 ff ff       	call   c0019d06 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a88c:	eb 6a                	jmp    c001a8f8 <Vm::x87Handler(regs*)+0xa52>
c001a88e:	66 90                	xchg   ax,ax
c001a890:	80 fa 06             	cmp    dl,0x6
c001a893:	75 2f                	jne    c001a8c4 <Vm::x87Handler(regs*)+0xa1e>
c001a895:	51                   	push   ecx
c001a896:	51                   	push   ecx
c001a897:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a89a:	ff 36                	push   DWORD PTR [esi]
c001a89c:	e8 43 f2 ff ff       	call   c0019ae4 <Vm::fpu64ToInternal(unsigned long long)>
c001a8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a8ab:	89 c6                	mov    esi,eax
c001a8ad:	89 d7                	mov    edi,edx
c001a8af:	e8 b2 f4 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a8b4:	57                   	push   edi
c001a8b5:	56                   	push   esi
c001a8b6:	52                   	push   edx
c001a8b7:	50                   	push   eax
c001a8b8:	e8 77 f4 ff ff       	call   c0019d34 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a8bd:	e9 9e 00 00 00       	jmp    c001a960 <Vm::x87Handler(regs*)+0xaba>
c001a8c2:	66 90                	xchg   ax,ax
c001a8c4:	31 c0                	xor    eax,eax
c001a8c6:	80 fa 07             	cmp    dl,0x7
c001a8c9:	0f 85 e9 00 00 00    	jne    c001a9b8 <Vm::x87Handler(regs*)+0xb12>
c001a8cf:	83 ec 0c             	sub    esp,0xc
c001a8d2:	6a 00                	push   0x0
c001a8d4:	e8 8d f4 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a8d9:	89 c7                	mov    edi,eax
c001a8db:	89 d5                	mov    ebp,edx
c001a8dd:	58                   	pop    eax
c001a8de:	5a                   	pop    edx
c001a8df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a8e2:	ff 36                	push   DWORD PTR [esi]
c001a8e4:	e8 fb f1 ff ff       	call   c0019ae4 <Vm::fpu64ToInternal(unsigned long long)>
c001a8e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8ec:	83 c4 10             	add    esp,0x10
c001a8ef:	55                   	push   ebp
c001a8f0:	57                   	push   edi
c001a8f1:	52                   	push   edx
c001a8f2:	50                   	push   eax
c001a8f3:	e8 3c f4 ff ff       	call   c0019d34 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a8f8:	83 c4 0c             	add    esp,0xc
c001a8fb:	eb 67                	jmp    c001a964 <Vm::x87Handler(regs*)+0xabe>
c001a8fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a900:	31 c0                	xor    eax,eax
c001a902:	80 fa 02             	cmp    dl,0x2
c001a905:	0f 85 ad 00 00 00    	jne    c001a9b8 <Vm::x87Handler(regs*)+0xb12>
c001a90b:	83 ec 0c             	sub    esp,0xc
c001a90e:	6a 00                	push   0x0
c001a910:	e8 51 f4 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a915:	59                   	pop    ecx
c001a916:	5f                   	pop    edi
c001a917:	90                   	nop
c001a918:	52                   	push   edx
c001a919:	50                   	push   eax
c001a91a:	e8 77 f1 ff ff       	call   c0019a96 <Vm::fpuInternalTo64(unsigned long long)>
c001a91f:	e9 84 00 00 00       	jmp    c001a9a8 <Vm::x87Handler(regs*)+0xb02>
c001a924:	31 c0                	xor    eax,eax
c001a926:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a92b:	0f 85 87 00 00 00    	jne    c001a9b8 <Vm::x87Handler(regs*)+0xb12>
c001a931:	50                   	push   eax
c001a932:	50                   	push   eax
c001a933:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a936:	66 90                	xchg   ax,ax
c001a938:	31 d2                	xor    edx,edx
c001a93a:	52                   	push   edx
c001a93b:	50                   	push   eax
c001a93c:	e8 47 f2 ff ff       	call   c0019b88 <Vm::fpuLongToFloat(long long)>
c001a941:	8d 76 00             	lea    esi,[esi+0x0]
c001a944:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a94b:	89 c6                	mov    esi,eax
c001a94d:	89 d7                	mov    edi,edx
c001a94f:	e8 12 f4 ff ff       	call   c0019d66 <Vm::fpuGetReg(int)>
c001a954:	57                   	push   edi
c001a955:	56                   	push   esi
c001a956:	52                   	push   edx
c001a957:	50                   	push   eax
c001a958:	e8 b8 f3 ff ff       	call   c0019d15 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a95d:	8d 76 00             	lea    esi,[esi+0x0]
c001a960:	83 c4 1c             	add    esp,0x1c
c001a963:	90                   	nop
c001a964:	52                   	push   edx
c001a965:	50                   	push   eax
c001a966:	6a 00                	push   0x0
c001a968:	e8 3c f4 ff ff       	call   c0019da9 <Vm::fpuSetReg(int, unsigned long long)>
c001a96d:	e9 7a f7 ff ff       	jmp    c001a0ec <Vm::x87Handler(regs*)+0x246>
c001a972:	66 90                	xchg   ax,ax
c001a974:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a978:	80 fa 05             	cmp    dl,0x5
c001a97b:	75 13                	jne    c001a990 <Vm::x87Handler(regs*)+0xaea>
c001a97d:	55                   	push   ebp
c001a97e:	55                   	push   ebp
c001a97f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a982:	ff 36                	push   DWORD PTR [esi]
c001a984:	e8 c3 f1 ff ff       	call   c0019b4c <Vm::fpuULongToFloat(unsigned long long)>
c001a989:	e9 52 f7 ff ff       	jmp    c001a0e0 <Vm::x87Handler(regs*)+0x23a>
c001a98e:	66 90                	xchg   ax,ax
c001a990:	31 c0                	xor    eax,eax
c001a992:	80 fa 07             	cmp    dl,0x7
c001a995:	75 21                	jne    c001a9b8 <Vm::x87Handler(regs*)+0xb12>
c001a997:	e8 b7 f4 ff ff       	call   c0019e53 <Vm::fpuPop()>
c001a99c:	51                   	push   ecx
c001a99d:	51                   	push   ecx
c001a99e:	52                   	push   edx
c001a99f:	50                   	push   eax
c001a9a0:	e8 48 f1 ff ff       	call   c0019aed <Vm::fpuFloatToLong(unsigned long long)>
c001a9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9a8:	83 c4 10             	add    esp,0x10
c001a9ab:	89 06                	mov    DWORD PTR [esi],eax
c001a9ad:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a9b0:	e9 7b f7 ff ff       	jmp    c001a130 <Vm::x87Handler(regs*)+0x28a>
c001a9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9b8:	83 c4 1c             	add    esp,0x1c
c001a9bb:	5b                   	pop    ebx
c001a9bc:	5e                   	pop    esi
c001a9bd:	5f                   	pop    edi
c001a9be:	5d                   	pop    ebp
c001a9bf:	c3                   	ret    

c001a9c0 <__static_initialization_and_destruction_0(int, int)>:
c001a9c0:	83 ec 0c             	sub    esp,0xc
c001a9c3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a9c8:	75 1a                	jne    c001a9e4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a9ca:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a9d2:	75 10                	jne    c001a9e4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a9d4:	83 ec 0c             	sub    esp,0xc
c001a9d7:	68 60 90 02 c0       	push   0xc0029060
c001a9dc:	e8 97 83 00 00       	call   c0022d78 <Vm::_FPUState::_FPUState()>
c001a9e1:	83 c4 10             	add    esp,0x10
c001a9e4:	90                   	nop
c001a9e5:	83 c4 0c             	add    esp,0xc
c001a9e8:	c3                   	ret    
c001a9e9:	8d 76 00             	lea    esi,[esi+0x0]

c001a9ec <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a9ec:	83 ec 0c             	sub    esp,0xc
c001a9ef:	83 ec 08             	sub    esp,0x8
c001a9f2:	68 ff ff 00 00       	push   0xffff
c001a9f7:	6a 01                	push   0x1
c001a9f9:	e8 c2 ff ff ff       	call   c001a9c0 <__static_initialization_and_destruction_0(int, int)>
c001a9fe:	83 c4 10             	add    esp,0x10
c001aa01:	83 c4 0c             	add    esp,0xc
c001aa04:	c3                   	ret    
c001aa05:	66 90                	xchg   ax,ax
c001aa07:	90                   	nop

c001aa08 <FAT::getName()>:
c001aa08:	b8 f8 5e 02 c0       	mov    eax,0xc0025ef8
c001aa0d:	c3                   	ret    
c001aa0e:	66 90                	xchg   ax,ax

c001aa10 <FAT::tell(void*, unsigned long long*)>:
c001aa10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa15:	75 09                	jne    c001aa20 <FAT::tell(void*, unsigned long long*)+0x10>
c001aa17:	b8 04 00 00 00       	mov    eax,0x4
c001aa1c:	c3                   	ret    
c001aa1d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa20:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aa25:	75 09                	jne    c001aa30 <FAT::tell(void*, unsigned long long*)+0x20>
c001aa27:	b8 04 00 00 00       	mov    eax,0x4
c001aa2c:	c3                   	ret    
c001aa2d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa34:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001aa37:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001aa3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aa3e:	89 01                	mov    DWORD PTR [ecx],eax
c001aa40:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aa43:	b8 00 00 00 00       	mov    eax,0x0
c001aa48:	c3                   	ret    
c001aa49:	90                   	nop
c001aa4a:	66 90                	xchg   ax,ax

c001aa4c <FAT::stat(void*, unsigned long long*)>:
c001aa4c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa51:	75 09                	jne    c001aa5c <FAT::stat(void*, unsigned long long*)+0x10>
c001aa53:	b8 04 00 00 00       	mov    eax,0x4
c001aa58:	c3                   	ret    
c001aa59:	8d 76 00             	lea    esi,[esi+0x0]
c001aa5c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aa61:	75 09                	jne    c001aa6c <FAT::stat(void*, unsigned long long*)+0x20>
c001aa63:	b8 04 00 00 00       	mov    eax,0x4
c001aa68:	c3                   	ret    
c001aa69:	8d 76 00             	lea    esi,[esi+0x0]
c001aa6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa70:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001aa73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aa7a:	89 01                	mov    DWORD PTR [ecx],eax
c001aa7c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aa7f:	b8 00 00 00 00       	mov    eax,0x0
c001aa84:	c3                   	ret    
c001aa85:	90                   	nop
c001aa86:	66 90                	xchg   ax,ax

c001aa88 <FAT::~FAT()>:
c001aa88:	83 ec 0c             	sub    esp,0xc
c001aa8b:	ba 44 5f 02 c0       	mov    edx,0xc0025f44
c001aa90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa94:	89 10                	mov    DWORD PTR [eax],edx
c001aa96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa9a:	83 ec 0c             	sub    esp,0xc
c001aa9d:	50                   	push   eax
c001aa9e:	e8 4b 25 ff ff       	call   c000cfee <Filesystem::~Filesystem()>
c001aaa3:	83 c4 10             	add    esp,0x10
c001aaa6:	90                   	nop
c001aaa7:	83 c4 0c             	add    esp,0xc
c001aaaa:	c3                   	ret    
c001aaab:	90                   	nop

c001aaac <FAT::~FAT()>:
c001aaac:	83 ec 0c             	sub    esp,0xc
c001aaaf:	83 ec 0c             	sub    esp,0xc
c001aab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aab6:	e8 cd ff ff ff       	call   c001aa88 <FAT::~FAT()>
c001aabb:	83 c4 10             	add    esp,0x10
c001aabe:	83 ec 08             	sub    esp,0x8
c001aac1:	6a 08                	push   0x8
c001aac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aac7:	e8 06 21 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c001aacc:	83 c4 10             	add    esp,0x10
c001aacf:	83 c4 0c             	add    esp,0xc
c001aad2:	c3                   	ret    
c001aad3:	90                   	nop

c001aad4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001aad4:	83 ec 1c             	sub    esp,0x1c
c001aad7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001aade:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001aae3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aae7:	8b 04 85 e0 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f20]
c001aaee:	83 f8 ff             	cmp    eax,0xffffffff
c001aaf1:	75 35                	jne    c001ab28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001aaf3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aaf7:	88 c2                	mov    dl,al
c001aaf9:	a1 c0 90 02 c0       	mov    eax,ds:0xc00290c0
c001aafe:	01 d0                	add    eax,edx
c001ab00:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ab04:	8b 15 c0 90 02 c0    	mov    edx,DWORD PTR ds:0xc00290c0
c001ab0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab0e:	89 14 85 e0 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f20],edx
c001ab15:	a1 c0 90 02 c0       	mov    eax,ds:0xc00290c0
c001ab1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ab1e:	89 14 85 60 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ea0],edx
c001ab25:	eb 19                	jmp    c001ab40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ab27:	90                   	nop
c001ab28:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ab2c:	88 c2                	mov    dl,al
c001ab2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab32:	8b 04 85 e0 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f20]
c001ab39:	01 d0                	add    eax,edx
c001ab3b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ab3f:	90                   	nop
c001ab40:	83 ec 04             	sub    esp,0x4
c001ab43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ab47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ab4b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ab4f:	50                   	push   eax
c001ab50:	e8 dd c0 fe ff       	call   c0006c32 <f_getlabel>
c001ab55:	83 c4 10             	add    esp,0x10
c001ab58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab5c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ab61:	75 09                	jne    c001ab6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001ab63:	b8 00 00 00 00       	mov    eax,0x0
c001ab68:	eb 0a                	jmp    c001ab74 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001ab6a:	66 90                	xchg   ax,ax
c001ab6c:	b8 01 00 00 00       	mov    eax,0x1
c001ab71:	8d 76 00             	lea    esi,[esi+0x0]
c001ab74:	83 c4 1c             	add    esp,0x1c
c001ab77:	c3                   	ret    

c001ab78 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ab78:	57                   	push   edi
c001ab79:	83 ec 58             	sub    esp,0x58
c001ab7c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ab84:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ab88:	b9 0f 00 00 00       	mov    ecx,0xf
c001ab8d:	b8 00 00 00 00       	mov    eax,0x0
c001ab92:	fc                   	cld    
c001ab93:	89 d7                	mov    edi,edx
c001ab95:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ab97:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab9b:	8b 04 85 e0 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f20]
c001aba2:	83 f8 ff             	cmp    eax,0xffffffff
c001aba5:	75 35                	jne    c001abdc <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001aba7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001abab:	88 c2                	mov    dl,al
c001abad:	a1 c0 90 02 c0       	mov    eax,ds:0xc00290c0
c001abb2:	01 d0                	add    eax,edx
c001abb4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001abb8:	8b 15 c0 90 02 c0    	mov    edx,DWORD PTR ds:0xc00290c0
c001abbe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001abc2:	89 14 85 e0 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f20],edx
c001abc9:	a1 c0 90 02 c0       	mov    eax,ds:0xc00290c0
c001abce:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001abd2:	89 14 85 60 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ea0],edx
c001abd9:	eb 19                	jmp    c001abf4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001abdb:	90                   	nop
c001abdc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001abe0:	88 c2                	mov    dl,al
c001abe2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001abe6:	8b 04 85 e0 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f20]
c001abed:	01 d0                	add    eax,edx
c001abef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001abf3:	90                   	nop
c001abf4:	83 ec 08             	sub    esp,0x8
c001abf7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001abfb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abff:	50                   	push   eax
c001ac00:	e8 7b 5c fe ff       	call   c0000880 <strcat>
c001ac05:	83 c4 10             	add    esp,0x10
c001ac08:	83 ec 0c             	sub    esp,0xc
c001ac0b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ac0f:	50                   	push   eax
c001ac10:	e8 0b c2 fe ff       	call   c0006e20 <f_setlabel>
c001ac15:	83 c4 10             	add    esp,0x10
c001ac18:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac1c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ac21:	75 09                	jne    c001ac2c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001ac23:	b8 00 00 00 00       	mov    eax,0x0
c001ac28:	eb 0a                	jmp    c001ac34 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001ac2a:	66 90                	xchg   ax,ax
c001ac2c:	b8 01 00 00 00       	mov    eax,0x1
c001ac31:	8d 76 00             	lea    esi,[esi+0x0]
c001ac34:	83 c4 58             	add    esp,0x58
c001ac37:	5f                   	pop    edi
c001ac38:	c3                   	ret    
c001ac39:	90                   	nop
c001ac3a:	66 90                	xchg   ax,ax

c001ac3c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ac3c:	83 ec 2c             	sub    esp,0x2c
c001ac3f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ac47:	83 ec 08             	sub    esp,0x8
c001ac4a:	68 1c 5f 02 c0       	push   0xc0025f1c
c001ac4f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ac53:	e8 74 5b fe ff       	call   c00007cc <strcmp>
c001ac58:	83 c4 10             	add    esp,0x10
c001ac5b:	85 c0                	test   eax,eax
c001ac5d:	0f 94 c0             	sete   al
c001ac60:	84 c0                	test   al,al
c001ac62:	74 10                	je     c001ac74 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001ac64:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ac6c:	e9 b3 00 00 00       	jmp    c001ad24 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ac71:	8d 76 00             	lea    esi,[esi+0x0]
c001ac74:	83 ec 08             	sub    esp,0x8
c001ac77:	68 0e 5f 02 c0       	push   0xc0025f0e
c001ac7c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ac80:	e8 47 5b fe ff       	call   c00007cc <strcmp>
c001ac85:	83 c4 10             	add    esp,0x10
c001ac88:	85 c0                	test   eax,eax
c001ac8a:	0f 94 c0             	sete   al
c001ac8d:	84 c0                	test   al,al
c001ac8f:	74 0f                	je     c001aca0 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001ac91:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ac99:	e9 86 00 00 00       	jmp    c001ad24 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ac9e:	66 90                	xchg   ax,ax
c001aca0:	83 ec 08             	sub    esp,0x8
c001aca3:	68 14 5f 02 c0       	push   0xc0025f14
c001aca8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001acac:	e8 1b 5b fe ff       	call   c00007cc <strcmp>
c001acb1:	83 c4 10             	add    esp,0x10
c001acb4:	85 c0                	test   eax,eax
c001acb6:	0f 94 c0             	sete   al
c001acb9:	84 c0                	test   al,al
c001acbb:	74 0b                	je     c001acc8 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001acbd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001acc5:	eb 5d                	jmp    c001ad24 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001acc7:	90                   	nop
c001acc8:	83 ec 08             	sub    esp,0x8
c001accb:	68 ec 34 02 c0       	push   0xc00234ec
c001acd0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001acd4:	e8 f3 5a fe ff       	call   c00007cc <strcmp>
c001acd9:	83 c4 10             	add    esp,0x10
c001acdc:	85 c0                	test   eax,eax
c001acde:	0f 94 c0             	sete   al
c001ace1:	84 c0                	test   al,al
c001ace3:	74 0b                	je     c001acf0 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001ace5:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001aced:	eb 35                	jmp    c001ad24 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001acef:	90                   	nop
c001acf0:	83 ec 08             	sub    esp,0x8
c001acf3:	68 1a 5f 02 c0       	push   0xc0025f1a
c001acf8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001acfc:	e8 cb 5a fe ff       	call   c00007cc <strcmp>
c001ad01:	83 c4 10             	add    esp,0x10
c001ad04:	85 c0                	test   eax,eax
c001ad06:	0f 94 c0             	sete   al
c001ad09:	84 c0                	test   al,al
c001ad0b:	74 0b                	je     c001ad18 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001ad0d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ad15:	eb 0d                	jmp    c001ad24 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ad17:	90                   	nop
c001ad18:	b8 08 00 00 00       	mov    eax,0x8
c001ad1d:	e9 ea 00 00 00       	jmp    c001ae0c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ad22:	66 90                	xchg   ax,ax
c001ad24:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ad2b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ad30:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad34:	8b 04 85 e0 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f20]
c001ad3b:	83 f8 ff             	cmp    eax,0xffffffff
c001ad3e:	75 34                	jne    c001ad74 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001ad40:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ad44:	88 c2                	mov    dl,al
c001ad46:	a1 c0 90 02 c0       	mov    eax,ds:0xc00290c0
c001ad4b:	01 d0                	add    eax,edx
c001ad4d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ad51:	8b 15 c0 90 02 c0    	mov    edx,DWORD PTR ds:0xc00290c0
c001ad57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad5b:	89 14 85 e0 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f20],edx
c001ad62:	a1 c0 90 02 c0       	mov    eax,ds:0xc00290c0
c001ad67:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad6b:	89 14 85 60 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ea0],edx
c001ad72:	eb 18                	jmp    c001ad8c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001ad74:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ad78:	88 c2                	mov    dl,al
c001ad7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad7e:	8b 04 85 e0 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f20]
c001ad85:	01 d0                	add    eax,edx
c001ad87:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ad8b:	90                   	nop
c001ad8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad90:	88 04 24             	mov    BYTE PTR [esp],al
c001ad93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ad97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad9b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ada3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ada8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001adb0:	83 ec 0c             	sub    esp,0xc
c001adb3:	68 00 20 00 00       	push   0x2000
c001adb8:	e8 06 ec fe ff       	call   c00099c3 <malloc>
c001adbd:	83 c4 10             	add    esp,0x10
c001adc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001adc4:	68 00 20 00 00       	push   0x2000
c001adc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adcd:	8d 44 24 08          	lea    eax,[esp+0x8]
c001add1:	50                   	push   eax
c001add2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001add6:	50                   	push   eax
c001add7:	e8 c5 c6 fe ff       	call   c00074a1 <f_mkfs>
c001addc:	83 c4 10             	add    esp,0x10
c001addf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ade3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ade8:	75 0a                	jne    c001adf4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001adea:	b8 00 00 00 00       	mov    eax,0x0
c001adef:	eb 1b                	jmp    c001ae0c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001adf1:	8d 76 00             	lea    esi,[esi+0x0]
c001adf4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001adf9:	75 09                	jne    c001ae04 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001adfb:	b8 09 00 00 00       	mov    eax,0x9
c001ae00:	eb 0a                	jmp    c001ae0c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ae02:	66 90                	xchg   ax,ax
c001ae04:	b8 01 00 00 00       	mov    eax,0x1
c001ae09:	8d 76 00             	lea    esi,[esi+0x0]
c001ae0c:	83 c4 2c             	add    esp,0x2c
c001ae0f:	c3                   	ret    

c001ae10 <FAT::tryMount(LogicalDisk*, int)>:
c001ae10:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001ae16:	a1 c0 90 02 c0       	mov    eax,ds:0xc00290c0
c001ae1b:	83 f8 14             	cmp    eax,0x14
c001ae1e:	75 18                	jne    c001ae38 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001ae20:	83 ec 0c             	sub    esp,0xc
c001ae23:	68 20 5f 02 c0       	push   0xc0025f20
c001ae28:	e8 32 9a ff ff       	call   c001485f <Krnl::panic(char const*)>
c001ae2d:	83 c4 10             	add    esp,0x10
c001ae30:	b0 00                	mov    al,0x0
c001ae32:	e9 e9 01 00 00       	jmp    c001b020 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ae37:	90                   	nop
c001ae38:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ae3f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ae45:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ae4b:	3d 00 02 00 00       	cmp    eax,0x200
c001ae50:	74 0a                	je     c001ae5c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001ae52:	b0 00                	mov    al,0x0
c001ae54:	e9 c7 01 00 00       	jmp    c001b020 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ae59:	8d 76 00             	lea    esi,[esi+0x0]
c001ae5c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001ae64:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ae6b:	8b 04 85 e0 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f20]
c001ae72:	83 f8 ff             	cmp    eax,0xffffffff
c001ae75:	74 09                	je     c001ae80 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001ae77:	b0 01                	mov    al,0x1
c001ae79:	e9 a2 01 00 00       	jmp    c001b020 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ae7e:	66 90                	xchg   ax,ax
c001ae80:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ae8a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ae92:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001ae99:	88 c2                	mov    dl,al
c001ae9b:	a1 c0 90 02 c0       	mov    eax,ds:0xc00290c0
c001aea0:	01 d0                	add    eax,edx
c001aea2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001aea9:	8b 15 c0 90 02 c0    	mov    edx,DWORD PTR ds:0xc00290c0
c001aeaf:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001aeb6:	89 14 85 e0 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f20],edx
c001aebd:	a1 c0 90 02 c0       	mov    eax,ds:0xc00290c0
c001aec2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001aec9:	89 14 85 60 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ea0],edx
c001aed0:	83 ec 0c             	sub    esp,0xc
c001aed3:	68 54 02 00 00       	push   0x254
c001aed8:	e8 e6 ea fe ff       	call   c00099c3 <malloc>
c001aedd:	83 c4 10             	add    esp,0x10
c001aee0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001aee7:	83 ec 04             	sub    esp,0x4
c001aeea:	6a 00                	push   0x0
c001aeec:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aef3:	50                   	push   eax
c001aef4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aefb:	e8 29 9f fe ff       	call   c0004e29 <f_mount>
c001af00:	83 c4 10             	add    esp,0x10
c001af03:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001af0a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001af12:	74 1c                	je     c001af30 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001af14:	83 ec 0c             	sub    esp,0xc
c001af17:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001af1e:	e8 c0 ea fe ff       	call   c00099e3 <rfree>
c001af23:	83 c4 10             	add    esp,0x10
c001af26:	b0 00                	mov    al,0x0
c001af28:	e9 f3 00 00 00       	jmp    c001b020 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001af2d:	8d 76 00             	lea    esi,[esi+0x0]
c001af30:	83 ec 04             	sub    esp,0x4
c001af33:	68 00 01 00 00       	push   0x100
c001af38:	6a 00                	push   0x0
c001af3a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001af41:	50                   	push   eax
c001af42:	e8 3d 57 fe ff       	call   c0000684 <memset>
c001af47:	83 c4 10             	add    esp,0x10
c001af4a:	83 ec 08             	sub    esp,0x8
c001af4d:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001af54:	50                   	push   eax
c001af55:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001af5c:	50                   	push   eax
c001af5d:	e8 1e 59 fe ff       	call   c0000880 <strcat>
c001af62:	83 c4 10             	add    esp,0x10
c001af65:	83 ec 08             	sub    esp,0x8
c001af68:	68 2e 5f 02 c0       	push   0xc0025f2e
c001af6d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001af74:	50                   	push   eax
c001af75:	e8 06 59 fe ff       	call   c0000880 <strcat>
c001af7a:	83 c4 10             	add    esp,0x10
c001af7d:	83 ec 04             	sub    esp,0x4
c001af80:	6a 01                	push   0x1
c001af82:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001af89:	50                   	push   eax
c001af8a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001af8e:	50                   	push   eax
c001af8f:	e8 f7 9e fe ff       	call   c0004e8b <f_open>
c001af94:	83 c4 10             	add    esp,0x10
c001af97:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001af9e:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001afa5:	85 c0                	test   eax,eax
c001afa7:	74 0b                	je     c001afb4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001afa9:	78 31                	js     c001afdc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001afab:	83 e8 04             	sub    eax,0x4
c001afae:	83 f8 01             	cmp    eax,0x1
c001afb1:	77 29                	ja     c001afdc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001afb3:	90                   	nop
c001afb4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001afbc:	83 ec 0c             	sub    esp,0xc
c001afbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001afc3:	50                   	push   eax
c001afc4:	e8 14 aa fe ff       	call   c00059dd <f_close>
c001afc9:	83 c4 10             	add    esp,0x10
c001afcc:	90                   	nop
c001afcd:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001afd5:	74 41                	je     c001b018 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001afd7:	eb 33                	jmp    c001b00c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001afd9:	8d 76 00             	lea    esi,[esi+0x0]
c001afdc:	83 ec 0c             	sub    esp,0xc
c001afdf:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001afe6:	e8 f8 e9 fe ff       	call   c00099e3 <rfree>
c001afeb:	83 c4 10             	add    esp,0x10
c001afee:	83 ec 04             	sub    esp,0x4
c001aff1:	6a 00                	push   0x0
c001aff3:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001affa:	50                   	push   eax
c001affb:	6a 00                	push   0x0
c001affd:	e8 27 9e fe ff       	call   c0004e29 <f_mount>
c001b002:	83 c4 10             	add    esp,0x10
c001b005:	b0 00                	mov    al,0x0
c001b007:	eb 17                	jmp    c001b020 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b009:	8d 76 00             	lea    esi,[esi+0x0]
c001b00c:	a1 c0 90 02 c0       	mov    eax,ds:0xc00290c0
c001b011:	40                   	inc    eax
c001b012:	a3 c0 90 02 c0       	mov    ds:0xc00290c0,eax
c001b017:	90                   	nop
c001b018:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b01f:	90                   	nop
c001b020:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b026:	c3                   	ret    
c001b027:	90                   	nop

c001b028 <FAT::allocateSwapfile(char const*, int)>:
c001b028:	55                   	push   ebp
c001b029:	57                   	push   edi
c001b02a:	56                   	push   esi
c001b02b:	53                   	push   ebx
c001b02c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b032:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b03d:	83 ec 0c             	sub    esp,0xc
c001b040:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b047:	e8 77 e9 fe ff       	call   c00099c3 <malloc>
c001b04c:	83 c4 10             	add    esp,0x10
c001b04f:	89 c7                	mov    edi,eax
c001b051:	a1 f0 8f 02 c0       	mov    eax,ds:0xc0028ff0
c001b056:	83 ec 04             	sub    esp,0x4
c001b059:	50                   	push   eax
c001b05a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b061:	57                   	push   edi
c001b062:	e8 b7 21 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c001b067:	83 c4 10             	add    esp,0x10
c001b06a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b071:	83 ec 04             	sub    esp,0x4
c001b074:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b078:	50                   	push   eax
c001b079:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b07d:	50                   	push   eax
c001b07e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b085:	e8 e2 24 ff ff       	call   c000d56c <File::stat(unsigned long long*, bool*)>
c001b08a:	83 c4 10             	add    esp,0x10
c001b08d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b094:	c1 e0 14             	shl    eax,0x14
c001b097:	89 c7                	mov    edi,eax
c001b099:	89 c5                	mov    ebp,eax
c001b09b:	c1 fd 1f             	sar    ebp,0x1f
c001b09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0a6:	89 f9                	mov    ecx,edi
c001b0a8:	31 c1                	xor    ecx,eax
c001b0aa:	89 cb                	mov    ebx,ecx
c001b0ac:	89 e9                	mov    ecx,ebp
c001b0ae:	31 d1                	xor    ecx,edx
c001b0b0:	89 ce                	mov    esi,ecx
c001b0b2:	89 f0                	mov    eax,esi
c001b0b4:	09 d8                	or     eax,ebx
c001b0b6:	0f 84 98 00 00 00    	je     c001b154 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b0bc:	83 ec 0c             	sub    esp,0xc
c001b0bf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b0c6:	e8 6d 23 ff ff       	call   c000d438 <File::unlink()>
c001b0cb:	83 c4 10             	add    esp,0x10
c001b0ce:	83 ec 08             	sub    esp,0x8
c001b0d1:	6a 12                	push   0x12
c001b0d3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b0da:	e8 e1 21 ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c001b0df:	83 c4 10             	add    esp,0x10
c001b0e2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b0e9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b0ef:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b0f6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b0fd:	c1 e0 14             	shl    eax,0x14
c001b100:	99                   	cdq    
c001b101:	6a 01                	push   0x1
c001b103:	52                   	push   edx
c001b104:	50                   	push   eax
c001b105:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b10c:	e8 7c bf fe ff       	call   c000708d <f_expand>
c001b111:	83 c4 10             	add    esp,0x10
c001b114:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b11b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b11d:	83 c0 10             	add    eax,0x10
c001b120:	8b 00                	mov    eax,DWORD PTR [eax]
c001b122:	83 ec 0c             	sub    esp,0xc
c001b125:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b129:	52                   	push   edx
c001b12a:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b12e:	52                   	push   edx
c001b12f:	6a 00                	push   0x0
c001b131:	68 00 04 00 00       	push   0x400
c001b136:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b13d:	ff d0                	call   eax
c001b13f:	83 c4 20             	add    esp,0x20
c001b142:	83 ec 0c             	sub    esp,0xc
c001b145:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b14c:	e8 cd 21 ff ff       	call   c000d31e <File::close()>
c001b151:	83 c4 10             	add    esp,0x10
c001b154:	83 ec 08             	sub    esp,0x8
c001b157:	6a 01                	push   0x1
c001b159:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b160:	e8 5b 21 ff ff       	call   c000d2c0 <File::open(FileOpenMode)>
c001b165:	83 c4 10             	add    esp,0x10
c001b168:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b16f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b171:	83 c0 0c             	add    eax,0xc
c001b174:	8b 00                	mov    eax,DWORD PTR [eax]
c001b176:	83 ec 0c             	sub    esp,0xc
c001b179:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b17d:	52                   	push   edx
c001b17e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b182:	52                   	push   edx
c001b183:	6a 00                	push   0x0
c001b185:	6a 04                	push   0x4
c001b187:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b18e:	ff d0                	call   eax
c001b190:	83 c4 20             	add    esp,0x20
c001b193:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b19a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b1a0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b1a7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b1ae:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b1b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b1b4:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b1bb:	83 ec 0c             	sub    esp,0xc
c001b1be:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b1c5:	e8 54 21 ff ff       	call   c000d31e <File::close()>
c001b1ca:	83 c4 10             	add    esp,0x10
c001b1cd:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b1d4:	ba 00 00 00 00       	mov    edx,0x0
c001b1d9:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b1df:	5b                   	pop    ebx
c001b1e0:	5e                   	pop    esi
c001b1e1:	5f                   	pop    edi
c001b1e2:	5d                   	pop    ebp
c001b1e3:	c3                   	ret    

c001b1e4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b1e4:	57                   	push   edi
c001b1e5:	56                   	push   esi
c001b1e6:	53                   	push   ebx
c001b1e7:	81 ec 50 02 00 00    	sub    esp,0x250
c001b1ed:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b1f5:	74 0d                	je     c001b204 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b1f7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b1ff:	75 0f                	jne    c001b210 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b201:	8d 76 00             	lea    esi,[esi+0x0]
c001b204:	b8 04 00 00 00       	mov    eax,0x4
c001b209:	e9 36 01 00 00       	jmp    c001b344 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b20e:	66 90                	xchg   ax,ax
c001b210:	83 ec 08             	sub    esp,0x8
c001b213:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b21a:	50                   	push   eax
c001b21b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b222:	e8 c0 ad fe ff       	call   c0005fe7 <f_readdir>
c001b227:	83 c4 10             	add    esp,0x10
c001b22a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b231:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b238:	83 ec 0c             	sub    esp,0xc
c001b23b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b242:	83 c0 1a             	add    eax,0x1a
c001b245:	50                   	push   eax
c001b246:	e8 55 54 fe ff       	call   c00006a0 <strlen>
c001b24b:	83 c4 10             	add    esp,0x10
c001b24e:	ba 00 00 00 00       	mov    edx,0x0
c001b253:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b257:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b25b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b262:	0f b6 c0             	movzx  eax,al
c001b265:	83 e0 10             	and    eax,0x10
c001b268:	74 0a                	je     c001b274 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b26a:	b8 02 00 00 00       	mov    eax,0x2
c001b26f:	eb 0b                	jmp    c001b27c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b271:	8d 76 00             	lea    esi,[esi+0x0]
c001b274:	b8 01 00 00 00       	mov    eax,0x1
c001b279:	8d 76 00             	lea    esi,[esi+0x0]
c001b27c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b280:	83 ec 08             	sub    esp,0x8
c001b283:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b28a:	83 c0 1a             	add    eax,0x1a
c001b28d:	50                   	push   eax
c001b28e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b292:	83 c0 10             	add    eax,0x10
c001b295:	50                   	push   eax
c001b296:	e8 a5 54 fe ff       	call   c0000740 <strcpy>
c001b29b:	83 c4 10             	add    esp,0x10
c001b29e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b2a5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b2ac:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b2b0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b2b7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b2be:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b2c5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b2cc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b2d3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b2da:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b2e1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b2e8:	89 c6                	mov    esi,eax
c001b2ea:	89 d7                	mov    edi,edx
c001b2ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2ee:	89 c8                	mov    eax,ecx
c001b2f0:	89 fa                	mov    edx,edi
c001b2f2:	89 f3                	mov    ebx,esi
c001b2f4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b2fb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b302:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b309:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b310:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b316:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b31d:	84 c0                	test   al,al
c001b31f:	75 07                	jne    c001b328 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b321:	b8 07 00 00 00       	mov    eax,0x7
c001b326:	eb 1c                	jmp    c001b344 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b328:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b32f:	85 c0                	test   eax,eax
c001b331:	75 09                	jne    c001b33c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b333:	b8 00 00 00 00       	mov    eax,0x0
c001b338:	eb 0a                	jmp    c001b344 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b33a:	66 90                	xchg   ax,ax
c001b33c:	b8 01 00 00 00       	mov    eax,0x1
c001b341:	8d 76 00             	lea    esi,[esi+0x0]
c001b344:	81 c4 50 02 00 00    	add    esp,0x250
c001b34a:	5b                   	pop    ebx
c001b34b:	5e                   	pop    esi
c001b34c:	5f                   	pop    edi
c001b34d:	c3                   	ret    
c001b34e:	66 90                	xchg   ax,ax

c001b350 <FAT::read(void*, unsigned long, void*, int*)>:
c001b350:	83 ec 1c             	sub    esp,0x1c
c001b353:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b358:	74 0a                	je     c001b364 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b35a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b35f:	75 0b                	jne    c001b36c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b361:	8d 76 00             	lea    esi,[esi+0x0]
c001b364:	b8 04 00 00 00       	mov    eax,0x4
c001b369:	eb 41                	jmp    c001b3ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b36b:	90                   	nop
c001b36c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b370:	50                   	push   eax
c001b371:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b375:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b379:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b37d:	e8 45 9f fe ff       	call   c00052c7 <f_read>
c001b382:	83 c4 10             	add    esp,0x10
c001b385:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b389:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b38d:	89 c2                	mov    edx,eax
c001b38f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b393:	89 10                	mov    DWORD PTR [eax],edx
c001b395:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b399:	85 c0                	test   eax,eax
c001b39b:	75 07                	jne    c001b3a4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b39d:	b8 00 00 00 00       	mov    eax,0x0
c001b3a2:	eb 08                	jmp    c001b3ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b3a4:	b8 01 00 00 00       	mov    eax,0x1
c001b3a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3ac:	83 c4 1c             	add    esp,0x1c
c001b3af:	c3                   	ret    

c001b3b0 <FAT::write(void*, unsigned long, void*, int*)>:
c001b3b0:	83 ec 1c             	sub    esp,0x1c
c001b3b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b3b8:	74 0a                	je     c001b3c4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b3ba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b3bf:	75 0b                	jne    c001b3cc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b3c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b3c4:	b8 04 00 00 00       	mov    eax,0x4
c001b3c9:	eb 41                	jmp    c001b40c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b3cb:	90                   	nop
c001b3cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b3d0:	50                   	push   eax
c001b3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b3d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b3dd:	e8 65 a1 fe ff       	call   c0005547 <f_write>
c001b3e2:	83 c4 10             	add    esp,0x10
c001b3e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3ed:	89 c2                	mov    edx,eax
c001b3ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b3f3:	89 10                	mov    DWORD PTR [eax],edx
c001b3f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3f9:	85 c0                	test   eax,eax
c001b3fb:	75 07                	jne    c001b404 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b3fd:	b8 00 00 00 00       	mov    eax,0x0
c001b402:	eb 08                	jmp    c001b40c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b404:	b8 01 00 00 00       	mov    eax,0x1
c001b409:	8d 76 00             	lea    esi,[esi+0x0]
c001b40c:	83 c4 1c             	add    esp,0x1c
c001b40f:	c3                   	ret    

c001b410 <FAT::close(void*)>:
c001b410:	83 ec 1c             	sub    esp,0x1c
c001b413:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b418:	75 0a                	jne    c001b424 <FAT::close(void*)+0x14>
c001b41a:	b8 04 00 00 00       	mov    eax,0x4
c001b41f:	eb 3f                	jmp    c001b460 <FAT::close(void*)+0x50>
c001b421:	8d 76 00             	lea    esi,[esi+0x0]
c001b424:	83 ec 0c             	sub    esp,0xc
c001b427:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b42b:	e8 ad a5 fe ff       	call   c00059dd <f_close>
c001b430:	83 c4 10             	add    esp,0x10
c001b433:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b437:	83 ec 0c             	sub    esp,0xc
c001b43a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b43e:	e8 90 e5 fe ff       	call   c00099d3 <free>
c001b443:	83 c4 10             	add    esp,0x10
c001b446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b44a:	85 c0                	test   eax,eax
c001b44c:	75 0a                	jne    c001b458 <FAT::close(void*)+0x48>
c001b44e:	b8 00 00 00 00       	mov    eax,0x0
c001b453:	eb 0b                	jmp    c001b460 <FAT::close(void*)+0x50>
c001b455:	8d 76 00             	lea    esi,[esi+0x0]
c001b458:	b8 01 00 00 00       	mov    eax,0x1
c001b45d:	8d 76 00             	lea    esi,[esi+0x0]
c001b460:	83 c4 1c             	add    esp,0x1c
c001b463:	c3                   	ret    

c001b464 <FAT::closeDir(void*)>:
c001b464:	83 ec 1c             	sub    esp,0x1c
c001b467:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b46c:	75 0a                	jne    c001b478 <FAT::closeDir(void*)+0x14>
c001b46e:	b8 04 00 00 00       	mov    eax,0x4
c001b473:	eb 3f                	jmp    c001b4b4 <FAT::closeDir(void*)+0x50>
c001b475:	8d 76 00             	lea    esi,[esi+0x0]
c001b478:	83 ec 0c             	sub    esp,0xc
c001b47b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b47f:	e8 41 ab fe ff       	call   c0005fc5 <f_closedir>
c001b484:	83 c4 10             	add    esp,0x10
c001b487:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b48b:	83 ec 0c             	sub    esp,0xc
c001b48e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b492:	e8 3c e5 fe ff       	call   c00099d3 <free>
c001b497:	83 c4 10             	add    esp,0x10
c001b49a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b49e:	85 c0                	test   eax,eax
c001b4a0:	75 0a                	jne    c001b4ac <FAT::closeDir(void*)+0x48>
c001b4a2:	b8 00 00 00 00       	mov    eax,0x0
c001b4a7:	eb 0b                	jmp    c001b4b4 <FAT::closeDir(void*)+0x50>
c001b4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4ac:	b8 01 00 00 00       	mov    eax,0x1
c001b4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4b4:	83 c4 1c             	add    esp,0x1c
c001b4b7:	c3                   	ret    

c001b4b8 <FAT::seek(void*, unsigned long long)>:
c001b4b8:	83 ec 2c             	sub    esp,0x2c
c001b4bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b4bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b4c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4cb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b4d0:	75 0a                	jne    c001b4dc <FAT::seek(void*, unsigned long long)+0x24>
c001b4d2:	b8 04 00 00 00       	mov    eax,0x4
c001b4d7:	eb 37                	jmp    c001b510 <FAT::seek(void*, unsigned long long)+0x58>
c001b4d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4dc:	83 ec 04             	sub    esp,0x4
c001b4df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b4e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b4e7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b4eb:	e8 1c a5 fe ff       	call   c0005a0c <f_lseek>
c001b4f0:	83 c4 10             	add    esp,0x10
c001b4f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b4f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4fb:	85 c0                	test   eax,eax
c001b4fd:	75 09                	jne    c001b508 <FAT::seek(void*, unsigned long long)+0x50>
c001b4ff:	b8 00 00 00 00       	mov    eax,0x0
c001b504:	eb 0a                	jmp    c001b510 <FAT::seek(void*, unsigned long long)+0x58>
c001b506:	66 90                	xchg   ax,ax
c001b508:	b8 01 00 00 00       	mov    eax,0x1
c001b50d:	8d 76 00             	lea    esi,[esi+0x0]
c001b510:	83 c4 2c             	add    esp,0x2c
c001b513:	c3                   	ret    

c001b514 <fatWrapperReadDisk>:
c001b514:	83 ec 1c             	sub    esp,0x1c
c001b517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b51b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b51f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b523:	89 04 24             	mov    DWORD PTR [esp],eax
c001b526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b52a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b52e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b533:	8b 04 85 c0 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f40]
c001b53a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b53e:	83 ec 0c             	sub    esp,0xc
c001b541:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b545:	52                   	push   edx
c001b546:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b54a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b54e:	50                   	push   eax
c001b54f:	e8 bc 4e ff ff       	call   c0010410 <LogicalDisk::read(unsigned long long, int, void*)>
c001b554:	83 c4 20             	add    esp,0x20
c001b557:	83 c4 1c             	add    esp,0x1c
c001b55a:	c3                   	ret    
c001b55b:	90                   	nop

c001b55c <fatWrapperWriteDisk>:
c001b55c:	83 ec 1c             	sub    esp,0x1c
c001b55f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b563:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b567:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b56b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b56e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b572:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b576:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b57b:	8b 04 85 c0 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f40]
c001b582:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b586:	83 ec 0c             	sub    esp,0xc
c001b589:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b58d:	52                   	push   edx
c001b58e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b592:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b596:	50                   	push   eax
c001b597:	e8 e0 4e ff ff       	call   c001047c <LogicalDisk::write(unsigned long long, int, void*)>
c001b59c:	83 c4 20             	add    esp,0x20
c001b59f:	83 c4 1c             	add    esp,0x1c
c001b5a2:	c3                   	ret    
c001b5a3:	90                   	nop

c001b5a4 <fatWrapperIoctl>:
c001b5a4:	53                   	push   ebx
c001b5a5:	83 ec 28             	sub    esp,0x28
c001b5a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b5ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b5b0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b5b4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b5b8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b5bd:	75 31                	jne    c001b5f0 <fatWrapperIoctl+0x4c>
c001b5bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b5c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b5c7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b5cc:	8b 04 85 c0 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f40]
c001b5d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b5d9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b5df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b5e3:	66 89 02             	mov    WORD PTR [edx],ax
c001b5e6:	b8 00 00 00 00       	mov    eax,0x0
c001b5eb:	e9 bc 00 00 00       	jmp    c001b6ac <fatWrapperIoctl+0x108>
c001b5f0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b5f5:	75 6d                	jne    c001b664 <fatWrapperIoctl+0xc0>
c001b5f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b5fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5ff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b604:	8b 04 85 c0 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f40]
c001b60b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b611:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b617:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b61d:	89 c8                	mov    eax,ecx
c001b61f:	89 da                	mov    edx,ebx
c001b621:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b625:	c1 e0 0a             	shl    eax,0xa
c001b628:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b62d:	8b 0c 8d c0 80 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7f40]
c001b634:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b63a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b640:	89 cb                	mov    ebx,ecx
c001b642:	c1 fb 1f             	sar    ebx,0x1f
c001b645:	53                   	push   ebx
c001b646:	51                   	push   ecx
c001b647:	52                   	push   edx
c001b648:	50                   	push   eax
c001b649:	e8 86 6d 00 00       	call   c00223d4 <__udivdi3>
c001b64e:	83 c4 10             	add    esp,0x10
c001b651:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b655:	89 01                	mov    DWORD PTR [ecx],eax
c001b657:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b65a:	b8 00 00 00 00       	mov    eax,0x0
c001b65f:	eb 4b                	jmp    c001b6ac <fatWrapperIoctl+0x108>
c001b661:	8d 76 00             	lea    esi,[esi+0x0]
c001b664:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b669:	75 09                	jne    c001b674 <fatWrapperIoctl+0xd0>
c001b66b:	b8 00 00 00 00       	mov    eax,0x0
c001b670:	eb 3a                	jmp    c001b6ac <fatWrapperIoctl+0x108>
c001b672:	66 90                	xchg   ax,ax
c001b674:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b679:	75 19                	jne    c001b694 <fatWrapperIoctl+0xf0>
c001b67b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b67f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b683:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b687:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b68d:	b8 00 00 00 00       	mov    eax,0x0
c001b692:	eb 18                	jmp    c001b6ac <fatWrapperIoctl+0x108>
c001b694:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b699:	75 09                	jne    c001b6a4 <fatWrapperIoctl+0x100>
c001b69b:	b8 00 00 00 00       	mov    eax,0x0
c001b6a0:	eb 0a                	jmp    c001b6ac <fatWrapperIoctl+0x108>
c001b6a2:	66 90                	xchg   ax,ax
c001b6a4:	b8 04 00 00 00       	mov    eax,0x4
c001b6a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6ac:	83 c4 28             	add    esp,0x28
c001b6af:	5b                   	pop    ebx
c001b6b0:	c3                   	ret    
c001b6b1:	90                   	nop
c001b6b2:	66 90                	xchg   ax,ax

c001b6b4 <FAT::FAT()>:
c001b6b4:	83 ec 1c             	sub    esp,0x1c
c001b6b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6bb:	83 ec 0c             	sub    esp,0xc
c001b6be:	50                   	push   eax
c001b6bf:	e8 06 19 ff ff       	call   c000cfca <Filesystem::Filesystem()>
c001b6c4:	83 c4 10             	add    esp,0x10
c001b6c7:	ba 44 5f 02 c0       	mov    edx,0xc0025f44
c001b6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d0:	89 10                	mov    DWORD PTR [eax],edx
c001b6d2:	c7 05 c0 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00290c0,0x0
c001b6dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6e4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b6e9:	7f 15                	jg     c001b700 <FAT::FAT()+0x4c>
c001b6eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6ef:	c7 04 85 e0 90 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6f20],0xffffffff
c001b6fa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b6fe:	eb e4                	jmp    c001b6e4 <FAT::FAT()+0x30>
c001b700:	90                   	nop
c001b701:	83 c4 1c             	add    esp,0x1c
c001b704:	c3                   	ret    
c001b705:	90                   	nop
c001b706:	66 90                	xchg   ax,ax

c001b708 <FAT::fixFilepath(char*)>:
c001b708:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b70c:	8a 00                	mov    al,BYTE PTR [eax]
c001b70e:	3c 40                	cmp    al,0x40
c001b710:	7e 2e                	jle    c001b740 <FAT::fixFilepath(char*)+0x38>
c001b712:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b716:	8a 00                	mov    al,BYTE PTR [eax]
c001b718:	83 e8 41             	sub    eax,0x41
c001b71b:	88 c2                	mov    dl,al
c001b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b721:	88 10                	mov    BYTE PTR [eax],dl
c001b723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b727:	8a 00                	mov    al,BYTE PTR [eax]
c001b729:	0f be c0             	movsx  eax,al
c001b72c:	8b 04 85 e0 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f20]
c001b733:	83 c0 30             	add    eax,0x30
c001b736:	88 c2                	mov    dl,al
c001b738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b73c:	88 10                	mov    BYTE PTR [eax],dl
c001b73e:	66 90                	xchg   ax,ax
c001b740:	90                   	nop
c001b741:	c3                   	ret    
c001b742:	66 90                	xchg   ax,ax

c001b744 <FAT::open(char const*, void**, FileOpenMode)>:
c001b744:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b74a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b752:	74 0c                	je     c001b760 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b754:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b75c:	75 0e                	jne    c001b76c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b75e:	66 90                	xchg   ax,ax
c001b760:	b8 04 00 00 00       	mov    eax,0x4
c001b765:	e9 06 01 00 00       	jmp    c001b870 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b76a:	66 90                	xchg   ax,ax
c001b76c:	83 ec 08             	sub    esp,0x8
c001b76f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b776:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b77a:	50                   	push   eax
c001b77b:	e8 c0 4f fe ff       	call   c0000740 <strcpy>
c001b780:	83 c4 10             	add    esp,0x10
c001b783:	83 ec 08             	sub    esp,0x8
c001b786:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b78a:	50                   	push   eax
c001b78b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b792:	e8 71 ff ff ff       	call   c001b708 <FAT::fixFilepath(char*)>
c001b797:	83 c4 10             	add    esp,0x10
c001b79a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b7a2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b7a9:	83 e0 01             	and    eax,0x1
c001b7ac:	74 0a                	je     c001b7b8 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b7ae:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b7b6:	66 90                	xchg   ax,ax
c001b7b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b7bf:	83 e0 04             	and    eax,0x4
c001b7c2:	74 10                	je     c001b7d4 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b7c4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b7cc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b7d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b7db:	83 e0 02             	and    eax,0x2
c001b7de:	74 08                	je     c001b7e8 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b7e0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b7e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b7ef:	83 e0 08             	and    eax,0x8
c001b7f2:	74 08                	je     c001b7fc <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b7f4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b7fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b803:	83 e0 10             	and    eax,0x10
c001b806:	74 08                	je     c001b810 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b808:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b810:	83 ec 0c             	sub    esp,0xc
c001b813:	68 50 02 00 00       	push   0x250
c001b818:	e8 a6 e1 fe ff       	call   c00099c3 <malloc>
c001b81d:	83 c4 10             	add    esp,0x10
c001b820:	89 c2                	mov    edx,eax
c001b822:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b829:	89 10                	mov    DWORD PTR [eax],edx
c001b82b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b833:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b83a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b83c:	83 ec 04             	sub    esp,0x4
c001b83f:	52                   	push   edx
c001b840:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b844:	52                   	push   edx
c001b845:	50                   	push   eax
c001b846:	e8 40 96 fe ff       	call   c0004e8b <f_open>
c001b84b:	83 c4 10             	add    esp,0x10
c001b84e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b855:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b85d:	74 09                	je     c001b868 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b85f:	b8 01 00 00 00       	mov    eax,0x1
c001b864:	eb 0a                	jmp    c001b870 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b866:	66 90                	xchg   ax,ax
c001b868:	b8 00 00 00 00       	mov    eax,0x0
c001b86d:	8d 76 00             	lea    esi,[esi+0x0]
c001b870:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b876:	c3                   	ret    
c001b877:	90                   	nop

c001b878 <FAT::openDir(char const*, void**)>:
c001b878:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b87e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b886:	74 0c                	je     c001b894 <FAT::openDir(char const*, void**)+0x1c>
c001b888:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b890:	75 0e                	jne    c001b8a0 <FAT::openDir(char const*, void**)+0x28>
c001b892:	66 90                	xchg   ax,ax
c001b894:	b8 04 00 00 00       	mov    eax,0x4
c001b899:	e9 82 00 00 00       	jmp    c001b920 <FAT::openDir(char const*, void**)+0xa8>
c001b89e:	66 90                	xchg   ax,ax
c001b8a0:	83 ec 08             	sub    esp,0x8
c001b8a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b8aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b8ae:	50                   	push   eax
c001b8af:	e8 8c 4e fe ff       	call   c0000740 <strcpy>
c001b8b4:	83 c4 10             	add    esp,0x10
c001b8b7:	83 ec 08             	sub    esp,0x8
c001b8ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b8be:	50                   	push   eax
c001b8bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b8c6:	e8 3d fe ff ff       	call   c001b708 <FAT::fixFilepath(char*)>
c001b8cb:	83 c4 10             	add    esp,0x10
c001b8ce:	83 ec 0c             	sub    esp,0xc
c001b8d1:	6a 4c                	push   0x4c
c001b8d3:	e8 eb e0 fe ff       	call   c00099c3 <malloc>
c001b8d8:	83 c4 10             	add    esp,0x10
c001b8db:	89 c2                	mov    edx,eax
c001b8dd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b8e4:	89 10                	mov    DWORD PTR [eax],edx
c001b8e6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b8ed:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8ef:	83 ec 08             	sub    esp,0x8
c001b8f2:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b8f6:	52                   	push   edx
c001b8f7:	50                   	push   eax
c001b8f8:	e8 c6 a5 fe ff       	call   c0005ec3 <f_opendir>
c001b8fd:	83 c4 10             	add    esp,0x10
c001b900:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b907:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b90f:	74 07                	je     c001b918 <FAT::openDir(char const*, void**)+0xa0>
c001b911:	b8 01 00 00 00       	mov    eax,0x1
c001b916:	eb 08                	jmp    c001b920 <FAT::openDir(char const*, void**)+0xa8>
c001b918:	b8 00 00 00 00       	mov    eax,0x0
c001b91d:	8d 76 00             	lea    esi,[esi+0x0]
c001b920:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b926:	c3                   	ret    
c001b927:	90                   	nop

c001b928 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b928:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b92e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b936:	75 0c                	jne    c001b944 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b938:	b8 04 00 00 00       	mov    eax,0x4
c001b93d:	e9 d2 00 00 00       	jmp    c001ba14 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b942:	66 90                	xchg   ax,ax
c001b944:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b94c:	75 0a                	jne    c001b958 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b94e:	b8 04 00 00 00       	mov    eax,0x4
c001b953:	e9 bc 00 00 00       	jmp    c001ba14 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b958:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b960:	75 0a                	jne    c001b96c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b962:	b8 04 00 00 00       	mov    eax,0x4
c001b967:	e9 a8 00 00 00       	jmp    c001ba14 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b96c:	83 ec 08             	sub    esp,0x8
c001b96f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b976:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b97d:	50                   	push   eax
c001b97e:	e8 bd 4d fe ff       	call   c0000740 <strcpy>
c001b983:	83 c4 10             	add    esp,0x10
c001b986:	83 ec 08             	sub    esp,0x8
c001b989:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b990:	50                   	push   eax
c001b991:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b998:	e8 6b fd ff ff       	call   c001b708 <FAT::fixFilepath(char*)>
c001b99d:	83 c4 10             	add    esp,0x10
c001b9a0:	83 ec 08             	sub    esp,0x8
c001b9a3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9a7:	50                   	push   eax
c001b9a8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b9af:	50                   	push   eax
c001b9b0:	e8 cd a6 fe ff       	call   c0006082 <f_stat>
c001b9b5:	83 c4 10             	add    esp,0x10
c001b9b8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b9bf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b9c6:	85 c0                	test   eax,eax
c001b9c8:	74 0a                	je     c001b9d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b9ca:	83 f8 04             	cmp    eax,0x4
c001b9cd:	74 35                	je     c001ba04 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b9cf:	eb 3b                	jmp    c001ba0c <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b9d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b9d8:	0f b6 c0             	movzx  eax,al
c001b9db:	83 e0 10             	and    eax,0x10
c001b9de:	0f 95 c2             	setne  dl
c001b9e1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b9e8:	88 10                	mov    BYTE PTR [eax],dl
c001b9ea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b9ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b9f1:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b9f8:	89 01                	mov    DWORD PTR [ecx],eax
c001b9fa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b9fd:	b8 00 00 00 00       	mov    eax,0x0
c001ba02:	eb 10                	jmp    c001ba14 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001ba04:	b8 02 00 00 00       	mov    eax,0x2
c001ba09:	eb 09                	jmp    c001ba14 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001ba0b:	90                   	nop
c001ba0c:	b8 01 00 00 00       	mov    eax,0x1
c001ba11:	8d 76 00             	lea    esi,[esi+0x0]
c001ba14:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ba1a:	c3                   	ret    
c001ba1b:	90                   	nop

c001ba1c <FAT::unlink(char const*)>:
c001ba1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ba22:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ba2a:	75 08                	jne    c001ba34 <FAT::unlink(char const*)+0x18>
c001ba2c:	b8 04 00 00 00       	mov    eax,0x4
c001ba31:	eb 61                	jmp    c001ba94 <FAT::unlink(char const*)+0x78>
c001ba33:	90                   	nop
c001ba34:	83 ec 08             	sub    esp,0x8
c001ba37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba42:	50                   	push   eax
c001ba43:	e8 f8 4c fe ff       	call   c0000740 <strcpy>
c001ba48:	83 c4 10             	add    esp,0x10
c001ba4b:	83 ec 08             	sub    esp,0x8
c001ba4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba52:	50                   	push   eax
c001ba53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba5a:	e8 a9 fc ff ff       	call   c001b708 <FAT::fixFilepath(char*)>
c001ba5f:	83 c4 10             	add    esp,0x10
c001ba62:	83 ec 0c             	sub    esp,0xc
c001ba65:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba69:	50                   	push   eax
c001ba6a:	e8 65 a9 fe ff       	call   c00063d4 <f_unlink>
c001ba6f:	83 c4 10             	add    esp,0x10
c001ba72:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ba79:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ba80:	85 c0                	test   eax,eax
c001ba82:	75 08                	jne    c001ba8c <FAT::unlink(char const*)+0x70>
c001ba84:	b8 00 00 00 00       	mov    eax,0x0
c001ba89:	eb 09                	jmp    c001ba94 <FAT::unlink(char const*)+0x78>
c001ba8b:	90                   	nop
c001ba8c:	b8 01 00 00 00       	mov    eax,0x1
c001ba91:	8d 76 00             	lea    esi,[esi+0x0]
c001ba94:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ba9a:	c3                   	ret    
c001ba9b:	90                   	nop

c001ba9c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ba9c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001baa2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001baa9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bab0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bab4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bab8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bac0:	75 0a                	jne    c001bacc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bac2:	b8 04 00 00 00       	mov    eax,0x4
c001bac7:	e9 30 01 00 00       	jmp    c001bbfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bacc:	83 ec 08             	sub    esp,0x8
c001bacf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bad6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bada:	50                   	push   eax
c001badb:	e8 60 4c fe ff       	call   c0000740 <strcpy>
c001bae0:	83 c4 10             	add    esp,0x10
c001bae3:	83 ec 08             	sub    esp,0x8
c001bae6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001baea:	50                   	push   eax
c001baeb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001baf2:	e8 11 fc ff ff       	call   c001b708 <FAT::fixFilepath(char*)>
c001baf7:	83 c4 10             	add    esp,0x10
c001bafa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001bb02:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001bb0a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb0f:	83 e0 01             	and    eax,0x1
c001bb12:	74 08                	je     c001bb1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001bb14:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001bb1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb21:	83 e0 02             	and    eax,0x2
c001bb24:	74 0a                	je     c001bb30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001bb26:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001bb2e:	66 90                	xchg   ax,ax
c001bb30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb35:	83 e0 04             	and    eax,0x4
c001bb38:	74 0a                	je     c001bb44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001bb3a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001bb42:	66 90                	xchg   ax,ax
c001bb44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb49:	83 e0 08             	and    eax,0x8
c001bb4c:	74 0a                	je     c001bb58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001bb4e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001bb56:	66 90                	xchg   ax,ax
c001bb58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb5d:	83 e0 01             	and    eax,0x1
c001bb60:	74 0a                	je     c001bb6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001bb62:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001bb6a:	66 90                	xchg   ax,ax
c001bb6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb71:	83 e0 02             	and    eax,0x2
c001bb74:	74 0a                	je     c001bb80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001bb76:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001bb7e:	66 90                	xchg   ax,ax
c001bb80:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb85:	83 e0 04             	and    eax,0x4
c001bb88:	74 0a                	je     c001bb94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001bb8a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001bb92:	66 90                	xchg   ax,ax
c001bb94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb99:	83 e0 08             	and    eax,0x8
c001bb9c:	74 0a                	je     c001bba8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001bb9e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001bba6:	66 90                	xchg   ax,ax
c001bba8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bbaf:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001bbb6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001bbbe:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bbc6:	83 ec 04             	sub    esp,0x4
c001bbc9:	52                   	push   edx
c001bbca:	50                   	push   eax
c001bbcb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bbcf:	50                   	push   eax
c001bbd0:	e8 a1 ae fe ff       	call   c0006a76 <f_chmod>
c001bbd5:	83 c4 10             	add    esp,0x10
c001bbd8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bbdf:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bbe6:	85 c0                	test   eax,eax
c001bbe8:	75 0a                	jne    c001bbf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001bbea:	b8 00 00 00 00       	mov    eax,0x0
c001bbef:	eb 0b                	jmp    c001bbfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bbf1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbf4:	b8 01 00 00 00       	mov    eax,0x1
c001bbf9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbfc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bc02:	c3                   	ret    
c001bc03:	90                   	nop

c001bc04 <FAT::rename(char const*, char const*)>:
c001bc04:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bc0a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bc12:	74 0c                	je     c001bc20 <FAT::rename(char const*, char const*)+0x1c>
c001bc14:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bc1c:	75 0e                	jne    c001bc2c <FAT::rename(char const*, char const*)+0x28>
c001bc1e:	66 90                	xchg   ax,ax
c001bc20:	b8 04 00 00 00       	mov    eax,0x4
c001bc25:	e9 9e 00 00 00       	jmp    c001bcc8 <FAT::rename(char const*, char const*)+0xc4>
c001bc2a:	66 90                	xchg   ax,ax
c001bc2c:	83 ec 08             	sub    esp,0x8
c001bc2f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bc36:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bc3d:	50                   	push   eax
c001bc3e:	e8 fd 4a fe ff       	call   c0000740 <strcpy>
c001bc43:	83 c4 10             	add    esp,0x10
c001bc46:	83 ec 08             	sub    esp,0x8
c001bc49:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001bc50:	50                   	push   eax
c001bc51:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bc58:	e8 ab fa ff ff       	call   c001b708 <FAT::fixFilepath(char*)>
c001bc5d:	83 c4 10             	add    esp,0x10
c001bc60:	83 ec 08             	sub    esp,0x8
c001bc63:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001bc6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc6e:	50                   	push   eax
c001bc6f:	e8 cc 4a fe ff       	call   c0000740 <strcpy>
c001bc74:	83 c4 10             	add    esp,0x10
c001bc77:	83 ec 08             	sub    esp,0x8
c001bc7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc7e:	50                   	push   eax
c001bc7f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bc86:	e8 7d fa ff ff       	call   c001b708 <FAT::fixFilepath(char*)>
c001bc8b:	83 c4 10             	add    esp,0x10
c001bc8e:	83 ec 08             	sub    esp,0x8
c001bc91:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc95:	50                   	push   eax
c001bc96:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bc9d:	50                   	push   eax
c001bc9e:	e8 e0 aa fe ff       	call   c0006783 <f_rename>
c001bca3:	83 c4 10             	add    esp,0x10
c001bca6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001bcad:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001bcb4:	85 c0                	test   eax,eax
c001bcb6:	75 08                	jne    c001bcc0 <FAT::rename(char const*, char const*)+0xbc>
c001bcb8:	b8 00 00 00 00       	mov    eax,0x0
c001bcbd:	eb 09                	jmp    c001bcc8 <FAT::rename(char const*, char const*)+0xc4>
c001bcbf:	90                   	nop
c001bcc0:	b8 01 00 00 00       	mov    eax,0x1
c001bcc5:	8d 76 00             	lea    esi,[esi+0x0]
c001bcc8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bcce:	c3                   	ret    
c001bccf:	90                   	nop

c001bcd0 <FAT::mkdir(char const*)>:
c001bcd0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bcd6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bcde:	75 08                	jne    c001bce8 <FAT::mkdir(char const*)+0x18>
c001bce0:	b8 04 00 00 00       	mov    eax,0x4
c001bce5:	eb 61                	jmp    c001bd48 <FAT::mkdir(char const*)+0x78>
c001bce7:	90                   	nop
c001bce8:	83 ec 08             	sub    esp,0x8
c001bceb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bcf2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bcf6:	50                   	push   eax
c001bcf7:	e8 44 4a fe ff       	call   c0000740 <strcpy>
c001bcfc:	83 c4 10             	add    esp,0x10
c001bcff:	83 ec 08             	sub    esp,0x8
c001bd02:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd06:	50                   	push   eax
c001bd07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd0e:	e8 f5 f9 ff ff       	call   c001b708 <FAT::fixFilepath(char*)>
c001bd13:	83 c4 10             	add    esp,0x10
c001bd16:	83 ec 0c             	sub    esp,0xc
c001bd19:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd1d:	50                   	push   eax
c001bd1e:	e8 34 a8 fe ff       	call   c0006557 <f_mkdir>
c001bd23:	83 c4 10             	add    esp,0x10
c001bd26:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bd2d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bd34:	85 c0                	test   eax,eax
c001bd36:	75 08                	jne    c001bd40 <FAT::mkdir(char const*)+0x70>
c001bd38:	b8 00 00 00 00       	mov    eax,0x0
c001bd3d:	eb 09                	jmp    c001bd48 <FAT::mkdir(char const*)+0x78>
c001bd3f:	90                   	nop
c001bd40:	b8 01 00 00 00       	mov    eax,0x1
c001bd45:	8d 76 00             	lea    esi,[esi+0x0]
c001bd48:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bd4e:	c3                   	ret    
c001bd4f:	90                   	nop

c001bd50 <FAT::exists(char const*)>:
c001bd50:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bd56:	83 ec 08             	sub    esp,0x8
c001bd59:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bd60:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bd64:	50                   	push   eax
c001bd65:	e8 d6 49 fe ff       	call   c0000740 <strcpy>
c001bd6a:	83 c4 10             	add    esp,0x10
c001bd6d:	83 ec 08             	sub    esp,0x8
c001bd70:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd74:	50                   	push   eax
c001bd75:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bd7c:	e8 87 f9 ff ff       	call   c001b708 <FAT::fixFilepath(char*)>
c001bd81:	83 c4 10             	add    esp,0x10
c001bd84:	83 ec 08             	sub    esp,0x8
c001bd87:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001bd8e:	50                   	push   eax
c001bd8f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bd93:	50                   	push   eax
c001bd94:	e8 e9 a2 fe ff       	call   c0006082 <f_stat>
c001bd99:	83 c4 10             	add    esp,0x10
c001bd9c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bda3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bdaa:	85 c0                	test   eax,eax
c001bdac:	75 06                	jne    c001bdb4 <FAT::exists(char const*)+0x64>
c001bdae:	b0 01                	mov    al,0x1
c001bdb0:	eb 06                	jmp    c001bdb8 <FAT::exists(char const*)+0x68>
c001bdb2:	66 90                	xchg   ax,ax
c001bdb4:	b0 00                	mov    al,0x0
c001bdb6:	66 90                	xchg   ax,ax
c001bdb8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bdbe:	c3                   	ret    
c001bdbf:	90                   	nop

c001bdc0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001bdc0:	b8 08 00 00 00       	mov    eax,0x8
c001bdc5:	c3                   	ret    

c001bdc6 <ISO9660::seek(void*, unsigned long long)>:
c001bdc6:	53                   	push   ebx
c001bdc7:	b8 04 00 00 00       	mov    eax,0x4
c001bdcc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bdd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bdd4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bdd8:	85 d2                	test   edx,edx
c001bdda:	74 17                	je     c001bdf3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001bddc:	89 c8                	mov    eax,ecx
c001bdde:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001bde1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001bde4:	b8 01 00 00 00       	mov    eax,0x1
c001bde9:	73 08                	jae    c001bdf3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001bdeb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001bdee:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001bdf1:	31 c0                	xor    eax,eax
c001bdf3:	5b                   	pop    ebx
c001bdf4:	c3                   	ret    
c001bdf5:	90                   	nop

c001bdf6 <ISO9660::tell(void*, unsigned long long*)>:
c001bdf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bdfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdfe:	85 d2                	test   edx,edx
c001be00:	74 12                	je     c001be14 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001be02:	85 c0                	test   eax,eax
c001be04:	74 0e                	je     c001be14 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001be06:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be09:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001be0c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001be0f:	89 10                	mov    DWORD PTR [eax],edx
c001be11:	31 c0                	xor    eax,eax
c001be13:	c3                   	ret    
c001be14:	b8 04 00 00 00       	mov    eax,0x4
c001be19:	c3                   	ret    

c001be1a <ISO9660::getName()>:
c001be1a:	b8 a4 5f 02 c0       	mov    eax,0xc0025fa4
c001be1f:	c3                   	ret    

c001be20 <ISO9660::stat(void*, unsigned long long*)>:
c001be20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be28:	85 d2                	test   edx,edx
c001be2a:	74 12                	je     c001be3e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001be2c:	85 c0                	test   eax,eax
c001be2e:	74 0e                	je     c001be3e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001be30:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001be33:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001be36:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001be39:	89 10                	mov    DWORD PTR [eax],edx
c001be3b:	31 c0                	xor    eax,eax
c001be3d:	c3                   	ret    
c001be3e:	b8 04 00 00 00       	mov    eax,0x4
c001be43:	c3                   	ret    

c001be44 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001be44:	b8 01 00 00 00       	mov    eax,0x1
c001be49:	c3                   	ret    

c001be4a <ISO9660::unlink(char const*)>:
c001be4a:	b8 01 00 00 00       	mov    eax,0x1
c001be4f:	c3                   	ret    

c001be50 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001be50:	b8 01 00 00 00       	mov    eax,0x1
c001be55:	c3                   	ret    

c001be56 <ISO9660::rename(char const*, char const*)>:
c001be56:	b8 01 00 00 00       	mov    eax,0x1
c001be5b:	c3                   	ret    

c001be5c <ISO9660::mkdir(char const*)>:
c001be5c:	b8 01 00 00 00       	mov    eax,0x1
c001be61:	c3                   	ret    

c001be62 <ISO9660::close(void*)>:
c001be62:	83 ec 0c             	sub    esp,0xc
c001be65:	b8 04 00 00 00       	mov    eax,0x4
c001be6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be6e:	85 d2                	test   edx,edx
c001be70:	74 0e                	je     c001be80 <ISO9660::close(void*)+0x1e>
c001be72:	83 ec 0c             	sub    esp,0xc
c001be75:	52                   	push   edx
c001be76:	e8 58 db fe ff       	call   c00099d3 <free>
c001be7b:	83 c4 10             	add    esp,0x10
c001be7e:	31 c0                	xor    eax,eax
c001be80:	83 c4 0c             	add    esp,0xc
c001be83:	c3                   	ret    

c001be84 <ISO9660::closeDir(void*)>:
c001be84:	83 ec 0c             	sub    esp,0xc
c001be87:	b8 04 00 00 00       	mov    eax,0x4
c001be8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be90:	85 d2                	test   edx,edx
c001be92:	74 0e                	je     c001bea2 <ISO9660::closeDir(void*)+0x1e>
c001be94:	83 ec 0c             	sub    esp,0xc
c001be97:	52                   	push   edx
c001be98:	e8 36 db fe ff       	call   c00099d3 <free>
c001be9d:	83 c4 10             	add    esp,0x10
c001bea0:	31 c0                	xor    eax,eax
c001bea2:	83 c4 0c             	add    esp,0xc
c001bea5:	c3                   	ret    

c001bea6 <ISO9660::~ISO9660()>:
c001bea6:	83 ec 0c             	sub    esp,0xc
c001bea9:	ba c8 5f 02 c0       	mov    edx,0xc0025fc8
c001beae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beb2:	89 10                	mov    DWORD PTR [eax],edx
c001beb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beb8:	83 ec 0c             	sub    esp,0xc
c001bebb:	50                   	push   eax
c001bebc:	e8 2d 11 ff ff       	call   c000cfee <Filesystem::~Filesystem()>
c001bec1:	83 c4 10             	add    esp,0x10
c001bec4:	90                   	nop
c001bec5:	83 c4 0c             	add    esp,0xc
c001bec8:	c3                   	ret    
c001bec9:	90                   	nop

c001beca <ISO9660::~ISO9660()>:
c001beca:	83 ec 0c             	sub    esp,0xc
c001becd:	83 ec 0c             	sub    esp,0xc
c001bed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bed4:	e8 cd ff ff ff       	call   c001bea6 <ISO9660::~ISO9660()>
c001bed9:	83 c4 10             	add    esp,0x10
c001bedc:	83 ec 08             	sub    esp,0x8
c001bedf:	6a 08                	push   0x8
c001bee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bee5:	e8 e8 0c ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c001beea:	83 c4 10             	add    esp,0x10
c001beed:	83 c4 0c             	add    esp,0xc
c001bef0:	c3                   	ret    

c001bef1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001bef1:	55                   	push   ebp
c001bef2:	31 c9                	xor    ecx,ecx
c001bef4:	57                   	push   edi
c001bef5:	56                   	push   esi
c001bef6:	53                   	push   ebx
c001bef7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001befb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001beff:	89 eb                	mov    ebx,ebp
c001bf01:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001bf05:	39 ce                	cmp    esi,ecx
c001bf07:	7e 17                	jle    c001bf20 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001bf09:	31 d2                	xor    edx,edx
c001bf0b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001bf0f:	7d 13                	jge    c001bf24 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001bf11:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bf15:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bf18:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001bf1b:	75 0d                	jne    c001bf2a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001bf1d:	42                   	inc    edx
c001bf1e:	eb eb                	jmp    c001bf0b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001bf20:	31 c0                	xor    eax,eax
c001bf22:	eb 0a                	jmp    c001bf2e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001bf24:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001bf28:	eb 04                	jmp    c001bf2e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001bf2a:	41                   	inc    ecx
c001bf2b:	43                   	inc    ebx
c001bf2c:	eb d7                	jmp    c001bf05 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001bf2e:	5b                   	pop    ebx
c001bf2f:	5e                   	pop    esi
c001bf30:	5f                   	pop    edi
c001bf31:	5d                   	pop    ebp
c001bf32:	c3                   	ret    

c001bf33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001bf33:	57                   	push   edi
c001bf34:	56                   	push   esi
c001bf35:	53                   	push   ebx
c001bf36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf3e:	39 0d c0 91 02 c0    	cmp    DWORD PTR ds:0xc00291c0,ecx
c001bf44:	75 08                	jne    c001bf4e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001bf46:	38 05 34 75 02 c0    	cmp    BYTE PTR ds:0xc0027534,al
c001bf4c:	74 2b                	je     c001bf79 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001bf4e:	83 ec 0c             	sub    esp,0xc
c001bf51:	a2 34 75 02 c0       	mov    ds:0xc0027534,al
c001bf56:	68 e0 91 02 c0       	push   0xc00291e0
c001bf5b:	0f be c0             	movsx  eax,al
c001bf5e:	6a 01                	push   0x1
c001bf60:	89 0d c0 91 02 c0    	mov    DWORD PTR ds:0xc00291c0,ecx
c001bf66:	31 db                	xor    ebx,ebx
c001bf68:	53                   	push   ebx
c001bf69:	51                   	push   ecx
c001bf6a:	ff 34 85 bc 7f 02 c0 	push   DWORD PTR [eax*4-0x3ffd8044]
c001bf71:	e8 9a 44 ff ff       	call   c0010410 <LogicalDisk::read(unsigned long long, int, void*)>
c001bf76:	83 c4 20             	add    esp,0x20
c001bf79:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bf7d:	be e0 91 02 c0       	mov    esi,0xc00291e0
c001bf82:	b9 00 08 00 00       	mov    ecx,0x800
c001bf87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf89:	5b                   	pop    ebx
c001bf8a:	5e                   	pop    esi
c001bf8b:	5f                   	pop    edi
c001bf8c:	c3                   	ret    
c001bf8d:	90                   	nop

c001bf8e <ISO9660::tryMount(LogicalDisk*, int)>:
c001bf8e:	81 ec 10 08 00 00    	sub    esp,0x810
c001bf94:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001bf9b:	83 c0 41             	add    eax,0x41
c001bf9e:	0f be c0             	movsx  eax,al
c001bfa1:	50                   	push   eax
c001bfa2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bfa6:	50                   	push   eax
c001bfa7:	6a 10                	push   0x10
c001bfa9:	e8 85 ff ff ff       	call   c001bf33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bfae:	83 c4 10             	add    esp,0x10
c001bfb1:	31 c0                	xor    eax,eax
c001bfb3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001bfb8:	75 1d                	jne    c001bfd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bfba:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001bfbf:	75 16                	jne    c001bfd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bfc1:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001bfc6:	75 0f                	jne    c001bfd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bfc8:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001bfcd:	75 08                	jne    c001bfd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bfcf:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001bfd4:	0f 94 c0             	sete   al
c001bfd7:	81 c4 0c 08 00 00    	add    esp,0x80c
c001bfdd:	c3                   	ret    

c001bfde <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bfde:	55                   	push   ebp
c001bfdf:	57                   	push   edi
c001bfe0:	56                   	push   esi
c001bfe1:	53                   	push   ebx
c001bfe2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bfe8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001bfef:	85 ed                	test   ebp,ebp
c001bff1:	0f 84 da 01 00 00    	je     c001c1d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bff7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bfff:	0f 84 cc 01 00 00    	je     c001c1d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c005:	b8 01 00 00 00       	mov    eax,0x1
c001c00a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c00e:	0f 85 c2 01 00 00    	jne    c001c1d6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c014:	31 d2                	xor    edx,edx
c001c016:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c01d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c020:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c023:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c026:	89 04 24             	mov    DWORD PTR [esp],eax
c001c029:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c02d:	01 c8                	add    eax,ecx
c001c02f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c032:	11 da                	adc    edx,ebx
c001c034:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c038:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c03c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c040:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c044:	19 d7                	sbb    edi,edx
c001c046:	72 11                	jb     c001c059 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c048:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c04b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c04f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c053:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c057:	eb 0c                	jmp    c001c065 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c059:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c05d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c061:	29 ce                	sub    esi,ecx
c001c063:	19 df                	sbb    edi,ebx
c001c065:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c068:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c06b:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c06f:	c1 e0 0b             	shl    eax,0xb
c001c072:	01 c8                	add    eax,ecx
c001c074:	11 da                	adc    edx,ebx
c001c076:	89 04 24             	mov    DWORD PTR [esp],eax
c001c079:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c07d:	51                   	push   ecx
c001c07e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c082:	50                   	push   eax
c001c083:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c087:	53                   	push   ebx
c001c088:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c08c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c090:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c094:	50                   	push   eax
c001c095:	e8 99 fe ff ff       	call   c001bf33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c09a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c09d:	b8 00 08 00 00       	mov    eax,0x800
c001c0a2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c0a8:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c0ac:	29 d0                	sub    eax,edx
c001c0ae:	83 c4 10             	add    esp,0x10
c001c0b1:	89 f9                	mov    ecx,edi
c001c0b3:	39 c6                	cmp    esi,eax
c001c0b5:	83 d9 00             	sbb    ecx,0x0
c001c0b8:	7d 1b                	jge    c001c0d5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c0ba:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c0bf:	75 12                	jne    c001c0d3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c0c1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c0c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c0ce:	e9 fa 00 00 00       	jmp    c001c1cd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c0d3:	89 f0                	mov    eax,esi
c001c0d5:	01 d3                	add    ebx,edx
c001c0d7:	31 d2                	xor    edx,edx
c001c0d9:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c0dd:	39 c2                	cmp    edx,eax
c001c0df:	7d 14                	jge    c001c0f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c0e1:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c0e8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c0ec:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c0ef:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c0f2:	42                   	inc    edx
c001c0f3:	eb e8                	jmp    c001c0dd <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c0f5:	89 c2                	mov    edx,eax
c001c0f7:	85 c0                	test   eax,eax
c001c0f9:	79 02                	jns    c001c0fd <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c0fb:	31 d2                	xor    edx,edx
c001c0fd:	01 c2                	add    edx,eax
c001c0ff:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c102:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c109:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c10d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c111:	99                   	cdq    
c001c112:	01 c1                	add    ecx,eax
c001c114:	11 d3                	adc    ebx,edx
c001c116:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c11a:	29 c6                	sub    esi,eax
c001c11c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c120:	19 d7                	sbb    edi,edx
c001c122:	89 34 24             	mov    DWORD PTR [esp],esi
c001c125:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c129:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c12e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c131:	b8 00 00 00 00       	mov    eax,0x0
c001c136:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c13a:	7d 43                	jge    c001c17f <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c13c:	52                   	push   edx
c001c13d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c141:	50                   	push   eax
c001c142:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c146:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c14a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c14e:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c152:	50                   	push   eax
c001c153:	e8 db fd ff ff       	call   c001bf33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c158:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c160:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c165:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c16d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c175:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c17a:	83 c4 10             	add    esp,0x10
c001c17d:	eb aa                	jmp    c001c129 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c17f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c183:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c186:	74 2a                	je     c001c1b2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c188:	50                   	push   eax
c001c189:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c18d:	50                   	push   eax
c001c18e:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c192:	56                   	push   esi
c001c193:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c19b:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c19f:	51                   	push   ecx
c001c1a0:	e8 8e fd ff ff       	call   c001bf33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c1a5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c1a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c1ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c1af:	83 c4 10             	add    esp,0x10
c001c1b2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c1b9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c1bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c1c1:	89 18                	mov    DWORD PTR [eax],ebx
c001c1c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1c7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c1ca:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c1cd:	31 c0                	xor    eax,eax
c001c1cf:	eb 05                	jmp    c001c1d6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c1d1:	b8 04 00 00 00       	mov    eax,0x4
c001c1d6:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c1dc:	5b                   	pop    ebx
c001c1dd:	5e                   	pop    esi
c001c1de:	5f                   	pop    edi
c001c1df:	5d                   	pop    ebp
c001c1e0:	c3                   	ret    
c001c1e1:	90                   	nop

c001c1e2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c1e2:	55                   	push   ebp
c001c1e3:	57                   	push   edi
c001c1e4:	56                   	push   esi
c001c1e5:	53                   	push   ebx
c001c1e6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c1ec:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c1f3:	85 ed                	test   ebp,ebp
c001c1f5:	0f 84 51 02 00 00    	je     c001c44c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c1fb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c203:	0f 84 43 02 00 00    	je     c001c44c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c209:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c20c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c20f:	75 0a                	jne    c001c21b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c211:	b8 07 00 00 00       	mov    eax,0x7
c001c216:	e9 36 02 00 00       	jmp    c001c451 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c21b:	50                   	push   eax
c001c21c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c220:	50                   	push   eax
c001c221:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c228:	53                   	push   ebx
c001c229:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c22c:	c1 e0 0b             	shl    eax,0xb
c001c22f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c232:	c1 e8 0b             	shr    eax,0xb
c001c235:	50                   	push   eax
c001c236:	e8 f8 fc ff ff       	call   c001bf33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c23b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c23e:	83 c4 10             	add    esp,0x10
c001c241:	89 c1                	mov    ecx,eax
c001c243:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c246:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c24c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c24f:	84 db                	test   bl,bl
c001c251:	0f 85 8b 00 00 00    	jne    c001c2e2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c257:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c25d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c260:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c266:	29 c6                	sub    esi,eax
c001c268:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c26c:	89 f3                	mov    ebx,esi
c001c26e:	89 f1                	mov    ecx,esi
c001c270:	c1 fb 1f             	sar    ebx,0x1f
c001c273:	01 f0                	add    eax,esi
c001c275:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c278:	11 da                	adc    edx,ebx
c001c27a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c27d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c281:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c284:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c287:	89 d8                	mov    eax,ebx
c001c289:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c28d:	ba 00 00 00 00       	mov    edx,0x0
c001c292:	19 f8                	sbb    eax,edi
c001c294:	b8 00 00 00 00       	mov    eax,0x0
c001c299:	73 08                	jae    c001c2a3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c29b:	89 f0                	mov    eax,esi
c001c29d:	89 fa                	mov    edx,edi
c001c29f:	29 c8                	sub    eax,ecx
c001c2a1:	19 da                	sbb    edx,ebx
c001c2a3:	89 d7                	mov    edi,edx
c001c2a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c2a8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c2ab:	09 c7                	or     edi,eax
c001c2ad:	0f 84 5e ff ff ff    	je     c001c211 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c2b3:	57                   	push   edi
c001c2b4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c2b8:	50                   	push   eax
c001c2b9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c2c0:	53                   	push   ebx
c001c2c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c2c4:	c1 e0 0b             	shl    eax,0xb
c001c2c7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c2cb:	c1 e8 0b             	shr    eax,0xb
c001c2ce:	50                   	push   eax
c001c2cf:	e8 5f fc ff ff       	call   c001bf33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c2d4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c2d7:	83 c4 10             	add    esp,0x10
c001c2da:	25 ff 07 00 00       	and    eax,0x7ff
c001c2df:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c2e2:	31 ff                	xor    edi,edi
c001c2e4:	56                   	push   esi
c001c2e5:	6a 28                	push   0x28
c001c2e7:	6a 00                	push   0x0
c001c2e9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c2ed:	50                   	push   eax
c001c2ee:	e8 91 43 fe ff       	call   c0000684 <memset>
c001c2f3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c2f6:	25 ff 07 00 00       	and    eax,0x7ff
c001c2fb:	89 c6                	mov    esi,eax
c001c2fd:	83 c6 21             	add    esi,0x21
c001c300:	83 d7 00             	adc    edi,0x0
c001c303:	83 c4 10             	add    esp,0x10
c001c306:	31 c9                	xor    ecx,ecx
c001c308:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c30f:	83 f9 28             	cmp    ecx,0x28
c001c312:	88 04 24             	mov    BYTE PTR [esp],al
c001c315:	0f 94 c2             	sete   dl
c001c318:	88 d0                	mov    al,dl
c001c31a:	ba ff 07 00 00       	mov    edx,0x7ff
c001c31f:	39 f2                	cmp    edx,esi
c001c321:	ba 00 00 00 00       	mov    edx,0x0
c001c326:	19 fa                	sbb    edx,edi
c001c328:	0f 92 c2             	setb   dl
c001c32b:	09 c2                	or     edx,eax
c001c32d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c331:	0f 94 c0             	sete   al
c001c334:	08 d0                	or     al,dl
c001c336:	75 16                	jne    c001c34e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c338:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c33c:	74 10                	je     c001c34e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c33e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c341:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c345:	41                   	inc    ecx
c001c346:	83 c6 01             	add    esi,0x1
c001c349:	83 d7 00             	adc    edi,0x0
c001c34c:	eb ba                	jmp    c001c308 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c34e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c355:	83 ec 0c             	sub    esp,0xc
c001c358:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c35c:	56                   	push   esi
c001c35d:	e8 3e 43 fe ff       	call   c00006a0 <strlen>
c001c362:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c369:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c36d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c375:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c378:	5a                   	pop    edx
c001c379:	25 ff 07 00 00       	and    eax,0x7ff
c001c37e:	59                   	pop    ecx
c001c37f:	01 f8                	add    eax,edi
c001c381:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c387:	83 e0 02             	and    eax,0x2
c001c38a:	3c 01                	cmp    al,0x1
c001c38c:	19 c0                	sbb    eax,eax
c001c38e:	83 c0 02             	add    eax,0x2
c001c391:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c395:	56                   	push   esi
c001c396:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c39a:	50                   	push   eax
c001c39b:	e8 a0 43 fe ff       	call   c0000740 <strcpy>
c001c3a0:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c3a4:	83 c4 10             	add    esp,0x10
c001c3a7:	84 c0                	test   al,al
c001c3a9:	75 21                	jne    c001c3cc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c3ab:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c3b3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c3bb:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c3c3:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c3ca:	eb 28                	jmp    c001c3f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c3cc:	fe c8                	dec    al
c001c3ce:	75 24                	jne    c001c3f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c3d0:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c3d8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c3e0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c3e8:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c3ef:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c3f4:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c3f8:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c3ff:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c406:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c408:	0f b6 f3             	movzx  esi,bl
c001c40b:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c412:	31 db                	xor    ebx,ebx
c001c414:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c41a:	89 df                	mov    edi,ebx
c001c41c:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c41f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c422:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c425:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c428:	39 c6                	cmp    esi,eax
c001c42a:	19 d7                	sbb    edi,edx
c001c42c:	72 10                	jb     c001c43e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c42e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c435:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c43c:	eb 0a                	jmp    c001c448 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c43e:	29 f0                	sub    eax,esi
c001c440:	19 da                	sbb    edx,ebx
c001c442:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c445:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c448:	31 c0                	xor    eax,eax
c001c44a:	eb 05                	jmp    c001c451 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c44c:	b8 04 00 00 00       	mov    eax,0x4
c001c451:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c457:	5b                   	pop    ebx
c001c458:	5e                   	pop    esi
c001c459:	5f                   	pop    edi
c001c45a:	5d                   	pop    ebp
c001c45b:	c3                   	ret    

c001c45c <readRoot(unsigned int*, unsigned int*, char)>:
c001c45c:	57                   	push   edi
c001c45d:	56                   	push   esi
c001c45e:	81 ec 38 08 00 00    	sub    esp,0x838
c001c464:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c46c:	50                   	push   eax
c001c46d:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c471:	50                   	push   eax
c001c472:	6a 10                	push   0x10
c001c474:	e8 ba fa ff ff       	call   c001bf33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c479:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c480:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c484:	b9 22 00 00 00       	mov    ecx,0x22
c001c489:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c48b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c492:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c496:	89 10                	mov    DWORD PTR [eax],edx
c001c498:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c49f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c4a3:	89 10                	mov    DWORD PTR [eax],edx
c001c4a5:	81 c4 44 08 00 00    	add    esp,0x844
c001c4ab:	b0 01                	mov    al,0x1
c001c4ad:	5e                   	pop    esi
c001c4ae:	5f                   	pop    edi
c001c4af:	c3                   	ret    

c001c4b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c4b0:	55                   	push   ebp
c001c4b1:	57                   	push   edi
c001c4b2:	56                   	push   esi
c001c4b3:	53                   	push   ebx
c001c4b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c4ba:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c4c1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c4c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c4cc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c4d0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c4d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c4d8:	75 03                	jne    c001c4dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c4da:	83 c3 02             	add    ebx,0x2
c001c4dd:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c4e0:	75 03                	jne    c001c4e5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c4e2:	43                   	inc    ebx
c001c4e3:	eb f8                	jmp    c001c4dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c4e5:	51                   	push   ecx
c001c4e6:	68 00 01 00 00       	push   0x100
c001c4eb:	6a 00                	push   0x0
c001c4ed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c4f1:	50                   	push   eax
c001c4f2:	e8 8d 41 fe ff       	call   c0000684 <memset>
c001c4f7:	83 c4 10             	add    esp,0x10
c001c4fa:	31 d2                	xor    edx,edx
c001c4fc:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c4ff:	84 c0                	test   al,al
c001c501:	74 21                	je     c001c524 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c503:	3c 2f                	cmp    al,0x2f
c001c505:	75 0b                	jne    c001c512 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c507:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c50b:	bd 01 00 00 00       	mov    ebp,0x1
c001c510:	eb 14                	jmp    c001c526 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c512:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c515:	80 f9 19             	cmp    cl,0x19
c001c518:	77 03                	ja     c001c51d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c51a:	83 e8 20             	sub    eax,0x20
c001c51d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c521:	42                   	inc    edx
c001c522:	eb d8                	jmp    c001c4fc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c524:	31 ed                	xor    ebp,ebp
c001c526:	83 ec 0c             	sub    esp,0xc
c001c529:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c530:	e8 8e d4 fe ff       	call   c00099c3 <malloc>
c001c535:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c53c:	89 c6                	mov    esi,eax
c001c53e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c544:	c1 ef 0b             	shr    edi,0xb
c001c547:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c54e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c552:	83 c4 10             	add    esp,0x10
c001c555:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c55a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c55e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c565:	74 28                	je     c001c58f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c567:	52                   	push   edx
c001c568:	57                   	push   edi
c001c569:	50                   	push   eax
c001c56a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c56e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c575:	e8 b9 f9 ff ff       	call   c001bf33 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c57a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c57e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c585:	05 00 08 00 00       	add    eax,0x800
c001c58a:	83 c4 10             	add    esp,0x10
c001c58d:	eb cb                	jmp    c001c55a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c58f:	83 ec 0c             	sub    esp,0xc
c001c592:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c596:	57                   	push   edi
c001c597:	e8 04 41 fe ff       	call   c00006a0 <strlen>
c001c59c:	50                   	push   eax
c001c59d:	57                   	push   edi
c001c59e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c5a5:	56                   	push   esi
c001c5a6:	e8 46 f9 ff ff       	call   c001bef1 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c5ab:	83 c4 20             	add    esp,0x20
c001c5ae:	85 c0                	test   eax,eax
c001c5b0:	75 13                	jne    c001c5c5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c5b2:	83 ec 0c             	sub    esp,0xc
c001c5b5:	56                   	push   esi
c001c5b6:	e8 18 d4 fe ff       	call   c00099d3 <free>
c001c5bb:	83 c4 10             	add    esp,0x10
c001c5be:	31 c0                	xor    eax,eax
c001c5c0:	e9 b3 00 00 00       	jmp    c001c678 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c5c5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c5c9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c5cd:	c1 e7 08             	shl    edi,0x8
c001c5d0:	c1 e2 10             	shl    edx,0x10
c001c5d3:	09 d7                	or     edi,edx
c001c5d5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c5d9:	09 d7                	or     edi,edx
c001c5db:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c5df:	c1 e2 18             	shl    edx,0x18
c001c5e2:	09 d7                	or     edi,edx
c001c5e4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c5e8:	89 d1                	mov    ecx,edx
c001c5ea:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c5ee:	c1 e1 08             	shl    ecx,0x8
c001c5f1:	c1 e2 10             	shl    edx,0x10
c001c5f4:	09 ca                	or     edx,ecx
c001c5f6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c5fa:	09 ca                	or     edx,ecx
c001c5fc:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c600:	c1 e1 18             	shl    ecx,0x18
c001c603:	09 ca                	or     edx,ecx
c001c605:	89 e9                	mov    ecx,ebp
c001c607:	84 c9                	test   cl,cl
c001c609:	74 3c                	je     c001c647 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c60b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c60f:	83 ec 0c             	sub    esp,0xc
c001c612:	56                   	push   esi
c001c613:	e8 bb d3 fe ff       	call   c00099d3 <free>
c001c618:	83 c4 0c             	add    esp,0xc
c001c61b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c622:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c627:	50                   	push   eax
c001c628:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c62f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c636:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c63a:	52                   	push   edx
c001c63b:	57                   	push   edi
c001c63c:	53                   	push   ebx
c001c63d:	e8 6e fe ff ff       	call   c001c4b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c642:	83 c4 20             	add    esp,0x20
c001c645:	eb 31                	jmp    c001c678 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c647:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c64a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c651:	d0 e8                	shr    al,1
c001c653:	89 3b                	mov    DWORD PTR [ebx],edi
c001c655:	83 e0 01             	and    eax,0x1
c001c658:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c65f:	83 ec 0c             	sub    esp,0xc
c001c662:	89 13                	mov    DWORD PTR [ebx],edx
c001c664:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c66b:	89 03                	mov    DWORD PTR [ebx],eax
c001c66d:	56                   	push   esi
c001c66e:	e8 60 d3 fe ff       	call   c00099d3 <free>
c001c673:	83 c4 10             	add    esp,0x10
c001c676:	b0 01                	mov    al,0x1
c001c678:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c67e:	5b                   	pop    ebx
c001c67f:	5e                   	pop    esi
c001c680:	5f                   	pop    edi
c001c681:	5d                   	pop    ebp
c001c682:	c3                   	ret    

c001c683 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c683:	55                   	push   ebp
c001c684:	57                   	push   edi
c001c685:	56                   	push   esi
c001c686:	53                   	push   ebx
c001c687:	83 ec 20             	sub    esp,0x20
c001c68a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c68e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c692:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c696:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c69e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c6a6:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c6ab:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c6b1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c6b7:	57                   	push   edi
c001c6b8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c6bc:	50                   	push   eax
c001c6bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c6c1:	50                   	push   eax
c001c6c2:	e8 95 fd ff ff       	call   c001c45c <readRoot(unsigned int*, unsigned int*, char)>
c001c6c7:	5a                   	pop    edx
c001c6c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c6cc:	e8 cf 3f fe ff       	call   c00006a0 <strlen>
c001c6d1:	83 c4 10             	add    esp,0x10
c001c6d4:	83 f8 03             	cmp    eax,0x3
c001c6d7:	77 17                	ja     c001c6f0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c6d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6dd:	89 03                	mov    DWORD PTR [ebx],eax
c001c6df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6e3:	89 06                	mov    DWORD PTR [esi],eax
c001c6e5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c6ec:	b0 01                	mov    al,0x1
c001c6ee:	eb 19                	jmp    c001c709 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c6f0:	50                   	push   eax
c001c6f1:	55                   	push   ebp
c001c6f2:	57                   	push   edi
c001c6f3:	56                   	push   esi
c001c6f4:	53                   	push   ebx
c001c6f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c701:	e8 aa fd ff ff       	call   c001c4b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c706:	83 c4 20             	add    esp,0x20
c001c709:	83 c4 1c             	add    esp,0x1c
c001c70c:	5b                   	pop    ebx
c001c70d:	5e                   	pop    esi
c001c70e:	5f                   	pop    edi
c001c70f:	5d                   	pop    ebp
c001c710:	c3                   	ret    
c001c711:	90                   	nop

c001c712 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c712:	57                   	push   edi
c001c713:	56                   	push   esi
c001c714:	53                   	push   ebx
c001c715:	83 ec 10             	sub    esp,0x10
c001c718:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c71c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c720:	85 ff                	test   edi,edi
c001c722:	0f 84 8b 00 00 00    	je     c001c7b3 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c728:	85 f6                	test   esi,esi
c001c72a:	0f 84 83 00 00 00    	je     c001c7b3 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c730:	b8 03 00 00 00       	mov    eax,0x3
c001c735:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c73a:	75 7c                	jne    c001c7b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c73c:	83 ec 0c             	sub    esp,0xc
c001c73f:	6a 1c                	push   0x1c
c001c741:	e8 7d d2 fe ff       	call   c00099c3 <malloc>
c001c746:	89 07                	mov    DWORD PTR [edi],eax
c001c748:	89 c3                	mov    ebx,eax
c001c74a:	58                   	pop    eax
c001c74b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c74f:	50                   	push   eax
c001c750:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c753:	50                   	push   eax
c001c754:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c758:	50                   	push   eax
c001c759:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c75d:	50                   	push   eax
c001c75e:	56                   	push   esi
c001c75f:	e8 1f ff ff ff       	call   c001c683 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c764:	83 c4 20             	add    esp,0x20
c001c767:	84 c0                	test   al,al
c001c769:	74 07                	je     c001c772 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c76b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c770:	74 0b                	je     c001c77d <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c772:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c776:	b8 01 00 00 00       	mov    eax,0x1
c001c77b:	eb 3b                	jmp    c001c7b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c77d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c781:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c785:	89 03                	mov    DWORD PTR [ebx],eax
c001c787:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c78e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c792:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c799:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c7a0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c7a3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c7aa:	8a 06                	mov    al,BYTE PTR [esi]
c001c7ac:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c7af:	31 c0                	xor    eax,eax
c001c7b1:	eb 05                	jmp    c001c7b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c7b3:	b8 04 00 00 00       	mov    eax,0x4
c001c7b8:	83 c4 10             	add    esp,0x10
c001c7bb:	5b                   	pop    ebx
c001c7bc:	5e                   	pop    esi
c001c7bd:	5f                   	pop    edi
c001c7be:	c3                   	ret    
c001c7bf:	90                   	nop

c001c7c0 <ISO9660::exists(char const*)>:
c001c7c0:	83 ec 28             	sub    esp,0x28
c001c7c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c7c7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c7cb:	52                   	push   edx
c001c7cc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c7cf:	52                   	push   edx
c001c7d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c7d4:	52                   	push   edx
c001c7d5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c7d9:	52                   	push   edx
c001c7da:	50                   	push   eax
c001c7db:	e8 a3 fe ff ff       	call   c001c683 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c7e0:	83 c4 3c             	add    esp,0x3c
c001c7e3:	c3                   	ret    

c001c7e4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c7e4:	56                   	push   esi
c001c7e5:	53                   	push   ebx
c001c7e6:	83 ec 14             	sub    esp,0x14
c001c7e9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c7ed:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c7f1:	85 db                	test   ebx,ebx
c001c7f3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c7f7:	0f 94 c2             	sete   dl
c001c7fa:	85 f6                	test   esi,esi
c001c7fc:	0f 94 c0             	sete   al
c001c7ff:	08 c2                	or     dl,al
c001c801:	75 68                	jne    c001c86b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c803:	85 c9                	test   ecx,ecx
c001c805:	74 64                	je     c001c86b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c807:	83 ec 0c             	sub    esp,0xc
c001c80a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c80d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c811:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c817:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c81e:	50                   	push   eax
c001c81f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c822:	50                   	push   eax
c001c823:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c827:	50                   	push   eax
c001c828:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c82c:	50                   	push   eax
c001c82d:	51                   	push   ecx
c001c82e:	e8 50 fe ff ff       	call   c001c683 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c833:	83 c4 20             	add    esp,0x20
c001c836:	ba 01 00 00 00       	mov    edx,0x1
c001c83b:	84 c0                	test   al,al
c001c83d:	74 31                	je     c001c870 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c83f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c843:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c84a:	89 03                	mov    DWORD PTR [ebx],eax
c001c84c:	ba 00 00 00 00       	mov    edx,0x0
c001c851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c855:	85 c0                	test   eax,eax
c001c857:	0f 95 06             	setne  BYTE PTR [esi]
c001c85a:	74 14                	je     c001c870 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c85c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c862:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c869:	eb 05                	jmp    c001c870 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c86b:	ba 04 00 00 00       	mov    edx,0x4
c001c870:	83 c4 14             	add    esp,0x14
c001c873:	89 d0                	mov    eax,edx
c001c875:	5b                   	pop    ebx
c001c876:	5e                   	pop    esi
c001c877:	c3                   	ret    

c001c878 <ISO9660::openDir(char const*, void**)>:
c001c878:	57                   	push   edi
c001c879:	56                   	push   esi
c001c87a:	53                   	push   ebx
c001c87b:	83 ec 10             	sub    esp,0x10
c001c87e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c882:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c886:	85 ff                	test   edi,edi
c001c888:	74 7b                	je     c001c905 <ISO9660::openDir(char const*, void**)+0x8d>
c001c88a:	85 f6                	test   esi,esi
c001c88c:	74 77                	je     c001c905 <ISO9660::openDir(char const*, void**)+0x8d>
c001c88e:	83 ec 0c             	sub    esp,0xc
c001c891:	6a 1c                	push   0x1c
c001c893:	e8 2b d1 fe ff       	call   c00099c3 <malloc>
c001c898:	89 07                	mov    DWORD PTR [edi],eax
c001c89a:	89 c3                	mov    ebx,eax
c001c89c:	58                   	pop    eax
c001c89d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c8a1:	50                   	push   eax
c001c8a2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c8a5:	50                   	push   eax
c001c8a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c8aa:	50                   	push   eax
c001c8ab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c8af:	50                   	push   eax
c001c8b0:	56                   	push   esi
c001c8b1:	e8 cd fd ff ff       	call   c001c683 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c8b6:	83 c4 20             	add    esp,0x20
c001c8b9:	84 c0                	test   al,al
c001c8bb:	74 07                	je     c001c8c4 <ISO9660::openDir(char const*, void**)+0x4c>
c001c8bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c8c2:	75 0b                	jne    c001c8cf <ISO9660::openDir(char const*, void**)+0x57>
c001c8c4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c8c8:	b8 01 00 00 00       	mov    eax,0x1
c001c8cd:	eb 3b                	jmp    c001c90a <ISO9660::openDir(char const*, void**)+0x92>
c001c8cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8d3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c8d7:	89 03                	mov    DWORD PTR [ebx],eax
c001c8d9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c8e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8e4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c8eb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c8f2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c8f5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c8fc:	8a 06                	mov    al,BYTE PTR [esi]
c001c8fe:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c901:	31 c0                	xor    eax,eax
c001c903:	eb 05                	jmp    c001c90a <ISO9660::openDir(char const*, void**)+0x92>
c001c905:	b8 04 00 00 00       	mov    eax,0x4
c001c90a:	83 c4 10             	add    esp,0x10
c001c90d:	5b                   	pop    ebx
c001c90e:	5e                   	pop    esi
c001c90f:	5f                   	pop    edi
c001c910:	c3                   	ret    
c001c911:	90                   	nop

c001c912 <ISO9660::ISO9660()>:
c001c912:	83 ec 0c             	sub    esp,0xc
c001c915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c919:	83 ec 0c             	sub    esp,0xc
c001c91c:	50                   	push   eax
c001c91d:	e8 a8 06 ff ff       	call   c000cfca <Filesystem::Filesystem()>
c001c922:	83 c4 10             	add    esp,0x10
c001c925:	ba c8 5f 02 c0       	mov    edx,0xc0025fc8
c001c92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92e:	89 10                	mov    DWORD PTR [eax],edx
c001c930:	90                   	nop
c001c931:	83 c4 0c             	add    esp,0xc
c001c934:	c3                   	ret    
c001c935:	90                   	nop

c001c936 <SoundCard::beginPlayback()>:
c001c936:	c7 44 24 04 28 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026028
c001c93e:	e9 1c 7f ff ff       	jmp    c001485f <Krnl::panic(char const*)>
c001c943:	90                   	nop

c001c944 <SoundCard::stopPlayback()>:
c001c944:	c7 44 24 04 5c 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc002605c
c001c94c:	e9 0e 7f ff ff       	jmp    c001485f <Krnl::panic(char const*)>
c001c951:	90                   	nop

c001c952 <SoundCard::SoundCard(char const*)>:
c001c952:	83 ec 1c             	sub    esp,0x1c
c001c955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c959:	83 ec 08             	sub    esp,0x8
c001c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c960:	50                   	push   eax
c001c961:	e8 d8 19 ff ff       	call   c000e33e <Device::Device(char const*)>
c001c966:	83 c4 10             	add    esp,0x10
c001c969:	ba f4 60 02 c0       	mov    edx,0xc00260f4
c001c96e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c972:	89 10                	mov    DWORD PTR [eax],edx
c001c974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c978:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c97f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c983:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c98d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c991:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c99b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c99f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c9a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9ad:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c9b7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c9bf:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c9c4:	7f 19                	jg     c001c9df <SoundCard::SoundCard(char const*)+0x8d>
c001c9c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9ce:	83 c2 54             	add    edx,0x54
c001c9d1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c9d9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c9dd:	eb e0                	jmp    c001c9bf <SoundCard::SoundCard(char const*)+0x6d>
c001c9df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9e3:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c9ea:	90                   	nop
c001c9eb:	83 c4 1c             	add    esp,0x1c
c001c9ee:	c3                   	ret    
c001c9ef:	90                   	nop

c001c9f0 <SoundCard::~SoundCard()>:
c001c9f0:	83 ec 0c             	sub    esp,0xc
c001c9f3:	ba f4 60 02 c0       	mov    edx,0xc00260f4
c001c9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9fc:	89 10                	mov    DWORD PTR [eax],edx
c001c9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca02:	83 ec 0c             	sub    esp,0xc
c001ca05:	50                   	push   eax
c001ca06:	e8 fd 15 ff ff       	call   c000e008 <Device::~Device()>
c001ca0b:	83 c4 10             	add    esp,0x10
c001ca0e:	90                   	nop
c001ca0f:	83 c4 0c             	add    esp,0xc
c001ca12:	c3                   	ret    
c001ca13:	90                   	nop

c001ca14 <SoundCard::~SoundCard()>:
c001ca14:	83 ec 0c             	sub    esp,0xc
c001ca17:	83 ec 0c             	sub    esp,0xc
c001ca1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca1e:	e8 cd ff ff ff       	call   c001c9f0 <SoundCard::~SoundCard()>
c001ca23:	83 c4 10             	add    esp,0x10
c001ca26:	83 ec 08             	sub    esp,0x8
c001ca29:	68 e8 01 00 00       	push   0x1e8
c001ca2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca32:	e8 9b 01 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c001ca37:	83 c4 10             	add    esp,0x10
c001ca3a:	83 c4 0c             	add    esp,0xc
c001ca3d:	c3                   	ret    

c001ca3e <SoundCard::configureRates(int, int, int)>:
c001ca3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca42:	31 c0                	xor    eax,eax
c001ca44:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ca4b:	75 20                	jne    c001ca6d <SoundCard::configureRates(int, int, int)+0x2f>
c001ca4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca51:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ca57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca5b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ca61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca65:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ca6b:	b0 01                	mov    al,0x1
c001ca6d:	c3                   	ret    

c001ca6e <SoundCard::getSamples16(int, short*)>:
c001ca6e:	55                   	push   ebp
c001ca6f:	57                   	push   edi
c001ca70:	31 ff                	xor    edi,edi
c001ca72:	56                   	push   esi
c001ca73:	53                   	push   ebx
c001ca74:	31 db                	xor    ebx,ebx
c001ca76:	83 ec 18             	sub    esp,0x18
c001ca79:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca7d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ca81:	68 8f 60 02 c0       	push   0xc002608f
c001ca86:	e8 28 02 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001ca8b:	83 c4 0c             	add    esp,0xc
c001ca8e:	8d 04 36             	lea    eax,[esi+esi*1]
c001ca91:	50                   	push   eax
c001ca92:	6a 00                	push   0x0
c001ca94:	55                   	push   ebp
c001ca95:	e8 ea 3b fe ff       	call   c0000684 <memset>
c001ca9a:	83 c4 10             	add    esp,0x10
c001ca9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caa1:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001caa8:	85 c0                	test   eax,eax
c001caaa:	74 1b                	je     c001cac7 <SoundCard::getSamples16(int, short*)+0x59>
c001caac:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cab0:	75 15                	jne    c001cac7 <SoundCard::getSamples16(int, short*)+0x59>
c001cab2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cab6:	55                   	push   ebp
c001cab7:	56                   	push   esi
c001cab8:	50                   	push   eax
c001cab9:	e8 5a 03 00 00       	call   c001ce18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cabe:	83 c4 10             	add    esp,0x10
c001cac1:	39 c7                	cmp    edi,eax
c001cac3:	7d 02                	jge    c001cac7 <SoundCard::getSamples16(int, short*)+0x59>
c001cac5:	89 c7                	mov    edi,eax
c001cac7:	43                   	inc    ebx
c001cac8:	83 fb 20             	cmp    ebx,0x20
c001cacb:	75 d0                	jne    c001ca9d <SoundCard::getSamples16(int, short*)+0x2f>
c001cacd:	83 c4 0c             	add    esp,0xc
c001cad0:	89 f8                	mov    eax,edi
c001cad2:	5b                   	pop    ebx
c001cad3:	5e                   	pop    esi
c001cad4:	5f                   	pop    edi
c001cad5:	5d                   	pop    ebp
c001cad6:	c3                   	ret    
c001cad7:	90                   	nop

c001cad8 <SoundCard::getSamples32(int, int*)>:
c001cad8:	55                   	push   ebp
c001cad9:	57                   	push   edi
c001cada:	31 ff                	xor    edi,edi
c001cadc:	56                   	push   esi
c001cadd:	31 f6                	xor    esi,esi
c001cadf:	53                   	push   ebx
c001cae0:	83 ec 10             	sub    esp,0x10
c001cae3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cae7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001caeb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001caef:	c1 e0 02             	shl    eax,0x2
c001caf2:	50                   	push   eax
c001caf3:	6a 00                	push   0x0
c001caf5:	55                   	push   ebp
c001caf6:	e8 89 3b fe ff       	call   c0000684 <memset>
c001cafb:	83 c4 10             	add    esp,0x10
c001cafe:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001cb05:	85 c0                	test   eax,eax
c001cb07:	74 1b                	je     c001cb24 <SoundCard::getSamples32(int, int*)+0x4c>
c001cb09:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cb0d:	75 15                	jne    c001cb24 <SoundCard::getSamples32(int, int*)+0x4c>
c001cb0f:	53                   	push   ebx
c001cb10:	55                   	push   ebp
c001cb11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb15:	50                   	push   eax
c001cb16:	e8 f9 03 00 00       	call   c001cf14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001cb1b:	83 c4 10             	add    esp,0x10
c001cb1e:	39 c6                	cmp    esi,eax
c001cb20:	7d 02                	jge    c001cb24 <SoundCard::getSamples32(int, int*)+0x4c>
c001cb22:	89 c6                	mov    esi,eax
c001cb24:	47                   	inc    edi
c001cb25:	83 ff 20             	cmp    edi,0x20
c001cb28:	75 d4                	jne    c001cafe <SoundCard::getSamples32(int, int*)+0x26>
c001cb2a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001cb30:	85 f6                	test   esi,esi
c001cb32:	75 0f                	jne    c001cb43 <SoundCard::getSamples32(int, int*)+0x6b>
c001cb34:	84 c0                	test   al,al
c001cb36:	74 1b                	je     c001cb53 <SoundCard::getSamples32(int, int*)+0x7b>
c001cb38:	83 ec 0c             	sub    esp,0xc
c001cb3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb3d:	53                   	push   ebx
c001cb3e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cb41:	eb 0d                	jmp    c001cb50 <SoundCard::getSamples32(int, int*)+0x78>
c001cb43:	84 c0                	test   al,al
c001cb45:	75 0c                	jne    c001cb53 <SoundCard::getSamples32(int, int*)+0x7b>
c001cb47:	83 ec 0c             	sub    esp,0xc
c001cb4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb4c:	53                   	push   ebx
c001cb4d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cb50:	83 c4 10             	add    esp,0x10
c001cb53:	83 c4 0c             	add    esp,0xc
c001cb56:	89 f0                	mov    eax,esi
c001cb58:	5b                   	pop    ebx
c001cb59:	5e                   	pop    esi
c001cb5a:	5f                   	pop    edi
c001cb5b:	5d                   	pop    ebp
c001cb5c:	c3                   	ret    
c001cb5d:	90                   	nop

c001cb5e <SoundCard::addChannel(SoundPort*)>:
c001cb5e:	56                   	push   esi
c001cb5f:	53                   	push   ebx
c001cb60:	53                   	push   ebx
c001cb61:	31 db                	xor    ebx,ebx
c001cb63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb67:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001cb6f:	74 27                	je     c001cb98 <SoundCard::addChannel(SoundPort*)+0x3a>
c001cb71:	43                   	inc    ebx
c001cb72:	83 fb 20             	cmp    ebx,0x20
c001cb75:	75 f0                	jne    c001cb67 <SoundCard::addChannel(SoundPort*)+0x9>
c001cb77:	83 ec 0c             	sub    esp,0xc
c001cb7a:	83 cb ff             	or     ebx,0xffffffff
c001cb7d:	68 b5 60 02 c0       	push   0xc00260b5
c001cb82:	e8 2c 01 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001cb87:	c7 04 24 ae 60 02 c0 	mov    DWORD PTR [esp],0xc00260ae
c001cb8e:	e8 cc 7c ff ff       	call   c001485f <Krnl::panic(char const*)>
c001cb93:	83 c4 10             	add    esp,0x10
c001cb96:	eb 1b                	jmp    c001cbb3 <SoundCard::addChannel(SoundPort*)+0x55>
c001cb98:	51                   	push   ecx
c001cb99:	51                   	push   ecx
c001cb9a:	53                   	push   ebx
c001cb9b:	68 cd 60 02 c0       	push   0xc00260cd
c001cba0:	e8 0e 01 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001cba5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cba9:	83 c4 10             	add    esp,0x10
c001cbac:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001cbb3:	89 d8                	mov    eax,ebx
c001cbb5:	5a                   	pop    edx
c001cbb6:	5b                   	pop    ebx
c001cbb7:	5e                   	pop    esi
c001cbb8:	c3                   	ret    
c001cbb9:	90                   	nop

c001cbba <SoundCard::removeChannel(int)>:
c001cbba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbc2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cbcd:	c3                   	ret    
c001cbce:	66 90                	xchg   ax,ax

c001cbd0 <SoundPort::SoundPort(int, int, int, int)>:
c001cbd0:	83 ec 0c             	sub    esp,0xc
c001cbd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cbe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cbee:	89 10                	mov    DWORD PTR [eax],edx
c001cbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cbf8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cbfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc03:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc06:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cc0b:	75 13                	jne    c001cc20 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc11:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc13:	05 a0 0f 00 00       	add    eax,0xfa0
c001cc18:	01 c0                	add    eax,eax
c001cc1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cc1e:	66 90                	xchg   ax,ax
c001cc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc24:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cc28:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cc2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cc3d:	c1 e0 02             	shl    eax,0x2
c001cc40:	83 ec 0c             	sub    esp,0xc
c001cc43:	50                   	push   eax
c001cc44:	e8 7a cd fe ff       	call   c00099c3 <malloc>
c001cc49:	83 c4 10             	add    esp,0x10
c001cc4c:	89 c2                	mov    edx,eax
c001cc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc52:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cc55:	90                   	nop
c001cc56:	83 c4 0c             	add    esp,0xc
c001cc59:	c3                   	ret    
c001cc5a:	66 90                	xchg   ax,ax

c001cc5c <SoundPort::~SoundPort()>:
c001cc5c:	83 ec 0c             	sub    esp,0xc
c001cc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cc66:	85 c0                	test   eax,eax
c001cc68:	74 1e                	je     c001cc88 <SoundPort::~SoundPort()+0x2c>
c001cc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc6e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cc71:	83 ec 0c             	sub    esp,0xc
c001cc74:	50                   	push   eax
c001cc75:	e8 59 cd fe ff       	call   c00099d3 <free>
c001cc7a:	83 c4 10             	add    esp,0x10
c001cc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc81:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cc88:	90                   	nop
c001cc89:	83 c4 0c             	add    esp,0xc
c001cc8c:	c3                   	ret    
c001cc8d:	90                   	nop
c001cc8e:	66 90                	xchg   ax,ax

c001cc90 <SoundPort::unpause()>:
c001cc90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc94:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001cc98:	c3                   	ret    
c001cc99:	90                   	nop
c001cc9a:	66 90                	xchg   ax,ax

c001cc9c <SoundPort::pause()>:
c001cc9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cca0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cca4:	c3                   	ret    
c001cca5:	90                   	nop
c001cca6:	66 90                	xchg   ax,ax

c001cca8 <SoundPort::getBufferUsed()>:
c001cca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ccaf:	c3                   	ret    

c001ccb0 <SoundPort::getBufferSize()>:
c001ccb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccb4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ccb7:	c3                   	ret    

c001ccb8 <SoundPort::buffer16(short*, int)>:
c001ccb8:	55                   	push   ebp
c001ccb9:	57                   	push   edi
c001ccba:	56                   	push   esi
c001ccbb:	53                   	push   ebx
c001ccbc:	83 ec 1c             	sub    esp,0x1c
c001ccbf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccc3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ccc7:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ccca:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cccd:	0f 84 85 00 00 00    	je     c001cd58 <SoundPort::buffer16(short*, int)+0xa0>
c001ccd3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001ccd7:	85 c9                	test   ecx,ecx
c001ccd9:	7e 7d                	jle    c001cd58 <SoundPort::buffer16(short*, int)+0xa0>
c001ccdb:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ccdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cce2:	c1 e1 0f             	shl    ecx,0xf
c001cce5:	8d 70 01             	lea    esi,[eax+0x1]
c001cce8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cceb:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ccee:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ccf1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ccf4:	74 6e                	je     c001cd64 <SoundPort::buffer16(short*, int)+0xac>
c001ccf6:	31 f6                	xor    esi,esi
c001ccf8:	eb 22                	jmp    c001cd1c <SoundPort::buffer16(short*, int)+0x64>
c001ccfa:	66 90                	xchg   ax,ax
c001ccfc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001cd01:	8d 79 01             	lea    edi,[ecx+0x1]
c001cd04:	c1 e3 0f             	shl    ebx,0xf
c001cd07:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001cd0a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001cd0d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001cd10:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cd13:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cd16:	74 1c                	je     c001cd34 <SoundPort::buffer16(short*, int)+0x7c>
c001cd18:	89 c6                	mov    esi,eax
c001cd1a:	66 90                	xchg   ax,ax
c001cd1c:	8d 46 01             	lea    eax,[esi+0x1]
c001cd1f:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001cd23:	75 d7                	jne    c001ccfc <SoundPort::buffer16(short*, int)+0x44>
c001cd25:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cd29:	83 c4 1c             	add    esp,0x1c
c001cd2c:	5b                   	pop    ebx
c001cd2d:	5e                   	pop    esi
c001cd2e:	5f                   	pop    edi
c001cd2f:	5d                   	pop    ebp
c001cd30:	c3                   	ret    
c001cd31:	8d 76 00             	lea    esi,[esi+0x0]
c001cd34:	8d 46 02             	lea    eax,[esi+0x2]
c001cd37:	90                   	nop
c001cd38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd3c:	83 ec 0c             	sub    esp,0xc
c001cd3f:	68 20 61 02 c0       	push   0xc0026120
c001cd44:	e8 6a ff fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001cd49:	83 c4 10             	add    esp,0x10
c001cd4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd50:	83 c4 1c             	add    esp,0x1c
c001cd53:	5b                   	pop    ebx
c001cd54:	5e                   	pop    esi
c001cd55:	5f                   	pop    edi
c001cd56:	5d                   	pop    ebp
c001cd57:	c3                   	ret    
c001cd58:	83 c4 1c             	add    esp,0x1c
c001cd5b:	31 c0                	xor    eax,eax
c001cd5d:	5b                   	pop    ebx
c001cd5e:	5e                   	pop    esi
c001cd5f:	5f                   	pop    edi
c001cd60:	5d                   	pop    ebp
c001cd61:	c3                   	ret    
c001cd62:	66 90                	xchg   ax,ax
c001cd64:	b8 01 00 00 00       	mov    eax,0x1
c001cd69:	eb cd                	jmp    c001cd38 <SoundPort::buffer16(short*, int)+0x80>
c001cd6b:	90                   	nop

c001cd6c <SoundPort::buffer32(int*, int)>:
c001cd6c:	55                   	push   ebp
c001cd6d:	57                   	push   edi
c001cd6e:	56                   	push   esi
c001cd6f:	53                   	push   ebx
c001cd70:	83 ec 1c             	sub    esp,0x1c
c001cd73:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cd7b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cd7e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cd82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd86:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cd89:	74 79                	je     c001ce04 <SoundPort::buffer32(int*, int)+0x98>
c001cd8b:	85 c0                	test   eax,eax
c001cd8d:	7e 75                	jle    c001ce04 <SoundPort::buffer32(int*, int)+0x98>
c001cd8f:	8d 71 01             	lea    esi,[ecx+0x1]
c001cd92:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cd95:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cd98:	8b 37                	mov    esi,DWORD PTR [edi]
c001cd9a:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001cd9d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cda0:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cda3:	74 6b                	je     c001ce10 <SoundPort::buffer32(int*, int)+0xa4>
c001cda5:	31 f6                	xor    esi,esi
c001cda7:	eb 1f                	jmp    c001cdc8 <SoundPort::buffer32(int*, int)+0x5c>
c001cda9:	8d 76 00             	lea    esi,[esi+0x0]
c001cdac:	8d 69 01             	lea    ebp,[ecx+0x1]
c001cdaf:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001cdb2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001cdb5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cdb8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001cdbc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cdbf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cdc2:	74 1c                	je     c001cde0 <SoundPort::buffer32(int*, int)+0x74>
c001cdc4:	89 de                	mov    esi,ebx
c001cdc6:	66 90                	xchg   ax,ax
c001cdc8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001cdcb:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001cdcf:	75 db                	jne    c001cdac <SoundPort::buffer32(int*, int)+0x40>
c001cdd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cdd5:	83 c4 1c             	add    esp,0x1c
c001cdd8:	5b                   	pop    ebx
c001cdd9:	5e                   	pop    esi
c001cdda:	5f                   	pop    edi
c001cddb:	5d                   	pop    ebp
c001cddc:	c3                   	ret    
c001cddd:	8d 76 00             	lea    esi,[esi+0x0]
c001cde0:	8d 46 02             	lea    eax,[esi+0x2]
c001cde3:	90                   	nop
c001cde4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cde8:	83 ec 0c             	sub    esp,0xc
c001cdeb:	68 3b 61 02 c0       	push   0xc002613b
c001cdf0:	e8 be fe fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001cdf5:	83 c4 10             	add    esp,0x10
c001cdf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cdfc:	83 c4 1c             	add    esp,0x1c
c001cdff:	5b                   	pop    ebx
c001ce00:	5e                   	pop    esi
c001ce01:	5f                   	pop    edi
c001ce02:	5d                   	pop    ebp
c001ce03:	c3                   	ret    
c001ce04:	83 c4 1c             	add    esp,0x1c
c001ce07:	31 c0                	xor    eax,eax
c001ce09:	5b                   	pop    ebx
c001ce0a:	5e                   	pop    esi
c001ce0b:	5f                   	pop    edi
c001ce0c:	5d                   	pop    ebp
c001ce0d:	c3                   	ret    
c001ce0e:	66 90                	xchg   ax,ax
c001ce10:	b8 01 00 00 00       	mov    eax,0x1
c001ce15:	eb cd                	jmp    c001cde4 <SoundPort::buffer32(int*, int)+0x78>
c001ce17:	90                   	nop

c001ce18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ce18:	57                   	push   edi
c001ce19:	56                   	push   esi
c001ce1a:	53                   	push   ebx
c001ce1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce1f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ce23:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001ce29:	39 03                	cmp    DWORD PTR [ebx],eax
c001ce2b:	74 13                	je     c001ce40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001ce2d:	83 ec 0c             	sub    esp,0xc
c001ce30:	68 90 61 02 c0       	push   0xc0026190
c001ce35:	e8 25 7a ff ff       	call   c001485f <Krnl::panic(char const*)>
c001ce3a:	83 c4 10             	add    esp,0x10
c001ce3d:	8d 76 00             	lea    esi,[esi+0x0]
c001ce40:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001ce46:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ce49:	74 11                	je     c001ce5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001ce4b:	83 ec 0c             	sub    esp,0xc
c001ce4e:	68 56 61 02 c0       	push   0xc0026156
c001ce53:	e8 07 7a ff ff       	call   c001485f <Krnl::panic(char const*)>
c001ce58:	83 c4 10             	add    esp,0x10
c001ce5b:	90                   	nop
c001ce5c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001ce62:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ce65:	74 11                	je     c001ce78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001ce67:	83 ec 0c             	sub    esp,0xc
c001ce6a:	68 56 61 02 c0       	push   0xc0026156
c001ce6f:	e8 eb 79 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001ce74:	83 c4 10             	add    esp,0x10
c001ce77:	90                   	nop
c001ce78:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ce7b:	89 c6                	mov    esi,eax
c001ce7d:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001ce81:	7e 05                	jle    c001ce88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ce83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ce87:	90                   	nop
c001ce88:	85 f6                	test   esi,esi
c001ce8a:	7e 30                	jle    c001cebc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ce8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ce90:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ce93:	31 c9                	xor    ecx,ecx
c001ce95:	01 d7                	add    edi,edx
c001ce97:	90                   	nop
c001ce98:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ce9b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ce9e:	85 c0                	test   eax,eax
c001cea0:	79 06                	jns    c001cea8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001cea2:	05 ff 7f 00 00       	add    eax,0x7fff
c001cea7:	90                   	nop
c001cea8:	c1 f8 0f             	sar    eax,0xf
c001ceab:	83 c1 04             	add    ecx,0x4
c001ceae:	66 01 02             	add    WORD PTR [edx],ax
c001ceb1:	83 c2 02             	add    edx,0x2
c001ceb4:	39 d7                	cmp    edi,edx
c001ceb6:	75 e0                	jne    c001ce98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ceb8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cebb:	90                   	nop
c001cebc:	56                   	push   esi
c001cebd:	89 c2                	mov    edx,eax
c001cebf:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001cec6:	29 f2                	sub    edx,esi
c001cec8:	52                   	push   edx
c001cec9:	50                   	push   eax
c001ceca:	68 b0 61 02 c0       	push   0xc00261b0
c001cecf:	e8 df fd fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001ced4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ced7:	50                   	push   eax
c001ced8:	01 f8                	add    eax,edi
c001ceda:	50                   	push   eax
c001cedb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cede:	29 f0                	sub    eax,esi
c001cee0:	c1 e0 02             	shl    eax,0x2
c001cee3:	50                   	push   eax
c001cee4:	68 e0 61 02 c0       	push   0xc00261e0
c001cee9:	e8 c5 fd fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001ceee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001cef1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cef4:	83 c4 1c             	add    esp,0x1c
c001cef7:	01 d7                	add    edi,edx
c001cef9:	29 f0                	sub    eax,esi
c001cefb:	c1 e0 02             	shl    eax,0x2
c001cefe:	50                   	push   eax
c001ceff:	57                   	push   edi
c001cf00:	52                   	push   edx
c001cf01:	e8 b6 36 fe ff       	call   c00005bc <memmove>
c001cf06:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001cf09:	83 c4 10             	add    esp,0x10
c001cf0c:	89 f0                	mov    eax,esi
c001cf0e:	5b                   	pop    ebx
c001cf0f:	5e                   	pop    esi
c001cf10:	5f                   	pop    edi
c001cf11:	c3                   	ret    
c001cf12:	66 90                	xchg   ax,ax

c001cf14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001cf14:	57                   	push   edi
c001cf15:	56                   	push   esi
c001cf16:	53                   	push   ebx
c001cf17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf1b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cf1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cf23:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001cf29:	39 06                	cmp    DWORD PTR [esi],eax
c001cf2b:	74 13                	je     c001cf40 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001cf2d:	83 ec 0c             	sub    esp,0xc
c001cf30:	68 04 62 02 c0       	push   0xc0026204
c001cf35:	e8 25 79 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001cf3a:	83 c4 10             	add    esp,0x10
c001cf3d:	8d 76 00             	lea    esi,[esi+0x0]
c001cf40:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001cf46:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001cf49:	74 11                	je     c001cf5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001cf4b:	83 ec 0c             	sub    esp,0xc
c001cf4e:	68 72 61 02 c0       	push   0xc0026172
c001cf53:	e8 07 79 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001cf58:	83 c4 10             	add    esp,0x10
c001cf5b:	90                   	nop
c001cf5c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001cf62:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001cf65:	74 11                	je     c001cf78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001cf67:	83 ec 0c             	sub    esp,0xc
c001cf6a:	68 72 61 02 c0       	push   0xc0026172
c001cf6f:	e8 eb 78 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001cf74:	83 c4 10             	add    esp,0x10
c001cf77:	90                   	nop
c001cf78:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001cf7b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001cf7f:	7e 07                	jle    c001cf88 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001cf81:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cf85:	8d 76 00             	lea    esi,[esi+0x0]
c001cf88:	85 ff                	test   edi,edi
c001cf8a:	7e 1c                	jle    c001cfa8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cf8c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cf93:	31 c0                	xor    eax,eax
c001cf95:	8d 76 00             	lea    esi,[esi+0x0]
c001cf98:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cf9b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cf9e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cfa1:	83 c0 04             	add    eax,0x4
c001cfa4:	39 c1                	cmp    ecx,eax
c001cfa6:	75 f0                	jne    c001cf98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cfa8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cfab:	50                   	push   eax
c001cfac:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cfaf:	29 f8                	sub    eax,edi
c001cfb1:	c1 e0 02             	shl    eax,0x2
c001cfb4:	50                   	push   eax
c001cfb5:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cfb8:	50                   	push   eax
c001cfb9:	52                   	push   edx
c001cfba:	e8 fd 35 fe ff       	call   c00005bc <memmove>
c001cfbf:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001cfc2:	83 c4 10             	add    esp,0x10
c001cfc5:	89 f8                	mov    eax,edi
c001cfc7:	5b                   	pop    ebx
c001cfc8:	5e                   	pop    esi
c001cfc9:	5f                   	pop    edi
c001cfca:	c3                   	ret    
c001cfcb:	90                   	nop

c001cfcc <PCI::open(int, int, void*)>:
c001cfcc:	83 ec 18             	sub    esp,0x18
c001cfcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cfd3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cfd7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cfdd:	8b 10                	mov    edx,DWORD PTR [eax]
c001cfdf:	50                   	push   eax
c001cfe0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cfe3:	31 c0                	xor    eax,eax
c001cfe5:	83 c4 1c             	add    esp,0x1c
c001cfe8:	c3                   	ret    
c001cfe9:	90                   	nop

c001cfea <PCI::close(int, int, void*)>:
c001cfea:	31 c0                	xor    eax,eax
c001cfec:	c3                   	ret    
c001cfed:	90                   	nop

c001cfee <PCI::PCI()>:
c001cfee:	83 ec 0c             	sub    esp,0xc
c001cff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff5:	83 ec 08             	sub    esp,0x8
c001cff8:	68 23 62 02 c0       	push   0xc0026223
c001cffd:	50                   	push   eax
c001cffe:	e8 9d 09 ff ff       	call   c000d9a0 <Bus::Bus(char const*)>
c001d003:	83 c4 10             	add    esp,0x10
c001d006:	ba f8 63 02 c0       	mov    edx,0xc00263f8
c001d00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d00f:	89 10                	mov    DWORD PTR [eax],edx
c001d011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d015:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d023:	a3 e0 99 02 c0       	mov    ds:0xc00299e0,eax
c001d028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d02c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d032:	0f b6 d0             	movzx  edx,al
c001d035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d039:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d044:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d04a:	0f b6 d0             	movzx  edx,al
c001d04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d051:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d05a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d060:	8d 50 01             	lea    edx,[eax+0x1]
c001d063:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d067:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d06d:	0f b6 d0             	movzx  edx,al
c001d070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d074:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d078:	83 c9 c0             	or     ecx,0xffffffc0
c001d07b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d07f:	90                   	nop
c001d080:	83 c4 0c             	add    esp,0xc
c001d083:	c3                   	ret    

c001d084 <PCI::readBAR8(unsigned int, int)>:
c001d084:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d08c:	f6 c2 01             	test   dl,0x1
c001d08f:	74 07                	je     c001d098 <PCI::readBAR8(unsigned int, int)+0x14>
c001d091:	83 e2 fc             	and    edx,0xfffffffc
c001d094:	01 c2                	add    edx,eax
c001d096:	ec                   	in     al,dx
c001d097:	c3                   	ret    
c001d098:	83 e2 f0             	and    edx,0xfffffff0
c001d09b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d09e:	c3                   	ret    
c001d09f:	90                   	nop

c001d0a0 <PCI::readBAR16(unsigned int, int)>:
c001d0a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0a8:	f6 c2 01             	test   dl,0x1
c001d0ab:	74 08                	je     c001d0b5 <PCI::readBAR16(unsigned int, int)+0x15>
c001d0ad:	83 e2 fc             	and    edx,0xfffffffc
c001d0b0:	01 c2                	add    edx,eax
c001d0b2:	66 ed                	in     ax,dx
c001d0b4:	c3                   	ret    
c001d0b5:	83 e2 f0             	and    edx,0xfffffff0
c001d0b8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d0bc:	c3                   	ret    
c001d0bd:	90                   	nop

c001d0be <PCI::readBAR32(unsigned int, int)>:
c001d0be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0c6:	f6 c2 01             	test   dl,0x1
c001d0c9:	74 07                	je     c001d0d2 <PCI::readBAR32(unsigned int, int)+0x14>
c001d0cb:	83 e2 fc             	and    edx,0xfffffffc
c001d0ce:	01 c2                	add    edx,eax
c001d0d0:	ed                   	in     eax,dx
c001d0d1:	c3                   	ret    
c001d0d2:	83 e2 f0             	and    edx,0xfffffff0
c001d0d5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d0d8:	c3                   	ret    
c001d0d9:	90                   	nop

c001d0da <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d0da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0e6:	f6 c2 01             	test   dl,0x1
c001d0e9:	74 07                	je     c001d0f2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d0eb:	83 e2 fc             	and    edx,0xfffffffc
c001d0ee:	01 ca                	add    edx,ecx
c001d0f0:	ee                   	out    dx,al
c001d0f1:	c3                   	ret    
c001d0f2:	83 e2 f0             	and    edx,0xfffffff0
c001d0f5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d0f8:	c3                   	ret    
c001d0f9:	90                   	nop

c001d0fa <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d0fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d102:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d106:	f6 c2 01             	test   dl,0x1
c001d109:	74 08                	je     c001d113 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d10b:	83 e2 fc             	and    edx,0xfffffffc
c001d10e:	01 ca                	add    edx,ecx
c001d110:	66 ef                	out    dx,ax
c001d112:	c3                   	ret    
c001d113:	83 e2 f0             	and    edx,0xfffffff0
c001d116:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d11a:	c3                   	ret    
c001d11b:	90                   	nop

c001d11c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d11c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d124:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d128:	f6 c2 01             	test   dl,0x1
c001d12b:	74 07                	je     c001d134 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d12d:	83 e2 fc             	and    edx,0xfffffffc
c001d130:	01 ca                	add    edx,ecx
c001d132:	ef                   	out    dx,eax
c001d133:	c3                   	ret    
c001d134:	83 e2 f0             	and    edx,0xfffffff0
c001d137:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d13a:	c3                   	ret    
c001d13b:	90                   	nop

c001d13c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d13c:	55                   	push   ebp
c001d13d:	57                   	push   edi
c001d13e:	56                   	push   esi
c001d13f:	53                   	push   ebx
c001d140:	83 ec 0c             	sub    esp,0xc
c001d143:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d147:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d14b:	89 f0                	mov    eax,esi
c001d14d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d151:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d155:	3c 07                	cmp    al,0x7
c001d157:	76 10                	jbe    c001d169 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d159:	83 ec 0c             	sub    esp,0xc
c001d15c:	68 2b 62 02 c0       	push   0xc002622b
c001d161:	e8 f9 76 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001d166:	83 c4 10             	add    esp,0x10
c001d169:	80 fb 0f             	cmp    bl,0xf
c001d16c:	76 10                	jbe    c001d17e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d16e:	83 ec 0c             	sub    esp,0xc
c001d171:	68 5b 62 02 c0       	push   0xc002625b
c001d176:	e8 e4 76 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001d17b:	83 c4 10             	add    esp,0x10
c001d17e:	8d 04 36             	lea    eax,[esi+esi*1]
c001d181:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d186:	83 c8 f0             	or     eax,0xfffffff0
c001d189:	ee                   	out    dx,al
c001d18a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d18f:	89 e8                	mov    eax,ebp
c001d191:	ee                   	out    dx,al
c001d192:	83 c4 0c             	add    esp,0xc
c001d195:	89 d8                	mov    eax,ebx
c001d197:	66 81 e7 fc 00       	and    di,0xfc
c001d19c:	5b                   	pop    ebx
c001d19d:	c1 e0 08             	shl    eax,0x8
c001d1a0:	5e                   	pop    esi
c001d1a1:	09 f8                	or     eax,edi
c001d1a3:	5f                   	pop    edi
c001d1a4:	66 0d 00 c0          	or     ax,0xc000
c001d1a8:	5d                   	pop    ebp
c001d1a9:	c3                   	ret    

c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d1aa:	57                   	push   edi
c001d1ab:	56                   	push   esi
c001d1ac:	53                   	push   ebx
c001d1ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1b5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d1bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d1bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d1c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d1c7:	83 ff 01             	cmp    edi,0x1
c001d1ca:	75 3e                	jne    c001d20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d1cc:	89 de                	mov    esi,ebx
c001d1ce:	0f b6 c0             	movzx  eax,al
c001d1d1:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d1d7:	c1 e0 10             	shl    eax,0x10
c001d1da:	0f b6 c9             	movzx  ecx,cl
c001d1dd:	09 f0                	or     eax,esi
c001d1df:	c1 e1 08             	shl    ecx,0x8
c001d1e2:	0f b6 d2             	movzx  edx,dl
c001d1e5:	09 c8                	or     eax,ecx
c001d1e7:	c1 e2 0b             	shl    edx,0xb
c001d1ea:	09 d0                	or     eax,edx
c001d1ec:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d1f1:	0d 00 00 00 80       	or     eax,0x80000000
c001d1f6:	ef                   	out    dx,eax
c001d1f7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d1fc:	ed                   	in     eax,dx
c001d1fd:	83 e3 02             	and    ebx,0x2
c001d200:	0f b6 cb             	movzx  ecx,bl
c001d203:	c1 e1 03             	shl    ecx,0x3
c001d206:	d3 e8                	shr    eax,cl
c001d208:	eb 43                	jmp    c001d24d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d20a:	83 ff 02             	cmp    edi,0x2
c001d20d:	75 2c                	jne    c001d23b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d20f:	83 ec 0c             	sub    esp,0xc
c001d212:	0f b6 c9             	movzx  ecx,cl
c001d215:	0f b6 d2             	movzx  edx,dl
c001d218:	0f b6 fb             	movzx  edi,bl
c001d21b:	0f b6 c0             	movzx  eax,al
c001d21e:	57                   	push   edi
c001d21f:	51                   	push   ecx
c001d220:	52                   	push   edx
c001d221:	50                   	push   eax
c001d222:	56                   	push   esi
c001d223:	e8 14 ff ff ff       	call   c001d13c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d228:	89 c2                	mov    edx,eax
c001d22a:	ed                   	in     eax,dx
c001d22b:	83 e3 02             	and    ebx,0x2
c001d22e:	83 c4 20             	add    esp,0x20
c001d231:	0f b6 cb             	movzx  ecx,bl
c001d234:	c1 e1 03             	shl    ecx,0x3
c001d237:	d3 e8                	shr    eax,cl
c001d239:	eb 12                	jmp    c001d24d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d23b:	83 ec 0c             	sub    esp,0xc
c001d23e:	68 8b 62 02 c0       	push   0xc002628b
c001d243:	e8 17 76 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001d248:	83 c4 10             	add    esp,0x10
c001d24b:	31 c0                	xor    eax,eax
c001d24d:	5b                   	pop    ebx
c001d24e:	5e                   	pop    esi
c001d24f:	5f                   	pop    edi
c001d250:	c3                   	ret    
c001d251:	90                   	nop

c001d252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d252:	83 ec 18             	sub    esp,0x18
c001d255:	6a 00                	push   0x0
c001d257:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d25c:	50                   	push   eax
c001d25d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d262:	50                   	push   eax
c001d263:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d268:	50                   	push   eax
c001d269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d26d:	e8 38 ff ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d272:	83 c4 2c             	add    esp,0x2c
c001d275:	c3                   	ret    

c001d276 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d276:	83 ec 18             	sub    esp,0x18
c001d279:	6a 0e                	push   0xe
c001d27b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d280:	50                   	push   eax
c001d281:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d286:	50                   	push   eax
c001d287:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d28c:	50                   	push   eax
c001d28d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d291:	e8 14 ff ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d296:	83 c4 2c             	add    esp,0x2c
c001d299:	0f b6 c0             	movzx  eax,al
c001d29c:	c3                   	ret    
c001d29d:	90                   	nop

c001d29e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d29e:	55                   	push   ebp
c001d29f:	57                   	push   edi
c001d2a0:	56                   	push   esi
c001d2a1:	53                   	push   ebx
c001d2a2:	83 ec 18             	sub    esp,0x18
c001d2a5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d2aa:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d2af:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d2b4:	6a 0a                	push   0xa
c001d2b6:	56                   	push   esi
c001d2b7:	55                   	push   ebp
c001d2b8:	57                   	push   edi
c001d2b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2bd:	e8 e8 fe ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2c2:	83 c4 14             	add    esp,0x14
c001d2c5:	89 c3                	mov    ebx,eax
c001d2c7:	6a 0a                	push   0xa
c001d2c9:	0f b6 db             	movzx  ebx,bl
c001d2cc:	56                   	push   esi
c001d2cd:	55                   	push   ebp
c001d2ce:	57                   	push   edi
c001d2cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2d3:	e8 d2 fe ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2d8:	83 c4 2c             	add    esp,0x2c
c001d2db:	25 00 ff 00 00       	and    eax,0xff00
c001d2e0:	09 d8                	or     eax,ebx
c001d2e2:	5b                   	pop    ebx
c001d2e3:	5e                   	pop    esi
c001d2e4:	5f                   	pop    edi
c001d2e5:	5d                   	pop    ebp
c001d2e6:	c3                   	ret    
c001d2e7:	90                   	nop

c001d2e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d2e8:	83 ec 18             	sub    esp,0x18
c001d2eb:	6a 08                	push   0x8
c001d2ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2f2:	50                   	push   eax
c001d2f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2f8:	50                   	push   eax
c001d2f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2fe:	50                   	push   eax
c001d2ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d303:	e8 a2 fe ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d308:	83 c4 2c             	add    esp,0x2c
c001d30b:	0f b6 c4             	movzx  eax,ah
c001d30e:	c3                   	ret    
c001d30f:	90                   	nop

c001d310 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d310:	83 ec 18             	sub    esp,0x18
c001d313:	6a 08                	push   0x8
c001d315:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d31a:	50                   	push   eax
c001d31b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d320:	50                   	push   eax
c001d321:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d326:	50                   	push   eax
c001d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d32b:	e8 7a fe ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d330:	83 c4 2c             	add    esp,0x2c
c001d333:	c3                   	ret    

c001d334 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d334:	83 ec 18             	sub    esp,0x18
c001d337:	6a 3c                	push   0x3c
c001d339:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d33e:	50                   	push   eax
c001d33f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d344:	50                   	push   eax
c001d345:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d34a:	50                   	push   eax
c001d34b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d34f:	e8 56 fe ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d354:	83 c4 2c             	add    esp,0x2c
c001d357:	c3                   	ret    

c001d358 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d358:	83 ec 18             	sub    esp,0x18
c001d35b:	6a 18                	push   0x18
c001d35d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d362:	50                   	push   eax
c001d363:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d368:	50                   	push   eax
c001d369:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d36e:	50                   	push   eax
c001d36f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d373:	e8 32 fe ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d378:	83 c4 2c             	add    esp,0x2c
c001d37b:	0f b6 c4             	movzx  eax,ah
c001d37e:	c3                   	ret    
c001d37f:	90                   	nop

c001d380 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d380:	55                   	push   ebp
c001d381:	57                   	push   edi
c001d382:	56                   	push   esi
c001d383:	53                   	push   ebx
c001d384:	83 ec 28             	sub    esp,0x28
c001d387:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d38b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d390:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d395:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d39a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d3a1:	8d 43 12             	lea    eax,[ebx+0x12]
c001d3a4:	83 c3 10             	add    ebx,0x10
c001d3a7:	0f b6 c0             	movzx  eax,al
c001d3aa:	0f b6 db             	movzx  ebx,bl
c001d3ad:	50                   	push   eax
c001d3ae:	51                   	push   ecx
c001d3af:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d3b3:	57                   	push   edi
c001d3b4:	55                   	push   ebp
c001d3b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3b9:	e8 ec fd ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3be:	83 c4 14             	add    esp,0x14
c001d3c1:	89 c6                	mov    esi,eax
c001d3c3:	53                   	push   ebx
c001d3c4:	c1 e6 10             	shl    esi,0x10
c001d3c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d3cb:	51                   	push   ecx
c001d3cc:	57                   	push   edi
c001d3cd:	55                   	push   ebp
c001d3ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3d2:	e8 d3 fd ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3d7:	83 c4 3c             	add    esp,0x3c
c001d3da:	0f b7 c0             	movzx  eax,ax
c001d3dd:	5b                   	pop    ebx
c001d3de:	09 f0                	or     eax,esi
c001d3e0:	5e                   	pop    esi
c001d3e1:	5f                   	pop    edi
c001d3e2:	5d                   	pop    ebp
c001d3e3:	c3                   	ret    

c001d3e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d3e4:	55                   	push   ebp
c001d3e5:	57                   	push   edi
c001d3e6:	56                   	push   esi
c001d3e7:	53                   	push   ebx
c001d3e8:	83 ec 0c             	sub    esp,0xc
c001d3eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3ef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d3f3:	89 f5                	mov    ebp,esi
c001d3f5:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d403:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d407:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d40b:	83 f9 01             	cmp    ecx,0x1
c001d40e:	75 5d                	jne    c001d46d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d410:	0f b6 c8             	movzx  ecx,al
c001d413:	0f b6 d2             	movzx  edx,dl
c001d416:	c1 e1 10             	shl    ecx,0x10
c001d419:	c1 e2 0b             	shl    edx,0xb
c001d41c:	89 f0                	mov    eax,esi
c001d41e:	25 fc 00 00 00       	and    eax,0xfc
c001d423:	09 c1                	or     ecx,eax
c001d425:	89 e8                	mov    eax,ebp
c001d427:	0f b6 c0             	movzx  eax,al
c001d42a:	c1 e0 08             	shl    eax,0x8
c001d42d:	09 c1                	or     ecx,eax
c001d42f:	09 d1                	or     ecx,edx
c001d431:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d436:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d43c:	89 c8                	mov    eax,ecx
c001d43e:	ef                   	out    dx,eax
c001d43f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d444:	ed                   	in     eax,dx
c001d445:	0f b7 db             	movzx  ebx,bx
c001d448:	83 e6 02             	and    esi,0x2
c001d44b:	74 0a                	je     c001d457 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d44d:	0f b7 d0             	movzx  edx,ax
c001d450:	c1 e3 10             	shl    ebx,0x10
c001d453:	09 d3                	or     ebx,edx
c001d455:	eb 05                	jmp    c001d45c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d457:	66 31 c0             	xor    ax,ax
c001d45a:	09 c3                	or     ebx,eax
c001d45c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d461:	89 c8                	mov    eax,ecx
c001d463:	ef                   	out    dx,eax
c001d464:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d469:	89 d8                	mov    eax,ebx
c001d46b:	eb 41                	jmp    c001d4ae <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d46d:	83 f9 02             	cmp    ecx,0x2
c001d470:	75 45                	jne    c001d4b7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d472:	83 ec 0c             	sub    esp,0xc
c001d475:	0f b6 d2             	movzx  edx,dl
c001d478:	89 f1                	mov    ecx,esi
c001d47a:	0f b6 c0             	movzx  eax,al
c001d47d:	0f b6 f1             	movzx  esi,cl
c001d480:	89 e9                	mov    ecx,ebp
c001d482:	56                   	push   esi
c001d483:	0f b6 c9             	movzx  ecx,cl
c001d486:	51                   	push   ecx
c001d487:	52                   	push   edx
c001d488:	50                   	push   eax
c001d489:	57                   	push   edi
c001d48a:	e8 ad fc ff ff       	call   c001d13c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d48f:	89 c2                	mov    edx,eax
c001d491:	ed                   	in     eax,dx
c001d492:	83 c4 20             	add    esp,0x20
c001d495:	0f b7 db             	movzx  ebx,bx
c001d498:	f6 c2 02             	test   dl,0x2
c001d49b:	74 0c                	je     c001d4a9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d49d:	0f b7 c8             	movzx  ecx,ax
c001d4a0:	89 d8                	mov    eax,ebx
c001d4a2:	c1 e0 10             	shl    eax,0x10
c001d4a5:	09 c8                	or     eax,ecx
c001d4a7:	eb 05                	jmp    c001d4ae <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d4a9:	66 31 c0             	xor    ax,ax
c001d4ac:	09 d8                	or     eax,ebx
c001d4ae:	ef                   	out    dx,eax
c001d4af:	83 c4 0c             	add    esp,0xc
c001d4b2:	5b                   	pop    ebx
c001d4b3:	5e                   	pop    esi
c001d4b4:	5f                   	pop    edi
c001d4b5:	5d                   	pop    ebp
c001d4b6:	c3                   	ret    
c001d4b7:	c7 44 24 20 8b 62 02 c0 	mov    DWORD PTR [esp+0x20],0xc002628b
c001d4bf:	83 c4 0c             	add    esp,0xc
c001d4c2:	5b                   	pop    ebx
c001d4c3:	5e                   	pop    esi
c001d4c4:	5f                   	pop    edi
c001d4c5:	5d                   	pop    ebp
c001d4c6:	e9 94 73 ff ff       	jmp    c001485f <Krnl::panic(char const*)>
c001d4cb:	90                   	nop

c001d4cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d4cc:	55                   	push   ebp
c001d4cd:	57                   	push   edi
c001d4ce:	56                   	push   esi
c001d4cf:	53                   	push   ebx
c001d4d0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d4d6:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001d4dd:	75 0f                	jne    c001d4ee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d4df:	80 3d ec 99 02 c0 00 	cmp    BYTE PTR ds:0xc00299ec,0x0
c001d4e6:	0f 85 fa 00 00 00    	jne    c001d5e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d4ec:	eb 2f                	jmp    c001d51d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d4ee:	83 ec 0c             	sub    esp,0xc
c001d4f1:	68 91 62 02 c0       	push   0xc0026291
c001d4f6:	e8 22 c5 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d4fb:	83 c4 10             	add    esp,0x10
c001d4fe:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001d505:	75 d8                	jne    c001d4df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d507:	e4 60                	in     al,0x60
c001d509:	3c 1c                	cmp    al,0x1c
c001d50b:	74 04                	je     c001d511 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d50d:	3c 5a                	cmp    al,0x5a
c001d50f:	75 f6                	jne    c001d507 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d511:	e4 60                	in     al,0x60
c001d513:	3c 5a                	cmp    al,0x5a
c001d515:	74 fa                	je     c001d511 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d517:	3c 1c                	cmp    al,0x1c
c001d519:	74 f6                	je     c001d511 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d51b:	eb c2                	jmp    c001d4df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d51d:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001d524:	0f 85 86 00 00 00    	jne    c001d5b0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d52a:	83 ec 0c             	sub    esp,0xc
c001d52d:	68 14 01 00 00       	push   0x114
c001d532:	e8 8c c4 fe ff       	call   c00099c3 <malloc>
c001d537:	83 c4 0c             	add    esp,0xc
c001d53a:	89 c3                	mov    ebx,eax
c001d53c:	ff 35 f0 8f 02 c0    	push   DWORD PTR ds:0xc0028ff0
c001d542:	68 ab 62 02 c0       	push   0xc00262ab
c001d547:	50                   	push   eax
c001d548:	e8 d1 fc fe ff       	call   c000d21e <File::File(char const*, Process*)>
c001d54d:	5a                   	pop    edx
c001d54e:	59                   	pop    ecx
c001d54f:	6a 01                	push   0x1
c001d551:	53                   	push   ebx
c001d552:	e8 69 fd fe ff       	call   c000d2c0 <File::open(FileOpenMode)>
c001d557:	83 c4 0c             	add    esp,0xc
c001d55a:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d55e:	50                   	push   eax
c001d55f:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d563:	50                   	push   eax
c001d564:	53                   	push   ebx
c001d565:	e8 02 00 ff ff       	call   c000d56c <File::stat(unsigned long long*, bool*)>
c001d56a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d56e:	40                   	inc    eax
c001d56f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d572:	e8 4c c4 fe ff       	call   c00099c3 <malloc>
c001d577:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d57b:	a3 e8 99 02 c0       	mov    ds:0xc00299e8,eax
c001d580:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d584:	5e                   	pop    esi
c001d585:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d587:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d58b:	51                   	push   ecx
c001d58c:	50                   	push   eax
c001d58d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d591:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d595:	53                   	push   ebx
c001d596:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d599:	83 c4 14             	add    esp,0x14
c001d59c:	53                   	push   ebx
c001d59d:	e8 7c fd fe ff       	call   c000d31e <File::close()>
c001d5a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5a6:	83 c4 10             	add    esp,0x10
c001d5a9:	a3 e4 99 02 c0       	mov    ds:0xc00299e4,eax
c001d5ae:	eb 36                	jmp    c001d5e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d5b0:	83 ec 0c             	sub    esp,0xc
c001d5b3:	68 c4 62 02 c0       	push   0xc00262c4
c001d5b8:	e8 60 c4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d5bd:	83 c4 10             	add    esp,0x10
c001d5c0:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001d5c7:	0f 85 5d ff ff ff    	jne    c001d52a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d5cd:	e4 60                	in     al,0x60
c001d5cf:	3c 1c                	cmp    al,0x1c
c001d5d1:	74 04                	je     c001d5d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d5d3:	3c 5a                	cmp    al,0x5a
c001d5d5:	75 f6                	jne    c001d5cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d5d7:	e4 60                	in     al,0x60
c001d5d9:	3c 5a                	cmp    al,0x5a
c001d5db:	74 fa                	je     c001d5d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d5dd:	3c 1c                	cmp    al,0x1c
c001d5df:	74 f6                	je     c001d5d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d5e1:	e9 44 ff ff ff       	jmp    c001d52a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d5e6:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001d5ed:	75 0b                	jne    c001d5fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d5ef:	31 f6                	xor    esi,esi
c001d5f1:	31 db                	xor    ebx,ebx
c001d5f3:	31 ed                	xor    ebp,ebp
c001d5f5:	e9 a3 01 00 00       	jmp    c001d79d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d5fa:	83 ec 0c             	sub    esp,0xc
c001d5fd:	68 d6 62 02 c0       	push   0xc00262d6
c001d602:	e8 16 c4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d607:	8b 15 20 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b20
c001d60d:	83 c4 10             	add    esp,0x10
c001d610:	f6 c2 80             	test   dl,0x80
c001d613:	74 0c                	je     c001d621 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d615:	0f ba e2 0b          	bt     edx,0xb
c001d619:	72 1a                	jb     c001d635 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d61b:	eb d2                	jmp    c001d5ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d61d:	3c 5a                	cmp    al,0x5a
c001d61f:	74 0c                	je     c001d62d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d621:	e4 60                	in     al,0x60
c001d623:	3c 1c                	cmp    al,0x1c
c001d625:	75 f6                	jne    c001d61d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d627:	eb 04                	jmp    c001d62d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d629:	3c 1c                	cmp    al,0x1c
c001d62b:	75 e8                	jne    c001d615 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d62d:	e4 60                	in     al,0x60
c001d62f:	3c 5a                	cmp    al,0x5a
c001d631:	74 fa                	je     c001d62d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d633:	eb f4                	jmp    c001d629 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d635:	83 ec 0c             	sub    esp,0xc
c001d638:	68 db 62 02 c0       	push   0xc00262db
c001d63d:	e8 db c3 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d642:	83 c4 10             	add    esp,0x10
c001d645:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001d64c:	75 a1                	jne    c001d5ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d64e:	e4 60                	in     al,0x60
c001d650:	3c 5a                	cmp    al,0x5a
c001d652:	74 04                	je     c001d658 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d654:	3c 1c                	cmp    al,0x1c
c001d656:	75 f6                	jne    c001d64e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d658:	e4 60                	in     al,0x60
c001d65a:	3c 5a                	cmp    al,0x5a
c001d65c:	74 fa                	je     c001d658 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d65e:	3c 1c                	cmp    al,0x1c
c001d660:	74 f6                	je     c001d658 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d662:	eb 8b                	jmp    c001d5ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d664:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001d66b:	0f 85 3d 01 00 00    	jne    c001d7ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d671:	a1 e8 99 02 c0       	mov    eax,ds:0xc00299e8
c001d676:	8d 7e 01             	lea    edi,[esi+0x1]
c001d679:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d67c:	d4 40                	aam    0x40
c001d67e:	d5 39                	aad    0x39
c001d680:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001d687:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d68b:	0f 85 53 01 00 00    	jne    c001d7e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d691:	8b 15 e8 99 02 c0    	mov    edx,DWORD PTR ds:0xc00299e8
c001d697:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d69a:	d4 40                	aam    0x40
c001d69c:	d5 39                	aad    0x39
c001d69e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d6a2:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d6a6:	d4 40                	aam    0x40
c001d6a8:	d5 39                	aad    0x39
c001d6aa:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d6ae:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d6b2:	d4 40                	aam    0x40
c001d6b4:	d5 39                	aad    0x39
c001d6b6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d6ba:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d6be:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d6c2:	3c 56                	cmp    al,0x56
c001d6c4:	74 49                	je     c001d70f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d6c6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d6ca:	d4 40                	aam    0x40
c001d6cc:	d5 39                	aad    0x39
c001d6ce:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d6d1:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d6d5:	0f b6 c9             	movzx  ecx,cl
c001d6d8:	c1 e1 04             	shl    ecx,0x4
c001d6db:	d4 40                	aam    0x40
c001d6dd:	d5 39                	aad    0x39
c001d6df:	83 e8 30             	sub    eax,0x30
c001d6e2:	0f b6 c0             	movzx  eax,al
c001d6e5:	09 c1                	or     ecx,eax
c001d6e7:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d6eb:	c1 e1 04             	shl    ecx,0x4
c001d6ee:	d4 40                	aam    0x40
c001d6f0:	d5 39                	aad    0x39
c001d6f2:	83 e8 30             	sub    eax,0x30
c001d6f5:	0f b6 c0             	movzx  eax,al
c001d6f8:	09 c1                	or     ecx,eax
c001d6fa:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d6fe:	c1 e1 04             	shl    ecx,0x4
c001d701:	d4 40                	aam    0x40
c001d703:	d5 39                	aad    0x39
c001d705:	83 e8 30             	sub    eax,0x30
c001d708:	0f b6 c0             	movzx  eax,al
c001d70b:	09 c8                	or     eax,ecx
c001d70d:	89 c5                	mov    ebp,eax
c001d70f:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001d713:	80 f9 44             	cmp    cl,0x44
c001d716:	74 47                	je     c001d75f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001d718:	88 c8                	mov    al,cl
c001d71a:	d4 40                	aam    0x40
c001d71c:	d5 39                	aad    0x39
c001d71e:	83 e8 30             	sub    eax,0x30
c001d721:	0f b6 f8             	movzx  edi,al
c001d724:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001d728:	c1 e7 04             	shl    edi,0x4
c001d72b:	d4 40                	aam    0x40
c001d72d:	d5 39                	aad    0x39
c001d72f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d732:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001d736:	0f b6 db             	movzx  ebx,bl
c001d739:	09 fb                	or     ebx,edi
c001d73b:	c1 e3 04             	shl    ebx,0x4
c001d73e:	d4 40                	aam    0x40
c001d740:	d5 39                	aad    0x39
c001d742:	83 e8 30             	sub    eax,0x30
c001d745:	0f b6 f8             	movzx  edi,al
c001d748:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d74c:	09 fb                	or     ebx,edi
c001d74e:	89 df                	mov    edi,ebx
c001d750:	c1 e7 04             	shl    edi,0x4
c001d753:	d4 40                	aam    0x40
c001d755:	d5 39                	aad    0x39
c001d757:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d75a:	0f b6 db             	movzx  ebx,bl
c001d75d:	09 fb                	or     ebx,edi
c001d75f:	a1 e4 99 02 c0       	mov    eax,ds:0xc00299e4
c001d764:	83 c6 10             	add    esi,0x10
c001d767:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d76b:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d76f:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d772:	3c 0a                	cmp    al,0xa
c001d774:	0f 85 a0 00 00 00    	jne    c001d81a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001d77a:	3c 0a                	cmp    al,0xa
c001d77c:	0f 94 c0             	sete   al
c001d77f:	0f b6 c0             	movzx  eax,al
c001d782:	01 c6                	add    esi,eax
c001d784:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d789:	0f 84 a2 00 00 00    	je     c001d831 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d78f:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d797:	0f 84 94 00 00 00    	je     c001d831 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d79d:	39 35 e4 99 02 c0    	cmp    DWORD PTR ds:0xc00299e4,esi
c001d7a3:	0f 8f bb fe ff ff    	jg     c001d664 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001d7a9:	e9 e8 00 00 00       	jmp    c001d896 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001d7ae:	83 ec 0c             	sub    esp,0xc
c001d7b1:	68 e2 62 02 c0       	push   0xc00262e2
c001d7b6:	e8 62 c2 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d7bb:	83 c4 10             	add    esp,0x10
c001d7be:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001d7c5:	0f 85 a6 fe ff ff    	jne    c001d671 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d7cb:	e4 60                	in     al,0x60
c001d7cd:	3c 5a                	cmp    al,0x5a
c001d7cf:	74 04                	je     c001d7d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d7d1:	3c 1c                	cmp    al,0x1c
c001d7d3:	75 f6                	jne    c001d7cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001d7d5:	e4 60                	in     al,0x60
c001d7d7:	3c 5a                	cmp    al,0x5a
c001d7d9:	74 fa                	je     c001d7d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d7db:	3c 1c                	cmp    al,0x1c
c001d7dd:	74 f6                	je     c001d7d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d7df:	e9 8d fe ff ff       	jmp    c001d671 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d7e4:	83 ec 0c             	sub    esp,0xc
c001d7e7:	68 ea 62 02 c0       	push   0xc00262ea
c001d7ec:	e8 2c c2 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d7f1:	83 c4 10             	add    esp,0x10
c001d7f4:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001d7fb:	0f 85 90 fe ff ff    	jne    c001d691 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d801:	e4 60                	in     al,0x60
c001d803:	3c 5a                	cmp    al,0x5a
c001d805:	74 04                	je     c001d80b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d807:	3c 1c                	cmp    al,0x1c
c001d809:	75 f6                	jne    c001d801 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001d80b:	e4 60                	in     al,0x60
c001d80d:	3c 5a                	cmp    al,0x5a
c001d80f:	74 fa                	je     c001d80b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d811:	3c 1c                	cmp    al,0x1c
c001d813:	74 f6                	je     c001d80b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d815:	e9 77 fe ff ff       	jmp    c001d691 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d81a:	47                   	inc    edi
c001d81b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001d81f:	0f 84 55 ff ff ff    	je     c001d77a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001d825:	46                   	inc    esi
c001d826:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001d829:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d82c:	e9 3e ff ff ff       	jmp    c001d76f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001d831:	80 f9 44             	cmp    cl,0x44
c001d834:	74 0e                	je     c001d844 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001d836:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001d83e:	0f 85 59 ff ff ff    	jne    c001d79d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d844:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d848:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001d84c:	c1 e0 04             	shl    eax,0x4
c001d84f:	83 ea 30             	sub    edx,0x30
c001d852:	09 d0                	or     eax,edx
c001d854:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001d85b:	0f 85 3c ff ff ff    	jne    c001d79d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d861:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001d865:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d869:	c1 e2 04             	shl    edx,0x4
c001d86c:	83 e8 30             	sub    eax,0x30
c001d86f:	09 d0                	or     eax,edx
c001d871:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001d878:	0f 85 1f ff ff ff    	jne    c001d79d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d87e:	50                   	push   eax
c001d87f:	50                   	push   eax
c001d880:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d884:	50                   	push   eax
c001d885:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d88c:	e8 af 2e fe ff       	call   c0000740 <strcpy>
c001d891:	83 c4 10             	add    esp,0x10
c001d894:	eb 15                	jmp    c001d8ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001d896:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d89d:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d8a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d8ab:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d8b2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d8b8:	5b                   	pop    ebx
c001d8b9:	5e                   	pop    esi
c001d8ba:	5f                   	pop    edi
c001d8bb:	5d                   	pop    ebp
c001d8bc:	c3                   	ret    
c001d8bd:	90                   	nop

c001d8be <PCI::checkBus(unsigned char)>:
c001d8be:	56                   	push   esi
c001d8bf:	53                   	push   ebx
c001d8c0:	31 db                	xor    ebx,ebx
c001d8c2:	51                   	push   ecx
c001d8c3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d8c8:	52                   	push   edx
c001d8c9:	53                   	push   ebx
c001d8ca:	43                   	inc    ebx
c001d8cb:	56                   	push   esi
c001d8cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8d0:	e8 bf 07 00 00       	call   c001e094 <PCI::checkDevice(unsigned char, unsigned char)>
c001d8d5:	83 c4 10             	add    esp,0x10
c001d8d8:	83 fb 20             	cmp    ebx,0x20
c001d8db:	75 eb                	jne    c001d8c8 <PCI::checkBus(unsigned char)+0xa>
c001d8dd:	58                   	pop    eax
c001d8de:	5b                   	pop    ebx
c001d8df:	5e                   	pop    esi
c001d8e0:	c3                   	ret    
c001d8e1:	90                   	nop

c001d8e2 <PCI::foundDevice(PCIDeviceInfo)>:
c001d8e2:	55                   	push   ebp
c001d8e3:	57                   	push   edi
c001d8e4:	56                   	push   esi
c001d8e5:	53                   	push   ebx
c001d8e6:	83 ec 1c             	sub    esp,0x1c
c001d8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d8ed:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d8f3:	0f 84 20 04 00 00    	je     c001dd19 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d8f9:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001d900:	75 37                	jne    c001d939 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001d902:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d906:	66 81 f9 06 04       	cmp    cx,0x406
c001d90b:	75 5b                	jne    c001d968 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001d90d:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d912:	50                   	push   eax
c001d913:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d918:	50                   	push   eax
c001d919:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d91e:	50                   	push   eax
c001d91f:	53                   	push   ebx
c001d920:	e8 33 fa ff ff       	call   c001d358 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d925:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001d929:	0f b6 c0             	movzx  eax,al
c001d92c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d930:	83 c4 2c             	add    esp,0x2c
c001d933:	5b                   	pop    ebx
c001d934:	5e                   	pop    esi
c001d935:	5f                   	pop    edi
c001d936:	5d                   	pop    ebp
c001d937:	eb 85                	jmp    c001d8be <PCI::checkBus(unsigned char)>
c001d939:	83 ec 0c             	sub    esp,0xc
c001d93c:	68 f3 62 02 c0       	push   0xc00262f3
c001d941:	e8 d7 c0 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d946:	83 c4 10             	add    esp,0x10
c001d949:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001d950:	75 b0                	jne    c001d902 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d952:	e4 60                	in     al,0x60
c001d954:	3c 5a                	cmp    al,0x5a
c001d956:	74 04                	je     c001d95c <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d958:	3c 1c                	cmp    al,0x1c
c001d95a:	75 f6                	jne    c001d952 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001d95c:	e4 60                	in     al,0x60
c001d95e:	3c 5a                	cmp    al,0x5a
c001d960:	74 fa                	je     c001d95c <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d962:	3c 1c                	cmp    al,0x1c
c001d964:	74 f6                	je     c001d95c <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d966:	eb 9a                	jmp    c001d902 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d968:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001d96e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d972:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d976:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d97a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d97e:	88 d0                	mov    al,dl
c001d980:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d985:	74 3b                	je     c001d9c2 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001d987:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d98b:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001d98e:	85 d2                	test   edx,edx
c001d990:	74 24                	je     c001d9b6 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d992:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d998:	31 ef                	xor    edi,ebp
c001d99a:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d9a0:	75 14                	jne    c001d9b6 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d9a2:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001d9a8:	75 0c                	jne    c001d9b6 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d9aa:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001d9b0:	0f 84 63 03 00 00    	je     c001dd19 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d9b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d9ba:	8b 12                	mov    edx,DWORD PTR [edx]
c001d9bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d9c0:	eb be                	jmp    c001d980 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001d9c2:	66 81 f9 01 06       	cmp    cx,0x601
c001d9c7:	0f 85 81 01 00 00    	jne    c001db4e <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001d9cd:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001d9d4:	75 25                	jne    c001d9fb <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001d9d6:	83 ec 0c             	sub    esp,0xc
c001d9d9:	68 64 01 00 00       	push   0x164
c001d9de:	e8 e0 bf fe ff       	call   c00099c3 <malloc>
c001d9e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9e6:	89 c5                	mov    ebp,eax
c001d9e8:	e8 b7 12 00 00       	call   c001eca4 <SATABus::SATABus()>
c001d9ed:	83 c4 10             	add    esp,0x10
c001d9f0:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001d9f7:	74 4a                	je     c001da43 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001d9f9:	eb 2f                	jmp    c001da2a <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001d9fb:	83 ec 0c             	sub    esp,0xc
c001d9fe:	68 03 63 02 c0       	push   0xc0026303
c001da03:	e8 15 c0 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001da08:	83 c4 10             	add    esp,0x10
c001da0b:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001da12:	75 c2                	jne    c001d9d6 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001da14:	e4 60                	in     al,0x60
c001da16:	3c 1c                	cmp    al,0x1c
c001da18:	74 04                	je     c001da1e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001da1a:	3c 5a                	cmp    al,0x5a
c001da1c:	75 f6                	jne    c001da14 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001da1e:	e4 60                	in     al,0x60
c001da20:	3c 5a                	cmp    al,0x5a
c001da22:	74 fa                	je     c001da1e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001da24:	3c 1c                	cmp    al,0x1c
c001da26:	74 f6                	je     c001da1e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001da28:	eb ac                	jmp    c001d9d6 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001da2a:	83 ec 0c             	sub    esp,0xc
c001da2d:	68 09 63 02 c0       	push   0xc0026309
c001da32:	e8 e6 bf fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001da37:	83 c4 10             	add    esp,0x10
c001da3a:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001da41:	74 1b                	je     c001da5e <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001da43:	50                   	push   eax
c001da44:	50                   	push   eax
c001da45:	55                   	push   ebp
c001da46:	53                   	push   ebx
c001da47:	e8 ee 06 ff ff       	call   c000e13a <Device::addChild(Device*)>
c001da4c:	83 c4 10             	add    esp,0x10
c001da4f:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001da56:	74 33                	je     c001da8b <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001da58:	eb 18                	jmp    c001da72 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001da5a:	3c 1c                	cmp    al,0x1c
c001da5c:	74 0c                	je     c001da6a <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001da5e:	e4 60                	in     al,0x60
c001da60:	3c 5a                	cmp    al,0x5a
c001da62:	75 f6                	jne    c001da5a <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001da64:	eb 04                	jmp    c001da6a <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001da66:	3c 1c                	cmp    al,0x1c
c001da68:	75 d9                	jne    c001da43 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001da6a:	e4 60                	in     al,0x60
c001da6c:	3c 5a                	cmp    al,0x5a
c001da6e:	74 fa                	je     c001da6a <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001da70:	eb f4                	jmp    c001da66 <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001da72:	83 ec 0c             	sub    esp,0xc
c001da75:	68 11 63 02 c0       	push   0xc0026311
c001da7a:	e8 9e bf fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001da7f:	83 c4 10             	add    esp,0x10
c001da82:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001da89:	74 29                	je     c001dab4 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001da8b:	83 ec 2c             	sub    esp,0x2c
c001da8e:	b9 09 00 00 00       	mov    ecx,0x9
c001da93:	8d 74 24 60          	lea    esi,[esp+0x60]
c001da97:	fc                   	cld    
c001da98:	89 e7                	mov    edi,esp
c001da9a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001da9c:	55                   	push   ebp
c001da9d:	e8 aa 05 ff ff       	call   c000e04c <Device::preOpenPCI(PCIDeviceInfo)>
c001daa2:	83 c4 30             	add    esp,0x30
c001daa5:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001daac:	74 33                	je     c001dae1 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001daae:	eb 18                	jmp    c001dac8 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001dab0:	3c 1c                	cmp    al,0x1c
c001dab2:	74 0c                	je     c001dac0 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dab4:	e4 60                	in     al,0x60
c001dab6:	3c 5a                	cmp    al,0x5a
c001dab8:	75 f6                	jne    c001dab0 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001daba:	eb 04                	jmp    c001dac0 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dabc:	3c 1c                	cmp    al,0x1c
c001dabe:	75 cb                	jne    c001da8b <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dac0:	e4 60                	in     al,0x60
c001dac2:	3c 5a                	cmp    al,0x5a
c001dac4:	74 fa                	je     c001dac0 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dac6:	eb f4                	jmp    c001dabc <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001dac8:	83 ec 0c             	sub    esp,0xc
c001dacb:	68 19 63 02 c0       	push   0xc0026319
c001dad0:	e8 48 bf fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dad5:	83 c4 10             	add    esp,0x10
c001dad8:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001dadf:	74 23                	je     c001db04 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001dae1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dae4:	6a 00                	push   0x0
c001dae6:	6a 00                	push   0x0
c001dae8:	6a 00                	push   0x0
c001daea:	55                   	push   ebp
c001daeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001daee:	83 c4 10             	add    esp,0x10
c001daf1:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001daf8:	0f 84 1b 02 00 00    	je     c001dd19 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dafe:	eb 18                	jmp    c001db18 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001db00:	3c 1c                	cmp    al,0x1c
c001db02:	74 0c                	je     c001db10 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001db04:	e4 60                	in     al,0x60
c001db06:	3c 5a                	cmp    al,0x5a
c001db08:	75 f6                	jne    c001db00 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001db0a:	eb 04                	jmp    c001db10 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001db0c:	3c 1c                	cmp    al,0x1c
c001db0e:	75 d1                	jne    c001dae1 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001db10:	e4 60                	in     al,0x60
c001db12:	3c 5a                	cmp    al,0x5a
c001db14:	74 fa                	je     c001db10 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001db16:	eb f4                	jmp    c001db0c <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001db18:	83 ec 0c             	sub    esp,0xc
c001db1b:	68 21 63 02 c0       	push   0xc0026321
c001db20:	e8 f8 be fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001db25:	83 c4 10             	add    esp,0x10
c001db28:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001db2f:	0f 85 e4 01 00 00    	jne    c001dd19 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001db35:	e4 60                	in     al,0x60
c001db37:	3c 5a                	cmp    al,0x5a
c001db39:	74 04                	je     c001db3f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001db3b:	3c 1c                	cmp    al,0x1c
c001db3d:	75 f6                	jne    c001db35 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001db3f:	e4 60                	in     al,0x60
c001db41:	3c 5a                	cmp    al,0x5a
c001db43:	74 fa                	je     c001db3f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001db45:	3c 1c                	cmp    al,0x1c
c001db47:	74 f6                	je     c001db3f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001db49:	e9 cb 01 00 00       	jmp    c001dd19 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001db4e:	66 81 f9 01 01       	cmp    cx,0x101
c001db53:	0f 85 7a 01 00 00    	jne    c001dcd3 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001db59:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001db60:	75 25                	jne    c001db87 <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001db62:	83 ec 0c             	sub    esp,0xc
c001db65:	68 70 02 00 00       	push   0x270
c001db6a:	e8 54 be fe ff       	call   c00099c3 <malloc>
c001db6f:	89 04 24             	mov    DWORD PTR [esp],eax
c001db72:	89 c5                	mov    ebp,eax
c001db74:	e8 df 05 00 00       	call   c001e158 <IDE::IDE()>
c001db79:	83 c4 10             	add    esp,0x10
c001db7c:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001db83:	74 4a                	je     c001dbcf <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001db85:	eb 2f                	jmp    c001dbb6 <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001db87:	83 ec 0c             	sub    esp,0xc
c001db8a:	68 29 63 02 c0       	push   0xc0026329
c001db8f:	e8 89 be fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001db94:	83 c4 10             	add    esp,0x10
c001db97:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001db9e:	75 c2                	jne    c001db62 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dba0:	e4 60                	in     al,0x60
c001dba2:	3c 5a                	cmp    al,0x5a
c001dba4:	74 04                	je     c001dbaa <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dba6:	3c 1c                	cmp    al,0x1c
c001dba8:	75 f6                	jne    c001dba0 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001dbaa:	e4 60                	in     al,0x60
c001dbac:	3c 5a                	cmp    al,0x5a
c001dbae:	74 fa                	je     c001dbaa <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dbb0:	3c 1c                	cmp    al,0x1c
c001dbb2:	74 f6                	je     c001dbaa <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dbb4:	eb ac                	jmp    c001db62 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dbb6:	83 ec 0c             	sub    esp,0xc
c001dbb9:	68 30 63 02 c0       	push   0xc0026330
c001dbbe:	e8 5a be fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dbc3:	83 c4 10             	add    esp,0x10
c001dbc6:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001dbcd:	74 1b                	je     c001dbea <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001dbcf:	57                   	push   edi
c001dbd0:	57                   	push   edi
c001dbd1:	55                   	push   ebp
c001dbd2:	53                   	push   ebx
c001dbd3:	e8 62 05 ff ff       	call   c000e13a <Device::addChild(Device*)>
c001dbd8:	83 c4 10             	add    esp,0x10
c001dbdb:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001dbe2:	74 33                	je     c001dc17 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001dbe4:	eb 18                	jmp    c001dbfe <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001dbe6:	3c 1c                	cmp    al,0x1c
c001dbe8:	74 0c                	je     c001dbf6 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dbea:	e4 60                	in     al,0x60
c001dbec:	3c 5a                	cmp    al,0x5a
c001dbee:	75 f6                	jne    c001dbe6 <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001dbf0:	eb 04                	jmp    c001dbf6 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dbf2:	3c 1c                	cmp    al,0x1c
c001dbf4:	75 d9                	jne    c001dbcf <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001dbf6:	e4 60                	in     al,0x60
c001dbf8:	3c 5a                	cmp    al,0x5a
c001dbfa:	74 fa                	je     c001dbf6 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dbfc:	eb f4                	jmp    c001dbf2 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001dbfe:	83 ec 0c             	sub    esp,0xc
c001dc01:	68 37 63 02 c0       	push   0xc0026337
c001dc06:	e8 12 be fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dc0b:	83 c4 10             	add    esp,0x10
c001dc0e:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001dc15:	74 29                	je     c001dc40 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001dc17:	83 ec 2c             	sub    esp,0x2c
c001dc1a:	b9 09 00 00 00       	mov    ecx,0x9
c001dc1f:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dc23:	fc                   	cld    
c001dc24:	89 e7                	mov    edi,esp
c001dc26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dc28:	55                   	push   ebp
c001dc29:	e8 1e 04 ff ff       	call   c000e04c <Device::preOpenPCI(PCIDeviceInfo)>
c001dc2e:	83 c4 30             	add    esp,0x30
c001dc31:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001dc38:	74 33                	je     c001dc6d <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001dc3a:	eb 18                	jmp    c001dc54 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001dc3c:	3c 1c                	cmp    al,0x1c
c001dc3e:	74 0c                	je     c001dc4c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001dc40:	e4 60                	in     al,0x60
c001dc42:	3c 5a                	cmp    al,0x5a
c001dc44:	75 f6                	jne    c001dc3c <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001dc46:	eb 04                	jmp    c001dc4c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001dc48:	3c 1c                	cmp    al,0x1c
c001dc4a:	75 cb                	jne    c001dc17 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001dc4c:	e4 60                	in     al,0x60
c001dc4e:	3c 5a                	cmp    al,0x5a
c001dc50:	74 fa                	je     c001dc4c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001dc52:	eb f4                	jmp    c001dc48 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001dc54:	83 ec 0c             	sub    esp,0xc
c001dc57:	68 3e 63 02 c0       	push   0xc002633e
c001dc5c:	e8 bc bd fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dc61:	83 c4 10             	add    esp,0x10
c001dc64:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001dc6b:	74 23                	je     c001dc90 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001dc6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dc70:	6a 00                	push   0x0
c001dc72:	6a 00                	push   0x0
c001dc74:	6a 00                	push   0x0
c001dc76:	55                   	push   ebp
c001dc77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dc7a:	83 c4 10             	add    esp,0x10
c001dc7d:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001dc84:	0f 84 8f 00 00 00    	je     c001dd19 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dc8a:	eb 18                	jmp    c001dca4 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001dc8c:	3c 1c                	cmp    al,0x1c
c001dc8e:	74 0c                	je     c001dc9c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001dc90:	e4 60                	in     al,0x60
c001dc92:	3c 5a                	cmp    al,0x5a
c001dc94:	75 f6                	jne    c001dc8c <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001dc96:	eb 04                	jmp    c001dc9c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001dc98:	3c 1c                	cmp    al,0x1c
c001dc9a:	75 d1                	jne    c001dc6d <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001dc9c:	e4 60                	in     al,0x60
c001dc9e:	3c 5a                	cmp    al,0x5a
c001dca0:	74 fa                	je     c001dc9c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001dca2:	eb f4                	jmp    c001dc98 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001dca4:	83 ec 0c             	sub    esp,0xc
c001dca7:	68 45 63 02 c0       	push   0xc0026345
c001dcac:	e8 6c bd fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dcb1:	83 c4 10             	add    esp,0x10
c001dcb4:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001dcbb:	75 5c                	jne    c001dd19 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dcbd:	e4 60                	in     al,0x60
c001dcbf:	3c 5a                	cmp    al,0x5a
c001dcc1:	74 04                	je     c001dcc7 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dcc3:	3c 1c                	cmp    al,0x1c
c001dcc5:	75 f6                	jne    c001dcbd <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001dcc7:	e4 60                	in     al,0x60
c001dcc9:	3c 5a                	cmp    al,0x5a
c001dccb:	74 fa                	je     c001dcc7 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dccd:	3c 1c                	cmp    al,0x1c
c001dccf:	74 f6                	je     c001dcc7 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dcd1:	eb 46                	jmp    c001dd19 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dcd3:	83 ec 0c             	sub    esp,0xc
c001dcd6:	68 58 01 00 00       	push   0x158
c001dcdb:	e8 e3 bc fe ff       	call   c00099c3 <malloc>
c001dce0:	89 c5                	mov    ebp,eax
c001dce2:	58                   	pop    eax
c001dce3:	5a                   	pop    edx
c001dce4:	68 4c 63 02 c0       	push   0xc002634c
c001dce9:	55                   	push   ebp
c001dcea:	e8 55 07 ff ff       	call   c000e444 <DriverlessDevice::DriverlessDevice(char const*)>
c001dcef:	59                   	pop    ecx
c001dcf0:	5e                   	pop    esi
c001dcf1:	55                   	push   ebp
c001dcf2:	53                   	push   ebx
c001dcf3:	e8 42 04 ff ff       	call   c000e13a <Device::addChild(Device*)>
c001dcf8:	83 c4 10             	add    esp,0x10
c001dcfb:	b9 09 00 00 00       	mov    ecx,0x9
c001dd00:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001dd04:	fc                   	cld    
c001dd05:	89 fe                	mov    esi,edi
c001dd07:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dd09:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001dd0d:	83 c4 1c             	add    esp,0x1c
c001dd10:	5b                   	pop    ebx
c001dd11:	5e                   	pop    esi
c001dd12:	5f                   	pop    edi
c001dd13:	5d                   	pop    ebp
c001dd14:	e9 33 03 ff ff       	jmp    c000e04c <Device::preOpenPCI(PCIDeviceInfo)>
c001dd19:	83 c4 1c             	add    esp,0x1c
c001dd1c:	5b                   	pop    ebx
c001dd1d:	5e                   	pop    esi
c001dd1e:	5f                   	pop    edi
c001dd1f:	5d                   	pop    ebp
c001dd20:	c3                   	ret    
c001dd21:	90                   	nop

c001dd22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001dd22:	55                   	push   ebp
c001dd23:	57                   	push   edi
c001dd24:	56                   	push   esi
c001dd25:	53                   	push   ebx
c001dd26:	81 ec b4 00 00 00    	sub    esp,0xb4
c001dd2c:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001dd33:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001dd3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd3e:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001dd45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dd49:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001dd50:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dd54:	68 66 63 02 c0       	push   0xc0026366
c001dd59:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001dd5d:	53                   	push   ebx
c001dd5e:	e8 dd 29 fe ff       	call   c0000740 <strcpy>
c001dd63:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001dd68:	b2 64                	mov    dl,0x64
c001dd6a:	89 c8                	mov    eax,ecx
c001dd6c:	f6 f2                	div    dl
c001dd6e:	b2 0a                	mov    dl,0xa
c001dd70:	83 c0 30             	add    eax,0x30
c001dd73:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001dd77:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001dd7b:	83 c4 10             	add    esp,0x10
c001dd7e:	89 c8                	mov    eax,ecx
c001dd80:	f6 f2                	div    dl
c001dd82:	89 c1                	mov    ecx,eax
c001dd84:	0f b6 c0             	movzx  eax,al
c001dd87:	88 e9                	mov    cl,ch
c001dd89:	f6 f2                	div    dl
c001dd8b:	88 e0                	mov    al,ah
c001dd8d:	83 c0 30             	add    eax,0x30
c001dd90:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001dd94:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001dd98:	8d 41 30             	lea    eax,[ecx+0x30]
c001dd9b:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001dd9f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001dda3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001dda8:	f6 f2                	div    dl
c001ddaa:	89 c1                	mov    ecx,eax
c001ddac:	0f b6 c0             	movzx  eax,al
c001ddaf:	88 e9                	mov    cl,ch
c001ddb1:	f6 f2                	div    dl
c001ddb3:	88 e0                	mov    al,ah
c001ddb5:	83 c0 30             	add    eax,0x30
c001ddb8:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001ddbc:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001ddc0:	8d 41 30             	lea    eax,[ecx+0x30]
c001ddc3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001ddc7:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001ddcb:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001ddd0:	f6 f2                	div    dl
c001ddd2:	89 c1                	mov    ecx,eax
c001ddd4:	0f b6 c0             	movzx  eax,al
c001ddd7:	88 e9                	mov    cl,ch
c001ddd9:	f6 f2                	div    dl
c001dddb:	88 e0                	mov    al,ah
c001dddd:	83 c0 30             	add    eax,0x30
c001dde0:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001dde7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001ddeb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ddef:	8d 41 30             	lea    eax,[ecx+0x30]
c001ddf2:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001ddf6:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001ddfa:	74 29                	je     c001de25 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001ddfc:	83 ec 0c             	sub    esp,0xc
c001ddff:	53                   	push   ebx
c001de00:	e8 18 bc fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001de05:	83 c4 10             	add    esp,0x10
c001de08:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001de0f:	75 14                	jne    c001de25 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001de11:	e4 60                	in     al,0x60
c001de13:	3c 1c                	cmp    al,0x1c
c001de15:	74 04                	je     c001de1b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001de17:	3c 5a                	cmp    al,0x5a
c001de19:	75 f6                	jne    c001de11 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001de1b:	e4 60                	in     al,0x60
c001de1d:	3c 5a                	cmp    al,0x5a
c001de1f:	74 fa                	je     c001de1b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001de21:	3c 1c                	cmp    al,0x1c
c001de23:	74 f6                	je     c001de1b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001de25:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001de2a:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001de2f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001de34:	83 ec 0c             	sub    esp,0xc
c001de37:	6a 0c                	push   0xc
c001de39:	56                   	push   esi
c001de3a:	53                   	push   ebx
c001de3b:	57                   	push   edi
c001de3c:	55                   	push   ebp
c001de3d:	e8 68 f3 ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de42:	83 c4 20             	add    esp,0x20
c001de45:	56                   	push   esi
c001de46:	53                   	push   ebx
c001de47:	57                   	push   edi
c001de48:	55                   	push   ebp
c001de49:	e8 50 f4 ff ff       	call   c001d29e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001de4e:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001de53:	56                   	push   esi
c001de54:	53                   	push   ebx
c001de55:	57                   	push   edi
c001de56:	55                   	push   ebp
c001de57:	e8 d8 f4 ff ff       	call   c001d334 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001de5c:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001de60:	83 c4 14             	add    esp,0x14
c001de63:	6a 3c                	push   0x3c
c001de65:	56                   	push   esi
c001de66:	53                   	push   ebx
c001de67:	57                   	push   edi
c001de68:	55                   	push   ebp
c001de69:	e8 3c f3 ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de6e:	0f b6 c4             	movzx  eax,ah
c001de71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001de75:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001de79:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001de80:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c001de85:	83 c4 20             	add    esp,0x20
c001de88:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001de8e:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001de95:	0f 84 38 01 00 00    	je     c001dfd3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001de9b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dea3:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c001dea8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001deac:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001deb2:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001deb8:	0f 8e 15 01 00 00    	jle    c001dfd3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001debe:	50                   	push   eax
c001debf:	50                   	push   eax
c001dec0:	68 81 63 02 c0       	push   0xc0026381
c001dec5:	8d 44 24 68          	lea    eax,[esp+0x68]
c001dec9:	50                   	push   eax
c001deca:	e8 71 28 fe ff       	call   c0000740 <strcpy>
c001decf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001ded3:	b9 0a 00 00 00       	mov    ecx,0xa
c001ded8:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001dedc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001dee0:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001dee4:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001dee8:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001deec:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001def0:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001def4:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001def8:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001defc:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001df00:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001df04:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001df08:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001df0c:	83 c4 10             	add    esp,0x10
c001df0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df13:	99                   	cdq    
c001df14:	f7 f9                	idiv   ecx
c001df16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001df1a:	99                   	cdq    
c001df1b:	f7 f9                	idiv   ecx
c001df1d:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001df21:	83 c2 30             	add    edx,0x30
c001df24:	83 c0 30             	add    eax,0x30
c001df27:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001df2b:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001df2f:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001df36:	74 2d                	je     c001df65 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001df38:	83 ec 0c             	sub    esp,0xc
c001df3b:	8d 44 24 68          	lea    eax,[esp+0x68]
c001df3f:	50                   	push   eax
c001df40:	e8 d8 ba fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001df45:	83 c4 10             	add    esp,0x10
c001df48:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001df4f:	75 14                	jne    c001df65 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001df51:	e4 60                	in     al,0x60
c001df53:	3c 5a                	cmp    al,0x5a
c001df55:	74 04                	je     c001df5b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001df57:	3c 1c                	cmp    al,0x1c
c001df59:	75 f6                	jne    c001df51 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001df5b:	e4 60                	in     al,0x60
c001df5d:	3c 5a                	cmp    al,0x5a
c001df5f:	74 fa                	je     c001df5b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001df61:	3c 1c                	cmp    al,0x1c
c001df63:	74 f6                	je     c001df5b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001df65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001df69:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c001df6e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001df74:	8d 04 d0             	lea    eax,[eax+edx*8]
c001df77:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001df7e:	39 d3                	cmp    ebx,edx
c001df80:	75 48                	jne    c001dfca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001df82:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001df89:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001df8d:	75 3b                	jne    c001dfca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001df8f:	83 ec 0c             	sub    esp,0xc
c001df92:	68 b0 63 02 c0       	push   0xc00263b0
c001df97:	e8 17 ed fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001df9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dfa0:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c001dfa5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001dfab:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001dfb3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001dfb7:	50                   	push   eax
c001dfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dfbc:	53                   	push   ebx
c001dfbd:	68 d5 63 02 c0       	push   0xc00263d5
c001dfc2:	e8 ec ec fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001dfc7:	83 c4 20             	add    esp,0x20
c001dfca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001dfce:	e9 d0 fe ff ff       	jmp    c001dea3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001dfd3:	31 d2                	xor    edx,edx
c001dfd5:	83 ec 0c             	sub    esp,0xc
c001dfd8:	56                   	push   esi
c001dfd9:	53                   	push   ebx
c001dfda:	57                   	push   edi
c001dfdb:	52                   	push   edx
c001dfdc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dfe0:	55                   	push   ebp
c001dfe1:	e8 9a f3 ff ff       	call   c001d380 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfe6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dfea:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001dff1:	42                   	inc    edx
c001dff2:	83 c4 20             	add    esp,0x20
c001dff5:	83 fa 06             	cmp    edx,0x6
c001dff8:	75 db                	jne    c001dfd5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001dffa:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001dfff:	83 ec 0c             	sub    esp,0xc
c001e002:	86 e0                	xchg   al,ah
c001e004:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e00c:	6a 02                	push   0x2
c001e00e:	56                   	push   esi
c001e00f:	53                   	push   ebx
c001e010:	57                   	push   edi
c001e011:	55                   	push   ebp
c001e012:	e8 93 f1 ff ff       	call   c001d1aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e017:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e01f:	83 c4 20             	add    esp,0x20
c001e022:	56                   	push   esi
c001e023:	53                   	push   ebx
c001e024:	57                   	push   edi
c001e025:	55                   	push   ebp
c001e026:	e8 bd f2 ff ff       	call   c001d2e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e02b:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e032:	56                   	push   esi
c001e033:	53                   	push   ebx
c001e034:	57                   	push   edi
c001e035:	55                   	push   ebp
c001e036:	e8 17 f2 ff ff       	call   c001d252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e03b:	b9 09 00 00 00       	mov    ecx,0x9
c001e040:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e048:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e04c:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e053:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e057:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e05e:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e062:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e069:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e06d:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e074:	83 ec 0c             	sub    esp,0xc
c001e077:	fc                   	cld    
c001e078:	89 e7                	mov    edi,esp
c001e07a:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e081:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e083:	55                   	push   ebp
c001e084:	e8 59 f8 ff ff       	call   c001d8e2 <PCI::foundDevice(PCIDeviceInfo)>
c001e089:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e08f:	5b                   	pop    ebx
c001e090:	5e                   	pop    esi
c001e091:	5f                   	pop    edi
c001e092:	5d                   	pop    ebp
c001e093:	c3                   	ret    

c001e094 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e094:	55                   	push   ebp
c001e095:	57                   	push   edi
c001e096:	56                   	push   esi
c001e097:	53                   	push   ebx
c001e098:	83 ec 0c             	sub    esp,0xc
c001e09b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e09f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e0a4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e0a9:	6a 00                	push   0x0
c001e0ab:	56                   	push   esi
c001e0ac:	57                   	push   edi
c001e0ad:	55                   	push   ebp
c001e0ae:	e8 9f f1 ff ff       	call   c001d252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e0b3:	6a 00                	push   0x0
c001e0b5:	56                   	push   esi
c001e0b6:	57                   	push   edi
c001e0b7:	55                   	push   ebp
c001e0b8:	e8 65 fc ff ff       	call   c001dd22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e0bd:	83 c4 20             	add    esp,0x20
c001e0c0:	6a 00                	push   0x0
c001e0c2:	56                   	push   esi
c001e0c3:	57                   	push   edi
c001e0c4:	55                   	push   ebp
c001e0c5:	e8 ac f1 ff ff       	call   c001d276 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e0ca:	83 c4 10             	add    esp,0x10
c001e0cd:	84 c0                	test   al,al
c001e0cf:	79 27                	jns    c001e0f8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e0d1:	bb 01 00 00 00       	mov    ebx,0x1
c001e0d6:	53                   	push   ebx
c001e0d7:	56                   	push   esi
c001e0d8:	57                   	push   edi
c001e0d9:	55                   	push   ebp
c001e0da:	e8 73 f1 ff ff       	call   c001d252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e0df:	83 c4 10             	add    esp,0x10
c001e0e2:	66 40                	inc    ax
c001e0e4:	74 0c                	je     c001e0f2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e0e6:	53                   	push   ebx
c001e0e7:	56                   	push   esi
c001e0e8:	57                   	push   edi
c001e0e9:	55                   	push   ebp
c001e0ea:	e8 33 fc ff ff       	call   c001dd22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e0ef:	83 c4 10             	add    esp,0x10
c001e0f2:	43                   	inc    ebx
c001e0f3:	83 fb 08             	cmp    ebx,0x8
c001e0f6:	75 de                	jne    c001e0d6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e0f8:	83 c4 0c             	add    esp,0xc
c001e0fb:	5b                   	pop    ebx
c001e0fc:	5e                   	pop    esi
c001e0fd:	5f                   	pop    edi
c001e0fe:	5d                   	pop    ebp
c001e0ff:	c3                   	ret    

c001e100 <PCI::detect()>:
c001e100:	56                   	push   esi
c001e101:	53                   	push   ebx
c001e102:	53                   	push   ebx
c001e103:	31 db                	xor    ebx,ebx
c001e105:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e109:	6a 00                	push   0x0
c001e10b:	6a 00                	push   0x0
c001e10d:	6a 00                	push   0x0
c001e10f:	56                   	push   esi
c001e110:	e8 61 f1 ff ff       	call   c001d276 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e115:	83 c4 10             	add    esp,0x10
c001e118:	a8 80                	test   al,0x80
c001e11a:	75 21                	jne    c001e13d <PCI::detect()+0x3d>
c001e11c:	51                   	push   ecx
c001e11d:	51                   	push   ecx
c001e11e:	6a 00                	push   0x0
c001e120:	56                   	push   esi
c001e121:	e8 98 f7 ff ff       	call   c001d8be <PCI::checkBus(unsigned char)>
c001e126:	83 c4 10             	add    esp,0x10
c001e129:	eb 24                	jmp    c001e14f <PCI::detect()+0x4f>
c001e12b:	52                   	push   edx
c001e12c:	52                   	push   edx
c001e12d:	53                   	push   ebx
c001e12e:	43                   	inc    ebx
c001e12f:	56                   	push   esi
c001e130:	e8 89 f7 ff ff       	call   c001d8be <PCI::checkBus(unsigned char)>
c001e135:	83 c4 10             	add    esp,0x10
c001e138:	83 fb 08             	cmp    ebx,0x8
c001e13b:	74 12                	je     c001e14f <PCI::detect()+0x4f>
c001e13d:	53                   	push   ebx
c001e13e:	6a 00                	push   0x0
c001e140:	6a 00                	push   0x0
c001e142:	56                   	push   esi
c001e143:	e8 0a f1 ff ff       	call   c001d252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e148:	83 c4 10             	add    esp,0x10
c001e14b:	66 40                	inc    ax
c001e14d:	74 dc                	je     c001e12b <PCI::detect()+0x2b>
c001e14f:	58                   	pop    eax
c001e150:	5b                   	pop    ebx
c001e151:	5e                   	pop    esi
c001e152:	c3                   	ret    
c001e153:	90                   	nop

c001e154 <IDE::close(int, int, void*)>:
c001e154:	83 c8 ff             	or     eax,0xffffffff
c001e157:	c3                   	ret    

c001e158 <IDE::IDE()>:
c001e158:	83 ec 0c             	sub    esp,0xc
c001e15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e15f:	83 ec 08             	sub    esp,0x8
c001e162:	68 1c 64 02 c0       	push   0xc002641c
c001e167:	50                   	push   eax
c001e168:	e8 7b 03 ff ff       	call   c000e4e8 <HardDiskController::HardDiskController(char const*)>
c001e16d:	83 c4 10             	add    esp,0x10
c001e170:	ba ac 64 02 c0       	mov    edx,0xc00264ac
c001e175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e179:	89 10                	mov    DWORD PTR [eax],edx
c001e17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e186:	90                   	nop
c001e187:	83 c4 0c             	add    esp,0xc
c001e18a:	c3                   	ret    
c001e18b:	90                   	nop

c001e18c <IDE::prepareInterrupt(unsigned char)>:
c001e18c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e191:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e195:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e19d:	c3                   	ret    

c001e19e <selectDrive(unsigned char, unsigned char)>:
c001e19e:	c3                   	ret    
c001e19f:	90                   	nop

c001e1a0 <IDE::getBase(unsigned char)>:
c001e1a0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e1a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1a9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e1b1:	c3                   	ret    

c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e1b2:	55                   	push   ebp
c001e1b3:	57                   	push   edi
c001e1b4:	56                   	push   esi
c001e1b5:	53                   	push   ebx
c001e1b6:	83 ec 1c             	sub    esp,0x1c
c001e1b9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e1bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e1c1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e1c4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e1c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e1cc:	80 f9 03             	cmp    cl,0x3
c001e1cf:	77 51                	ja     c001e222 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e1d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1d5:	0f b6 f2             	movzx  esi,dl
c001e1d8:	0f b6 db             	movzx  ebx,bl
c001e1db:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e1de:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e1e2:	83 ca 80             	or     edx,0xffffff80
c001e1e5:	0f b6 d2             	movzx  edx,dl
c001e1e8:	52                   	push   edx
c001e1e9:	6a 0c                	push   0xc
c001e1eb:	56                   	push   esi
c001e1ec:	57                   	push   edi
c001e1ed:	e8 c0 ff ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1f2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e1f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e1fb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e1ff:	ee                   	out    dx,al
c001e200:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e205:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e209:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e20d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e211:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e219:	83 c4 2c             	add    esp,0x2c
c001e21c:	5b                   	pop    ebx
c001e21d:	5e                   	pop    esi
c001e21e:	5f                   	pop    edi
c001e21f:	5d                   	pop    ebp
c001e220:	eb 90                	jmp    c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e222:	80 fb 07             	cmp    bl,0x7
c001e225:	77 12                	ja     c001e239 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e227:	0f b6 d2             	movzx  edx,dl
c001e22a:	0f b6 db             	movzx  ebx,bl
c001e22d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e235:	89 da                	mov    edx,ebx
c001e237:	eb 2f                	jmp    c001e268 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e239:	80 fb 0d             	cmp    bl,0xd
c001e23c:	77 13                	ja     c001e251 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e23e:	0f b6 d2             	movzx  edx,dl
c001e241:	0f b6 db             	movzx  ebx,bl
c001e244:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e24b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e24f:	eb 17                	jmp    c001e268 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e251:	80 fb 15             	cmp    bl,0x15
c001e254:	77 13                	ja     c001e269 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e256:	0f b6 d2             	movzx  edx,dl
c001e259:	0f b6 db             	movzx  ebx,bl
c001e25c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e264:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e268:	ee                   	out    dx,al
c001e269:	83 c4 1c             	add    esp,0x1c
c001e26c:	5b                   	pop    ebx
c001e26d:	5e                   	pop    esi
c001e26e:	5f                   	pop    edi
c001e26f:	5d                   	pop    ebp
c001e270:	c3                   	ret    
c001e271:	90                   	nop

c001e272 <IDE::read(unsigned char, unsigned char)>:
c001e272:	55                   	push   ebp
c001e273:	57                   	push   edi
c001e274:	56                   	push   esi
c001e275:	53                   	push   ebx
c001e276:	83 ec 1c             	sub    esp,0x1c
c001e279:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e27d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e281:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e284:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e288:	3c 03                	cmp    al,0x3
c001e28a:	77 43                	ja     c001e2cf <IDE::read(unsigned char, unsigned char)+0x5d>
c001e28c:	0f b6 f2             	movzx  esi,dl
c001e28f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e292:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e296:	83 c8 80             	or     eax,0xffffff80
c001e299:	0f b6 c0             	movzx  eax,al
c001e29c:	50                   	push   eax
c001e29d:	6a 0c                	push   0xc
c001e29f:	56                   	push   esi
c001e2a0:	57                   	push   edi
c001e2a1:	e8 0c ff ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2a6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e2ab:	0f b6 c3             	movzx  eax,bl
c001e2ae:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e2b2:	ec                   	in     al,dx
c001e2b3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e2b7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e2bc:	52                   	push   edx
c001e2bd:	6a 0c                	push   0xc
c001e2bf:	56                   	push   esi
c001e2c0:	57                   	push   edi
c001e2c1:	e8 ec fe ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2c6:	83 c4 20             	add    esp,0x20
c001e2c9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e2cd:	eb 49                	jmp    c001e318 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e2cf:	80 fb 07             	cmp    bl,0x7
c001e2d2:	77 12                	ja     c001e2e6 <IDE::read(unsigned char, unsigned char)+0x74>
c001e2d4:	0f b6 d2             	movzx  edx,dl
c001e2d7:	0f b6 c3             	movzx  eax,bl
c001e2da:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e2e2:	89 c2                	mov    edx,eax
c001e2e4:	eb 31                	jmp    c001e317 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e2e6:	80 fb 0d             	cmp    bl,0xd
c001e2e9:	77 13                	ja     c001e2fe <IDE::read(unsigned char, unsigned char)+0x8c>
c001e2eb:	0f b6 d2             	movzx  edx,dl
c001e2ee:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e2f5:	0f b6 d3             	movzx  edx,bl
c001e2f8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e2fc:	eb 19                	jmp    c001e317 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e2fe:	31 c0                	xor    eax,eax
c001e300:	80 fb 15             	cmp    bl,0x15
c001e303:	77 13                	ja     c001e318 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e305:	0f b6 d2             	movzx  edx,dl
c001e308:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e310:	0f b6 d3             	movzx  edx,bl
c001e313:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e317:	ec                   	in     al,dx
c001e318:	83 c4 1c             	add    esp,0x1c
c001e31b:	5b                   	pop    ebx
c001e31c:	5e                   	pop    esi
c001e31d:	5f                   	pop    edi
c001e31e:	5d                   	pop    ebp
c001e31f:	c3                   	ret    

c001e320 <IDE::waitInterrupt(unsigned char)>:
c001e320:	55                   	push   ebp
c001e321:	57                   	push   edi
c001e322:	56                   	push   esi
c001e323:	53                   	push   ebx
c001e324:	31 db                	xor    ebx,ebx
c001e326:	83 ec 0c             	sub    esp,0xc
c001e329:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e32d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e332:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e33a:	89 e8                	mov    eax,ebp
c001e33c:	84 c0                	test   al,al
c001e33e:	75 30                	jne    c001e370 <IDE::waitInterrupt(unsigned char)+0x50>
c001e340:	50                   	push   eax
c001e341:	6a 0c                	push   0xc
c001e343:	56                   	push   esi
c001e344:	57                   	push   edi
c001e345:	e8 28 ff ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e34a:	83 c4 10             	add    esp,0x10
c001e34d:	a8 01                	test   al,0x1
c001e34f:	75 27                	jne    c001e378 <IDE::waitInterrupt(unsigned char)+0x58>
c001e351:	f6 c3 04             	test   bl,0x4
c001e354:	75 12                	jne    c001e368 <IDE::waitInterrupt(unsigned char)+0x48>
c001e356:	83 fb 32             	cmp    ebx,0x32
c001e359:	7e 0d                	jle    c001e368 <IDE::waitInterrupt(unsigned char)+0x48>
c001e35b:	83 ec 0c             	sub    esp,0xc
c001e35e:	6a 64                	push   0x64
c001e360:	e8 c3 a3 ff ff       	call   c0018728 <milliTenthSleep(unsigned int)>
c001e365:	83 c4 10             	add    esp,0x10
c001e368:	83 fb 3c             	cmp    ebx,0x3c
c001e36b:	74 0b                	je     c001e378 <IDE::waitInterrupt(unsigned char)+0x58>
c001e36d:	43                   	inc    ebx
c001e36e:	eb c2                	jmp    c001e332 <IDE::waitInterrupt(unsigned char)+0x12>
c001e370:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e378:	83 c4 0c             	add    esp,0xc
c001e37b:	89 e8                	mov    eax,ebp
c001e37d:	5b                   	pop    ebx
c001e37e:	5e                   	pop    esi
c001e37f:	5f                   	pop    edi
c001e380:	5d                   	pop    ebp
c001e381:	c3                   	ret    

c001e382 <ideChannel0IRQHandler(regs*, void*)>:
c001e382:	83 ec 10             	sub    esp,0x10
c001e385:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e389:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e390:	6a 07                	push   0x7
c001e392:	6a 00                	push   0x0
c001e394:	50                   	push   eax
c001e395:	e8 d8 fe ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e39a:	83 c4 1c             	add    esp,0x1c
c001e39d:	c3                   	ret    

c001e39e <ideChannel1IRQHandler(regs*, void*)>:
c001e39e:	83 ec 10             	sub    esp,0x10
c001e3a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e3a5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e3ac:	6a 07                	push   0x7
c001e3ae:	6a 01                	push   0x1
c001e3b0:	50                   	push   eax
c001e3b1:	e8 bc fe ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e3b6:	83 c4 1c             	add    esp,0x1c
c001e3b9:	c3                   	ret    

c001e3ba <IDE::enableIRQs(unsigned char, bool)>:
c001e3ba:	57                   	push   edi
c001e3bb:	56                   	push   esi
c001e3bc:	be 04 00 00 00       	mov    esi,0x4
c001e3c1:	53                   	push   ebx
c001e3c2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e3c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3cb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e3d0:	0f 94 c0             	sete   al
c001e3d3:	d1 e0                	shl    eax,1
c001e3d5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e3dc:	0f b6 c0             	movzx  eax,al
c001e3df:	50                   	push   eax
c001e3e0:	6a 0c                	push   0xc
c001e3e2:	57                   	push   edi
c001e3e3:	53                   	push   ebx
c001e3e4:	e8 c9 fd ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3e9:	83 c4 10             	add    esp,0x10
c001e3ec:	50                   	push   eax
c001e3ed:	6a 0c                	push   0xc
c001e3ef:	57                   	push   edi
c001e3f0:	53                   	push   ebx
c001e3f1:	e8 7c fe ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e3f6:	83 c4 10             	add    esp,0x10
c001e3f9:	4e                   	dec    esi
c001e3fa:	75 f0                	jne    c001e3ec <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e3fc:	5b                   	pop    ebx
c001e3fd:	5e                   	pop    esi
c001e3fe:	5f                   	pop    edi
c001e3ff:	c3                   	ret    

c001e400 <IDE::open(int, int, void*)>:
c001e400:	55                   	push   ebp
c001e401:	57                   	push   edi
c001e402:	56                   	push   esi
c001e403:	53                   	push   ebx
c001e404:	83 ec 1c             	sub    esp,0x1c
c001e407:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e40b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e414:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e41d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e424:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e42b:	0f 85 b0 02 00 00    	jne    c001e6e1 <IDE::open(int, int, void*)+0x2e1>
c001e431:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e437:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e43b:	83 e0 7f             	and    eax,0x7f
c001e43e:	3c 05                	cmp    al,0x5
c001e440:	74 04                	je     c001e446 <IDE::open(int, int, void*)+0x46>
c001e442:	3c 0f                	cmp    al,0xf
c001e444:	75 32                	jne    c001e478 <IDE::open(int, int, void*)+0x78>
c001e446:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e44c:	83 e0 fc             	and    eax,0xfffffffc
c001e44f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e456:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e45c:	83 e0 fc             	and    eax,0xfffffffc
c001e45f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e466:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e46c:	83 e0 fc             	and    eax,0xfffffffc
c001e46f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e476:	eb 14                	jmp    c001e48c <IDE::open(int, int, void*)+0x8c>
c001e478:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e482:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e48c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e493:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e49a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e49e:	89 c6                	mov    esi,eax
c001e4a0:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e4a5:	c1 e6 10             	shl    esi,0x10
c001e4a8:	89 e8                	mov    eax,ebp
c001e4aa:	89 fa                	mov    edx,edi
c001e4ac:	c1 e0 0b             	shl    eax,0xb
c001e4af:	09 f0                	or     eax,esi
c001e4b1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e4b8:	c1 e6 08             	shl    esi,0x8
c001e4bb:	09 c6                	or     esi,eax
c001e4bd:	89 f0                	mov    eax,esi
c001e4bf:	0d 08 00 00 80       	or     eax,0x80000008
c001e4c4:	ef                   	out    dx,eax
c001e4c5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e4ca:	89 ca                	mov    edx,ecx
c001e4cc:	ed                   	in     eax,dx
c001e4cd:	c1 e8 10             	shr    eax,0x10
c001e4d0:	3d ff ff 00 00       	cmp    eax,0xffff
c001e4d5:	0f 84 f5 00 00 00    	je     c001e5d0 <IDE::open(int, int, void*)+0x1d0>
c001e4db:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e4e1:	89 fa                	mov    edx,edi
c001e4e3:	89 f0                	mov    eax,esi
c001e4e5:	ef                   	out    dx,eax
c001e4e6:	b0 fe                	mov    al,0xfe
c001e4e8:	89 ca                	mov    edx,ecx
c001e4ea:	ee                   	out    dx,al
c001e4eb:	89 f0                	mov    eax,esi
c001e4ed:	89 fa                	mov    edx,edi
c001e4ef:	ef                   	out    dx,eax
c001e4f0:	89 ca                	mov    edx,ecx
c001e4f2:	ed                   	in     eax,dx
c001e4f3:	3c fe                	cmp    al,0xfe
c001e4f5:	0f 85 a9 00 00 00    	jne    c001e5a4 <IDE::open(int, int, void*)+0x1a4>
c001e4fb:	8b 15 08 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b08
c001e501:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e508:	74 33                	je     c001e53d <IDE::open(int, int, void*)+0x13d>
c001e50a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e510:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e514:	40                   	inc    eax
c001e515:	83 ec 0c             	sub    esp,0xc
c001e518:	0f b6 c0             	movzx  eax,al
c001e51b:	50                   	push   eax
c001e51c:	55                   	push   ebp
c001e51d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e521:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e527:	51                   	push   ecx
c001e528:	e8 3f 3b ff ff       	call   c001206c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e52d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e532:	83 c4 1c             	add    esp,0x1c
c001e535:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e53b:	eb 0a                	jmp    c001e547 <IDE::open(int, int, void*)+0x147>
c001e53d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e547:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e54e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e555:	c1 e1 10             	shl    ecx,0x10
c001e558:	c1 e0 08             	shl    eax,0x8
c001e55b:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e560:	09 c1                	or     ecx,eax
c001e562:	89 fa                	mov    edx,edi
c001e564:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e56b:	c1 e0 0b             	shl    eax,0xb
c001e56e:	09 c1                	or     ecx,eax
c001e570:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e576:	89 c8                	mov    eax,ecx
c001e578:	ef                   	out    dx,eax
c001e579:	be fc 0c 00 00       	mov    esi,0xcfc
c001e57e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e584:	89 f2                	mov    edx,esi
c001e586:	ee                   	out    dx,al
c001e587:	89 c8                	mov    eax,ecx
c001e589:	89 fa                	mov    edx,edi
c001e58b:	ef                   	out    dx,eax
c001e58c:	89 f2                	mov    edx,esi
c001e58e:	ed                   	in     eax,dx
c001e58f:	0f b6 c0             	movzx  eax,al
c001e592:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e598:	74 46                	je     c001e5e0 <IDE::open(int, int, void*)+0x1e0>
c001e59a:	83 ec 0c             	sub    esp,0xc
c001e59d:	68 34 64 02 c0       	push   0xc0026434
c001e5a2:	eb 34                	jmp    c001e5d8 <IDE::open(int, int, void*)+0x1d8>
c001e5a4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e5ad:	75 17                	jne    c001e5c6 <IDE::open(int, int, void*)+0x1c6>
c001e5af:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e5b4:	74 07                	je     c001e5bd <IDE::open(int, int, void*)+0x1bd>
c001e5b6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e5bb:	75 09                	jne    c001e5c6 <IDE::open(int, int, void*)+0x1c6>
c001e5bd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e5c4:	eb 1a                	jmp    c001e5e0 <IDE::open(int, int, void*)+0x1e0>
c001e5c6:	83 ec 0c             	sub    esp,0xc
c001e5c9:	68 3c 64 02 c0       	push   0xc002643c
c001e5ce:	eb 08                	jmp    c001e5d8 <IDE::open(int, int, void*)+0x1d8>
c001e5d0:	83 ec 0c             	sub    esp,0xc
c001e5d3:	68 6d 64 02 c0       	push   0xc002646d
c001e5d8:	e8 82 62 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001e5dd:	83 c4 10             	add    esp,0x10
c001e5e0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e5e7:	79 1a                	jns    c001e603 <IDE::open(int, int, void*)+0x203>
c001e5e9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e5ef:	83 e0 fc             	and    eax,0xfffffffc
c001e5f2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e5f9:	83 c0 08             	add    eax,0x8
c001e5fc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e603:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e609:	89 c2                	mov    edx,eax
c001e60b:	83 e2 0f             	and    edx,0xf
c001e60e:	66 83 fa 08          	cmp    dx,0x8
c001e612:	75 0a                	jne    c001e61e <IDE::open(int, int, void*)+0x21e>
c001e614:	83 e8 02             	sub    eax,0x2
c001e617:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e61e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e624:	89 c2                	mov    edx,eax
c001e626:	83 e2 0f             	and    edx,0xf
c001e629:	66 83 fa 08          	cmp    dx,0x8
c001e62d:	75 0a                	jne    c001e639 <IDE::open(int, int, void*)+0x239>
c001e62f:	83 e8 02             	sub    eax,0x2
c001e632:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e639:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e640:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e647:	89 d0                	mov    eax,edx
c001e649:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e64c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e650:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e654:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e657:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e65c:	0f b6 c9             	movzx  ecx,cl
c001e65f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e666:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e669:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e66d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e671:	8d 50 02             	lea    edx,[eax+0x2]
c001e674:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e679:	0f b6 d2             	movzx  edx,dl
c001e67c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e682:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e685:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e689:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e68d:	8d 48 03             	lea    ecx,[eax+0x3]
c001e690:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e695:	0f b6 c9             	movzx  ecx,cl
c001e698:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e69e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e6a1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e6a5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e6a9:	8d 50 04             	lea    edx,[eax+0x4]
c001e6ac:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e6b2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e6b7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e6be:	66 85 f6             	test   si,si
c001e6c1:	74 5b                	je     c001e71e <IDE::open(int, int, void*)+0x31e>
c001e6c3:	0f b6 d2             	movzx  edx,dl
c001e6c6:	83 c0 05             	add    eax,0x5
c001e6c9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e6cc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e6d0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e6d4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e6da:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e6df:	eb 3d                	jmp    c001e71e <IDE::open(int, int, void*)+0x31e>
c001e6e1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e6e7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e6ee:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e6f5:	66 05 06 02          	add    ax,0x206
c001e6f9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e700:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e707:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e70e:	66 05 06 02          	add    ax,0x206
c001e712:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e719:	e9 e5 fe ff ff       	jmp    c001e603 <IDE::open(int, int, void*)+0x203>
c001e71e:	50                   	push   eax
c001e71f:	50                   	push   eax
c001e720:	6a 00                	push   0x0
c001e722:	53                   	push   ebx
c001e723:	e8 64 fa ff ff       	call   c001e18c <IDE::prepareInterrupt(unsigned char)>
c001e728:	5a                   	pop    edx
c001e729:	59                   	pop    ecx
c001e72a:	6a 01                	push   0x1
c001e72c:	53                   	push   ebx
c001e72d:	e8 5a fa ff ff       	call   c001e18c <IDE::prepareInterrupt(unsigned char)>
c001e732:	83 c4 0c             	add    esp,0xc
c001e735:	6a 00                	push   0x0
c001e737:	6a 00                	push   0x0
c001e739:	53                   	push   ebx
c001e73a:	e8 7b fc ff ff       	call   c001e3ba <IDE::enableIRQs(unsigned char, bool)>
c001e73f:	83 c4 0c             	add    esp,0xc
c001e742:	6a 00                	push   0x0
c001e744:	6a 01                	push   0x1
c001e746:	53                   	push   ebx
c001e747:	e8 6e fc ff ff       	call   c001e3ba <IDE::enableIRQs(unsigned char, bool)>
c001e74c:	83 c4 10             	add    esp,0x10
c001e74f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e756:	74 34                	je     c001e78c <IDE::open(int, int, void*)+0x38c>
c001e758:	83 ec 0c             	sub    esp,0xc
c001e75b:	53                   	push   ebx
c001e75c:	6a 01                	push   0x1
c001e75e:	68 82 e3 01 c0       	push   0xc001e382
c001e763:	6a 0e                	push   0xe
c001e765:	53                   	push   ebx
c001e766:	e8 47 f9 fe ff       	call   c000e0b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e76b:	83 c4 14             	add    esp,0x14
c001e76e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e774:	53                   	push   ebx
c001e775:	6a 01                	push   0x1
c001e777:	68 9e e3 01 c0       	push   0xc001e39e
c001e77c:	6a 0f                	push   0xf
c001e77e:	53                   	push   ebx
c001e77f:	e8 2e f9 fe ff       	call   c000e0b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e784:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e78a:	eb 38                	jmp    c001e7c4 <IDE::open(int, int, void*)+0x3c4>
c001e78c:	83 ec 0c             	sub    esp,0xc
c001e78f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e799:	53                   	push   ebx
c001e79a:	6a 00                	push   0x0
c001e79c:	68 82 e3 01 c0       	push   0xc001e382
c001e7a1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e7a7:	53                   	push   ebx
c001e7a8:	e8 05 f9 fe ff       	call   c000e0b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e7ad:	83 c4 14             	add    esp,0x14
c001e7b0:	53                   	push   ebx
c001e7b1:	6a 00                	push   0x0
c001e7b3:	68 9e e3 01 c0       	push   0xc001e39e
c001e7b8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e7be:	53                   	push   ebx
c001e7bf:	e8 ee f8 fe ff       	call   c000e0b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e7c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e7c6:	83 c4 20             	add    esp,0x20
c001e7c9:	83 ec 0c             	sub    esp,0xc
c001e7cc:	53                   	push   ebx
c001e7cd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e7d0:	83 c4 0c             	add    esp,0xc
c001e7d3:	6a 07                	push   0x7
c001e7d5:	6a 00                	push   0x0
c001e7d7:	53                   	push   ebx
c001e7d8:	e8 95 fa ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e7dd:	83 c4 0c             	add    esp,0xc
c001e7e0:	6a 07                	push   0x7
c001e7e2:	6a 01                	push   0x1
c001e7e4:	53                   	push   ebx
c001e7e5:	e8 88 fa ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e7ea:	83 c4 0c             	add    esp,0xc
c001e7ed:	6a 01                	push   0x1
c001e7ef:	6a 00                	push   0x0
c001e7f1:	53                   	push   ebx
c001e7f2:	e8 c3 fb ff ff       	call   c001e3ba <IDE::enableIRQs(unsigned char, bool)>
c001e7f7:	83 c4 0c             	add    esp,0xc
c001e7fa:	6a 01                	push   0x1
c001e7fc:	6a 01                	push   0x1
c001e7fe:	53                   	push   ebx
c001e7ff:	e8 b6 fb ff ff       	call   c001e3ba <IDE::enableIRQs(unsigned char, bool)>
c001e804:	83 c4 2c             	add    esp,0x2c
c001e807:	31 c0                	xor    eax,eax
c001e809:	5b                   	pop    ebx
c001e80a:	5e                   	pop    esi
c001e80b:	5f                   	pop    edi
c001e80c:	5d                   	pop    ebp
c001e80d:	c3                   	ret    

c001e80e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e80e:	55                   	push   ebp
c001e80f:	57                   	push   edi
c001e810:	56                   	push   esi
c001e811:	53                   	push   ebx
c001e812:	83 ec 1c             	sub    esp,0x1c
c001e815:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e819:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e81d:	8d 50 f8             	lea    edx,[eax-0x8]
c001e820:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e824:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e828:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e82c:	80 fa 03             	cmp    dl,0x3
c001e82f:	77 5d                	ja     c001e88e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001e831:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e839:	0f b6 db             	movzx  ebx,bl
c001e83c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e83f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001e843:	83 ca 80             	or     edx,0xffffff80
c001e846:	0f b6 d2             	movzx  edx,dl
c001e849:	52                   	push   edx
c001e84a:	6a 0c                	push   0xc
c001e84c:	53                   	push   ebx
c001e84d:	56                   	push   esi
c001e84e:	e8 5f f9 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e853:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e858:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e85c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e860:	0f b6 c0             	movzx  eax,al
c001e863:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001e867:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e869:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e86e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e872:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e876:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e87a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e882:	83 c4 2c             	add    esp,0x2c
c001e885:	5b                   	pop    ebx
c001e886:	5e                   	pop    esi
c001e887:	5f                   	pop    edi
c001e888:	5d                   	pop    ebp
c001e889:	e9 24 f9 ff ff       	jmp    c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e88e:	3c 07                	cmp    al,0x7
c001e890:	77 10                	ja     c001e8a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001e892:	0f b6 db             	movzx  ebx,bl
c001e895:	0f b6 d0             	movzx  edx,al
c001e898:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001e8a0:	eb 2d                	jmp    c001e8cf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e8a2:	3c 0d                	cmp    al,0xd
c001e8a4:	77 13                	ja     c001e8b9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001e8a6:	0f b6 db             	movzx  ebx,bl
c001e8a9:	0f b6 c0             	movzx  eax,al
c001e8ac:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001e8b3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001e8b7:	eb 16                	jmp    c001e8cf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e8b9:	3c 15                	cmp    al,0x15
c001e8bb:	77 14                	ja     c001e8d1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001e8bd:	0f b6 db             	movzx  ebx,bl
c001e8c0:	0f b6 c0             	movzx  eax,al
c001e8c3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001e8cb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001e8cf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e8d1:	83 c4 1c             	add    esp,0x1c
c001e8d4:	5b                   	pop    ebx
c001e8d5:	5e                   	pop    esi
c001e8d6:	5f                   	pop    edi
c001e8d7:	5d                   	pop    ebp
c001e8d8:	c3                   	ret    
c001e8d9:	90                   	nop

c001e8da <IDE::detect()>:
c001e8da:	55                   	push   ebp
c001e8db:	57                   	push   edi
c001e8dc:	56                   	push   esi
c001e8dd:	53                   	push   ebx
c001e8de:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001e8e4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001e8eb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001e8f2:	0f 85 97 02 00 00    	jne    c001eb8f <IDE::detect()+0x2b5>
c001e8f8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001e8ff:	31 f6                	xor    esi,esi
c001e901:	31 ed                	xor    ebp,ebp
c001e903:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e90b:	89 e8                	mov    eax,ebp
c001e90d:	c1 e0 06             	shl    eax,0x6
c001e910:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001e918:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e91c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e920:	c1 e0 04             	shl    eax,0x4
c001e923:	83 c8 a0             	or     eax,0xffffffa0
c001e926:	0f b6 c0             	movzx  eax,al
c001e929:	50                   	push   eax
c001e92a:	6a 06                	push   0x6
c001e92c:	56                   	push   esi
c001e92d:	53                   	push   ebx
c001e92e:	e8 7f f8 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e933:	83 c4 0c             	add    esp,0xc
c001e936:	6a 0c                	push   0xc
c001e938:	56                   	push   esi
c001e939:	53                   	push   ebx
c001e93a:	e8 33 f9 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e93f:	83 c4 0c             	add    esp,0xc
c001e942:	6a 0c                	push   0xc
c001e944:	56                   	push   esi
c001e945:	53                   	push   ebx
c001e946:	e8 27 f9 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e94b:	83 c4 0c             	add    esp,0xc
c001e94e:	6a 0c                	push   0xc
c001e950:	56                   	push   esi
c001e951:	53                   	push   ebx
c001e952:	e8 1b f9 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e957:	83 c4 0c             	add    esp,0xc
c001e95a:	6a 0c                	push   0xc
c001e95c:	56                   	push   esi
c001e95d:	53                   	push   ebx
c001e95e:	e8 0f f9 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e963:	68 ec 00 00 00       	push   0xec
c001e968:	6a 07                	push   0x7
c001e96a:	56                   	push   esi
c001e96b:	53                   	push   ebx
c001e96c:	e8 41 f8 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e971:	83 c4 1c             	add    esp,0x1c
c001e974:	6a 0c                	push   0xc
c001e976:	56                   	push   esi
c001e977:	53                   	push   ebx
c001e978:	e8 f5 f8 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e97d:	83 c4 0c             	add    esp,0xc
c001e980:	6a 0c                	push   0xc
c001e982:	56                   	push   esi
c001e983:	53                   	push   ebx
c001e984:	e8 e9 f8 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e989:	83 c4 0c             	add    esp,0xc
c001e98c:	6a 0c                	push   0xc
c001e98e:	56                   	push   esi
c001e98f:	53                   	push   ebx
c001e990:	e8 dd f8 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e995:	83 c4 0c             	add    esp,0xc
c001e998:	6a 0c                	push   0xc
c001e99a:	56                   	push   esi
c001e99b:	53                   	push   ebx
c001e99c:	e8 d1 f8 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e9a1:	83 c4 0c             	add    esp,0xc
c001e9a4:	6a 0c                	push   0xc
c001e9a6:	56                   	push   esi
c001e9a7:	53                   	push   ebx
c001e9a8:	e8 c5 f8 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e9ad:	83 c4 10             	add    esp,0x10
c001e9b0:	84 c0                	test   al,al
c001e9b2:	0f 84 5f 01 00 00    	je     c001eb17 <IDE::detect()+0x23d>
c001e9b8:	31 ff                	xor    edi,edi
c001e9ba:	50                   	push   eax
c001e9bb:	6a 0c                	push   0xc
c001e9bd:	56                   	push   esi
c001e9be:	53                   	push   ebx
c001e9bf:	e8 ae f8 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001e9c4:	83 c4 10             	add    esp,0x10
c001e9c7:	a8 01                	test   al,0x1
c001e9c9:	0f 85 69 01 00 00    	jne    c001eb38 <IDE::detect()+0x25e>
c001e9cf:	84 c0                	test   al,al
c001e9d1:	78 04                	js     c001e9d7 <IDE::detect()+0xfd>
c001e9d3:	a8 08                	test   al,0x8
c001e9d5:	75 23                	jne    c001e9fa <IDE::detect()+0x120>
c001e9d7:	47                   	inc    edi
c001e9d8:	81 ff 17 01 00 00    	cmp    edi,0x117
c001e9de:	7e da                	jle    c001e9ba <IDE::detect()+0xe0>
c001e9e0:	83 ec 0c             	sub    esp,0xc
c001e9e3:	6a 32                	push   0x32
c001e9e5:	e8 3e 9d ff ff       	call   c0018728 <milliTenthSleep(unsigned int)>
c001e9ea:	83 c4 10             	add    esp,0x10
c001e9ed:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001e9f3:	75 c5                	jne    c001e9ba <IDE::detect()+0xe0>
c001e9f5:	e9 3e 01 00 00       	jmp    c001eb38 <IDE::detect()+0x25e>
c001e9fa:	31 c9                	xor    ecx,ecx
c001e9fc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ea00:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ea04:	83 ec 0c             	sub    esp,0xc
c001ea07:	68 80 00 00 00       	push   0x80
c001ea0c:	57                   	push   edi
c001ea0d:	6a 00                	push   0x0
c001ea0f:	56                   	push   esi
c001ea10:	53                   	push   ebx
c001ea11:	e8 f8 fd ff ff       	call   c001e80e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ea16:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ea1b:	89 e8                	mov    eax,ebp
c001ea1d:	89 d1                	mov    ecx,edx
c001ea1f:	c1 e0 06             	shl    eax,0x6
c001ea22:	01 d8                	add    eax,ebx
c001ea24:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ea2b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ea32:	89 f2                	mov    edx,esi
c001ea34:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ea3a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ea3e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ea44:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ea48:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ea4f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ea57:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ea5e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ea66:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ea6c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ea73:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ea79:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ea7d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ea81:	83 c4 20             	add    esp,0x20
c001ea84:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ea87:	83 c0 02             	add    eax,0x2
c001ea8a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ea90:	83 c7 02             	add    edi,0x2
c001ea93:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ea96:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ea9c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001eaa0:	75 e2                	jne    c001ea84 <IDE::detect()+0x1aa>
c001eaa2:	89 e8                	mov    eax,ebp
c001eaa4:	c1 e0 06             	shl    eax,0x6
c001eaa7:	01 d8                	add    eax,ebx
c001eaa9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001eaaf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001eab6:	66 c1 ea 09          	shr    dx,0x9
c001eaba:	83 e2 01             	and    edx,0x1
c001eabd:	84 c9                	test   cl,cl
c001eabf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001eac5:	75 22                	jne    c001eae9 <IDE::detect()+0x20f>
c001eac7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001eace:	74 46                	je     c001eb16 <IDE::detect()+0x23c>
c001ead0:	83 ec 0c             	sub    esp,0xc
c001ead3:	68 7c 01 00 00       	push   0x17c
c001ead8:	e8 e6 ae fe ff       	call   c00099c3 <malloc>
c001eadd:	89 c7                	mov    edi,eax
c001eadf:	89 04 24             	mov    DWORD PTR [esp],eax
c001eae2:	e8 97 07 00 00       	call   c001f27e <ATA::ATA()>
c001eae7:	eb 17                	jmp    c001eb00 <IDE::detect()+0x226>
c001eae9:	83 ec 0c             	sub    esp,0xc
c001eaec:	68 80 01 00 00       	push   0x180
c001eaf1:	e8 cd ae fe ff       	call   c00099c3 <malloc>
c001eaf6:	89 c7                	mov    edi,eax
c001eaf8:	89 04 24             	mov    DWORD PTR [esp],eax
c001eafb:	e8 06 0e 00 00       	call   c001f906 <ATAPI::ATAPI()>
c001eb00:	5a                   	pop    edx
c001eb01:	59                   	pop    ecx
c001eb02:	57                   	push   edi
c001eb03:	53                   	push   ebx
c001eb04:	e8 31 f6 fe ff       	call   c000e13a <Device::addChild(Device*)>
c001eb09:	8b 07                	mov    eax,DWORD PTR [edi]
c001eb0b:	53                   	push   ebx
c001eb0c:	55                   	push   ebp
c001eb0d:	6a 00                	push   0x0
c001eb0f:	57                   	push   edi
c001eb10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eb13:	83 c4 20             	add    esp,0x20
c001eb16:	45                   	inc    ebp
c001eb17:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001eb1c:	74 0d                	je     c001eb2b <IDE::detect()+0x251>
c001eb1e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001eb26:	e9 e0 fd ff ff       	jmp    c001e90b <IDE::detect()+0x31>
c001eb2b:	4e                   	dec    esi
c001eb2c:	74 61                	je     c001eb8f <IDE::detect()+0x2b5>
c001eb2e:	be 01 00 00 00       	mov    esi,0x1
c001eb33:	e9 cb fd ff ff       	jmp    c001e903 <IDE::detect()+0x29>
c001eb38:	50                   	push   eax
c001eb39:	6a 04                	push   0x4
c001eb3b:	56                   	push   esi
c001eb3c:	53                   	push   ebx
c001eb3d:	e8 30 f7 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001eb42:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001eb46:	83 c4 0c             	add    esp,0xc
c001eb49:	6a 05                	push   0x5
c001eb4b:	56                   	push   esi
c001eb4c:	53                   	push   ebx
c001eb4d:	e8 20 f7 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001eb52:	83 c4 10             	add    esp,0x10
c001eb55:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001eb59:	80 fa 14             	cmp    dl,0x14
c001eb5c:	75 04                	jne    c001eb62 <IDE::detect()+0x288>
c001eb5e:	3c eb                	cmp    al,0xeb
c001eb60:	eb 07                	jmp    c001eb69 <IDE::detect()+0x28f>
c001eb62:	3c 96                	cmp    al,0x96
c001eb64:	75 b1                	jne    c001eb17 <IDE::detect()+0x23d>
c001eb66:	80 fa 69             	cmp    dl,0x69
c001eb69:	75 ac                	jne    c001eb17 <IDE::detect()+0x23d>
c001eb6b:	68 a1 00 00 00       	push   0xa1
c001eb70:	6a 07                	push   0x7
c001eb72:	56                   	push   esi
c001eb73:	53                   	push   ebx
c001eb74:	e8 39 f6 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb79:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001eb80:	e8 a3 9b ff ff       	call   c0018728 <milliTenthSleep(unsigned int)>
c001eb85:	83 c4 10             	add    esp,0x10
c001eb88:	b1 01                	mov    cl,0x1
c001eb8a:	e9 6d fe ff ff       	jmp    c001e9fc <IDE::detect()+0x122>
c001eb8f:	81 c4 1c 02 00 00    	add    esp,0x21c
c001eb95:	5b                   	pop    ebx
c001eb96:	5e                   	pop    esi
c001eb97:	5f                   	pop    edi
c001eb98:	5d                   	pop    ebp
c001eb99:	c3                   	ret    

c001eb9a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001eb9a:	55                   	push   ebp
c001eb9b:	57                   	push   edi
c001eb9c:	56                   	push   esi
c001eb9d:	53                   	push   ebx
c001eb9e:	83 ec 1c             	sub    esp,0x1c
c001eba1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eba5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eba9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ebad:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ebb1:	88 c3                	mov    bl,al
c001ebb3:	84 c0                	test   al,al
c001ebb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ebb9:	0f 84 81 00 00 00    	je     c001ec40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ebbf:	83 ec 0c             	sub    esp,0xc
c001ebc2:	68 97 64 02 c0       	push   0xc0026497
c001ebc7:	e8 e7 e0 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001ebcc:	83 c4 10             	add    esp,0x10
c001ebcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ebd3:	3c 01                	cmp    al,0x1
c001ebd5:	74 63                	je     c001ec3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001ebd7:	3c 02                	cmp    al,0x2
c001ebd9:	75 53                	jne    c001ec2e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ebdb:	d1 e6                	shl    esi,1
c001ebdd:	09 ee                	or     esi,ebp
c001ebdf:	50                   	push   eax
c001ebe0:	89 f0                	mov    eax,esi
c001ebe2:	6a 01                	push   0x1
c001ebe4:	0f b6 f0             	movzx  esi,al
c001ebe7:	c1 e6 06             	shl    esi,0x6
c001ebea:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001ebf2:	50                   	push   eax
c001ebf3:	57                   	push   edi
c001ebf4:	e8 79 f6 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001ebf9:	83 c4 10             	add    esp,0x10
c001ebfc:	a8 01                	test   al,0x1
c001ebfe:	74 02                	je     c001ec02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001ec00:	b3 07                	mov    bl,0x7
c001ec02:	a8 02                	test   al,0x2
c001ec04:	74 02                	je     c001ec08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001ec06:	b3 03                	mov    bl,0x3
c001ec08:	a8 04                	test   al,0x4
c001ec0a:	74 02                	je     c001ec0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001ec0c:	b3 14                	mov    bl,0x14
c001ec0e:	a8 08                	test   al,0x8
c001ec10:	74 02                	je     c001ec14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001ec12:	b3 03                	mov    bl,0x3
c001ec14:	a8 10                	test   al,0x10
c001ec16:	74 02                	je     c001ec1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001ec18:	b3 15                	mov    bl,0x15
c001ec1a:	a8 20                	test   al,0x20
c001ec1c:	74 02                	je     c001ec20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001ec1e:	b3 03                	mov    bl,0x3
c001ec20:	a8 40                	test   al,0x40
c001ec22:	74 02                	je     c001ec26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ec24:	b3 16                	mov    bl,0x16
c001ec26:	84 c0                	test   al,al
c001ec28:	79 16                	jns    c001ec40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ec2a:	b3 0d                	mov    bl,0xd
c001ec2c:	eb 12                	jmp    c001ec40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ec2e:	3c 03                	cmp    al,0x3
c001ec30:	74 0c                	je     c001ec3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ec32:	3c 04                	cmp    al,0x4
c001ec34:	75 0a                	jne    c001ec40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ec36:	b3 08                	mov    bl,0x8
c001ec38:	eb 06                	jmp    c001ec40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ec3a:	b3 13                	mov    bl,0x13
c001ec3c:	eb 02                	jmp    c001ec40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ec3e:	b3 17                	mov    bl,0x17
c001ec40:	83 c4 1c             	add    esp,0x1c
c001ec43:	88 d8                	mov    al,bl
c001ec45:	5b                   	pop    ebx
c001ec46:	5e                   	pop    esi
c001ec47:	5f                   	pop    edi
c001ec48:	5d                   	pop    ebp
c001ec49:	c3                   	ret    

c001ec4a <IDE::polling(unsigned char, unsigned int)>:
c001ec4a:	57                   	push   edi
c001ec4b:	56                   	push   esi
c001ec4c:	53                   	push   ebx
c001ec4d:	bb 04 00 00 00       	mov    ebx,0x4
c001ec52:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ec56:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ec5b:	52                   	push   edx
c001ec5c:	6a 0c                	push   0xc
c001ec5e:	56                   	push   esi
c001ec5f:	57                   	push   edi
c001ec60:	e8 0d f6 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001ec65:	83 c4 10             	add    esp,0x10
c001ec68:	4b                   	dec    ebx
c001ec69:	75 f0                	jne    c001ec5b <IDE::polling(unsigned char, unsigned int)+0x11>
c001ec6b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ec70:	50                   	push   eax
c001ec71:	6a 0c                	push   0xc
c001ec73:	56                   	push   esi
c001ec74:	57                   	push   edi
c001ec75:	e8 f8 f5 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001ec7a:	83 c4 10             	add    esp,0x10
c001ec7d:	a8 01                	test   al,0x1
c001ec7f:	75 17                	jne    c001ec98 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ec81:	a8 20                	test   al,0x20
c001ec83:	75 0f                	jne    c001ec94 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001ec85:	4b                   	dec    ebx
c001ec86:	74 10                	je     c001ec98 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ec88:	84 c0                	test   al,al
c001ec8a:	78 e4                	js     c001ec70 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ec8c:	a8 08                	test   al,0x8
c001ec8e:	74 e0                	je     c001ec70 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ec90:	31 c0                	xor    eax,eax
c001ec92:	eb 06                	jmp    c001ec9a <IDE::polling(unsigned char, unsigned int)+0x50>
c001ec94:	b0 01                	mov    al,0x1
c001ec96:	eb 02                	jmp    c001ec9a <IDE::polling(unsigned char, unsigned int)+0x50>
c001ec98:	b0 02                	mov    al,0x2
c001ec9a:	5b                   	pop    ebx
c001ec9b:	5e                   	pop    esi
c001ec9c:	5f                   	pop    edi
c001ec9d:	c3                   	ret    

c001ec9e <SATABus::close(int, int, void*)>:
c001ec9e:	31 c0                	xor    eax,eax
c001eca0:	c3                   	ret    
c001eca1:	90                   	nop

c001eca2 <SATABus::detect()>:
c001eca2:	c3                   	ret    
c001eca3:	90                   	nop

c001eca4 <SATABus::SATABus()>:
c001eca4:	83 ec 0c             	sub    esp,0xc
c001eca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecab:	83 ec 08             	sub    esp,0x8
c001ecae:	68 d0 64 02 c0       	push   0xc00264d0
c001ecb3:	50                   	push   eax
c001ecb4:	e8 2f f8 fe ff       	call   c000e4e8 <HardDiskController::HardDiskController(char const*)>
c001ecb9:	83 c4 10             	add    esp,0x10
c001ecbc:	ba 00 66 02 c0       	mov    edx,0xc0026600
c001ecc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc5:	89 10                	mov    DWORD PTR [eax],edx
c001ecc7:	83 ec 0c             	sub    esp,0xc
c001ecca:	6a 50                	push   0x50
c001eccc:	e8 94 b4 fe ff       	call   c000a165 <Phys::allocateContiguousPages(int)>
c001ecd1:	83 c4 10             	add    esp,0x10
c001ecd4:	89 c2                	mov    edx,eax
c001ecd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecda:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ece0:	83 ec 0c             	sub    esp,0xc
c001ece3:	6a 50                	push   0x50
c001ece5:	e8 a3 cc fe ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c001ecea:	83 c4 10             	add    esp,0x10
c001eced:	89 c2                	mov    edx,eax
c001ecef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ecf9:	a1 30 7c 02 c0       	mov    eax,ds:0xc0027c30
c001ecfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed02:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ed08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed0c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ed12:	83 ec 0c             	sub    esp,0xc
c001ed15:	6a 03                	push   0x3
c001ed17:	6a 50                	push   0x50
c001ed19:	51                   	push   ecx
c001ed1a:	52                   	push   edx
c001ed1b:	50                   	push   eax
c001ed1c:	e8 09 d6 fe ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ed21:	83 c4 20             	add    esp,0x20
c001ed24:	90                   	nop
c001ed25:	83 c4 0c             	add    esp,0xc
c001ed28:	c3                   	ret    
c001ed29:	90                   	nop

c001ed2a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ed2a:	55                   	push   ebp
c001ed2b:	57                   	push   edi
c001ed2c:	56                   	push   esi
c001ed2d:	53                   	push   ebx
c001ed2e:	83 ec 3c             	sub    esp,0x3c
c001ed31:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ed35:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001ed3c:	74 2d                	je     c001ed6b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001ed3e:	83 ec 0c             	sub    esp,0xc
c001ed41:	68 f4 64 02 c0       	push   0xc00264f4
c001ed46:	e8 d2 ac fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001ed4b:	83 c4 10             	add    esp,0x10
c001ed4e:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001ed55:	75 14                	jne    c001ed6b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001ed57:	e4 60                	in     al,0x60
c001ed59:	3c 1c                	cmp    al,0x1c
c001ed5b:	74 04                	je     c001ed61 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001ed5d:	3c 5a                	cmp    al,0x5a
c001ed5f:	75 f6                	jne    c001ed57 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2d>
c001ed61:	e4 60                	in     al,0x60
c001ed63:	3c 5a                	cmp    al,0x5a
c001ed65:	74 fa                	je     c001ed61 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001ed67:	3c 1c                	cmp    al,0x1c
c001ed69:	74 f6                	je     c001ed61 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001ed6b:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c001ed6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001ed71:	09 c6                	or     esi,eax
c001ed73:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ed77:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ed7d:	8b 38                	mov    edi,DWORD PTR [eax]
c001ed7f:	c1 ef 08             	shr    edi,0x8
c001ed82:	83 e7 0f             	and    edi,0xf
c001ed85:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001ed8c:	75 04                	jne    c001ed92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x68>
c001ed8e:	31 db                	xor    ebx,ebx
c001ed90:	eb 6f                	jmp    c001ee01 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xd7>
c001ed92:	83 ec 0c             	sub    esp,0xc
c001ed95:	68 0b 65 02 c0       	push   0xc002650b
c001ed9a:	e8 7e ac fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001ed9f:	83 c4 10             	add    esp,0x10
c001eda2:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001eda9:	75 e3                	jne    c001ed8e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001edab:	e4 60                	in     al,0x60
c001edad:	3c 1c                	cmp    al,0x1c
c001edaf:	74 04                	je     c001edb5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001edb1:	3c 5a                	cmp    al,0x5a
c001edb3:	75 f6                	jne    c001edab <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x81>
c001edb5:	e4 60                	in     al,0x60
c001edb7:	3c 5a                	cmp    al,0x5a
c001edb9:	74 fa                	je     c001edb5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001edbb:	3c 1c                	cmp    al,0x1c
c001edbd:	74 f6                	je     c001edb5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001edbf:	eb cd                	jmp    c001ed8e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001edc1:	50                   	push   eax
c001edc2:	50                   	push   eax
c001edc3:	68 22 65 02 c0       	push   0xc0026522
c001edc8:	8d 6c 24 1a          	lea    ebp,[esp+0x1a]
c001edcc:	55                   	push   ebp
c001edcd:	e8 6e 19 fe ff       	call   c0000740 <strcpy>
c001edd2:	83 c4 10             	add    esp,0x10
c001edd5:	89 d8                	mov    eax,ebx
c001edd7:	b9 0a 00 00 00       	mov    ecx,0xa
c001eddc:	99                   	cdq    
c001eddd:	f7 f9                	idiv   ecx
c001eddf:	83 c0 30             	add    eax,0x30
c001ede2:	83 c2 30             	add    edx,0x30
c001ede5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ede9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001eded:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001edf4:	75 11                	jne    c001ee07 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xdd>
c001edf6:	f7 c6 01 00 00 00    	test   esi,0x1
c001edfc:	74 34                	je     c001ee32 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x108>
c001edfe:	d1 ee                	shr    esi,1
c001ee00:	43                   	inc    ebx
c001ee01:	39 fb                	cmp    ebx,edi
c001ee03:	75 bc                	jne    c001edc1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x97>
c001ee05:	eb 63                	jmp    c001ee6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x140>
c001ee07:	83 ec 0c             	sub    esp,0xc
c001ee0a:	55                   	push   ebp
c001ee0b:	e8 0d ac fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001ee10:	83 c4 10             	add    esp,0x10
c001ee13:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001ee1a:	75 da                	jne    c001edf6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001ee1c:	e4 60                	in     al,0x60
c001ee1e:	3c 1c                	cmp    al,0x1c
c001ee20:	74 04                	je     c001ee26 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001ee22:	3c 5a                	cmp    al,0x5a
c001ee24:	75 f6                	jne    c001ee1c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xf2>
c001ee26:	e4 60                	in     al,0x60
c001ee28:	3c 5a                	cmp    al,0x5a
c001ee2a:	74 fa                	je     c001ee26 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001ee2c:	3c 1c                	cmp    al,0x1c
c001ee2e:	74 f6                	je     c001ee26 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001ee30:	eb c4                	jmp    c001edf6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001ee32:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001ee39:	74 78                	je     c001eeb3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001ee3b:	83 ec 0c             	sub    esp,0xc
c001ee3e:	68 3c 65 02 c0       	push   0xc002653c
c001ee43:	e8 d5 ab fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001ee48:	83 c4 10             	add    esp,0x10
c001ee4b:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001ee52:	75 5f                	jne    c001eeb3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001ee54:	e4 60                	in     al,0x60
c001ee56:	3c 5a                	cmp    al,0x5a
c001ee58:	74 04                	je     c001ee5e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001ee5a:	3c 1c                	cmp    al,0x1c
c001ee5c:	75 f6                	jne    c001ee54 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x12a>
c001ee5e:	e4 60                	in     al,0x60
c001ee60:	3c 5a                	cmp    al,0x5a
c001ee62:	74 fa                	je     c001ee5e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001ee64:	3c 1c                	cmp    al,0x1c
c001ee66:	74 f6                	je     c001ee5e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001ee68:	eb 49                	jmp    c001eeb3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001ee6a:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001ee71:	74 2d                	je     c001eea0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001ee73:	83 ec 0c             	sub    esp,0xc
c001ee76:	68 53 65 02 c0       	push   0xc0026553
c001ee7b:	e8 9d ab fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001ee80:	83 c4 10             	add    esp,0x10
c001ee83:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001ee8a:	75 14                	jne    c001eea0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001ee8c:	e4 60                	in     al,0x60
c001ee8e:	3c 5a                	cmp    al,0x5a
c001ee90:	74 04                	je     c001ee96 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001ee92:	3c 1c                	cmp    al,0x1c
c001ee94:	75 f6                	jne    c001ee8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x162>
c001ee96:	e4 60                	in     al,0x60
c001ee98:	3c 5a                	cmp    al,0x5a
c001ee9a:	74 fa                	je     c001ee96 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001ee9c:	3c 1c                	cmp    al,0x1c
c001ee9e:	74 f6                	je     c001ee96 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001eea0:	83 ec 0c             	sub    esp,0xc
c001eea3:	83 cb ff             	or     ebx,0xffffffff
c001eea6:	68 6a 65 02 c0       	push   0xc002656a
c001eeab:	e8 af 59 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001eeb0:	83 c4 10             	add    esp,0x10
c001eeb3:	83 c4 3c             	add    esp,0x3c
c001eeb6:	89 d8                	mov    eax,ebx
c001eeb8:	5b                   	pop    ebx
c001eeb9:	5e                   	pop    esi
c001eeba:	5f                   	pop    edi
c001eebb:	5d                   	pop    ebp
c001eebc:	c3                   	ret    
c001eebd:	90                   	nop

c001eebe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001eebe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eec2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001eec5:	89 c2                	mov    edx,eax
c001eec7:	c1 ea 08             	shr    edx,0x8
c001eeca:	83 e2 0f             	and    edx,0xf
c001eecd:	fe ca                	dec    dl
c001eecf:	75 31                	jne    c001ef02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001eed1:	83 e0 0f             	and    eax,0xf
c001eed4:	3c 03                	cmp    al,0x3
c001eed6:	75 2a                	jne    c001ef02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001eed8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001eedb:	b8 02 00 00 00       	mov    eax,0x2
c001eee0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001eee6:	74 1c                	je     c001ef04 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001eee8:	b8 04 00 00 00       	mov    eax,0x4
c001eeed:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001eef3:	74 0f                	je     c001ef04 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001eef5:	31 c0                	xor    eax,eax
c001eef7:	83 fa 03             	cmp    edx,0x3
c001eefa:	0f 94 c0             	sete   al
c001eefd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ef01:	c3                   	ret    
c001ef02:	31 c0                	xor    eax,eax
c001ef04:	c3                   	ret    
c001ef05:	90                   	nop

c001ef06 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ef06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef0d:	0f ba e2 0f          	bt     edx,0xf
c001ef11:	72 f7                	jb     c001ef0a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ef13:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef16:	83 ca 10             	or     edx,0x10
c001ef19:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef1c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef1f:	83 ca 01             	or     edx,0x1
c001ef22:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef25:	c3                   	ret    

c001ef26 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ef26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef2d:	83 e2 fe             	and    edx,0xfffffffe
c001ef30:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef36:	83 e2 ef             	and    edx,0xffffffef
c001ef39:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef3f:	0f ba e2 0e          	bt     edx,0xe
c001ef43:	72 f7                	jb     c001ef3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ef45:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef48:	0f ba e2 0f          	bt     edx,0xf
c001ef4c:	72 ee                	jb     c001ef3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ef4e:	c3                   	ret    
c001ef4f:	90                   	nop

c001ef50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ef50:	55                   	push   ebp
c001ef51:	57                   	push   edi
c001ef52:	56                   	push   esi
c001ef53:	53                   	push   ebx
c001ef54:	83 ec 1c             	sub    esp,0x1c
c001ef57:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ef5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ef63:	53                   	push   ebx
c001ef64:	89 fd                	mov    ebp,edi
c001ef66:	56                   	push   esi
c001ef67:	c1 e5 0a             	shl    ebp,0xa
c001ef6a:	e8 b7 ff ff ff       	call   c001ef26 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ef6f:	83 ec 0c             	sub    esp,0xc
c001ef72:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ef78:	01 e8                	add    eax,ebp
c001ef7a:	89 03                	mov    DWORD PTR [ebx],eax
c001ef7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ef7e:	68 00 04 00 00       	push   0x400
c001ef83:	6a 00                	push   0x0
c001ef85:	50                   	push   eax
c001ef86:	e8 f9 16 fe ff       	call   c0000684 <memset>
c001ef8b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ef91:	89 fa                	mov    edx,edi
c001ef93:	01 e8                	add    eax,ebp
c001ef95:	c1 e7 0d             	shl    edi,0xd
c001ef98:	89 03                	mov    DWORD PTR [ebx],eax
c001ef9a:	c1 e2 08             	shl    edx,0x8
c001ef9d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001efa4:	81 c2 00 80 00 00    	add    edx,0x8000
c001efaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001efae:	89 d0                	mov    eax,edx
c001efb0:	83 c4 1c             	add    esp,0x1c
c001efb3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001efb9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001efbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001efbf:	68 00 01 00 00       	push   0x100
c001efc4:	6a 00                	push   0x0
c001efc6:	50                   	push   eax
c001efc7:	e8 b8 16 fe ff       	call   c0000684 <memset>
c001efcc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001efd0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001efd6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001efdc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001efe0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001efe3:	83 c4 10             	add    esp,0x10
c001efe6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001efed:	31 ff                	xor    edi,edi
c001efef:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001eff5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001effb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efff:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f005:	83 c5 20             	add    ebp,0x20
c001f008:	01 f8                	add    eax,edi
c001f00a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f00d:	52                   	push   edx
c001f00e:	68 00 01 00 00       	push   0x100
c001f013:	6a 00                	push   0x0
c001f015:	50                   	push   eax
c001f016:	e8 69 16 fe ff       	call   c0000684 <memset>
c001f01b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f01f:	83 c4 10             	add    esp,0x10
c001f022:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f028:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f02f:	01 f8                	add    eax,edi
c001f031:	81 c7 00 01 00 00    	add    edi,0x100
c001f037:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f03a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f040:	75 b3                	jne    c001eff5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f042:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f046:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f04a:	83 c4 1c             	add    esp,0x1c
c001f04d:	5b                   	pop    ebx
c001f04e:	5e                   	pop    esi
c001f04f:	5f                   	pop    edi
c001f050:	5d                   	pop    ebp
c001f051:	e9 b0 fe ff ff       	jmp    c001ef06 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f056 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f056:	55                   	push   ebp
c001f057:	57                   	push   edi
c001f058:	56                   	push   esi
c001f059:	53                   	push   ebx
c001f05a:	83 ec 0c             	sub    esp,0xc
c001f05d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f061:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001f068:	74 2d                	je     c001f097 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f06a:	83 ec 0c             	sub    esp,0xc
c001f06d:	68 8f 65 02 c0       	push   0xc002658f
c001f072:	e8 a6 a9 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f077:	83 c4 10             	add    esp,0x10
c001f07a:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001f081:	75 14                	jne    c001f097 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f083:	e4 60                	in     al,0x60
c001f085:	3c 1c                	cmp    al,0x1c
c001f087:	74 04                	je     c001f08d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f089:	3c 5a                	cmp    al,0x5a
c001f08b:	75 f6                	jne    c001f083 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f08d:	e4 60                	in     al,0x60
c001f08f:	3c 5a                	cmp    al,0x5a
c001f091:	74 fa                	je     c001f08d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f093:	3c 1c                	cmp    al,0x1c
c001f095:	74 f6                	je     c001f08d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f097:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f09b:	31 db                	xor    ebx,ebx
c001f09d:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f0a0:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f0a6:	0f 84 78 01 00 00    	je     c001f224 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f0ac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f0b0:	89 d8                	mov    eax,ebx
c001f0b2:	c1 e0 07             	shl    eax,0x7
c001f0b5:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f0bc:	50                   	push   eax
c001f0bd:	50                   	push   eax
c001f0be:	57                   	push   edi
c001f0bf:	56                   	push   esi
c001f0c0:	e8 f9 fd ff ff       	call   c001eebe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f0c5:	83 c4 10             	add    esp,0x10
c001f0c8:	83 f8 01             	cmp    eax,0x1
c001f0cb:	0f 85 19 01 00 00    	jne    c001f1ea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f0d1:	50                   	push   eax
c001f0d2:	53                   	push   ebx
c001f0d3:	57                   	push   edi
c001f0d4:	56                   	push   esi
c001f0d5:	e8 76 fe ff ff       	call   c001ef50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f0da:	83 c4 10             	add    esp,0x10
c001f0dd:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001f0e4:	74 2d                	je     c001f113 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f0e6:	83 ec 0c             	sub    esp,0xc
c001f0e9:	68 a4 65 02 c0       	push   0xc00265a4
c001f0ee:	e8 2a a9 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f0f3:	83 c4 10             	add    esp,0x10
c001f0f6:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001f0fd:	75 14                	jne    c001f113 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f0ff:	e4 60                	in     al,0x60
c001f101:	3c 1c                	cmp    al,0x1c
c001f103:	74 04                	je     c001f109 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f105:	3c 5a                	cmp    al,0x5a
c001f107:	75 f6                	jne    c001f0ff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f109:	e4 60                	in     al,0x60
c001f10b:	3c 5a                	cmp    al,0x5a
c001f10d:	74 fa                	je     c001f109 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f10f:	3c 1c                	cmp    al,0x1c
c001f111:	74 f6                	je     c001f109 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f113:	83 ec 0c             	sub    esp,0xc
c001f116:	68 7c 01 00 00       	push   0x17c
c001f11b:	e8 a3 a8 fe ff       	call   c00099c3 <malloc>
c001f120:	89 04 24             	mov    DWORD PTR [esp],eax
c001f123:	89 c7                	mov    edi,eax
c001f125:	e8 8e 0f 00 00       	call   c00200b8 <SATA::SATA()>
c001f12a:	83 c4 10             	add    esp,0x10
c001f12d:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001f134:	74 2d                	je     c001f163 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f136:	83 ec 0c             	sub    esp,0xc
c001f139:	68 b9 65 02 c0       	push   0xc00265b9
c001f13e:	e8 da a8 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f143:	83 c4 10             	add    esp,0x10
c001f146:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001f14d:	75 14                	jne    c001f163 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f14f:	e4 60                	in     al,0x60
c001f151:	3c 5a                	cmp    al,0x5a
c001f153:	74 04                	je     c001f159 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f155:	3c 1c                	cmp    al,0x1c
c001f157:	75 f6                	jne    c001f14f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f159:	e4 60                	in     al,0x60
c001f15b:	3c 5a                	cmp    al,0x5a
c001f15d:	74 fa                	je     c001f159 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f15f:	3c 1c                	cmp    al,0x1c
c001f161:	74 f6                	je     c001f159 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f163:	50                   	push   eax
c001f164:	50                   	push   eax
c001f165:	57                   	push   edi
c001f166:	56                   	push   esi
c001f167:	e8 ce ef fe ff       	call   c000e13a <Device::addChild(Device*)>
c001f16c:	83 c4 10             	add    esp,0x10
c001f16f:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001f176:	74 2d                	je     c001f1a5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	68 ce 65 02 c0       	push   0xc00265ce
c001f180:	e8 98 a8 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f185:	83 c4 10             	add    esp,0x10
c001f188:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001f18f:	75 14                	jne    c001f1a5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f191:	e4 60                	in     al,0x60
c001f193:	3c 1c                	cmp    al,0x1c
c001f195:	74 04                	je     c001f19b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f197:	3c 5a                	cmp    al,0x5a
c001f199:	75 f6                	jne    c001f191 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f19b:	e4 60                	in     al,0x60
c001f19d:	3c 5a                	cmp    al,0x5a
c001f19f:	74 fa                	je     c001f19b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f1a1:	3c 1c                	cmp    al,0x1c
c001f1a3:	74 f6                	je     c001f19b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f1a5:	8b 07                	mov    eax,DWORD PTR [edi]
c001f1a7:	56                   	push   esi
c001f1a8:	6a 00                	push   0x0
c001f1aa:	53                   	push   ebx
c001f1ab:	57                   	push   edi
c001f1ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f1af:	83 c4 10             	add    esp,0x10
c001f1b2:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001f1b9:	74 69                	je     c001f224 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f1bb:	83 ec 0c             	sub    esp,0xc
c001f1be:	68 e3 65 02 c0       	push   0xc00265e3
c001f1c3:	e8 55 a8 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f1c8:	83 c4 10             	add    esp,0x10
c001f1cb:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001f1d2:	75 50                	jne    c001f224 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f1d4:	e4 60                	in     al,0x60
c001f1d6:	3c 1c                	cmp    al,0x1c
c001f1d8:	74 04                	je     c001f1de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f1da:	3c 5a                	cmp    al,0x5a
c001f1dc:	75 f6                	jne    c001f1d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f1de:	e4 60                	in     al,0x60
c001f1e0:	3c 5a                	cmp    al,0x5a
c001f1e2:	74 fa                	je     c001f1de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f1e4:	3c 1c                	cmp    al,0x1c
c001f1e6:	74 f6                	je     c001f1de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f1e8:	eb 3a                	jmp    c001f224 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f1ea:	83 f8 04             	cmp    eax,0x4
c001f1ed:	75 35                	jne    c001f224 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f1ef:	50                   	push   eax
c001f1f0:	53                   	push   ebx
c001f1f1:	57                   	push   edi
c001f1f2:	56                   	push   esi
c001f1f3:	e8 58 fd ff ff       	call   c001ef50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f1f8:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f1ff:	e8 bf a7 fe ff       	call   c00099c3 <malloc>
c001f204:	89 04 24             	mov    DWORD PTR [esp],eax
c001f207:	89 c7                	mov    edi,eax
c001f209:	e8 20 17 00 00       	call   c002092e <SATAPI::SATAPI()>
c001f20e:	5a                   	pop    edx
c001f20f:	59                   	pop    ecx
c001f210:	57                   	push   edi
c001f211:	56                   	push   esi
c001f212:	e8 23 ef fe ff       	call   c000e13a <Device::addChild(Device*)>
c001f217:	8b 07                	mov    eax,DWORD PTR [edi]
c001f219:	56                   	push   esi
c001f21a:	6a 00                	push   0x0
c001f21c:	53                   	push   ebx
c001f21d:	57                   	push   edi
c001f21e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f221:	83 c4 20             	add    esp,0x20
c001f224:	d1 ed                	shr    ebp,1
c001f226:	43                   	inc    ebx
c001f227:	83 fb 20             	cmp    ebx,0x20
c001f22a:	0f 85 70 fe ff ff    	jne    c001f0a0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f230:	83 c4 0c             	add    esp,0xc
c001f233:	5b                   	pop    ebx
c001f234:	5e                   	pop    esi
c001f235:	5f                   	pop    edi
c001f236:	5d                   	pop    ebp
c001f237:	c3                   	ret    

c001f238 <SATABus::open(int, int, void*)>:
c001f238:	83 ec 14             	sub    esp,0x14
c001f23b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f23f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001f245:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f24b:	52                   	push   edx
c001f24c:	50                   	push   eax
c001f24d:	e8 04 fe ff ff       	call   c001f056 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f252:	31 c0                	xor    eax,eax
c001f254:	83 c4 1c             	add    esp,0x1c
c001f257:	c3                   	ret    

c001f258 <ATA::close(int, int, void*)>:
c001f258:	83 ec 0c             	sub    esp,0xc
c001f25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f25f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f265:	85 c0                	test   eax,eax
c001f267:	74 0c                	je     c001f275 <ATA::close(int, int, void*)+0x1d>
c001f269:	83 ec 0c             	sub    esp,0xc
c001f26c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f26e:	50                   	push   eax
c001f26f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f272:	83 c4 10             	add    esp,0x10
c001f275:	31 c0                	xor    eax,eax
c001f277:	83 c4 0c             	add    esp,0xc
c001f27a:	c3                   	ret    
c001f27b:	90                   	nop

c001f27c <ATA::powerSaving(PowerSavingLevel)>:
c001f27c:	c3                   	ret    
c001f27d:	90                   	nop

c001f27e <ATA::ATA()>:
c001f27e:	83 ec 0c             	sub    esp,0xc
c001f281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f285:	83 ec 04             	sub    esp,0x4
c001f288:	68 00 02 00 00       	push   0x200
c001f28d:	68 43 67 02 c0       	push   0xc0026743
c001f292:	50                   	push   eax
c001f293:	e8 da f2 fe ff       	call   c000e572 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f298:	83 c4 10             	add    esp,0x10
c001f29b:	ba 78 66 02 c0       	mov    edx,0xc0026678
c001f2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a4:	89 10                	mov    DWORD PTR [eax],edx
c001f2a6:	90                   	nop
c001f2a7:	83 c4 0c             	add    esp,0xc
c001f2aa:	c3                   	ret    
c001f2ab:	90                   	nop

c001f2ac <ATA::flush(bool)>:
c001f2ac:	53                   	push   ebx
c001f2ad:	83 ec 08             	sub    esp,0x8
c001f2b0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f2b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f2b9:	19 c0                	sbb    eax,eax
c001f2bb:	83 e0 fd             	and    eax,0xfffffffd
c001f2be:	05 ea 00 00 00       	add    eax,0xea
c001f2c3:	50                   	push   eax
c001f2c4:	6a 07                	push   0x7
c001f2c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f2cd:	50                   	push   eax
c001f2ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f2d4:	e8 d9 ee ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2d9:	83 c4 0c             	add    esp,0xc
c001f2dc:	6a 00                	push   0x0
c001f2de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f2e5:	50                   	push   eax
c001f2e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f2ec:	e8 59 f9 ff ff       	call   c001ec4a <IDE::polling(unsigned char, unsigned int)>
c001f2f1:	83 c4 18             	add    esp,0x18
c001f2f4:	5b                   	pop    ebx
c001f2f5:	c3                   	ret    

c001f2f6 <ATA::readyForCommand()>:
c001f2f6:	56                   	push   esi
c001f2f7:	53                   	push   ebx
c001f2f8:	53                   	push   ebx
c001f2f9:	31 db                	xor    ebx,ebx
c001f2fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f2ff:	51                   	push   ecx
c001f300:	6a 0c                	push   0xc
c001f302:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f309:	50                   	push   eax
c001f30a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f310:	e8 5d ef ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001f315:	83 c4 10             	add    esp,0x10
c001f318:	a8 88                	test   al,0x88
c001f31a:	74 1f                	je     c001f33b <ATA::readyForCommand()+0x45>
c001f31c:	43                   	inc    ebx
c001f31d:	83 fb 63             	cmp    ebx,0x63
c001f320:	7e dd                	jle    c001f2ff <ATA::readyForCommand()+0x9>
c001f322:	83 ec 0c             	sub    esp,0xc
c001f325:	6a 0a                	push   0xa
c001f327:	e8 fc 93 ff ff       	call   c0018728 <milliTenthSleep(unsigned int)>
c001f32c:	83 c4 10             	add    esp,0x10
c001f32f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f335:	75 c8                	jne    c001f2ff <ATA::readyForCommand()+0x9>
c001f337:	31 c0                	xor    eax,eax
c001f339:	eb 02                	jmp    c001f33d <ATA::readyForCommand()+0x47>
c001f33b:	b0 01                	mov    al,0x1
c001f33d:	5a                   	pop    edx
c001f33e:	5b                   	pop    ebx
c001f33f:	5e                   	pop    esi
c001f340:	c3                   	ret    
c001f341:	90                   	nop

c001f342 <ATA::access(unsigned long long, int, void*, bool)>:
c001f342:	55                   	push   ebp
c001f343:	57                   	push   edi
c001f344:	56                   	push   esi
c001f345:	53                   	push   ebx
c001f346:	83 ec 38             	sub    esp,0x38
c001f349:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f34d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f351:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f355:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f359:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f35d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f361:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f365:	68 24 66 02 c0       	push   0xc0026624
c001f36a:	e8 44 d9 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001f36f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f375:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f379:	83 c4 10             	add    esp,0x10
c001f37c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f382:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f386:	c1 e0 06             	shl    eax,0x6
c001f389:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f391:	74 5d                	je     c001f3f0 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f393:	89 fa                	mov    edx,edi
c001f395:	89 f0                	mov    eax,esi
c001f397:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f39b:	c1 ea 1c             	shr    edx,0x1c
c001f39e:	89 d1                	mov    ecx,edx
c001f3a0:	09 c1                	or     ecx,eax
c001f3a2:	74 25                	je     c001f3c9 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f3a4:	31 ed                	xor    ebp,ebp
c001f3a6:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f3ad:	89 fa                	mov    edx,edi
c001f3af:	89 f0                	mov    eax,esi
c001f3b1:	0f ad d0             	shrd   eax,edx,cl
c001f3b4:	d3 ea                	shr    edx,cl
c001f3b6:	f6 c1 20             	test   cl,0x20
c001f3b9:	74 02                	je     c001f3bd <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f3bb:	89 d0                	mov    eax,edx
c001f3bd:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f3c1:	45                   	inc    ebp
c001f3c2:	83 fd 06             	cmp    ebp,0x6
c001f3c5:	75 df                	jne    c001f3a6 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f3c7:	eb 76                	jmp    c001f43f <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f3c9:	89 f0                	mov    eax,esi
c001f3cb:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f3d0:	89 fa                	mov    edx,edi
c001f3d2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f3d9:	0f ac d0 10          	shrd   eax,edx,0x10
c001f3dd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f3e2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f3e6:	c1 ee 18             	shr    esi,0x18
c001f3e9:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f3ee:	eb 56                	jmp    c001f446 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f3f0:	6a 00                	push   0x0
c001f3f2:	6a 3f                	push   0x3f
c001f3f4:	57                   	push   edi
c001f3f5:	56                   	push   esi
c001f3f6:	e8 d9 30 00 00       	call   c00224d4 <__umoddi3>
c001f3fb:	83 c4 10             	add    esp,0x10
c001f3fe:	40                   	inc    eax
c001f3ff:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f403:	6a 00                	push   0x0
c001f405:	68 f0 03 00 00       	push   0x3f0
c001f40a:	57                   	push   edi
c001f40b:	56                   	push   esi
c001f40c:	e8 c3 2f 00 00       	call   c00223d4 <__udivdi3>
c001f411:	83 c4 10             	add    esp,0x10
c001f414:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f419:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f420:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f425:	6a 00                	push   0x0
c001f427:	6a 3f                	push   0x3f
c001f429:	57                   	push   edi
c001f42a:	56                   	push   esi
c001f42b:	e8 a4 2f 00 00       	call   c00223d4 <__udivdi3>
c001f430:	83 c4 10             	add    esp,0x10
c001f433:	89 c6                	mov    esi,eax
c001f435:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f43a:	83 e6 0f             	and    esi,0xf
c001f43d:	eb 07                	jmp    c001f446 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f43f:	31 f6                	xor    esi,esi
c001f441:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f446:	bf 01 00 00 00       	mov    edi,0x1
c001f44b:	50                   	push   eax
c001f44c:	6a 00                	push   0x0
c001f44e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f455:	50                   	push   eax
c001f456:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f45a:	e8 5b ef ff ff       	call   c001e3ba <IDE::enableIRQs(unsigned char, bool)>
c001f45f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f462:	e8 8f fe ff ff       	call   c001f2f6 <ATA::readyForCommand()>
c001f467:	83 c4 10             	add    esp,0x10
c001f46a:	84 c0                	test   al,al
c001f46c:	0f 84 bc 02 00 00    	je     c001f72e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f472:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f478:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f47e:	c1 e0 04             	shl    eax,0x4
c001f481:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f488:	09 c6                	or     esi,eax
c001f48a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f48f:	75 05                	jne    c001f496 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f491:	83 ce a0             	or     esi,0xffffffa0
c001f494:	eb 03                	jmp    c001f499 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f496:	83 ce e0             	or     esi,0xffffffe0
c001f499:	89 f0                	mov    eax,esi
c001f49b:	0f b6 f0             	movzx  esi,al
c001f49e:	56                   	push   esi
c001f49f:	6a 06                	push   0x6
c001f4a1:	51                   	push   ecx
c001f4a2:	52                   	push   edx
c001f4a3:	e8 0a ed ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4a8:	83 c4 10             	add    esp,0x10
c001f4ab:	6a 00                	push   0x0
c001f4ad:	6a 01                	push   0x1
c001f4af:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4b6:	50                   	push   eax
c001f4b7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4bd:	e8 f0 ec ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4c2:	83 c4 10             	add    esp,0x10
c001f4c5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f4ca:	75 6e                	jne    c001f53a <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f4cc:	6a 00                	push   0x0
c001f4ce:	6a 08                	push   0x8
c001f4d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4d7:	50                   	push   eax
c001f4d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4de:	e8 cf ec ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f4e8:	50                   	push   eax
c001f4e9:	6a 09                	push   0x9
c001f4eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4f2:	50                   	push   eax
c001f4f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4f9:	e8 b4 ec ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4fe:	83 c4 20             	add    esp,0x20
c001f501:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f506:	50                   	push   eax
c001f507:	6a 0a                	push   0xa
c001f509:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f510:	50                   	push   eax
c001f511:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f517:	e8 96 ec ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f51c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f521:	50                   	push   eax
c001f522:	6a 0b                	push   0xb
c001f524:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f52b:	50                   	push   eax
c001f52c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f532:	e8 7b ec ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f537:	83 c4 20             	add    esp,0x20
c001f53a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f53f:	50                   	push   eax
c001f540:	6a 02                	push   0x2
c001f542:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f549:	50                   	push   eax
c001f54a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f550:	e8 5d ec ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f555:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f55a:	50                   	push   eax
c001f55b:	6a 03                	push   0x3
c001f55d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f564:	50                   	push   eax
c001f565:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f56b:	e8 42 ec ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f570:	83 c4 20             	add    esp,0x20
c001f573:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f578:	50                   	push   eax
c001f579:	6a 04                	push   0x4
c001f57b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f582:	50                   	push   eax
c001f583:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f589:	e8 24 ec ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f58e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f593:	50                   	push   eax
c001f594:	6a 05                	push   0x5
c001f596:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f59d:	50                   	push   eax
c001f59e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5a4:	e8 09 ec ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5a9:	83 c4 20             	add    esp,0x20
c001f5ac:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f5b1:	0f 94 c0             	sete   al
c001f5b4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f5b9:	74 09                	je     c001f5c4 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f5bb:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f5c2:	eb 07                	jmp    c001f5cb <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f5c4:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f5cb:	0f b6 c0             	movzx  eax,al
c001f5ce:	50                   	push   eax
c001f5cf:	6a 07                	push   0x7
c001f5d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5d8:	50                   	push   eax
c001f5d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5df:	e8 ce eb ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5e4:	c7 04 24 31 66 02 c0 	mov    DWORD PTR [esp],0xc0026631
c001f5eb:	e8 c3 d6 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001f5f0:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f5f4:	83 c4 10             	add    esp,0x10
c001f5f7:	85 f6                	test   esi,esi
c001f5f9:	0f 84 f7 00 00 00    	je     c001f6f6 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f5ff:	83 ec 0c             	sub    esp,0xc
c001f602:	68 34 66 02 c0       	push   0xc0026634
c001f607:	e8 a7 d6 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001f60c:	83 c4 0c             	add    esp,0xc
c001f60f:	6a 01                	push   0x1
c001f611:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f618:	50                   	push   eax
c001f619:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f61f:	e8 26 f6 ff ff       	call   c001ec4a <IDE::polling(unsigned char, unsigned int)>
c001f624:	c7 04 24 37 66 02 c0 	mov    DWORD PTR [esp],0xc0026637
c001f62b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f62f:	e8 7f d6 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001f634:	83 c4 10             	add    esp,0x10
c001f637:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f63b:	84 c0                	test   al,al
c001f63d:	74 2b                	je     c001f66a <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f63f:	0f b6 f8             	movzx  edi,al
c001f642:	57                   	push   edi
c001f643:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f64a:	50                   	push   eax
c001f64b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f652:	50                   	push   eax
c001f653:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f659:	e8 3c f5 ff ff       	call   c001eb9a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f65e:	c7 04 24 3a 66 02 c0 	mov    DWORD PTR [esp],0xc002663a
c001f665:	e9 bc 00 00 00       	jmp    c001f726 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f66a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f66f:	74 50                	je     c001f6c1 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f671:	83 ec 0c             	sub    esp,0xc
c001f674:	31 ed                	xor    ebp,ebp
c001f676:	68 45 66 02 c0       	push   0xc0026645
c001f67b:	e8 33 d6 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001f680:	83 c4 10             	add    esp,0x10
c001f683:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f687:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f68b:	50                   	push   eax
c001f68c:	50                   	push   eax
c001f68d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f694:	50                   	push   eax
c001f695:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f69b:	e8 00 eb ff ff       	call   c001e1a0 <IDE::getBase(unsigned char)>
c001f6a0:	89 c2                	mov    edx,eax
c001f6a2:	89 f8                	mov    eax,edi
c001f6a4:	66 ef                	out    dx,ax
c001f6a6:	45                   	inc    ebp
c001f6a7:	83 c4 10             	add    esp,0x10
c001f6aa:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f6b0:	75 d1                	jne    c001f683 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f6b2:	83 ec 0c             	sub    esp,0xc
c001f6b5:	68 48 66 02 c0       	push   0xc0026648
c001f6ba:	e8 f4 d5 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001f6bf:	eb 24                	jmp    c001f6e5 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f6c1:	51                   	push   ecx
c001f6c2:	51                   	push   ecx
c001f6c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6ca:	50                   	push   eax
c001f6cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6d1:	e8 ca ea ff ff       	call   c001e1a0 <IDE::getBase(unsigned char)>
c001f6d6:	b9 00 01 00 00       	mov    ecx,0x100
c001f6db:	89 c2                	mov    edx,eax
c001f6dd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f6e1:	fc                   	cld    
c001f6e2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f6e5:	83 c4 10             	add    esp,0x10
c001f6e8:	4e                   	dec    esi
c001f6e9:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f6f1:	e9 01 ff ff ff       	jmp    c001f5f7 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f6f6:	31 ff                	xor    edi,edi
c001f6f8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f6fd:	74 2f                	je     c001f72e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f6ff:	83 ec 0c             	sub    esp,0xc
c001f702:	68 4b 66 02 c0       	push   0xc002664b
c001f707:	e8 a7 d5 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001f70c:	58                   	pop    eax
c001f70d:	31 c0                	xor    eax,eax
c001f70f:	5a                   	pop    edx
c001f710:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001f715:	0f 94 c0             	sete   al
c001f718:	50                   	push   eax
c001f719:	53                   	push   ebx
c001f71a:	e8 8d fb ff ff       	call   c001f2ac <ATA::flush(bool)>
c001f71f:	c7 04 24 4e 66 02 c0 	mov    DWORD PTR [esp],0xc002664e
c001f726:	e8 88 d5 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001f72b:	83 c4 10             	add    esp,0x10
c001f72e:	83 c4 2c             	add    esp,0x2c
c001f731:	89 f8                	mov    eax,edi
c001f733:	5b                   	pop    ebx
c001f734:	5e                   	pop    esi
c001f735:	5f                   	pop    edi
c001f736:	5d                   	pop    ebp
c001f737:	c3                   	ret    

c001f738 <ATA::read(unsigned long long, int, void*)>:
c001f738:	57                   	push   edi
c001f739:	b8 04 00 00 00       	mov    eax,0x4
c001f73e:	56                   	push   esi
c001f73f:	53                   	push   ebx
c001f740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f744:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f748:	8d 7a ff             	lea    edi,[edx-0x1]
c001f74b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f74f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f753:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f759:	77 25                	ja     c001f780 <ATA::read(unsigned long long, int, void*)+0x48>
c001f75b:	b8 06 00 00 00       	mov    eax,0x6
c001f760:	85 f6                	test   esi,esi
c001f762:	74 1c                	je     c001f780 <ATA::read(unsigned long long, int, void*)+0x48>
c001f764:	50                   	push   eax
c001f765:	50                   	push   eax
c001f766:	6a 00                	push   0x0
c001f768:	56                   	push   esi
c001f769:	52                   	push   edx
c001f76a:	53                   	push   ebx
c001f76b:	51                   	push   ecx
c001f76c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f770:	e8 cd fb ff ff       	call   c001f342 <ATA::access(unsigned long long, int, void*, bool)>
c001f775:	83 c4 20             	add    esp,0x20
c001f778:	85 c0                	test   eax,eax
c001f77a:	0f 95 c0             	setne  al
c001f77d:	0f b6 c0             	movzx  eax,al
c001f780:	5b                   	pop    ebx
c001f781:	5e                   	pop    esi
c001f782:	5f                   	pop    edi
c001f783:	c3                   	ret    

c001f784 <ATA::write(unsigned long long, int, void*)>:
c001f784:	55                   	push   ebp
c001f785:	57                   	push   edi
c001f786:	56                   	push   esi
c001f787:	53                   	push   ebx
c001f788:	83 ec 18             	sub    esp,0x18
c001f78b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f78f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f793:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001f797:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f79b:	68 51 66 02 c0       	push   0xc0026651
c001f7a0:	e8 0e d5 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001f7a5:	8d 53 ff             	lea    edx,[ebx-0x1]
c001f7a8:	83 c4 10             	add    esp,0x10
c001f7ab:	b8 04 00 00 00       	mov    eax,0x4
c001f7b0:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001f7b6:	77 25                	ja     c001f7dd <ATA::write(unsigned long long, int, void*)+0x59>
c001f7b8:	b8 06 00 00 00       	mov    eax,0x6
c001f7bd:	85 f6                	test   esi,esi
c001f7bf:	74 1c                	je     c001f7dd <ATA::write(unsigned long long, int, void*)+0x59>
c001f7c1:	50                   	push   eax
c001f7c2:	50                   	push   eax
c001f7c3:	6a 01                	push   0x1
c001f7c5:	56                   	push   esi
c001f7c6:	53                   	push   ebx
c001f7c7:	55                   	push   ebp
c001f7c8:	57                   	push   edi
c001f7c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f7cd:	e8 70 fb ff ff       	call   c001f342 <ATA::access(unsigned long long, int, void*, bool)>
c001f7d2:	83 c4 20             	add    esp,0x20
c001f7d5:	85 c0                	test   eax,eax
c001f7d7:	0f 95 c0             	setne  al
c001f7da:	0f b6 c0             	movzx  eax,al
c001f7dd:	83 c4 0c             	add    esp,0xc
c001f7e0:	5b                   	pop    ebx
c001f7e1:	5e                   	pop    esi
c001f7e2:	5f                   	pop    edi
c001f7e3:	5d                   	pop    ebp
c001f7e4:	c3                   	ret    
c001f7e5:	90                   	nop

c001f7e6 <ATA::detectCHS()>:
c001f7e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f7ea:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f7f0:	c1 e0 06             	shl    eax,0x6
c001f7f3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f7f9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f803:	c7 44 24 04 5d 66 02 c0 	mov    DWORD PTR [esp+0x4],0xc002665d
c001f80b:	e9 4f 50 ff ff       	jmp    c001485f <Krnl::panic(char const*)>

c001f810 <ATA::open(int, int, void*)>:
c001f810:	53                   	push   ebx
c001f811:	83 ec 08             	sub    esp,0x8
c001f814:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f818:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f81c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f820:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f826:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f82c:	c1 e0 06             	shl    eax,0x6
c001f82f:	01 d0                	add    eax,edx
c001f831:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f838:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f83e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f845:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f84f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f855:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f85c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f863:	75 0c                	jne    c001f871 <ATA::open(int, int, void*)+0x61>
c001f865:	83 ec 0c             	sub    esp,0xc
c001f868:	53                   	push   ebx
c001f869:	e8 78 ff ff ff       	call   c001f7e6 <ATA::detectCHS()>
c001f86e:	83 c4 10             	add    esp,0x10
c001f871:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f877:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f87d:	c1 e0 06             	shl    eax,0x6
c001f880:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f887:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f891:	d1 e8                	shr    eax,1
c001f893:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f899:	6a 04                	push   0x4
c001f89b:	6a 0c                	push   0xc
c001f89d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8a4:	50                   	push   eax
c001f8a5:	52                   	push   edx
c001f8a6:	e8 07 e9 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8ab:	90                   	nop
c001f8ac:	90                   	nop
c001f8ad:	6a 00                	push   0x0
c001f8af:	6a 0c                	push   0xc
c001f8b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8b8:	50                   	push   eax
c001f8b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8bf:	e8 ee e8 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8c4:	83 c4 14             	add    esp,0x14
c001f8c7:	53                   	push   ebx
c001f8c8:	e8 0d ed fe ff       	call   c000e5da <PhysicalDisk::startCache()>
c001f8cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f8d0:	e8 41 0d ff ff       	call   c0010616 <createPartitionsForDisk(PhysicalDisk*)>
c001f8d5:	31 c0                	xor    eax,eax
c001f8d7:	83 c4 18             	add    esp,0x18
c001f8da:	5b                   	pop    ebx
c001f8db:	c3                   	ret    

c001f8dc <ATAPI::write(unsigned long long, int, void*)>:
c001f8dc:	b8 03 00 00 00       	mov    eax,0x3
c001f8e1:	c3                   	ret    

c001f8e2 <ATAPI::close(int, int, void*)>:
c001f8e2:	83 ec 0c             	sub    esp,0xc
c001f8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f8ef:	85 c0                	test   eax,eax
c001f8f1:	74 0c                	je     c001f8ff <ATAPI::close(int, int, void*)+0x1d>
c001f8f3:	83 ec 0c             	sub    esp,0xc
c001f8f6:	8b 10                	mov    edx,DWORD PTR [eax]
c001f8f8:	50                   	push   eax
c001f8f9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f8fc:	83 c4 10             	add    esp,0x10
c001f8ff:	31 c0                	xor    eax,eax
c001f901:	83 c4 0c             	add    esp,0xc
c001f904:	c3                   	ret    
c001f905:	90                   	nop

c001f906 <ATAPI::ATAPI()>:
c001f906:	83 ec 0c             	sub    esp,0xc
c001f909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90d:	83 ec 04             	sub    esp,0x4
c001f910:	68 00 08 00 00       	push   0x800
c001f915:	68 1d 69 02 c0       	push   0xc002691d
c001f91a:	50                   	push   eax
c001f91b:	e8 52 ec fe ff       	call   c000e572 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f920:	83 c4 10             	add    esp,0x10
c001f923:	ba b0 66 02 c0       	mov    edx,0xc00266b0
c001f928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92c:	89 10                	mov    DWORD PTR [eax],edx
c001f92e:	90                   	nop
c001f92f:	83 c4 0c             	add    esp,0xc
c001f932:	c3                   	ret    
c001f933:	90                   	nop

c001f934 <ATAPI::readyForCommand()>:
c001f934:	56                   	push   esi
c001f935:	53                   	push   ebx
c001f936:	53                   	push   ebx
c001f937:	31 db                	xor    ebx,ebx
c001f939:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f93d:	51                   	push   ecx
c001f93e:	6a 0c                	push   0xc
c001f940:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f947:	50                   	push   eax
c001f948:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f94e:	e8 1f e9 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001f953:	83 c4 10             	add    esp,0x10
c001f956:	a8 88                	test   al,0x88
c001f958:	74 25                	je     c001f97f <ATAPI::readyForCommand()+0x4b>
c001f95a:	43                   	inc    ebx
c001f95b:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f961:	7e da                	jle    c001f93d <ATAPI::readyForCommand()+0x9>
c001f963:	83 ec 0c             	sub    esp,0xc
c001f966:	68 5e 01 00 00       	push   0x15e
c001f96b:	e8 b8 8d ff ff       	call   c0018728 <milliTenthSleep(unsigned int)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f979:	75 c2                	jne    c001f93d <ATAPI::readyForCommand()+0x9>
c001f97b:	31 c0                	xor    eax,eax
c001f97d:	eb 02                	jmp    c001f981 <ATAPI::readyForCommand()+0x4d>
c001f97f:	b0 01                	mov    al,0x1
c001f981:	5a                   	pop    edx
c001f982:	5b                   	pop    ebx
c001f983:	5e                   	pop    esi
c001f984:	c3                   	ret    
c001f985:	90                   	nop

c001f986 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f986:	55                   	push   ebp
c001f987:	57                   	push   edi
c001f988:	56                   	push   esi
c001f989:	53                   	push   ebx
c001f98a:	83 ec 20             	sub    esp,0x20
c001f98d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f991:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001f995:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f999:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f99d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f9a1:	6a 01                	push   0x1
c001f9a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f9aa:	50                   	push   eax
c001f9ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f9b1:	e8 04 ea ff ff       	call   c001e3ba <IDE::enableIRQs(unsigned char, bool)>
c001f9b6:	5e                   	pop    esi
c001f9b7:	58                   	pop    eax
c001f9b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f9bf:	50                   	push   eax
c001f9c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f9c6:	e8 c1 e7 ff ff       	call   c001e18c <IDE::prepareInterrupt(unsigned char)>
c001f9cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f9ce:	e8 61 ff ff ff       	call   c001f934 <ATAPI::readyForCommand()>
c001f9d3:	83 c4 10             	add    esp,0x10
c001f9d6:	84 c0                	test   al,al
c001f9d8:	75 0a                	jne    c001f9e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001f9da:	bb 01 00 00 00       	mov    ebx,0x1
c001f9df:	e9 57 02 00 00       	jmp    c001fc3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f9e4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001f9ea:	c1 e0 04             	shl    eax,0x4
c001f9ed:	0f b6 c0             	movzx  eax,al
c001f9f0:	50                   	push   eax
c001f9f1:	6a 06                	push   0x6
c001f9f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f9fa:	50                   	push   eax
c001f9fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa01:	e8 ac e7 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa06:	6a 00                	push   0x0
c001fa08:	6a 01                	push   0x1
c001fa0a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa11:	50                   	push   eax
c001fa12:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa18:	e8 95 e7 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa1d:	83 c4 20             	add    esp,0x20
c001fa20:	0f b6 c3             	movzx  eax,bl
c001fa23:	0f b6 df             	movzx  ebx,bh
c001fa26:	50                   	push   eax
c001fa27:	6a 04                	push   0x4
c001fa29:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa30:	50                   	push   eax
c001fa31:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa37:	e8 76 e7 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa3c:	53                   	push   ebx
c001fa3d:	6a 05                	push   0x5
c001fa3f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa46:	50                   	push   eax
c001fa47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa4d:	e8 60 e7 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa52:	83 c4 20             	add    esp,0x20
c001fa55:	68 a0 00 00 00       	push   0xa0
c001fa5a:	6a 07                	push   0x7
c001fa5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa63:	50                   	push   eax
c001fa64:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa6a:	e8 43 e7 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa6f:	83 c4 0c             	add    esp,0xc
c001fa72:	6a 01                	push   0x1
c001fa74:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa7b:	50                   	push   eax
c001fa7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa82:	e8 c3 f1 ff ff       	call   c001ec4a <IDE::polling(unsigned char, unsigned int)>
c001fa87:	83 c4 10             	add    esp,0x10
c001fa8a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fa90:	84 c0                	test   al,al
c001fa92:	74 23                	je     c001fab7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fa94:	0f b6 d8             	movzx  ebx,al
c001fa97:	0f b6 d2             	movzx  edx,dl
c001fa9a:	53                   	push   ebx
c001fa9b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001faa2:	50                   	push   eax
c001faa3:	52                   	push   edx
c001faa4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001faaa:	e8 eb f0 ff ff       	call   c001eb9a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001faaf:	83 c4 10             	add    esp,0x10
c001fab2:	e9 84 01 00 00       	jmp    c001fc3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fab7:	0f b6 d2             	movzx  edx,dl
c001faba:	53                   	push   ebx
c001fabb:	53                   	push   ebx
c001fabc:	52                   	push   edx
c001fabd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fac3:	e8 d8 e6 ff ff       	call   c001e1a0 <IDE::getBase(unsigned char)>
c001fac8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001facc:	b9 06 00 00 00       	mov    ecx,0x6
c001fad1:	89 c2                	mov    edx,eax
c001fad3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fad6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fada:	83 c4 10             	add    esp,0x10
c001fadd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fae3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001faea:	85 db                	test   ebx,ebx
c001faec:	0f 84 ec 00 00 00    	je     c001fbde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001faf2:	51                   	push   ecx
c001faf3:	51                   	push   ecx
c001faf4:	52                   	push   edx
c001faf5:	50                   	push   eax
c001faf6:	e8 25 e8 ff ff       	call   c001e320 <IDE::waitInterrupt(unsigned char)>
c001fafb:	83 c4 10             	add    esp,0x10
c001fafe:	84 c0                	test   al,al
c001fb00:	0f 84 d4 fe ff ff    	je     c001f9da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fb06:	56                   	push   esi
c001fb07:	56                   	push   esi
c001fb08:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb0f:	50                   	push   eax
c001fb10:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb16:	e8 71 e6 ff ff       	call   c001e18c <IDE::prepareInterrupt(unsigned char)>
c001fb1b:	83 c4 0c             	add    esp,0xc
c001fb1e:	6a 04                	push   0x4
c001fb20:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb27:	50                   	push   eax
c001fb28:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb2e:	e8 3f e7 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001fb33:	83 c4 0c             	add    esp,0xc
c001fb36:	89 c6                	mov    esi,eax
c001fb38:	6a 05                	push   0x5
c001fb3a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb41:	50                   	push   eax
c001fb42:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb48:	e8 25 e7 ff ff       	call   c001e272 <IDE::read(unsigned char, unsigned char)>
c001fb4d:	89 f1                	mov    ecx,esi
c001fb4f:	0f b6 c0             	movzx  eax,al
c001fb52:	0f b6 f1             	movzx  esi,cl
c001fb55:	c1 e0 08             	shl    eax,0x8
c001fb58:	09 c6                	or     esi,eax
c001fb5a:	d1 fe                	sar    esi,1
c001fb5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fb60:	83 c4 10             	add    esp,0x10
c001fb63:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fb68:	74 41                	je     c001fbab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fb6a:	31 c9                	xor    ecx,ecx
c001fb6c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fb72:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fb79:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fb7d:	75 0a                	jne    c001fb89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fb7f:	01 c9                	add    ecx,ecx
c001fb81:	01 cd                	add    ebp,ecx
c001fb83:	4b                   	dec    ebx
c001fb84:	e9 54 ff ff ff       	jmp    c001fadd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fb89:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fb8e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fb92:	51                   	push   ecx
c001fb93:	51                   	push   ecx
c001fb94:	52                   	push   edx
c001fb95:	50                   	push   eax
c001fb96:	e8 05 e6 ff ff       	call   c001e1a0 <IDE::getBase(unsigned char)>
c001fb9b:	89 c2                	mov    edx,eax
c001fb9d:	89 f0                	mov    eax,esi
c001fb9f:	66 ef                	out    dx,ax
c001fba1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fba5:	83 c4 10             	add    esp,0x10
c001fba8:	41                   	inc    ecx
c001fba9:	eb c1                	jmp    c001fb6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fbab:	31 f6                	xor    esi,esi
c001fbad:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fbb3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fbba:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fbbe:	75 06                	jne    c001fbc6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fbc0:	01 f6                	add    esi,esi
c001fbc2:	01 f5                	add    ebp,esi
c001fbc4:	eb bd                	jmp    c001fb83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001fbc6:	51                   	push   ecx
c001fbc7:	51                   	push   ecx
c001fbc8:	52                   	push   edx
c001fbc9:	50                   	push   eax
c001fbca:	e8 d1 e5 ff ff       	call   c001e1a0 <IDE::getBase(unsigned char)>
c001fbcf:	89 c2                	mov    edx,eax
c001fbd1:	66 ed                	in     ax,dx
c001fbd3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fbd8:	83 c4 10             	add    esp,0x10
c001fbdb:	46                   	inc    esi
c001fbdc:	eb cf                	jmp    c001fbad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fbde:	51                   	push   ecx
c001fbdf:	51                   	push   ecx
c001fbe0:	52                   	push   edx
c001fbe1:	50                   	push   eax
c001fbe2:	e8 39 e7 ff ff       	call   c001e320 <IDE::waitInterrupt(unsigned char)>
c001fbe7:	83 c4 10             	add    esp,0x10
c001fbea:	84 c0                	test   al,al
c001fbec:	0f 84 e8 fd ff ff    	je     c001f9da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fbf2:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fbf7:	52                   	push   edx
c001fbf8:	52                   	push   edx
c001fbf9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc00:	50                   	push   eax
c001fc01:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc07:	e8 80 e5 ff ff       	call   c001e18c <IDE::prepareInterrupt(unsigned char)>
c001fc0c:	83 c4 10             	add    esp,0x10
c001fc0f:	50                   	push   eax
c001fc10:	50                   	push   eax
c001fc11:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc18:	50                   	push   eax
c001fc19:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc1f:	e8 7c e5 ff ff       	call   c001e1a0 <IDE::getBase(unsigned char)>
c001fc24:	8d 50 07             	lea    edx,[eax+0x7]
c001fc27:	ec                   	in     al,dx
c001fc28:	83 c4 10             	add    esp,0x10
c001fc2b:	a8 88                	test   al,0x88
c001fc2d:	74 0a                	je     c001fc39 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001fc2f:	4b                   	dec    ebx
c001fc30:	75 dd                	jne    c001fc0f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001fc32:	bb 02 00 00 00       	mov    ebx,0x2
c001fc37:	eb 02                	jmp    c001fc3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fc39:	31 db                	xor    ebx,ebx
c001fc3b:	83 c4 1c             	add    esp,0x1c
c001fc3e:	89 d8                	mov    eax,ebx
c001fc40:	5b                   	pop    ebx
c001fc41:	5e                   	pop    esi
c001fc42:	5f                   	pop    edi
c001fc43:	5d                   	pop    ebp
c001fc44:	c3                   	ret    
c001fc45:	90                   	nop

c001fc46 <ATAPI::diskRemoved()>:
c001fc46:	83 ec 18             	sub    esp,0x18
c001fc49:	68 29 69 02 c0       	push   0xc0026929
c001fc4e:	e8 60 d0 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001fc53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fc57:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001fc5e:	83 c4 1c             	add    esp,0x1c
c001fc61:	c3                   	ret    

c001fc62 <ATAPI::eject()>:
c001fc62:	57                   	push   edi
c001fc63:	b9 03 00 00 00       	mov    ecx,0x3
c001fc68:	53                   	push   ebx
c001fc69:	83 ec 14             	sub    esp,0x14
c001fc6c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fc70:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fc74:	fc                   	cld    
c001fc75:	31 c0                	xor    eax,eax
c001fc77:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fc79:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fc7e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fc83:	50                   	push   eax
c001fc84:	50                   	push   eax
c001fc85:	6a 00                	push   0x0
c001fc87:	6a 00                	push   0x0
c001fc89:	6a 00                	push   0x0
c001fc8b:	6a 02                	push   0x2
c001fc8d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fc91:	50                   	push   eax
c001fc92:	53                   	push   ebx
c001fc93:	e8 ee fc ff ff       	call   c001f986 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fc98:	83 c4 14             	add    esp,0x14
c001fc9b:	53                   	push   ebx
c001fc9c:	e8 a5 ff ff ff       	call   c001fc46 <ATAPI::diskRemoved()>
c001fca1:	83 c4 24             	add    esp,0x24
c001fca4:	31 c0                	xor    eax,eax
c001fca6:	5b                   	pop    ebx
c001fca7:	5f                   	pop    edi
c001fca8:	c3                   	ret    
c001fca9:	90                   	nop

c001fcaa <ATAPI::diskInserted()>:
c001fcaa:	53                   	push   ebx
c001fcab:	83 ec 14             	sub    esp,0x14
c001fcae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fcb2:	68 40 69 02 c0       	push   0xc0026940
c001fcb7:	e8 f7 cf fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001fcbc:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001fcc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcc6:	e8 0f e9 fe ff       	call   c000e5da <PhysicalDisk::startCache()>
c001fccb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001fccf:	83 c4 18             	add    esp,0x18
c001fcd2:	5b                   	pop    ebx
c001fcd3:	e9 3e 09 ff ff       	jmp    c0010616 <createPartitionsForDisk(PhysicalDisk*)>

c001fcd8 <ATAPI::detectMedia()>:
c001fcd8:	56                   	push   esi
c001fcd9:	53                   	push   ebx
c001fcda:	83 ec 28             	sub    esp,0x28
c001fcdd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fce1:	6a 0c                	push   0xc
c001fce3:	6a 00                	push   0x0
c001fce5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fce9:	56                   	push   esi
c001fcea:	e8 95 09 fe ff       	call   c0000684 <memset>
c001fcef:	58                   	pop    eax
c001fcf0:	5a                   	pop    edx
c001fcf1:	6a 00                	push   0x0
c001fcf3:	6a 00                	push   0x0
c001fcf5:	6a 00                	push   0x0
c001fcf7:	6a 00                	push   0x0
c001fcf9:	56                   	push   esi
c001fcfa:	53                   	push   ebx
c001fcfb:	e8 86 fc ff ff       	call   c001f986 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fd00:	83 c4 1c             	add    esp,0x1c
c001fd03:	6a 0c                	push   0xc
c001fd05:	6a 00                	push   0x0
c001fd07:	56                   	push   esi
c001fd08:	e8 77 09 fe ff       	call   c0000684 <memset>
c001fd0d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001fd12:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001fd17:	59                   	pop    ecx
c001fd18:	58                   	pop    eax
c001fd19:	6a 01                	push   0x1
c001fd1b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fd1f:	50                   	push   eax
c001fd20:	6a 00                	push   0x0
c001fd22:	6a 12                	push   0x12
c001fd24:	56                   	push   esi
c001fd25:	53                   	push   ebx
c001fd26:	e8 5b fc ff ff       	call   c001f986 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fd2b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001fd2f:	83 c4 20             	add    esp,0x20
c001fd32:	83 e0 7f             	and    eax,0x7f
c001fd35:	3c 70                	cmp    al,0x70
c001fd37:	74 15                	je     c001fd4e <ATAPI::detectMedia()+0x76>
c001fd39:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fd40:	75 0c                	jne    c001fd4e <ATAPI::detectMedia()+0x76>
c001fd42:	83 ec 0c             	sub    esp,0xc
c001fd45:	53                   	push   ebx
c001fd46:	e8 5f ff ff ff       	call   c001fcaa <ATAPI::diskInserted()>
c001fd4b:	83 c4 10             	add    esp,0x10
c001fd4e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fd52:	83 e0 0f             	and    eax,0xf
c001fd55:	3c 02                	cmp    al,0x2
c001fd57:	75 1b                	jne    c001fd74 <ATAPI::detectMedia()+0x9c>
c001fd59:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001fd5e:	75 2d                	jne    c001fd8d <ATAPI::detectMedia()+0xb5>
c001fd60:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fd67:	74 24                	je     c001fd8d <ATAPI::detectMedia()+0xb5>
c001fd69:	83 ec 0c             	sub    esp,0xc
c001fd6c:	53                   	push   ebx
c001fd6d:	e8 d4 fe ff ff       	call   c001fc46 <ATAPI::diskRemoved()>
c001fd72:	eb 16                	jmp    c001fd8a <ATAPI::detectMedia()+0xb2>
c001fd74:	84 c0                	test   al,al
c001fd76:	75 15                	jne    c001fd8d <ATAPI::detectMedia()+0xb5>
c001fd78:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fd7f:	75 0c                	jne    c001fd8d <ATAPI::detectMedia()+0xb5>
c001fd81:	83 ec 0c             	sub    esp,0xc
c001fd84:	53                   	push   ebx
c001fd85:	e8 20 ff ff ff       	call   c001fcaa <ATAPI::diskInserted()>
c001fd8a:	83 c4 10             	add    esp,0x10
c001fd8d:	83 c4 24             	add    esp,0x24
c001fd90:	5b                   	pop    ebx
c001fd91:	5e                   	pop    esi
c001fd92:	c3                   	ret    
c001fd93:	90                   	nop

c001fd94 <ATAPI::open(int, int, void*)>:
c001fd94:	53                   	push   ebx
c001fd95:	83 ec 08             	sub    esp,0x8
c001fd98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fd9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fda0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fda4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fdaa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fdb0:	c1 e0 06             	shl    eax,0x6
c001fdb3:	01 d0                	add    eax,edx
c001fdb5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001fdbc:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001fdc2:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001fdc9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fdd3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fdd9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001fde0:	6a 04                	push   0x4
c001fde2:	6a 0c                	push   0xc
c001fde4:	51                   	push   ecx
c001fde5:	52                   	push   edx
c001fde6:	e8 c7 e3 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdeb:	90                   	nop
c001fdec:	90                   	nop
c001fded:	6a 00                	push   0x0
c001fdef:	6a 0c                	push   0xc
c001fdf1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdf8:	50                   	push   eax
c001fdf9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdff:	e8 ae e3 ff ff       	call   c001e1b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe04:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fe0b:	83 c4 14             	add    esp,0x14
c001fe0e:	53                   	push   ebx
c001fe0f:	e8 c4 fe ff ff       	call   c001fcd8 <ATAPI::detectMedia()>
c001fe14:	31 c0                	xor    eax,eax
c001fe16:	83 c4 18             	add    esp,0x18
c001fe19:	5b                   	pop    ebx
c001fe1a:	c3                   	ret    
c001fe1b:	90                   	nop

c001fe1c <ATAPI::read(unsigned long long, int, void*)>:
c001fe1c:	55                   	push   ebp
c001fe1d:	57                   	push   edi
c001fe1e:	56                   	push   esi
c001fe1f:	53                   	push   ebx
c001fe20:	83 ec 1c             	sub    esp,0x1c
c001fe23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fe27:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fe2b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fe2f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001fe36:	74 41                	je     c001fe79 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001fe38:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fe3c:	b9 03 00 00 00       	mov    ecx,0x3
c001fe41:	fc                   	cld    
c001fe42:	31 c0                	xor    eax,eax
c001fe44:	86 fb                	xchg   bl,bh
c001fe46:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe48:	c1 c3 10             	rol    ebx,0x10
c001fe4b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fe50:	89 e8                	mov    eax,ebp
c001fe52:	86 fb                	xchg   bl,bh
c001fe54:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fe58:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001fe5c:	50                   	push   eax
c001fe5d:	50                   	push   eax
c001fe5e:	55                   	push   ebp
c001fe5f:	c1 e5 0b             	shl    ebp,0xb
c001fe62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001fe66:	6a 00                	push   0x0
c001fe68:	55                   	push   ebp
c001fe69:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fe6d:	50                   	push   eax
c001fe6e:	56                   	push   esi
c001fe6f:	e8 12 fb ff ff       	call   c001f986 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fe74:	83 c4 20             	add    esp,0x20
c001fe77:	eb 1a                	jmp    c001fe93 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001fe79:	83 ec 0c             	sub    esp,0xc
c001fe7c:	56                   	push   esi
c001fe7d:	e8 56 fe ff ff       	call   c001fcd8 <ATAPI::detectMedia()>
c001fe82:	83 c4 10             	add    esp,0x10
c001fe85:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001fe8c:	75 aa                	jne    c001fe38 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001fe8e:	b8 02 00 00 00       	mov    eax,0x2
c001fe93:	83 c4 1c             	add    esp,0x1c
c001fe96:	5b                   	pop    ebx
c001fe97:	5e                   	pop    esi
c001fe98:	5f                   	pop    edi
c001fe99:	5d                   	pop    ebp
c001fe9a:	c3                   	ret    
c001fe9b:	90                   	nop

c001fe9c <SATA::close(int, int, void*)>:
c001fe9c:	83 ec 0c             	sub    esp,0xc
c001fe9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fea9:	85 c0                	test   eax,eax
c001feab:	74 0c                	je     c001feb9 <SATA::close(int, int, void*)+0x1d>
c001fead:	83 ec 0c             	sub    esp,0xc
c001feb0:	8b 10                	mov    edx,DWORD PTR [eax]
c001feb2:	50                   	push   eax
c001feb3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001feb6:	83 c4 10             	add    esp,0x10
c001feb9:	31 c0                	xor    eax,eax
c001febb:	83 c4 0c             	add    esp,0xc
c001febe:	c3                   	ret    
c001febf:	90                   	nop

c001fec0 <SATA::powerSaving(PowerSavingLevel)>:
c001fec0:	c3                   	ret    
c001fec1:	90                   	nop

c001fec2 <SATA::open(int, int, void*)>:
c001fec2:	56                   	push   esi
c001fec3:	53                   	push   ebx
c001fec4:	51                   	push   ecx
c001fec5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fec9:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001fed0:	74 2d                	je     c001feff <SATA::open(int, int, void*)+0x3d>
c001fed2:	83 ec 0c             	sub    esp,0xc
c001fed5:	68 e0 66 02 c0       	push   0xc00266e0
c001feda:	e8 3e 9b fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001fedf:	83 c4 10             	add    esp,0x10
c001fee2:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001fee9:	75 14                	jne    c001feff <SATA::open(int, int, void*)+0x3d>
c001feeb:	e4 60                	in     al,0x60
c001feed:	3c 5a                	cmp    al,0x5a
c001feef:	74 04                	je     c001fef5 <SATA::open(int, int, void*)+0x33>
c001fef1:	3c 1c                	cmp    al,0x1c
c001fef3:	75 f6                	jne    c001feeb <SATA::open(int, int, void*)+0x29>
c001fef5:	e4 60                	in     al,0x60
c001fef7:	3c 5a                	cmp    al,0x5a
c001fef9:	74 fa                	je     c001fef5 <SATA::open(int, int, void*)+0x33>
c001fefb:	3c 1c                	cmp    al,0x1c
c001fefd:	74 f6                	je     c001fef5 <SATA::open(int, int, void*)+0x33>
c001feff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff03:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ff0d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ff13:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ff1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ff21:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ff2b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ff31:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ff38:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001ff3f:	74 2d                	je     c001ff6e <SATA::open(int, int, void*)+0xac>
c001ff41:	83 ec 0c             	sub    esp,0xc
c001ff44:	68 ed 66 02 c0       	push   0xc00266ed
c001ff49:	e8 cf 9a fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001ff4e:	83 c4 10             	add    esp,0x10
c001ff51:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001ff58:	75 14                	jne    c001ff6e <SATA::open(int, int, void*)+0xac>
c001ff5a:	e4 60                	in     al,0x60
c001ff5c:	3c 1c                	cmp    al,0x1c
c001ff5e:	74 04                	je     c001ff64 <SATA::open(int, int, void*)+0xa2>
c001ff60:	3c 5a                	cmp    al,0x5a
c001ff62:	75 f6                	jne    c001ff5a <SATA::open(int, int, void*)+0x98>
c001ff64:	e4 60                	in     al,0x60
c001ff66:	3c 5a                	cmp    al,0x5a
c001ff68:	74 fa                	je     c001ff64 <SATA::open(int, int, void*)+0xa2>
c001ff6a:	3c 1c                	cmp    al,0x1c
c001ff6c:	74 f6                	je     c001ff64 <SATA::open(int, int, void*)+0xa2>
c001ff6e:	e8 07 a1 fe ff       	call   c000a07a <Phys::allocatePage()>
c001ff73:	89 c6                	mov    esi,eax
c001ff75:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ff7b:	81 c6 00 10 00 00    	add    esi,0x1000
c001ff81:	e8 f4 a0 fe ff       	call   c000a07a <Phys::allocatePage()>
c001ff86:	39 c6                	cmp    esi,eax
c001ff88:	74 10                	je     c001ff9a <SATA::open(int, int, void*)+0xd8>
c001ff8a:	83 ec 0c             	sub    esp,0xc
c001ff8d:	68 fa 66 02 c0       	push   0xc00266fa
c001ff92:	e8 c8 48 ff ff       	call   c001485f <Krnl::panic(char const*)>
c001ff97:	83 c4 10             	add    esp,0x10
c001ff9a:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001ffa1:	74 2d                	je     c001ffd0 <SATA::open(int, int, void*)+0x10e>
c001ffa3:	83 ec 0c             	sub    esp,0xc
c001ffa6:	68 0e 67 02 c0       	push   0xc002670e
c001ffab:	e8 6d 9a fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001ffb0:	83 c4 10             	add    esp,0x10
c001ffb3:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c001ffba:	75 14                	jne    c001ffd0 <SATA::open(int, int, void*)+0x10e>
c001ffbc:	e4 60                	in     al,0x60
c001ffbe:	3c 1c                	cmp    al,0x1c
c001ffc0:	74 04                	je     c001ffc6 <SATA::open(int, int, void*)+0x104>
c001ffc2:	3c 5a                	cmp    al,0x5a
c001ffc4:	75 f6                	jne    c001ffbc <SATA::open(int, int, void*)+0xfa>
c001ffc6:	e4 60                	in     al,0x60
c001ffc8:	3c 5a                	cmp    al,0x5a
c001ffca:	74 fa                	je     c001ffc6 <SATA::open(int, int, void*)+0x104>
c001ffcc:	3c 1c                	cmp    al,0x1c
c001ffce:	74 f6                	je     c001ffc6 <SATA::open(int, int, void*)+0x104>
c001ffd0:	83 ec 0c             	sub    esp,0xc
c001ffd3:	6a 02                	push   0x2
c001ffd5:	e8 b3 b9 fe ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c001ffda:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ffe0:	6a 03                	push   0x3
c001ffe2:	50                   	push   eax
c001ffe3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ffe9:	ff 35 30 7c 02 c0    	push   DWORD PTR ds:0xc0027c30
c001ffef:	e8 40 c0 fe ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fff4:	83 c4 20             	add    esp,0x20
c001fff7:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c001fffe:	74 2d                	je     c002002d <SATA::open(int, int, void*)+0x16b>
c0020000:	83 ec 0c             	sub    esp,0xc
c0020003:	68 1b 67 02 c0       	push   0xc002671b
c0020008:	e8 10 9a fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c002000d:	83 c4 10             	add    esp,0x10
c0020010:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0020017:	75 14                	jne    c002002d <SATA::open(int, int, void*)+0x16b>
c0020019:	e4 60                	in     al,0x60
c002001b:	3c 1c                	cmp    al,0x1c
c002001d:	74 04                	je     c0020023 <SATA::open(int, int, void*)+0x161>
c002001f:	3c 5a                	cmp    al,0x5a
c0020021:	75 f6                	jne    c0020019 <SATA::open(int, int, void*)+0x157>
c0020023:	e4 60                	in     al,0x60
c0020025:	3c 5a                	cmp    al,0x5a
c0020027:	74 fa                	je     c0020023 <SATA::open(int, int, void*)+0x161>
c0020029:	3c 1c                	cmp    al,0x1c
c002002b:	74 f6                	je     c0020023 <SATA::open(int, int, void*)+0x161>
c002002d:	83 ec 0c             	sub    esp,0xc
c0020030:	53                   	push   ebx
c0020031:	e8 a4 e5 fe ff       	call   c000e5da <PhysicalDisk::startCache()>
c0020036:	83 c4 10             	add    esp,0x10
c0020039:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0020040:	74 2d                	je     c002006f <SATA::open(int, int, void*)+0x1ad>
c0020042:	83 ec 0c             	sub    esp,0xc
c0020045:	68 28 67 02 c0       	push   0xc0026728
c002004a:	e8 ce 99 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c002004f:	83 c4 10             	add    esp,0x10
c0020052:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0020059:	75 14                	jne    c002006f <SATA::open(int, int, void*)+0x1ad>
c002005b:	e4 60                	in     al,0x60
c002005d:	3c 1c                	cmp    al,0x1c
c002005f:	74 04                	je     c0020065 <SATA::open(int, int, void*)+0x1a3>
c0020061:	3c 5a                	cmp    al,0x5a
c0020063:	75 f6                	jne    c002005b <SATA::open(int, int, void*)+0x199>
c0020065:	e4 60                	in     al,0x60
c0020067:	3c 5a                	cmp    al,0x5a
c0020069:	74 fa                	je     c0020065 <SATA::open(int, int, void*)+0x1a3>
c002006b:	3c 1c                	cmp    al,0x1c
c002006d:	74 f6                	je     c0020065 <SATA::open(int, int, void*)+0x1a3>
c002006f:	83 ec 0c             	sub    esp,0xc
c0020072:	53                   	push   ebx
c0020073:	e8 9e 05 ff ff       	call   c0010616 <createPartitionsForDisk(PhysicalDisk*)>
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0020082:	74 2d                	je     c00200b1 <SATA::open(int, int, void*)+0x1ef>
c0020084:	83 ec 0c             	sub    esp,0xc
c0020087:	68 35 67 02 c0       	push   0xc0026735
c002008c:	e8 8c 99 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020091:	83 c4 10             	add    esp,0x10
c0020094:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c002009b:	75 14                	jne    c00200b1 <SATA::open(int, int, void*)+0x1ef>
c002009d:	e4 60                	in     al,0x60
c002009f:	3c 1c                	cmp    al,0x1c
c00200a1:	74 04                	je     c00200a7 <SATA::open(int, int, void*)+0x1e5>
c00200a3:	3c 5a                	cmp    al,0x5a
c00200a5:	75 f6                	jne    c002009d <SATA::open(int, int, void*)+0x1db>
c00200a7:	e4 60                	in     al,0x60
c00200a9:	3c 5a                	cmp    al,0x5a
c00200ab:	74 fa                	je     c00200a7 <SATA::open(int, int, void*)+0x1e5>
c00200ad:	3c 1c                	cmp    al,0x1c
c00200af:	74 f6                	je     c00200a7 <SATA::open(int, int, void*)+0x1e5>
c00200b1:	5a                   	pop    edx
c00200b2:	31 c0                	xor    eax,eax
c00200b4:	5b                   	pop    ebx
c00200b5:	5e                   	pop    esi
c00200b6:	c3                   	ret    
c00200b7:	90                   	nop

c00200b8 <SATA::SATA()>:
c00200b8:	83 ec 0c             	sub    esp,0xc
c00200bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200bf:	83 ec 04             	sub    esp,0x4
c00200c2:	68 00 02 00 00       	push   0x200
c00200c7:	68 42 67 02 c0       	push   0xc0026742
c00200cc:	50                   	push   eax
c00200cd:	e8 a0 e4 fe ff       	call   c000e572 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00200d2:	83 c4 10             	add    esp,0x10
c00200d5:	ba ec 68 02 c0       	mov    edx,0xc00268ec
c00200da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200de:	89 10                	mov    DWORD PTR [eax],edx
c00200e0:	90                   	nop
c00200e1:	83 c4 0c             	add    esp,0xc
c00200e4:	c3                   	ret    
c00200e5:	90                   	nop

c00200e6 <SATA::access(unsigned long long, int, void*, bool)>:
c00200e6:	55                   	push   ebp
c00200e7:	57                   	push   edi
c00200e8:	56                   	push   esi
c00200e9:	53                   	push   ebx
c00200ea:	83 ec 2c             	sub    esp,0x2c
c00200ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00200f1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00200f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00200f9:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0020100:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020104:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020108:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002010c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020110:	75 19                	jne    c002012b <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020112:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020117:	7e 41                	jle    c002015a <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020119:	83 ec 0c             	sub    esp,0xc
c002011c:	68 61 67 02 c0       	push   0xc0026761
c0020121:	e8 39 47 ff ff       	call   c001485f <Krnl::panic(char const*)>
c0020126:	83 c4 10             	add    esp,0x10
c0020129:	eb 2f                	jmp    c002015a <SATA::access(unsigned long long, int, void*, bool)+0x74>
c002012b:	83 ec 0c             	sub    esp,0xc
c002012e:	68 52 67 02 c0       	push   0xc0026752
c0020133:	e8 e5 98 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020138:	83 c4 10             	add    esp,0x10
c002013b:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0020142:	75 ce                	jne    c0020112 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020144:	e4 60                	in     al,0x60
c0020146:	3c 1c                	cmp    al,0x1c
c0020148:	74 04                	je     c002014e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c002014a:	3c 5a                	cmp    al,0x5a
c002014c:	75 f6                	jne    c0020144 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c002014e:	e4 60                	in     al,0x60
c0020150:	3c 5a                	cmp    al,0x5a
c0020152:	74 fa                	je     c002014e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020154:	3c 1c                	cmp    al,0x1c
c0020156:	74 f6                	je     c002014e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020158:	eb b8                	jmp    c0020112 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c002015a:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0020161:	75 29                	jne    c002018c <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020163:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020169:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002016f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020175:	8d 75 02             	lea    esi,[ebp+0x2]
c0020178:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002017c:	c1 e6 07             	shl    esi,0x7
c002017f:	01 c6                	add    esi,eax
c0020181:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0020188:	74 4a                	je     c00201d4 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c002018a:	eb 2f                	jmp    c00201bb <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c002018c:	83 ec 0c             	sub    esp,0xc
c002018f:	68 9a 67 02 c0       	push   0xc002679a
c0020194:	e8 84 98 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020199:	83 c4 10             	add    esp,0x10
c002019c:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c00201a3:	75 be                	jne    c0020163 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c00201a5:	e4 60                	in     al,0x60
c00201a7:	3c 1c                	cmp    al,0x1c
c00201a9:	74 04                	je     c00201af <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00201ab:	3c 5a                	cmp    al,0x5a
c00201ad:	75 f6                	jne    c00201a5 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c00201af:	e4 60                	in     al,0x60
c00201b1:	3c 5a                	cmp    al,0x5a
c00201b3:	74 fa                	je     c00201af <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00201b5:	3c 1c                	cmp    al,0x1c
c00201b7:	74 f6                	je     c00201af <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00201b9:	eb a8                	jmp    c0020163 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c00201bb:	83 ec 0c             	sub    esp,0xc
c00201be:	68 a9 67 02 c0       	push   0xc00267a9
c00201c3:	e8 55 98 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00201c8:	83 c4 10             	add    esp,0x10
c00201cb:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c00201d2:	74 3d                	je     c0020211 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c00201d4:	89 e8                	mov    eax,ebp
c00201d6:	c1 e0 07             	shl    eax,0x7
c00201d9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00201dd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00201e7:	52                   	push   edx
c00201e8:	52                   	push   edx
c00201e9:	56                   	push   esi
c00201ea:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00201f0:	e8 35 eb ff ff       	call   c001ed2a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00201f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	b8 01 00 00 00       	mov    eax,0x1
c0020201:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020206:	75 1d                	jne    c0020225 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020208:	e9 c8 04 00 00       	jmp    c00206d5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c002020d:	3c 5a                	cmp    al,0x5a
c002020f:	74 0c                	je     c002021d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020211:	e4 60                	in     al,0x60
c0020213:	3c 1c                	cmp    al,0x1c
c0020215:	75 f6                	jne    c002020d <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020217:	eb 04                	jmp    c002021d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020219:	3c 1c                	cmp    al,0x1c
c002021b:	75 b7                	jne    c00201d4 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c002021d:	e4 60                	in     al,0x60
c002021f:	3c 5a                	cmp    al,0x5a
c0020221:	74 fa                	je     c002021d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020223:	eb f4                	jmp    c0020219 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020225:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c002022c:	74 3a                	je     c0020268 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c002022e:	83 ec 0c             	sub    esp,0xc
c0020231:	68 b8 67 02 c0       	push   0xc00267b8
c0020236:	e8 e2 97 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c002023b:	83 c4 10             	add    esp,0x10
c002023e:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0020245:	74 0d                	je     c0020254 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020247:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002024c:	74 34                	je     c0020282 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c002024e:	eb 1f                	jmp    c002026f <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020250:	3c 1c                	cmp    al,0x1c
c0020252:	74 0c                	je     c0020260 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020254:	e4 60                	in     al,0x60
c0020256:	3c 5a                	cmp    al,0x5a
c0020258:	75 f6                	jne    c0020250 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c002025a:	eb 04                	jmp    c0020260 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c002025c:	3c 1c                	cmp    al,0x1c
c002025e:	75 e7                	jne    c0020247 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020260:	e4 60                	in     al,0x60
c0020262:	3c 5a                	cmp    al,0x5a
c0020264:	74 fa                	je     c0020260 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020266:	eb f4                	jmp    c002025c <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020268:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002026d:	74 1c                	je     c002028b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002026f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020273:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020279:	c1 e1 09             	shl    ecx,0x9
c002027c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020280:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020282:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0020289:	75 55                	jne    c00202e0 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c002028b:	8d 45 02             	lea    eax,[ebp+0x2]
c002028e:	c1 e0 07             	shl    eax,0x7
c0020291:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020295:	8b 38                	mov    edi,DWORD PTR [eax]
c0020297:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002029d:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c00202a3:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c00202a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ad:	c1 e0 05             	shl    eax,0x5
c00202b0:	01 c7                	add    edi,eax
c00202b2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00202b6:	83 e0 01             	and    eax,0x1
c00202b9:	c1 e0 06             	shl    eax,0x6
c00202bc:	88 c2                	mov    dl,al
c00202be:	8a 07                	mov    al,BYTE PTR [edi]
c00202c0:	83 e0 bf             	and    eax,0xffffffbf
c00202c3:	09 d0                	or     eax,edx
c00202c5:	88 07                	mov    BYTE PTR [edi],al
c00202c7:	8b 07                	mov    eax,DWORD PTR [edi]
c00202c9:	25 e0 ff 00 00       	and    eax,0xffe0
c00202ce:	0d 05 00 01 00       	or     eax,0x10005
c00202d3:	89 07                	mov    DWORD PTR [edi],eax
c00202d5:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c00202dc:	74 4d                	je     c002032b <SATA::access(unsigned long long, int, void*, bool)+0x245>
c00202de:	eb 32                	jmp    c0020312 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c00202e0:	83 ec 0c             	sub    esp,0xc
c00202e3:	68 c7 67 02 c0       	push   0xc00267c7
c00202e8:	e8 30 97 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00202ed:	83 c4 10             	add    esp,0x10
c00202f0:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c00202f7:	75 92                	jne    c002028b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00202f9:	e4 60                	in     al,0x60
c00202fb:	3c 1c                	cmp    al,0x1c
c00202fd:	74 04                	je     c0020303 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00202ff:	3c 5a                	cmp    al,0x5a
c0020301:	75 f6                	jne    c00202f9 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020303:	e4 60                	in     al,0x60
c0020305:	3c 5a                	cmp    al,0x5a
c0020307:	74 fa                	je     c0020303 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020309:	3c 1c                	cmp    al,0x1c
c002030b:	74 f6                	je     c0020303 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002030d:	e9 79 ff ff ff       	jmp    c002028b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020312:	83 ec 0c             	sub    esp,0xc
c0020315:	68 d6 67 02 c0       	push   0xc00267d6
c002031a:	e8 fe 96 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c002031f:	83 c4 10             	add    esp,0x10
c0020322:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0020329:	74 3b                	je     c0020366 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002032b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020331:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020337:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c002033d:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020340:	50                   	push   eax
c0020341:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020345:	83 c0 08             	add    eax,0x8
c0020348:	c1 e0 04             	shl    eax,0x4
c002034b:	50                   	push   eax
c002034c:	6a 00                	push   0x0
c002034e:	56                   	push   esi
c002034f:	e8 30 03 fe ff       	call   c0000684 <memset>
c0020354:	83 c4 10             	add    esp,0x10
c0020357:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c002035e:	74 33                	je     c0020393 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020360:	eb 18                	jmp    c002037a <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020362:	3c 1c                	cmp    al,0x1c
c0020364:	74 0c                	je     c0020372 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020366:	e4 60                	in     al,0x60
c0020368:	3c 5a                	cmp    al,0x5a
c002036a:	75 f6                	jne    c0020362 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c002036c:	eb 04                	jmp    c0020372 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c002036e:	3c 1c                	cmp    al,0x1c
c0020370:	75 b9                	jne    c002032b <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020372:	e4 60                	in     al,0x60
c0020374:	3c 5a                	cmp    al,0x5a
c0020376:	74 fa                	je     c0020372 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020378:	eb f4                	jmp    c002036e <SATA::access(unsigned long long, int, void*, bool)+0x288>
c002037a:	83 ec 0c             	sub    esp,0xc
c002037d:	68 e5 67 02 c0       	push   0xc00267e5
c0020382:	e8 96 96 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020387:	83 c4 10             	add    esp,0x10
c002038a:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0020391:	74 48                	je     c00203db <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020393:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020399:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002039f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00203a3:	c1 e0 09             	shl    eax,0x9
c00203a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00203aa:	48                   	dec    eax
c00203ab:	25 ff ff 3f 00       	and    eax,0x3fffff
c00203b0:	89 c2                	mov    edx,eax
c00203b2:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00203b8:	25 00 00 c0 ff       	and    eax,0xffc00000
c00203bd:	09 d0                	or     eax,edx
c00203bf:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00203c5:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00203cc:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c00203d3:	74 33                	je     c0020408 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c00203d5:	eb 18                	jmp    c00203ef <SATA::access(unsigned long long, int, void*, bool)+0x309>
c00203d7:	3c 1c                	cmp    al,0x1c
c00203d9:	74 0c                	je     c00203e7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00203db:	e4 60                	in     al,0x60
c00203dd:	3c 5a                	cmp    al,0x5a
c00203df:	75 f6                	jne    c00203d7 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c00203e1:	eb 04                	jmp    c00203e7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00203e3:	3c 1c                	cmp    al,0x1c
c00203e5:	75 ac                	jne    c0020393 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00203e7:	e4 60                	in     al,0x60
c00203e9:	3c 5a                	cmp    al,0x5a
c00203eb:	74 fa                	je     c00203e7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00203ed:	eb f4                	jmp    c00203e3 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c00203ef:	83 ec 0c             	sub    esp,0xc
c00203f2:	68 f4 67 02 c0       	push   0xc00267f4
c00203f7:	e8 21 96 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00203fc:	83 c4 10             	add    esp,0x10
c00203ff:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0020406:	74 63                	je     c002046b <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020408:	66 8b 06             	mov    ax,WORD PTR [esi]
c002040b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002040f:	66 25 00 7f          	and    ax,0x7f00
c0020413:	66 0d 27 80          	or     ax,0x8027
c0020417:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002041c:	66 89 06             	mov    WORD PTR [esi],ax
c002041f:	19 c0                	sbb    eax,eax
c0020421:	83 e0 f0             	and    eax,0xfffffff0
c0020424:	83 c0 35             	add    eax,0x35
c0020427:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002042a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002042e:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020432:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020436:	c1 e8 10             	shr    eax,0x10
c0020439:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002043c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020440:	c1 e8 18             	shr    eax,0x18
c0020443:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c002044a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002044d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020451:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020454:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020458:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002045b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002045f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020463:	74 33                	je     c0020498 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020465:	eb 18                	jmp    c002047f <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020467:	3c 1c                	cmp    al,0x1c
c0020469:	74 0c                	je     c0020477 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002046b:	e4 60                	in     al,0x60
c002046d:	3c 5a                	cmp    al,0x5a
c002046f:	75 f6                	jne    c0020467 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020471:	eb 04                	jmp    c0020477 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020473:	3c 1c                	cmp    al,0x1c
c0020475:	75 91                	jne    c0020408 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020477:	e4 60                	in     al,0x60
c0020479:	3c 5a                	cmp    al,0x5a
c002047b:	74 fa                	je     c0020477 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002047d:	eb f4                	jmp    c0020473 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c002047f:	83 ec 0c             	sub    esp,0xc
c0020482:	68 03 68 02 c0       	push   0xc0026803
c0020487:	e8 91 95 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c002048c:	83 c4 10             	add    esp,0x10
c002048f:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0020496:	74 11                	je     c00204a9 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020498:	89 e8                	mov    eax,ebp
c002049a:	31 f6                	xor    esi,esi
c002049c:	c1 e0 07             	shl    eax,0x7
c002049f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00204a3:	eb 21                	jmp    c00204c6 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c00204a5:	3c 1c                	cmp    al,0x1c
c00204a7:	74 0c                	je     c00204b5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00204a9:	e4 60                	in     al,0x60
c00204ab:	3c 5a                	cmp    al,0x5a
c00204ad:	75 f6                	jne    c00204a5 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c00204af:	eb 04                	jmp    c00204b5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00204b1:	3c 1c                	cmp    al,0x1c
c00204b3:	75 e3                	jne    c0020498 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00204b5:	e4 60                	in     al,0x60
c00204b7:	3c 5a                	cmp    al,0x5a
c00204b9:	74 fa                	je     c00204b5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00204bb:	eb f4                	jmp    c00204b1 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c00204bd:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00204c3:	74 0c                	je     c00204d1 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c00204c5:	46                   	inc    esi
c00204c6:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c00204cc:	80 e2 88             	and    dl,0x88
c00204cf:	75 ec                	jne    c00204bd <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c00204d1:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c00204d8:	74 3d                	je     c0020517 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c00204da:	83 ec 0c             	sub    esp,0xc
c00204dd:	68 12 68 02 c0       	push   0xc0026812
c00204e2:	e8 36 95 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00204e7:	8b 15 20 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b20
c00204ed:	83 c4 10             	add    esp,0x10
c00204f0:	f6 c2 80             	test   dl,0x80
c00204f3:	74 0e                	je     c0020503 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c00204f5:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00204fb:	75 2f                	jne    c002052c <SATA::access(unsigned long long, int, void*, bool)+0x446>
c00204fd:	eb 20                	jmp    c002051f <SATA::access(unsigned long long, int, void*, bool)+0x439>
c00204ff:	3c 1c                	cmp    al,0x1c
c0020501:	74 0c                	je     c002050f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020503:	e4 60                	in     al,0x60
c0020505:	3c 5a                	cmp    al,0x5a
c0020507:	75 f6                	jne    c00204ff <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020509:	eb 04                	jmp    c002050f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002050b:	3c 1c                	cmp    al,0x1c
c002050d:	75 e6                	jne    c00204f5 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c002050f:	e4 60                	in     al,0x60
c0020511:	3c 5a                	cmp    al,0x5a
c0020513:	74 fa                	je     c002050f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020515:	eb f4                	jmp    c002050b <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020517:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002051d:	75 13                	jne    c0020532 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002051f:	83 ec 0c             	sub    esp,0xc
c0020522:	68 22 68 02 c0       	push   0xc0026822
c0020527:	e9 d2 00 00 00       	jmp    c00205fe <SATA::access(unsigned long long, int, void*, bool)+0x518>
c002052c:	0f ba e2 0b          	bt     edx,0xb
c0020530:	72 25                	jb     c0020557 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0020532:	be 01 00 00 00       	mov    esi,0x1
c0020537:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002053b:	89 e8                	mov    eax,ebp
c002053d:	d3 e6                	shl    esi,cl
c002053f:	c1 e0 07             	shl    eax,0x7
c0020542:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020546:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c002054d:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020553:	74 4a                	je     c002059f <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020555:	eb 2f                	jmp    c0020586 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020557:	83 ec 0c             	sub    esp,0xc
c002055a:	68 30 68 02 c0       	push   0xc0026830
c002055f:	e8 b9 94 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020564:	83 c4 10             	add    esp,0x10
c0020567:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c002056e:	75 c2                	jne    c0020532 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020570:	e4 60                	in     al,0x60
c0020572:	3c 5a                	cmp    al,0x5a
c0020574:	74 04                	je     c002057a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020576:	3c 1c                	cmp    al,0x1c
c0020578:	75 f6                	jne    c0020570 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c002057a:	e4 60                	in     al,0x60
c002057c:	3c 5a                	cmp    al,0x5a
c002057e:	74 fa                	je     c002057a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020580:	3c 1c                	cmp    al,0x1c
c0020582:	74 f6                	je     c002057a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020584:	eb ac                	jmp    c0020532 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020586:	83 ec 0c             	sub    esp,0xc
c0020589:	68 40 68 02 c0       	push   0xc0026840
c002058e:	e8 8a 94 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020593:	83 c4 10             	add    esp,0x10
c0020596:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c002059d:	74 0f                	je     c00205ae <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c002059f:	89 e8                	mov    eax,ebp
c00205a1:	c1 e0 07             	shl    eax,0x7
c00205a4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00205a8:	eb 24                	jmp    c00205ce <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c00205aa:	3c 1c                	cmp    al,0x1c
c00205ac:	74 0c                	je     c00205ba <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00205ae:	e4 60                	in     al,0x60
c00205b0:	3c 5a                	cmp    al,0x5a
c00205b2:	75 f6                	jne    c00205aa <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c00205b4:	eb 04                	jmp    c00205ba <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00205b6:	3c 1c                	cmp    al,0x1c
c00205b8:	75 e5                	jne    c002059f <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00205ba:	e4 60                	in     al,0x60
c00205bc:	3c 5a                	cmp    al,0x5a
c00205be:	74 fa                	je     c00205ba <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00205c0:	eb f4                	jmp    c00205b6 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c00205c2:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c00205c8:	0f ba e2 1e          	bt     edx,0x1e
c00205cc:	72 28                	jb     c00205f6 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c00205ce:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c00205d4:	85 d6                	test   esi,edx
c00205d6:	75 ea                	jne    c00205c2 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c00205d8:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c00205df:	75 2f                	jne    c0020610 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c00205e1:	89 e8                	mov    eax,ebp
c00205e3:	c1 e0 07             	shl    eax,0x7
c00205e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00205ea:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00205f0:	0f ba e0 1e          	bt     eax,0x1e
c00205f4:	73 49                	jae    c002063f <SATA::access(unsigned long long, int, void*, bool)+0x559>
c00205f6:	83 ec 0c             	sub    esp,0xc
c00205f9:	68 50 68 02 c0       	push   0xc0026850
c00205fe:	e8 5c 42 ff ff       	call   c001485f <Krnl::panic(char const*)>
c0020603:	83 c4 10             	add    esp,0x10
c0020606:	b8 01 00 00 00       	mov    eax,0x1
c002060b:	e9 c5 00 00 00       	jmp    c00206d5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020610:	83 ec 0c             	sub    esp,0xc
c0020613:	68 61 68 02 c0       	push   0xc0026861
c0020618:	e8 00 94 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c002061d:	83 c4 10             	add    esp,0x10
c0020620:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0020627:	75 b8                	jne    c00205e1 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020629:	e4 60                	in     al,0x60
c002062b:	3c 5a                	cmp    al,0x5a
c002062d:	74 04                	je     c0020633 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002062f:	3c 1c                	cmp    al,0x1c
c0020631:	75 f6                	jne    c0020629 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020633:	e4 60                	in     al,0x60
c0020635:	3c 5a                	cmp    al,0x5a
c0020637:	74 fa                	je     c0020633 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020639:	3c 1c                	cmp    al,0x1c
c002063b:	74 f6                	je     c0020633 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002063d:	eb a2                	jmp    c00205e1 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c002063f:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0020646:	74 3a                	je     c0020682 <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020648:	83 ec 0c             	sub    esp,0xc
c002064b:	68 71 68 02 c0       	push   0xc0026871
c0020650:	e8 c8 93 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020655:	83 c4 10             	add    esp,0x10
c0020658:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c002065f:	74 0d                	je     c002066e <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020661:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020666:	75 31                	jne    c0020699 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020668:	eb 1f                	jmp    c0020689 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c002066a:	3c 1c                	cmp    al,0x1c
c002066c:	74 0c                	je     c002067a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002066e:	e4 60                	in     al,0x60
c0020670:	3c 5a                	cmp    al,0x5a
c0020672:	75 f6                	jne    c002066a <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020674:	eb 04                	jmp    c002067a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020676:	3c 1c                	cmp    al,0x1c
c0020678:	75 e7                	jne    c0020661 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c002067a:	e4 60                	in     al,0x60
c002067c:	3c 5a                	cmp    al,0x5a
c002067e:	74 fa                	je     c002067a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020680:	eb f4                	jmp    c0020676 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0020682:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020687:	75 19                	jne    c00206a2 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020689:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002068f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020693:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020697:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020699:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c00206a0:	75 04                	jne    c00206a6 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c00206a2:	31 c0                	xor    eax,eax
c00206a4:	eb 2f                	jmp    c00206d5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00206a6:	83 ec 0c             	sub    esp,0xc
c00206a9:	68 81 68 02 c0       	push   0xc0026881
c00206ae:	e8 6a 93 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00206b3:	83 c4 10             	add    esp,0x10
c00206b6:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c00206bd:	75 e3                	jne    c00206a2 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00206bf:	e4 60                	in     al,0x60
c00206c1:	3c 1c                	cmp    al,0x1c
c00206c3:	74 04                	je     c00206c9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00206c5:	3c 5a                	cmp    al,0x5a
c00206c7:	75 f6                	jne    c00206bf <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c00206c9:	e4 60                	in     al,0x60
c00206cb:	3c 5a                	cmp    al,0x5a
c00206cd:	74 fa                	je     c00206c9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00206cf:	3c 1c                	cmp    al,0x1c
c00206d1:	74 f6                	je     c00206c9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00206d3:	eb cd                	jmp    c00206a2 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00206d5:	83 c4 2c             	add    esp,0x2c
c00206d8:	5b                   	pop    ebx
c00206d9:	5e                   	pop    esi
c00206da:	5f                   	pop    edi
c00206db:	5d                   	pop    ebp
c00206dc:	c3                   	ret    
c00206dd:	90                   	nop

c00206de <SATA::read(unsigned long long, int, void*)>:
c00206de:	55                   	push   ebp
c00206df:	57                   	push   edi
c00206e0:	56                   	push   esi
c00206e1:	53                   	push   ebx
c00206e2:	83 ec 0c             	sub    esp,0xc
c00206e5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00206e9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00206ed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00206f1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00206f5:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c00206fc:	74 2d                	je     c002072b <SATA::read(unsigned long long, int, void*)+0x4d>
c00206fe:	83 ec 0c             	sub    esp,0xc
c0020701:	68 91 68 02 c0       	push   0xc0026891
c0020706:	e8 12 93 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c002070b:	83 c4 10             	add    esp,0x10
c002070e:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0020715:	75 14                	jne    c002072b <SATA::read(unsigned long long, int, void*)+0x4d>
c0020717:	e4 60                	in     al,0x60
c0020719:	3c 1c                	cmp    al,0x1c
c002071b:	74 04                	je     c0020721 <SATA::read(unsigned long long, int, void*)+0x43>
c002071d:	3c 5a                	cmp    al,0x5a
c002071f:	75 f6                	jne    c0020717 <SATA::read(unsigned long long, int, void*)+0x39>
c0020721:	e4 60                	in     al,0x60
c0020723:	3c 5a                	cmp    al,0x5a
c0020725:	74 fa                	je     c0020721 <SATA::read(unsigned long long, int, void*)+0x43>
c0020727:	3c 1c                	cmp    al,0x1c
c0020729:	74 f6                	je     c0020721 <SATA::read(unsigned long long, int, void*)+0x43>
c002072b:	8d 53 ff             	lea    edx,[ebx-0x1]
c002072e:	b8 04 00 00 00       	mov    eax,0x4
c0020733:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020739:	0f 87 96 00 00 00    	ja     c00207d5 <SATA::read(unsigned long long, int, void*)+0xf7>
c002073f:	b8 06 00 00 00       	mov    eax,0x6
c0020744:	85 ed                	test   ebp,ebp
c0020746:	0f 84 89 00 00 00    	je     c00207d5 <SATA::read(unsigned long long, int, void*)+0xf7>
c002074c:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0020753:	74 2d                	je     c0020782 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020755:	83 ec 0c             	sub    esp,0xc
c0020758:	68 9e 68 02 c0       	push   0xc002689e
c002075d:	e8 bb 92 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020762:	83 c4 10             	add    esp,0x10
c0020765:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c002076c:	75 14                	jne    c0020782 <SATA::read(unsigned long long, int, void*)+0xa4>
c002076e:	e4 60                	in     al,0x60
c0020770:	3c 5a                	cmp    al,0x5a
c0020772:	74 04                	je     c0020778 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020774:	3c 1c                	cmp    al,0x1c
c0020776:	75 f6                	jne    c002076e <SATA::read(unsigned long long, int, void*)+0x90>
c0020778:	e4 60                	in     al,0x60
c002077a:	3c 5a                	cmp    al,0x5a
c002077c:	74 fa                	je     c0020778 <SATA::read(unsigned long long, int, void*)+0x9a>
c002077e:	3c 1c                	cmp    al,0x1c
c0020780:	74 f6                	je     c0020778 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020782:	50                   	push   eax
c0020783:	50                   	push   eax
c0020784:	6a 00                	push   0x0
c0020786:	55                   	push   ebp
c0020787:	53                   	push   ebx
c0020788:	57                   	push   edi
c0020789:	56                   	push   esi
c002078a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002078e:	e8 53 f9 ff ff       	call   c00200e6 <SATA::access(unsigned long long, int, void*, bool)>
c0020793:	83 c4 20             	add    esp,0x20
c0020796:	89 c3                	mov    ebx,eax
c0020798:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c002079f:	74 2d                	je     c00207ce <SATA::read(unsigned long long, int, void*)+0xf0>
c00207a1:	83 ec 0c             	sub    esp,0xc
c00207a4:	68 ab 68 02 c0       	push   0xc00268ab
c00207a9:	e8 6f 92 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00207ae:	83 c4 10             	add    esp,0x10
c00207b1:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c00207b8:	75 14                	jne    c00207ce <SATA::read(unsigned long long, int, void*)+0xf0>
c00207ba:	e4 60                	in     al,0x60
c00207bc:	3c 5a                	cmp    al,0x5a
c00207be:	74 04                	je     c00207c4 <SATA::read(unsigned long long, int, void*)+0xe6>
c00207c0:	3c 1c                	cmp    al,0x1c
c00207c2:	75 f6                	jne    c00207ba <SATA::read(unsigned long long, int, void*)+0xdc>
c00207c4:	e4 60                	in     al,0x60
c00207c6:	3c 5a                	cmp    al,0x5a
c00207c8:	74 fa                	je     c00207c4 <SATA::read(unsigned long long, int, void*)+0xe6>
c00207ca:	3c 1c                	cmp    al,0x1c
c00207cc:	74 f6                	je     c00207c4 <SATA::read(unsigned long long, int, void*)+0xe6>
c00207ce:	31 c0                	xor    eax,eax
c00207d0:	85 db                	test   ebx,ebx
c00207d2:	0f 95 c0             	setne  al
c00207d5:	83 c4 0c             	add    esp,0xc
c00207d8:	5b                   	pop    ebx
c00207d9:	5e                   	pop    esi
c00207da:	5f                   	pop    edi
c00207db:	5d                   	pop    ebp
c00207dc:	c3                   	ret    
c00207dd:	90                   	nop

c00207de <SATA::write(unsigned long long, int, void*)>:
c00207de:	55                   	push   ebp
c00207df:	57                   	push   edi
c00207e0:	56                   	push   esi
c00207e1:	53                   	push   ebx
c00207e2:	83 ec 1c             	sub    esp,0x1c
c00207e5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00207e9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00207ed:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00207f1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00207f5:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c00207fc:	74 2d                	je     c002082b <SATA::write(unsigned long long, int, void*)+0x4d>
c00207fe:	83 ec 0c             	sub    esp,0xc
c0020801:	68 b8 68 02 c0       	push   0xc00268b8
c0020806:	e8 12 92 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c002080b:	83 c4 10             	add    esp,0x10
c002080e:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c0020815:	75 14                	jne    c002082b <SATA::write(unsigned long long, int, void*)+0x4d>
c0020817:	e4 60                	in     al,0x60
c0020819:	3c 1c                	cmp    al,0x1c
c002081b:	74 04                	je     c0020821 <SATA::write(unsigned long long, int, void*)+0x43>
c002081d:	3c 5a                	cmp    al,0x5a
c002081f:	75 f6                	jne    c0020817 <SATA::write(unsigned long long, int, void*)+0x39>
c0020821:	e4 60                	in     al,0x60
c0020823:	3c 5a                	cmp    al,0x5a
c0020825:	74 fa                	je     c0020821 <SATA::write(unsigned long long, int, void*)+0x43>
c0020827:	3c 1c                	cmp    al,0x1c
c0020829:	74 f6                	je     c0020821 <SATA::write(unsigned long long, int, void*)+0x43>
c002082b:	8d 55 ff             	lea    edx,[ebp-0x1]
c002082e:	b8 04 00 00 00       	mov    eax,0x4
c0020833:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020839:	0f 87 bd 00 00 00    	ja     c00208fc <SATA::write(unsigned long long, int, void*)+0x11e>
c002083f:	b8 06 00 00 00       	mov    eax,0x6
c0020844:	85 db                	test   ebx,ebx
c0020846:	0f 84 b0 00 00 00    	je     c00208fc <SATA::write(unsigned long long, int, void*)+0x11e>
c002084c:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c0020853:	74 2d                	je     c0020882 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020855:	83 ec 0c             	sub    esp,0xc
c0020858:	68 c6 68 02 c0       	push   0xc00268c6
c002085d:	e8 bb 91 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020862:	83 c4 10             	add    esp,0x10
c0020865:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c002086c:	75 14                	jne    c0020882 <SATA::write(unsigned long long, int, void*)+0xa4>
c002086e:	e4 60                	in     al,0x60
c0020870:	3c 1c                	cmp    al,0x1c
c0020872:	74 04                	je     c0020878 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020874:	3c 5a                	cmp    al,0x5a
c0020876:	75 f6                	jne    c002086e <SATA::write(unsigned long long, int, void*)+0x90>
c0020878:	e4 60                	in     al,0x60
c002087a:	3c 5a                	cmp    al,0x5a
c002087c:	74 fa                	je     c0020878 <SATA::write(unsigned long long, int, void*)+0x9a>
c002087e:	3c 1c                	cmp    al,0x1c
c0020880:	74 f6                	je     c0020878 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020882:	c1 e5 09             	shl    ebp,0x9
c0020885:	01 dd                	add    ebp,ebx
c0020887:	89 f0                	mov    eax,esi
c0020889:	89 fa                	mov    edx,edi
c002088b:	83 c0 01             	add    eax,0x1
c002088e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020892:	83 d2 00             	adc    edx,0x0
c0020895:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020899:	50                   	push   eax
c002089a:	50                   	push   eax
c002089b:	6a 01                	push   0x1
c002089d:	53                   	push   ebx
c002089e:	81 c3 00 02 00 00    	add    ebx,0x200
c00208a4:	6a 01                	push   0x1
c00208a6:	57                   	push   edi
c00208a7:	56                   	push   esi
c00208a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00208ac:	e8 35 f8 ff ff       	call   c00200e6 <SATA::access(unsigned long long, int, void*, bool)>
c00208b1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00208b5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00208b9:	83 c4 20             	add    esp,0x20
c00208bc:	39 dd                	cmp    ebp,ebx
c00208be:	75 c7                	jne    c0020887 <SATA::write(unsigned long long, int, void*)+0xa9>
c00208c0:	f6 05 21 7b 02 c0 08 	test   BYTE PTR ds:0xc0027b21,0x8
c00208c7:	75 04                	jne    c00208cd <SATA::write(unsigned long long, int, void*)+0xef>
c00208c9:	31 c0                	xor    eax,eax
c00208cb:	eb 2f                	jmp    c00208fc <SATA::write(unsigned long long, int, void*)+0x11e>
c00208cd:	83 ec 0c             	sub    esp,0xc
c00208d0:	68 d4 68 02 c0       	push   0xc00268d4
c00208d5:	e8 43 91 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00208da:	83 c4 10             	add    esp,0x10
c00208dd:	f6 05 20 7b 02 c0 80 	test   BYTE PTR ds:0xc0027b20,0x80
c00208e4:	75 e3                	jne    c00208c9 <SATA::write(unsigned long long, int, void*)+0xeb>
c00208e6:	e4 60                	in     al,0x60
c00208e8:	3c 5a                	cmp    al,0x5a
c00208ea:	74 04                	je     c00208f0 <SATA::write(unsigned long long, int, void*)+0x112>
c00208ec:	3c 1c                	cmp    al,0x1c
c00208ee:	75 f6                	jne    c00208e6 <SATA::write(unsigned long long, int, void*)+0x108>
c00208f0:	e4 60                	in     al,0x60
c00208f2:	3c 5a                	cmp    al,0x5a
c00208f4:	74 fa                	je     c00208f0 <SATA::write(unsigned long long, int, void*)+0x112>
c00208f6:	3c 1c                	cmp    al,0x1c
c00208f8:	74 f6                	je     c00208f0 <SATA::write(unsigned long long, int, void*)+0x112>
c00208fa:	eb cd                	jmp    c00208c9 <SATA::write(unsigned long long, int, void*)+0xeb>
c00208fc:	83 c4 1c             	add    esp,0x1c
c00208ff:	5b                   	pop    ebx
c0020900:	5e                   	pop    esi
c0020901:	5f                   	pop    edi
c0020902:	5d                   	pop    ebp
c0020903:	c3                   	ret    

c0020904 <SATAPI::write(unsigned long long, int, void*)>:
c0020904:	b8 03 00 00 00       	mov    eax,0x3
c0020909:	c3                   	ret    

c002090a <SATAPI::close(int, int, void*)>:
c002090a:	83 ec 0c             	sub    esp,0xc
c002090d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020911:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020917:	85 c0                	test   eax,eax
c0020919:	74 0c                	je     c0020927 <SATAPI::close(int, int, void*)+0x1d>
c002091b:	83 ec 0c             	sub    esp,0xc
c002091e:	8b 10                	mov    edx,DWORD PTR [eax]
c0020920:	50                   	push   eax
c0020921:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020924:	83 c4 10             	add    esp,0x10
c0020927:	31 c0                	xor    eax,eax
c0020929:	83 c4 0c             	add    esp,0xc
c002092c:	c3                   	ret    
c002092d:	90                   	nop

c002092e <SATAPI::SATAPI()>:
c002092e:	83 ec 0c             	sub    esp,0xc
c0020931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020935:	83 ec 04             	sub    esp,0x4
c0020938:	68 00 08 00 00       	push   0x800
c002093d:	68 1c 69 02 c0       	push   0xc002691c
c0020942:	50                   	push   eax
c0020943:	e8 2a dc fe ff       	call   c000e572 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020948:	83 c4 10             	add    esp,0x10
c002094b:	ba ec 69 02 c0       	mov    edx,0xc00269ec
c0020950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020954:	89 10                	mov    DWORD PTR [eax],edx
c0020956:	90                   	nop
c0020957:	83 c4 0c             	add    esp,0xc
c002095a:	c3                   	ret    
c002095b:	90                   	nop

c002095c <SATAPI::diskRemoved()>:
c002095c:	53                   	push   ebx
c002095d:	83 ec 14             	sub    esp,0x14
c0020960:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020964:	68 28 69 02 c0       	push   0xc0026928
c0020969:	e8 45 c3 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c002096e:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020975:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002097b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002097f:	83 c4 18             	add    esp,0x18
c0020982:	5b                   	pop    ebx
c0020983:	e9 0e fa fe ff       	jmp    c0010396 <LogicalDisk::unmount()>

c0020988 <SATAPI::diskInserted()>:
c0020988:	83 ec 18             	sub    esp,0x18
c002098b:	68 3f 69 02 c0       	push   0xc002693f
c0020990:	e8 1e c3 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0020995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020999:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00209a0:	83 c4 1c             	add    esp,0x1c
c00209a3:	c3                   	ret    

c00209a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00209a4:	55                   	push   ebp
c00209a5:	57                   	push   edi
c00209a6:	56                   	push   esi
c00209a7:	53                   	push   ebx
c00209a8:	83 ec 34             	sub    esp,0x34
c00209ab:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00209af:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00209b3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00209b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00209bb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00209bf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00209c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00209cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00209cf:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00209d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209d9:	c1 e0 07             	shl    eax,0x7
c00209dc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00209e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00209e4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00209ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209f2:	8d 58 02             	lea    ebx,[eax+0x2]
c00209f5:	c1 e3 07             	shl    ebx,0x7
c00209f8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00209fc:	53                   	push   ebx
c00209fd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020a03:	e8 22 e3 ff ff       	call   c001ed2a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020a08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020a0c:	83 c4 10             	add    esp,0x10
c0020a0f:	b8 01 00 00 00       	mov    eax,0x1
c0020a14:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020a19:	0f 84 04 02 00 00    	je     c0020c23 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27f>
c0020a1f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020a25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020a27:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020a2d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020a33:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020a37:	c1 e1 05             	shl    ecx,0x5
c0020a3a:	01 c8                	add    eax,ecx
c0020a3c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020a3e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020a44:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020a4a:	89 08                	mov    DWORD PTR [eax],ecx
c0020a4c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020a52:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020a58:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020a5e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020a61:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020a64:	50                   	push   eax
c0020a65:	68 90 00 00 00       	push   0x90
c0020a6a:	6a 00                	push   0x0
c0020a6c:	53                   	push   ebx
c0020a6d:	e8 12 fc fd ff       	call   c0000684 <memset>
c0020a72:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020a76:	b9 0c 00 00 00       	mov    ecx,0xc
c0020a7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a7d:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020a83:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020a87:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020a8d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020a91:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020a95:	48                   	dec    eax
c0020a96:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020a9b:	89 c1                	mov    ecx,eax
c0020a9d:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020aa3:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020aa8:	09 c8                	or     eax,ecx
c0020aaa:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020ab0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020ab3:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020aba:	66 25 00 7f          	and    ax,0x7f00
c0020abe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020ac2:	66 0d 27 80          	or     ax,0x8027
c0020ac6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020aca:	66 89 03             	mov    WORD PTR [ebx],ax
c0020acd:	89 d0                	mov    eax,edx
c0020acf:	c1 ea 18             	shr    edx,0x18
c0020ad2:	c1 e8 10             	shr    eax,0x10
c0020ad5:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020ad8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020adb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020adf:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020ae2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ae6:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020ae9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020aed:	83 c4 10             	add    esp,0x10
c0020af0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020af4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020af8:	31 c0                	xor    eax,eax
c0020afa:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020b00:	80 e1 88             	and    cl,0x88
c0020b03:	74 0a                	je     c0020b0f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0020b05:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b0a:	74 0a                	je     c0020b16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0020b0c:	40                   	inc    eax
c0020b0d:	eb eb                	jmp    c0020afa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0020b0f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b14:	75 0f                	jne    c0020b25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0020b16:	83 ec 0c             	sub    esp,0xc
c0020b19:	68 22 68 02 c0       	push   0xc0026822
c0020b1e:	e8 3c 3d ff ff       	call   c001485f <Krnl::panic(char const*)>
c0020b23:	eb 48                	jmp    c0020b6d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c9>
c0020b25:	be 01 00 00 00       	mov    esi,0x1
c0020b2a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020b2e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020b32:	d3 e6                	shl    esi,cl
c0020b34:	c1 e7 07             	shl    edi,0x7
c0020b37:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020b3d:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020b42:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020b46:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020b4c:	85 c6                	test   esi,eax
c0020b4e:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020b54:	0f 84 96 00 00 00    	je     c0020bf0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24c>
c0020b5a:	0f ba e0 1e          	bt     eax,0x1e
c0020b5e:	73 1a                	jae    c0020b7a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d6>
c0020b60:	83 ec 0c             	sub    esp,0xc
c0020b63:	68 57 69 02 c0       	push   0xc0026957
c0020b68:	e8 46 c1 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0020b6d:	83 c4 10             	add    esp,0x10
c0020b70:	b8 01 00 00 00       	mov    eax,0x1
c0020b75:	e9 a9 00 00 00       	jmp    c0020c23 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27f>
c0020b7a:	83 fb 0d             	cmp    ebx,0xd
c0020b7d:	77 12                	ja     c0020b91 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c0020b7f:	83 ec 0c             	sub    esp,0xc
c0020b82:	68 c8 00 00 00       	push   0xc8
c0020b87:	e8 9c 7b ff ff       	call   c0018728 <milliTenthSleep(unsigned int)>
c0020b8c:	83 c4 10             	add    esp,0x10
c0020b8f:	eb 2a                	jmp    c0020bbb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x217>
c0020b91:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020b97:	83 f8 0d             	cmp    eax,0xd
c0020b9a:	77 0a                	ja     c0020ba6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x202>
c0020b9c:	83 ec 0c             	sub    esp,0xc
c0020b9f:	68 58 02 00 00       	push   0x258
c0020ba4:	eb 28                	jmp    c0020bce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c0020ba6:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020bac:	83 f8 0d             	cmp    eax,0xd
c0020baf:	77 0a                	ja     c0020bbb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x217>
c0020bb1:	83 ec 0c             	sub    esp,0xc
c0020bb4:	68 dc 05 00 00       	push   0x5dc
c0020bb9:	eb 13                	jmp    c0020bce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c0020bbb:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020bc1:	83 f8 0d             	cmp    eax,0xd
c0020bc4:	77 10                	ja     c0020bd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x232>
c0020bc6:	83 ec 0c             	sub    esp,0xc
c0020bc9:	68 c4 09 00 00       	push   0x9c4
c0020bce:	e8 55 7b ff ff       	call   c0018728 <milliTenthSleep(unsigned int)>
c0020bd3:	83 c4 10             	add    esp,0x10
c0020bd6:	43                   	inc    ebx
c0020bd7:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020bdd:	0f 85 63 ff ff ff    	jne    c0020b46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a2>
c0020be3:	83 ec 0c             	sub    esp,0xc
c0020be6:	68 6a 69 02 c0       	push   0xc002696a
c0020beb:	e9 78 ff ff ff       	jmp    c0020b68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c4>
c0020bf0:	0f ba e0 1e          	bt     eax,0x1e
c0020bf4:	73 0d                	jae    c0020c03 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020bf6:	83 ec 0c             	sub    esp,0xc
c0020bf9:	68 7e 69 02 c0       	push   0xc002697e
c0020bfe:	e9 65 ff ff ff       	jmp    c0020b68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c4>
c0020c03:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020c08:	74 17                	je     c0020c21 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27d>
c0020c0a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020c0f:	74 10                	je     c0020c21 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27d>
c0020c11:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020c17:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020c1b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020c1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c21:	31 c0                	xor    eax,eax
c0020c23:	83 c4 2c             	add    esp,0x2c
c0020c26:	5b                   	pop    ebx
c0020c27:	5e                   	pop    esi
c0020c28:	5f                   	pop    edi
c0020c29:	5d                   	pop    ebp
c0020c2a:	c3                   	ret    
c0020c2b:	90                   	nop

c0020c2c <SATAPI::eject()>:
c0020c2c:	57                   	push   edi
c0020c2d:	b9 03 00 00 00       	mov    ecx,0x3
c0020c32:	53                   	push   ebx
c0020c33:	83 ec 14             	sub    esp,0x14
c0020c36:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020c3a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020c3e:	fc                   	cld    
c0020c3f:	31 c0                	xor    eax,eax
c0020c41:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020c43:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020c48:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020c4d:	50                   	push   eax
c0020c4e:	6a 00                	push   0x0
c0020c50:	6a 00                	push   0x0
c0020c52:	6a 00                	push   0x0
c0020c54:	6a 00                	push   0x0
c0020c56:	6a 02                	push   0x2
c0020c58:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020c5c:	50                   	push   eax
c0020c5d:	53                   	push   ebx
c0020c5e:	e8 41 fd ff ff       	call   c00209a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020c63:	83 c4 20             	add    esp,0x20
c0020c66:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020c6d:	74 0c                	je     c0020c7b <SATAPI::eject()+0x4f>
c0020c6f:	83 ec 0c             	sub    esp,0xc
c0020c72:	53                   	push   ebx
c0020c73:	e8 e4 fc ff ff       	call   c002095c <SATAPI::diskRemoved()>
c0020c78:	83 c4 10             	add    esp,0x10
c0020c7b:	83 c4 14             	add    esp,0x14
c0020c7e:	31 c0                	xor    eax,eax
c0020c80:	5b                   	pop    ebx
c0020c81:	5f                   	pop    edi
c0020c82:	c3                   	ret    
c0020c83:	90                   	nop

c0020c84 <SATAPI::detectMedia()>:
c0020c84:	56                   	push   esi
c0020c85:	53                   	push   ebx
c0020c86:	83 ec 28             	sub    esp,0x28
c0020c89:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020c8d:	6a 0c                	push   0xc
c0020c8f:	6a 00                	push   0x0
c0020c91:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020c95:	56                   	push   esi
c0020c96:	e8 e9 f9 fd ff       	call   c0000684 <memset>
c0020c9b:	83 c4 0c             	add    esp,0xc
c0020c9e:	6a 00                	push   0x0
c0020ca0:	6a 00                	push   0x0
c0020ca2:	6a 00                	push   0x0
c0020ca4:	6a 00                	push   0x0
c0020ca6:	6a 00                	push   0x0
c0020ca8:	56                   	push   esi
c0020ca9:	53                   	push   ebx
c0020caa:	e8 f5 fc ff ff       	call   c00209a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020caf:	83 c4 20             	add    esp,0x20
c0020cb2:	48                   	dec    eax
c0020cb3:	75 17                	jne    c0020ccc <SATAPI::detectMedia()+0x48>
c0020cb5:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020cbc:	74 0e                	je     c0020ccc <SATAPI::detectMedia()+0x48>
c0020cbe:	83 ec 0c             	sub    esp,0xc
c0020cc1:	53                   	push   ebx
c0020cc2:	e8 95 fc ff ff       	call   c002095c <SATAPI::diskRemoved()>
c0020cc7:	e9 91 00 00 00       	jmp    c0020d5d <SATAPI::detectMedia()+0xd9>
c0020ccc:	50                   	push   eax
c0020ccd:	6a 0c                	push   0xc
c0020ccf:	6a 00                	push   0x0
c0020cd1:	56                   	push   esi
c0020cd2:	e8 ad f9 fd ff       	call   c0000684 <memset>
c0020cd7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020cdc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020ce1:	83 c4 0c             	add    esp,0xc
c0020ce4:	6a 01                	push   0x1
c0020ce6:	8d 44 24 16          	lea    eax,[esp+0x16]
c0020cea:	50                   	push   eax
c0020ceb:	6a 00                	push   0x0
c0020ced:	6a 00                	push   0x0
c0020cef:	6a 12                	push   0x12
c0020cf1:	56                   	push   esi
c0020cf2:	53                   	push   ebx
c0020cf3:	e8 ac fc ff ff       	call   c00209a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020cf8:	83 c4 20             	add    esp,0x20
c0020cfb:	48                   	dec    eax
c0020cfc:	75 09                	jne    c0020d07 <SATAPI::detectMedia()+0x83>
c0020cfe:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020d05:	75 b7                	jne    c0020cbe <SATAPI::detectMedia()+0x3a>
c0020d07:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0020d0b:	83 e0 7f             	and    eax,0x7f
c0020d0e:	3c 70                	cmp    al,0x70
c0020d10:	74 15                	je     c0020d27 <SATAPI::detectMedia()+0xa3>
c0020d12:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020d19:	75 0c                	jne    c0020d27 <SATAPI::detectMedia()+0xa3>
c0020d1b:	83 ec 0c             	sub    esp,0xc
c0020d1e:	53                   	push   ebx
c0020d1f:	e8 64 fc ff ff       	call   c0020988 <SATAPI::diskInserted()>
c0020d24:	83 c4 10             	add    esp,0x10
c0020d27:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020d2b:	83 e0 0f             	and    eax,0xf
c0020d2e:	3c 02                	cmp    al,0x2
c0020d30:	75 15                	jne    c0020d47 <SATAPI::detectMedia()+0xc3>
c0020d32:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020d37:	75 27                	jne    c0020d60 <SATAPI::detectMedia()+0xdc>
c0020d39:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020d40:	74 1e                	je     c0020d60 <SATAPI::detectMedia()+0xdc>
c0020d42:	e9 77 ff ff ff       	jmp    c0020cbe <SATAPI::detectMedia()+0x3a>
c0020d47:	84 c0                	test   al,al
c0020d49:	75 15                	jne    c0020d60 <SATAPI::detectMedia()+0xdc>
c0020d4b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020d52:	75 0c                	jne    c0020d60 <SATAPI::detectMedia()+0xdc>
c0020d54:	83 ec 0c             	sub    esp,0xc
c0020d57:	53                   	push   ebx
c0020d58:	e8 2b fc ff ff       	call   c0020988 <SATAPI::diskInserted()>
c0020d5d:	83 c4 10             	add    esp,0x10
c0020d60:	83 c4 24             	add    esp,0x24
c0020d63:	5b                   	pop    ebx
c0020d64:	5e                   	pop    esi
c0020d65:	c3                   	ret    

c0020d66 <SATAPI::open(int, int, void*)>:
c0020d66:	56                   	push   esi
c0020d67:	53                   	push   ebx
c0020d68:	51                   	push   ecx
c0020d69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020d6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d71:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020d7b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020d81:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020d8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d8f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020d99:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020d9f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020da6:	e8 cf 92 fe ff       	call   c000a07a <Phys::allocatePage()>
c0020dab:	89 c6                	mov    esi,eax
c0020dad:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020db3:	81 c6 00 10 00 00    	add    esi,0x1000
c0020db9:	e8 bc 92 fe ff       	call   c000a07a <Phys::allocatePage()>
c0020dbe:	39 c6                	cmp    esi,eax
c0020dc0:	74 10                	je     c0020dd2 <SATAPI::open(int, int, void*)+0x6c>
c0020dc2:	83 ec 0c             	sub    esp,0xc
c0020dc5:	68 93 69 02 c0       	push   0xc0026993
c0020dca:	e8 90 3a ff ff       	call   c001485f <Krnl::panic(char const*)>
c0020dcf:	83 c4 10             	add    esp,0x10
c0020dd2:	83 ec 0c             	sub    esp,0xc
c0020dd5:	6a 02                	push   0x2
c0020dd7:	e8 b1 ab fe ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c0020ddc:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020de2:	6a 03                	push   0x3
c0020de4:	50                   	push   eax
c0020de5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020deb:	ff 35 30 7c 02 c0    	push   DWORD PTR ds:0xc0027c30
c0020df1:	e8 3e b2 fe ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020df6:	83 c4 14             	add    esp,0x14
c0020df9:	68 74 01 00 00       	push   0x174
c0020dfe:	e8 c0 8b fe ff       	call   c00099c3 <malloc>
c0020e03:	83 c4 0c             	add    esp,0xc
c0020e06:	89 c6                	mov    esi,eax
c0020e08:	6a 00                	push   0x0
c0020e0a:	68 ff ff ff 7f       	push   0x7fffffff
c0020e0f:	6a 00                	push   0x0
c0020e11:	6a 00                	push   0x0
c0020e13:	53                   	push   ebx
c0020e14:	68 a9 69 02 c0       	push   0xc00269a9
c0020e19:	50                   	push   eax
c0020e1a:	e8 c3 f3 fe ff       	call   c00101e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020e1f:	83 c4 14             	add    esp,0x14
c0020e22:	56                   	push   esi
c0020e23:	e8 70 f4 fe ff       	call   c0010298 <LogicalDisk::assignDriveLetter()>
c0020e28:	58                   	pop    eax
c0020e29:	5a                   	pop    edx
c0020e2a:	56                   	push   esi
c0020e2b:	53                   	push   ebx
c0020e2c:	e8 09 d3 fe ff       	call   c000e13a <Device::addChild(Device*)>
c0020e31:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020e37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e3a:	e8 9b d7 fe ff       	call   c000e5da <PhysicalDisk::startCache()>
c0020e3f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020e46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e49:	e8 36 fe ff ff       	call   c0020c84 <SATAPI::detectMedia()>
c0020e4e:	83 c4 14             	add    esp,0x14
c0020e51:	31 c0                	xor    eax,eax
c0020e53:	5b                   	pop    ebx
c0020e54:	5e                   	pop    esi
c0020e55:	c3                   	ret    

c0020e56 <SATAPI::read(unsigned long long, int, void*)>:
c0020e56:	55                   	push   ebp
c0020e57:	57                   	push   edi
c0020e58:	56                   	push   esi
c0020e59:	53                   	push   ebx
c0020e5a:	83 ec 1c             	sub    esp,0x1c
c0020e5d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020e61:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020e65:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0020e69:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0020e70:	74 19                	je     c0020e8b <SATAPI::read(unsigned long long, int, void*)+0x35>
c0020e72:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0020e77:	7e 2e                	jle    c0020ea7 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0020e79:	83 ec 0c             	sub    esp,0xc
c0020e7c:	68 b7 69 02 c0       	push   0xc00269b7
c0020e81:	e8 d9 39 ff ff       	call   c001485f <Krnl::panic(char const*)>
c0020e86:	83 c4 10             	add    esp,0x10
c0020e89:	eb 1c                	jmp    c0020ea7 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0020e8b:	83 ec 0c             	sub    esp,0xc
c0020e8e:	55                   	push   ebp
c0020e8f:	e8 f0 fd ff ff       	call   c0020c84 <SATAPI::detectMedia()>
c0020e94:	83 c4 10             	add    esp,0x10
c0020e97:	b8 02 00 00 00       	mov    eax,0x2
c0020e9c:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0020ea3:	75 cd                	jne    c0020e72 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0020ea5:	eb 49                	jmp    c0020ef0 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0020ea7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020eab:	b9 03 00 00 00       	mov    ecx,0x3
c0020eb0:	fc                   	cld    
c0020eb1:	31 c0                	xor    eax,eax
c0020eb3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020eb5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020eba:	89 d8                	mov    eax,ebx
c0020ebc:	86 e0                	xchg   al,ah
c0020ebe:	c1 c0 10             	rol    eax,0x10
c0020ec1:	86 e0                	xchg   al,ah
c0020ec3:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0020ec7:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0020ecb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020ecf:	50                   	push   eax
c0020ed0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020ed4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020ed8:	56                   	push   esi
c0020ed9:	53                   	push   ebx
c0020eda:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020ede:	c1 e0 0b             	shl    eax,0xb
c0020ee1:	50                   	push   eax
c0020ee2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020ee6:	50                   	push   eax
c0020ee7:	55                   	push   ebp
c0020ee8:	e8 b7 fa ff ff       	call   c00209a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020eed:	83 c4 20             	add    esp,0x20
c0020ef0:	83 c4 1c             	add    esp,0x1c
c0020ef3:	5b                   	pop    ebx
c0020ef4:	5e                   	pop    esi
c0020ef5:	5f                   	pop    edi
c0020ef6:	5d                   	pop    ebp
c0020ef7:	c3                   	ret    

c0020ef8 <AVX::open(int, int, void*)>:
c0020ef8:	83 ec 0c             	sub    esp,0xc
c0020efb:	e8 38 11 00 00       	call   c0022038 <avxInit>
c0020f00:	b8 00 00 00 00       	mov    eax,0x0
c0020f05:	83 c4 0c             	add    esp,0xc
c0020f08:	c3                   	ret    
c0020f09:	90                   	nop
c0020f0a:	66 90                	xchg   ax,ax

c0020f0c <AVX::close(int, int, void*)>:
c0020f0c:	83 ec 0c             	sub    esp,0xc
c0020f0f:	e8 25 11 00 00       	call   c0022039 <avxClose>
c0020f14:	b8 00 00 00 00       	mov    eax,0x0
c0020f19:	83 c4 0c             	add    esp,0xc
c0020f1c:	c3                   	ret    
c0020f1d:	90                   	nop
c0020f1e:	66 90                	xchg   ax,ax

c0020f20 <AVX::available()>:
c0020f20:	83 ec 0c             	sub    esp,0xc
c0020f23:	e8 08 11 00 00       	call   c0022030 <avxDetect>
c0020f28:	85 c0                	test   eax,eax
c0020f2a:	0f 95 c0             	setne  al
c0020f2d:	83 c4 0c             	add    esp,0xc
c0020f30:	c3                   	ret    
c0020f31:	90                   	nop
c0020f32:	66 90                	xchg   ax,ax

c0020f34 <AVX::save(void*)>:
c0020f34:	83 ec 0c             	sub    esp,0xc
c0020f37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f3b:	83 ec 0c             	sub    esp,0xc
c0020f3e:	50                   	push   eax
c0020f3f:	e8 f2 10 00 00       	call   c0022036 <avxSave>
c0020f44:	83 c4 10             	add    esp,0x10
c0020f47:	90                   	nop
c0020f48:	83 c4 0c             	add    esp,0xc
c0020f4b:	c3                   	ret    

c0020f4c <AVX::load(void*)>:
c0020f4c:	83 ec 0c             	sub    esp,0xc
c0020f4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f53:	83 ec 0c             	sub    esp,0xc
c0020f56:	50                   	push   eax
c0020f57:	e8 db 10 00 00       	call   c0022037 <avxLoad>
c0020f5c:	83 c4 10             	add    esp,0x10
c0020f5f:	90                   	nop
c0020f60:	83 c4 0c             	add    esp,0xc
c0020f63:	c3                   	ret    

c0020f64 <AVX::AVX()>:
c0020f64:	83 ec 0c             	sub    esp,0xc
c0020f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f6b:	83 ec 08             	sub    esp,0x8
c0020f6e:	68 1c 6a 02 c0       	push   0xc0026a1c
c0020f73:	50                   	push   eax
c0020f74:	e8 d7 d6 fe ff       	call   c000e650 <FPU::FPU(char const*)>
c0020f79:	83 c4 10             	add    esp,0x10
c0020f7c:	ba 2c 6a 02 c0       	mov    edx,0xc0026a2c
c0020f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f85:	89 10                	mov    DWORD PTR [eax],edx
c0020f87:	90                   	nop
c0020f88:	83 c4 0c             	add    esp,0xc
c0020f8b:	c3                   	ret    

c0020f8c <MMX::available()>:
c0020f8c:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0020f91:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0020f97:	83 e0 20             	and    eax,0x20
c0020f9a:	84 c0                	test   al,al
c0020f9c:	0f 95 c0             	setne  al
c0020f9f:	c3                   	ret    

c0020fa0 <MMX::open(int, int, void*)>:
c0020fa0:	83 ec 0c             	sub    esp,0xc
c0020fa3:	e8 1a 11 00 00       	call   c00220c2 <x87Init>
c0020fa8:	b8 00 00 00 00       	mov    eax,0x0
c0020fad:	83 c4 0c             	add    esp,0xc
c0020fb0:	c3                   	ret    
c0020fb1:	90                   	nop
c0020fb2:	66 90                	xchg   ax,ax

c0020fb4 <MMX::close(int, int, void*)>:
c0020fb4:	83 ec 0c             	sub    esp,0xc
c0020fb7:	e8 20 11 00 00       	call   c00220dc <x87Close>
c0020fbc:	b8 00 00 00 00       	mov    eax,0x0
c0020fc1:	83 c4 0c             	add    esp,0xc
c0020fc4:	c3                   	ret    
c0020fc5:	90                   	nop
c0020fc6:	66 90                	xchg   ax,ax

c0020fc8 <MMX::save(void*)>:
c0020fc8:	83 ec 0c             	sub    esp,0xc
c0020fcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fcf:	83 ec 0c             	sub    esp,0xc
c0020fd2:	50                   	push   eax
c0020fd3:	e8 d9 10 00 00       	call   c00220b1 <x87Save>
c0020fd8:	83 c4 10             	add    esp,0x10
c0020fdb:	90                   	nop
c0020fdc:	83 c4 0c             	add    esp,0xc
c0020fdf:	c3                   	ret    

c0020fe0 <MMX::load(void*)>:
c0020fe0:	83 ec 0c             	sub    esp,0xc
c0020fe3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fe7:	83 ec 0c             	sub    esp,0xc
c0020fea:	50                   	push   eax
c0020feb:	e8 ca 10 00 00       	call   c00220ba <x87Load>
c0020ff0:	83 c4 10             	add    esp,0x10
c0020ff3:	90                   	nop
c0020ff4:	83 c4 0c             	add    esp,0xc
c0020ff7:	c3                   	ret    

c0020ff8 <MMX::MMX()>:
c0020ff8:	83 ec 0c             	sub    esp,0xc
c0020ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fff:	83 ec 08             	sub    esp,0x8
c0021002:	68 5c 6a 02 c0       	push   0xc0026a5c
c0021007:	50                   	push   eax
c0021008:	e8 43 d6 fe ff       	call   c000e650 <FPU::FPU(char const*)>
c002100d:	83 c4 10             	add    esp,0x10
c0021010:	ba 6c 6a 02 c0       	mov    edx,0xc0026a6c
c0021015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021019:	89 10                	mov    DWORD PTR [eax],edx
c002101b:	90                   	nop
c002101c:	83 c4 0c             	add    esp,0xc
c002101f:	c3                   	ret    

c0021020 <SSE::open(int, int, void*)>:
c0021020:	83 ec 0c             	sub    esp,0xc
c0021023:	e8 4c 10 00 00       	call   c0022074 <sseInit>
c0021028:	b8 00 00 00 00       	mov    eax,0x0
c002102d:	83 c4 0c             	add    esp,0xc
c0021030:	c3                   	ret    
c0021031:	90                   	nop
c0021032:	66 90                	xchg   ax,ax

c0021034 <SSE::close(int, int, void*)>:
c0021034:	83 ec 0c             	sub    esp,0xc
c0021037:	e8 48 10 00 00       	call   c0022084 <sseClose>
c002103c:	b8 00 00 00 00       	mov    eax,0x0
c0021041:	83 c4 0c             	add    esp,0xc
c0021044:	c3                   	ret    
c0021045:	90                   	nop
c0021046:	66 90                	xchg   ax,ax

c0021048 <SSE::available()>:
c0021048:	83 ec 1c             	sub    esp,0x1c
c002104b:	e8 00 10 00 00       	call   c0022050 <absolutelyNoChanceInHell>
c0021050:	85 c0                	test   eax,eax
c0021052:	0f 95 c0             	setne  al
c0021055:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021059:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002105d:	83 c4 1c             	add    esp,0x1c
c0021060:	c3                   	ret    
c0021061:	90                   	nop
c0021062:	66 90                	xchg   ax,ax

c0021064 <SSE::save(void*)>:
c0021064:	83 ec 0c             	sub    esp,0xc
c0021067:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002106b:	83 ec 0c             	sub    esp,0xc
c002106e:	50                   	push   eax
c002106f:	e8 f4 0f 00 00       	call   c0022068 <sseSave>
c0021074:	83 c4 10             	add    esp,0x10
c0021077:	90                   	nop
c0021078:	83 c4 0c             	add    esp,0xc
c002107b:	c3                   	ret    

c002107c <SSE::load(void*)>:
c002107c:	83 ec 0c             	sub    esp,0xc
c002107f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021083:	83 ec 0c             	sub    esp,0xc
c0021086:	50                   	push   eax
c0021087:	e8 e2 0f 00 00       	call   c002206e <sseLoad>
c002108c:	83 c4 10             	add    esp,0x10
c002108f:	90                   	nop
c0021090:	83 c4 0c             	add    esp,0xc
c0021093:	c3                   	ret    

c0021094 <SSE::SSE()>:
c0021094:	83 ec 0c             	sub    esp,0xc
c0021097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002109b:	83 ec 08             	sub    esp,0x8
c002109e:	68 9c 6a 02 c0       	push   0xc0026a9c
c00210a3:	50                   	push   eax
c00210a4:	e8 a7 d5 fe ff       	call   c000e650 <FPU::FPU(char const*)>
c00210a9:	83 c4 10             	add    esp,0x10
c00210ac:	ba ac 6a 02 c0       	mov    edx,0xc0026aac
c00210b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210b5:	89 10                	mov    DWORD PTR [eax],edx
c00210b7:	90                   	nop
c00210b8:	83 c4 0c             	add    esp,0xc
c00210bb:	c3                   	ret    

c00210bc <x87::open(int, int, void*)>:
c00210bc:	83 ec 0c             	sub    esp,0xc
c00210bf:	e8 fe 0f 00 00       	call   c00220c2 <x87Init>
c00210c4:	b8 00 00 00 00       	mov    eax,0x0
c00210c9:	83 c4 0c             	add    esp,0xc
c00210cc:	c3                   	ret    
c00210cd:	90                   	nop
c00210ce:	66 90                	xchg   ax,ax

c00210d0 <x87::close(int, int, void*)>:
c00210d0:	83 ec 0c             	sub    esp,0xc
c00210d3:	e8 04 10 00 00       	call   c00220dc <x87Close>
c00210d8:	b8 00 00 00 00       	mov    eax,0x0
c00210dd:	83 c4 0c             	add    esp,0xc
c00210e0:	c3                   	ret    
c00210e1:	90                   	nop
c00210e2:	66 90                	xchg   ax,ax

c00210e4 <x87::available()>:
c00210e4:	83 ec 0c             	sub    esp,0xc
c00210e7:	e8 aa 0f 00 00       	call   c0022096 <x87Detect>
c00210ec:	85 c0                	test   eax,eax
c00210ee:	0f 95 c0             	setne  al
c00210f1:	83 c4 0c             	add    esp,0xc
c00210f4:	c3                   	ret    
c00210f5:	90                   	nop
c00210f6:	66 90                	xchg   ax,ax

c00210f8 <x87::save(void*)>:
c00210f8:	83 ec 0c             	sub    esp,0xc
c00210fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210ff:	83 ec 0c             	sub    esp,0xc
c0021102:	50                   	push   eax
c0021103:	e8 a9 0f 00 00       	call   c00220b1 <x87Save>
c0021108:	83 c4 10             	add    esp,0x10
c002110b:	90                   	nop
c002110c:	83 c4 0c             	add    esp,0xc
c002110f:	c3                   	ret    

c0021110 <x87::load(void*)>:
c0021110:	83 ec 0c             	sub    esp,0xc
c0021113:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021117:	83 ec 0c             	sub    esp,0xc
c002111a:	50                   	push   eax
c002111b:	e8 9a 0f 00 00       	call   c00220ba <x87Load>
c0021120:	83 c4 10             	add    esp,0x10
c0021123:	90                   	nop
c0021124:	83 c4 0c             	add    esp,0xc
c0021127:	c3                   	ret    

c0021128 <x87::x87()>:
c0021128:	83 ec 0c             	sub    esp,0xc
c002112b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002112f:	83 ec 08             	sub    esp,0x8
c0021132:	68 dc 6a 02 c0       	push   0xc0026adc
c0021137:	50                   	push   eax
c0021138:	e8 13 d5 fe ff       	call   c000e650 <FPU::FPU(char const*)>
c002113d:	83 c4 10             	add    esp,0x10
c0021140:	ba ec 6a 02 c0       	mov    edx,0xc0026aec
c0021145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021149:	89 10                	mov    DWORD PTR [eax],edx
c002114b:	90                   	nop
c002114c:	83 c4 0c             	add    esp,0xc
c002114f:	c3                   	ret    

c0021150 <APIC::disable()>:
c0021150:	90                   	nop
c0021151:	c3                   	ret    

c0021152 <APIC::close(int, int, void*)>:
c0021152:	55                   	push   ebp
c0021153:	89 e5                	mov    ebp,esp
c0021155:	83 ec 08             	sub    esp,0x8
c0021158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002115b:	8b 00                	mov    eax,DWORD PTR [eax]
c002115d:	83 c0 3c             	add    eax,0x3c
c0021160:	8b 00                	mov    eax,DWORD PTR [eax]
c0021162:	83 ec 0c             	sub    esp,0xc
c0021165:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021168:	ff d0                	call   eax
c002116a:	83 c4 10             	add    esp,0x10
c002116d:	b8 00 00 00 00       	mov    eax,0x0
c0021172:	c9                   	leave  
c0021173:	c3                   	ret    

c0021174 <IOAPIC::close(int, int, void*)>:
c0021174:	b8 00 00 00 00       	mov    eax,0x0
c0021179:	c3                   	ret    

c002117a <APIC::io_wait()>:
c002117a:	eb 00                	jmp    c002117c <APIC::io_wait()+0x2>
c002117c:	eb 00                	jmp    c002117e <APIC::io_wait()+0x4>
c002117e:	90                   	nop
c002117f:	c3                   	ret    

c0021180 <APIC::getBase()>:
c0021180:	55                   	push   ebp
c0021181:	89 e5                	mov    ebp,esp
c0021183:	83 ec 18             	sub    esp,0x18
c0021186:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c002118b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021191:	83 e0 08             	and    eax,0x8
c0021194:	84 c0                	test   al,al
c0021196:	75 07                	jne    c002119f <APIC::getBase()+0x1f>
c0021198:	b8 00 00 00 00       	mov    eax,0x0
c002119d:	eb 21                	jmp    c00211c0 <APIC::getBase()+0x40>
c002119f:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c00211a4:	83 ec 08             	sub    esp,0x8
c00211a7:	6a 1b                	push   0x1b
c00211a9:	50                   	push   eax
c00211aa:	e8 75 7d fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00211af:	83 c4 10             	add    esp,0x10
c00211b2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00211b5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00211b8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00211bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00211c0:	c9                   	leave  
c00211c1:	c3                   	ret    

c00211c2 <APIC::eoi(unsigned char)>:
c00211c2:	55                   	push   ebp
c00211c3:	89 e5                	mov    ebp,esp
c00211c5:	83 ec 28             	sub    esp,0x28
c00211c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00211cb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00211ce:	83 ec 0c             	sub    esp,0xc
c00211d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00211d4:	e8 a7 ff ff ff       	call   c0021180 <APIC::getBase()>
c00211d9:	83 c4 10             	add    esp,0x10
c00211dc:	05 b0 00 00 00       	add    eax,0xb0
c00211e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00211e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00211e7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00211ed:	90                   	nop
c00211ee:	c9                   	leave  
c00211ef:	c3                   	ret    

c00211f0 <APIC::open(int, int, void*)>:
c00211f0:	55                   	push   ebp
c00211f1:	89 e5                	mov    ebp,esp
c00211f3:	57                   	push   edi
c00211f4:	56                   	push   esi
c00211f5:	53                   	push   ebx
c00211f6:	83 ec 2c             	sub    esp,0x2c
c00211f9:	83 ec 0c             	sub    esp,0xc
c00211fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00211ff:	e8 7c ff ff ff       	call   c0021180 <APIC::getBase()>
c0021204:	83 c4 10             	add    esp,0x10
c0021207:	89 c2                	mov    edx,eax
c0021209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002120c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021212:	0f b6 f8             	movzx  edi,al
c0021215:	89 d0                	mov    eax,edx
c0021217:	ba 00 00 00 00       	mov    edx,0x0
c002121c:	89 c1                	mov    ecx,eax
c002121e:	80 e5 ff             	and    ch,0xff
c0021221:	89 cb                	mov    ebx,ecx
c0021223:	0f b6 f2             	movzx  esi,dl
c0021226:	89 d8                	mov    eax,ebx
c0021228:	89 f2                	mov    edx,esi
c002122a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002122d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021230:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021234:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021238:	83 e0 00             	and    eax,0x0
c002123b:	09 d0                	or     eax,edx
c002123d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021244:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002124a:	8d 50 01             	lea    edx,[eax+0x1]
c002124d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021250:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021256:	0f b6 d0             	movzx  edx,al
c0021259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002125c:	83 c2 08             	add    edx,0x8
c002125f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021263:	0f b6 c9             	movzx  ecx,cl
c0021266:	81 c9 00 00 01 00    	or     ecx,0x10000
c002126c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021270:	83 ec 0c             	sub    esp,0xc
c0021273:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021276:	e8 05 ff ff ff       	call   c0021180 <APIC::getBase()>
c002127b:	83 c4 10             	add    esp,0x10
c002127e:	05 f0 00 00 00       	add    eax,0xf0
c0021283:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021286:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021289:	8b 00                	mov    eax,DWORD PTR [eax]
c002128b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002128e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021295:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002129c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002129f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00212a2:	89 10                	mov    DWORD PTR [eax],edx
c00212a4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00212ab:	a1 70 83 02 c0       	mov    eax,ds:0xc0028370
c00212b0:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00212b3:	7d 7c                	jge    c0021331 <APIC::open(int, int, void*)+0x141>
c00212b5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00212b8:	8b 04 85 80 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c80]
c00212bf:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00212c2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00212c5:	8b 04 85 80 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c80]
c00212cc:	c1 e8 08             	shr    eax,0x8
c00212cf:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00212d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00212d6:	8b 04 85 80 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c80]
c00212dd:	c1 e8 18             	shr    eax,0x18
c00212e0:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00212e3:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00212e7:	75 40                	jne    c0021329 <APIC::open(int, int, void*)+0x139>
c00212e9:	83 ec 0c             	sub    esp,0xc
c00212ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00212ef:	e8 8c fe ff ff       	call   c0021180 <APIC::getBase()>
c00212f4:	83 c4 10             	add    esp,0x10
c00212f7:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00212fb:	75 07                	jne    c0021304 <APIC::open(int, int, void*)+0x114>
c00212fd:	ba 60 03 00 00       	mov    edx,0x360
c0021302:	eb 05                	jmp    c0021309 <APIC::open(int, int, void*)+0x119>
c0021304:	ba 50 03 00 00       	mov    edx,0x350
c0021309:	01 d0                	add    eax,edx
c002130b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002130e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021311:	8b 00                	mov    eax,DWORD PTR [eax]
c0021313:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021316:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002131d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021321:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021324:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021327:	89 10                	mov    DWORD PTR [eax],edx
c0021329:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002132c:	e9 7a ff ff ff       	jmp    c00212ab <APIC::open(int, int, void*)+0xbb>
c0021331:	b8 00 00 00 00       	mov    eax,0x0
c0021336:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021339:	5b                   	pop    ebx
c002133a:	5e                   	pop    esi
c002133b:	5f                   	pop    edi
c002133c:	5d                   	pop    ebp
c002133d:	c3                   	ret    

c002133e <IOAPIC::IOAPIC()>:
c002133e:	83 ec 0c             	sub    esp,0xc
c0021341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021345:	83 ec 08             	sub    esp,0x8
c0021348:	68 1c 6b 02 c0       	push   0xc0026b1c
c002134d:	50                   	push   eax
c002134e:	e8 eb cf fe ff       	call   c000e33e <Device::Device(char const*)>
c0021353:	83 c4 10             	add    esp,0x10
c0021356:	ba 44 6c 02 c0       	mov    edx,0xc0026c44
c002135b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002135f:	89 10                	mov    DWORD PTR [eax],edx
c0021361:	90                   	nop
c0021362:	83 c4 0c             	add    esp,0xc
c0021365:	c3                   	ret    

c0021366 <APIC::APIC()>:
c0021366:	53                   	push   ebx
c0021367:	83 ec 18             	sub    esp,0x18
c002136a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002136e:	83 ec 08             	sub    esp,0x8
c0021371:	68 24 6b 02 c0       	push   0xc0026b24
c0021376:	50                   	push   eax
c0021377:	e8 3a d7 fe ff       	call   c000eab6 <InterruptController::InterruptController(char const*)>
c002137c:	83 c4 10             	add    esp,0x10
c002137f:	ba fc 6b 02 c0       	mov    edx,0xc0026bfc
c0021384:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021388:	89 10                	mov    DWORD PTR [eax],edx
c002138a:	a0 40 9a 02 c0       	mov    al,ds:0xc0029a40
c002138f:	83 f0 01             	xor    eax,0x1
c0021392:	84 c0                	test   al,al
c0021394:	0f 84 a1 00 00 00    	je     c002143b <APIC::APIC()+0xd5>
c002139a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002139f:	a0 20 84 02 c0       	mov    al,ds:0xc0028420
c00213a4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00213a8:	0f 83 86 00 00 00    	jae    c0021434 <APIC::APIC()+0xce>
c00213ae:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00213b6:	83 ec 0c             	sub    esp,0xc
c00213b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00213bd:	e8 01 86 fe ff       	call   c00099c3 <malloc>
c00213c2:	83 c4 10             	add    esp,0x10
c00213c5:	89 c3                	mov    ebx,eax
c00213c7:	83 ec 0c             	sub    esp,0xc
c00213ca:	53                   	push   ebx
c00213cb:	e8 6e ff ff ff       	call   c002133e <IOAPIC::IOAPIC()>
c00213d0:	83 c4 10             	add    esp,0x10
c00213d3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00213d7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00213dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00213e0:	89 14 85 20 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65e0],edx
c00213e7:	a1 00 9a 02 c0       	mov    eax,ds:0xc0029a00
c00213ec:	40                   	inc    eax
c00213ed:	a3 00 9a 02 c0       	mov    ds:0xc0029a00,eax
c00213f2:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c00213f7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00213fd:	83 ec 08             	sub    esp,0x8
c0021400:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021404:	50                   	push   eax
c0021405:	e8 30 cd fe ff       	call   c000e13a <Device::addChild(Device*)>
c002140a:	83 c4 10             	add    esp,0x10
c002140d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021411:	8b 00                	mov    eax,DWORD PTR [eax]
c0021413:	83 c0 08             	add    eax,0x8
c0021416:	8b 00                	mov    eax,DWORD PTR [eax]
c0021418:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002141d:	6a 00                	push   0x0
c002141f:	6a 00                	push   0x0
c0021421:	52                   	push   edx
c0021422:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021426:	ff d0                	call   eax
c0021428:	83 c4 10             	add    esp,0x10
c002142b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002142f:	e9 6b ff ff ff       	jmp    c002139f <APIC::APIC()+0x39>
c0021434:	c6 05 40 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a40,0x1
c002143b:	90                   	nop
c002143c:	83 c4 18             	add    esp,0x18
c002143f:	5b                   	pop    ebx
c0021440:	c3                   	ret    
c0021441:	90                   	nop

c0021442 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021442:	55                   	push   ebp
c0021443:	89 e5                	mov    ebp,esp
c0021445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021448:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002144e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021451:	72 1d                	jb     c0021470 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021456:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002145c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002145f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021465:	01 d0                	add    eax,edx
c0021467:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002146a:	73 04                	jae    c0021470 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002146c:	b0 01                	mov    al,0x1
c002146e:	eb 02                	jmp    c0021472 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021470:	b0 00                	mov    al,0x0
c0021472:	5d                   	pop    ebp
c0021473:	c3                   	ret    

c0021474 <IOAPIC::read(int)>:
c0021474:	55                   	push   ebp
c0021475:	89 e5                	mov    ebp,esp
c0021477:	83 ec 10             	sub    esp,0x10
c002147a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002147d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021483:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021486:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021489:	0f b6 d0             	movzx  edx,al
c002148c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002148f:	89 10                	mov    DWORD PTR [eax],edx
c0021491:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021494:	83 c0 10             	add    eax,0x10
c0021497:	8b 00                	mov    eax,DWORD PTR [eax]
c0021499:	c9                   	leave  
c002149a:	c3                   	ret    
c002149b:	90                   	nop

c002149c <IOAPIC::open(int, int, void*)>:
c002149c:	55                   	push   ebp
c002149d:	89 e5                	mov    ebp,esp
c002149f:	57                   	push   edi
c00214a0:	56                   	push   esi
c00214a1:	53                   	push   ebx
c00214a2:	83 ec 0c             	sub    esp,0xc
c00214a5:	83 ec 0c             	sub    esp,0xc
c00214a8:	68 4f 6b 02 c0       	push   0xc0026b4f
c00214ad:	e8 01 b8 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00214b2:	83 c4 10             	add    esp,0x10
c00214b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00214bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00214c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00214ca:	8b 14 85 60 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7ba0]
c00214d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214d4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00214da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214dd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00214e3:	8b 14 85 e0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b20]
c00214ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214ed:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00214f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214f6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00214fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214ff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021505:	0f b6 f8             	movzx  edi,al
c0021508:	89 d0                	mov    eax,edx
c002150a:	ba 00 00 00 00       	mov    edx,0x0
c002150f:	89 c1                	mov    ecx,eax
c0021511:	80 e5 ff             	and    ch,0xff
c0021514:	89 cb                	mov    ebx,ecx
c0021516:	0f b6 f2             	movzx  esi,dl
c0021519:	89 d8                	mov    eax,ebx
c002151b:	89 f2                	mov    edx,esi
c002151d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021520:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021523:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021527:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002152b:	83 e0 00             	and    eax,0x0
c002152e:	09 d0                	or     eax,edx
c0021530:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021537:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002153d:	8d 50 01             	lea    edx,[eax+0x1]
c0021540:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021543:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021549:	0f b6 d0             	movzx  edx,al
c002154c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002154f:	83 c2 08             	add    edx,0x8
c0021552:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021556:	0f b6 c9             	movzx  ecx,cl
c0021559:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002155f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021563:	83 ec 08             	sub    esp,0x8
c0021566:	6a 01                	push   0x1
c0021568:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002156b:	e8 04 ff ff ff       	call   c0021474 <IOAPIC::read(int)>
c0021570:	83 c4 10             	add    esp,0x10
c0021573:	c1 f8 10             	sar    eax,0x10
c0021576:	0f b6 c0             	movzx  eax,al
c0021579:	8d 50 01             	lea    edx,[eax+0x1]
c002157c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002157f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021585:	b8 00 00 00 00       	mov    eax,0x0
c002158a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002158d:	5b                   	pop    ebx
c002158e:	5e                   	pop    esi
c002158f:	5f                   	pop    edi
c0021590:	5d                   	pop    ebp
c0021591:	c3                   	ret    

c0021592 <IOAPIC::write(int, int)>:
c0021592:	55                   	push   ebp
c0021593:	89 e5                	mov    ebp,esp
c0021595:	83 ec 10             	sub    esp,0x10
c0021598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002159b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00215a1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00215a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00215a7:	0f b6 d0             	movzx  edx,al
c00215aa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00215ad:	89 10                	mov    DWORD PTR [eax],edx
c00215af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00215b2:	8d 50 10             	lea    edx,[eax+0x10]
c00215b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215b8:	89 02                	mov    DWORD PTR [edx],eax
c00215ba:	90                   	nop
c00215bb:	c9                   	leave  
c00215bc:	c3                   	ret    
c00215bd:	90                   	nop

c00215be <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00215be:	55                   	push   ebp
c00215bf:	89 e5                	mov    ebp,esp
c00215c1:	53                   	push   ebx
c00215c2:	83 ec 2c             	sub    esp,0x2c
c00215c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00215c8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00215cb:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00215ce:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00215d1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00215d4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215d7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00215da:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00215dd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00215e0:	88 d8                	mov    al,bl
c00215e2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00215e5:	88 c8                	mov    al,cl
c00215e7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00215ea:	88 d0                	mov    al,dl
c00215ec:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00215ef:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00215f3:	83 c0 08             	add    eax,0x8
c00215f6:	01 c0                	add    eax,eax
c00215f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00215fb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00215ff:	83 c0 08             	add    eax,0x8
c0021602:	01 c0                	add    eax,eax
c0021604:	40                   	inc    eax
c0021605:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0021608:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002160b:	50                   	push   eax
c002160c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002160f:	e8 60 fe ff ff       	call   c0021474 <IOAPIC::read(int)>
c0021614:	83 c4 08             	add    esp,0x8
c0021617:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002161a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0021621:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021624:	c1 e0 18             	shl    eax,0x18
c0021627:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002162a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002162d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021630:	52                   	push   edx
c0021631:	50                   	push   eax
c0021632:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021635:	e8 58 ff ff ff       	call   c0021592 <IOAPIC::write(int, int)>
c002163a:	83 c4 0c             	add    esp,0xc
c002163d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021640:	50                   	push   eax
c0021641:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021644:	e8 2b fe ff ff       	call   c0021474 <IOAPIC::read(int)>
c0021649:	83 c4 08             	add    esp,0x8
c002164c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002164f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0021656:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002165d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0021664:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021668:	74 09                	je     c0021673 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002166a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021671:	eb 07                	jmp    c002167a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0021673:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002167a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002167e:	74 09                	je     c0021689 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0021680:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021687:	eb 07                	jmp    c0021690 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021689:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021690:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021697:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002169b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002169e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00216a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00216a4:	52                   	push   edx
c00216a5:	50                   	push   eax
c00216a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00216a9:	e8 e4 fe ff ff       	call   c0021592 <IOAPIC::write(int, int)>
c00216ae:	83 c4 0c             	add    esp,0xc
c00216b1:	90                   	nop
c00216b2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00216b5:	c9                   	leave  
c00216b6:	c3                   	ret    
c00216b7:	90                   	nop

c00216b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00216b8:	55                   	push   ebp
c00216b9:	89 e5                	mov    ebp,esp
c00216bb:	57                   	push   edi
c00216bc:	56                   	push   esi
c00216bd:	53                   	push   ebx
c00216be:	83 ec 2c             	sub    esp,0x2c
c00216c1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00216c4:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00216c7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00216cb:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00216cf:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00216d3:	74 5a                	je     c002172f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00216d5:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00216d9:	7f 44                	jg     c002171f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00216db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00216de:	05 00 72 02 c0       	add    eax,0xc0027200
c00216e3:	8a 00                	mov    al,BYTE PTR [eax]
c00216e5:	0f b6 c0             	movzx  eax,al
c00216e8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00216eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00216ee:	66 8b 84 00 00 84 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7c00]
c00216f6:	0f b7 c0             	movzx  eax,ax
c00216f9:	83 e0 02             	and    eax,0x2
c00216fc:	85 c0                	test   eax,eax
c00216fe:	74 04                	je     c0021704 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021700:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0021704:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021707:	66 8b 84 00 00 84 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7c00]
c002170f:	0f b7 c0             	movzx  eax,ax
c0021712:	83 e0 08             	and    eax,0x8
c0021715:	85 c0                	test   eax,eax
c0021717:	74 16                	je     c002172f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021719:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002171d:	eb 10                	jmp    c002172f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002171f:	83 ec 0c             	sub    esp,0xc
c0021722:	68 60 6b 02 c0       	push   0xc0026b60
c0021727:	e8 33 31 ff ff       	call   c001485f <Krnl::panic(char const*)>
c002172c:	83 c4 10             	add    esp,0x10
c002172f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0021733:	a1 00 9a 02 c0       	mov    eax,ds:0xc0029a00
c0021738:	83 ec 08             	sub    esp,0x8
c002173b:	50                   	push   eax
c002173c:	68 98 6b 02 c0       	push   0xc0026b98
c0021741:	e8 6d b5 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0021746:	83 c4 10             	add    esp,0x10
c0021749:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021750:	a1 00 9a 02 c0       	mov    eax,ds:0xc0029a00
c0021755:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0021758:	7d 67                	jge    c00217c1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002175a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002175d:	8b 04 85 20 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65e0]
c0021764:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021767:	83 ec 08             	sub    esp,0x8
c002176a:	52                   	push   edx
c002176b:	50                   	push   eax
c002176c:	e8 d1 fc ff ff       	call   c0021442 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021771:	83 c4 10             	add    esp,0x10
c0021774:	84 c0                	test   al,al
c0021776:	74 44                	je     c00217bc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021778:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002177b:	8b 1c 85 20 9a 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd65e0]
c0021782:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021786:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021789:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002178d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021790:	83 c0 20             	add    eax,0x20
c0021793:	0f b6 f0             	movzx  esi,al
c0021796:	b8 00 00 00 00       	mov    eax,0x0
c002179b:	99                   	cdq    
c002179c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002179f:	0f b6 c9             	movzx  ecx,cl
c00217a2:	83 ec 04             	sub    esp,0x4
c00217a5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00217a8:	57                   	push   edi
c00217a9:	56                   	push   esi
c00217aa:	52                   	push   edx
c00217ab:	50                   	push   eax
c00217ac:	51                   	push   ecx
c00217ad:	53                   	push   ebx
c00217ae:	e8 0b fe ff ff       	call   c00215be <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00217b3:	83 c4 20             	add    esp,0x20
c00217b6:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00217ba:	eb 05                	jmp    c00217c1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00217bc:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00217bf:	eb 8f                	jmp    c0021750 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00217c1:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00217c4:	83 f0 01             	xor    eax,0x1
c00217c7:	84 c0                	test   al,al
c00217c9:	74 10                	je     c00217db <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00217cb:	83 ec 0c             	sub    esp,0xc
c00217ce:	68 af 6b 02 c0       	push   0xc0026baf
c00217d3:	e8 87 30 ff ff       	call   c001485f <Krnl::panic(char const*)>
c00217d8:	83 c4 10             	add    esp,0x10
c00217db:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00217df:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00217e6:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00217ea:	7f 65                	jg     c0021851 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00217ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217ef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00217f2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00217f9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00217fc:	01 ca                	add    edx,ecx
c00217fe:	83 c2 54             	add    edx,0x54
c0021801:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021805:	85 c0                	test   eax,eax
c0021807:	75 43                	jne    c002184c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002180c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002180f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021816:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021819:	01 ca                	add    edx,ecx
c002181b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002181e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021821:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021828:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002182b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021832:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021835:	01 ca                	add    edx,ecx
c0021837:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002183d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021840:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021844:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021847:	83 e8 20             	sub    eax,0x20
c002184a:	eb 1a                	jmp    c0021866 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002184c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002184f:	eb 95                	jmp    c00217e6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021851:	83 ec 0c             	sub    esp,0xc
c0021854:	68 bc 6b 02 c0       	push   0xc0026bbc
c0021859:	e8 01 30 ff ff       	call   c001485f <Krnl::panic(char const*)>
c002185e:	83 c4 10             	add    esp,0x10
c0021861:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021866:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021869:	5b                   	pop    ebx
c002186a:	5e                   	pop    esi
c002186b:	5f                   	pop    edi
c002186c:	5d                   	pop    ebp
c002186d:	c3                   	ret    

c002186e <PIC::disable()>:
c002186e:	55                   	push   ebp
c002186f:	89 e5                	mov    ebp,esp
c0021871:	83 ec 10             	sub    esp,0x10
c0021874:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002187a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002187e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021881:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021885:	ee                   	out    dx,al
c0021886:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002188c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021890:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021893:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021897:	ee                   	out    dx,al
c0021898:	90                   	nop
c0021899:	c9                   	leave  
c002189a:	c3                   	ret    
c002189b:	90                   	nop

c002189c <PIC::close(int, int, void*)>:
c002189c:	55                   	push   ebp
c002189d:	89 e5                	mov    ebp,esp
c002189f:	83 ec 08             	sub    esp,0x8
c00218a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00218a7:	83 c0 3c             	add    eax,0x3c
c00218aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00218ac:	83 ec 0c             	sub    esp,0xc
c00218af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218b2:	ff d0                	call   eax
c00218b4:	83 c4 10             	add    esp,0x10
c00218b7:	b8 00 00 00 00       	mov    eax,0x0
c00218bc:	c9                   	leave  
c00218bd:	c3                   	ret    

c00218be <PIC::PIC()>:
c00218be:	83 ec 0c             	sub    esp,0xc
c00218c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c5:	83 ec 08             	sub    esp,0x8
c00218c8:	68 68 6c 02 c0       	push   0xc0026c68
c00218cd:	50                   	push   eax
c00218ce:	e8 e3 d1 fe ff       	call   c000eab6 <InterruptController::InterruptController(char const*)>
c00218d3:	83 c4 10             	add    esp,0x10
c00218d6:	ba 94 6c 02 c0       	mov    edx,0xc0026c94
c00218db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218df:	89 10                	mov    DWORD PTR [eax],edx
c00218e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218eb:	0f b6 d0             	movzx  edx,al
c00218ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00218f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021903:	0f b6 d0             	movzx  edx,al
c0021906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002190a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002190f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021913:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021919:	8d 50 01             	lea    edx,[eax+0x1]
c002191c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021920:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021926:	0f b6 d0             	movzx  edx,al
c0021929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002192d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021931:	83 e1 3f             	and    ecx,0x3f
c0021934:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002193c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021942:	0f b6 d0             	movzx  edx,al
c0021945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021949:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021954:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002195a:	0f b6 d0             	movzx  edx,al
c002195d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021961:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002196a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021970:	8d 50 01             	lea    edx,[eax+0x1]
c0021973:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021977:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002197d:	0f b6 d0             	movzx  edx,al
c0021980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021984:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021988:	83 e1 3f             	and    ecx,0x3f
c002198b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002198f:	90                   	nop
c0021990:	83 c4 0c             	add    esp,0xc
c0021993:	c3                   	ret    

c0021994 <PIC::ioWait()>:
c0021994:	eb 00                	jmp    c0021996 <PIC::ioWait()+0x2>
c0021996:	eb 00                	jmp    c0021998 <PIC::ioWait()+0x4>
c0021998:	90                   	nop
c0021999:	c3                   	ret    

c002199a <PIC::getIRQReg(int)>:
c002199a:	55                   	push   ebp
c002199b:	89 e5                	mov    ebp,esp
c002199d:	83 ec 10             	sub    esp,0x10
c00219a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219a3:	0f b6 c0             	movzx  eax,al
c00219a6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00219ac:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00219af:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00219b2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00219b6:	ee                   	out    dx,al
c00219b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219ba:	0f b6 c0             	movzx  eax,al
c00219bd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00219c3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00219c6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00219c9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00219cd:	ee                   	out    dx,al
c00219ce:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00219d4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00219d8:	89 c2                	mov    edx,eax
c00219da:	ec                   	in     al,dx
c00219db:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00219de:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00219e1:	0f b6 c0             	movzx  eax,al
c00219e4:	c1 e0 08             	shl    eax,0x8
c00219e7:	89 c1                	mov    ecx,eax
c00219e9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00219ef:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00219f3:	89 c2                	mov    edx,eax
c00219f5:	ec                   	in     al,dx
c00219f6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00219f9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00219fc:	0f b6 c0             	movzx  eax,al
c00219ff:	09 c8                	or     eax,ecx
c0021a01:	c9                   	leave  
c0021a02:	c3                   	ret    
c0021a03:	90                   	nop

c0021a04 <PIC::eoi(unsigned char)>:
c0021a04:	55                   	push   ebp
c0021a05:	89 e5                	mov    ebp,esp
c0021a07:	83 ec 14             	sub    esp,0x14
c0021a0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a0d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021a10:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021a14:	75 1e                	jne    c0021a34 <PIC::eoi(unsigned char)+0x30>
c0021a16:	6a 0b                	push   0xb
c0021a18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a1b:	e8 7a ff ff ff       	call   c002199a <PIC::getIRQReg(int)>
c0021a20:	83 c4 08             	add    esp,0x8
c0021a23:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021a27:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021a2b:	25 80 00 00 00       	and    eax,0x80
c0021a30:	85 c0                	test   eax,eax
c0021a32:	74 5f                	je     c0021a93 <PIC::eoi(unsigned char)+0x8f>
c0021a34:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021a38:	75 2d                	jne    c0021a67 <PIC::eoi(unsigned char)+0x63>
c0021a3a:	6a 0b                	push   0xb
c0021a3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a3f:	e8 56 ff ff ff       	call   c002199a <PIC::getIRQReg(int)>
c0021a44:	83 c4 08             	add    esp,0x8
c0021a47:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021a4b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021a4e:	66 85 c0             	test   ax,ax
c0021a51:	78 14                	js     c0021a67 <PIC::eoi(unsigned char)+0x63>
c0021a53:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021a59:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021a5d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021a60:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021a64:	ee                   	out    dx,al
c0021a65:	eb 2d                	jmp    c0021a94 <PIC::eoi(unsigned char)+0x90>
c0021a67:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021a6b:	76 12                	jbe    c0021a7f <PIC::eoi(unsigned char)+0x7b>
c0021a6d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021a73:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021a77:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021a7a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021a7e:	ee                   	out    dx,al
c0021a7f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021a85:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021a89:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021a8c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021a90:	ee                   	out    dx,al
c0021a91:	eb 01                	jmp    c0021a94 <PIC::eoi(unsigned char)+0x90>
c0021a93:	90                   	nop
c0021a94:	c9                   	leave  
c0021a95:	c3                   	ret    

c0021a96 <PIC::remap()>:
c0021a96:	55                   	push   ebp
c0021a97:	89 e5                	mov    ebp,esp
c0021a99:	83 ec 48             	sub    esp,0x48
c0021a9c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021aa3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021aaa:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021ab0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021ab3:	89 c2                	mov    edx,eax
c0021ab5:	ec                   	in     al,dx
c0021ab6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021ab9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021abc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021abf:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021ac5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021ac8:	89 c2                	mov    edx,eax
c0021aca:	ec                   	in     al,dx
c0021acb:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021ace:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021ad1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021ad4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021ada:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021ade:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021ae1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021ae4:	ee                   	out    dx,al
c0021ae5:	83 ec 0c             	sub    esp,0xc
c0021ae8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021aeb:	e8 a4 fe ff ff       	call   c0021994 <PIC::ioWait()>
c0021af0:	83 c4 10             	add    esp,0x10
c0021af3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021af9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021afd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021b00:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021b03:	ee                   	out    dx,al
c0021b04:	83 ec 0c             	sub    esp,0xc
c0021b07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b0a:	e8 85 fe ff ff       	call   c0021994 <PIC::ioWait()>
c0021b0f:	83 c4 10             	add    esp,0x10
c0021b12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021b15:	0f b6 c0             	movzx  eax,al
c0021b18:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021b1e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021b21:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021b24:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021b27:	ee                   	out    dx,al
c0021b28:	83 ec 0c             	sub    esp,0xc
c0021b2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b2e:	e8 61 fe ff ff       	call   c0021994 <PIC::ioWait()>
c0021b33:	83 c4 10             	add    esp,0x10
c0021b36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021b39:	0f b6 c0             	movzx  eax,al
c0021b3c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021b42:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021b45:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021b48:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021b4b:	ee                   	out    dx,al
c0021b4c:	83 ec 0c             	sub    esp,0xc
c0021b4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b52:	e8 3d fe ff ff       	call   c0021994 <PIC::ioWait()>
c0021b57:	83 c4 10             	add    esp,0x10
c0021b5a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021b60:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021b64:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021b67:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021b6a:	ee                   	out    dx,al
c0021b6b:	83 ec 0c             	sub    esp,0xc
c0021b6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b71:	e8 1e fe ff ff       	call   c0021994 <PIC::ioWait()>
c0021b76:	83 c4 10             	add    esp,0x10
c0021b79:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021b7f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021b83:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021b86:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021b89:	ee                   	out    dx,al
c0021b8a:	83 ec 0c             	sub    esp,0xc
c0021b8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b90:	e8 ff fd ff ff       	call   c0021994 <PIC::ioWait()>
c0021b95:	83 c4 10             	add    esp,0x10
c0021b98:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021b9e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021ba2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021ba5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021ba8:	ee                   	out    dx,al
c0021ba9:	83 ec 0c             	sub    esp,0xc
c0021bac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021baf:	e8 e0 fd ff ff       	call   c0021994 <PIC::ioWait()>
c0021bb4:	83 c4 10             	add    esp,0x10
c0021bb7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021bbd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021bc1:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021bc4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021bc7:	ee                   	out    dx,al
c0021bc8:	83 ec 0c             	sub    esp,0xc
c0021bcb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bce:	e8 c1 fd ff ff       	call   c0021994 <PIC::ioWait()>
c0021bd3:	83 c4 10             	add    esp,0x10
c0021bd6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021bda:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021be0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021be3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021be6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021be9:	ee                   	out    dx,al
c0021bea:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021bee:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021bf4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021bf7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021bfa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021bfd:	ee                   	out    dx,al
c0021bfe:	90                   	nop
c0021bff:	c9                   	leave  
c0021c00:	c3                   	ret    
c0021c01:	90                   	nop

c0021c02 <PIC::open(int, int, void*)>:
c0021c02:	55                   	push   ebp
c0021c03:	89 e5                	mov    ebp,esp
c0021c05:	83 ec 18             	sub    esp,0x18
c0021c08:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021c0e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021c12:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021c15:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021c19:	ee                   	out    dx,al
c0021c1a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021c20:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021c24:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021c27:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021c2b:	ee                   	out    dx,al
c0021c2c:	83 ec 0c             	sub    esp,0xc
c0021c2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c32:	e8 5f fe ff ff       	call   c0021a96 <PIC::remap()>
c0021c37:	83 c4 10             	add    esp,0x10
c0021c3a:	b8 00 00 00 00       	mov    eax,0x0
c0021c3f:	c9                   	leave  
c0021c40:	c3                   	ret    
c0021c41:	66 90                	xchg   ax,ax
c0021c43:	90                   	nop

c0021c44 <APICTimer::close(int, int, void*)>:
c0021c44:	b8 00 00 00 00       	mov    eax,0x0
c0021c49:	c3                   	ret    
c0021c4a:	66 90                	xchg   ax,ax

c0021c4c <apicTimerHandler(regs*, void*)>:
c0021c4c:	83 ec 0c             	sub    esp,0xc
c0021c4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c53:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021c55:	b8 10 27 00 00       	mov    eax,0x2710
c0021c5a:	ba 00 00 00 00       	mov    edx,0x0
c0021c5f:	f7 f1                	div    ecx
c0021c61:	83 ec 0c             	sub    esp,0xc
c0021c64:	50                   	push   eax
c0021c65:	e8 57 ed fe ff       	call   c00109c1 <timerHandler(unsigned int)>
c0021c6a:	83 c4 10             	add    esp,0x10
c0021c6d:	90                   	nop
c0021c6e:	83 c4 0c             	add    esp,0xc
c0021c71:	c3                   	ret    
c0021c72:	66 90                	xchg   ax,ax

c0021c74 <APICTimer::write(int)>:
c0021c74:	83 ec 1c             	sub    esp,0x1c
c0021c77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c7b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021c7f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021c85:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0021c8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021c90:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021c96:	83 ec 0c             	sub    esp,0xc
c0021c99:	50                   	push   eax
c0021c9a:	e8 e1 f4 ff ff       	call   c0021180 <APIC::getBase()>
c0021c9f:	83 c4 10             	add    esp,0x10
c0021ca2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021ca6:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0021cab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021caf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021cb3:	05 e0 03 00 00       	add    eax,0x3e0
c0021cb8:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021cbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021cc2:	05 80 03 00 00       	add    eax,0x380
c0021cc7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0021ccd:	fb                   	sti    
c0021cce:	66 90                	xchg   ax,ax
c0021cd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021cd4:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0021cda:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0021cdf:	39 c2                	cmp    edx,eax
c0021ce1:	76 05                	jbe    c0021ce8 <APICTimer::write(int)+0x74>
c0021ce3:	eb eb                	jmp    c0021cd0 <APICTimer::write(int)+0x5c>
c0021ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ce8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021cec:	05 20 03 00 00       	add    eax,0x320
c0021cf1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0021cf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021cfb:	05 90 03 00 00       	add    eax,0x390
c0021d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d02:	f7 d0                	not    eax
c0021d04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d08:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d10:	ba 00 00 00 00       	mov    edx,0x0
c0021d15:	f7 f1                	div    ecx
c0021d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d1e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021d24:	0d 00 00 02 00       	or     eax,0x20000
c0021d29:	89 c2                	mov    edx,eax
c0021d2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d2f:	05 20 03 00 00       	add    eax,0x320
c0021d34:	89 10                	mov    DWORD PTR [eax],edx
c0021d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d3a:	05 e0 03 00 00       	add    eax,0x3e0
c0021d3f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021d45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d49:	05 80 03 00 00       	add    eax,0x380
c0021d4e:	89 c2                	mov    edx,eax
c0021d50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021d53:	89 02                	mov    DWORD PTR [edx],eax
c0021d55:	90                   	nop
c0021d56:	83 c4 1c             	add    esp,0x1c
c0021d59:	c3                   	ret    
c0021d5a:	66 90                	xchg   ax,ax

c0021d5c <APICTimer::open(int, int, void*)>:
c0021d5c:	57                   	push   edi
c0021d5d:	56                   	push   esi
c0021d5e:	53                   	push   ebx
c0021d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d63:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d65:	83 c0 24             	add    eax,0x24
c0021d68:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d6a:	83 ec 08             	sub    esp,0x8
c0021d6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d75:	ff d0                	call   eax
c0021d77:	83 c4 10             	add    esp,0x10
c0021d7a:	a1 08 7b 02 c0       	mov    eax,ds:0xc0027b08
c0021d7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021d85:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021d8b:	83 ec 0c             	sub    esp,0xc
c0021d8e:	50                   	push   eax
c0021d8f:	e8 ec f3 ff ff       	call   c0021180 <APIC::getBase()>
c0021d94:	83 c4 10             	add    esp,0x10
c0021d97:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0021d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021da7:	0f b6 f8             	movzx  edi,al
c0021daa:	89 d0                	mov    eax,edx
c0021dac:	ba 00 00 00 00       	mov    edx,0x0
c0021db1:	89 c1                	mov    ecx,eax
c0021db3:	80 e5 ff             	and    ch,0xff
c0021db6:	89 cb                	mov    ebx,ecx
c0021db8:	0f b6 f2             	movzx  esi,dl
c0021dbb:	89 d8                	mov    eax,ebx
c0021dbd:	89 f2                	mov    edx,esi
c0021dbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021dc3:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021dc6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021dca:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021dce:	83 e0 00             	and    eax,0x0
c0021dd1:	09 d0                	or     eax,edx
c0021dd3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ddb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021de1:	8d 50 01             	lea    edx,[eax+0x1]
c0021de4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021de8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021dee:	0f b6 d0             	movzx  edx,al
c0021df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021df5:	83 c2 08             	add    edx,0x8
c0021df8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021dfc:	0f b6 c9             	movzx  ecx,cl
c0021dff:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021e05:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e0d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021e11:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021e1f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0021e25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021e29:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021e2f:	83 ec 0c             	sub    esp,0xc
c0021e32:	51                   	push   ecx
c0021e33:	6a 01                	push   0x1
c0021e35:	68 4c 1c 02 c0       	push   0xc0021c4c
c0021e3a:	52                   	push   edx
c0021e3b:	50                   	push   eax
c0021e3c:	e8 71 c2 fe ff       	call   c000e0b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021e41:	83 c4 20             	add    esp,0x20
c0021e44:	89 c2                	mov    edx,eax
c0021e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e4a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021e50:	b8 00 00 00 00       	mov    eax,0x0
c0021e55:	5b                   	pop    ebx
c0021e56:	5e                   	pop    esi
c0021e57:	5f                   	pop    edi
c0021e58:	c3                   	ret    
c0021e59:	90                   	nop
c0021e5a:	66 90                	xchg   ax,ax

c0021e5c <APICTimer::APICTimer()>:
c0021e5c:	83 ec 0c             	sub    esp,0xc
c0021e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e63:	83 ec 08             	sub    esp,0x8
c0021e66:	68 d4 6c 02 c0       	push   0xc0026cd4
c0021e6b:	50                   	push   eax
c0021e6c:	e8 bf ea fe ff       	call   c0010930 <Timer::Timer(char const*)>
c0021e71:	83 c4 10             	add    esp,0x10
c0021e74:	ba e8 6c 02 c0       	mov    edx,0xc0026ce8
c0021e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e7d:	89 10                	mov    DWORD PTR [eax],edx
c0021e7f:	90                   	nop
c0021e80:	83 c4 0c             	add    esp,0xc
c0021e83:	c3                   	ret    

c0021e84 <PIT::write(int)>:
c0021e84:	83 ec 10             	sub    esp,0x10
c0021e87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021e8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021e8f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021e95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021e99:	a3 44 9a 02 c0       	mov    ds:0xc0029a44,eax
c0021e9e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0021ea3:	99                   	cdq    
c0021ea4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021ea8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021eac:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0021eb3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021eb8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021ebc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021ec1:	ee                   	out    dx,al
c0021ec2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ec6:	0f b6 c0             	movzx  eax,al
c0021ec9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021ed0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021ed4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021ed8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021edd:	ee                   	out    dx,al
c0021ede:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ee2:	c1 f8 08             	sar    eax,0x8
c0021ee5:	0f b6 c0             	movzx  eax,al
c0021ee8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0021eef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021ef3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021ef7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021efc:	ee                   	out    dx,al
c0021efd:	90                   	nop
c0021efe:	83 c4 10             	add    esp,0x10
c0021f01:	c3                   	ret    
c0021f02:	66 90                	xchg   ax,ax

c0021f04 <pitHandler(regs*, void*)>:
c0021f04:	83 ec 0c             	sub    esp,0xc
c0021f07:	8b 0d 44 9a 02 c0    	mov    ecx,DWORD PTR ds:0xc0029a44
c0021f0d:	b8 a0 86 01 00       	mov    eax,0x186a0
c0021f12:	99                   	cdq    
c0021f13:	f7 f9                	idiv   ecx
c0021f15:	83 ec 0c             	sub    esp,0xc
c0021f18:	50                   	push   eax
c0021f19:	e8 a3 ea fe ff       	call   c00109c1 <timerHandler(unsigned int)>
c0021f1e:	83 c4 10             	add    esp,0x10
c0021f21:	90                   	nop
c0021f22:	83 c4 0c             	add    esp,0xc
c0021f25:	c3                   	ret    
c0021f26:	66 90                	xchg   ax,ax

c0021f28 <PIT::open(int, int, void*)>:
c0021f28:	83 ec 0c             	sub    esp,0xc
c0021f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f31:	83 c0 24             	add    eax,0x24
c0021f34:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f36:	83 ec 08             	sub    esp,0x8
c0021f39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f41:	ff d0                	call   eax
c0021f43:	83 c4 10             	add    esp,0x10
c0021f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f4a:	83 ec 0c             	sub    esp,0xc
c0021f4d:	6a 00                	push   0x0
c0021f4f:	6a 01                	push   0x1
c0021f51:	68 04 1f 02 c0       	push   0xc0021f04
c0021f56:	6a 00                	push   0x0
c0021f58:	50                   	push   eax
c0021f59:	e8 54 c1 fe ff       	call   c000e0b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021f5e:	83 c4 20             	add    esp,0x20
c0021f61:	89 c2                	mov    edx,eax
c0021f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f67:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021f6d:	b8 00 00 00 00       	mov    eax,0x0
c0021f72:	83 c4 0c             	add    esp,0xc
c0021f75:	c3                   	ret    
c0021f76:	66 90                	xchg   ax,ax

c0021f78 <PIT::close(int, int, void*)>:
c0021f78:	83 ec 0c             	sub    esp,0xc
c0021f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f7f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f8d:	6a 01                	push   0x1
c0021f8f:	68 04 1f 02 c0       	push   0xc0021f04
c0021f94:	6a 00                	push   0x0
c0021f96:	50                   	push   eax
c0021f97:	e8 60 c1 fe ff       	call   c000e0fc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021f9c:	83 c4 10             	add    esp,0x10
c0021f9f:	b8 00 00 00 00       	mov    eax,0x0
c0021fa4:	83 c4 0c             	add    esp,0xc
c0021fa7:	c3                   	ret    

c0021fa8 <PIT::PIT()>:
c0021fa8:	83 ec 0c             	sub    esp,0xc
c0021fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021faf:	83 ec 08             	sub    esp,0x8
c0021fb2:	68 10 6d 02 c0       	push   0xc0026d10
c0021fb7:	50                   	push   eax
c0021fb8:	e8 73 e9 fe ff       	call   c0010930 <Timer::Timer(char const*)>
c0021fbd:	83 c4 10             	add    esp,0x10
c0021fc0:	ba 38 6d 02 c0       	mov    edx,0xc0026d38
c0021fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc9:	89 10                	mov    DWORD PTR [eax],edx
c0021fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fcf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021fd5:	0f b6 d0             	movzx  edx,al
c0021fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fdc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021fed:	0f b6 d0             	movzx  edx,al
c0021ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ffd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022003:	8d 50 01             	lea    edx,[eax+0x1]
c0022006:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002200a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022010:	0f b6 d0             	movzx  edx,al
c0022013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022017:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002201b:	83 e1 3f             	and    ecx,0x3f
c002201e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022022:	90                   	nop
c0022023:	83 c4 0c             	add    esp,0xc
c0022026:	c3                   	ret    
c0022027:	66 90                	xchg   ax,ax
c0022029:	66 90                	xchg   ax,ax
c002202b:	66 90                	xchg   ax,ax
c002202d:	66 90                	xchg   ax,ax
c002202f:	90                   	nop

c0022030 <avxDetect>:
c0022030:	b8 00 00 00 00       	mov    eax,0x0
c0022035:	c3                   	ret    

c0022036 <avxSave>:
c0022036:	c3                   	ret    

c0022037 <avxLoad>:
c0022037:	c3                   	ret    

c0022038 <avxInit>:
c0022038:	c3                   	ret    

c0022039 <avxClose>:
c0022039:	c3                   	ret    

c002203a <wouldSheSayYes>:
c002203a:	c3                   	ret    
c002203b:	49                   	dec    ecx
c002203c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022040:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022044:	75 20                	jne    c0022066 <sseDetect.noSSE+0x1>
c0022046:	4e                   	dec    esi
c0022047:	79 61                	jns    c00220aa <x87Detect+0x14>
c0022049:	68 2e 2e 2e 00       	push   0x2e2e2e
c002204e:	66 90                	xchg   ax,ax

c0022050 <absolutelyNoChanceInHell>:
c0022050:	b8 01 00 00 00       	mov    eax,0x1
c0022055:	0f a2                	cpuid  
c0022057:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002205d:	74 06                	je     c0022065 <sseDetect.noSSE>
c002205f:	b8 01 00 00 00       	mov    eax,0x1
c0022064:	c3                   	ret    

c0022065 <sseDetect.noSSE>:
c0022065:	31 c0                	xor    eax,eax
c0022067:	c3                   	ret    

c0022068 <sseSave>:
c0022068:	0f ae 44 24 04       	fxsave [esp+0x4]
c002206d:	c3                   	ret    

c002206e <sseLoad>:
c002206e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0022073:	c3                   	ret    

c0022074 <sseInit>:
c0022074:	e8 49 00 00 00       	call   c00220c2 <x87Init>
c0022079:	0f 20 e0             	mov    eax,cr4
c002207c:	66 0d 00 06          	or     ax,0x600
c0022080:	0f 22 e0             	mov    cr4,eax
c0022083:	c3                   	ret    

c0022084 <sseClose>:
c0022084:	c3                   	ret    
c0022085:	66 90                	xchg   ax,ax
c0022087:	66 90                	xchg   ax,ax
c0022089:	66 90                	xchg   ax,ax
c002208b:	66 90                	xchg   ax,ax
c002208d:	66 90                	xchg   ax,ax
c002208f:	90                   	nop

c0022090 <value_37F>:
c0022090:	7f 03                	jg     c0022095 <value_37A+0x1>

c0022092 <value_37E>:
c0022092:	7e 03                	jle    c0022097 <x87Detect+0x1>

c0022094 <value_37A>:
c0022094:	7a 03                	jp     c0022099 <x87Detect+0x3>

c0022096 <x87Detect>:
c0022096:	b8 01 00 00 00       	mov    eax,0x1
c002209b:	0f a2                	cpuid  
c002209d:	f7 c2 01 00 00 00    	test   edx,0x1
c00220a3:	74 06                	je     c00220ab <x87Detect.nox87>
c00220a5:	b8 01 00 00 00       	mov    eax,0x1
c00220aa:	c3                   	ret    

c00220ab <x87Detect.nox87>:
c00220ab:	b8 00 00 00 00       	mov    eax,0x0
c00220b0:	c3                   	ret    

c00220b1 <x87Save>:
c00220b1:	55                   	push   ebp
c00220b2:	89 e5                	mov    ebp,esp
c00220b4:	9b dd 75 08          	fsave  [ebp+0x8]
c00220b8:	c9                   	leave  
c00220b9:	c3                   	ret    

c00220ba <x87Load>:
c00220ba:	55                   	push   ebp
c00220bb:	89 e5                	mov    ebp,esp
c00220bd:	dd 65 08             	frstor [ebp+0x8]
c00220c0:	c9                   	leave  
c00220c1:	c3                   	ret    

c00220c2 <x87Init>:
c00220c2:	9b db e3             	finit  
c00220c5:	0f 20 c0             	mov    eax,cr0
c00220c8:	66 25 fb ff          	and    ax,0xfffb
c00220cc:	66 0d 22 00          	or     ax,0x22
c00220d0:	0f 22 c0             	mov    cr0,eax
c00220d3:	0f 06                	clts   
c00220d5:	d9 2d 94 20 02 c0    	fldcw  WORD PTR ds:0xc0022094
c00220db:	c3                   	ret    

c00220dc <x87Close>:
c00220dc:	c3                   	ret    
c00220dd:	66 90                	xchg   ax,ax
c00220df:	90                   	nop

c00220e0 <__do_global_ctors_aux>:
c00220e0:	a1 7c 32 02 c0       	mov    eax,ds:0xc002327c
c00220e5:	83 f8 ff             	cmp    eax,0xffffffff
c00220e8:	74 1a                	je     c0022104 <__do_global_ctors_aux+0x24>
c00220ea:	55                   	push   ebp
c00220eb:	89 e5                	mov    ebp,esp
c00220ed:	53                   	push   ebx
c00220ee:	52                   	push   edx
c00220ef:	bb 7c 32 02 c0       	mov    ebx,0xc002327c
c00220f4:	ff d0                	call   eax
c00220f6:	83 eb 04             	sub    ebx,0x4
c00220f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220fb:	83 f8 ff             	cmp    eax,0xffffffff
c00220fe:	75 f4                	jne    c00220f4 <__do_global_ctors_aux+0x14>
c0022100:	58                   	pop    eax
c0022101:	5b                   	pop    ebx
c0022102:	5d                   	pop    ebp
c0022103:	c3                   	ret    
c0022104:	c3                   	ret    
c0022105:	66 90                	xchg   ax,ax
c0022107:	90                   	nop

c0022108 <__divdi3>:
c0022108:	55                   	push   ebp
c0022109:	57                   	push   edi
c002210a:	56                   	push   esi
c002210b:	53                   	push   ebx
c002210c:	83 ec 1c             	sub    esp,0x1c
c002210f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022113:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022117:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002211a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002211e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022122:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022126:	85 db                	test   ebx,ebx
c0022128:	0f 88 8e 00 00 00    	js     c00221bc <__divdi3+0xb4>
c002212e:	89 dd                	mov    ebp,ebx
c0022130:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022138:	89 d3                	mov    ebx,edx
c002213a:	85 d2                	test   edx,edx
c002213c:	79 0d                	jns    c002214b <__divdi3+0x43>
c002213e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022142:	f7 d8                	neg    eax
c0022144:	83 d2 00             	adc    edx,0x0
c0022147:	f7 da                	neg    edx
c0022149:	89 d3                	mov    ebx,edx
c002214b:	89 c7                	mov    edi,eax
c002214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022150:	85 db                	test   ebx,ebx
c0022152:	75 48                	jne    c002219c <__divdi3+0x94>
c0022154:	39 ef                	cmp    edi,ebp
c0022156:	76 24                	jbe    c002217c <__divdi3+0x74>
c0022158:	89 ea                	mov    edx,ebp
c002215a:	f7 f7                	div    edi
c002215c:	89 c1                	mov    ecx,eax
c002215e:	31 f6                	xor    esi,esi
c0022160:	89 c8                	mov    eax,ecx
c0022162:	89 f2                	mov    edx,esi
c0022164:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022168:	85 c9                	test   ecx,ecx
c002216a:	74 07                	je     c0022173 <__divdi3+0x6b>
c002216c:	f7 d8                	neg    eax
c002216e:	83 d2 00             	adc    edx,0x0
c0022171:	f7 da                	neg    edx
c0022173:	83 c4 1c             	add    esp,0x1c
c0022176:	5b                   	pop    ebx
c0022177:	5e                   	pop    esi
c0022178:	5f                   	pop    edi
c0022179:	5d                   	pop    ebp
c002217a:	c3                   	ret    
c002217b:	90                   	nop
c002217c:	85 ff                	test   edi,edi
c002217e:	75 0b                	jne    c002218b <__divdi3+0x83>
c0022180:	b8 01 00 00 00       	mov    eax,0x1
c0022185:	31 d2                	xor    edx,edx
c0022187:	f7 f3                	div    ebx
c0022189:	89 c7                	mov    edi,eax
c002218b:	31 d2                	xor    edx,edx
c002218d:	89 e8                	mov    eax,ebp
c002218f:	f7 f7                	div    edi
c0022191:	89 c6                	mov    esi,eax
c0022193:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022196:	f7 f7                	div    edi
c0022198:	89 c1                	mov    ecx,eax
c002219a:	eb c4                	jmp    c0022160 <__divdi3+0x58>
c002219c:	39 eb                	cmp    ebx,ebp
c002219e:	77 3c                	ja     c00221dc <__divdi3+0xd4>
c00221a0:	0f bd f3             	bsr    esi,ebx
c00221a3:	83 f6 1f             	xor    esi,0x1f
c00221a6:	75 40                	jne    c00221e8 <__divdi3+0xe0>
c00221a8:	39 eb                	cmp    ebx,ebp
c00221aa:	72 09                	jb     c00221b5 <__divdi3+0xad>
c00221ac:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00221af:	0f 87 97 00 00 00    	ja     c002224c <__divdi3+0x144>
c00221b5:	b9 01 00 00 00       	mov    ecx,0x1
c00221ba:	eb a4                	jmp    c0022160 <__divdi3+0x58>
c00221bc:	f7 d9                	neg    ecx
c00221be:	83 d3 00             	adc    ebx,0x0
c00221c1:	f7 db                	neg    ebx
c00221c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00221c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00221ca:	89 dd                	mov    ebp,ebx
c00221cc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00221d4:	e9 5f ff ff ff       	jmp    c0022138 <__divdi3+0x30>
c00221d9:	8d 76 00             	lea    esi,[esi+0x0]
c00221dc:	31 f6                	xor    esi,esi
c00221de:	31 c9                	xor    ecx,ecx
c00221e0:	e9 7b ff ff ff       	jmp    c0022160 <__divdi3+0x58>
c00221e5:	8d 76 00             	lea    esi,[esi+0x0]
c00221e8:	b8 20 00 00 00       	mov    eax,0x20
c00221ed:	29 f0                	sub    eax,esi
c00221ef:	89 f1                	mov    ecx,esi
c00221f1:	d3 e3                	shl    ebx,cl
c00221f3:	89 fa                	mov    edx,edi
c00221f5:	88 c1                	mov    cl,al
c00221f7:	d3 ea                	shr    edx,cl
c00221f9:	09 da                	or     edx,ebx
c00221fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221ff:	89 f1                	mov    ecx,esi
c0022201:	d3 e7                	shl    edi,cl
c0022203:	89 eb                	mov    ebx,ebp
c0022205:	88 c1                	mov    cl,al
c0022207:	d3 eb                	shr    ebx,cl
c0022209:	89 f1                	mov    ecx,esi
c002220b:	d3 e5                	shl    ebp,cl
c002220d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022210:	88 c1                	mov    cl,al
c0022212:	d3 ea                	shr    edx,cl
c0022214:	09 d5                	or     ebp,edx
c0022216:	89 e8                	mov    eax,ebp
c0022218:	89 da                	mov    edx,ebx
c002221a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002221e:	89 d3                	mov    ebx,edx
c0022220:	89 c5                	mov    ebp,eax
c0022222:	f7 e7                	mul    edi
c0022224:	39 d3                	cmp    ebx,edx
c0022226:	72 18                	jb     c0022240 <__divdi3+0x138>
c0022228:	74 0a                	je     c0022234 <__divdi3+0x12c>
c002222a:	89 e9                	mov    ecx,ebp
c002222c:	31 f6                	xor    esi,esi
c002222e:	e9 2d ff ff ff       	jmp    c0022160 <__divdi3+0x58>
c0022233:	90                   	nop
c0022234:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022237:	89 f1                	mov    ecx,esi
c0022239:	d3 e7                	shl    edi,cl
c002223b:	39 c7                	cmp    edi,eax
c002223d:	73 eb                	jae    c002222a <__divdi3+0x122>
c002223f:	90                   	nop
c0022240:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022243:	31 f6                	xor    esi,esi
c0022245:	e9 16 ff ff ff       	jmp    c0022160 <__divdi3+0x58>
c002224a:	66 90                	xchg   ax,ax
c002224c:	31 c9                	xor    ecx,ecx
c002224e:	e9 0d ff ff ff       	jmp    c0022160 <__divdi3+0x58>
c0022253:	90                   	nop

c0022254 <__moddi3>:
c0022254:	55                   	push   ebp
c0022255:	57                   	push   edi
c0022256:	56                   	push   esi
c0022257:	53                   	push   ebx
c0022258:	83 ec 2c             	sub    esp,0x2c
c002225b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002225f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022263:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022267:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002226b:	85 db                	test   ebx,ebx
c002226d:	0f 88 85 00 00 00    	js     c00222f8 <__moddi3+0xa4>
c0022273:	89 de                	mov    esi,ebx
c0022275:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002227d:	89 d7                	mov    edi,edx
c002227f:	85 d2                	test   edx,edx
c0022281:	79 09                	jns    c002228c <__moddi3+0x38>
c0022283:	f7 d8                	neg    eax
c0022285:	83 d2 00             	adc    edx,0x0
c0022288:	f7 da                	neg    edx
c002228a:	89 d7                	mov    edi,edx
c002228c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022290:	89 cd                	mov    ebp,ecx
c0022292:	85 ff                	test   edi,edi
c0022294:	75 52                	jne    c00222e8 <__moddi3+0x94>
c0022296:	89 c3                	mov    ebx,eax
c0022298:	39 f0                	cmp    eax,esi
c002229a:	76 24                	jbe    c00222c0 <__moddi3+0x6c>
c002229c:	89 c8                	mov    eax,ecx
c002229e:	89 f2                	mov    edx,esi
c00222a0:	f7 f3                	div    ebx
c00222a2:	89 d6                	mov    esi,edx
c00222a4:	89 f0                	mov    eax,esi
c00222a6:	31 d2                	xor    edx,edx
c00222a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222ac:	85 c9                	test   ecx,ecx
c00222ae:	74 07                	je     c00222b7 <__moddi3+0x63>
c00222b0:	f7 d8                	neg    eax
c00222b2:	83 d2 00             	adc    edx,0x0
c00222b5:	f7 da                	neg    edx
c00222b7:	83 c4 2c             	add    esp,0x2c
c00222ba:	5b                   	pop    ebx
c00222bb:	5e                   	pop    esi
c00222bc:	5f                   	pop    edi
c00222bd:	5d                   	pop    ebp
c00222be:	c3                   	ret    
c00222bf:	90                   	nop
c00222c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00222c4:	85 db                	test   ebx,ebx
c00222c6:	75 0d                	jne    c00222d5 <__moddi3+0x81>
c00222c8:	b8 01 00 00 00       	mov    eax,0x1
c00222cd:	31 d2                	xor    edx,edx
c00222cf:	f7 f7                	div    edi
c00222d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00222d5:	89 f0                	mov    eax,esi
c00222d7:	31 d2                	xor    edx,edx
c00222d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00222dd:	f7 f7                	div    edi
c00222df:	89 e8                	mov    eax,ebp
c00222e1:	f7 f7                	div    edi
c00222e3:	89 d6                	mov    esi,edx
c00222e5:	eb bd                	jmp    c00222a4 <__moddi3+0x50>
c00222e7:	90                   	nop
c00222e8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00222ec:	39 f7                	cmp    edi,esi
c00222ee:	76 20                	jbe    c0022310 <__moddi3+0xbc>
c00222f0:	89 c8                	mov    eax,ecx
c00222f2:	89 f2                	mov    edx,esi
c00222f4:	eb b2                	jmp    c00222a8 <__moddi3+0x54>
c00222f6:	66 90                	xchg   ax,ax
c00222f8:	f7 d9                	neg    ecx
c00222fa:	83 d3 00             	adc    ebx,0x0
c00222fd:	f7 db                	neg    ebx
c00222ff:	89 de                	mov    esi,ebx
c0022301:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022309:	e9 6f ff ff ff       	jmp    c002227d <__moddi3+0x29>
c002230e:	66 90                	xchg   ax,ax
c0022310:	0f bd c7             	bsr    eax,edi
c0022313:	83 f0 1f             	xor    eax,0x1f
c0022316:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002231a:	75 24                	jne    c0022340 <__moddi3+0xec>
c002231c:	39 f7                	cmp    edi,esi
c002231e:	72 06                	jb     c0022326 <__moddi3+0xd2>
c0022320:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022324:	77 0c                	ja     c0022332 <__moddi3+0xde>
c0022326:	89 e9                	mov    ecx,ebp
c0022328:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002232c:	19 fe                	sbb    esi,edi
c002232e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022336:	89 f2                	mov    edx,esi
c0022338:	e9 6b ff ff ff       	jmp    c00222a8 <__moddi3+0x54>
c002233d:	8d 76 00             	lea    esi,[esi+0x0]
c0022340:	b8 20 00 00 00       	mov    eax,0x20
c0022345:	89 c2                	mov    edx,eax
c0022347:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002234b:	29 da                	sub    edx,ebx
c002234d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022351:	88 d9                	mov    cl,bl
c0022353:	d3 e7                	shl    edi,cl
c0022355:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022359:	88 d1                	mov    cl,dl
c002235b:	d3 e8                	shr    eax,cl
c002235d:	09 c7                	or     edi,eax
c002235f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022363:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022367:	89 d8                	mov    eax,ebx
c0022369:	88 d9                	mov    cl,bl
c002236b:	d3 e7                	shl    edi,cl
c002236d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022371:	89 f3                	mov    ebx,esi
c0022373:	88 d1                	mov    cl,dl
c0022375:	d3 eb                	shr    ebx,cl
c0022377:	89 c7                	mov    edi,eax
c0022379:	88 c1                	mov    cl,al
c002237b:	d3 e6                	shl    esi,cl
c002237d:	89 e8                	mov    eax,ebp
c002237f:	88 d1                	mov    cl,dl
c0022381:	d3 e8                	shr    eax,cl
c0022383:	09 f0                	or     eax,esi
c0022385:	89 f9                	mov    ecx,edi
c0022387:	d3 e5                	shl    ebp,cl
c0022389:	89 da                	mov    edx,ebx
c002238b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002238f:	89 d3                	mov    ebx,edx
c0022391:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022395:	89 c6                	mov    esi,eax
c0022397:	89 d1                	mov    ecx,edx
c0022399:	39 d3                	cmp    ebx,edx
c002239b:	72 27                	jb     c00223c4 <__moddi3+0x170>
c002239d:	74 21                	je     c00223c0 <__moddi3+0x16c>
c002239f:	29 f5                	sub    ebp,esi
c00223a1:	19 cb                	sbb    ebx,ecx
c00223a3:	89 de                	mov    esi,ebx
c00223a5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00223a9:	d3 e6                	shl    esi,cl
c00223ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00223af:	89 f9                	mov    ecx,edi
c00223b1:	d3 ed                	shr    ebp,cl
c00223b3:	09 ee                	or     esi,ebp
c00223b5:	89 f0                	mov    eax,esi
c00223b7:	d3 eb                	shr    ebx,cl
c00223b9:	89 da                	mov    edx,ebx
c00223bb:	e9 e8 fe ff ff       	jmp    c00222a8 <__moddi3+0x54>
c00223c0:	39 c5                	cmp    ebp,eax
c00223c2:	73 db                	jae    c002239f <__moddi3+0x14b>
c00223c4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00223c8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00223cc:	89 d1                	mov    ecx,edx
c00223ce:	89 c6                	mov    esi,eax
c00223d0:	eb cd                	jmp    c002239f <__moddi3+0x14b>
c00223d2:	66 90                	xchg   ax,ax

c00223d4 <__udivdi3>:
c00223d4:	55                   	push   ebp
c00223d5:	57                   	push   edi
c00223d6:	56                   	push   esi
c00223d7:	53                   	push   ebx
c00223d8:	83 ec 1c             	sub    esp,0x1c
c00223db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00223df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00223e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00223e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00223eb:	85 d2                	test   edx,edx
c00223ed:	75 41                	jne    c0022430 <__udivdi3+0x5c>
c00223ef:	39 f7                	cmp    edi,esi
c00223f1:	76 15                	jbe    c0022408 <__udivdi3+0x34>
c00223f3:	89 e8                	mov    eax,ebp
c00223f5:	89 f2                	mov    edx,esi
c00223f7:	f7 f7                	div    edi
c00223f9:	31 db                	xor    ebx,ebx
c00223fb:	89 da                	mov    edx,ebx
c00223fd:	83 c4 1c             	add    esp,0x1c
c0022400:	5b                   	pop    ebx
c0022401:	5e                   	pop    esi
c0022402:	5f                   	pop    edi
c0022403:	5d                   	pop    ebp
c0022404:	c3                   	ret    
c0022405:	8d 76 00             	lea    esi,[esi+0x0]
c0022408:	89 f9                	mov    ecx,edi
c002240a:	85 ff                	test   edi,edi
c002240c:	75 0b                	jne    c0022419 <__udivdi3+0x45>
c002240e:	b8 01 00 00 00       	mov    eax,0x1
c0022413:	31 d2                	xor    edx,edx
c0022415:	f7 f7                	div    edi
c0022417:	89 c1                	mov    ecx,eax
c0022419:	31 d2                	xor    edx,edx
c002241b:	89 f0                	mov    eax,esi
c002241d:	f7 f1                	div    ecx
c002241f:	89 c3                	mov    ebx,eax
c0022421:	89 e8                	mov    eax,ebp
c0022423:	f7 f1                	div    ecx
c0022425:	89 da                	mov    edx,ebx
c0022427:	83 c4 1c             	add    esp,0x1c
c002242a:	5b                   	pop    ebx
c002242b:	5e                   	pop    esi
c002242c:	5f                   	pop    edi
c002242d:	5d                   	pop    ebp
c002242e:	c3                   	ret    
c002242f:	90                   	nop
c0022430:	39 f2                	cmp    edx,esi
c0022432:	77 1c                	ja     c0022450 <__udivdi3+0x7c>
c0022434:	0f bd da             	bsr    ebx,edx
c0022437:	83 f3 1f             	xor    ebx,0x1f
c002243a:	75 24                	jne    c0022460 <__udivdi3+0x8c>
c002243c:	39 f2                	cmp    edx,esi
c002243e:	72 08                	jb     c0022448 <__udivdi3+0x74>
c0022440:	39 ef                	cmp    edi,ebp
c0022442:	0f 87 84 00 00 00    	ja     c00224cc <__udivdi3+0xf8>
c0022448:	b8 01 00 00 00       	mov    eax,0x1
c002244d:	eb ac                	jmp    c00223fb <__udivdi3+0x27>
c002244f:	90                   	nop
c0022450:	31 db                	xor    ebx,ebx
c0022452:	31 c0                	xor    eax,eax
c0022454:	89 da                	mov    edx,ebx
c0022456:	83 c4 1c             	add    esp,0x1c
c0022459:	5b                   	pop    ebx
c002245a:	5e                   	pop    esi
c002245b:	5f                   	pop    edi
c002245c:	5d                   	pop    ebp
c002245d:	c3                   	ret    
c002245e:	66 90                	xchg   ax,ax
c0022460:	b8 20 00 00 00       	mov    eax,0x20
c0022465:	29 d8                	sub    eax,ebx
c0022467:	88 d9                	mov    cl,bl
c0022469:	d3 e2                	shl    edx,cl
c002246b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002246f:	89 fa                	mov    edx,edi
c0022471:	88 c1                	mov    cl,al
c0022473:	d3 ea                	shr    edx,cl
c0022475:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022479:	09 d1                	or     ecx,edx
c002247b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002247f:	88 d9                	mov    cl,bl
c0022481:	d3 e7                	shl    edi,cl
c0022483:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022487:	89 f7                	mov    edi,esi
c0022489:	88 c1                	mov    cl,al
c002248b:	d3 ef                	shr    edi,cl
c002248d:	88 d9                	mov    cl,bl
c002248f:	d3 e6                	shl    esi,cl
c0022491:	89 ea                	mov    edx,ebp
c0022493:	88 c1                	mov    cl,al
c0022495:	d3 ea                	shr    edx,cl
c0022497:	09 d6                	or     esi,edx
c0022499:	89 f0                	mov    eax,esi
c002249b:	89 fa                	mov    edx,edi
c002249d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00224a1:	89 d7                	mov    edi,edx
c00224a3:	89 c6                	mov    esi,eax
c00224a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00224a9:	39 d7                	cmp    edi,edx
c00224ab:	72 13                	jb     c00224c0 <__udivdi3+0xec>
c00224ad:	74 09                	je     c00224b8 <__udivdi3+0xe4>
c00224af:	89 f0                	mov    eax,esi
c00224b1:	31 db                	xor    ebx,ebx
c00224b3:	e9 43 ff ff ff       	jmp    c00223fb <__udivdi3+0x27>
c00224b8:	88 d9                	mov    cl,bl
c00224ba:	d3 e5                	shl    ebp,cl
c00224bc:	39 c5                	cmp    ebp,eax
c00224be:	73 ef                	jae    c00224af <__udivdi3+0xdb>
c00224c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00224c3:	31 db                	xor    ebx,ebx
c00224c5:	e9 31 ff ff ff       	jmp    c00223fb <__udivdi3+0x27>
c00224ca:	66 90                	xchg   ax,ax
c00224cc:	31 c0                	xor    eax,eax
c00224ce:	e9 28 ff ff ff       	jmp    c00223fb <__udivdi3+0x27>
c00224d3:	90                   	nop

c00224d4 <__umoddi3>:
c00224d4:	55                   	push   ebp
c00224d5:	57                   	push   edi
c00224d6:	56                   	push   esi
c00224d7:	53                   	push   ebx
c00224d8:	83 ec 1c             	sub    esp,0x1c
c00224db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00224df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00224e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00224e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00224eb:	89 da                	mov    edx,ebx
c00224ed:	85 c0                	test   eax,eax
c00224ef:	75 37                	jne    c0022528 <__umoddi3+0x54>
c00224f1:	39 df                	cmp    edi,ebx
c00224f3:	76 13                	jbe    c0022508 <__umoddi3+0x34>
c00224f5:	89 f0                	mov    eax,esi
c00224f7:	f7 f7                	div    edi
c00224f9:	89 d0                	mov    eax,edx
c00224fb:	31 d2                	xor    edx,edx
c00224fd:	83 c4 1c             	add    esp,0x1c
c0022500:	5b                   	pop    ebx
c0022501:	5e                   	pop    esi
c0022502:	5f                   	pop    edi
c0022503:	5d                   	pop    ebp
c0022504:	c3                   	ret    
c0022505:	8d 76 00             	lea    esi,[esi+0x0]
c0022508:	89 fd                	mov    ebp,edi
c002250a:	85 ff                	test   edi,edi
c002250c:	75 0b                	jne    c0022519 <__umoddi3+0x45>
c002250e:	b8 01 00 00 00       	mov    eax,0x1
c0022513:	31 d2                	xor    edx,edx
c0022515:	f7 f7                	div    edi
c0022517:	89 c5                	mov    ebp,eax
c0022519:	89 d8                	mov    eax,ebx
c002251b:	31 d2                	xor    edx,edx
c002251d:	f7 f5                	div    ebp
c002251f:	89 f0                	mov    eax,esi
c0022521:	f7 f5                	div    ebp
c0022523:	89 d0                	mov    eax,edx
c0022525:	eb d4                	jmp    c00224fb <__umoddi3+0x27>
c0022527:	90                   	nop
c0022528:	89 f1                	mov    ecx,esi
c002252a:	39 d8                	cmp    eax,ebx
c002252c:	76 0a                	jbe    c0022538 <__umoddi3+0x64>
c002252e:	89 f0                	mov    eax,esi
c0022530:	83 c4 1c             	add    esp,0x1c
c0022533:	5b                   	pop    ebx
c0022534:	5e                   	pop    esi
c0022535:	5f                   	pop    edi
c0022536:	5d                   	pop    ebp
c0022537:	c3                   	ret    
c0022538:	0f bd e8             	bsr    ebp,eax
c002253b:	83 f5 1f             	xor    ebp,0x1f
c002253e:	75 1c                	jne    c002255c <__umoddi3+0x88>
c0022540:	39 d8                	cmp    eax,ebx
c0022542:	72 04                	jb     c0022548 <__umoddi3+0x74>
c0022544:	39 f7                	cmp    edi,esi
c0022546:	77 08                	ja     c0022550 <__umoddi3+0x7c>
c0022548:	89 da                	mov    edx,ebx
c002254a:	29 fe                	sub    esi,edi
c002254c:	19 c2                	sbb    edx,eax
c002254e:	89 f1                	mov    ecx,esi
c0022550:	89 c8                	mov    eax,ecx
c0022552:	83 c4 1c             	add    esp,0x1c
c0022555:	5b                   	pop    ebx
c0022556:	5e                   	pop    esi
c0022557:	5f                   	pop    edi
c0022558:	5d                   	pop    ebp
c0022559:	c3                   	ret    
c002255a:	66 90                	xchg   ax,ax
c002255c:	ba 20 00 00 00       	mov    edx,0x20
c0022561:	29 ea                	sub    edx,ebp
c0022563:	89 e9                	mov    ecx,ebp
c0022565:	d3 e0                	shl    eax,cl
c0022567:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002256b:	89 f8                	mov    eax,edi
c002256d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022571:	88 d1                	mov    cl,dl
c0022573:	d3 e8                	shr    eax,cl
c0022575:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022579:	09 c1                	or     ecx,eax
c002257b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002257f:	89 e9                	mov    ecx,ebp
c0022581:	d3 e7                	shl    edi,cl
c0022583:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022587:	89 d8                	mov    eax,ebx
c0022589:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002258d:	88 d1                	mov    cl,dl
c002258f:	d3 e8                	shr    eax,cl
c0022591:	89 c7                	mov    edi,eax
c0022593:	89 e9                	mov    ecx,ebp
c0022595:	d3 e3                	shl    ebx,cl
c0022597:	89 f0                	mov    eax,esi
c0022599:	88 d1                	mov    cl,dl
c002259b:	d3 e8                	shr    eax,cl
c002259d:	09 d8                	or     eax,ebx
c002259f:	89 e9                	mov    ecx,ebp
c00225a1:	d3 e6                	shl    esi,cl
c00225a3:	89 f3                	mov    ebx,esi
c00225a5:	89 fa                	mov    edx,edi
c00225a7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00225ab:	89 d1                	mov    ecx,edx
c00225ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00225b1:	89 c6                	mov    esi,eax
c00225b3:	89 d7                	mov    edi,edx
c00225b5:	39 d1                	cmp    ecx,edx
c00225b7:	72 27                	jb     c00225e0 <__umoddi3+0x10c>
c00225b9:	74 21                	je     c00225dc <__umoddi3+0x108>
c00225bb:	89 ca                	mov    edx,ecx
c00225bd:	29 f3                	sub    ebx,esi
c00225bf:	19 fa                	sbb    edx,edi
c00225c1:	89 d0                	mov    eax,edx
c00225c3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00225c7:	d3 e0                	shl    eax,cl
c00225c9:	89 e9                	mov    ecx,ebp
c00225cb:	d3 eb                	shr    ebx,cl
c00225cd:	09 d8                	or     eax,ebx
c00225cf:	d3 ea                	shr    edx,cl
c00225d1:	83 c4 1c             	add    esp,0x1c
c00225d4:	5b                   	pop    ebx
c00225d5:	5e                   	pop    esi
c00225d6:	5f                   	pop    edi
c00225d7:	5d                   	pop    ebp
c00225d8:	c3                   	ret    
c00225d9:	8d 76 00             	lea    esi,[esi+0x0]
c00225dc:	39 c3                	cmp    ebx,eax
c00225de:	73 db                	jae    c00225bb <__umoddi3+0xe7>
c00225e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00225e4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00225e8:	89 d7                	mov    edi,edx
c00225ea:	89 c6                	mov    esi,eax
c00225ec:	eb cd                	jmp    c00225bb <__umoddi3+0xe7>

Disassembly of section .init:

c00225ee <_init>:
c00225ee:	55                   	push   ebp
c00225ef:	89 e5                	mov    ebp,esp
c00225f1:	e8 22 db fd ff       	call   c0000118 <frame_dummy>
c00225f6:	e8 e5 fa ff ff       	call   c00220e0 <__do_global_ctors_aux>
c00225fb:	5d                   	pop    ebp
c00225fc:	c3                   	ret    

Disassembly of section .fini:

c00225fd <_fini>:
c00225fd:	55                   	push   ebp
c00225fe:	89 e5                	mov    ebp,esp
c0022600:	e8 a3 da fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022605:	5d                   	pop    ebp
c0022606:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022608 <Computer::~Computer()>:
c0022608:	83 ec 0c             	sub    esp,0xc
c002260b:	ba 34 3c 02 c0       	mov    edx,0xc0023c34
c0022610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022614:	89 10                	mov    DWORD PTR [eax],edx
c0022616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002261a:	83 ec 0c             	sub    esp,0xc
c002261d:	50                   	push   eax
c002261e:	e8 e5 b9 fe ff       	call   c000e008 <Device::~Device()>
c0022623:	83 c4 10             	add    esp,0x10
c0022626:	90                   	nop
c0022627:	83 c4 0c             	add    esp,0xc
c002262a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002262c <Computer::~Computer()>:
c002262c:	83 ec 0c             	sub    esp,0xc
c002262f:	83 ec 0c             	sub    esp,0xc
c0022632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022636:	e8 cd ff ff ff       	call   c0022608 <Computer::~Computer()>
c002263b:	83 c4 10             	add    esp,0x10
c002263e:	83 ec 08             	sub    esp,0x8
c0022641:	68 ec 01 00 00       	push   0x1ec
c0022646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002264a:	e8 83 a5 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c002264f:	83 c4 10             	add    esp,0x10
c0022652:	83 c4 0c             	add    esp,0xc
c0022655:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022656 <idleCommon()>:
c0022656:	83 ec 0c             	sub    esp,0xc
c0022659:	fa                   	cli    
c002265a:	ff 05 c8 8f 02 c0    	inc    DWORD PTR ds:0xc0028fc8
c0022660:	e8 cb 5d ff ff       	call   c0018430 <schedule()>
c0022665:	a1 c8 8f 02 c0       	mov    eax,ds:0xc0028fc8
c002266a:	48                   	dec    eax
c002266b:	a3 c8 8f 02 c0       	mov    ds:0xc0028fc8,eax
c0022670:	75 01                	jne    c0022673 <idleCommon()+0x1d>
c0022672:	fb                   	sti    
c0022673:	83 c4 0c             	add    esp,0xc
c0022676:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022678 <LinkedList<UnixFile>::~LinkedList()>:
c0022678:	90                   	nop
c0022679:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002267a <LinkedList<UnixFile>::LinkedList()>:
c002267a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002267e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022688:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002268f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022693:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002269a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002269e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00226a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00226af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226b3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00226ba:	90                   	nop
c00226bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00226bc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00226bc:	83 ec 0c             	sub    esp,0xc
c00226bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00226c4:	75 10                	jne    c00226d6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00226c6:	83 ec 0c             	sub    esp,0xc
c00226c9:	68 08 40 02 c0       	push   0xc0024008
c00226ce:	e8 8c 21 ff ff       	call   c001485f <Krnl::panic(char const*)>
c00226d3:	83 c4 10             	add    esp,0x10
c00226d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226da:	8b 00                	mov    eax,DWORD PTR [eax]
c00226dc:	85 c0                	test   eax,eax
c00226de:	74 34                	je     c0022714 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00226e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00226e7:	85 c0                	test   eax,eax
c00226e9:	74 29                	je     c0022714 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00226eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00226f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00226f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00226f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022701:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022708:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002270b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022712:	eb 65                	jmp    c0022779 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022718:	8b 00                	mov    eax,DWORD PTR [eax]
c002271a:	85 c0                	test   eax,eax
c002271c:	75 4b                	jne    c0022769 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002271e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022722:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022725:	85 c0                	test   eax,eax
c0022727:	75 40                	jne    c0022769 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002272d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022731:	89 10                	mov    DWORD PTR [eax],edx
c0022733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022737:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002273b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002273e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022742:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022745:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002274c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022750:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022753:	85 c0                	test   eax,eax
c0022755:	74 22                	je     c0022779 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022757:	83 ec 0c             	sub    esp,0xc
c002275a:	68 2a 40 02 c0       	push   0xc002402a
c002275f:	e8 fb 20 ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022764:	83 c4 10             	add    esp,0x10
c0022767:	eb 10                	jmp    c0022779 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022769:	83 ec 0c             	sub    esp,0xc
c002276c:	68 34 40 02 c0       	push   0xc0024034
c0022771:	e8 e9 20 ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022776:	83 c4 10             	add    esp,0x10
c0022779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002277d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022780:	8d 50 01             	lea    edx,[eax+0x1]
c0022783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022787:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002278a:	90                   	nop
c002278b:	83 c4 0c             	add    esp,0xc
c002278e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022790 <LinkedList<UnixFile>::getFirstElement()>:
c0022790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022794:	8b 00                	mov    eax,DWORD PTR [eax]
c0022796:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022798 <LinkedList<UnixFile>::removeFirst()>:
c0022798:	83 ec 0c             	sub    esp,0xc
c002279b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002279f:	8b 00                	mov    eax,DWORD PTR [eax]
c00227a1:	85 c0                	test   eax,eax
c00227a3:	75 12                	jne    c00227b7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00227a5:	83 ec 0c             	sub    esp,0xc
c00227a8:	68 40 40 02 c0       	push   0xc0024040
c00227ad:	e8 ad 20 ff ff       	call   c001485f <Krnl::panic(char const*)>
c00227b2:	83 c4 10             	add    esp,0x10
c00227b5:	eb 7e                	jmp    c0022835 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00227b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00227be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00227c1:	85 c0                	test   eax,eax
c00227c3:	74 10                	je     c00227d5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00227c5:	83 ec 0c             	sub    esp,0xc
c00227c8:	68 8b 40 02 c0       	push   0xc002408b
c00227cd:	e8 8d 20 ff ff       	call   c001485f <Krnl::panic(char const*)>
c00227d2:	83 c4 10             	add    esp,0x10
c00227d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00227db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00227de:	85 c0                	test   eax,eax
c00227e0:	75 33                	jne    c0022815 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00227e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00227ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00227f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00227fe:	83 f8 01             	cmp    eax,0x1
c0022801:	74 21                	je     c0022824 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022803:	83 ec 0c             	sub    esp,0xc
c0022806:	68 64 40 02 c0       	push   0xc0024064
c002280b:	e8 4f 20 ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022810:	83 c4 10             	add    esp,0x10
c0022813:	eb 0f                	jmp    c0022824 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022819:	8b 00                	mov    eax,DWORD PTR [eax]
c002281b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002281e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022822:	89 10                	mov    DWORD PTR [eax],edx
c0022824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022828:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002282b:	8d 50 ff             	lea    edx,[eax-0x1]
c002282e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022832:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022835:	83 c4 0c             	add    esp,0xc
c0022838:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002283a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002283a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002283e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022841:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022842 <DriverlessDevice::~DriverlessDevice()>:
c0022842:	ba 3c 48 02 c0       	mov    edx,0xc002483c
c0022847:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002284b:	89 10                	mov    DWORD PTR [eax],edx
c002284d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022851:	50                   	push   eax
c0022852:	e8 b1 b7 fe ff       	call   c000e008 <Device::~Device()>
c0022857:	83 c4 04             	add    esp,0x4
c002285a:	90                   	nop
c002285b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002285c <DriverlessDevice::~DriverlessDevice()>:
c002285c:	83 ec 0c             	sub    esp,0xc
c002285f:	83 ec 0c             	sub    esp,0xc
c0022862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022866:	e8 d7 ff ff ff       	call   c0022842 <DriverlessDevice::~DriverlessDevice()>
c002286b:	83 c4 10             	add    esp,0x10
c002286e:	83 ec 08             	sub    esp,0x8
c0022871:	68 58 01 00 00       	push   0x158
c0022876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002287a:	e8 53 a3 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c002287f:	83 c4 10             	add    esp,0x10
c0022882:	83 c4 0c             	add    esp,0xc
c0022885:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022886 <LinkedList<Device>::addElement(Device*)>:
c0022886:	83 ec 0c             	sub    esp,0xc
c0022889:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002288e:	75 10                	jne    c00228a0 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022890:	83 ec 0c             	sub    esp,0xc
c0022893:	68 08 40 02 c0       	push   0xc0024008
c0022898:	e8 c2 1f ff ff       	call   c001485f <Krnl::panic(char const*)>
c002289d:	83 c4 10             	add    esp,0x10
c00228a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00228a6:	85 c0                	test   eax,eax
c00228a8:	74 3a                	je     c00228e4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00228aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228b1:	85 c0                	test   eax,eax
c00228b3:	74 2f                	je     c00228e4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00228b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00228c0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00228c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00228ce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00228d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228d8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00228e2:	eb 68                	jmp    c002294c <LinkedList<Device>::addElement(Device*)+0xc6>
c00228e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00228ea:	85 c0                	test   eax,eax
c00228ec:	75 4e                	jne    c002293c <LinkedList<Device>::addElement(Device*)+0xb6>
c00228ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228f5:	85 c0                	test   eax,eax
c00228f7:	75 43                	jne    c002293c <LinkedList<Device>::addElement(Device*)+0xb6>
c00228f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022901:	89 10                	mov    DWORD PTR [eax],edx
c0022903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022907:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002290b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002290e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022912:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022915:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002291f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022923:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022926:	85 c0                	test   eax,eax
c0022928:	74 22                	je     c002294c <LinkedList<Device>::addElement(Device*)+0xc6>
c002292a:	83 ec 0c             	sub    esp,0xc
c002292d:	68 2a 40 02 c0       	push   0xc002402a
c0022932:	e8 28 1f ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022937:	83 c4 10             	add    esp,0x10
c002293a:	eb 10                	jmp    c002294c <LinkedList<Device>::addElement(Device*)+0xc6>
c002293c:	83 ec 0c             	sub    esp,0xc
c002293f:	68 34 40 02 c0       	push   0xc0024034
c0022944:	e8 16 1f ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022949:	83 c4 10             	add    esp,0x10
c002294c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022950:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022953:	8d 50 01             	lea    edx,[eax+0x1]
c0022956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002295a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002295d:	90                   	nop
c002295e:	83 c4 0c             	add    esp,0xc
c0022961:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022962 <LinkedList<Device>::LinkedList()>:
c0022962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022966:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002296c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022970:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022977:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002297b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022986:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002298c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022990:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022997:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002299b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00229a2:	90                   	nop
c00229a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00229a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00229a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00229aa:	85 c0                	test   eax,eax
c00229ac:	75 0e                	jne    c00229bc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00229ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229b5:	85 c0                	test   eax,eax
c00229b7:	75 03                	jne    c00229bc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00229b9:	b0 01                	mov    al,0x1
c00229bb:	c3                   	ret    
c00229bc:	b0 00                	mov    al,0x0
c00229be:	90                   	nop
c00229bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00229c0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00229c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00229c6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00229c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00229c8:	83 ec 0c             	sub    esp,0xc
c00229cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00229d1:	85 c0                	test   eax,eax
c00229d3:	75 17                	jne    c00229ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00229d5:	83 ec 0c             	sub    esp,0xc
c00229d8:	68 40 40 02 c0       	push   0xc0024040
c00229dd:	e8 7d 1e ff ff       	call   c001485f <Krnl::panic(char const*)>
c00229e2:	83 c4 10             	add    esp,0x10
c00229e5:	e9 92 00 00 00       	jmp    c0022a7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00229ea:	66 90                	xchg   ax,ax
c00229ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229f3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00229f6:	85 c0                	test   eax,eax
c00229f8:	0f 95 c0             	setne  al
c00229fb:	84 c0                	test   al,al
c00229fd:	74 11                	je     c0022a10 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00229ff:	83 ec 0c             	sub    esp,0xc
c0022a02:	68 8b 40 02 c0       	push   0xc002408b
c0022a07:	e8 53 1e ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022a0c:	83 c4 10             	add    esp,0x10
c0022a0f:	90                   	nop
c0022a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a14:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022a19:	85 c0                	test   eax,eax
c0022a1b:	0f 94 c0             	sete   al
c0022a1e:	84 c0                	test   al,al
c0022a20:	74 36                	je     c0022a58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a3b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a3e:	83 f8 01             	cmp    eax,0x1
c0022a41:	74 25                	je     c0022a68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022a43:	83 ec 0c             	sub    esp,0xc
c0022a46:	68 64 40 02 c0       	push   0xc0024064
c0022a4b:	e8 0f 1e ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022a50:	83 c4 10             	add    esp,0x10
c0022a53:	eb 13                	jmp    c0022a68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022a55:	8d 76 00             	lea    esi,[esi+0x0]
c0022a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a5e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a65:	89 10                	mov    DWORD PTR [eax],edx
c0022a67:	90                   	nop
c0022a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a6f:	8d 50 ff             	lea    edx,[eax-0x1]
c0022a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022a79:	8d 76 00             	lea    esi,[esi+0x0]
c0022a7c:	83 c4 0c             	add    esp,0xc
c0022a7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022a80:	83 ec 0c             	sub    esp,0xc
c0022a83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022a88:	75 12                	jne    c0022a9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022a8a:	83 ec 0c             	sub    esp,0xc
c0022a8d:	68 08 40 02 c0       	push   0xc0024008
c0022a92:	e8 c8 1d ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022a97:	83 c4 10             	add    esp,0x10
c0022a9a:	66 90                	xchg   ax,ax
c0022a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aa2:	85 c0                	test   eax,eax
c0022aa4:	74 36                	je     c0022adc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022aad:	85 c0                	test   eax,eax
c0022aaf:	74 2b                	je     c0022adc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ab8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022abc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ac7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ad1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022ad8:	eb 6a                	jmp    c0022b44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022ada:	66 90                	xchg   ax,ax
c0022adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ae2:	85 c0                	test   eax,eax
c0022ae4:	75 4e                	jne    c0022b34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022aed:	85 c0                	test   eax,eax
c0022aef:	75 43                	jne    c0022b34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022af9:	89 10                	mov    DWORD PTR [eax],edx
c0022afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b03:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b0d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b1b:	85 c0                	test   eax,eax
c0022b1d:	74 25                	je     c0022b44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022b1f:	83 ec 0c             	sub    esp,0xc
c0022b22:	68 2a 40 02 c0       	push   0xc002402a
c0022b27:	e8 33 1d ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022b2c:	83 c4 10             	add    esp,0x10
c0022b2f:	eb 13                	jmp    c0022b44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022b31:	8d 76 00             	lea    esi,[esi+0x0]
c0022b34:	83 ec 0c             	sub    esp,0xc
c0022b37:	68 34 40 02 c0       	push   0xc0024034
c0022b3c:	e8 1e 1d ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022b41:	83 c4 10             	add    esp,0x10
c0022b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b4b:	8d 50 01             	lea    edx,[eax+0x1]
c0022b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b55:	90                   	nop
c0022b56:	83 c4 0c             	add    esp,0xc
c0022b59:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022b5c <ACPI::~ACPI()>:
c0022b5c:	83 ec 0c             	sub    esp,0xc
c0022b5f:	ba 44 52 02 c0       	mov    edx,0xc0025244
c0022b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b68:	89 10                	mov    DWORD PTR [eax],edx
c0022b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b6e:	83 ec 0c             	sub    esp,0xc
c0022b71:	50                   	push   eax
c0022b72:	e8 91 b4 fe ff       	call   c000e008 <Device::~Device()>
c0022b77:	83 c4 10             	add    esp,0x10
c0022b7a:	90                   	nop
c0022b7b:	83 c4 0c             	add    esp,0xc
c0022b7e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022b80 <ACPI::~ACPI()>:
c0022b80:	83 ec 0c             	sub    esp,0xc
c0022b83:	83 ec 0c             	sub    esp,0xc
c0022b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b8a:	e8 cd ff ff ff       	call   c0022b5c <ACPI::~ACPI()>
c0022b8f:	83 c4 10             	add    esp,0x10
c0022b92:	83 ec 08             	sub    esp,0x8
c0022b95:	68 64 12 00 00       	push   0x1264
c0022b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b9e:	e8 2f a0 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022ba3:	83 c4 10             	add    esp,0x10
c0022ba6:	83 c4 0c             	add    esp,0xc
c0022ba9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022bac <LinkedList<Device>::~LinkedList()>:
c0022bac:	90                   	nop
c0022bad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022bb0 <LinkedList<Device>::isEmpty()>:
c0022bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bb6:	85 c0                	test   eax,eax
c0022bb8:	75 0e                	jne    c0022bc8 <LinkedList<Device>::isEmpty()+0x18>
c0022bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bc1:	85 c0                	test   eax,eax
c0022bc3:	75 03                	jne    c0022bc8 <LinkedList<Device>::isEmpty()+0x18>
c0022bc5:	b0 01                	mov    al,0x1
c0022bc7:	c3                   	ret    
c0022bc8:	b0 00                	mov    al,0x0
c0022bca:	90                   	nop
c0022bcb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022bcc <LinkedList<Device>::getFirstElement()>:
c0022bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022bd4 <LinkedList<Device>::removeFirst()>:
c0022bd4:	83 ec 0c             	sub    esp,0xc
c0022bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bdd:	85 c0                	test   eax,eax
c0022bdf:	75 17                	jne    c0022bf8 <LinkedList<Device>::removeFirst()+0x24>
c0022be1:	83 ec 0c             	sub    esp,0xc
c0022be4:	68 40 40 02 c0       	push   0xc0024040
c0022be9:	e8 71 1c ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022bee:	83 c4 10             	add    esp,0x10
c0022bf1:	e9 92 00 00 00       	jmp    c0022c88 <LinkedList<Device>::removeFirst()+0xb4>
c0022bf6:	66 90                	xchg   ax,ax
c0022bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022c05:	85 c0                	test   eax,eax
c0022c07:	74 13                	je     c0022c1c <LinkedList<Device>::removeFirst()+0x48>
c0022c09:	83 ec 0c             	sub    esp,0xc
c0022c0c:	68 8b 40 02 c0       	push   0xc002408b
c0022c11:	e8 49 1c ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022c16:	83 c4 10             	add    esp,0x10
c0022c19:	8d 76 00             	lea    esi,[esi+0x0]
c0022c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c22:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022c28:	85 c0                	test   eax,eax
c0022c2a:	75 34                	jne    c0022c60 <LinkedList<Device>::removeFirst()+0x8c>
c0022c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c48:	83 f8 01             	cmp    eax,0x1
c0022c4b:	74 27                	je     c0022c74 <LinkedList<Device>::removeFirst()+0xa0>
c0022c4d:	83 ec 0c             	sub    esp,0xc
c0022c50:	68 64 40 02 c0       	push   0xc0024064
c0022c55:	e8 05 1c ff ff       	call   c001485f <Krnl::panic(char const*)>
c0022c5a:	83 c4 10             	add    esp,0x10
c0022c5d:	eb 15                	jmp    c0022c74 <LinkedList<Device>::removeFirst()+0xa0>
c0022c5f:	90                   	nop
c0022c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c66:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c70:	89 10                	mov    DWORD PTR [eax],edx
c0022c72:	66 90                	xchg   ax,ax
c0022c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c7b:	8d 50 ff             	lea    edx,[eax-0x1]
c0022c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022c85:	8d 76 00             	lea    esi,[esi+0x0]
c0022c88:	83 c4 0c             	add    esp,0xc
c0022c8b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022c8c <CPU::~CPU()>:
c0022c8c:	83 ec 0c             	sub    esp,0xc
c0022c8f:	ba 20 56 02 c0       	mov    edx,0xc0025620
c0022c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c98:	89 10                	mov    DWORD PTR [eax],edx
c0022c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c9e:	83 ec 0c             	sub    esp,0xc
c0022ca1:	50                   	push   eax
c0022ca2:	e8 61 b3 fe ff       	call   c000e008 <Device::~Device()>
c0022ca7:	83 c4 10             	add    esp,0x10
c0022caa:	90                   	nop
c0022cab:	83 c4 0c             	add    esp,0xc
c0022cae:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022cb0 <CPU::~CPU()>:
c0022cb0:	83 ec 0c             	sub    esp,0xc
c0022cb3:	83 ec 0c             	sub    esp,0xc
c0022cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022cba:	e8 cd ff ff ff       	call   c0022c8c <CPU::~CPU()>
c0022cbf:	83 c4 10             	add    esp,0x10
c0022cc2:	83 ec 08             	sub    esp,0x8
c0022cc5:	68 98 11 00 00       	push   0x1198
c0022cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022cce:	e8 ff 9e fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022cd3:	83 c4 10             	add    esp,0x10
c0022cd6:	83 c4 0c             	add    esp,0xc
c0022cd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0022cdc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0022cdc:	90                   	nop
c0022cdd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022ce0 <ThreadControlBlock::ThreadControlBlock()>:
c0022ce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ce4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022ceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cef:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cfa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022d01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d05:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0022d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d10:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0022d17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d1b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0022d1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d23:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0022d27:	90                   	nop
c0022d28:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0022d2c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0022d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d45:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d65:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022d6c:	90                   	nop
c0022d6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022d70 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022d70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022d74:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022d77:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0022d78 <Vm::_FPUState::_FPUState()>:
c0022d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d7c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0022d83:	90                   	nop
c0022d84:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0022d86 <PCI::~PCI()>:
c0022d86:	83 ec 0c             	sub    esp,0xc
c0022d89:	ba f8 63 02 c0       	mov    edx,0xc00263f8
c0022d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d92:	89 10                	mov    DWORD PTR [eax],edx
c0022d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d98:	83 ec 0c             	sub    esp,0xc
c0022d9b:	50                   	push   eax
c0022d9c:	e8 37 ac fe ff       	call   c000d9d8 <Bus::~Bus()>
c0022da1:	83 c4 10             	add    esp,0x10
c0022da4:	90                   	nop
c0022da5:	83 c4 0c             	add    esp,0xc
c0022da8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022daa <PCI::~PCI()>:
c0022daa:	83 ec 0c             	sub    esp,0xc
c0022dad:	83 ec 0c             	sub    esp,0xc
c0022db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022db4:	e8 cd ff ff ff       	call   c0022d86 <PCI::~PCI()>
c0022db9:	83 c4 10             	add    esp,0x10
c0022dbc:	83 ec 08             	sub    esp,0x8
c0022dbf:	68 5c 01 00 00       	push   0x15c
c0022dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022dc8:	e8 05 9e fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022dcd:	83 c4 10             	add    esp,0x10
c0022dd0:	83 c4 0c             	add    esp,0xc
c0022dd3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022dd4 <IDE::~IDE()>:
c0022dd4:	83 ec 0c             	sub    esp,0xc
c0022dd7:	ba ac 64 02 c0       	mov    edx,0xc00264ac
c0022ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de0:	89 10                	mov    DWORD PTR [eax],edx
c0022de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de6:	83 ec 0c             	sub    esp,0xc
c0022de9:	50                   	push   eax
c0022dea:	e8 31 b7 fe ff       	call   c000e520 <HardDiskController::~HardDiskController()>
c0022def:	83 c4 10             	add    esp,0x10
c0022df2:	90                   	nop
c0022df3:	83 c4 0c             	add    esp,0xc
c0022df6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0022df8 <IDE::~IDE()>:
c0022df8:	83 ec 0c             	sub    esp,0xc
c0022dfb:	83 ec 0c             	sub    esp,0xc
c0022dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e02:	e8 cd ff ff ff       	call   c0022dd4 <IDE::~IDE()>
c0022e07:	83 c4 10             	add    esp,0x10
c0022e0a:	83 ec 08             	sub    esp,0x8
c0022e0d:	68 70 02 00 00       	push   0x270
c0022e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e16:	e8 b7 9d fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022e1b:	83 c4 10             	add    esp,0x10
c0022e1e:	83 c4 0c             	add    esp,0xc
c0022e21:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022e22 <SATABus::~SATABus()>:
c0022e22:	83 ec 0c             	sub    esp,0xc
c0022e25:	ba 00 66 02 c0       	mov    edx,0xc0026600
c0022e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e2e:	89 10                	mov    DWORD PTR [eax],edx
c0022e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e34:	83 ec 0c             	sub    esp,0xc
c0022e37:	50                   	push   eax
c0022e38:	e8 e3 b6 fe ff       	call   c000e520 <HardDiskController::~HardDiskController()>
c0022e3d:	83 c4 10             	add    esp,0x10
c0022e40:	90                   	nop
c0022e41:	83 c4 0c             	add    esp,0xc
c0022e44:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0022e46 <SATABus::~SATABus()>:
c0022e46:	83 ec 0c             	sub    esp,0xc
c0022e49:	83 ec 0c             	sub    esp,0xc
c0022e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e50:	e8 cd ff ff ff       	call   c0022e22 <SATABus::~SATABus()>
c0022e55:	83 c4 10             	add    esp,0x10
c0022e58:	83 ec 08             	sub    esp,0x8
c0022e5b:	68 64 01 00 00       	push   0x164
c0022e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e64:	e8 69 9d fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022e69:	83 c4 10             	add    esp,0x10
c0022e6c:	83 c4 0c             	add    esp,0xc
c0022e6f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022e70 <ATA::~ATA()>:
c0022e70:	83 ec 0c             	sub    esp,0xc
c0022e73:	ba 78 66 02 c0       	mov    edx,0xc0026678
c0022e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e7c:	89 10                	mov    DWORD PTR [eax],edx
c0022e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e82:	83 ec 0c             	sub    esp,0xc
c0022e85:	50                   	push   eax
c0022e86:	e8 77 b7 fe ff       	call   c000e602 <PhysicalDisk::~PhysicalDisk()>
c0022e8b:	83 c4 10             	add    esp,0x10
c0022e8e:	90                   	nop
c0022e8f:	83 c4 0c             	add    esp,0xc
c0022e92:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022e94 <ATA::~ATA()>:
c0022e94:	83 ec 0c             	sub    esp,0xc
c0022e97:	83 ec 0c             	sub    esp,0xc
c0022e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e9e:	e8 cd ff ff ff       	call   c0022e70 <ATA::~ATA()>
c0022ea3:	83 c4 10             	add    esp,0x10
c0022ea6:	83 ec 08             	sub    esp,0x8
c0022ea9:	68 7c 01 00 00       	push   0x17c
c0022eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022eb2:	e8 1b 9d fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022eb7:	83 c4 10             	add    esp,0x10
c0022eba:	83 c4 0c             	add    esp,0xc
c0022ebd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022ebe <ATAPI::~ATAPI()>:
c0022ebe:	83 ec 0c             	sub    esp,0xc
c0022ec1:	ba b0 66 02 c0       	mov    edx,0xc00266b0
c0022ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eca:	89 10                	mov    DWORD PTR [eax],edx
c0022ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed0:	83 ec 0c             	sub    esp,0xc
c0022ed3:	50                   	push   eax
c0022ed4:	e8 29 b7 fe ff       	call   c000e602 <PhysicalDisk::~PhysicalDisk()>
c0022ed9:	83 c4 10             	add    esp,0x10
c0022edc:	90                   	nop
c0022edd:	83 c4 0c             	add    esp,0xc
c0022ee0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022ee2 <ATAPI::~ATAPI()>:
c0022ee2:	83 ec 0c             	sub    esp,0xc
c0022ee5:	83 ec 0c             	sub    esp,0xc
c0022ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022eec:	e8 cd ff ff ff       	call   c0022ebe <ATAPI::~ATAPI()>
c0022ef1:	83 c4 10             	add    esp,0x10
c0022ef4:	83 ec 08             	sub    esp,0x8
c0022ef7:	68 80 01 00 00       	push   0x180
c0022efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f00:	e8 cd 9c fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022f05:	83 c4 10             	add    esp,0x10
c0022f08:	83 c4 0c             	add    esp,0xc
c0022f0b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022f0c <SATA::~SATA()>:
c0022f0c:	83 ec 0c             	sub    esp,0xc
c0022f0f:	ba ec 68 02 c0       	mov    edx,0xc00268ec
c0022f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f18:	89 10                	mov    DWORD PTR [eax],edx
c0022f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f1e:	83 ec 0c             	sub    esp,0xc
c0022f21:	50                   	push   eax
c0022f22:	e8 db b6 fe ff       	call   c000e602 <PhysicalDisk::~PhysicalDisk()>
c0022f27:	83 c4 10             	add    esp,0x10
c0022f2a:	90                   	nop
c0022f2b:	83 c4 0c             	add    esp,0xc
c0022f2e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022f30 <SATA::~SATA()>:
c0022f30:	83 ec 0c             	sub    esp,0xc
c0022f33:	83 ec 0c             	sub    esp,0xc
c0022f36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f3a:	e8 cd ff ff ff       	call   c0022f0c <SATA::~SATA()>
c0022f3f:	83 c4 10             	add    esp,0x10
c0022f42:	83 ec 08             	sub    esp,0x8
c0022f45:	68 7c 01 00 00       	push   0x17c
c0022f4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f4e:	e8 7f 9c fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022f53:	83 c4 10             	add    esp,0x10
c0022f56:	83 c4 0c             	add    esp,0xc
c0022f59:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022f5a <SATAPI::~SATAPI()>:
c0022f5a:	83 ec 0c             	sub    esp,0xc
c0022f5d:	ba ec 69 02 c0       	mov    edx,0xc00269ec
c0022f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f66:	89 10                	mov    DWORD PTR [eax],edx
c0022f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6c:	83 ec 0c             	sub    esp,0xc
c0022f6f:	50                   	push   eax
c0022f70:	e8 8d b6 fe ff       	call   c000e602 <PhysicalDisk::~PhysicalDisk()>
c0022f75:	83 c4 10             	add    esp,0x10
c0022f78:	90                   	nop
c0022f79:	83 c4 0c             	add    esp,0xc
c0022f7c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022f7e <SATAPI::~SATAPI()>:
c0022f7e:	83 ec 0c             	sub    esp,0xc
c0022f81:	83 ec 0c             	sub    esp,0xc
c0022f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f88:	e8 cd ff ff ff       	call   c0022f5a <SATAPI::~SATAPI()>
c0022f8d:	83 c4 10             	add    esp,0x10
c0022f90:	83 ec 08             	sub    esp,0x8
c0022f93:	68 84 01 00 00       	push   0x184
c0022f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f9c:	e8 31 9c fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022fa1:	83 c4 10             	add    esp,0x10
c0022fa4:	83 c4 0c             	add    esp,0xc
c0022fa7:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0022fa8 <AVX::~AVX()>:
c0022fa8:	83 ec 0c             	sub    esp,0xc
c0022fab:	ba 2c 6a 02 c0       	mov    edx,0xc0026a2c
c0022fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb4:	89 10                	mov    DWORD PTR [eax],edx
c0022fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fba:	83 ec 0c             	sub    esp,0xc
c0022fbd:	50                   	push   eax
c0022fbe:	e8 c5 b6 fe ff       	call   c000e688 <FPU::~FPU()>
c0022fc3:	83 c4 10             	add    esp,0x10
c0022fc6:	90                   	nop
c0022fc7:	83 c4 0c             	add    esp,0xc
c0022fca:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0022fcc <AVX::~AVX()>:
c0022fcc:	83 ec 0c             	sub    esp,0xc
c0022fcf:	83 ec 0c             	sub    esp,0xc
c0022fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fd6:	e8 cd ff ff ff       	call   c0022fa8 <AVX::~AVX()>
c0022fdb:	83 c4 10             	add    esp,0x10
c0022fde:	83 ec 08             	sub    esp,0x8
c0022fe1:	68 58 01 00 00       	push   0x158
c0022fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fea:	e8 e3 9b fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022fef:	83 c4 10             	add    esp,0x10
c0022ff2:	83 c4 0c             	add    esp,0xc
c0022ff5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0022ff8 <MMX::~MMX()>:
c0022ff8:	83 ec 0c             	sub    esp,0xc
c0022ffb:	ba 6c 6a 02 c0       	mov    edx,0xc0026a6c
c0023000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023004:	89 10                	mov    DWORD PTR [eax],edx
c0023006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002300a:	83 ec 0c             	sub    esp,0xc
c002300d:	50                   	push   eax
c002300e:	e8 75 b6 fe ff       	call   c000e688 <FPU::~FPU()>
c0023013:	83 c4 10             	add    esp,0x10
c0023016:	90                   	nop
c0023017:	83 c4 0c             	add    esp,0xc
c002301a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002301c <MMX::~MMX()>:
c002301c:	83 ec 0c             	sub    esp,0xc
c002301f:	83 ec 0c             	sub    esp,0xc
c0023022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023026:	e8 cd ff ff ff       	call   c0022ff8 <MMX::~MMX()>
c002302b:	83 c4 10             	add    esp,0x10
c002302e:	83 ec 08             	sub    esp,0x8
c0023031:	68 58 01 00 00       	push   0x158
c0023036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002303a:	e8 93 9b fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c002303f:	83 c4 10             	add    esp,0x10
c0023042:	83 c4 0c             	add    esp,0xc
c0023045:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023048 <SSE::~SSE()>:
c0023048:	83 ec 0c             	sub    esp,0xc
c002304b:	ba ac 6a 02 c0       	mov    edx,0xc0026aac
c0023050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023054:	89 10                	mov    DWORD PTR [eax],edx
c0023056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002305a:	83 ec 0c             	sub    esp,0xc
c002305d:	50                   	push   eax
c002305e:	e8 25 b6 fe ff       	call   c000e688 <FPU::~FPU()>
c0023063:	83 c4 10             	add    esp,0x10
c0023066:	90                   	nop
c0023067:	83 c4 0c             	add    esp,0xc
c002306a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002306c <SSE::~SSE()>:
c002306c:	83 ec 0c             	sub    esp,0xc
c002306f:	83 ec 0c             	sub    esp,0xc
c0023072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023076:	e8 cd ff ff ff       	call   c0023048 <SSE::~SSE()>
c002307b:	83 c4 10             	add    esp,0x10
c002307e:	83 ec 08             	sub    esp,0x8
c0023081:	68 58 01 00 00       	push   0x158
c0023086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002308a:	e8 43 9b fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c002308f:	83 c4 10             	add    esp,0x10
c0023092:	83 c4 0c             	add    esp,0xc
c0023095:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023098 <x87::~x87()>:
c0023098:	83 ec 0c             	sub    esp,0xc
c002309b:	ba ec 6a 02 c0       	mov    edx,0xc0026aec
c00230a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a4:	89 10                	mov    DWORD PTR [eax],edx
c00230a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230aa:	83 ec 0c             	sub    esp,0xc
c00230ad:	50                   	push   eax
c00230ae:	e8 d5 b5 fe ff       	call   c000e688 <FPU::~FPU()>
c00230b3:	83 c4 10             	add    esp,0x10
c00230b6:	90                   	nop
c00230b7:	83 c4 0c             	add    esp,0xc
c00230ba:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00230bc <x87::~x87()>:
c00230bc:	83 ec 0c             	sub    esp,0xc
c00230bf:	83 ec 0c             	sub    esp,0xc
c00230c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230c6:	e8 cd ff ff ff       	call   c0023098 <x87::~x87()>
c00230cb:	83 c4 10             	add    esp,0x10
c00230ce:	83 ec 08             	sub    esp,0x8
c00230d1:	68 58 01 00 00       	push   0x158
c00230d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230da:	e8 f3 9a fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00230df:	83 c4 10             	add    esp,0x10
c00230e2:	83 c4 0c             	add    esp,0xc
c00230e5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00230e6 <IOAPIC::~IOAPIC()>:
c00230e6:	83 ec 0c             	sub    esp,0xc
c00230e9:	ba 44 6c 02 c0       	mov    edx,0xc0026c44
c00230ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230f2:	89 10                	mov    DWORD PTR [eax],edx
c00230f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230f8:	83 ec 0c             	sub    esp,0xc
c00230fb:	50                   	push   eax
c00230fc:	e8 07 af fe ff       	call   c000e008 <Device::~Device()>
c0023101:	83 c4 10             	add    esp,0x10
c0023104:	90                   	nop
c0023105:	83 c4 0c             	add    esp,0xc
c0023108:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002310a <IOAPIC::~IOAPIC()>:
c002310a:	83 ec 0c             	sub    esp,0xc
c002310d:	83 ec 0c             	sub    esp,0xc
c0023110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023114:	e8 cd ff ff ff       	call   c00230e6 <IOAPIC::~IOAPIC()>
c0023119:	83 c4 10             	add    esp,0x10
c002311c:	83 ec 08             	sub    esp,0x8
c002311f:	68 68 01 00 00       	push   0x168
c0023124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023128:	e8 a5 9a fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c002312d:	83 c4 10             	add    esp,0x10
c0023130:	83 c4 0c             	add    esp,0xc
c0023133:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023134 <APIC::~APIC()>:
c0023134:	83 ec 0c             	sub    esp,0xc
c0023137:	ba fc 6b 02 c0       	mov    edx,0xc0026bfc
c002313c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023140:	89 10                	mov    DWORD PTR [eax],edx
c0023142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023146:	83 ec 0c             	sub    esp,0xc
c0023149:	50                   	push   eax
c002314a:	e8 0d ba fe ff       	call   c000eb5c <InterruptController::~InterruptController()>
c002314f:	83 c4 10             	add    esp,0x10
c0023152:	90                   	nop
c0023153:	83 c4 0c             	add    esp,0xc
c0023156:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023158 <APIC::~APIC()>:
c0023158:	83 ec 0c             	sub    esp,0xc
c002315b:	83 ec 0c             	sub    esp,0xc
c002315e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023162:	e8 cd ff ff ff       	call   c0023134 <APIC::~APIC()>
c0023167:	83 c4 10             	add    esp,0x10
c002316a:	83 ec 08             	sub    esp,0x8
c002316d:	68 58 21 00 00       	push   0x2158
c0023172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023176:	e8 57 9a fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c002317b:	83 c4 10             	add    esp,0x10
c002317e:	83 c4 0c             	add    esp,0xc
c0023181:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023182 <PIC::~PIC()>:
c0023182:	83 ec 0c             	sub    esp,0xc
c0023185:	ba 94 6c 02 c0       	mov    edx,0xc0026c94
c002318a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002318e:	89 10                	mov    DWORD PTR [eax],edx
c0023190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023194:	83 ec 0c             	sub    esp,0xc
c0023197:	50                   	push   eax
c0023198:	e8 bf b9 fe ff       	call   c000eb5c <InterruptController::~InterruptController()>
c002319d:	83 c4 10             	add    esp,0x10
c00231a0:	90                   	nop
c00231a1:	83 c4 0c             	add    esp,0xc
c00231a4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00231a6 <PIC::~PIC()>:
c00231a6:	83 ec 0c             	sub    esp,0xc
c00231a9:	83 ec 0c             	sub    esp,0xc
c00231ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231b0:	e8 cd ff ff ff       	call   c0023182 <PIC::~PIC()>
c00231b5:	83 c4 10             	add    esp,0x10
c00231b8:	83 ec 08             	sub    esp,0x8
c00231bb:	68 58 21 00 00       	push   0x2158
c00231c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231c4:	e8 09 9a fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00231c9:	83 c4 10             	add    esp,0x10
c00231cc:	83 c4 0c             	add    esp,0xc
c00231cf:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00231d0 <APICTimer::~APICTimer()>:
c00231d0:	83 ec 0c             	sub    esp,0xc
c00231d3:	ba e8 6c 02 c0       	mov    edx,0xc0026ce8
c00231d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231dc:	89 10                	mov    DWORD PTR [eax],edx
c00231de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231e2:	83 ec 0c             	sub    esp,0xc
c00231e5:	50                   	push   eax
c00231e6:	e8 7d d7 fe ff       	call   c0010968 <Timer::~Timer()>
c00231eb:	83 c4 10             	add    esp,0x10
c00231ee:	90                   	nop
c00231ef:	83 c4 0c             	add    esp,0xc
c00231f2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00231f4 <APICTimer::~APICTimer()>:
c00231f4:	83 ec 0c             	sub    esp,0xc
c00231f7:	83 ec 0c             	sub    esp,0xc
c00231fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231fe:	e8 cd ff ff ff       	call   c00231d0 <APICTimer::~APICTimer()>
c0023203:	83 c4 10             	add    esp,0x10
c0023206:	83 ec 08             	sub    esp,0x8
c0023209:	68 60 01 00 00       	push   0x160
c002320e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023212:	e8 bb 99 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0023217:	83 c4 10             	add    esp,0x10
c002321a:	83 c4 0c             	add    esp,0xc
c002321d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023220 <PIT::~PIT()>:
c0023220:	83 ec 0c             	sub    esp,0xc
c0023223:	ba 38 6d 02 c0       	mov    edx,0xc0026d38
c0023228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002322c:	89 10                	mov    DWORD PTR [eax],edx
c002322e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023232:	83 ec 0c             	sub    esp,0xc
c0023235:	50                   	push   eax
c0023236:	e8 2d d7 fe ff       	call   c0010968 <Timer::~Timer()>
c002323b:	83 c4 10             	add    esp,0x10
c002323e:	90                   	nop
c002323f:	83 c4 0c             	add    esp,0xc
c0023242:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023244 <PIT::~PIT()>:
c0023244:	83 ec 0c             	sub    esp,0xc
c0023247:	83 ec 0c             	sub    esp,0xc
c002324a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002324e:	e8 cd ff ff ff       	call   c0023220 <PIT::~PIT()>
c0023253:	83 c4 10             	add    esp,0x10
c0023256:	83 ec 08             	sub    esp,0x8
c0023259:	68 5c 01 00 00       	push   0x15c
c002325e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023262:	e8 6b 99 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0023267:	83 c4 10             	add    esp,0x10
c002326a:	83 c4 0c             	add    esp,0xc
c002326d:	c3                   	ret    
