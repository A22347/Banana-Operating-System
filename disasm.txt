
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 83 02 00       	call   c00283d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 2c 90 02 c0       	mov    ebx,0xc002902c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 38 90 02 c0    	cmp    ebx,0xc0029038
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 cf 02 c0       	mov    eax,0xc002cf98
c0000049:	3d 98 cf 02 c0       	cmp    eax,0xc002cf98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 cf 02 c0       	push   0xc002cf98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 cf 02 c0       	mov    eax,0xc002cf98
c0000075:	2d 98 cf 02 c0       	sub    eax,0xc002cf98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 cf 02 c0       	push   0xc002cf98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d5c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 40 90 02 c0       	mov    ebx,0xc0029040
c00000bb:	81 eb 3c 90 02 c0    	sub    ebx,0xc002903c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 3c 90 02 c0       	mov    esi,0xc002903c
c00000ca:	a1 cc d5 02 c0       	mov    eax,ds:0xc002d5cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc d5 02 c0       	mov    ds:0xc002d5cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc d5 02 c0       	mov    eax,ds:0xc002d5cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 cf 02 c0       	push   0xc002cf98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 d5 02 c0 01 	mov    BYTE PTR ds:0xc002d5c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 d5 02 c0       	push   0xc002d5d0
c000012c:	68 98 cf 02 c0       	push   0xc002cf98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 19 cf 01 00       	call   c001d2bc <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 b0 20 01 00       	call   c001246b <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 f7 ce 01 00       	call   c001d2bc <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 9f d3 01 00       	call   c001d783 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 b5 d9 01 00       	call   c001dda2 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 da 02 c0 	lgdtd  ds:0xc002da10
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 19 3e 01 00       	call   c00143fb <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 e8 d5 02 c0       	mov    ds:0xc002d5e8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 e8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6fa0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fa0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6fa0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6fa0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fa0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 00 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d600
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 00 d6 02 c0    	mov    DWORD PTR ds:0xc002d600,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 04 d6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd29fc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 04 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd29fc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 00 d6 02 c0    	mov    DWORD PTR ds:0xc002d600,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 2c d6 02 c0    	cmp    DWORD PTR ds:0xc002d62c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 3c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d63c
c0000e38:	c7 42 0c 34 d6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d634
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 3c d6 02 c0    	mov    DWORD PTR ds:0xc002d63c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 2c d6 02 c0    	mov    DWORD PTR ds:0xc002d62c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 00 d6 02 c0 02 	test   BYTE PTR ds:0xc002d600,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 00 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d600
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 04 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd29fc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 04 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd29fc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 34 d6 02 c0 	lea    edx,[eax*8-0x3ffd29cc]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 40 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d640
c00011ba:	81 fb 34 d6 02 c0    	cmp    ebx,0xc002d634
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 34 d6 02 c0       	cmp    eax,0xc002d634
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 30 d6 02 c0    	cmp    DWORD PTR ds:0xc002d630,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 3c d6 02 c0       	mov    ds:0xc002d63c,eax
c00011f6:	a3 40 d6 02 c0       	mov    ds:0xc002d640,eax
c00011fb:	a3 30 d6 02 c0       	mov    ds:0xc002d630,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 34 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d634
c0001209:	c7 40 0c 34 d6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d634
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 40 d6 02 c0       	mov    ds:0xc002d640,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 34 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d634
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 f8 d5 02 c0 	lea    ebp,[edx*4-0x3ffd2a08]
c000125a:	8b 14 95 00 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a00]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 00 d6 02 c0 	lea    ecx,[edx*4-0x3ffd2a00]
c0001275:	8b 14 95 00 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a00]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 34 d9 02 c0 	or     DWORD PTR [edi*4-0x3ffd26cc],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 34 d6 02 c0 	lea    eax,[eax*8-0x3ffd29cc]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 3c d6 02 c0    	mov    DWORD PTR ds:0xc002d63c,ecx
c000132f:	89 0d 40 d6 02 c0    	mov    DWORD PTR ds:0xc002d640,ecx
c0001335:	c7 41 08 34 d6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d634
c000133c:	c7 41 0c 34 d6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d634
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 2c d6 02 c0 	lea    edx,[ecx*8-0x3ffd29d4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 34 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd26cc]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 34 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd26cc]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 2c d6 02 c0 	lea    edx,[eax*4-0x3ffd29d4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 34 d9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd26cc],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 3c d6 02 c0    	mov    DWORD PTR ds:0xc002d63c,edi
c0001402:	89 3d 40 d6 02 c0    	mov    DWORD PTR ds:0xc002d640,edi
c0001408:	c7 47 08 34 d6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d634
c000140f:	c7 47 0c 34 d6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d634
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 30 d6 02 c0    	mov    DWORD PTR ds:0xc002d630,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 2c d6 02 c0       	mov    eax,ds:0xc002d62c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 2c d6 02 c0    	mov    DWORD PTR ds:0xc002d62c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 00 d6 02 c0       	mov    edx,0xc002d600
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 00 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d600,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 54 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d954
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 54 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d954,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 54 d9 02 c0    	mov    DWORD PTR ds:0xc002d954,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 2c d6 02 c0    	cmp    DWORD PTR ds:0xc002d62c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 2c d6 02 c0    	mov    DWORD PTR ds:0xc002d62c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d600,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 5c d9 02 c0    	push   DWORD PTR ds:0xc002d95c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 00 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d600,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 5c d9 02 c0       	mov    eax,ds:0xc002d95c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 2c d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d62c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 2c d6 02 c0       	mov    eax,ds:0xc002d62c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 04 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd29fc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 34 d6 02 c0       	mov    eax,0xc002d634
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 2c d9 02 c0       	cmp    eax,0xc002d92c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 50 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d950
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 64 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d964
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 74 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d974
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e9c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 00 d6 02 c0       	mov    eax,ds:0xc002d600
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 00 d6 02 c0       	mov    ds:0xc002d600,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 44 d9 02 c0    	mov    DWORD PTR ds:0xc002d944,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 48 d9 02 c0    	mov    DWORD PTR ds:0xc002d948,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 4c d9 02 c0    	mov    DWORD PTR ds:0xc002d94c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 54 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d954,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 c0 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef40]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 e0 eb 01 00       	jmp    c00207d2 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 c0 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef40]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 11 ec 01 00       	jmp    c0020819 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 c0 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef40]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 39 ec 01 00       	jmp    c0020860 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 2a 48 02 00       	call   c0026734 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6d80]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6d80]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 91 02 c0       	mov    edx,0xc0029180
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 92 02 c0       	mov    edx,0xc00292a0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba d4 be 02 c0       	mov    edx,0xc002bed4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac 92 02 c0       	mov    edx,0xc00292ac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 92 02 c0       	mov    edx,0xc0029290
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 a0 d9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2660]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 80 d9 02 c0    	mov    ax,ds:0xc002d980
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 80 d9 02 c0    	mov    ds:0xc002d980,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 27 36 02 00       	call   c0026734 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 92 02 c0       	mov    eax,0xc00292b2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6e00]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb 92 02 c0       	mov    eax,0xc00292bb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6d80]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 f2 1f 02 00       	call   c0026734 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 92 02 c0       	mov    edx,0xc0029290
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 91 02 c0       	mov    edx,0xc0029180
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 91 02 c0       	mov    edx,0xc0029190
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 a0 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2660]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 a0 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2660],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 b9 09 02 00       	call   c0026734 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 9f 09 02 00       	call   c0026734 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 91 02 c0       	mov    eax,0xc00291d7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 91 02 c0       	mov    eax,0xc00291d0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 a0 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2660]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 91 02 c0       	mov    esi,0xc00291c0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 e2 f0 01 00       	call   c0026734 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 92 02 c0       	mov    edx,0xc00292a0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 91 02 c0       	mov    edx,0xc00291a0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 91 02 c0       	mov    edx,0xc00291b0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 92 02 c0       	mov    edx,0xc00292c2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce 92 02 c0       	mov    edx,0xc00292ce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 92 02 c0       	mov    edx,0xc00292e2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029600
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029600
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 94 02 c0       	mov    eax,0xc0029400
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 93 02 c0       	mov    eax,0xc0029340
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d00]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 36 fa 01 00       	call   c0028207 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 f9 f9 01 00       	call   c00281e9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 cd f9 01 00       	call   c0028207 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 80 f0 01 00       	call   c002790c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 02 fb 01 00       	call   c00283a0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 47 f9 01 00       	call   c0028207 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 89 f8 01 00       	call   c0028207 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 56 f8 01 00       	call   c00281e9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 43 f7 01 00       	call   c0028207 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 0b f7 01 00       	call   c00281e9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 97 02 c0       	mov    eax,0xc0029700
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 17 f5 01 00       	call   c0028207 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 dc f4 01 00       	call   c00281e9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 ec f1 01 00       	call   c0027f9b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 6a eb 01 00       	call   c0027938 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 26 f4 01 00       	call   c002820b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 14 f5 01 00       	call   c002832f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 fe ea 01 00       	call   c0027938 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 a9 f3 01 00       	call   c0028205 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 8a f3 01 00       	call   c0028209 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 20 f5 01 00       	call   c00283c0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 ca f0 01 00       	call   c0027f9b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 48 ea 01 00       	call   c0027938 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 04 f3 01 00       	call   c002820b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 f2 f3 01 00       	call   c002832f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 dc e9 01 00       	call   c0027938 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 87 f2 01 00       	call   c0028205 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 67 f2 01 00       	call   c0028209 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 fc f3 01 00       	call   c00283c0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 a2 f1 01 00       	call   c0028207 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 60 f1 01 00       	call   c00281e9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 48 f1 01 00       	call   c0028207 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 ba ee 01 00       	call   c0027f9b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 bc e1 01 00       	call   c00272bb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 1f e8 01 00       	call   c0027938 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 71 ee 01 00       	call   c0027f9b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 77 e1 01 00       	call   c00272bb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 46 ee 01 00       	call   c0027f9b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 96 f0 01 00       	call   c0028205 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 73 e7 01 00       	call   c002790c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 f5 f1 01 00       	call   c00283a0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 1c f0 01 00       	call   c00281e9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 17 e7 01 00       	call   c002790c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 95 ed 01 00       	call   c0027f9b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 18 e7 01 00       	call   c0027938 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 6a ed 01 00       	call   c0027f9b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 d1 e9 01 00       	call   c0027c1c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 50 e0 01 00       	call   c00272bb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 b0 d9 01 00       	call   c0026c50 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 87 f0 01 00       	call   c002832f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 70 e6 01 00       	call   c0027938 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 57 f0 01 00       	call   c002832f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 c9 df 01 00       	call   c00272bb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 02 ef 01 00       	call   c002820b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ea e8 01 00       	call   c0027c1c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 70 df 01 00       	call   c00272bb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 5e f0 01 00       	call   c00283c0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 30 ec 01 00       	call   c0027f9b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 87 e5 01 00       	call   c002790c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 66 ee 01 00       	call   c0028207 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 ff de 01 00       	call   c00272bb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 2b e5 01 00       	call   c002790c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 cd ef 01 00       	call   c00283c0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 7e eb 01 00       	call   c0027f9b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 fb e4 01 00       	call   c0027938 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 4e eb 01 00       	call   c0027f9b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 54 de 01 00       	call   c00272bb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 24 eb 01 00       	call   c0027f9b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 76 ed 01 00       	call   c0028207 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 4d e4 01 00       	call   c002790c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 cf ee 01 00       	call   c00283a0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 f6 ec 01 00       	call   c00281e9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 f0 e3 01 00       	call   c002790c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 6e ea 01 00       	call   c0027f9b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 f1 e3 01 00       	call   c0027938 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 43 ea 01 00       	call   c0027f9b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 aa e6 01 00       	call   c0027c1c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 29 dd 01 00       	call   c00272bb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 79 d6 01 00       	call   c0026c50 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 50 ed 01 00       	call   c002832f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 39 e3 01 00       	call   c0027938 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 20 ed 01 00       	call   c002832f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 92 dc 01 00       	call   c00272bb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 cb eb 01 00       	call   c002820b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 b2 e5 01 00       	call   c0027c1c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 31 dc 01 00       	call   c00272bb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 1f ed 01 00       	call   c00283c0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 f1 e8 01 00       	call   c0027f9b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 48 e2 01 00       	call   c002790c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 27 eb 01 00       	call   c0028207 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 c0 db 01 00       	call   c00272bb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 ec e1 01 00       	call   c002790c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 61 e8 01 00       	call   c0027f9b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 67 db 01 00       	call   c00272bb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 9b 02 c0       	mov    eax,0xc0029bc0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 9b 02 c0       	mov    eax,0xc0029bd4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 dc e6 01 00       	call   c0027f9b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 5a e0 01 00       	call   c0027938 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 ec d2 01 00       	call   c0026c50 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 c3 e9 01 00       	call   c002832f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 ac df 01 00       	call   c0027938 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 8f e9 01 00       	call   c002832f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 01 d9 01 00       	call   c00272bb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 61 e9 01 00       	call   c002832f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 50 df 01 00       	call   c0027938 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 b9 d8 01 00       	call   c00272bb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 da d1 01 00       	call   c0026c50 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 b1 e8 01 00       	call   c002832f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 9a de 01 00       	call   c0027938 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 7d e8 01 00       	call   c002832f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 ef d7 01 00       	call   c00272bb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 4f e8 01 00       	call   c002832f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 3e de 01 00       	call   c0027938 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 a7 d7 01 00       	call   c00272bb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 85 d7 01 00       	call   c00272bb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 61 d0 01 00       	call   c0026c50 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 38 e7 01 00       	call   c002832f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 21 dd 01 00       	call   c0027938 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 04 e7 01 00       	call   c002832f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 76 d6 01 00       	call   c00272bb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 d6 e6 01 00       	call   c002832f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 bf dc 01 00       	call   c0027938 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 28 d6 01 00       	call   c00272bb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 88 e6 01 00       	call   c002832f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 71 dc 01 00       	call   c0027938 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 da d5 01 00       	call   c00272bb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 ef ce 01 00       	call   c0026c50 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 c6 e5 01 00       	call   c002832f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 af db 01 00       	call   c0027938 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 96 e5 01 00       	call   c002832f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 08 d5 01 00       	call   c00272bb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 68 e5 01 00       	call   c002832f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 51 db 01 00       	call   c0027938 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 ba d4 01 00       	call   c00272bb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 1a e5 01 00       	call   c002832f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 03 db 01 00       	call   c0027938 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 6c d4 01 00       	call   c00272bb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 40 d4 01 00       	call   c00272bb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 9d da 01 00       	call   c0027938 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 59 e3 01 00       	call   c002820b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 e8 d3 01 00       	call   c00272bb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 45 da 01 00       	call   c0027938 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 01 e3 01 00       	call   c002820b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 7b cc 01 00       	call   c0026c50 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 52 e3 01 00       	call   c002832f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 3b d9 01 00       	call   c0027938 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 1e e3 01 00       	call   c002832f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 90 d2 01 00       	call   c00272bb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 f0 e2 01 00       	call   c002832f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 d9 d8 01 00       	call   c0027938 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 42 d2 01 00       	call   c00272bb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 a2 e2 01 00       	call   c002832f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 8b d8 01 00       	call   c0027938 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 f4 d1 01 00       	call   c00272bb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 54 e2 01 00       	call   c002832f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 3d d8 01 00       	call   c0027938 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 a6 d1 01 00       	call   c00272bb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 06 e2 01 00       	call   c002832f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 ef d7 01 00       	call   c0027938 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 58 d1 01 00       	call   c00272bb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 5a ca 01 00       	call   c0026c50 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 31 e1 01 00       	call   c002832f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 1a d7 01 00       	call   c0027938 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 01 e1 01 00       	call   c002832f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 73 d0 01 00       	call   c00272bb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 d3 e0 01 00       	call   c002832f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 bc d6 01 00       	call   c0027938 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 25 d0 01 00       	call   c00272bb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 85 e0 01 00       	call   c002832f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 6e d6 01 00       	call   c0027938 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 d7 cf 01 00       	call   c00272bb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 37 e0 01 00       	call   c002832f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 20 d6 01 00       	call   c0027938 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 89 cf 01 00       	call   c00272bb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 e9 df 01 00       	call   c002832f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 d2 d5 01 00       	call   c0027938 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 3b cf 01 00       	call   c00272bb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 0f cf 01 00       	call   c00272bb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 6c d5 01 00       	call   c0027938 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 28 de 01 00       	call   c002820b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 b7 ce 01 00       	call   c00272bb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 14 d5 01 00       	call   c0027938 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 d0 dd 01 00       	call   c002820b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 5e ce 01 00       	call   c00272bb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 bb d4 01 00       	call   c0027938 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 77 dd 01 00       	call   c002820b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 05 ce 01 00       	call   c00272bb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 62 d4 01 00       	call   c0027938 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 1e dd 01 00       	call   c002820b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 7c c6 01 00       	call   c0026c50 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 53 dd 01 00       	call   c002832f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 3c d3 01 00       	call   c0027938 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 1f dd 01 00       	call   c002832f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 91 cc 01 00       	call   c00272bb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 f1 dc 01 00       	call   c002832f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 da d2 01 00       	call   c0027938 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 43 cc 01 00       	call   c00272bb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 a3 dc 01 00       	call   c002832f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 8c d2 01 00       	call   c0027938 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 f5 cb 01 00       	call   c00272bb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 55 dc 01 00       	call   c002832f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 3e d2 01 00       	call   c0027938 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 a7 cb 01 00       	call   c00272bb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 07 dc 01 00       	call   c002832f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 f0 d1 01 00       	call   c0027938 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 59 cb 01 00       	call   c00272bb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 b9 db 01 00       	call   c002832f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 a2 d1 01 00       	call   c0027938 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 08 cb 01 00       	call   c00272bb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 68 db 01 00       	call   c002832f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 51 d1 01 00       	call   c0027938 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 ba ca 01 00       	call   c00272bb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 b4 c3 01 00       	call   c0026c50 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 8b da 01 00       	call   c002832f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 74 d0 01 00       	call   c0027938 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 54 da 01 00       	call   c002832f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 c6 c9 01 00       	call   c00272bb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 26 da 01 00       	call   c002832f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 0f d0 01 00       	call   c0027938 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 78 c9 01 00       	call   c00272bb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 d8 d9 01 00       	call   c002832f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 c1 cf 01 00       	call   c0027938 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 2a c9 01 00       	call   c00272bb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 8a d9 01 00       	call   c002832f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 73 cf 01 00       	call   c0027938 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 dc c8 01 00       	call   c00272bb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 3c d9 01 00       	call   c002832f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 25 cf 01 00       	call   c0027938 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 8e c8 01 00       	call   c00272bb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ee d8 01 00       	call   c002832f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 d7 ce 01 00       	call   c0027938 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 3d c8 01 00       	call   c00272bb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 9d d8 01 00       	call   c002832f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 86 ce 01 00       	call   c0027938 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 f5 c7 01 00       	call   c00272bb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 ce c7 01 00       	call   c00272bb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 2c ce 01 00       	call   c0027938 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 e8 d6 01 00       	call   c002820b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 77 c7 01 00       	call   c00272bb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 d5 cd 01 00       	call   c0027938 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 91 d6 01 00       	call   c002820b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 1f c7 01 00       	call   c00272bb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 7d cd 01 00       	call   c0027938 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 39 d6 01 00       	call   c002820b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 c7 c6 01 00       	call   c00272bb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 25 cd 01 00       	call   c0027938 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 e1 d5 01 00       	call   c002820b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 6f c6 01 00       	call   c00272bb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 cd cc 01 00       	call   c0027938 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 89 d5 01 00       	call   c002820b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 1d c6 01 00       	call   c00272bb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 7b cc 01 00       	call   c0027938 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 37 d5 01 00       	call   c002820b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 4b be 01 00       	call   c0026c50 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 22 d5 01 00       	call   c002832f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 0b cb 01 00       	call   c0027938 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 f2 d4 01 00       	call   c002832f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 64 c4 01 00       	call   c00272bb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 98 d4 01 00       	call   c002832f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 81 ca 01 00       	call   c0027938 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 ec c3 01 00       	call   c00272bb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 39 d4 01 00       	call   c002832f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 22 ca 01 00       	call   c0027938 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 8d c3 01 00       	call   c00272bb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 da d3 01 00       	call   c002832f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 c3 c9 01 00       	call   c0027938 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 2e c3 01 00       	call   c00272bb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 7b d3 01 00       	call   c002832f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 64 c9 01 00       	call   c0027938 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 cf c2 01 00       	call   c00272bb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 1c d3 01 00       	call   c002832f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 05 c9 01 00       	call   c0027938 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 70 c2 01 00       	call   c00272bb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 bd d2 01 00       	call   c002832f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 a6 c8 01 00       	call   c0027938 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 11 c2 01 00       	call   c00272bb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 5e d2 01 00       	call   c002832f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 47 c8 01 00       	call   c0027938 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 b2 c1 01 00       	call   c00272bb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 ff d1 01 00       	call   c002832f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 e8 c7 01 00       	call   c0027938 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 53 c1 01 00       	call   c00272bb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 5d ba 01 00       	call   c0026c50 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 34 d1 01 00       	call   c002832f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 1d c7 01 00       	call   c0027938 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 04 d1 01 00       	call   c002832f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 76 c0 01 00       	call   c00272bb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 a9 d0 01 00       	call   c002832f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 92 c6 01 00       	call   c0027938 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 fd bf 01 00       	call   c00272bb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 49 d0 01 00       	call   c002832f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 32 c6 01 00       	call   c0027938 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 9d bf 01 00       	call   c00272bb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 e9 cf 01 00       	call   c002832f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 d2 c5 01 00       	call   c0027938 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 3d bf 01 00       	call   c00272bb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 89 cf 01 00       	call   c002832f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 72 c5 01 00       	call   c0027938 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 dd be 01 00       	call   c00272bb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 29 cf 01 00       	call   c002832f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 12 c5 01 00       	call   c0027938 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 7d be 01 00       	call   c00272bb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 c9 ce 01 00       	call   c002832f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 b2 c4 01 00       	call   c0027938 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 1d be 01 00       	call   c00272bb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 69 ce 01 00       	call   c002832f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 52 c4 01 00       	call   c0027938 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 bd bd 01 00       	call   c00272bb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 09 ce 01 00       	call   c002832f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 f2 c3 01 00       	call   c0027938 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 5d bd 01 00       	call   c00272bb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 02 bd 01 00       	call   c00272bb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 5f c3 01 00       	call   c0027938 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 1b cc 01 00       	call   c002820b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 a5 bc 01 00       	call   c00272bb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 02 c3 01 00       	call   c0027938 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 be cb 01 00       	call   c002820b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 48 bc 01 00       	call   c00272bb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 a5 c2 01 00       	call   c0027938 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 61 cb 01 00       	call   c002820b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 eb bb 01 00       	call   c00272bb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 48 c2 01 00       	call   c0027938 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 04 cb 01 00       	call   c002820b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 8e bb 01 00       	call   c00272bb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 eb c1 01 00       	call   c0027938 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 a7 ca 01 00       	call   c002820b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 31 bb 01 00       	call   c00272bb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 8e c1 01 00       	call   c0027938 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 4a ca 01 00       	call   c002820b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 d4 ba 01 00       	call   c00272bb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 31 c1 01 00       	call   c0027938 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 ed c9 01 00       	call   c002820b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 77 ba 01 00       	call   c00272bb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 d4 c0 01 00       	call   c0027938 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 90 c9 01 00       	call   c002820b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 8c c0 01 00       	call   c0027938 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 04 cb 01 00       	jmp    c00283c0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 6e c7 01 00       	call   c0028207 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 2c c7 01 00       	call   c00281e9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 c3 c4 01 00       	call   c0027f9b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 c4 b7 01 00       	call   c00272bb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 93 c4 01 00       	call   c0027f9b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 fa c0 01 00       	call   c0027c1c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 99 c6 01 00       	call   c00281e9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 9c c6 01 00       	call   c0028207 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 6f c6 01 00       	call   c0028207 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 68 c0 01 00       	call   c0027c1c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 f2 c7 01 00       	call   c00283c0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 cd c7 01 00       	call   c00283c0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 9f c3 01 00       	call   c0027f9b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 f6 bc 01 00       	call   c002790c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 d5 c5 01 00       	call   c0028207 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 6e b6 01 00       	call   c00272bb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 92 bc 01 00       	call   c002790c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 34 c7 01 00       	call   c00283c0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 6c bf 01 00       	call   c0027c1c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 e9 b5 01 00       	call   c00272bb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 15 c2 01 00       	call   c0027f9b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 15 b5 01 00       	call   c00272bb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 f5 b4 01 00       	call   c00272bb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 c5 c1 01 00       	call   c0027f9b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 15 c4 01 00       	call   c0028205 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 f4 ba 01 00       	call   c002790c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 76 c5 01 00       	call   c00283a0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 9d c3 01 00       	call   c00281e9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 9b ba 01 00       	call   c002790c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 19 c1 01 00       	call   c0027f9b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 9c ba 01 00       	call   c0027938 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ee c0 01 00       	call   c0027f9b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 55 bd 01 00       	call   c0027c1c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 d4 b3 01 00       	call   c00272bb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 9e c0 01 00       	call   c0027f9b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ea c2 01 00       	call   c0028207 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 df b9 01 00       	call   c0027938 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 b1 b9 01 00       	call   c0027938 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ea bf 01 00       	call   c0027f9b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 4e bc 01 00       	call   c0027c1c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 16 bc 01 00       	call   c0027c1c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 95 b2 01 00       	call   c00272bb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 82 c3 01 00       	call   c00283c0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 54 bf 01 00       	call   c0027f9b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 ab b8 01 00       	call   c002790c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 8a c1 01 00       	call   c0028207 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 22 b2 01 00       	call   c00272bb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 46 b8 01 00       	call   c002790c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 e8 c2 01 00       	call   c00283c0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 a9 c0 01 00       	call   c0028207 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 67 c0 01 00       	call   c00281e9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 fe bd 01 00       	call   c0027f9b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 ff b0 01 00       	call   c00272bb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 ce bd 01 00       	call   c0027f9b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 35 ba 01 00       	call   c0027c1c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 d4 bf 01 00       	call   c00281e9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 d7 bf 01 00       	call   c0028207 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 aa bf 01 00       	call   c0028207 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 a3 b9 01 00       	call   c0027c1c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 2d c1 01 00       	call   c00283c0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 08 c1 01 00       	call   c00283c0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 da bc 01 00       	call   c0027f9b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 31 b6 01 00       	call   c002790c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 10 bf 01 00       	call   c0028207 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 a9 af 01 00       	call   c00272bb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 cd b5 01 00       	call   c002790c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 6f c0 01 00       	call   c00283c0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 a7 b8 01 00       	call   c0027c1c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 24 af 01 00       	call   c00272bb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 4f bb 01 00       	call   c0027f9b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 4f ae 01 00       	call   c00272bb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 2f ae 01 00       	call   c00272bb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 ff ba 01 00       	call   c0027f9b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 4f bd 01 00       	call   c0028205 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 2d b4 01 00       	call   c002790c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 af be 01 00       	call   c00283a0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 d6 bc 01 00       	call   c00281e9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 d3 b3 01 00       	call   c002790c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 51 ba 01 00       	call   c0027f9b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 d4 b3 01 00       	call   c0027938 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 26 ba 01 00       	call   c0027f9b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 8d b6 01 00       	call   c0027c1c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 0c ad 01 00       	call   c00272bb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 d6 b9 01 00       	call   c0027f9b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 22 bc 01 00       	call   c0028207 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 17 b3 01 00       	call   c0027938 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 e9 b2 01 00       	call   c0027938 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 20 b9 01 00       	call   c0027f9b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 84 b5 01 00       	call   c0027c1c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 51 b5 01 00       	call   c0027c1c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 d0 ab 01 00       	call   c00272bb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 bd bc 01 00       	call   c00283c0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 8f b8 01 00       	call   c0027f9b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 e6 b1 01 00       	call   c002790c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 c5 ba 01 00       	call   c0028207 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 5d ab 01 00       	call   c00272bb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 81 b1 01 00       	call   c002790c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 23 bc 01 00       	call   c00283c0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 e4 b9 01 00       	call   c0028207 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 a2 b9 01 00       	call   c00281e9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 39 b7 01 00       	call   c0027f9b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 3a aa 01 00       	call   c00272bb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 09 b7 01 00       	call   c0027f9b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 70 b3 01 00       	call   c0027c1c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 0f b9 01 00       	call   c00281e9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 12 b9 01 00       	call   c0028207 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 e5 b8 01 00       	call   c0028207 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 de b2 01 00       	call   c0027c1c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 68 ba 01 00       	call   c00283c0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 43 ba 01 00       	call   c00283c0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 15 b6 01 00       	call   c0027f9b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 6c af 01 00       	call   c002790c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 4b b8 01 00       	call   c0028207 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 e4 a8 01 00       	call   c00272bb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 08 af 01 00       	call   c002790c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 aa b9 01 00       	call   c00283c0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 e2 b1 01 00       	call   c0027c1c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 5f a8 01 00       	call   c00272bb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 8a b4 01 00       	call   c0027f9b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 8a a7 01 00       	call   c00272bb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 6a a7 01 00       	call   c00272bb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 3a b4 01 00       	call   c0027f9b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 8a b6 01 00       	call   c0028205 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 68 ad 01 00       	call   c002790c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ea b7 01 00       	call   c00283a0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 11 b6 01 00       	call   c00281e9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 0e ad 01 00       	call   c002790c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 8c b3 01 00       	call   c0027f9b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 0f ad 01 00       	call   c0027938 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 61 b3 01 00       	call   c0027f9b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 c8 af 01 00       	call   c0027c1c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 47 a6 01 00       	call   c00272bb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 11 b3 01 00       	call   c0027f9b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 5d b5 01 00       	call   c0028207 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 52 ac 01 00       	call   c0027938 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 24 ac 01 00       	call   c0027938 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 5b b2 01 00       	call   c0027f9b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 bf ae 01 00       	call   c0027c1c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 8c ae 01 00       	call   c0027c1c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 0b a5 01 00       	call   c00272bb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 f8 b5 01 00       	call   c00283c0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 ca b1 01 00       	call   c0027f9b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 21 ab 01 00       	call   c002790c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 00 b4 01 00       	call   c0028207 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 98 a4 01 00       	call   c00272bb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 bc aa 01 00       	call   c002790c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 5e b5 01 00       	call   c00283c0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 1f b3 01 00       	call   c0028207 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 dd b2 01 00       	call   c00281e9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 74 b0 01 00       	call   c0027f9b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 75 a3 01 00       	call   c00272bb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 44 b0 01 00       	call   c0027f9b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 ab ac 01 00       	call   c0027c1c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 4a b2 01 00       	call   c00281e9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 4d b2 01 00       	call   c0028207 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 20 b2 01 00       	call   c0028207 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 19 ac 01 00       	call   c0027c1c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 a3 b3 01 00       	call   c00283c0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 7e b3 01 00       	call   c00283c0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 50 af 01 00       	call   c0027f9b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 a7 a8 01 00       	call   c002790c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 86 b1 01 00       	call   c0028207 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 1f a2 01 00       	call   c00272bb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 43 a8 01 00       	call   c002790c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 e5 b2 01 00       	call   c00283c0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 1d ab 01 00       	call   c0027c1c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 9a a1 01 00       	call   c00272bb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 c5 ad 01 00       	call   c0027f9b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 c5 a0 01 00       	call   c00272bb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 a5 a0 01 00       	call   c00272bb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 75 ad 01 00       	call   c0027f9b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 c5 af 01 00       	call   c0028205 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 a3 a6 01 00       	call   c002790c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 25 b1 01 00       	call   c00283a0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 4c af 01 00       	call   c00281e9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 49 a6 01 00       	call   c002790c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 c7 ac 01 00       	call   c0027f9b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 4a a6 01 00       	call   c0027938 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 9c ac 01 00       	call   c0027f9b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 03 a9 01 00       	call   c0027c1c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 82 9f 01 00       	call   c00272bb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 4c ac 01 00       	call   c0027f9b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 98 ae 01 00       	call   c0028207 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 8d a5 01 00       	call   c0027938 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 5f a5 01 00       	call   c0027938 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 96 ab 01 00       	call   c0027f9b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 fa a7 01 00       	call   c0027c1c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 c7 a7 01 00       	call   c0027c1c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 46 9e 01 00       	call   c00272bb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 33 af 01 00       	call   c00283c0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 05 ab 01 00       	call   c0027f9b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 5c a4 01 00       	call   c002790c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 3b ad 01 00       	call   c0028207 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 d3 9d 01 00       	call   c00272bb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 f7 a3 01 00       	call   c002790c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 99 ae 01 00       	call   c00283c0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 57 ac 01 00       	call   c0028207 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 15 ac 01 00       	call   c00281e9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 ac a9 01 00       	call   c0027f9b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 ad 9c 01 00       	call   c00272bb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 7c a9 01 00       	call   c0027f9b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 e3 a5 01 00       	call   c0027c1c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 82 ab 01 00       	call   c00281e9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 85 ab 01 00       	call   c0028207 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 58 ab 01 00       	call   c0028207 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 51 a5 01 00       	call   c0027c1c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 db ac 01 00       	call   c00283c0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 b2 ac 01 00       	call   c00283c0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 84 a8 01 00       	call   c0027f9b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 db a1 01 00       	call   c002790c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 ba aa 01 00       	call   c0028207 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 53 9b 01 00       	call   c00272bb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 7b a1 01 00       	call   c002790c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 1d ac 01 00       	call   c00283c0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 56 a4 01 00       	call   c0027c1c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 d3 9a 01 00       	call   c00272bb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 ff a6 01 00       	call   c0027f9b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 ff 99 01 00       	call   c00272bb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 df 99 01 00       	call   c00272bb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 af a6 01 00       	call   c0027f9b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 e3 a8 01 00       	call   c00281e9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 da 9f 01 00       	call   c002790c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 5c aa 01 00       	call   c00283a0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 83 a8 01 00       	call   c00281e9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 7d 9f 01 00       	call   c002790c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 fb a5 01 00       	call   c0027f9b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 7e 9f 01 00       	call   c0027938 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 d0 a5 01 00       	call   c0027f9b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 37 a2 01 00       	call   c0027c1c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 b6 98 01 00       	call   c00272bb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 80 a5 01 00       	call   c0027f9b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 cc a7 01 00       	call   c0028207 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 c1 9e 01 00       	call   c0027938 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 93 9e 01 00       	call   c0027938 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 d7 a4 01 00       	call   c0027f9b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 3e a1 01 00       	call   c0027c1c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 27 9e 01 00       	call   c0027938 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 e3 a6 01 00       	call   c002820b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 d6 a0 01 00       	call   c0027c1c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 55 97 01 00       	call   c00272bb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 42 a8 01 00       	call   c00283c0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 14 a4 01 00       	call   c0027f9b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 6b 9d 01 00       	call   c002790c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 4a a6 01 00       	call   c0028207 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 e2 96 01 00       	call   c00272bb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 0a 9d 01 00       	call   c002790c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 ac a7 01 00       	call   c00283c0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd639c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 5f a4 01 00       	call   c0028207 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 1d a4 01 00       	call   c00281e9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 09 a4 01 00       	call   c0028207 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 7b a1 01 00       	call   c0027f9b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 f9 9a 01 00       	call   c0027938 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 4b a1 01 00       	call   c0027f9b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 51 94 01 00       	call   c00272bb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 20 a1 01 00       	call   c0027f9b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 70 a3 01 00       	call   c0028205 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 51 9a 01 00       	call   c002790c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 d3 a4 01 00       	call   c00283a0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 fa a2 01 00       	call   c00281e9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 f9 99 01 00       	call   c002790c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 77 a0 01 00       	call   c0027f9b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 fa 99 01 00       	call   c0027938 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 4c a0 01 00       	call   c0027f9b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 b3 9c 01 00       	call   c0027c1c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 32 93 01 00       	call   c00272bb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 5a 9c 01 00       	call   c0027c1c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 e0 92 01 00       	call   c00272bb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 ce a3 01 00       	call   c00283c0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 a0 9f 01 00       	call   c0027f9b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 f7 98 01 00       	call   c002790c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 d6 a1 01 00       	call   c0028207 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 6f 92 01 00       	call   c00272bb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 9b 98 01 00       	call   c002790c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 3d a3 01 00       	call   c00283c0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ea 9e 01 00       	call   c0027f9b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 67 98 01 00       	call   c0027938 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 b8 9e 01 00       	call   c0027f9b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 be 91 01 00       	call   c00272bb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 8e 9e 01 00       	call   c0027f9b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 e2 a0 01 00       	call   c0028209 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 bb 97 01 00       	call   c002790c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 3d a2 01 00       	call   c00283a0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 64 a0 01 00       	call   c00281e9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 62 97 01 00       	call   c002790c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 e0 9d 01 00       	call   c0027f9b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 63 97 01 00       	call   c0027938 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 b5 9d 01 00       	call   c0027f9b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 1c 9a 01 00       	call   c0027c1c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 9b 90 01 00       	call   c00272bb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 b7 99 01 00       	call   c0027c1c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 36 90 01 00       	call   c00272bb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 24 a1 01 00       	call   c00283c0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 f6 9c 01 00       	call   c0027f9b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 4d 96 01 00       	call   c002790c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 2c 9f 01 00       	call   c0028207 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 c5 8f 01 00       	call   c00272bb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 f1 95 01 00       	call   c002790c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 62 9c 01 00       	call   c0027f9b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 68 8f 01 00       	call   c00272bb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e 9d 02 c0       	mov    eax,0xc0029d7e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f 9d 02 c0       	mov    eax,0xc0029d8f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000e4e3:	ff 05 24 0f 03 c0    	inc    DWORD PTR ds:0xc0030f24
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 20 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f20,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c000e50d:	e8 df f4 00 00       	call   c001d9f1 <schedule()>
c000e512:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000e517:	48                   	dec    eax
c000e518:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 70 db 02 c0       	mov    eax,ds:0xc002db70
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 9d 02 c0       	push   0xc0029dc6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 08 da 02 c0       	mov    eax,0xc002da08
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf 9d 02 c0       	push   0xc0029dcf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 34 67 02 c0       	mov    eax,0xc0026734
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 9d 02 c0       	push   0xc0029dd9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 68 64 02 c0       	mov    eax,0xc0026468
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 9d 02 c0       	push   0xc0029de2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 34 68 02 c0       	mov    eax,0xc0026834
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec 9d 02 c0       	push   0xc0029dec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 b4 65 02 c0       	mov    eax,0xc00265b4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 9d 02 c0       	push   0xc0029df5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 0c da 02 c0       	mov    eax,0xc002da0c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 9e 02 c0       	push   0xc0029e02
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 0d da 02 c0       	mov    eax,0xc002da0d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 4b 56 00 00       	call   c0013cb8 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 0f 9e 02 c0       	push   0xc0029e0f
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c000e6be:	68 28 9e 02 c0       	push   0xc0029e28
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 09 ef 00 00       	call   c001d5d4 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 ec f0 00 00       	call   c001d7cc <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 b0 e1 01 c0       	push   0xc001e1b0
c000e6e9:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c000e6ef:	e8 d8 f0 00 00       	call   c001d7cc <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c000e6fc:	68 0c 9f 02 c0       	push   0xc0029f0c
c000e701:	c6 05 0d da 02 c0 01 	mov    BYTE PTR ds:0xc002da0d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 49 fe 00 00       	call   c001e55b <Vm::initialise8086()>
c000e712:	e8 69 43 00 00       	call   c0012a80 <Fs::initVFS()>
c000e717:	c7 04 24 35 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e35
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 0c 9f 02 c0       	push   0xc0029f0c
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 0f d7 00 00       	call   c001be5b <Sys::loadSyscalls()>
c000e74c:	e8 07 b6 00 00       	call   c0019d58 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 4f 9e 02 c0       	push   0xc0029e4f
c000e75b:	68 58 9e 02 c0       	push   0xc0029e58
c000e760:	e8 b8 c4 00 00       	call   c001ac1d <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 03 4e 00 00       	call   c0013570 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 30 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f30
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 ee 54 00 00       	call   c0013c78 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 60 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e60
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 25 b1 00 00       	call   c00198c0 <Krnl::startCPUs()>
c000e79b:	c7 04 24 7a 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e7a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 8b 9e 02 c0       	push   0xc0029e8b
c000e7b6:	e8 70 e8 00 00       	call   c001d02b <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 98 ea 00 00       	call   c001d25c <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 f6 f3 00 00       	call   c001dbc7 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 a7 9e 02 c0       	push   0xc0029ea7
c000e7e5:	50                   	push   eax
c000e7e6:	e8 47 55 00 00       	call   c0013d32 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 7c 9f 02 c0       	mov    edx,0xc0029f7c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 21 da 02 c0 04 	test   BYTE PTR ds:0xc002da21,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 77 7a 01 00       	call   c00263f6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 98 9e 00 00       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 71 9e 00 00       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 4f 9e 00 00       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 2d 9e 00 00       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 20 da 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002da20,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 3b 9d 00 00       	call   c00187ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 16 9d 00 00       	call   c00187ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 e1 78 01 00       	call   c00263b0 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 9e 78 01 00       	call   c0026390 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 32 9d 00 00       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 b0 9e 02 c0       	push   0xc0029eb0
c000eb62:	e8 fa b2 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 b6 9e 02 c0       	push   0xc0029eb6
c000eb9a:	e8 c2 b2 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 50 9f 02 c0       	push   0xc0029f50
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 20 da 02 c0 04 	test   BYTE PTR ds:0xc002da20,0x4
c000ec03:	0f 94 05 40 c9 02 c0 	sete   BYTE PTR ds:0xc002c940
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 ad 8e 00 00       	call   c0017ac6 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 06 4f 00 00       	call   c0013b2e <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 60 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e60
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 ae 9c 00 00       	call   c001890a <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 c3 4e 00 00       	call   c0013b2e <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 3f 54 00 00       	call   c00140c6 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 93 4e 00 00       	call   c0013b2e <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 bc 9e 02 c0       	push   0xc0029ebc
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 25 ec 00 00       	call   c001d8ee <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 d7 9e 02 c0       	push   0xc0029ed7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 de 39 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 e8 9e 02 c0       	push   0xc0029ee8
c000ed34:	e8 28 b1 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 f5 9e 02 c0       	push   0xc0029ef5
c000ed49:	e8 13 b1 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 ff 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029eff
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 fc b0 00 00       	jmp    c0019e61 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 12 da 02 c0       	mov    ds:0xc002da12,eax
c000ee21:	66 89 15 10 da 02 c0 	mov    WORD PTR ds:0xc002da10,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000ef38:	48                   	dec    eax
c000ef39:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 b1 94 01 00       	call   c0028440 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 a8 94 01 00       	call   c0028440 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 18 da 02 c0 ff 07 	mov    WORD PTR ds:0xc002da18,0x7ff
c000f085:	a3 1a da 02 c0       	mov    ds:0xc002da1a,eax
c000f08a:	0f 01 1d 18 da 02 c0 	lidtd  ds:0xc002da18
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c000f37c:	e8 5b 27 00 00       	call   c0011adc <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c5 17 00 00       	call   c0010b64 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f6 17 00 00       	call   c0010ba4 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d dc c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c7dc
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 dc c7 02 c0       	mov    eax,ds:0xc002c7dc
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 a0 9f 02 c0       	push   0xc0029fa0
c000f455:	e8 9b 32 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 dc c7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c7dc,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c000f481:	8b 2d dc c7 02 c0    	mov    ebp,DWORD PTR ds:0xc002c7dc
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 41 25 00 00       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d dc c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c7dc
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 d0 9f 02 c0       	push   0xc0029fd0
c000f50d:	e8 4f a9 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 d5 9f 02 c0       	push   0xc0029fd5
c000f523:	e8 39 a9 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000f543:	48                   	dec    eax
c000f544:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c000f561:	e8 76 25 00 00       	call   c0011adc <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c000f577:	e8 0a 22 00 00       	call   c0011786 <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 dc 9f 02 c0       	push   0xc0029fdc
c000f6a4:	e8 4c 30 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b8 09 00 00       	call   c0010066 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 e0 c7 02 c0 	movzx  eax,BYTE PTR ds:0xc002c7e0
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 e0 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3820]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 16 c8 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd37ea],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 15 c8 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd37eb]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 e0 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3820]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 f4 9f 02 c0       	push   0xc0029ff4
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 20 da 02 c0       	mov    ds:0xc002da20,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 81 1c 00 00       	call   c00113dc <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 48 1e 00 00       	call   c00115ae <VAS::VAS()>
c000f766:	89 1d 70 db 02 c0    	mov    DWORD PTR ds:0xc002db70,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 08 da 02 c0    	mov    DWORD PTR ds:0xc002da08,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 bc 20 00 00       	call   c001185e <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 13 a0 02 c0       	push   0xc002a013
c000f7b9:	e8 37 2f 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba 60 da 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd25a0],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be 60 da 02 c0       	mov    esi,0xc002da60
c000f826:	8d 93 60 da 02 c0    	lea    edx,[ebx-0x3ffd25a0]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 2c a0 02 c0       	push   0xc002a02c
c000f843:	e8 ad 2e 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 43 a0 02 c0       	push   0xc002a043
c000f87f:	e8 71 2e 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 60 da 02 c0    	lea    eax,[edx-0x3ffd25a0]
c000f8b8:	8d 94 11 60 da 02 c0 	lea    edx,[ecx+edx*1-0x3ffd25a0]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 24 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c924
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 24 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c924
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 24 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c924
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 59 a0 02 c0       	push   0xc002a059
c000f932:	e8 be 2d 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d 50 da 02 c0    	dec    DWORD PTR ds:0xc002da50
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 6c a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a06c
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 e2 a4 00 00       	jmp    c0019e61 <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 44 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da44
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d 44 da 02 c0    	mov    DWORD PTR ds:0xc002da44,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 44 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da44,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 a0 a0 02 c0       	push   0xc002a0a0
c000f9da:	e8 16 2d 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 9b 29 00 00       	call   c001238e <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 b8 a0 02 c0       	push   0xc002a0b8
c000fa16:	e8 46 a4 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d 44 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da44
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 50 da 02 c0       	mov    eax,ds:0xc002da50
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 44 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da44
c000fa45:	a3 50 da 02 c0       	mov    ds:0xc002da50,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 54 da 02 c0    	push   DWORD PTR ds:0xc002da54
c000fa54:	50                   	push   eax
c000fa55:	68 82 a0 02 c0       	push   0xc002a082
c000fa5a:	e8 96 2c 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 44 da 02 c0       	mov    eax,ds:0xc002da44
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000fad3:	48                   	dec    eax
c000fad4:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d 48 da 02 c0    	cmp    DWORD PTR ds:0xc002da48,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d 48 da 02 c0    	mov    DWORD PTR ds:0xc002da48,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	83 ec 40             	sub    esp,0x40
c000fb28:	6a 30                	push   0x30
c000fb2a:	6a 00                	push   0x0
c000fb2c:	68 60 da 02 c0       	push   0xc002da60
c000fb31:	e8 1a 0c ff ff       	call   c0000750 <memset>
c000fb36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb3f:	05 00 10 00 00       	add    eax,0x1000
c000fb44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb48:	5b                   	pop    ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	50                   	push   eax
c000fb4d:	68 c6 a0 02 c0       	push   0xc002a0c6
c000fb52:	e8 9e 2b 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 08 a1 02 c0       	push   0xc002a108
c000fbe6:	e8 0a 2b 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 14 01 00 00    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	50                   	push   eax
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 2c a1 02 c0       	push   0xc002a12c
c000fc72:	e8 7e 2a 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000fc77:	5a                   	pop    edx
c000fc78:	59                   	pop    ecx
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 54 da 02 c0    	add    eax,DWORD PTR ds:0xc002da54
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 54 da 02 c0       	mov    ds:0xc002da54,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 ec a0 02 c0       	push   0xc002a0ec
c000fca8:	e8 48 2a 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 de a0 02 c0       	push   0xc002a0de
c000fd17:	e8 45 a1 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	6a 00                	push   0x0
c000fd29:	53                   	push   ebx
c000fd2a:	43                   	inc    ebx
c000fd2b:	e8 a6 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd30:	ff 05 54 da 02 c0    	inc    DWORD PTR ds:0xc002da54
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3f:	75 e3                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd41:	83 c4 3c             	add    esp,0x3c
c000fd44:	5b                   	pop    ebx
c000fd45:	5e                   	pop    esi
c000fd46:	5f                   	pop    edi
c000fd47:	5d                   	pop    ebp
c000fd48:	c3                   	ret    
c000fd49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd59:	e9 d7 fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd5e <Pipe::isAtty()>:
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <Pipe::~Pipe()>:
c000fd62:	83 ec 0c             	sub    esp,0xc
c000fd65:	ba 98 a1 02 c0       	mov    edx,0xc002a198
c000fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6e:	89 10                	mov    DWORD PTR [eax],edx
c000fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	50                   	push   eax
c000fd78:	e8 3f 12 00 00       	call   c0010fbc <UnixFile::~UnixFile()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::~Pipe()>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd90:	e8 cd ff ff ff       	call   c000fd62 <Pipe::~Pipe()>
c000fd95:	83 c4 10             	add    esp,0x10
c000fd98:	83 ec 08             	sub    esp,0x8
c000fd9b:	6a 20                	push   0x20
c000fd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda1:	e8 77 28 00 00       	call   c001261d <operator delete(void*, unsigned long)>
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	83 c4 0c             	add    esp,0xc
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <Pipe::read(unsigned long long, void*, int*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	57                   	push   edi
c000fdb0:	56                   	push   esi
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 1c             	sub    esp,0x1c
c000fdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc4:	89 c8                	mov    eax,ecx
c000fdc6:	99                   	cdq    
c000fdc7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcb:	74 24                	je     c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcd:	39 f9                	cmp    ecx,edi
c000fdcf:	89 d1                	mov    ecx,edx
c000fdd1:	19 f1                	sbb    ecx,esi
c000fdd3:	73 1c                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd5:	fa                   	cli    
c000fdd6:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c000fddc:	e8 10 dc 00 00       	call   c001d9f1 <schedule()>
c000fde1:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c000fde6:	48                   	dec    eax
c000fde7:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c000fdec:	75 d3                	jne    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdee:	fb                   	sti    
c000fdef:	eb d0                	jmp    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf1:	39 f8                	cmp    eax,edi
c000fdf3:	89 d1                	mov    ecx,edx
c000fdf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfc:	19 f1                	sbb    ecx,esi
c000fdfe:	73 07                	jae    c000fe07 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe07:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0d:	29 f7                	sub    edi,esi
c000fe0f:	89 f8                	mov    eax,edi
c000fe11:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe15:	99                   	cdq    
c000fe16:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1d:	19 d0                	sbb    eax,edx
c000fe1f:	73 07                	jae    c000fe28 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe28:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2b:	89 ea                	mov    edx,ebp
c000fe2d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe36:	74 0d                	je     c000fe45 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe45:	85 d2                	test   edx,edx
c000fe47:	74 11                	je     c000fe5a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe50:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 d1                	mov    ecx,edx
c000fe56:	89 c7                	mov    edi,eax
c000fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe60:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe63:	99                   	cdq    
c000fe64:	89 f7                	mov    edi,esi
c000fe66:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6d:	c1 ff 1f             	sar    edi,0x1f
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	52                   	push   edx
c000fe73:	50                   	push   eax
c000fe74:	e8 bb 69 01 00       	call   c0026834 <__umoddi3>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe84:	75 10                	jne    c000fe96 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	68 55 a1 02 c0       	push   0xc002a155
c000fe8e:	e8 ce 9f 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9d:	89 10                	mov    DWORD PTR [eax],edx
c000fe9f:	83 c4 1c             	add    esp,0x1c
c000fea2:	31 c0                	xor    eax,eax
c000fea4:	5b                   	pop    ebx
c000fea5:	5e                   	pop    esi
c000fea6:	5f                   	pop    edi
c000fea7:	5d                   	pop    ebp
c000fea8:	c3                   	ret    
c000fea9:	90                   	nop

c000feaa <Pipe::write(unsigned long long, void*, int*)>:
c000feaa:	55                   	push   ebp
c000feab:	57                   	push   edi
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 1c             	sub    esp,0x1c
c000feb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000febc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec7:	89 d8                	mov    eax,ebx
c000fec9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed0:	89 d6                	mov    esi,edx
c000fed2:	89 d7                	mov    edi,edx
c000fed4:	c1 ff 1f             	sar    edi,0x1f
c000fed7:	03 34 24             	add    esi,DWORD PTR [esp]
c000feda:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fede:	c1 f8 1f             	sar    eax,0x1f
c000fee1:	39 f3                	cmp    ebx,esi
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feeb:	19 f8                	sbb    eax,edi
c000feed:	b8 01 00 00 00       	mov    eax,0x1
c000fef2:	72 6e                	jb     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef7:	01 d0                	add    eax,edx
c000fef9:	99                   	cdq    
c000fefa:	f7 fb                	idiv   ebx
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	29 d3                	sub    ebx,edx
c000ff02:	89 d7                	mov    edi,edx
c000ff04:	89 de                	mov    esi,ebx
c000ff06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff09:	c1 fb 1f             	sar    ebx,0x1f
c000ff0c:	39 f2                	cmp    edx,esi
c000ff0e:	19 d8                	sbb    eax,ebx
c000ff10:	b8 00 00 00 00       	mov    eax,0x0
c000ff15:	72 04                	jb     c000ff1b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff17:	89 d0                	mov    eax,edx
c000ff19:	29 f0                	sub    eax,esi
c000ff1b:	89 d3                	mov    ebx,edx
c000ff1d:	29 c3                	sub    ebx,eax
c000ff1f:	74 0b                	je     c000ff2c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff21:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff24:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff28:	89 d9                	mov    ecx,ebx
c000ff2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 0d                	je     c000ff3d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff30:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff34:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff37:	89 de                	mov    esi,ebx
c000ff39:	89 c1                	mov    ecx,eax
c000ff3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff40:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff45:	75 10                	jne    c000ff57 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	68 71 a1 02 c0       	push   0xc002a171
c000ff4f:	e8 0d 9f 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5e:	89 08                	mov    DWORD PTR [eax],ecx
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	83 c4 1c             	add    esp,0x1c
c000ff65:	5b                   	pop    ebx
c000ff66:	5e                   	pop    esi
c000ff67:	5f                   	pop    edi
c000ff68:	5d                   	pop    ebp
c000ff69:	c3                   	ret    

c000ff6a <Pipe::Pipe(int)>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 00                	push   0x0
c000ff76:	50                   	push   eax
c000ff77:	e8 5e 0e 00 00       	call   c0010dda <UnixFile::UnixFile(int)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba 98 a1 02 c0       	mov    edx,0xc002a198
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	50                   	push   eax
c000ffb3:	e8 e1 f5 ff ff       	call   c000f599 <malloc>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	89 c2                	mov    edx,eax
c000ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::isAtty()>:
c000ffd2:	b0 01                	mov    al,0x1
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::~VgaText()>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	ba 20 a2 02 c0       	mov    edx,0xc002a220
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	50                   	push   eax
c000ffec:	e8 cb 0f 00 00       	call   c0010fbc <UnixFile::~UnixFile()>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	90                   	nop
c000fff5:	83 c4 0c             	add    esp,0xc
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <VgaText::~VgaText()>:
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010004:	e8 cd ff ff ff       	call   c000ffd6 <VgaText::~VgaText()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	83 ec 08             	sub    esp,0x8
c001000f:	68 c4 02 00 00       	push   0x2c4
c0010014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010018:	e8 00 26 00 00       	call   c001261d <operator delete(void*, unsigned long)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	c3                   	ret    

c0010024 <VgaText::read(unsigned long long, void*, int*)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	e8 84 5b 00 00       	call   c0015bbc <readKeyboard(VgaText*, char*, unsigned long)>
c0010038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003c:	89 02                	mov    DWORD PTR [edx],eax
c001003e:	31 c0                	xor    eax,eax
c0010040:	83 c4 1c             	add    esp,0x1c
c0010043:	c3                   	ret    

c0010044 <setTerminalScrollLock(bool)>:
c0010044:	c3                   	ret    

c0010045 <addToTerminalCycle(VgaText*)>:
c0010045:	8b 15 c0 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac0
c001004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004f:	85 d2                	test   edx,edx
c0010051:	75 09                	jne    c001005c <addToTerminalCycle(VgaText*)+0x17>
c0010053:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010056:	a3 c0 da 02 c0       	mov    ds:0xc002dac0,eax
c001005b:	c3                   	ret    
c001005c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010062:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010065:	c3                   	ret    

c0010066 <installVgaTextImplementation()>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	6a 20                	push   0x20
c001006b:	6a 00                	push   0x0
c001006d:	68 a0 da 02 c0       	push   0xc002daa0
c0010072:	e8 d9 06 ff ff       	call   c0000750 <memset>
c0010077:	83 c4 1c             	add    esp,0x1c
c001007a:	c3                   	ret    

c001007b <scrollTerminalScrollLock(int)>:
c001007b:	c3                   	ret    

c001007c <VgaText::updateTitle()>:
c001007c:	53                   	push   ebx
c001007d:	31 c0                	xor    eax,eax
c001007f:	83 ec 58             	sub    esp,0x58
c0010082:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010086:	89 e1                	mov    ecx,esp
c0010088:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008c:	40                   	inc    eax
c001008d:	83 f8 50             	cmp    eax,0x50
c0010090:	75 f6                	jne    c0010088 <VgaText::updateTitle()+0xc>
c0010092:	31 c0                	xor    eax,eax
c0010094:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009b:	84 db                	test   bl,bl
c001009d:	74 06                	je     c00100a5 <VgaText::updateTitle()+0x29>
c001009f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a2:	40                   	inc    eax
c00100a3:	eb ef                	jmp    c0010094 <VgaText::updateTitle()+0x18>
c00100a5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::updateTitle()+0x39>
c00100ac:	53                   	push   ebx
c00100ad:	53                   	push   ebx
c00100ae:	51                   	push   ecx
c00100af:	52                   	push   edx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::load()>:
c00100ba:	53                   	push   ebx
c00100bb:	31 c0                	xor    eax,eax
c00100bd:	83 ec 58             	sub    esp,0x58
c00100c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c4:	89 e2                	mov    edx,esp
c00100c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ca:	40                   	inc    eax
c00100cb:	83 f8 50             	cmp    eax,0x50
c00100ce:	75 f6                	jne    c00100c6 <VgaText::load()+0xc>
c00100d0:	31 c0                	xor    eax,eax
c00100d2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d9:	84 c9                	test   cl,cl
c00100db:	74 06                	je     c00100e3 <VgaText::load()+0x29>
c00100dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e0:	40                   	inc    eax
c00100e1:	eb ef                	jmp    c00100d2 <VgaText::load()+0x18>
c00100e3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e6:	85 c0                	test   eax,eax
c00100e8:	74 09                	je     c00100f3 <VgaText::load()+0x39>
c00100ea:	51                   	push   ecx
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	53                   	push   ebx
c00100ee:	ff d0                	call   eax
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 09                	je     c0010103 <VgaText::load()+0x49>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	53                   	push   ebx
c00100fe:	ff d0                	call   eax
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 c4 58             	add    esp,0x58
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <VgaText::updateCursor()>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	39 05 c4 da 02 c0    	cmp    DWORD PTR ds:0xc002dac4,eax
c0010112:	75 09                	jne    c001011d <VgaText::updateCursor()+0x15>
c0010114:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010117:	85 c0                	test   eax,eax
c0010119:	74 02                	je     c001011d <VgaText::updateCursor()+0x15>
c001011b:	ff e0                	jmp    eax
c001011d:	c3                   	ret    

c001011e <VgaText::doANSI_SGR(int)>:
c001011e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	85 d2                	test   edx,edx
c0010128:	75 0b                	jne    c0010135 <VgaText::doANSI_SGR(int)+0x17>
c001012a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010133:	eb 59                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010135:	83 fa 07             	cmp    edx,0x7
c0010138:	75 0b                	jne    c0010145 <VgaText::doANSI_SGR(int)+0x27>
c001013a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010140:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010143:	eb 49                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010145:	83 fa 1b             	cmp    edx,0x1b
c0010148:	74 e0                	je     c001012a <VgaText::doANSI_SGR(int)+0xc>
c001014a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014d:	83 f9 07             	cmp    ecx,0x7
c0010150:	77 09                	ja     c001015b <VgaText::doANSI_SGR(int)+0x3d>
c0010152:	8b 14 8d 60 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd36a0]
c0010159:	eb 20                	jmp    c001017b <VgaText::doANSI_SGR(int)+0x5d>
c001015b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015e:	83 f9 07             	cmp    ecx,0x7
c0010161:	77 09                	ja     c001016c <VgaText::doANSI_SGR(int)+0x4e>
c0010163:	8b 14 8d 60 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd36a0]
c001016a:	eb 22                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c001016c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016f:	83 f9 07             	cmp    ecx,0x7
c0010172:	77 0b                	ja     c001017f <VgaText::doANSI_SGR(int)+0x61>
c0010174:	8b 14 95 18 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd37e8]
c001017b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017e:	c3                   	ret    
c001017f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010182:	83 f9 07             	cmp    ecx,0x7
c0010185:	77 0a                	ja     c0010191 <VgaText::doANSI_SGR(int)+0x73>
c0010187:	8b 14 95 f0 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3810]
c001018e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010191:	c3                   	ret    

c0010192 <VgaText::setDefaultBgColour(VgaColour)>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b2:	53                   	push   ebx
c00101b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bf:	51                   	push   ecx
c00101c0:	e8 cd ff ff ff       	call   c0010192 <VgaText::setDefaultBgColour(VgaColour)>
c00101c5:	58                   	pop    eax
c00101c6:	5a                   	pop    edx
c00101c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cf:	5b                   	pop    ebx
c00101d0:	eb d0                	jmp    c00101a2 <VgaText::setDefaultFgColour(VgaColour)>

c00101d2 <VgaText::setTitleTextColour(VgaColour)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101dd:	e9 9a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101e2 <VgaText::setTitleColour(VgaColour)>:
c00101e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101ed:	e9 8a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101f2 <VgaText::setTitle(char*)>:
c00101f2:	53                   	push   ebx
c00101f3:	83 ec 10             	sub    esp,0x10
c00101f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fe:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010204:	50                   	push   eax
c0010205:	e8 02 06 ff ff       	call   c000080c <strcpy>
c001020a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020e:	83 c4 18             	add    esp,0x18
c0010211:	5b                   	pop    ebx
c0010212:	e9 65 fe ff ff       	jmp    c001007c <VgaText::updateTitle()>
c0010217:	90                   	nop

c0010218 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010218:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010221:	83 e0 0f             	and    eax,0xf
c0010224:	c1 e2 04             	shl    edx,0x4
c0010227:	09 d0                	or     eax,edx
c0010229:	c3                   	ret    

c001022a <VgaText::scrollScreen()>:
c001022a:	55                   	push   ebp
c001022b:	b9 01 00 00 00       	mov    ecx,0x1
c0010230:	57                   	push   edi
c0010231:	56                   	push   esi
c0010232:	53                   	push   ebx
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010240:	31 ff                	xor    edi,edi
c0010242:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010245:	83 f9 17             	cmp    ecx,0x17
c0010248:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010252:	75 27                	jne    c001027b <VgaText::scrollScreen()+0x51>
c0010254:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010257:	01 f5                	add    ebp,esi
c0010259:	f7 c7 01 00 00 00    	test   edi,0x1
c001025f:	74 16                	je     c0010277 <VgaText::scrollScreen()+0x4d>
c0010261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010265:	50                   	push   eax
c0010266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026a:	50                   	push   eax
c001026b:	e8 a8 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010270:	5a                   	pop    edx
c0010271:	5a                   	pop    edx
c0010272:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010275:	eb 04                	jmp    c001027b <VgaText::scrollScreen()+0x51>
c0010277:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027b:	47                   	inc    edi
c001027c:	46                   	inc    esi
c001027d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010283:	75 bd                	jne    c0010242 <VgaText::scrollScreen()+0x18>
c0010285:	41                   	inc    ecx
c0010286:	83 f9 18             	cmp    ecx,0x18
c0010289:	75 af                	jne    c001023a <VgaText::scrollScreen()+0x10>
c001028b:	39 1d c4 da 02 c0    	cmp    DWORD PTR ds:0xc002dac4,ebx
c0010291:	75 1b                	jne    c00102ae <VgaText::scrollScreen()+0x84>
c0010293:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010297:	74 05                	je     c001029e <VgaText::scrollScreen()+0x74>
c0010299:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029c:	eb 10                	jmp    c00102ae <VgaText::scrollScreen()+0x84>
c001029e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a1:	85 c0                	test   eax,eax
c00102a3:	74 09                	je     c00102ae <VgaText::scrollScreen()+0x84>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	53                   	push   ebx
c00102a9:	ff d0                	call   eax
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b2:	83 c4 0c             	add    esp,0xc
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	5f                   	pop    edi
c00102b8:	5d                   	pop    ebp
c00102b9:	e9 4a fe ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c00102be <VgaText::combineCharAndColour(char, unsigned char)>:
c00102be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c3:	c1 e0 08             	shl    eax,0x8
c00102c6:	89 c2                	mov    edx,eax
c00102c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102dc:	50                   	push   eax
c00102dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 30 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e8:	5b                   	pop    ebx
c00102e9:	0f b6 c0             	movzx  eax,al
c00102ec:	5e                   	pop    esi
c00102ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f2:	50                   	push   eax
c00102f3:	53                   	push   ebx
c00102f4:	e8 c5 ff ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c00102f9:	5a                   	pop    edx
c00102fa:	5e                   	pop    esi
c00102fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010304:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010308:	0f b7 d2             	movzx  edx,dx
c001030b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030f:	39 0d c4 da 02 c0    	cmp    DWORD PTR ds:0xc002dac4,ecx
c0010315:	75 10                	jne    c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010317:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 09                	je     c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010322:	5a                   	pop    edx
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	ff e0                	jmp    eax
c0010327:	58                   	pop    eax
c0010328:	5b                   	pop    ebx
c0010329:	5e                   	pop    esi
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <VgaText::getCursorX()>:
c001032c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010333:	c3                   	ret    

c0010334 <VgaText::getCursorY()>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033b:	c3                   	ret    

c001033c <VgaText::setCursor(int, int)>:
c001033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034e:	e9 b5 fd ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c0010353 <setActiveTerminal(VgaText*)>:
c0010353:	53                   	push   ebx
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035b:	85 db                	test   ebx,ebx
c001035d:	75 11                	jne    c0010370 <setActiveTerminal(VgaText*)+0x1d>
c001035f:	c7 44 24 10 ac a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1ac
c0010367:	83 c4 08             	add    esp,0x8
c001036a:	5b                   	pop    ebx
c001036b:	e9 f1 9a 00 00       	jmp    c0019e61 <Krnl::panic(char const*)>
c0010370:	a1 c4 da 02 c0       	mov    eax,ds:0xc002dac4
c0010375:	85 c0                	test   eax,eax
c0010377:	74 0c                	je     c0010385 <setActiveTerminal(VgaText*)+0x32>
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 86 fd ff ff       	call   c0010108 <VgaText::updateCursor()>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	89 1d c4 da 02 c0    	mov    DWORD PTR ds:0xc002dac4,ebx
c001038b:	51                   	push   ecx
c001038c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010392:	53                   	push   ebx
c0010393:	e8 a4 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039f:	75 07                	jne    c00103a8 <setActiveTerminal(VgaText*)+0x55>
c00103a1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ac:	83 c4 08             	add    esp,0x8
c00103af:	5b                   	pop    ebx
c00103b0:	e9 05 fd ff ff       	jmp    c00100ba <VgaText::load()>

c00103b5 <doTerminalCycle()>:
c00103b5:	83 ec 18             	sub    esp,0x18
c00103b8:	a1 c0 da 02 c0       	mov    eax,ds:0xc002dac0
c00103bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c0:	50                   	push   eax
c00103c1:	a3 c0 da 02 c0       	mov    ds:0xc002dac0,eax
c00103c6:	e8 88 ff ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorX(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103de:	50                   	push   eax
c00103df:	e8 58 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103e4:	83 c4 1c             	add    esp,0x1c
c00103e7:	c3                   	ret    

c00103e8 <VgaText::setCursorY(int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f6:	50                   	push   eax
c00103f7:	e8 40 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103fc:	83 c4 1c             	add    esp,0x1c
c00103ff:	c3                   	ret    

c0010400 <VgaText::incrementCursor(bool)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	51                   	push   ecx
c0010403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040e:	40                   	inc    eax
c001040f:	83 f8 50             	cmp    eax,0x50
c0010412:	74 05                	je     c0010419 <VgaText::incrementCursor(bool)+0x19>
c0010414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010417:	eb 24                	jmp    c001043d <VgaText::incrementCursor(bool)+0x3d>
c0010419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010423:	8d 50 01             	lea    edx,[eax+0x1]
c0010426:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010429:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042c:	75 0f                	jne    c001043d <VgaText::incrementCursor(bool)+0x3d>
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010434:	53                   	push   ebx
c0010435:	e8 f0 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 f0                	mov    eax,esi
c001043f:	84 c0                	test   al,al
c0010441:	74 0c                	je     c001044f <VgaText::incrementCursor(bool)+0x4f>
c0010443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010447:	5a                   	pop    edx
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	e9 b9 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c001044f:	58                   	pop    eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::decrementCursor(bool)>:
c0010454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 04                	je     c0010467 <VgaText::decrementCursor(bool)+0x13>
c0010463:	48                   	dec    eax
c0010464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010467:	84 c9                	test   cl,cl
c0010469:	74 09                	je     c0010474 <VgaText::decrementCursor(bool)+0x20>
c001046b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046f:	e9 94 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010486:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048a:	3c 07                	cmp    al,0x7
c001048c:	75 2a                	jne    c00104b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048e:	a1 78 db 02 c0       	mov    eax,ds:0xc002db78
c0010493:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 4a 30 00 00       	jmp    c0013502 <Buzzer::beep(int, int, bool)>
c00104b8:	3c 0d                	cmp    al,0xd
c00104ba:	75 09                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c3:	eb 2c                	jmp    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c5:	3c 0a                	cmp    al,0xa
c00104c7:	75 31                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d3:	8d 50 01             	lea    edx,[eax+0x1]
c00104d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104dc:	75 0f                	jne    c00104ed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 40 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f1:	83 c4 08             	add    esp,0x8
c00104f4:	5b                   	pop    ebx
c00104f5:	e9 0e fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c00104fa:	3c 08                	cmp    al,0x8
c00104fc:	75 25                	jne    c0010523 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fe:	50                   	push   eax
c00104ff:	50                   	push   eax
c0010500:	6a 01                	push   0x1
c0010502:	53                   	push   ebx
c0010503:	e8 4c ff ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010508:	5a                   	pop    edx
c0010509:	59                   	pop    ecx
c001050a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010510:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010513:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010516:	6a 20                	push   0x20
c0010518:	53                   	push   ebx
c0010519:	e8 b2 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051e:	83 c4 28             	add    esp,0x28
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	83 ec 08             	sub    esp,0x8
c0010526:	0f be c0             	movsx  eax,al
c0010529:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052f:	51                   	push   ecx
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	53                   	push   ebx
c0010533:	e8 98 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010538:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010544:	83 c4 28             	add    esp,0x28
c0010547:	5b                   	pop    ebx
c0010548:	e9 b3 fe ff ff       	jmp    c0010400 <VgaText::incrementCursor(bool)>
c001054d:	90                   	nop

c001054e <VgaText::doUpdate()>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010555:	85 c0                	test   eax,eax
c0010557:	74 02                	je     c001055b <VgaText::doUpdate()+0xd>
c0010559:	ff e0                	jmp    eax
c001055b:	c3                   	ret    

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	31 ed                	xor    ebp,ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010575:	50                   	push   eax
c0010576:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057b:	50                   	push   eax
c001057c:	e8 97 fc ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010581:	59                   	pop    ecx
c0010582:	0f b6 c0             	movzx  eax,al
c0010585:	5e                   	pop    esi
c0010586:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	0f b7 f6             	movzx  esi,si
c0010599:	01 f6                	add    esi,esi
c001059b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 fd 00 00 00    	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0c                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b4:	e9 e7 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b9:	3c 0a                	cmp    al,0xa
c00105bb:	75 47                	jne    c0010604 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d0:	75 0f                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d8:	53                   	push   ebx
c00105d9:	e8 4c fc ff ff       	call   c001022a <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	31 ed                	xor    ebp,ebp
c00105e6:	53                   	push   ebx
c00105e7:	e8 1c fb ff ff       	call   c0010108 <VgaText::updateCursor()>
c00105ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f7:	0f b7 f6             	movzx  esi,si
c00105fa:	01 f6                	add    esi,esi
c00105fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ff:	e9 9c 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010604:	3c 08                	cmp    al,0x8
c0010606:	75 35                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010608:	56                   	push   esi
c0010609:	56                   	push   esi
c001060a:	6a 01                	push   0x1
c001060c:	53                   	push   ebx
c001060d:	e8 42 fe ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010612:	58                   	pop    eax
c0010613:	5a                   	pop    edx
c0010614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010620:	6a 20                	push   0x20
c0010622:	53                   	push   ebx
c0010623:	e8 a8 fc ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010628:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062d:	83 c4 20             	add    esp,0x20
c0010630:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010633:	0f b7 f6             	movzx  esi,si
c0010636:	01 f6                	add    esi,esi
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	eb 63                	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010643:	50                   	push   eax
c0010644:	e8 75 fc ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	66 89 06             	mov    WORD PTR [esi],ax
c001064f:	39 1d c4 da 02 c0    	cmp    DWORD PTR ds:0xc002dac4,ebx
c0010655:	75 21                	jne    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010657:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 1a                	je     c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065e:	52                   	push   edx
c001065f:	52                   	push   edx
c0010660:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010663:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010671:	51                   	push   ecx
c0010672:	53                   	push   ebx
c0010673:	ff d0                	call   eax
c0010675:	83 c4 20             	add    esp,0x20
c0010678:	83 c6 02             	add    esi,0x2
c001067b:	50                   	push   eax
c001067c:	50                   	push   eax
c001067d:	6a 00                	push   0x0
c001067f:	53                   	push   ebx
c0010680:	e8 7b fd ff ff       	call   c0010400 <VgaText::incrementCursor(bool)>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068c:	75 0d                	jne    c001069b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010693:	0f b7 f6             	movzx  esi,si
c0010696:	01 f6                	add    esi,esi
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	bd 01 00 00 00       	mov    ebp,0x1
c00106a0:	47                   	inc    edi
c00106a1:	e9 f8 fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	53                   	push   ebx
c00106aa:	e8 59 fa ff ff       	call   c0010108 <VgaText::updateCursor()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	89 e8                	mov    eax,ebp
c00106b4:	84 c0                	test   al,al
c00106b6:	74 0c                	je     c00106c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	53                   	push   ebx
c00106bc:	e8 8d fe ff ff       	call   c001054e <VgaText::doUpdate()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	5f                   	pop    edi
c00106d1:	5d                   	pop    ebp
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::clearScreen()>:
c00106d4:	57                   	push   edi
c00106d5:	56                   	push   esi
c00106d6:	31 f6                	xor    esi,esi
c00106d8:	53                   	push   ebx
c00106d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106dd:	52                   	push   edx
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	e8 54 fc ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00106e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f5:	7e 20                	jle    c0010717 <VgaText::clearScreen()+0x43>
c00106f7:	31 ff                	xor    edi,edi
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	56                   	push   esi
c00106fc:	57                   	push   edi
c00106fd:	47                   	inc    edi
c00106fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010704:	6a 20                	push   0x20
c0010706:	53                   	push   ebx
c0010707:	e8 c4 fb ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070c:	83 c4 20             	add    esp,0x20
c001070f:	83 ff 50             	cmp    edi,0x50
c0010712:	75 e5                	jne    c00106f9 <VgaText::clearScreen()+0x25>
c0010714:	46                   	inc    esi
c0010715:	eb db                	jmp    c00106f2 <VgaText::clearScreen()+0x1e>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	53                   	push   ebx
c001071b:	e8 2e fe ff ff       	call   c001054e <VgaText::doUpdate()>
c0010720:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	c3                   	ret    

c001072e <VgaText::putchar(char)>:
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	83 ec 14             	sub    esp,0x14
c0010733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073b:	3c 5b                	cmp    al,0x5b
c001073d:	75 18                	jne    c0010757 <VgaText::putchar(char)+0x29>
c001073f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010743:	74 1f                	je     c0010764 <VgaText::putchar(char)+0x36>
c0010745:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010752:	e9 bd 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010757:	3c 1b                	cmp    al,0x1b
c0010759:	75 09                	jne    c0010764 <VgaText::putchar(char)+0x36>
c001075b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075f:	e9 b0 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010764:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010767:	84 c9                	test   cl,cl
c0010769:	0f 84 92 00 00 00    	je     c0010801 <VgaText::putchar(char)+0xd3>
c001076f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010772:	80 fa 3e             	cmp    dl,0x3e
c0010775:	77 76                	ja     c00107ed <VgaText::putchar(char)+0xbf>
c0010777:	3c 6d                	cmp    al,0x6d
c0010779:	75 47                	jne    c00107c2 <VgaText::putchar(char)+0x94>
c001077b:	31 f6                	xor    esi,esi
c001077d:	31 d2                	xor    edx,edx
c001077f:	31 c0                	xor    eax,eax
c0010781:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010784:	7e 2d                	jle    c00107b3 <VgaText::putchar(char)+0x85>
c0010786:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078b:	80 fa 3b             	cmp    dl,0x3b
c001078e:	75 17                	jne    c00107a7 <VgaText::putchar(char)+0x79>
c0010790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010794:	50                   	push   eax
c0010795:	53                   	push   ebx
c0010796:	e8 83 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c001079b:	59                   	pop    ecx
c001079c:	31 d2                	xor    edx,edx
c001079e:	58                   	pop    eax
c001079f:	31 c0                	xor    eax,eax
c00107a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a5:	eb 09                	jmp    c00107b0 <VgaText::putchar(char)+0x82>
c00107a7:	6b c0 0a             	imul   eax,eax,0xa
c00107aa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ae:	88 ca                	mov    dl,cl
c00107b0:	46                   	inc    esi
c00107b1:	eb ce                	jmp    c0010781 <VgaText::putchar(char)+0x53>
c00107b3:	84 d2                	test   dl,dl
c00107b5:	74 2e                	je     c00107e5 <VgaText::putchar(char)+0xb7>
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 60 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c00107be:	58                   	pop    eax
c00107bf:	5a                   	pop    edx
c00107c0:	eb 23                	jmp    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c2:	3c 4a                	cmp    al,0x4a
c00107c4:	75 1f                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ca:	75 19                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	53                   	push   ebx
c00107d0:	e8 ff fe ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	6a 00                	push   0x0
c00107da:	6a 00                	push   0x0
c00107dc:	53                   	push   ebx
c00107dd:	e8 5a fb ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107eb:	eb 27                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c00107ed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f0:	83 fa 0e             	cmp    edx,0xe
c00107f3:	7f 1f                	jg     c0010814 <VgaText::putchar(char)+0xe6>
c00107f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107fb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107ff:	eb 13                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010804:	0f be c0             	movsx  eax,al
c0010807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 65 fc ff ff       	call   c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::putx(unsigned int)>:
c001081a:	57                   	push   edi
c001081b:	b9 11 00 00 00       	mov    ecx,0x11
c0010820:	56                   	push   esi
c0010821:	be ba a1 02 c0       	mov    esi,0xc002a1ba
c0010826:	53                   	push   ebx
c0010827:	83 ec 20             	sub    esp,0x20
c001082a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010832:	fc                   	cld    
c0010833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010835:	be 08 00 00 00       	mov    esi,0x8
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	89 d8                	mov    eax,ebx
c001083e:	c1 e3 04             	shl    ebx,0x4
c0010841:	c1 e8 1c             	shr    eax,0x1c
c0010844:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010849:	50                   	push   eax
c001084a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084e:	e8 db fe ff ff       	call   c001072e <VgaText::putchar(char)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	4e                   	dec    esi
c0010857:	75 e1                	jne    c001083a <VgaText::putx(unsigned int)+0x20>
c0010859:	83 c4 20             	add    esp,0x20
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	5f                   	pop    edi
c001085f:	c3                   	ret    

c0010860 <VgaText::puts(char const*)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010868:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086b:	84 c0                	test   al,al
c001086d:	74 12                	je     c0010881 <VgaText::puts(char const*)+0x21>
c001086f:	43                   	inc    ebx
c0010870:	51                   	push   ecx
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010877:	e8 b2 fe ff ff       	call   c001072e <VgaText::putchar(char)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e7                	jmp    c0010868 <VgaText::puts(char const*)+0x8>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 42 05 00 00       	call   c0010dda <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba 20 a2 02 c0       	mov    edx,0xc002a220
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8d 50 60             	lea    edx,[eax+0x60]
c00108ff:	bb a0 da 02 c0       	mov    ebx,0xc002daa0
c0010904:	b8 08 00 00 00       	mov    eax,0x8
c0010909:	fc                   	cld    
c001090a:	89 d7                	mov    edi,edx
c001090c:	89 de                	mov    esi,ebx
c001090e:	89 c1                	mov    ecx,eax
c0010910:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	05 82 00 00 00       	add    eax,0x82
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 e4 fe fe ff       	call   c000080c <strcpy>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	6a 01                	push   0x1
c001093b:	e8 dd 08 00 00       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	89 c2                	mov    edx,eax
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094c:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010959:	89 c6                	mov    esi,eax
c001095b:	e8 35 f0 ff ff       	call   c000f995 <Phys::allocatePage()>
c0010960:	6a 05                	push   0x5
c0010962:	56                   	push   esi
c0010963:	50                   	push   eax
c0010964:	53                   	push   ebx
c0010965:	e8 70 10 00 00       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c001096a:	83 c4 10             	add    esp,0x10
c001096d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010971:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010974:	83 ec 04             	sub    esp,0x4
c0010977:	68 00 0f 00 00       	push   0xf00
c001097c:	6a 00                	push   0x0
c001097e:	50                   	push   eax
c001097f:	e8 cc fd fe ff       	call   c0000750 <memset>
c0010984:	83 c4 10             	add    esp,0x10
c0010987:	83 ec 04             	sub    esp,0x4
c001098a:	6a 00                	push   0x0
c001098c:	6a 07                	push   0x7
c001098e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010992:	e8 1b f8 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010997:	83 c4 10             	add    esp,0x10
c001099a:	83 ec 04             	sub    esp,0x4
c001099d:	6a 00                	push   0x0
c001099f:	6a 00                	push   0x0
c00109a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a5:	e8 92 f9 ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00109aa:	83 c4 10             	add    esp,0x10
c00109ad:	83 ec 0c             	sub    esp,0xc
c00109b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b4:	e8 1b fd ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00109b9:	83 c4 10             	add    esp,0x10
c00109bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c8:	05 02 01 00 00       	add    eax,0x102
c00109cd:	83 ec 04             	sub    esp,0x4
c00109d0:	68 96 00 00 00       	push   0x96
c00109d5:	6a 00                	push   0x0
c00109d7:	50                   	push   eax
c00109d8:	e8 73 fd fe ff       	call   c0000750 <memset>
c00109dd:	83 c4 10             	add    esp,0x10
c00109e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e4:	05 98 01 00 00       	add    eax,0x198
c00109e9:	83 ec 04             	sub    esp,0x4
c00109ec:	68 2c 01 00 00       	push   0x12c
c00109f1:	6a 00                	push   0x0
c00109f3:	50                   	push   eax
c00109f4:	e8 57 fd fe ff       	call   c0000750 <memset>
c00109f9:	83 c4 10             	add    esp,0x10
c00109fc:	90                   	nop
c00109fd:	5b                   	pop    ebx
c00109fe:	5e                   	pop    esi
c00109ff:	5f                   	pop    edi
c0010a00:	c3                   	ret    
c0010a01:	90                   	nop

c0010a02 <VgaText::receiveKey(unsigned char)>:
c0010a02:	55                   	push   ebp
c0010a03:	57                   	push   edi
c0010a04:	56                   	push   esi
c0010a05:	53                   	push   ebx
c0010a06:	83 ec 1c             	sub    esp,0x1c
c0010a09:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a11:	84 db                	test   bl,bl
c0010a13:	0f 84 c9 00 00 00    	je     c0010ae2 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a19:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a1f:	80 fb 08             	cmp    bl,0x8
c0010a22:	75 2c                	jne    c0010a50 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	57                   	push   edi
c0010a28:	e8 3f fd fe ff       	call   c000076c <strlen>
c0010a2d:	83 c4 10             	add    esp,0x10
c0010a30:	85 c0                	test   eax,eax
c0010a32:	74 41                	je     c0010a75 <VgaText::receiveKey(unsigned char)+0x73>
c0010a34:	50                   	push   eax
c0010a35:	50                   	push   eax
c0010a36:	6a 08                	push   0x8
c0010a38:	56                   	push   esi
c0010a39:	e8 f0 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a41:	e8 26 fd fe ff       	call   c000076c <strlen>
c0010a46:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a4e:	eb 22                	jmp    c0010a72 <VgaText::receiveKey(unsigned char)+0x70>
c0010a50:	0f be c3             	movsx  eax,bl
c0010a53:	52                   	push   edx
c0010a54:	52                   	push   edx
c0010a55:	50                   	push   eax
c0010a56:	56                   	push   esi
c0010a57:	e8 d2 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a5c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a60:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a65:	59                   	pop    ecx
c0010a66:	5d                   	pop    ebp
c0010a67:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6b:	50                   	push   eax
c0010a6c:	57                   	push   edi
c0010a6d:	e8 da fe fe ff       	call   c000094c <strcat>
c0010a72:	83 c4 10             	add    esp,0x10
c0010a75:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7c:	75 05                	jne    c0010a83 <VgaText::receiveKey(unsigned char)+0x81>
c0010a7e:	80 fb 0a             	cmp    bl,0xa
c0010a81:	75 53                	jne    c0010ad6 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a83:	83 ec 0c             	sub    esp,0xc
c0010a86:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8c:	53                   	push   ebx
c0010a8d:	e8 da fc fe ff       	call   c000076c <strlen>
c0010a92:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a95:	89 c5                	mov    ebp,eax
c0010a97:	e8 d0 fc fe ff       	call   c000076c <strlen>
c0010a9c:	83 c4 10             	add    esp,0x10
c0010a9f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa3:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aa8:	76 10                	jbe    c0010aba <VgaText::receiveKey(unsigned char)+0xb8>
c0010aaa:	83 ec 0c             	sub    esp,0xc
c0010aad:	68 cb a1 02 c0       	push   0xc002a1cb
c0010ab2:	e8 aa 93 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	50                   	push   eax
c0010abb:	50                   	push   eax
c0010abc:	57                   	push   edi
c0010abd:	53                   	push   ebx
c0010abe:	e8 89 fe fe ff       	call   c000094c <strcat>
c0010ac3:	83 c4 0c             	add    esp,0xc
c0010ac6:	68 96 00 00 00       	push   0x96
c0010acb:	6a 00                	push   0x0
c0010acd:	57                   	push   edi
c0010ace:	e8 7d fc fe ff       	call   c0000750 <memset>
c0010ad3:	83 c4 10             	add    esp,0x10
c0010ad6:	83 ec 0c             	sub    esp,0xc
c0010ad9:	56                   	push   esi
c0010ada:	e8 6f fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010adf:	83 c4 10             	add    esp,0x10
c0010ae2:	83 c4 1c             	add    esp,0x1c
c0010ae5:	5b                   	pop    ebx
c0010ae6:	5e                   	pop    esi
c0010ae7:	5f                   	pop    edi
c0010ae8:	5d                   	pop    ebp
c0010ae9:	c3                   	ret    

c0010aea <VgaText::write(unsigned long long, void*, int*)>:
c0010aea:	55                   	push   ebp
c0010aeb:	57                   	push   edi
c0010aec:	56                   	push   esi
c0010aed:	53                   	push   ebx
c0010aee:	83 ec 0c             	sub    esp,0xc
c0010af1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010af9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010afd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b04:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b07:	39 eb                	cmp    ebx,ebp
c0010b09:	74 13                	je     c0010b1e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0b:	43                   	inc    ebx
c0010b0c:	50                   	push   eax
c0010b0d:	50                   	push   eax
c0010b0e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b12:	50                   	push   eax
c0010b13:	56                   	push   esi
c0010b14:	e8 15 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010b19:	83 c4 10             	add    esp,0x10
c0010b1c:	eb e9                	jmp    c0010b07 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b1e:	83 ec 0c             	sub    esp,0xc
c0010b21:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b28:	56                   	push   esi
c0010b29:	e8 20 fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010b2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b32:	89 38                	mov    DWORD PTR [eax],edi
c0010b34:	83 c4 1c             	add    esp,0x1c
c0010b37:	31 c0                	xor    eax,eax
c0010b39:	5b                   	pop    ebx
c0010b3a:	5e                   	pop    esi
c0010b3b:	5f                   	pop    edi
c0010b3c:	5d                   	pop    ebp
c0010b3d:	c3                   	ret    

c0010b3e <newTerminal(char*)>:
c0010b3e:	83 ec 28             	sub    esp,0x28
c0010b41:	68 c4 02 00 00       	push   0x2c4
c0010b46:	e8 4e ea ff ff       	call   c000f599 <malloc>
c0010b4b:	5a                   	pop    edx
c0010b4c:	59                   	pop    ecx
c0010b4d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b51:	50                   	push   eax
c0010b52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b56:	e8 2b fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b5f:	83 c4 2c             	add    esp,0x2c
c0010b62:	c3                   	ret    
c0010b63:	90                   	nop

c0010b64 <TSS::TSS()>:
c0010b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b6f:	90                   	nop
c0010b70:	c3                   	ret    
c0010b71:	90                   	nop

c0010b72 <TSS::setESP(unsigned long)>:
c0010b72:	55                   	push   ebp
c0010b73:	89 e5                	mov    ebp,esp
c0010b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b81:	90                   	nop
c0010b82:	5d                   	pop    ebp
c0010b83:	c3                   	ret    

c0010b84 <TSS::flush()>:
c0010b84:	55                   	push   ebp
c0010b85:	89 e5                	mov    ebp,esp
c0010b87:	83 ec 10             	sub    esp,0x10
c0010b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b8f:	83 c8 03             	or     eax,0x3
c0010b92:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b96:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9a:	66 89 d0             	mov    ax,dx
c0010b9d:	0f 00 d8             	ltr    ax
c0010ba0:	90                   	nop
c0010ba1:	c9                   	leave  
c0010ba2:	c3                   	ret    
c0010ba3:	90                   	nop

c0010ba4 <TSS::setup(unsigned long, unsigned long)>:
c0010ba4:	55                   	push   ebp
c0010ba5:	89 e5                	mov    ebp,esp
c0010ba7:	83 ec 18             	sub    esp,0x18
c0010baa:	83 ec 0c             	sub    esp,0xc
c0010bad:	6a 68                	push   0x68
c0010baf:	e8 e5 e9 ff ff       	call   c000f599 <malloc>
c0010bb4:	83 c4 10             	add    esp,0x10
c0010bb7:	89 c2                	mov    edx,eax
c0010bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc5:	83 ec 04             	sub    esp,0x4
c0010bc8:	6a 68                	push   0x68
c0010bca:	6a 00                	push   0x0
c0010bcc:	50                   	push   eax
c0010bcd:	e8 7e fb fe ff       	call   c0000750 <memset>
c0010bd2:	83 c4 10             	add    esp,0x10
c0010bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bff:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c17:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c23:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c47:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c53:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c5f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6c:	0f 20 da             	mov    edx,cr3
c0010c6f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c72:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c75:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c7e:	83 ec 08             	sub    esp,0x8
c0010c81:	50                   	push   eax
c0010c82:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c85:	50                   	push   eax
c0010c86:	e8 07 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8b:	83 c4 10             	add    esp,0x10
c0010c8e:	83 ec 08             	sub    esp,0x8
c0010c91:	6a 68                	push   0x68
c0010c93:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c96:	50                   	push   eax
c0010c97:	e8 12 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca6:	83 e0 0f             	and    eax,0xf
c0010ca9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cac:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010caf:	83 c8 40             	or     eax,0x40
c0010cb2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb5:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0010cba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc0:	05 78 01 00 00       	add    eax,0x178
c0010cc5:	83 ec 04             	sub    esp,0x4
c0010cc8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cce:	50                   	push   eax
c0010ccf:	e8 0e e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd4:	83 c4 10             	add    esp,0x10
c0010cd7:	89 c2                	mov    edx,eax
c0010cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdc:	89 10                	mov    DWORD PTR [eax],edx
c0010cde:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0010ce3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ce9:	05 78 01 00 00       	add    eax,0x178
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	50                   	push   eax
c0010cf2:	e8 15 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf7:	83 c4 10             	add    esp,0x10
c0010cfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cff:	c9                   	leave  
c0010d00:	c3                   	ret    
c0010d01:	90                   	nop

c0010d02 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d12:	75 08                	jne    c0010d1c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d14:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1a:	eb 38                	jmp    c0010d54 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d21:	75 17                	jne    c0010d3a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d31:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d37:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3a:	89 c1                	mov    ecx,eax
c0010d3c:	83 e1 fd             	and    ecx,0xfffffffd
c0010d3f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d45:	74 cd                	je     c0010d14 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d47:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4c:	83 e0 ef             	and    eax,0xffffffef
c0010d4f:	83 f8 08             	cmp    eax,0x8
c0010d52:	76 c0                	jbe    c0010d14 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d54:	31 c0                	xor    eax,eax
c0010d56:	c3                   	ret    
c0010d57:	90                   	nop

c0010d58 <ReservedFilename::isAtty()>:
c0010d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d5f:	31 c0                	xor    eax,eax
c0010d61:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d67:	74 09                	je     c0010d72 <ReservedFilename::isAtty()+0x1a>
c0010d69:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d6f:	0f 94 c0             	sete   al
c0010d72:	c3                   	ret    
c0010d73:	90                   	nop

c0010d74 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d83:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d88:	75 08                	jne    c0010d92 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d90:	eb 3d                	jmp    c0010dcf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d92:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d97:	75 17                	jne    c0010db0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010da9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dad:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db5:	75 04                	jne    c0010dbb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db7:	89 0a                	mov    DWORD PTR [edx],ecx
c0010db9:	eb 14                	jmp    c0010dcf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc0:	74 c8                	je     c0010d8a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc7:	83 e0 ef             	and    eax,0xffffffef
c0010dca:	83 f8 08             	cmp    eax,0x8
c0010dcd:	76 bb                	jbe    c0010d8a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dcf:	31 c0                	xor    eax,eax
c0010dd1:	c3                   	ret    

c0010dd2 <UnixFile::getFileDescriptor()>:
c0010dd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dd9:	c3                   	ret    

c0010dda <UnixFile::UnixFile(int)>:
c0010dda:	53                   	push   ebx
c0010ddb:	83 ec 28             	sub    esp,0x28
c0010dde:	ba e8 a2 02 c0       	mov    edx,0xc002a2e8
c0010de3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de7:	89 10                	mov    DWORD PTR [eax],edx
c0010de9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df1:	0f 8f 8c 01 00 00    	jg     c0010f83 <UnixFile::UnixFile(int)+0x1a9>
c0010df7:	a1 a0 c9 02 c0       	mov    eax,ds:0xc002c9a0
c0010dfc:	8d 50 01             	lea    edx,[eax+0x1]
c0010dff:	89 15 a0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a0,edx
c0010e05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0c:	83 ec 08             	sub    esp,0x8
c0010e0f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e13:	68 58 db 02 c0       	push   0xc002db58
c0010e18:	e8 89 76 01 00       	call   c00284a6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1d:	83 c4 10             	add    esp,0x10
c0010e20:	a0 54 db 02 c0       	mov    al,ds:0xc002db54
c0010e25:	83 f0 01             	xor    eax,0x1
c0010e28:	84 c0                	test   al,al
c0010e2a:	0f 84 54 01 00 00    	je     c0010f84 <UnixFile::UnixFile(int)+0x1aa>
c0010e30:	c6 05 54 db 02 c0 01 	mov    BYTE PTR ds:0xc002db54,0x1
c0010e37:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e3f:	83 ec 0c             	sub    esp,0xc
c0010e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e46:	e8 4e e7 ff ff       	call   c000f599 <malloc>
c0010e4b:	83 c4 10             	add    esp,0x10
c0010e4e:	89 c3                	mov    ebx,eax
c0010e50:	83 ec 08             	sub    esp,0x8
c0010e53:	68 03 ff ff 0f       	push   0xfffff03
c0010e58:	53                   	push   ebx
c0010e59:	e8 2c 01 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010e5e:	83 c4 10             	add    esp,0x10
c0010e61:	89 1d 4c db 02 c0    	mov    DWORD PTR ds:0xc002db4c,ebx
c0010e67:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e6f:	83 ec 0c             	sub    esp,0xc
c0010e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e76:	e8 1e e7 ff ff       	call   c000f599 <malloc>
c0010e7b:	83 c4 10             	add    esp,0x10
c0010e7e:	89 c3                	mov    ebx,eax
c0010e80:	83 ec 08             	sub    esp,0x8
c0010e83:	68 01 ff ff 0f       	push   0xfffff01
c0010e88:	53                   	push   ebx
c0010e89:	e8 fc 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	89 1d 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,ebx
c0010e97:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea6:	e8 ee e6 ff ff       	call   c000f599 <malloc>
c0010eab:	83 c4 10             	add    esp,0x10
c0010eae:	89 c3                	mov    ebx,eax
c0010eb0:	83 ec 08             	sub    esp,0x8
c0010eb3:	68 00 ff ff 0f       	push   0xfffff00
c0010eb8:	53                   	push   ebx
c0010eb9:	e8 cc 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	89 1d 44 db 02 c0    	mov    DWORD PTR ds:0xc002db44,ebx
c0010ec7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ecf:	83 ec 0c             	sub    esp,0xc
c0010ed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed6:	e8 be e6 ff ff       	call   c000f599 <malloc>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	89 c3                	mov    ebx,eax
c0010ee0:	83 ec 08             	sub    esp,0x8
c0010ee3:	68 02 ff ff 0f       	push   0xfffff02
c0010ee8:	53                   	push   ebx
c0010ee9:	e8 9c 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	89 1d 48 db 02 c0    	mov    DWORD PTR ds:0xc002db48,ebx
c0010ef7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010eff:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f04:	7f 7e                	jg     c0010f84 <UnixFile::UnixFile(int)+0x1aa>
c0010f06:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f15:	e8 7f e6 ff ff       	call   c000f599 <malloc>
c0010f1a:	83 c4 10             	add    esp,0x10
c0010f1d:	89 c3                	mov    ebx,eax
c0010f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f23:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f28:	83 ec 08             	sub    esp,0x8
c0010f2b:	50                   	push   eax
c0010f2c:	53                   	push   ebx
c0010f2d:	e8 58 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010f32:	83 c4 10             	add    esp,0x10
c0010f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f39:	89 1c 85 20 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24e0],ebx
c0010f40:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f48:	83 ec 0c             	sub    esp,0xc
c0010f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f4f:	e8 45 e6 ff ff       	call   c000f599 <malloc>
c0010f54:	83 c4 10             	add    esp,0x10
c0010f57:	89 c3                	mov    ebx,eax
c0010f59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f62:	83 ec 08             	sub    esp,0x8
c0010f65:	50                   	push   eax
c0010f66:	53                   	push   ebx
c0010f67:	e8 1e 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f73:	89 1c 85 e0 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2520],ebx
c0010f7a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f7e:	e9 7c ff ff ff       	jmp    c0010eff <UnixFile::UnixFile(int)+0x125>
c0010f83:	90                   	nop
c0010f84:	83 c4 28             	add    esp,0x28
c0010f87:	5b                   	pop    ebx
c0010f88:	c3                   	ret    
c0010f89:	90                   	nop

c0010f8a <ReservedFilename::ReservedFilename(int)>:
c0010f8a:	83 ec 0c             	sub    esp,0xc
c0010f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f91:	83 ec 08             	sub    esp,0x8
c0010f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f98:	50                   	push   eax
c0010f99:	e8 3c fe ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c0010f9e:	83 c4 10             	add    esp,0x10
c0010fa1:	ba 04 a3 02 c0       	mov    edx,0xc002a304
c0010fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010faa:	89 10                	mov    DWORD PTR [eax],edx
c0010fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb7:	90                   	nop
c0010fb8:	83 c4 0c             	add    esp,0xc
c0010fbb:	c3                   	ret    

c0010fbc <UnixFile::~UnixFile()>:
c0010fbc:	83 ec 1c             	sub    esp,0x1c
c0010fbf:	ba e8 a2 02 c0       	mov    edx,0xc002a2e8
c0010fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fc8:	89 10                	mov    DWORD PTR [eax],edx
c0010fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd6:	7f 73                	jg     c001104b <UnixFile::~UnixFile()+0x8f>
c0010fd8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe0:	83 ec 0c             	sub    esp,0xc
c0010fe3:	68 58 db 02 c0       	push   0xc002db58
c0010fe8:	e8 8d 75 01 00       	call   c002857a <LinkedList<UnixFile>::getFirstElement()>
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff4:	83 ec 0c             	sub    esp,0xc
c0010ff7:	68 58 db 02 c0       	push   0xc002db58
c0010ffc:	e8 81 75 01 00       	call   c0028582 <LinkedList<UnixFile>::removeFirst()>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011008:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100c:	74 40                	je     c001104e <UnixFile::~UnixFile()+0x92>
c001100e:	83 ec 08             	sub    esp,0x8
c0011011:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011015:	68 58 db 02 c0       	push   0xc002db58
c001101a:	e8 87 74 01 00       	call   c00284a6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011026:	8d 50 01             	lea    edx,[eax+0x1]
c0011029:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011032:	0f 94 c0             	sete   al
c0011035:	84 c0                	test   al,al
c0011037:	74 a7                	je     c0010fe0 <UnixFile::~UnixFile()+0x24>
c0011039:	83 ec 0c             	sub    esp,0xc
c001103c:	68 c0 a2 02 c0       	push   0xc002a2c0
c0011041:	e8 1b 8e 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0011046:	83 c4 10             	add    esp,0x10
c0011049:	eb 95                	jmp    c0010fe0 <UnixFile::~UnixFile()+0x24>
c001104b:	90                   	nop
c001104c:	eb 01                	jmp    c001104f <UnixFile::~UnixFile()+0x93>
c001104e:	90                   	nop
c001104f:	90                   	nop
c0011050:	83 c4 1c             	add    esp,0x1c
c0011053:	c3                   	ret    

c0011054 <UnixFile::~UnixFile()>:
c0011054:	83 ec 0c             	sub    esp,0xc
c0011057:	83 ec 0c             	sub    esp,0xc
c001105a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105e:	e8 59 ff ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	83 ec 08             	sub    esp,0x8
c0011069:	6a 0c                	push   0xc
c001106b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001106f:	e8 a9 15 00 00       	call   c001261d <operator delete(void*, unsigned long)>
c0011074:	83 c4 10             	add    esp,0x10
c0011077:	83 c4 0c             	add    esp,0xc
c001107a:	c3                   	ret    
c001107b:	90                   	nop

c001107c <ReservedFilename::~ReservedFilename()>:
c001107c:	83 ec 0c             	sub    esp,0xc
c001107f:	ba 04 a3 02 c0       	mov    edx,0xc002a304
c0011084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011088:	89 10                	mov    DWORD PTR [eax],edx
c001108a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108e:	83 ec 0c             	sub    esp,0xc
c0011091:	50                   	push   eax
c0011092:	e8 25 ff ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0011097:	83 c4 10             	add    esp,0x10
c001109a:	90                   	nop
c001109b:	83 c4 0c             	add    esp,0xc
c001109e:	c3                   	ret    
c001109f:	90                   	nop

c00110a0 <ReservedFilename::~ReservedFilename()>:
c00110a0:	83 ec 0c             	sub    esp,0xc
c00110a3:	83 ec 0c             	sub    esp,0xc
c00110a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110aa:	e8 cd ff ff ff       	call   c001107c <ReservedFilename::~ReservedFilename()>
c00110af:	83 c4 10             	add    esp,0x10
c00110b2:	83 ec 08             	sub    esp,0x8
c00110b5:	6a 0c                	push   0xc
c00110b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bb:	e8 5d 15 00 00       	call   c001261d <operator delete(void*, unsigned long)>
c00110c0:	83 c4 10             	add    esp,0x10
c00110c3:	83 c4 0c             	add    esp,0xc
c00110c6:	c3                   	ret    

c00110c7 <getFromFileDescriptor(int)>:
c00110c7:	53                   	push   ebx
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110cf:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110db:	7f 2c                	jg     c0011109 <getFromFileDescriptor(int)+0x42>
c00110dd:	83 ec 0c             	sub    esp,0xc
c00110e0:	68 58 db 02 c0       	push   0xc002db58
c00110e5:	e8 90 74 01 00       	call   c002857a <LinkedList<UnixFile>::getFirstElement()>
c00110ea:	83 c4 10             	add    esp,0x10
c00110ed:	85 c0                	test   eax,eax
c00110ef:	75 04                	jne    c00110f5 <getFromFileDescriptor(int)+0x2e>
c00110f1:	31 c0                	xor    eax,eax
c00110f3:	eb 6e                	jmp    c0011163 <getFromFileDescriptor(int)+0x9c>
c00110f5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110f8:	74 69                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c00110fa:	52                   	push   edx
c00110fb:	52                   	push   edx
c00110fc:	50                   	push   eax
c00110fd:	68 58 db 02 c0       	push   0xc002db58
c0011102:	e8 1d 75 01 00       	call   c0028624 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011107:	eb e1                	jmp    c00110ea <getFromFileDescriptor(int)+0x23>
c0011109:	a1 4c db 02 c0       	mov    eax,ds:0xc002db4c
c001110e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011114:	74 4d                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011116:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c001111b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011121:	74 40                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011123:	a1 48 db 02 c0       	mov    eax,ds:0xc002db48
c0011128:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001112e:	74 33                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011130:	a1 44 db 02 c0       	mov    eax,ds:0xc002db44
c0011135:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113b:	74 26                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c001113d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011143:	83 f8 08             	cmp    eax,0x8
c0011146:	77 09                	ja     c0011151 <getFromFileDescriptor(int)+0x8a>
c0011148:	8b 04 85 20 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24e0]
c001114f:	eb 12                	jmp    c0011163 <getFromFileDescriptor(int)+0x9c>
c0011151:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011157:	83 fb 08             	cmp    ebx,0x8
c001115a:	77 95                	ja     c00110f1 <getFromFileDescriptor(int)+0x2a>
c001115c:	8b 04 9d e0 da 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2520]
c0011163:	83 c4 08             	add    esp,0x8
c0011166:	5b                   	pop    ebx
c0011167:	c3                   	ret    

c0011168 <__static_initialization_and_destruction_0(int, int)>:
c0011168:	83 ec 0c             	sub    esp,0xc
c001116b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011170:	75 34                	jne    c00111a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011172:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117a:	75 2a                	jne    c00111a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117c:	83 ec 0c             	sub    esp,0xc
c001117f:	68 58 db 02 c0       	push   0xc002db58
c0011184:	e8 db 72 01 00       	call   c0028464 <LinkedList<UnixFile>::LinkedList()>
c0011189:	83 c4 10             	add    esp,0x10
c001118c:	83 ec 04             	sub    esp,0x4
c001118f:	68 d8 c7 02 c0       	push   0xc002c7d8
c0011194:	68 58 db 02 c0       	push   0xc002db58
c0011199:	68 62 84 02 c0       	push   0xc0028462
c001119e:	e8 f4 13 00 00       	call   c0012597 <__cxa_atexit>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	90                   	nop
c00111a7:	83 c4 0c             	add    esp,0xc
c00111aa:	c3                   	ret    

c00111ab <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ab:	83 ec 0c             	sub    esp,0xc
c00111ae:	83 ec 08             	sub    esp,0x8
c00111b1:	68 ff ff 00 00       	push   0xffff
c00111b6:	6a 01                	push   0x1
c00111b8:	e8 ab ff ff ff       	call   c0011168 <__static_initialization_and_destruction_0(int, int)>
c00111bd:	83 c4 10             	add    esp,0x10
c00111c0:	83 c4 0c             	add    esp,0xc
c00111c3:	c3                   	ret    

c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c4:	53                   	push   ebx
c00111c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d3:	89 c8                	mov    eax,ecx
c00111d5:	d1 e8                	shr    eax,1
c00111d7:	03 05 a8 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9a8
c00111dd:	83 e1 01             	and    ecx,0x1
c00111e0:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e2:	75 09                	jne    c00111ed <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e4:	83 e2 f0             	and    edx,0xfffffff0
c00111e7:	09 da                	or     edx,ebx
c00111e9:	88 10                	mov    BYTE PTR [eax],dl
c00111eb:	5b                   	pop    ebx
c00111ec:	c3                   	ret    
c00111ed:	c1 e3 04             	shl    ebx,0x4
c00111f0:	83 e2 0f             	and    edx,0xf
c00111f3:	09 da                	or     edx,ebx
c00111f5:	88 10                	mov    BYTE PTR [eax],dl
c00111f7:	5b                   	pop    ebx
c00111f8:	c3                   	ret    

c00111f9 <Virt::getPageState(unsigned long)>:
c00111f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111fd:	8b 0d a8 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c9a8
c0011203:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011209:	89 d0                	mov    eax,edx
c001120b:	d1 e8                	shr    eax,1
c001120d:	83 e2 01             	and    edx,0x1
c0011210:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011213:	75 04                	jne    c0011219 <Virt::getPageState(unsigned long)+0x20>
c0011215:	83 e0 0f             	and    eax,0xf
c0011218:	c3                   	ret    
c0011219:	c0 e8 04             	shr    al,0x4
c001121c:	c3                   	ret    

c001121d <Virt::allocateKernelVirtualPages(int)>:
c001121d:	55                   	push   ebp
c001121e:	31 ed                	xor    ebp,ebp
c0011220:	57                   	push   edi
c0011221:	56                   	push   esi
c0011222:	53                   	push   ebx
c0011223:	31 db                	xor    ebx,ebx
c0011225:	83 ec 1c             	sub    esp,0x1c
c0011228:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122c:	8b 3d a4 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c9a4
c0011232:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011237:	57                   	push   edi
c0011238:	e8 bc ff ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c001123d:	5a                   	pop    edx
c001123e:	84 c0                	test   al,al
c0011240:	75 3a                	jne    c001127c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011242:	85 db                	test   ebx,ebx
c0011244:	75 02                	jne    c0011248 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011246:	89 fd                	mov    ebp,edi
c0011248:	43                   	inc    ebx
c0011249:	39 f3                	cmp    ebx,esi
c001124b:	74 5a                	je     c00112a7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124d:	47                   	inc    edi
c001124e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011254:	76 31                	jbe    c0011287 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011256:	c7 05 a4 c9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c9a4,0xc8000
c0011260:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011265:	75 28                	jne    c001128f <Virt::allocateKernelVirtualPages(int)+0x72>
c0011267:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011271:	57                   	push   edi
c0011272:	e8 82 ff ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c0011277:	5a                   	pop    edx
c0011278:	84 c0                	test   al,al
c001127a:	74 c6                	je     c0011242 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127c:	31 db                	xor    ebx,ebx
c001127e:	47                   	inc    edi
c001127f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011285:	77 cf                	ja     c0011256 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011287:	89 3d a4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a4,edi
c001128d:	eb a8                	jmp    c0011237 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001128f:	83 ec 0c             	sub    esp,0xc
c0011292:	68 18 a3 02 c0       	push   0xc002a318
c0011297:	e8 c5 8b 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c001129c:	8b 3d a4 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c9a4
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	eb 90                	jmp    c0011237 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a7:	89 2d a4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a4,ebp
c00112ad:	4b                   	dec    ebx
c00112ae:	74 5f                	je     c001130f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b0:	85 f6                	test   esi,esi
c00112b2:	74 3d                	je     c00112f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b4:	89 e8                	mov    eax,ebp
c00112b6:	31 db                	xor    ebx,ebx
c00112b8:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bb:	eb 14                	jmp    c00112d1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bd:	6a 01                	push   0x1
c00112bf:	43                   	inc    ebx
c00112c0:	50                   	push   eax
c00112c1:	e8 fe fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c6:	58                   	pop    eax
c00112c7:	39 f3                	cmp    ebx,esi
c00112c9:	5a                   	pop    edx
c00112ca:	74 25                	je     c00112f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112cc:	a1 a4 c9 02 c0       	mov    eax,ds:0xc002c9a4
c00112d1:	8d 50 01             	lea    edx,[eax+0x1]
c00112d4:	85 db                	test   ebx,ebx
c00112d6:	89 15 a4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a4,edx
c00112dc:	74 20                	je     c00112fe <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112de:	39 df                	cmp    edi,ebx
c00112e0:	75 db                	jne    c00112bd <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e2:	6a 03                	push   0x3
c00112e4:	43                   	inc    ebx
c00112e5:	50                   	push   eax
c00112e6:	e8 d9 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112eb:	59                   	pop    ecx
c00112ec:	39 f3                	cmp    ebx,esi
c00112ee:	58                   	pop    eax
c00112ef:	75 db                	jne    c00112cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f1:	83 c4 1c             	add    esp,0x1c
c00112f4:	89 e8                	mov    eax,ebp
c00112f6:	5b                   	pop    ebx
c00112f7:	c1 e0 0c             	shl    eax,0xc
c00112fa:	5e                   	pop    esi
c00112fb:	5f                   	pop    edi
c00112fc:	5d                   	pop    ebp
c00112fd:	c3                   	ret    
c00112fe:	6a 02                	push   0x2
c0011300:	bb 01 00 00 00       	mov    ebx,0x1
c0011305:	50                   	push   eax
c0011306:	e8 b9 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130b:	58                   	pop    eax
c001130c:	5a                   	pop    edx
c001130d:	eb bd                	jmp    c00112cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c001130f:	6a 04                	push   0x4
c0011311:	8d 45 01             	lea    eax,[ebp+0x1]
c0011314:	55                   	push   ebp
c0011315:	a3 a4 c9 02 c0       	mov    ds:0xc002c9a4,eax
c001131a:	e8 a5 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001131f:	59                   	pop    ecx
c0011320:	89 e8                	mov    eax,ebp
c0011322:	5b                   	pop    ebx
c0011323:	c1 e0 0c             	shl    eax,0xc
c0011326:	83 c4 1c             	add    esp,0x1c
c0011329:	5b                   	pop    ebx
c001132a:	5e                   	pop    esi
c001132b:	5f                   	pop    edi
c001132c:	5d                   	pop    ebp
c001132d:	c3                   	ret    

c001132e <Virt::freeSwapfilePage(unsigned long)>:
c001132e:	53                   	push   ebx
c001132f:	8b 15 6c db 02 c0    	mov    edx,DWORD PTR ds:0xc002db6c
c0011335:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011339:	b8 01 00 00 00       	mov    eax,0x1
c001133e:	89 cb                	mov    ebx,ecx
c0011340:	d3 e0                	shl    eax,cl
c0011342:	c1 eb 05             	shr    ebx,0x5
c0011345:	f7 d0                	not    eax
c0011347:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134a:	5b                   	pop    ebx
c001134b:	c3                   	ret    

c001134c <Virt::swapIDToSector(unsigned long)>:
c001134c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011350:	0f af 05 ac c9 02 c0 	imul   eax,DWORD PTR ds:0xc002c9ac
c0011357:	03 05 b4 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9b4
c001135d:	c3                   	ret    

c001135e <Virt::allocateSwapfilePage()>:
c001135e:	55                   	push   ebp
c001135f:	31 d2                	xor    edx,edx
c0011361:	57                   	push   edi
c0011362:	56                   	push   esi
c0011363:	53                   	push   ebx
c0011364:	83 ec 0c             	sub    esp,0xc
c0011367:	8b 0d ac c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c9ac
c001136d:	a1 b0 c9 02 c0       	mov    eax,ds:0xc002c9b0
c0011372:	f7 f1                	div    ecx
c0011374:	39 0d b0 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9b0,ecx
c001137a:	72 2d                	jb     c00113a9 <Virt::allocateSwapfilePage()+0x4b>
c001137c:	8b 35 6c db 02 c0    	mov    esi,DWORD PTR ds:0xc002db6c
c0011382:	8b 16                	mov    edx,DWORD PTR [esi]
c0011384:	f6 c2 01             	test   dl,0x1
c0011387:	74 3c                	je     c00113c5 <Virt::allocateSwapfilePage()+0x67>
c0011389:	31 c9                	xor    ecx,ecx
c001138b:	bf 01 00 00 00       	mov    edi,0x1
c0011390:	eb 12                	jmp    c00113a4 <Virt::allocateSwapfilePage()+0x46>
c0011392:	89 fd                	mov    ebp,edi
c0011394:	89 ca                	mov    edx,ecx
c0011396:	d3 e5                	shl    ebp,cl
c0011398:	c1 ea 05             	shr    edx,0x5
c001139b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001139e:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a0:	85 ea                	test   edx,ebp
c00113a2:	74 2a                	je     c00113ce <Virt::allocateSwapfilePage()+0x70>
c00113a4:	41                   	inc    ecx
c00113a5:	39 c8                	cmp    eax,ecx
c00113a7:	77 e9                	ja     c0011392 <Virt::allocateSwapfilePage()+0x34>
c00113a9:	83 ec 0c             	sub    esp,0xc
c00113ac:	68 f8 a4 02 c0       	push   0xc002a4f8
c00113b1:	e8 ab 8a 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	31 c9                	xor    ecx,ecx
c00113bb:	83 c4 0c             	add    esp,0xc
c00113be:	89 c8                	mov    eax,ecx
c00113c0:	5b                   	pop    ebx
c00113c1:	5e                   	pop    esi
c00113c2:	5f                   	pop    edi
c00113c3:	5d                   	pop    ebp
c00113c4:	c3                   	ret    
c00113c5:	89 f3                	mov    ebx,esi
c00113c7:	bd 01 00 00 00       	mov    ebp,0x1
c00113cc:	31 c9                	xor    ecx,ecx
c00113ce:	09 ea                	or     edx,ebp
c00113d0:	89 c8                	mov    eax,ecx
c00113d2:	89 13                	mov    DWORD PTR [ebx],edx
c00113d4:	83 c4 0c             	add    esp,0xc
c00113d7:	5b                   	pop    ebx
c00113d8:	5e                   	pop    esi
c00113d9:	5f                   	pop    edi
c00113da:	5d                   	pop    ebp
c00113db:	c3                   	ret    

c00113dc <Virt::virtualMemorySetup()>:
c00113dc:	53                   	push   ebx
c00113dd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e2:	6a 0f                	push   0xf
c00113e4:	53                   	push   ebx
c00113e5:	43                   	inc    ebx
c00113e6:	e8 d9 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113eb:	58                   	pop    eax
c00113ec:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f2:	5a                   	pop    edx
c00113f3:	75 ed                	jne    c00113e2 <Virt::virtualMemorySetup()+0x6>
c00113f5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fa:	6a 00                	push   0x0
c00113fc:	53                   	push   ebx
c00113fd:	43                   	inc    ebx
c00113fe:	e8 c1 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011403:	59                   	pop    ecx
c0011404:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140a:	58                   	pop    eax
c001140b:	75 ed                	jne    c00113fa <Virt::virtualMemorySetup()+0x1e>
c001140d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011412:	6a 0f                	push   0xf
c0011414:	53                   	push   ebx
c0011415:	43                   	inc    ebx
c0011416:	e8 a9 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141b:	58                   	pop    eax
c001141c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011422:	5a                   	pop    edx
c0011423:	75 ed                	jne    c0011412 <Virt::virtualMemorySetup()+0x36>
c0011425:	5b                   	pop    ebx
c0011426:	c3                   	ret    

c0011427 <Virt::setupPageSwapping(int)>:
c0011427:	57                   	push   edi
c0011428:	56                   	push   esi
c0011429:	53                   	push   ebx
c001142a:	83 ec 1c             	sub    esp,0x1c
c001142d:	68 14 01 00 00       	push   0x114
c0011432:	e8 62 e1 ff ff       	call   c000f599 <malloc>
c0011437:	83 c4 0c             	add    esp,0xc
c001143a:	89 c6                	mov    esi,eax
c001143c:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c0011442:	68 0f a5 02 c0       	push   0xc002a50f
c0011447:	50                   	push   eax
c0011448:	e8 07 18 00 00       	call   c0012c54 <File::File(char const*, Process*)>
c001144d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011450:	e8 db 19 00 00       	call   c0012e30 <File::unlink()>
c0011455:	58                   	pop    eax
c0011456:	5a                   	pop    edx
c0011457:	6a 12                	push   0x12
c0011459:	56                   	push   esi
c001145a:	e8 59 18 00 00       	call   c0012cb8 <File::open(FileOpenMode)>
c001145f:	83 c4 10             	add    esp,0x10
c0011462:	85 c0                	test   eax,eax
c0011464:	0f 85 2f 01 00 00    	jne    c0011599 <Virt::setupPageSwapping(int)+0x172>
c001146a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001146e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011476:	c1 e3 08             	shl    ebx,0x8
c0011479:	83 ec 0c             	sub    esp,0xc
c001147c:	68 00 00 01 00       	push   0x10000
c0011481:	e8 13 e1 ff ff       	call   c000f599 <malloc>
c0011486:	83 c4 0c             	add    esp,0xc
c0011489:	89 c7                	mov    edi,eax
c001148b:	68 00 00 01 00       	push   0x10000
c0011490:	68 ee 00 00 00       	push   0xee
c0011495:	50                   	push   eax
c0011496:	e8 b5 f2 fe ff       	call   c0000750 <memset>
c001149b:	83 c4 10             	add    esp,0x10
c001149e:	85 db                	test   ebx,ebx
c00114a0:	79 03                	jns    c00114a5 <Virt::setupPageSwapping(int)+0x7e>
c00114a2:	83 c3 0f             	add    ebx,0xf
c00114a5:	c1 fb 04             	sar    ebx,0x4
c00114a8:	4b                   	dec    ebx
c00114a9:	83 fb ff             	cmp    ebx,0xffffffff
c00114ac:	74 41                	je     c00114ef <Virt::setupPageSwapping(int)+0xc8>
c00114ae:	83 ec 0c             	sub    esp,0xc
c00114b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114b7:	52                   	push   edx
c00114b8:	57                   	push   edi
c00114b9:	6a 00                	push   0x0
c00114bb:	68 00 00 01 00       	push   0x10000
c00114c0:	56                   	push   esi
c00114c1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114c4:	83 c4 20             	add    esp,0x20
c00114c7:	85 c0                	test   eax,eax
c00114c9:	0f 85 b5 00 00 00    	jne    c0011584 <Virt::setupPageSwapping(int)+0x15d>
c00114cf:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114d7:	74 cf                	je     c00114a8 <Virt::setupPageSwapping(int)+0x81>
c00114d9:	83 ec 0c             	sub    esp,0xc
c00114dc:	4b                   	dec    ebx
c00114dd:	68 41 a5 02 c0       	push   0xc002a541
c00114e2:	e8 7a 89 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c00114e7:	83 c4 10             	add    esp,0x10
c00114ea:	83 fb ff             	cmp    ebx,0xffffffff
c00114ed:	75 bf                	jne    c00114ae <Virt::setupPageSwapping(int)+0x87>
c00114ef:	83 ec 0c             	sub    esp,0xc
c00114f2:	56                   	push   esi
c00114f3:	e8 1e 18 00 00       	call   c0012d16 <File::close()>
c00114f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114fb:	e8 b9 e0 ff ff       	call   c000f5b9 <rfree>
c0011500:	83 c4 10             	add    esp,0x10
c0011503:	85 f6                	test   esi,esi
c0011505:	74 0c                	je     c0011513 <Virt::setupPageSwapping(int)+0xec>
c0011507:	83 ec 0c             	sub    esp,0xc
c001150a:	8b 06                	mov    eax,DWORD PTR [esi]
c001150c:	56                   	push   esi
c001150d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	83 ec 08             	sub    esp,0x8
c0011516:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001151b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011521:	8b 10                	mov    edx,DWORD PTR [eax]
c0011523:	68 0f a5 02 c0       	push   0xc002a50f
c0011528:	50                   	push   eax
c0011529:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001152c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011530:	c6 05 b8 c9 02 c0 43 	mov    BYTE PTR ds:0xc002c9b8,0x43
c0011537:	c1 e2 0b             	shl    edx,0xb
c001153a:	a3 b4 c9 02 c0       	mov    ds:0xc002c9b4,eax
c001153f:	89 15 b0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9b0,edx
c0011545:	c7 05 ac c9 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c9ac,0x8
c001154f:	c1 ea 08             	shr    edx,0x8
c0011552:	89 14 24             	mov    DWORD PTR [esp],edx
c0011555:	e8 3f e0 ff ff       	call   c000f599 <malloc>
c001155a:	83 c4 0c             	add    esp,0xc
c001155d:	89 c1                	mov    ecx,eax
c001155f:	a3 6c db 02 c0       	mov    ds:0xc002db6c,eax
c0011564:	31 d2                	xor    edx,edx
c0011566:	a1 b0 c9 02 c0       	mov    eax,ds:0xc002c9b0
c001156b:	f7 35 ac c9 02 c0    	div    DWORD PTR ds:0xc002c9ac
c0011571:	c1 e8 05             	shr    eax,0x5
c0011574:	50                   	push   eax
c0011575:	6a 00                	push   0x0
c0011577:	51                   	push   ecx
c0011578:	e8 d3 f1 fe ff       	call   c0000750 <memset>
c001157d:	83 c4 20             	add    esp,0x20
c0011580:	5b                   	pop    ebx
c0011581:	5e                   	pop    esi
c0011582:	5f                   	pop    edi
c0011583:	c3                   	ret    
c0011584:	83 ec 0c             	sub    esp,0xc
c0011587:	68 41 a5 02 c0       	push   0xc002a541
c001158c:	e8 d0 88 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	e9 36 ff ff ff       	jmp    c00114cf <Virt::setupPageSwapping(int)+0xa8>
c0011599:	83 ec 0c             	sub    esp,0xc
c001159c:	68 26 a5 02 c0       	push   0xc002a526
c00115a1:	e8 bb 88 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c00115a6:	83 c4 10             	add    esp,0x10
c00115a9:	e9 bc fe ff ff       	jmp    c001146a <Virt::setupPageSwapping(int)+0x43>

c00115ae <VAS::VAS()>:
c00115ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c8:	a3 70 db 02 c0       	mov    ds:0xc002db70,eax
c00115cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d1:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d9:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115e0:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00115e7:	90                   	nop
c00115e8:	c3                   	ret    
c00115e9:	90                   	nop

c00115ea <VAS::VAS(VAS*)>:
c00115ea:	83 ec 0c             	sub    esp,0xc
c00115ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011603:	83 ec 0c             	sub    esp,0xc
c0011606:	68 38 a3 02 c0       	push   0xc002a338
c001160b:	e8 51 88 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	90                   	nop
c0011614:	83 c4 0c             	add    esp,0xc
c0011617:	c3                   	ret    

c0011618 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001161c:	89 c2                	mov    edx,eax
c001161e:	c1 e8 0a             	shr    eax,0xa
c0011621:	c1 ea 16             	shr    edx,0x16
c0011624:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011629:	19 c9                	sbb    ecx,ecx
c001162b:	c1 e2 0c             	shl    edx,0xc
c001162e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011634:	25 fc 0f 00 00       	and    eax,0xffc
c0011639:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011640:	01 d0                	add    eax,edx
c0011642:	c3                   	ret    
c0011643:	90                   	nop

c0011644 <VAS::getPageTableEntry(unsigned long)>:
c0011644:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011648:	89 ca                	mov    edx,ecx
c001164a:	c1 e9 0a             	shr    ecx,0xa
c001164d:	c1 ea 16             	shr    edx,0x16
c0011650:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011656:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001165c:	c1 e0 0c             	shl    eax,0xc
c001165f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011662:	c3                   	ret    

c0011663 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011663:	57                   	push   edi
c0011664:	56                   	push   esi
c0011665:	be 01 00 00 00       	mov    esi,0x1
c001166a:	53                   	push   ebx
c001166b:	83 ec 10             	sub    esp,0x10
c001166e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011672:	c1 eb 0c             	shr    ebx,0xc
c0011675:	eb 3f                	jmp    c00116b6 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011677:	83 ec 08             	sub    esp,0x8
c001167a:	57                   	push   edi
c001167b:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c0011681:	e8 be ff ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c0011686:	83 c4 10             	add    esp,0x10
c0011689:	8b 00                	mov    eax,DWORD PTR [eax]
c001168b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001168f:	f6 c4 04             	test   ah,0x4
c0011692:	75 5f                	jne    c00116f3 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011694:	80 fa 04             	cmp    dl,0x4
c0011697:	74 78                	je     c0011711 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011699:	80 fa 02             	cmp    dl,0x2
c001169c:	0f 84 88 00 00 00    	je     c001172a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00116a2:	80 fa 03             	cmp    dl,0x3
c00116a5:	0f 84 ad 00 00 00    	je     c0011758 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00116ab:	fe ca                	dec    dl
c00116ad:	0f 84 92 00 00 00    	je     c0011745 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b3:	43                   	inc    ebx
c00116b4:	31 f6                	xor    esi,esi
c00116b6:	53                   	push   ebx
c00116b7:	89 df                	mov    edi,ebx
c00116b9:	e8 3b fb ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c00116be:	c1 e7 0c             	shl    edi,0xc
c00116c1:	59                   	pop    ecx
c00116c2:	84 c0                	test   al,al
c00116c4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116c8:	75 ad                	jne    c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116ca:	83 ec 0c             	sub    esp,0xc
c00116cd:	68 47 a5 02 c0       	push   0xc002a547
c00116d2:	e8 8a 87 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c00116d7:	58                   	pop    eax
c00116d8:	5a                   	pop    edx
c00116d9:	57                   	push   edi
c00116da:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c00116e0:	e8 5f ff ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00116ea:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116ee:	f6 c4 04             	test   ah,0x4
c00116f1:	74 c0                	je     c00116b3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116f3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	50                   	push   eax
c0011700:	e8 1f e2 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001170c:	80 fa 04             	cmp    dl,0x4
c001170f:	75 88                	jne    c0011699 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011711:	89 f0                	mov    eax,esi
c0011713:	84 c0                	test   al,al
c0011715:	75 47                	jne    c001175e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011717:	c7 44 24 20 5c a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a35c
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	5b                   	pop    ebx
c0011723:	5e                   	pop    esi
c0011724:	5f                   	pop    edi
c0011725:	e9 37 87 00 00       	jmp    c0019e61 <Krnl::panic(char const*)>
c001172a:	89 f0                	mov    eax,esi
c001172c:	84 c0                	test   al,al
c001172e:	75 15                	jne    c0011745 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011730:	83 ec 0c             	sub    esp,0xc
c0011733:	68 63 a5 02 c0       	push   0xc002a563
c0011738:	e8 24 87 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c001173d:	83 c4 10             	add    esp,0x10
c0011740:	e9 6e ff ff ff       	jmp    c00116b3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011745:	83 ec 08             	sub    esp,0x8
c0011748:	6a 00                	push   0x0
c001174a:	53                   	push   ebx
c001174b:	e8 74 fa ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011750:	83 c4 10             	add    esp,0x10
c0011753:	e9 5b ff ff ff       	jmp    c00116b3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011758:	89 f0                	mov    eax,esi
c001175a:	84 c0                	test   al,al
c001175c:	75 15                	jne    c0011773 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001175e:	83 ec 08             	sub    esp,0x8
c0011761:	6a 00                	push   0x0
c0011763:	53                   	push   ebx
c0011764:	e8 5b fa ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	83 c4 10             	add    esp,0x10
c001176f:	5b                   	pop    ebx
c0011770:	5e                   	pop    esi
c0011771:	5f                   	pop    edi
c0011772:	c3                   	ret    
c0011773:	c7 44 24 20 7f a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a57f
c001177b:	83 c4 10             	add    esp,0x10
c001177e:	5b                   	pop    ebx
c001177f:	5e                   	pop    esi
c0011780:	5f                   	pop    edi
c0011781:	e9 db 86 00 00       	jmp    c0019e61 <Krnl::panic(char const*)>

c0011786 <VAS::freeAllocatedPages(unsigned long)>:
c0011786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001178a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001178e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011792:	74 09                	je     c001179d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011794:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011798:	e9 c6 fe ff ff       	jmp    c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c001179d:	c7 44 24 04 80 a3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a380
c00117a5:	e9 4b 0f 00 00       	jmp    c00126f5 <Dbg::kprintf(char const*, ...)>

c00117aa <VAS::virtualToPhysical(unsigned long)>:
c00117aa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117ae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117b2:	e8 8d fe ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c00117b7:	5a                   	pop    edx
c00117b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00117ba:	59                   	pop    ecx
c00117bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117c0:	c3                   	ret    
c00117c1:	90                   	nop

c00117c2 <VAS::reflagRange(unsigned long, int, int, int)>:
c00117c2:	55                   	push   ebp
c00117c3:	57                   	push   edi
c00117c4:	56                   	push   esi
c00117c5:	53                   	push   ebx
c00117c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00117ca:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00117ce:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00117d6:	85 db                	test   ebx,ebx
c00117d8:	7e 22                	jle    c00117fc <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00117da:	c1 e3 0c             	shl    ebx,0xc
c00117dd:	01 f3                	add    ebx,esi
c00117df:	56                   	push   esi
c00117e0:	81 c6 00 10 00 00    	add    esi,0x1000
c00117e6:	55                   	push   ebp
c00117e7:	e8 58 fe ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c00117ec:	5a                   	pop    edx
c00117ed:	59                   	pop    ecx
c00117ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117f0:	21 f9                	and    ecx,edi
c00117f2:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117f6:	39 f3                	cmp    ebx,esi
c00117f8:	89 08                	mov    DWORD PTR [eax],ecx
c00117fa:	75 e3                	jne    c00117df <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117fc:	5b                   	pop    ebx
c00117fd:	5e                   	pop    esi
c00117fe:	5f                   	pop    edi
c00117ff:	5d                   	pop    ebp
c0011800:	c3                   	ret    
c0011801:	90                   	nop

c0011802 <VAS::setToWriteCombining(unsigned long, int)>:
c0011802:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0011807:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001180d:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011814:	75 01                	jne    c0011817 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011816:	c3                   	ret    
c0011817:	68 80 00 00 00       	push   0x80
c001181c:	6a ff                	push   0xffffffff
c001181e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011822:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001182a:	e8 93 ff ff ff       	call   c00117c2 <VAS::reflagRange(unsigned long, int, int, int)>
c001182f:	83 c4 14             	add    esp,0x14
c0011832:	c3                   	ret    
c0011833:	90                   	nop

c0011834 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011834:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001183d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011844:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011847:	19 c0                	sbb    eax,eax
c0011849:	83 ca 03             	or     edx,0x3
c001184c:	83 e0 fc             	and    eax,0xfffffffc
c001184f:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011856:	0f 20 d8             	mov    eax,cr3
c0011859:	0f 22 d8             	mov    cr3,eax
c001185c:	c3                   	ret    
c001185d:	90                   	nop

c001185e <VAS::~VAS()>:
c001185e:	83 ec 2c             	sub    esp,0x2c
c0011861:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011869:	fa                   	cli    
c001186a:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001186f:	40                   	inc    eax
c0011870:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0011875:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187a:	8b 00                	mov    eax,DWORD PTR [eax]
c001187c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001187f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011885:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011889:	6a 01                	push   0x1
c001188b:	50                   	push   eax
c001188c:	e8 a3 ff ff ff       	call   c0011834 <VAS::mapOtherVASIn(bool, VAS*)>
c0011891:	83 c4 0c             	add    esp,0xc
c0011894:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001189c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00118a4:	0f 8f d4 00 00 00    	jg     c001197e <VAS::~VAS()+0x120>
c00118aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118ae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00118b5:	c1 e2 02             	shl    edx,0x2
c00118b8:	01 d0                	add    eax,edx
c00118ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00118bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c4:	83 e0 01             	and    eax,0x1
c00118c7:	0f 84 a8 00 00 00    	je     c0011975 <VAS::~VAS()+0x117>
c00118cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118d5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00118dd:	7f 72                	jg     c0011951 <VAS::~VAS()+0xf3>
c00118df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118e3:	c1 e0 0a             	shl    eax,0xa
c00118e6:	89 c2                	mov    edx,eax
c00118e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118ec:	01 d0                	add    eax,edx
c00118ee:	c1 e0 0c             	shl    eax,0xc
c00118f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118f5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00118fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118ff:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011905:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011909:	6a 01                	push   0x1
c001190b:	50                   	push   eax
c001190c:	e8 07 fd ff ff       	call   c0011618 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011911:	83 c4 0c             	add    esp,0xc
c0011914:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001191c:	8b 00                	mov    eax,DWORD PTR [eax]
c001191e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011926:	25 01 04 00 00       	and    eax,0x401
c001192b:	3d 01 04 00 00       	cmp    eax,0x401
c0011930:	75 19                	jne    c001194b <VAS::~VAS()+0xed>
c0011932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011936:	25 00 f0 ff ff       	and    eax,0xfffff000
c001193b:	83 ec 0c             	sub    esp,0xc
c001193e:	50                   	push   eax
c001193f:	e8 e0 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001194b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001194f:	eb 84                	jmp    c00118d5 <VAS::~VAS()+0x77>
c0011951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011955:	25 00 04 00 00       	and    eax,0x400
c001195a:	74 19                	je     c0011975 <VAS::~VAS()+0x117>
c001195c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011960:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011965:	83 ec 0c             	sub    esp,0xc
c0011968:	50                   	push   eax
c0011969:	e8 b6 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001196e:	83 c4 10             	add    esp,0x10
c0011971:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011975:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011979:	e9 1e ff ff ff       	jmp    c001189c <VAS::~VAS()+0x3e>
c001197e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011982:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011985:	83 ec 0c             	sub    esp,0xc
c0011988:	50                   	push   eax
c0011989:	e8 d5 fc ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c001198e:	83 c4 10             	add    esp,0x10
c0011991:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011995:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011998:	83 ec 0c             	sub    esp,0xc
c001199b:	50                   	push   eax
c001199c:	e8 83 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119ac:	c1 e0 02             	shl    eax,0x2
c00119af:	83 ec 08             	sub    esp,0x8
c00119b2:	50                   	push   eax
c00119b3:	68 a4 a3 02 c0       	push   0xc002a3a4
c00119b8:	e8 38 0d 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00119c5:	48                   	dec    eax
c00119c6:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c00119cb:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00119d0:	85 c0                	test   eax,eax
c00119d2:	75 01                	jne    c00119d5 <VAS::~VAS()+0x177>
c00119d4:	fb                   	sti    
c00119d5:	90                   	nop
c00119d6:	83 c4 2c             	add    esp,0x2c
c00119d9:	c3                   	ret    

c00119da <VAS::mapPage(unsigned long, unsigned long, int)>:
c00119da:	55                   	push   ebp
c00119db:	57                   	push   edi
c00119dc:	56                   	push   esi
c00119dd:	53                   	push   ebx
c00119de:	83 ec 1c             	sub    esp,0x1c
c00119e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119e9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119ef:	77 08                	ja     c00119f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119f1:	0f 20 d8             	mov    eax,cr3
c00119f4:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119f7:	75 47                	jne    c0011a40 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119fd:	09 d8                	or     eax,ebx
c00119ff:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a04:	75 57                	jne    c0011a5d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a06:	89 de                	mov    esi,ebx
c0011a08:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a0b:	c1 ee 16             	shr    esi,0x16
c0011a0e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011a15:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011a19:	74 54                	je     c0011a6f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011a1b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a1f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a25:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a29:	c1 e6 0c             	shl    esi,0xc
c0011a2c:	c1 eb 0a             	shr    ebx,0xa
c0011a2f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a35:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a38:	83 c4 1c             	add    esp,0x1c
c0011a3b:	5b                   	pop    ebx
c0011a3c:	5e                   	pop    esi
c0011a3d:	5f                   	pop    edi
c0011a3e:	5d                   	pop    ebp
c0011a3f:	c3                   	ret    
c0011a40:	83 ec 0c             	sub    esp,0xc
c0011a43:	68 c4 a3 02 c0       	push   0xc002a3c4
c0011a48:	e8 a8 0c 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a54:	09 d8                	or     eax,ebx
c0011a56:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a5b:	74 a9                	je     c0011a06 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a5d:	83 ec 0c             	sub    esp,0xc
c0011a60:	68 2c a4 02 c0       	push   0xc002a42c
c0011a65:	e8 f7 83 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0011a6a:	83 c4 10             	add    esp,0x10
c0011a6d:	eb 97                	jmp    c0011a06 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a73:	e8 1d df ff ff       	call   c000f995 <Phys::allocatePage()>
c0011a78:	83 ec 0c             	sub    esp,0xc
c0011a7b:	89 c5                	mov    ebp,eax
c0011a7d:	8b 0d 70 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db70
c0011a83:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a87:	6a 01                	push   0x1
c0011a89:	e8 8f f7 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011a8e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a95:	6a 01                	push   0x1
c0011a97:	50                   	push   eax
c0011a98:	55                   	push   ebp
c0011a99:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a9f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011aa3:	51                   	push   ecx
c0011aa4:	e8 27 02 00 00       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011aa9:	83 c4 1c             	add    esp,0x1c
c0011aac:	68 00 10 00 00       	push   0x1000
c0011ab1:	6a 00                	push   0x0
c0011ab3:	50                   	push   eax
c0011ab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ab8:	e8 93 ec fe ff       	call   c0000750 <memset>
c0011abd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ac1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ac4:	e8 9a fb ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ac9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011acd:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ad0:	83 c4 10             	add    esp,0x10
c0011ad3:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011ad6:	e9 40 ff ff ff       	jmp    c0011a1b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011adb:	90                   	nop

c0011adc <VAS::allocatePages(int, int)>:
c0011adc:	55                   	push   ebp
c0011add:	57                   	push   edi
c0011ade:	56                   	push   esi
c0011adf:	53                   	push   ebx
c0011ae0:	83 ec 1c             	sub    esp,0x1c
c0011ae3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ae7:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0011aec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011af2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011af8:	83 e0 01             	and    eax,0x1
c0011afb:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011aff:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b03:	0f 85 cc 00 00 00    	jne    c0011bd5 <VAS::allocatePages(int, int)+0xf9>
c0011b09:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b10:	85 c0                	test   eax,eax
c0011b12:	0f 84 a1 00 00 00    	je     c0011bb9 <VAS::allocatePages(int, int)+0xdd>
c0011b18:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011b1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b20:	c1 e6 0c             	shl    esi,0xc
c0011b23:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b27:	85 c0                	test   eax,eax
c0011b29:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b2c:	7e 33                	jle    c0011b61 <VAS::allocatePages(int, int)+0x85>
c0011b2e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b32:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b36:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b3c:	e8 54 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b41:	55                   	push   ebp
c0011b42:	53                   	push   ebx
c0011b43:	50                   	push   eax
c0011b44:	57                   	push   edi
c0011b45:	e8 90 fe ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b4a:	83 c4 10             	add    esp,0x10
c0011b4d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b52:	74 03                	je     c0011b57 <VAS::allocatePages(int, int)+0x7b>
c0011b54:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b57:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b5d:	39 de                	cmp    esi,ebx
c0011b5f:	75 db                	jne    c0011b3c <VAS::allocatePages(int, int)+0x60>
c0011b61:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b66:	75 12                	jne    c0011b7a <VAS::allocatePages(int, int)+0x9e>
c0011b68:	0f 20 d8             	mov    eax,cr3
c0011b6b:	0f 22 d8             	mov    cr3,eax
c0011b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b72:	83 c4 1c             	add    esp,0x1c
c0011b75:	5b                   	pop    ebx
c0011b76:	5e                   	pop    esi
c0011b77:	5f                   	pop    edi
c0011b78:	5d                   	pop    ebp
c0011b79:	c3                   	ret    
c0011b7a:	c1 ee 0a             	shr    esi,0xa
c0011b7d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b81:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b87:	c1 eb 0a             	shr    ebx,0xa
c0011b8a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b90:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b96:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b9c:	39 c3                	cmp    ebx,eax
c0011b9e:	77 ce                	ja     c0011b6e <VAS::allocatePages(int, int)+0x92>
c0011ba0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ba9:	39 d8                	cmp    eax,ebx
c0011bab:	73 f3                	jae    c0011ba0 <VAS::allocatePages(int, int)+0xc4>
c0011bad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bb1:	83 c4 1c             	add    esp,0x1c
c0011bb4:	5b                   	pop    ebx
c0011bb5:	5e                   	pop    esi
c0011bb6:	5f                   	pop    edi
c0011bb7:	5d                   	pop    ebp
c0011bb8:	c3                   	ret    
c0011bb9:	83 ec 0c             	sub    esp,0xc
c0011bbc:	68 50 a4 02 c0       	push   0xc002a450
c0011bc1:	e8 9b 82 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0011bc6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011bc9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bcd:	83 c4 10             	add    esp,0x10
c0011bd0:	e9 43 ff ff ff       	jmp    c0011b18 <VAS::allocatePages(int, int)+0x3c>
c0011bd5:	83 ec 0c             	sub    esp,0xc
c0011bd8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011bdc:	e8 3c f6 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011be1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011be5:	83 c4 10             	add    esp,0x10
c0011be8:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011bed:	0f 87 9b 00 00 00    	ja     c0011c8e <VAS::allocatePages(int, int)+0x1b2>
c0011bf3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011bf7:	85 d2                	test   edx,edx
c0011bf9:	7e 3c                	jle    c0011c37 <VAS::allocatePages(int, int)+0x15b>
c0011bfb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011bff:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c07:	c1 e5 0c             	shl    ebp,0xc
c0011c0a:	81 ce 00 04 00 00    	or     esi,0x400
c0011c10:	01 dd                	add    ebp,ebx
c0011c12:	e8 7e dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011c17:	56                   	push   esi
c0011c18:	53                   	push   ebx
c0011c19:	50                   	push   eax
c0011c1a:	57                   	push   edi
c0011c1b:	e8 ba fd ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c20:	83 c4 10             	add    esp,0x10
c0011c23:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c28:	74 03                	je     c0011c2d <VAS::allocatePages(int, int)+0x151>
c0011c2a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c2d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c33:	39 dd                	cmp    ebp,ebx
c0011c35:	75 db                	jne    c0011c12 <VAS::allocatePages(int, int)+0x136>
c0011c37:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c3c:	0f 84 26 ff ff ff    	je     c0011b68 <VAS::allocatePages(int, int)+0x8c>
c0011c42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c4a:	89 d3                	mov    ebx,edx
c0011c4c:	c1 e0 0c             	shl    eax,0xc
c0011c4f:	c1 eb 0a             	shr    ebx,0xa
c0011c52:	01 d0                	add    eax,edx
c0011c54:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c5a:	c1 e8 0a             	shr    eax,0xa
c0011c5d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c63:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c68:	2d 00 00 40 00       	sub    eax,0x400000
c0011c6d:	39 c3                	cmp    ebx,eax
c0011c6f:	0f 87 f9 fe ff ff    	ja     c0011b6e <VAS::allocatePages(int, int)+0x92>
c0011c75:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c78:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c7e:	39 d8                	cmp    eax,ebx
c0011c80:	73 f3                	jae    c0011c75 <VAS::allocatePages(int, int)+0x199>
c0011c82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c86:	83 c4 1c             	add    esp,0x1c
c0011c89:	5b                   	pop    ebx
c0011c8a:	5e                   	pop    esi
c0011c8b:	5f                   	pop    edi
c0011c8c:	5d                   	pop    ebp
c0011c8d:	c3                   	ret    
c0011c8e:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0011c93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c99:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011ca0:	0f 84 4d ff ff ff    	je     c0011bf3 <VAS::allocatePages(int, int)+0x117>
c0011ca6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011cae:	e9 40 ff ff ff       	jmp    c0011bf3 <VAS::allocatePages(int, int)+0x117>
c0011cb3:	90                   	nop

c0011cb4 <VAS::setCPUSpecific(unsigned long)>:
c0011cb4:	83 ec 0c             	sub    esp,0xc
c0011cb7:	6a 05                	push   0x5
c0011cb9:	68 00 00 40 c2       	push   0xc2400000
c0011cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc6:	e8 0f fd ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ccb:	83 c4 1c             	add    esp,0x1c
c0011cce:	c3                   	ret    
c0011ccf:	90                   	nop

c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011cd0:	55                   	push   ebp
c0011cd1:	57                   	push   edi
c0011cd2:	56                   	push   esi
c0011cd3:	53                   	push   ebx
c0011cd4:	83 ec 1c             	sub    esp,0x1c
c0011cd7:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0011cdc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ce0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ce6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011cea:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cf0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011cf4:	83 e0 01             	and    eax,0x1
c0011cf7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011cfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cff:	85 c0                	test   eax,eax
c0011d01:	7e 39                	jle    c0011d3c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d07:	89 f3                	mov    ebx,esi
c0011d09:	c1 e0 0c             	shl    eax,0xc
c0011d0c:	01 f0                	add    eax,esi
c0011d0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d12:	55                   	push   ebp
c0011d13:	53                   	push   ebx
c0011d14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d18:	29 f0                	sub    eax,esi
c0011d1a:	01 d8                	add    eax,ebx
c0011d1c:	50                   	push   eax
c0011d1d:	57                   	push   edi
c0011d1e:	e8 b7 fc ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d2b:	74 03                	je     c0011d30 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d2d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d30:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d36:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d3a:	75 d6                	jne    c0011d12 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d3c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d41:	75 10                	jne    c0011d53 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d43:	0f 20 d8             	mov    eax,cr3
c0011d46:	0f 22 d8             	mov    cr3,eax
c0011d49:	83 c4 1c             	add    esp,0x1c
c0011d4c:	89 f0                	mov    eax,esi
c0011d4e:	5b                   	pop    ebx
c0011d4f:	5e                   	pop    esi
c0011d50:	5f                   	pop    edi
c0011d51:	5d                   	pop    ebp
c0011d52:	c3                   	ret    
c0011d53:	89 f3                	mov    ebx,esi
c0011d55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d59:	c1 eb 0a             	shr    ebx,0xa
c0011d5c:	c1 e0 0c             	shl    eax,0xc
c0011d5f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d65:	01 f0                	add    eax,esi
c0011d67:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d6d:	c1 e8 0a             	shr    eax,0xa
c0011d70:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d75:	2d 00 00 40 00       	sub    eax,0x400000
c0011d7a:	39 c3                	cmp    ebx,eax
c0011d7c:	77 cb                	ja     c0011d49 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d7e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d81:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d87:	39 d8                	cmp    eax,ebx
c0011d89:	73 f3                	jae    c0011d7e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d8b:	83 c4 1c             	add    esp,0x1c
c0011d8e:	89 f0                	mov    eax,esi
c0011d90:	5b                   	pop    ebx
c0011d91:	5e                   	pop    esi
c0011d92:	5f                   	pop    edi
c0011d93:	5d                   	pop    ebp
c0011d94:	c3                   	ret    
c0011d95:	90                   	nop

c0011d96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d96:	55                   	push   ebp
c0011d97:	57                   	push   edi
c0011d98:	56                   	push   esi
c0011d99:	53                   	push   ebx
c0011d9a:	83 ec 1c             	sub    esp,0x1c
c0011d9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011da1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011da5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011da9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011dad:	a9 ff 0f 00 00       	test   eax,0xfff
c0011db2:	75 4a                	jne    c0011dfe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011db4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011db8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011dbb:	c1 eb 16             	shr    ebx,0x16
c0011dbe:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011dc5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011dc9:	74 4d                	je     c0011e18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011dcb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011dcf:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011dd3:	c1 e8 0a             	shr    eax,0xa
c0011dd6:	80 fa 01             	cmp    dl,0x1
c0011dd9:	19 d2                	sbb    edx,edx
c0011ddb:	c1 e3 0c             	shl    ebx,0xc
c0011dde:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011de2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011de8:	25 fc 0f 00 00       	and    eax,0xffc
c0011ded:	01 d8                	add    eax,ebx
c0011def:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011df6:	83 c4 1c             	add    esp,0x1c
c0011df9:	5b                   	pop    ebx
c0011dfa:	5e                   	pop    esi
c0011dfb:	5f                   	pop    edi
c0011dfc:	5d                   	pop    ebp
c0011dfd:	c3                   	ret    
c0011dfe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e02:	83 ec 0c             	sub    esp,0xc
c0011e05:	68 7c a4 02 c0       	push   0xc002a47c
c0011e0a:	e8 52 80 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0011e0f:	83 c4 10             	add    esp,0x10
c0011e12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e16:	eb 9c                	jmp    c0011db4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e1c:	e8 74 db ff ff       	call   c000f995 <Phys::allocatePage()>
c0011e21:	83 ec 0c             	sub    esp,0xc
c0011e24:	89 c5                	mov    ebp,eax
c0011e26:	8b 0d 70 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db70
c0011e2c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e30:	6a 01                	push   0x1
c0011e32:	e8 e6 f3 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011e37:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e3e:	6a 01                	push   0x1
c0011e40:	50                   	push   eax
c0011e41:	55                   	push   ebp
c0011e42:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e48:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e4c:	51                   	push   ecx
c0011e4d:	e8 7e fe ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e52:	83 c4 1c             	add    esp,0x1c
c0011e55:	68 00 10 00 00       	push   0x1000
c0011e5a:	6a 00                	push   0x0
c0011e5c:	50                   	push   eax
c0011e5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e61:	e8 ea e8 fe ff       	call   c0000750 <memset>
c0011e66:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e6a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e6d:	e8 f1 f7 ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e75:	83 c4 10             	add    esp,0x10
c0011e78:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e7f:	e9 47 ff ff ff       	jmp    c0011dcb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e84 <VAS::VAS(bool)>:
c0011e84:	53                   	push   ebx
c0011e85:	83 ec 28             	sub    esp,0x28
c0011e88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e8c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ea6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eaa:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011eae:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011eb1:	e8 df da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011eb6:	89 c2                	mov    edx,eax
c0011eb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ebc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011ebf:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c0011ec5:	83 ec 0c             	sub    esp,0xc
c0011ec8:	6a 01                	push   0x1
c0011eca:	e8 4e f3 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011ecf:	83 c4 10             	add    esp,0x10
c0011ed2:	89 c2                	mov    edx,eax
c0011ed4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011edb:	83 ec 0c             	sub    esp,0xc
c0011ede:	6a 03                	push   0x3
c0011ee0:	6a 01                	push   0x1
c0011ee2:	52                   	push   edx
c0011ee3:	50                   	push   eax
c0011ee4:	53                   	push   ebx
c0011ee5:	e8 e6 fd ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eea:	83 c4 20             	add    esp,0x20
c0011eed:	89 c2                	mov    edx,eax
c0011eef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ef6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011efe:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f06:	7f 1c                	jg     c0011f24 <VAS::VAS(bool)+0xa0>
c0011f08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f0f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f13:	c1 e2 02             	shl    edx,0x2
c0011f16:	01 d0                	add    eax,edx
c0011f18:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f1e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f22:	eb da                	jmp    c0011efe <VAS::VAS(bool)+0x7a>
c0011f24:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f2c:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f34:	7f 7a                	jg     c0011fb0 <VAS::VAS(bool)+0x12c>
c0011f36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f3a:	2d 00 02 00 00       	sub    eax,0x200
c0011f3f:	c1 e0 0c             	shl    eax,0xc
c0011f42:	83 c8 03             	or     eax,0x3
c0011f45:	89 c2                	mov    edx,eax
c0011f47:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0011f4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f52:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f58:	83 e0 10             	and    eax,0x10
c0011f5b:	84 c0                	test   al,al
c0011f5d:	74 07                	je     c0011f66 <VAS::VAS(bool)+0xe2>
c0011f5f:	b8 00 01 00 00       	mov    eax,0x100
c0011f64:	eb 05                	jmp    c0011f6b <VAS::VAS(bool)+0xe7>
c0011f66:	b8 00 00 00 00       	mov    eax,0x0
c0011f6b:	09 d0                	or     eax,edx
c0011f6d:	89 c1                	mov    ecx,eax
c0011f6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f7a:	c1 e2 02             	shl    edx,0x2
c0011f7d:	01 d0                	add    eax,edx
c0011f7f:	89 ca                	mov    edx,ecx
c0011f81:	89 10                	mov    DWORD PTR [eax],edx
c0011f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f87:	2d 40 03 00 00       	sub    eax,0x340
c0011f8c:	83 f8 7f             	cmp    eax,0x7f
c0011f8f:	77 16                	ja     c0011fa7 <VAS::VAS(bool)+0x123>
c0011f91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f9c:	c1 e2 02             	shl    edx,0x2
c0011f9f:	01 d0                	add    eax,edx
c0011fa1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fa7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011fab:	e9 7c ff ff ff       	jmp    c0011f2c <VAS::VAS(bool)+0xa8>
c0011fb0:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0011fb5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fbb:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fc1:	83 e0 10             	and    eax,0x10
c0011fc4:	84 c0                	test   al,al
c0011fc6:	74 07                	je     c0011fcf <VAS::VAS(bool)+0x14b>
c0011fc8:	b8 03 41 00 00       	mov    eax,0x4103
c0011fcd:	eb 05                	jmp    c0011fd4 <VAS::VAS(bool)+0x150>
c0011fcf:	b8 03 40 00 00       	mov    eax,0x4003
c0011fd4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fd8:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fdb:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fe1:	89 02                	mov    DWORD PTR [edx],eax
c0011fe3:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0011fe8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011ff4:	83 ec 08             	sub    esp,0x8
c0011ff7:	50                   	push   eax
c0011ff8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ffc:	e8 b3 fc ff ff       	call   c0011cb4 <VAS::setCPUSpecific(unsigned long)>
c0012001:	83 c4 10             	add    esp,0x10
c0012004:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012008:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001200b:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0012010:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012016:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001201c:	83 e0 10             	and    eax,0x10
c001201f:	84 c0                	test   al,al
c0012021:	74 07                	je     c001202a <VAS::VAS(bool)+0x1a6>
c0012023:	b8 00 01 00 00       	mov    eax,0x100
c0012028:	eb 05                	jmp    c001202f <VAS::VAS(bool)+0x1ab>
c001202a:	b8 00 00 00 00       	mov    eax,0x0
c001202f:	09 c2                	or     edx,eax
c0012031:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012035:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012038:	05 fc 0f 00 00       	add    eax,0xffc
c001203d:	83 ca 03             	or     edx,0x3
c0012040:	89 10                	mov    DWORD PTR [eax],edx
c0012042:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0012047:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001204d:	83 ec 0c             	sub    esp,0xc
c0012050:	50                   	push   eax
c0012051:	e8 d8 1d 00 00       	call   c0013e2e <Device::getName()>
c0012056:	83 c4 10             	add    esp,0x10
c0012059:	83 ec 08             	sub    esp,0x8
c001205c:	68 99 a5 02 c0       	push   0xc002a599
c0012061:	50                   	push   eax
c0012062:	e8 31 e8 fe ff       	call   c0000898 <strcmp>
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	85 c0                	test   eax,eax
c001206c:	0f 94 c0             	sete   al
c001206f:	84 c0                	test   al,al
c0012071:	0f 84 87 00 00 00    	je     c00120fe <VAS::VAS(bool)+0x27a>
c0012077:	fa                   	cli    
c0012078:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001207d:	40                   	inc    eax
c001207e:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0012083:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0012088:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001208e:	05 7c 09 00 00       	add    eax,0x97c
c0012093:	83 ec 0c             	sub    esp,0xc
c0012096:	50                   	push   eax
c0012097:	e8 82 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001209c:	83 c4 10             	add    esp,0x10
c001209f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a4:	89 c3                	mov    ebx,eax
c00120a6:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00120ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120b1:	05 7c 09 00 00       	add    eax,0x97c
c00120b6:	83 ec 0c             	sub    esp,0xc
c00120b9:	50                   	push   eax
c00120ba:	e8 5f cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120bf:	83 c4 10             	add    esp,0x10
c00120c2:	83 ec 08             	sub    esp,0x8
c00120c5:	50                   	push   eax
c00120c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120ca:	e8 75 f5 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00120d4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120d9:	6a 11                	push   0x11
c00120db:	53                   	push   ebx
c00120dc:	50                   	push   eax
c00120dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120e1:	e8 f4 f8 ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c00120e6:	83 c4 10             	add    esp,0x10
c00120e9:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00120ee:	48                   	dec    eax
c00120ef:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c00120f4:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00120f9:	85 c0                	test   eax,eax
c00120fb:	75 01                	jne    c00120fe <VAS::VAS(bool)+0x27a>
c00120fd:	fb                   	sti    
c00120fe:	90                   	nop
c00120ff:	83 c4 28             	add    esp,0x28
c0012102:	5b                   	pop    ebx
c0012103:	c3                   	ret    

c0012104 <VAS::evict(unsigned long)>:
c0012104:	55                   	push   ebp
c0012105:	57                   	push   edi
c0012106:	56                   	push   esi
c0012107:	53                   	push   ebx
c0012108:	83 ec 1c             	sub    esp,0x1c
c001210b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001210f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012117:	e8 42 f2 ff ff       	call   c001135e <Virt::allocateSwapfilePage()>
c001211c:	89 c7                	mov    edi,eax
c001211e:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c0012123:	85 c0                	test   eax,eax
c0012125:	7e 3d                	jle    c0012164 <VAS::evict(unsigned long)+0x60>
c0012127:	89 ee                	mov    esi,ebp
c0012129:	31 db                	xor    ebx,ebx
c001212b:	83 ec 0c             	sub    esp,0xc
c001212e:	57                   	push   edi
c001212f:	e8 18 f2 ff ff       	call   c001134c <Virt::swapIDToSector(unsigned long)>
c0012134:	89 34 24             	mov    DWORD PTR [esp],esi
c0012137:	01 d8                	add    eax,ebx
c0012139:	6a 01                	push   0x1
c001213b:	31 d2                	xor    edx,edx
c001213d:	43                   	inc    ebx
c001213e:	52                   	push   edx
c001213f:	81 c6 00 02 00 00    	add    esi,0x200
c0012145:	50                   	push   eax
c0012146:	0f be 05 b8 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c9b8
c001214d:	ff 34 85 fc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2104]
c0012154:	e8 5d 3f 00 00       	call   c00160b6 <LogicalDisk::write(unsigned long long, int, void*)>
c0012159:	83 c4 20             	add    esp,0x20
c001215c:	39 1d ac c9 02 c0    	cmp    DWORD PTR ds:0xc002c9ac,ebx
c0012162:	7f c7                	jg     c001212b <VAS::evict(unsigned long)+0x27>
c0012164:	83 ec 08             	sub    esp,0x8
c0012167:	c1 e7 0b             	shl    edi,0xb
c001216a:	55                   	push   ebp
c001216b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001216f:	e8 d0 f4 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c0012174:	5a                   	pop    edx
c0012175:	89 c6                	mov    esi,eax
c0012177:	59                   	pop    ecx
c0012178:	ff 30                	push   DWORD PTR [eax]
c001217a:	68 a7 a5 02 c0       	push   0xc002a5a7
c001217f:	e8 71 05 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0012184:	8b 16                	mov    edx,DWORD PTR [esi]
c0012186:	89 d3                	mov    ebx,edx
c0012188:	81 e2 fe 07 00 00    	and    edx,0x7fe
c001218e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012194:	09 d7                	or     edi,edx
c0012196:	89 3e                	mov    DWORD PTR [esi],edi
c0012198:	5e                   	pop    esi
c0012199:	58                   	pop    eax
c001219a:	57                   	push   edi
c001219b:	68 c0 a5 02 c0       	push   0xc002a5c0
c00121a0:	e8 50 05 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00121a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121a8:	ff 05 68 db 02 c0    	inc    DWORD PTR ds:0xc002db68
c00121ae:	e8 71 d7 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00121b3:	0f 20 d8             	mov    eax,cr3
c00121b6:	0f 22 d8             	mov    cr3,eax
c00121b9:	ff 35 68 db 02 c0    	push   DWORD PTR ds:0xc002db68
c00121bf:	55                   	push   ebp
c00121c0:	53                   	push   ebx
c00121c1:	68 a0 a4 02 c0       	push   0xc002a4a0
c00121c6:	e8 2a 05 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00121cb:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c00121d0:	c7 44 24 50 d9 a5 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a5d9
c00121d8:	8d 50 01             	lea    edx,[eax+0x1]
c00121db:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00121df:	89 15 64 db 02 c0    	mov    DWORD PTR ds:0xc002db64,edx
c00121e5:	83 c4 3c             	add    esp,0x3c
c00121e8:	5b                   	pop    ebx
c00121e9:	5e                   	pop    esi
c00121ea:	5f                   	pop    edi
c00121eb:	5d                   	pop    ebp
c00121ec:	e9 04 05 00 00       	jmp    c00126f5 <Dbg::kprintf(char const*, ...)>
c00121f1:	90                   	nop

c00121f2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00121f2:	55                   	push   ebp
c00121f3:	57                   	push   edi
c00121f4:	56                   	push   esi
c00121f5:	53                   	push   ebx
c00121f6:	83 ec 24             	sub    esp,0x24
c00121f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012201:	68 ea a5 02 c0       	push   0xc002a5ea
c0012206:	e8 ea 04 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001220b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001220f:	58                   	pop    eax
c0012210:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012216:	5a                   	pop    edx
c0012217:	53                   	push   ebx
c0012218:	56                   	push   esi
c0012219:	e8 26 f4 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c001221e:	59                   	pop    ecx
c001221f:	89 c5                	mov    ebp,eax
c0012221:	5f                   	pop    edi
c0012222:	ff 30                	push   DWORD PTR [eax]
c0012224:	68 fd a5 02 c0       	push   0xc002a5fd
c0012229:	e8 c7 04 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001222e:	83 c4 10             	add    esp,0x10
c0012231:	85 db                	test   ebx,ebx
c0012233:	74 1d                	je     c0012252 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0012235:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
c0012238:	31 c0                	xor    eax,eax
c001223a:	89 fa                	mov    edx,edi
c001223c:	81 e2 01 04 00 00    	and    edx,0x401
c0012242:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012248:	74 12                	je     c001225c <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c001224a:	83 c4 1c             	add    esp,0x1c
c001224d:	5b                   	pop    ebx
c001224e:	5e                   	pop    esi
c001224f:	5f                   	pop    edi
c0012250:	5d                   	pop    ebp
c0012251:	c3                   	ret    
c0012252:	83 c4 1c             	add    esp,0x1c
c0012255:	31 c0                	xor    eax,eax
c0012257:	5b                   	pop    ebx
c0012258:	5e                   	pop    esi
c0012259:	5f                   	pop    edi
c001225a:	5d                   	pop    ebp
c001225b:	c3                   	ret    
c001225c:	83 ec 08             	sub    esp,0x8
c001225f:	c1 ef 0b             	shr    edi,0xb
c0012262:	57                   	push   edi
c0012263:	68 0b a6 02 c0       	push   0xc002a60b
c0012268:	e8 88 04 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001226d:	e8 23 d7 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012272:	59                   	pop    ecx
c0012273:	5a                   	pop    edx
c0012274:	50                   	push   eax
c0012275:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012279:	68 16 a6 02 c0       	push   0xc002a616
c001227e:	e8 72 04 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0012283:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012287:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001228a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012290:	09 d0                	or     eax,edx
c0012292:	0d 01 08 00 00       	or     eax,0x801
c0012297:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001229a:	59                   	pop    ecx
c001229b:	5d                   	pop    ebp
c001229c:	50                   	push   eax
c001229d:	68 2b a6 02 c0       	push   0xc002a62b
c00122a2:	e8 4e 04 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00122a7:	0f 20 d8             	mov    eax,cr3
c00122aa:	83 c4 0c             	add    esp,0xc
c00122ad:	56                   	push   esi
c00122ae:	50                   	push   eax
c00122af:	68 43 a6 02 c0       	push   0xc002a643
c00122b4:	e8 3c 04 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00122b9:	c7 04 24 5b a6 02 c0 	mov    DWORD PTR [esp],0xc002a65b
c00122c0:	e8 30 04 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00122c5:	83 c4 10             	add    esp,0x10
c00122c8:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c00122cd:	85 c0                	test   eax,eax
c00122cf:	7e 3d                	jle    c001230e <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c00122d1:	89 dd                	mov    ebp,ebx
c00122d3:	31 f6                	xor    esi,esi
c00122d5:	83 ec 0c             	sub    esp,0xc
c00122d8:	57                   	push   edi
c00122d9:	e8 6e f0 ff ff       	call   c001134c <Virt::swapIDToSector(unsigned long)>
c00122de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122e1:	01 f0                	add    eax,esi
c00122e3:	6a 01                	push   0x1
c00122e5:	31 d2                	xor    edx,edx
c00122e7:	46                   	inc    esi
c00122e8:	52                   	push   edx
c00122e9:	81 c5 00 02 00 00    	add    ebp,0x200
c00122ef:	50                   	push   eax
c00122f0:	0f be 05 b8 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c9b8
c00122f7:	ff 34 85 fc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2104]
c00122fe:	e8 47 3d 00 00       	call   c001604a <LogicalDisk::read(unsigned long long, int, void*)>
c0012303:	83 c4 20             	add    esp,0x20
c0012306:	39 35 ac c9 02 c0    	cmp    DWORD PTR ds:0xc002c9ac,esi
c001230c:	7f c7                	jg     c00122d5 <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c001230e:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0012313:	48                   	dec    eax
c0012314:	52                   	push   edx
c0012315:	a3 68 db 02 c0       	mov    ds:0xc002db68,eax
c001231a:	50                   	push   eax
c001231b:	53                   	push   ebx
c001231c:	68 6b a6 02 c0       	push   0xc002a66b
c0012321:	e8 cf 03 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0012326:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012329:	e8 00 f0 ff ff       	call   c001132e <Virt::freeSwapfilePage(unsigned long)>
c001232e:	c7 04 24 80 a6 02 c0 	mov    DWORD PTR [esp],0xc002a680
c0012335:	e8 bb 03 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001233a:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001233f:	83 c4 10             	add    esp,0x10
c0012342:	48                   	dec    eax
c0012343:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0012348:	85 c0                	test   eax,eax
c001234a:	74 2d                	je     c0012379 <VAS::tryLoadBackOffDisk(unsigned long)+0x187>
c001234c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012350:	25 ff 0f 00 00       	and    eax,0xfff
c0012355:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001235a:	77 20                	ja     c001237c <VAS::tryLoadBackOffDisk(unsigned long)+0x18a>
c001235c:	0f 20 d8             	mov    eax,cr3
c001235f:	0f 22 d8             	mov    cr3,eax
c0012362:	83 ec 0c             	sub    esp,0xc
c0012365:	68 a6 a6 02 c0       	push   0xc002a6a6
c001236a:	e8 86 03 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001236f:	83 c4 10             	add    esp,0x10
c0012372:	b0 01                	mov    al,0x1
c0012374:	e9 d1 fe ff ff       	jmp    c001224a <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c0012379:	fb                   	sti    
c001237a:	eb d0                	jmp    c001234c <VAS::tryLoadBackOffDisk(unsigned long)+0x15a>
c001237c:	83 ec 0c             	sub    esp,0xc
c001237f:	68 96 a6 02 c0       	push   0xc002a696
c0012384:	e8 6c 03 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0012389:	83 c4 10             	add    esp,0x10
c001238c:	eb ce                	jmp    c001235c <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>

c001238e <VAS::scanForEviction()>:
c001238e:	55                   	push   ebp
c001238f:	57                   	push   edi
c0012390:	31 ff                	xor    edi,edi
c0012392:	56                   	push   esi
c0012393:	53                   	push   ebx
c0012394:	83 ec 0c             	sub    esp,0xc
c0012397:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001239b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001239e:	83 ec 08             	sub    esp,0x8
c00123a1:	53                   	push   ebx
c00123a2:	68 b4 a6 02 c0       	push   0xc002a6b4
c00123a7:	e8 49 03 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00123ac:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00123af:	83 c4 10             	add    esp,0x10
c00123b2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123b8:	75 0e                	jne    c00123c8 <VAS::scanForEviction()+0x3a>
c00123ba:	89 da                	mov    edx,ebx
c00123bc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123bf:	c1 ea 16             	shr    edx,0x16
c00123c2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123c6:	74 32                	je     c00123fa <VAS::scanForEviction()+0x6c>
c00123c8:	83 ec 08             	sub    esp,0x8
c00123cb:	53                   	push   ebx
c00123cc:	56                   	push   esi
c00123cd:	e8 72 f2 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c00123d2:	83 c4 10             	add    esp,0x10
c00123d5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00123d7:	89 ea                	mov    edx,ebp
c00123d9:	81 e2 00 0c 00 00    	and    edx,0xc00
c00123df:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c00123e5:	74 32                	je     c0012419 <VAS::scanForEviction()+0x8b>
c00123e7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123ed:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00123f3:	77 13                	ja     c0012408 <VAS::scanForEviction()+0x7a>
c00123f5:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123f8:	eb a4                	jmp    c001239e <VAS::scanForEviction()+0x10>
c00123fa:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012400:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012406:	76 ed                	jbe    c00123f5 <VAS::scanForEviction()+0x67>
c0012408:	47                   	inc    edi
c0012409:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012410:	83 ff 04             	cmp    edi,0x4
c0012413:	74 1e                	je     c0012433 <VAS::scanForEviction()+0xa5>
c0012415:	31 db                	xor    ebx,ebx
c0012417:	eb 85                	jmp    c001239e <VAS::scanForEviction()+0x10>
c0012419:	f7 c5 01 00 00 00    	test   ebp,0x1
c001241f:	74 c6                	je     c00123e7 <VAS::scanForEviction()+0x59>
c0012421:	f7 c5 20 00 00 00    	test   ebp,0x20
c0012427:	74 22                	je     c001244b <VAS::scanForEviction()+0xbd>
c0012429:	83 e5 df             	and    ebp,0xffffffdf
c001242c:	89 28                	mov    DWORD PTR [eax],ebp
c001242e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012431:	eb b4                	jmp    c00123e7 <VAS::scanForEviction()+0x59>
c0012433:	83 ec 0c             	sub    esp,0xc
c0012436:	68 d0 a4 02 c0       	push   0xc002a4d0
c001243b:	e8 21 7a 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0012440:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012443:	83 c4 10             	add    esp,0x10
c0012446:	e9 53 ff ff ff       	jmp    c001239e <VAS::scanForEviction()+0x10>
c001244b:	83 ec 08             	sub    esp,0x8
c001244e:	53                   	push   ebx
c001244f:	56                   	push   esi
c0012450:	e8 af fc ff ff       	call   c0012104 <VAS::evict(unsigned long)>
c0012455:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001245c:	89 e8                	mov    eax,ebp
c001245e:	83 c4 1c             	add    esp,0x1c
c0012461:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012466:	5b                   	pop    ebx
c0012467:	5e                   	pop    esi
c0012468:	5f                   	pop    edi
c0012469:	5d                   	pop    ebp
c001246a:	c3                   	ret    

c001246b <mapVASFirstTime>:
c001246b:	55                   	push   ebp
c001246c:	57                   	push   edi
c001246d:	56                   	push   esi
c001246e:	53                   	push   ebx
c001246f:	83 ec 0c             	sub    esp,0xc
c0012472:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012477:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001247a:	4a                   	dec    edx
c001247b:	0f 84 fe 00 00 00    	je     c001257f <mapVASFirstTime+0x114>
c0012481:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012484:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012487:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001248c:	c1 e5 15             	shl    ebp,0x15
c001248f:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012494:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c001249a:	29 eb                	sub    ebx,ebp
c001249c:	29 ef                	sub    edi,ebp
c001249e:	83 ec 08             	sub    esp,0x8
c00124a1:	53                   	push   ebx
c00124a2:	68 e0 a6 02 c0       	push   0xc002a6e0
c00124a7:	e8 49 02 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00124ac:	e8 e4 d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c00124b1:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c00124b8:	6a 01                	push   0x1
c00124ba:	53                   	push   ebx
c00124bb:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124c1:	50                   	push   eax
c00124c2:	56                   	push   esi
c00124c3:	e8 08 f8 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124c8:	83 c4 20             	add    esp,0x20
c00124cb:	39 fb                	cmp    ebx,edi
c00124cd:	75 cf                	jne    c001249e <mapVASFirstTime+0x33>
c00124cf:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00124d4:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00124d9:	29 eb                	sub    ebx,ebp
c00124db:	29 ef                	sub    edi,ebp
c00124dd:	83 ec 08             	sub    esp,0x8
c00124e0:	53                   	push   ebx
c00124e1:	68 fc a6 02 c0       	push   0xc002a6fc
c00124e6:	e8 0a 02 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00124eb:	58                   	pop    eax
c00124ec:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124f0:	5a                   	pop    edx
c00124f1:	19 c0                	sbb    eax,eax
c00124f3:	83 e0 04             	and    eax,0x4
c00124f6:	05 03 04 00 00       	add    eax,0x403
c00124fb:	50                   	push   eax
c00124fc:	68 35 a6 02 c0       	push   0xc002a635
c0012501:	e8 ef 01 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0012506:	e8 8a d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c001250b:	59                   	pop    ecx
c001250c:	89 c5                	mov    ebp,eax
c001250e:	58                   	pop    eax
c001250f:	55                   	push   ebp
c0012510:	68 10 a7 02 c0       	push   0xc002a710
c0012515:	e8 db 01 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001251a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001251e:	19 d2                	sbb    edx,edx
c0012520:	83 e2 04             	and    edx,0x4
c0012523:	81 c2 03 0c 00 00    	add    edx,0xc03
c0012529:	89 14 24             	mov    DWORD PTR [esp],edx
c001252c:	6a 01                	push   0x1
c001252e:	53                   	push   ebx
c001252f:	55                   	push   ebp
c0012530:	56                   	push   esi
c0012531:	e8 9a f7 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012536:	83 c4 18             	add    esp,0x18
c0012539:	53                   	push   ebx
c001253a:	56                   	push   esi
c001253b:	e8 04 f1 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c0012540:	5a                   	pop    edx
c0012541:	59                   	pop    ecx
c0012542:	ff 30                	push   DWORD PTR [eax]
c0012544:	68 2c a7 02 c0       	push   0xc002a72c
c0012549:	e8 a7 01 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001254e:	0f 20 d8             	mov    eax,cr3
c0012551:	83 c4 0c             	add    esp,0xc
c0012554:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001255a:	56                   	push   esi
c001255b:	50                   	push   eax
c001255c:	68 43 a6 02 c0       	push   0xc002a643
c0012561:	e8 8f 01 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0012566:	83 c4 10             	add    esp,0x10
c0012569:	39 df                	cmp    edi,ebx
c001256b:	0f 85 6c ff ff ff    	jne    c00124dd <mapVASFirstTime+0x72>
c0012571:	0f 20 d8             	mov    eax,cr3
c0012574:	0f 22 d8             	mov    cr3,eax
c0012577:	83 c4 0c             	add    esp,0xc
c001257a:	5b                   	pop    ebx
c001257b:	5e                   	pop    esi
c001257c:	5f                   	pop    edi
c001257d:	5d                   	pop    ebp
c001257e:	c3                   	ret    
c001257f:	83 ec 0c             	sub    esp,0xc
c0012582:	68 c7 a6 02 c0       	push   0xc002a6c7
c0012587:	e8 69 01 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001258c:	83 c4 10             	add    esp,0x10
c001258f:	83 c4 0c             	add    esp,0xc
c0012592:	5b                   	pop    ebx
c0012593:	5e                   	pop    esi
c0012594:	5f                   	pop    edi
c0012595:	5d                   	pop    ebp
c0012596:	c3                   	ret    

c0012597 <__cxa_atexit>:
c0012597:	31 c0                	xor    eax,eax
c0012599:	c3                   	ret    

c001259a <__cxa_finalize>:
c001259a:	c3                   	ret    

c001259b <__stack_chk_fail>:
c001259b:	55                   	push   ebp
c001259c:	89 e5                	mov    ebp,esp
c001259e:	83 ec 14             	sub    esp,0x14
c00125a1:	68 37 a7 02 c0       	push   0xc002a737
c00125a6:	e8 4a 01 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00125ab:	58                   	pop    eax
c00125ac:	5a                   	pop    edx
c00125ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00125b0:	68 87 a7 02 c0       	push   0xc002a787
c00125b5:	e8 3b 01 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00125ba:	59                   	pop    ecx
c00125bb:	58                   	pop    eax
c00125bc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125bf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125c2:	68 87 a7 02 c0       	push   0xc002a787
c00125c7:	e8 29 01 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00125cc:	5a                   	pop    edx
c00125cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125d0:	59                   	pop    ecx
c00125d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00125d3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125d6:	68 87 a7 02 c0       	push   0xc002a787
c00125db:	e8 15 01 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00125e0:	5a                   	pop    edx
c00125e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125e4:	59                   	pop    ecx
c00125e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00125e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00125e9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125ec:	68 87 a7 02 c0       	push   0xc002a787
c00125f1:	e8 ff 00 00 00       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00125f6:	c7 04 24 8f a7 02 c0 	mov    DWORD PTR [esp],0xc002a78f
c00125fd:	e8 5f 78 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0012602:	83 c4 10             	add    esp,0x10
c0012605:	c9                   	leave  
c0012606:	c3                   	ret    

c0012607 <__cxa_pure_virtual>:
c0012607:	83 ec 18             	sub    esp,0x18
c001260a:	68 a7 a7 02 c0       	push   0xc002a7a7
c001260f:	e8 4d 78 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0012614:	83 c4 1c             	add    esp,0x1c
c0012617:	c3                   	ret    

c0012618 <operator new[](unsigned long)>:
c0012618:	e9 7c cf ff ff       	jmp    c000f599 <malloc>

c001261d <operator delete(void*, unsigned long)>:
c001261d:	e9 97 cf ff ff       	jmp    c000f5b9 <rfree>

c0012622 <operator delete[](void*)>:
c0012622:	e9 92 cf ff ff       	jmp    c000f5b9 <rfree>

c0012627 <operator delete[](void*, unsigned long)>:
c0012627:	e9 8d cf ff ff       	jmp    c000f5b9 <rfree>

c001262c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001262c:	55                   	push   ebp
c001262d:	b9 11 00 00 00       	mov    ecx,0x11
c0012632:	57                   	push   edi
c0012633:	56                   	push   esi
c0012634:	be ba a1 02 c0       	mov    esi,0xc002a1ba
c0012639:	53                   	push   ebx
c001263a:	83 ec 20             	sub    esp,0x20
c001263d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012641:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012645:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012649:	fc                   	cld    
c001264a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001264c:	89 ee                	mov    esi,ebp
c001264e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012652:	eb 02                	jmp    c0012656 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012654:	89 c6                	mov    esi,eax
c0012656:	31 d2                	xor    edx,edx
c0012658:	41                   	inc    ecx
c0012659:	89 f0                	mov    eax,esi
c001265b:	f7 f3                	div    ebx
c001265d:	39 de                	cmp    esi,ebx
c001265f:	73 f3                	jae    c0012654 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012661:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012664:	eb 02                	jmp    c0012668 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012666:	89 c5                	mov    ebp,eax
c0012668:	31 d2                	xor    edx,edx
c001266a:	49                   	dec    ecx
c001266b:	89 e8                	mov    eax,ebp
c001266d:	f7 f3                	div    ebx
c001266f:	39 dd                	cmp    ebp,ebx
c0012671:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012675:	88 11                	mov    BYTE PTR [ecx],dl
c0012677:	73 ed                	jae    c0012666 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012679:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001267d:	83 c4 20             	add    esp,0x20
c0012680:	5b                   	pop    ebx
c0012681:	5e                   	pop    esi
c0012682:	5f                   	pop    edi
c0012683:	5d                   	pop    ebp
c0012684:	c3                   	ret    

c0012685 <Dbg::logc(char)>:
c0012685:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012689:	ba fd 03 00 00       	mov    edx,0x3fd
c001268e:	ec                   	in     al,dx
c001268f:	a8 20                	test   al,0x20
c0012691:	74 fb                	je     c001268e <Dbg::logc(char)+0x9>
c0012693:	ba f8 03 00 00       	mov    edx,0x3f8
c0012698:	88 c8                	mov    al,cl
c001269a:	ee                   	out    dx,al
c001269b:	c3                   	ret    

c001269c <Dbg::logs(char*)>:
c001269c:	53                   	push   ebx
c001269d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00126a1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00126a4:	84 c0                	test   al,al
c00126a6:	74 0f                	je     c00126b7 <Dbg::logs(char*)+0x1b>
c00126a8:	50                   	push   eax
c00126a9:	43                   	inc    ebx
c00126aa:	e8 d6 ff ff ff       	call   c0012685 <Dbg::logc(char)>
c00126af:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00126b2:	5a                   	pop    edx
c00126b3:	84 c0                	test   al,al
c00126b5:	75 f1                	jne    c00126a8 <Dbg::logs(char*)+0xc>
c00126b7:	5b                   	pop    ebx
c00126b8:	c3                   	ret    

c00126b9 <Dbg::logWriteInt(unsigned int)>:
c00126b9:	83 ec 10             	sub    esp,0x10
c00126bc:	6a 0a                	push   0xa
c00126be:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126c2:	50                   	push   eax
c00126c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126c7:	e8 60 ff ff ff       	call   c001262c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126cc:	50                   	push   eax
c00126cd:	e8 ca ff ff ff       	call   c001269c <Dbg::logs(char*)>
c00126d2:	83 c4 20             	add    esp,0x20
c00126d5:	c3                   	ret    

c00126d6 <Dbg::logWriteIntBase(unsigned int, int)>:
c00126d6:	83 ec 10             	sub    esp,0x10
c00126d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126dd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126e1:	50                   	push   eax
c00126e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126e6:	e8 41 ff ff ff       	call   c001262c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126eb:	50                   	push   eax
c00126ec:	e8 ab ff ff ff       	call   c001269c <Dbg::logs(char*)>
c00126f1:	83 c4 20             	add    esp,0x20
c00126f4:	c3                   	ret    

c00126f5 <Dbg::kprintf(char const*, ...)>:
c00126f5:	55                   	push   ebp
c00126f6:	57                   	push   edi
c00126f7:	56                   	push   esi
c00126f8:	53                   	push   ebx
c00126f9:	83 ec 0c             	sub    esp,0xc
c00126fc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012700:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012704:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012708:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001270b:	84 c0                	test   al,al
c001270d:	74 4a                	je     c0012759 <Dbg::kprintf(char const*, ...)+0x64>
c001270f:	31 db                	xor    ebx,ebx
c0012711:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012714:	3c 25                	cmp    al,0x25
c0012716:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012719:	0f 85 e4 00 00 00    	jne    c0012803 <Dbg::kprintf(char const*, ...)+0x10e>
c001271f:	83 c3 02             	add    ebx,0x2
c0012722:	8a 07                	mov    al,BYTE PTR [edi]
c0012724:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012727:	83 e8 25             	sub    eax,0x25
c001272a:	3c 53                	cmp    al,0x53
c001272c:	0f 87 ba 00 00 00    	ja     c00127ec <Dbg::kprintf(char const*, ...)+0xf7>
c0012732:	0f b6 c0             	movzx  eax,al
c0012735:	ff 24 85 bc a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5844]
c001273c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012740:	89 c8                	mov    eax,ecx
c0012742:	83 c1 04             	add    ecx,0x4
c0012745:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012749:	ff 30                	push   DWORD PTR [eax]
c001274b:	e8 69 ff ff ff       	call   c00126b9 <Dbg::logWriteInt(unsigned int)>
c0012750:	5f                   	pop    edi
c0012751:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012755:	84 c0                	test   al,al
c0012757:	75 b8                	jne    c0012711 <Dbg::kprintf(char const*, ...)+0x1c>
c0012759:	83 c4 0c             	add    esp,0xc
c001275c:	5b                   	pop    ebx
c001275d:	5e                   	pop    esi
c001275e:	5f                   	pop    edi
c001275f:	5d                   	pop    ebp
c0012760:	c3                   	ret    
c0012761:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012765:	89 c8                	mov    eax,ecx
c0012767:	83 c1 04             	add    ecx,0x4
c001276a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001276e:	ff 30                	push   DWORD PTR [eax]
c0012770:	e8 27 ff ff ff       	call   c001269c <Dbg::logs(char*)>
c0012775:	58                   	pop    eax
c0012776:	eb d9                	jmp    c0012751 <Dbg::kprintf(char const*, ...)+0x5c>
c0012778:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001277c:	89 d0                	mov    eax,edx
c001277e:	83 c2 04             	add    edx,0x4
c0012781:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012785:	ff 30                	push   DWORD PTR [eax]
c0012787:	e8 2d ff ff ff       	call   c00126b9 <Dbg::logWriteInt(unsigned int)>
c001278c:	58                   	pop    eax
c001278d:	eb c2                	jmp    c0012751 <Dbg::kprintf(char const*, ...)+0x5c>
c001278f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012793:	89 d0                	mov    eax,edx
c0012795:	83 c2 04             	add    edx,0x4
c0012798:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001279b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001279f:	50                   	push   eax
c00127a0:	e8 e0 fe ff ff       	call   c0012685 <Dbg::logc(char)>
c00127a5:	58                   	pop    eax
c00127a6:	eb a9                	jmp    c0012751 <Dbg::kprintf(char const*, ...)+0x5c>
c00127a8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127ac:	89 c8                	mov    eax,ecx
c00127ae:	83 c1 04             	add    ecx,0x4
c00127b1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127b5:	6a 10                	push   0x10
c00127b7:	ff 30                	push   DWORD PTR [eax]
c00127b9:	e8 18 ff ff ff       	call   c00126d6 <Dbg::logWriteIntBase(unsigned int, int)>
c00127be:	59                   	pop    ecx
c00127bf:	5f                   	pop    edi
c00127c0:	eb 8f                	jmp    c0012751 <Dbg::kprintf(char const*, ...)+0x5c>
c00127c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127c6:	89 d0                	mov    eax,edx
c00127c8:	83 c2 08             	add    edx,0x8
c00127cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127cf:	6a 10                	push   0x10
c00127d1:	ff 30                	push   DWORD PTR [eax]
c00127d3:	e8 fe fe ff ff       	call   c00126d6 <Dbg::logWriteIntBase(unsigned int, int)>
c00127d8:	58                   	pop    eax
c00127d9:	5a                   	pop    edx
c00127da:	e9 72 ff ff ff       	jmp    c0012751 <Dbg::kprintf(char const*, ...)+0x5c>
c00127df:	6a 25                	push   0x25
c00127e1:	e8 9f fe ff ff       	call   c0012685 <Dbg::logc(char)>
c00127e6:	58                   	pop    eax
c00127e7:	e9 65 ff ff ff       	jmp    c0012751 <Dbg::kprintf(char const*, ...)+0x5c>
c00127ec:	6a 25                	push   0x25
c00127ee:	e8 92 fe ff ff       	call   c0012685 <Dbg::logc(char)>
c00127f3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00127f6:	50                   	push   eax
c00127f7:	e8 89 fe ff ff       	call   c0012685 <Dbg::logc(char)>
c00127fc:	5a                   	pop    edx
c00127fd:	59                   	pop    ecx
c00127fe:	e9 4e ff ff ff       	jmp    c0012751 <Dbg::kprintf(char const*, ...)+0x5c>
c0012803:	50                   	push   eax
c0012804:	89 eb                	mov    ebx,ebp
c0012806:	e8 7a fe ff ff       	call   c0012685 <Dbg::logc(char)>
c001280b:	89 fd                	mov    ebp,edi
c001280d:	58                   	pop    eax
c001280e:	e9 3e ff ff ff       	jmp    c0012751 <Dbg::kprintf(char const*, ...)+0x5c>
c0012813:	90                   	nop

c0012814 <File::read(unsigned long long, void*, int*)>:
c0012814:	53                   	push   ebx
c0012815:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012819:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001281d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012824:	3c 19                	cmp    al,0x19
c0012826:	77 35                	ja     c001285d <File::read(unsigned long long, void*, int*)+0x49>
c0012828:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c001282f:	85 c0                	test   eax,eax
c0012831:	74 2a                	je     c001285d <File::read(unsigned long long, void*, int*)+0x49>
c0012833:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012839:	85 c0                	test   eax,eax
c001283b:	74 20                	je     c001285d <File::read(unsigned long long, void*, int*)+0x49>
c001283d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012841:	74 21                	je     c0012864 <File::read(unsigned long long, void*, int*)+0x50>
c0012843:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012845:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012849:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001284f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012857:	5b                   	pop    ebx
c0012858:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001285b:	ff e0                	jmp    eax
c001285d:	b8 0b 00 00 00       	mov    eax,0xb
c0012862:	eb 05                	jmp    c0012869 <File::read(unsigned long long, void*, int*)+0x55>
c0012864:	b8 05 00 00 00       	mov    eax,0x5
c0012869:	5b                   	pop    ebx
c001286a:	c3                   	ret    
c001286b:	90                   	nop

c001286c <File::write(unsigned long long, void*, int*)>:
c001286c:	53                   	push   ebx
c001286d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012871:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012875:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001287c:	3c 19                	cmp    al,0x19
c001287e:	77 35                	ja     c00128b5 <File::write(unsigned long long, void*, int*)+0x49>
c0012880:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c0012887:	85 c0                	test   eax,eax
c0012889:	74 2a                	je     c00128b5 <File::write(unsigned long long, void*, int*)+0x49>
c001288b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012891:	85 c0                	test   eax,eax
c0012893:	74 20                	je     c00128b5 <File::write(unsigned long long, void*, int*)+0x49>
c0012895:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012899:	74 21                	je     c00128bc <File::write(unsigned long long, void*, int*)+0x50>
c001289b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001289d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128a1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128af:	5b                   	pop    ebx
c00128b0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00128b3:	ff e0                	jmp    eax
c00128b5:	b8 0b 00 00 00       	mov    eax,0xb
c00128ba:	eb 05                	jmp    c00128c1 <File::write(unsigned long long, void*, int*)+0x55>
c00128bc:	b8 05 00 00 00       	mov    eax,0x5
c00128c1:	5b                   	pop    ebx
c00128c2:	c3                   	ret    
c00128c3:	90                   	nop

c00128c4 <Directory::read(unsigned long long, void*, int*)>:
c00128c4:	53                   	push   ebx
c00128c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128cd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128d4:	3c 19                	cmp    al,0x19
c00128d6:	77 35                	ja     c001290d <Directory::read(unsigned long long, void*, int*)+0x49>
c00128d8:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c00128df:	85 c0                	test   eax,eax
c00128e1:	74 2a                	je     c001290d <Directory::read(unsigned long long, void*, int*)+0x49>
c00128e3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128e9:	85 c0                	test   eax,eax
c00128eb:	74 20                	je     c001290d <Directory::read(unsigned long long, void*, int*)+0x49>
c00128ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128f1:	74 21                	je     c0012914 <Directory::read(unsigned long long, void*, int*)+0x50>
c00128f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128f5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128f9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012907:	5b                   	pop    ebx
c0012908:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001290b:	ff e0                	jmp    eax
c001290d:	b8 0b 00 00 00       	mov    eax,0xb
c0012912:	eb 05                	jmp    c0012919 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012914:	b8 05 00 00 00       	mov    eax,0x5
c0012919:	5b                   	pop    ebx
c001291a:	c3                   	ret    
c001291b:	90                   	nop

c001291c <Directory::write(unsigned long long, void*, int*)>:
c001291c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012920:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012927:	b8 0b 00 00 00       	mov    eax,0xb
c001292c:	80 fa 19             	cmp    dl,0x19
c001292f:	77 18                	ja     c0012949 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012931:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0012938:	85 d2                	test   edx,edx
c001293a:	74 0d                	je     c0012949 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001293c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012943:	19 c0                	sbb    eax,eax
c0012945:	83 e0 0a             	and    eax,0xa
c0012948:	40                   	inc    eax
c0012949:	c3                   	ret    

c001294a <File::isAtty()>:
c001294a:	31 c0                	xor    eax,eax
c001294c:	c3                   	ret    
c001294d:	90                   	nop

c001294e <Directory::isAtty()>:
c001294e:	31 c0                	xor    eax,eax
c0012950:	c3                   	ret    
c0012951:	90                   	nop

c0012952 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012952:	b8 0a 00 00 00       	mov    eax,0xa
c0012957:	c3                   	ret    

c0012958 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012958:	b8 0a 00 00 00       	mov    eax,0xa
c001295d:	c3                   	ret    

c001295e <Filesystem::getFileFirstSector(char const*)>:
c001295e:	31 c0                	xor    eax,eax
c0012960:	31 d2                	xor    edx,edx
c0012962:	c3                   	ret    
c0012963:	90                   	nop

c0012964 <File::~File()>:
c0012964:	83 ec 0c             	sub    esp,0xc
c0012967:	ba 7c a9 02 c0       	mov    edx,0xc002a97c
c001296c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012970:	89 10                	mov    DWORD PTR [eax],edx
c0012972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012976:	83 ec 0c             	sub    esp,0xc
c0012979:	50                   	push   eax
c001297a:	e8 3d e6 ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c001297f:	83 c4 10             	add    esp,0x10
c0012982:	90                   	nop
c0012983:	83 c4 0c             	add    esp,0xc
c0012986:	c3                   	ret    
c0012987:	90                   	nop

c0012988 <File::~File()>:
c0012988:	83 ec 0c             	sub    esp,0xc
c001298b:	83 ec 0c             	sub    esp,0xc
c001298e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012992:	e8 cd ff ff ff       	call   c0012964 <File::~File()>
c0012997:	83 c4 10             	add    esp,0x10
c001299a:	83 ec 08             	sub    esp,0x8
c001299d:	68 14 01 00 00       	push   0x114
c00129a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a6:	e8 72 fc ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	83 c4 0c             	add    esp,0xc
c00129b1:	c3                   	ret    

c00129b2 <Directory::~Directory()>:
c00129b2:	83 ec 0c             	sub    esp,0xc
c00129b5:	ba 98 a9 02 c0       	mov    edx,0xc002a998
c00129ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129be:	89 10                	mov    DWORD PTR [eax],edx
c00129c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129c4:	83 ec 0c             	sub    esp,0xc
c00129c7:	50                   	push   eax
c00129c8:	e8 ef e5 ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c00129cd:	83 c4 10             	add    esp,0x10
c00129d0:	90                   	nop
c00129d1:	83 c4 0c             	add    esp,0xc
c00129d4:	c3                   	ret    
c00129d5:	90                   	nop

c00129d6 <Directory::~Directory()>:
c00129d6:	83 ec 0c             	sub    esp,0xc
c00129d9:	83 ec 0c             	sub    esp,0xc
c00129dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129e0:	e8 cd ff ff ff       	call   c00129b2 <Directory::~Directory()>
c00129e5:	83 c4 10             	add    esp,0x10
c00129e8:	83 ec 08             	sub    esp,0x8
c00129eb:	68 14 01 00 00       	push   0x114
c00129f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129f4:	e8 24 fc ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	83 c4 0c             	add    esp,0xc
c00129ff:	c3                   	ret    

c0012a00 <Filesystem::Filesystem()>:
c0012a00:	ba 14 a9 02 c0       	mov    edx,0xc002a914
c0012a05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a09:	89 10                	mov    DWORD PTR [eax],edx
c0012a0b:	8b 15 74 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db74
c0012a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a15:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a1c:	a3 74 db 02 c0       	mov    ds:0xc002db74,eax
c0012a21:	90                   	nop
c0012a22:	c3                   	ret    
c0012a23:	90                   	nop

c0012a24 <Filesystem::~Filesystem()>:
c0012a24:	ba 14 a9 02 c0       	mov    edx,0xc002a914
c0012a29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a2d:	89 10                	mov    DWORD PTR [eax],edx
c0012a2f:	90                   	nop
c0012a30:	c3                   	ret    
c0012a31:	90                   	nop

c0012a32 <Filesystem::~Filesystem()>:
c0012a32:	83 ec 0c             	sub    esp,0xc
c0012a35:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012a39:	e8 e6 ff ff ff       	call   c0012a24 <Filesystem::~Filesystem()>
c0012a3e:	83 c4 04             	add    esp,0x4
c0012a41:	83 ec 08             	sub    esp,0x8
c0012a44:	6a 08                	push   0x8
c0012a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a4a:	e8 ce fb ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	83 c4 0c             	add    esp,0xc
c0012a55:	c3                   	ret    

c0012a56 <Fs::getcwd(Process*, char*, int)>:
c0012a56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a5a:	31 c0                	xor    eax,eax
c0012a5c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012a5f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012a63:	7d 15                	jge    c0012a7a <Fs::getcwd(Process*, char*, int)+0x24>
c0012a65:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a69:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012a70:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012a73:	84 c9                	test   cl,cl
c0012a75:	74 06                	je     c0012a7d <Fs::getcwd(Process*, char*, int)+0x27>
c0012a77:	40                   	inc    eax
c0012a78:	eb e2                	jmp    c0012a5c <Fs::getcwd(Process*, char*, int)+0x6>
c0012a7a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012a7d:	31 c0                	xor    eax,eax
c0012a7f:	c3                   	ret    

c0012a80 <Fs::initVFS()>:
c0012a80:	83 ec 18             	sub    esp,0x18
c0012a83:	6a 08                	push   0x8
c0012a85:	e8 0f cb ff ff       	call   c000f599 <malloc>
c0012a8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a8d:	e8 d2 de 00 00       	call   c0020964 <FAT::FAT()>
c0012a92:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a99:	e8 fb ca ff ff       	call   c000f599 <malloc>
c0012a9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012aa1:	e8 ca f0 00 00       	call   c0021b70 <ISO9660::ISO9660()>
c0012aa6:	83 c4 1c             	add    esp,0x1c
c0012aa9:	c3                   	ret    

c0012aaa <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012aaa:	55                   	push   ebp
c0012aab:	57                   	push   edi
c0012aac:	56                   	push   esi
c0012aad:	53                   	push   ebx
c0012aae:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ab4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012abb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012ac2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ac9:	68 00 04 00 00       	push   0x400
c0012ace:	6a 00                	push   0x0
c0012ad0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012ad4:	56                   	push   esi
c0012ad5:	e8 76 dc fe ff       	call   c0000750 <memset>
c0012ada:	83 c4 10             	add    esp,0x10
c0012add:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012ae1:	75 0b                	jne    c0012aee <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ae3:	50                   	push   eax
c0012ae4:	50                   	push   eax
c0012ae5:	57                   	push   edi
c0012ae6:	56                   	push   esi
c0012ae7:	e8 20 dd fe ff       	call   c000080c <strcpy>
c0012aec:	eb 41                	jmp    c0012b2f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012aee:	8a 07                	mov    al,BYTE PTR [edi]
c0012af0:	3c 5c                	cmp    al,0x5c
c0012af2:	74 04                	je     c0012af8 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012af4:	3c 2f                	cmp    al,0x2f
c0012af6:	75 18                	jne    c0012b10 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012af8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012afb:	3c 60                	cmp    al,0x60
c0012afd:	7e 03                	jle    c0012b02 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012aff:	83 e8 20             	sub    eax,0x20
c0012b02:	88 04 24             	mov    BYTE PTR [esp],al
c0012b05:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b0c:	50                   	push   eax
c0012b0d:	50                   	push   eax
c0012b0e:	eb 18                	jmp    c0012b28 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012b10:	50                   	push   eax
c0012b11:	50                   	push   eax
c0012b12:	55                   	push   ebp
c0012b13:	56                   	push   esi
c0012b14:	e8 f3 dc fe ff       	call   c000080c <strcpy>
c0012b19:	5a                   	pop    edx
c0012b1a:	59                   	pop    ecx
c0012b1b:	68 0a bc 02 c0       	push   0xc002bc0a
c0012b20:	56                   	push   esi
c0012b21:	e8 26 de fe ff       	call   c000094c <strcat>
c0012b26:	5d                   	pop    ebp
c0012b27:	58                   	pop    eax
c0012b28:	57                   	push   edi
c0012b29:	56                   	push   esi
c0012b2a:	e8 1d de fe ff       	call   c000094c <strcat>
c0012b2f:	83 c4 10             	add    esp,0x10
c0012b32:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b35:	3c 60                	cmp    al,0x60
c0012b37:	7e 03                	jle    c0012b3c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012b39:	83 e8 20             	sub    eax,0x20
c0012b3c:	88 04 24             	mov    BYTE PTR [esp],al
c0012b3f:	88 03                	mov    BYTE PTR [ebx],al
c0012b41:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b48:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b4e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b52:	bf 03 00 00 00       	mov    edi,0x3
c0012b57:	b8 03 00 00 00       	mov    eax,0x3
c0012b5c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b5f:	84 d2                	test   dl,dl
c0012b61:	0f 84 91 00 00 00    	je     c0012bf8 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b67:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b6a:	80 fa 5c             	cmp    dl,0x5c
c0012b6d:	74 05                	je     c0012b74 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012b6f:	80 fa 2f             	cmp    dl,0x2f
c0012b72:	75 12                	jne    c0012b86 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b74:	89 c5                	mov    ebp,eax
c0012b76:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b7b:	74 09                	je     c0012b86 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b7d:	40                   	inc    eax
c0012b7e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012b82:	89 cf                	mov    edi,ecx
c0012b84:	eb d6                	jmp    c0012b5c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b86:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b8b:	75 5b                	jne    c0012be8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b8d:	80 fa 2e             	cmp    dl,0x2e
c0012b90:	75 56                	jne    c0012be8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b92:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b96:	74 19                	je     c0012bb1 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012b98:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b9d:	74 53                	je     c0012bf2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b9f:	89 f9                	mov    ecx,edi
c0012ba1:	41                   	inc    ecx
c0012ba2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ba5:	80 fa 2f             	cmp    dl,0x2f
c0012ba8:	74 f7                	je     c0012ba1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012baa:	80 fa 5c             	cmp    dl,0x5c
c0012bad:	74 f2                	je     c0012ba1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012baf:	eb d1                	jmp    c0012b82 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bb1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012bb6:	74 3a                	je     c0012bf2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012bb8:	83 f8 03             	cmp    eax,0x3
c0012bbb:	74 c5                	je     c0012b82 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bbd:	41                   	inc    ecx
c0012bbe:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012bc1:	80 fa 2f             	cmp    dl,0x2f
c0012bc4:	74 f7                	je     c0012bbd <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012bc6:	80 fa 5c             	cmp    dl,0x5c
c0012bc9:	74 f2                	je     c0012bbd <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012bcb:	48                   	dec    eax
c0012bcc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bd0:	75 06                	jne    c0012bd8 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012bd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bd6:	eb f3                	jmp    c0012bcb <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012bd8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bdc:	74 07                	je     c0012be5 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012bde:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012be2:	48                   	dec    eax
c0012be3:	eb f3                	jmp    c0012bd8 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012be5:	40                   	inc    eax
c0012be6:	eb 9a                	jmp    c0012b82 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012be8:	80 fa 2f             	cmp    dl,0x2f
c0012beb:	74 95                	je     c0012b82 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bed:	80 fa 5c             	cmp    dl,0x5c
c0012bf0:	74 90                	je     c0012b82 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bf2:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012bf5:	40                   	inc    eax
c0012bf6:	eb 8a                	jmp    c0012b82 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bf8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bfc:	83 ec 0c             	sub    esp,0xc
c0012bff:	53                   	push   ebx
c0012c00:	e8 67 db fe ff       	call   c000076c <strlen>
c0012c05:	83 c4 10             	add    esp,0x10
c0012c08:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012c0d:	75 26                	jne    c0012c35 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012c0f:	83 ec 0c             	sub    esp,0xc
c0012c12:	53                   	push   ebx
c0012c13:	e8 54 db fe ff       	call   c000076c <strlen>
c0012c18:	83 c4 10             	add    esp,0x10
c0012c1b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012c20:	74 26                	je     c0012c48 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012c22:	83 ec 0c             	sub    esp,0xc
c0012c25:	53                   	push   ebx
c0012c26:	e8 41 db fe ff       	call   c000076c <strlen>
c0012c2b:	83 c4 10             	add    esp,0x10
c0012c2e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c33:	eb c7                	jmp    c0012bfc <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012c35:	83 ec 0c             	sub    esp,0xc
c0012c38:	53                   	push   ebx
c0012c39:	e8 2e db fe ff       	call   c000076c <strlen>
c0012c3e:	83 c4 10             	add    esp,0x10
c0012c41:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c46:	74 c7                	je     c0012c0f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012c48:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c4e:	5b                   	pop    ebx
c0012c4f:	5e                   	pop    esi
c0012c50:	5f                   	pop    edi
c0012c51:	5d                   	pop    ebp
c0012c52:	c3                   	ret    
c0012c53:	90                   	nop

c0012c54 <File::File(char const*, Process*)>:
c0012c54:	83 ec 0c             	sub    esp,0xc
c0012c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c5b:	83 ec 08             	sub    esp,0x8
c0012c5e:	6a 00                	push   0x0
c0012c60:	50                   	push   eax
c0012c61:	e8 74 e1 ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c0012c66:	83 c4 10             	add    esp,0x10
c0012c69:	ba 7c a9 02 c0       	mov    edx,0xc002a97c
c0012c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c72:	89 10                	mov    DWORD PTR [eax],edx
c0012c74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c78:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c82:	83 c0 0d             	add    eax,0xd
c0012c85:	83 ec 04             	sub    esp,0x4
c0012c88:	52                   	push   edx
c0012c89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c8d:	50                   	push   eax
c0012c8e:	e8 17 fe ff ff       	call   c0012aaa <Fs::standardiseFiles(char*, char const*, char const*)>
c0012c93:	83 c4 10             	add    esp,0x10
c0012c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c9d:	8d 50 bf             	lea    edx,[eax-0x41]
c0012ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ca4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cae:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012cb2:	90                   	nop
c0012cb3:	83 c4 0c             	add    esp,0xc
c0012cb6:	c3                   	ret    
c0012cb7:	90                   	nop

c0012cb8 <File::open(FileOpenMode)>:
c0012cb8:	53                   	push   ebx
c0012cb9:	b8 0b 00 00 00       	mov    eax,0xb
c0012cbe:	83 ec 08             	sub    esp,0x8
c0012cc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cc5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ccc:	80 fa 19             	cmp    dl,0x19
c0012ccf:	77 40                	ja     c0012d11 <File::open(FileOpenMode)+0x59>
c0012cd1:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0012cd8:	85 d2                	test   edx,edx
c0012cda:	74 35                	je     c0012d11 <File::open(FileOpenMode)+0x59>
c0012cdc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ce2:	85 d2                	test   edx,edx
c0012ce4:	74 2b                	je     c0012d11 <File::open(FileOpenMode)+0x59>
c0012ce6:	b8 06 00 00 00       	mov    eax,0x6
c0012ceb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cef:	75 20                	jne    c0012d11 <File::open(FileOpenMode)+0x59>
c0012cf1:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cf3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012cf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cfd:	51                   	push   ecx
c0012cfe:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d01:	51                   	push   ecx
c0012d02:	52                   	push   edx
c0012d03:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d06:	83 c4 10             	add    esp,0x10
c0012d09:	85 c0                	test   eax,eax
c0012d0b:	75 04                	jne    c0012d11 <File::open(FileOpenMode)+0x59>
c0012d0d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d11:	83 c4 08             	add    esp,0x8
c0012d14:	5b                   	pop    ebx
c0012d15:	c3                   	ret    

c0012d16 <File::close()>:
c0012d16:	53                   	push   ebx
c0012d17:	b8 0b 00 00 00       	mov    eax,0xb
c0012d1c:	83 ec 08             	sub    esp,0x8
c0012d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d23:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d2a:	80 fa 19             	cmp    dl,0x19
c0012d2d:	77 41                	ja     c0012d70 <File::close()+0x5a>
c0012d2f:	8b 1c 95 00 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2000]
c0012d36:	85 db                	test   ebx,ebx
c0012d38:	74 36                	je     c0012d70 <File::close()+0x5a>
c0012d3a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d41:	74 2d                	je     c0012d70 <File::close()+0x5a>
c0012d43:	b8 05 00 00 00       	mov    eax,0x5
c0012d48:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d4c:	74 22                	je     c0012d70 <File::close()+0x5a>
c0012d4e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d52:	8b 04 95 00 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2000]
c0012d59:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d5f:	53                   	push   ebx
c0012d60:	53                   	push   ebx
c0012d61:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d63:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d69:	50                   	push   eax
c0012d6a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d6d:	83 c4 10             	add    esp,0x10
c0012d70:	83 c4 08             	add    esp,0x8
c0012d73:	5b                   	pop    ebx
c0012d74:	c3                   	ret    
c0012d75:	90                   	nop

c0012d76 <File::seek(unsigned long long)>:
c0012d76:	56                   	push   esi
c0012d77:	53                   	push   ebx
c0012d78:	b8 0b 00 00 00       	mov    eax,0xb
c0012d7d:	51                   	push   ecx
c0012d7e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d82:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d86:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d8d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d91:	80 fa 19             	cmp    dl,0x19
c0012d94:	77 31                	ja     c0012dc7 <File::seek(unsigned long long)+0x51>
c0012d96:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0012d9d:	85 d2                	test   edx,edx
c0012d9f:	74 26                	je     c0012dc7 <File::seek(unsigned long long)+0x51>
c0012da1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012da7:	85 d2                	test   edx,edx
c0012da9:	74 1c                	je     c0012dc7 <File::seek(unsigned long long)+0x51>
c0012dab:	b8 05 00 00 00       	mov    eax,0x5
c0012db0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012db4:	74 11                	je     c0012dc7 <File::seek(unsigned long long)+0x51>
c0012db6:	8b 02                	mov    eax,DWORD PTR [edx]
c0012db8:	53                   	push   ebx
c0012db9:	51                   	push   ecx
c0012dba:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012dc0:	52                   	push   edx
c0012dc1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012dc4:	83 c4 10             	add    esp,0x10
c0012dc7:	5a                   	pop    edx
c0012dc8:	5b                   	pop    ebx
c0012dc9:	5e                   	pop    esi
c0012dca:	c3                   	ret    
c0012dcb:	90                   	nop

c0012dcc <File::tell(unsigned long long*)>:
c0012dcc:	83 ec 0c             	sub    esp,0xc
c0012dcf:	b8 0b 00 00 00       	mov    eax,0xb
c0012dd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012dd8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ddf:	80 fa 19             	cmp    dl,0x19
c0012de2:	77 34                	ja     c0012e18 <File::tell(unsigned long long*)+0x4c>
c0012de4:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0012deb:	85 d2                	test   edx,edx
c0012ded:	74 29                	je     c0012e18 <File::tell(unsigned long long*)+0x4c>
c0012def:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012df5:	85 d2                	test   edx,edx
c0012df7:	74 1f                	je     c0012e18 <File::tell(unsigned long long*)+0x4c>
c0012df9:	b8 05 00 00 00       	mov    eax,0x5
c0012dfe:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e02:	74 14                	je     c0012e18 <File::tell(unsigned long long*)+0x4c>
c0012e04:	50                   	push   eax
c0012e05:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e0b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e11:	52                   	push   edx
c0012e12:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e15:	83 c4 10             	add    esp,0x10
c0012e18:	83 c4 0c             	add    esp,0xc
c0012e1b:	c3                   	ret    

c0012e1c <File::rewind()>:
c0012e1c:	83 ec 10             	sub    esp,0x10
c0012e1f:	6a 00                	push   0x0
c0012e21:	6a 00                	push   0x0
c0012e23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e27:	e8 4a ff ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c0012e2c:	83 c4 1c             	add    esp,0x1c
c0012e2f:	c3                   	ret    

c0012e30 <File::unlink()>:
c0012e30:	83 ec 0c             	sub    esp,0xc
c0012e33:	b8 0b 00 00 00       	mov    eax,0xb
c0012e38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e3c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e43:	80 f9 19             	cmp    cl,0x19
c0012e46:	77 2f                	ja     c0012e77 <File::unlink()+0x47>
c0012e48:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0012e4f:	85 c9                	test   ecx,ecx
c0012e51:	74 24                	je     c0012e77 <File::unlink()+0x47>
c0012e53:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e59:	85 c9                	test   ecx,ecx
c0012e5b:	74 1a                	je     c0012e77 <File::unlink()+0x47>
c0012e5d:	b8 06 00 00 00       	mov    eax,0x6
c0012e62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e66:	75 0f                	jne    c0012e77 <File::unlink()+0x47>
c0012e68:	83 c2 0d             	add    edx,0xd
c0012e6b:	50                   	push   eax
c0012e6c:	50                   	push   eax
c0012e6d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e6f:	52                   	push   edx
c0012e70:	51                   	push   ecx
c0012e71:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e74:	83 c4 10             	add    esp,0x10
c0012e77:	83 c4 0c             	add    esp,0xc
c0012e7a:	c3                   	ret    
c0012e7b:	90                   	nop

c0012e7c <File::rename(char const*)>:
c0012e7c:	83 ec 0c             	sub    esp,0xc
c0012e7f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e88:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e8f:	80 f9 19             	cmp    cl,0x19
c0012e92:	77 32                	ja     c0012ec6 <File::rename(char const*)+0x4a>
c0012e94:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0012e9b:	85 c9                	test   ecx,ecx
c0012e9d:	74 27                	je     c0012ec6 <File::rename(char const*)+0x4a>
c0012e9f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ea5:	85 c9                	test   ecx,ecx
c0012ea7:	74 1d                	je     c0012ec6 <File::rename(char const*)+0x4a>
c0012ea9:	b8 06 00 00 00       	mov    eax,0x6
c0012eae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eb2:	75 12                	jne    c0012ec6 <File::rename(char const*)+0x4a>
c0012eb4:	83 c2 0d             	add    edx,0xd
c0012eb7:	50                   	push   eax
c0012eb8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ebe:	52                   	push   edx
c0012ebf:	51                   	push   ecx
c0012ec0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012ec3:	83 c4 10             	add    esp,0x10
c0012ec6:	83 c4 0c             	add    esp,0xc
c0012ec9:	c3                   	ret    

c0012eca <File::chfatattr(unsigned char, unsigned char)>:
c0012eca:	57                   	push   edi
c0012ecb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ed0:	56                   	push   esi
c0012ed1:	53                   	push   ebx
c0012ed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ed6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012eda:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ee1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012ee5:	80 f9 19             	cmp    cl,0x19
c0012ee8:	77 37                	ja     c0012f21 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012eea:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0012ef1:	85 c9                	test   ecx,ecx
c0012ef3:	74 2c                	je     c0012f21 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ef5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012efb:	85 c9                	test   ecx,ecx
c0012efd:	74 22                	je     c0012f21 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012eff:	b8 06 00 00 00       	mov    eax,0x6
c0012f04:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f08:	75 17                	jne    c0012f21 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f0a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012f0c:	89 f0                	mov    eax,esi
c0012f0e:	83 c2 0d             	add    edx,0xd
c0012f11:	0f b6 f0             	movzx  esi,al
c0012f14:	0f b6 db             	movzx  ebx,bl
c0012f17:	56                   	push   esi
c0012f18:	53                   	push   ebx
c0012f19:	52                   	push   edx
c0012f1a:	51                   	push   ecx
c0012f1b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012f1e:	83 c4 10             	add    esp,0x10
c0012f21:	5b                   	pop    ebx
c0012f22:	5e                   	pop    esi
c0012f23:	5f                   	pop    edi
c0012f24:	c3                   	ret    
c0012f25:	90                   	nop

c0012f26 <File::exists()>:
c0012f26:	83 ec 0c             	sub    esp,0xc
c0012f29:	31 c0                	xor    eax,eax
c0012f2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f2f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f36:	80 f9 19             	cmp    cl,0x19
c0012f39:	77 24                	ja     c0012f5f <File::exists()+0x39>
c0012f3b:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0012f42:	85 c9                	test   ecx,ecx
c0012f44:	74 19                	je     c0012f5f <File::exists()+0x39>
c0012f46:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f4c:	85 c9                	test   ecx,ecx
c0012f4e:	74 0f                	je     c0012f5f <File::exists()+0x39>
c0012f50:	83 c2 0d             	add    edx,0xd
c0012f53:	50                   	push   eax
c0012f54:	50                   	push   eax
c0012f55:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f57:	52                   	push   edx
c0012f58:	51                   	push   ecx
c0012f59:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f5c:	83 c4 10             	add    esp,0x10
c0012f5f:	83 c4 0c             	add    esp,0xc
c0012f62:	c3                   	ret    
c0012f63:	90                   	nop

c0012f64 <File::stat(unsigned long long*, bool*)>:
c0012f64:	56                   	push   esi
c0012f65:	53                   	push   ebx
c0012f66:	50                   	push   eax
c0012f67:	b8 0b 00 00 00       	mov    eax,0xb
c0012f6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f70:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f74:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f7b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f7f:	80 f9 19             	cmp    cl,0x19
c0012f82:	77 3d                	ja     c0012fc1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f84:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0012f8b:	85 c9                	test   ecx,ecx
c0012f8d:	74 32                	je     c0012fc1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f8f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f95:	85 c9                	test   ecx,ecx
c0012f97:	74 28                	je     c0012fc1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f99:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f9b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f9f:	74 13                	je     c0012fb4 <File::stat(unsigned long long*, bool*)+0x50>
c0012fa1:	83 ec 04             	sub    esp,0x4
c0012fa4:	56                   	push   esi
c0012fa5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012fab:	51                   	push   ecx
c0012fac:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012faf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012fb2:	eb 0a                	jmp    c0012fbe <File::stat(unsigned long long*, bool*)+0x5a>
c0012fb4:	53                   	push   ebx
c0012fb5:	83 c2 0d             	add    edx,0xd
c0012fb8:	56                   	push   esi
c0012fb9:	52                   	push   edx
c0012fba:	51                   	push   ecx
c0012fbb:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012fbe:	83 c4 10             	add    esp,0x10
c0012fc1:	5a                   	pop    edx
c0012fc2:	5b                   	pop    ebx
c0012fc3:	5e                   	pop    esi
c0012fc4:	c3                   	ret    

c0012fc5 <Fs::setcwd(Process*, char*)>:
c0012fc5:	55                   	push   ebp
c0012fc6:	57                   	push   edi
c0012fc7:	56                   	push   esi
c0012fc8:	53                   	push   ebx
c0012fc9:	81 ec 20 02 00 00    	sub    esp,0x220
c0012fcf:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012fd6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012fdc:	57                   	push   edi
c0012fdd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012fe4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012fe8:	56                   	push   esi
c0012fe9:	e8 bc fa ff ff       	call   c0012aaa <Fs::standardiseFiles(char*, char const*, char const*)>
c0012fee:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ff1:	e8 76 d7 fe ff       	call   c000076c <strlen>
c0012ff6:	83 c4 10             	add    esp,0x10
c0012ff9:	83 f8 02             	cmp    eax,0x2
c0012ffc:	77 17                	ja     c0013015 <Fs::setcwd(Process*, char*)+0x50>
c0012ffe:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013003:	83 e8 41             	sub    eax,0x41
c0013006:	83 f8 19             	cmp    eax,0x19
c0013009:	76 24                	jbe    c001302f <Fs::setcwd(Process*, char*)+0x6a>
c001300b:	b8 03 00 00 00       	mov    eax,0x3
c0013010:	e9 e0 00 00 00       	jmp    c00130f5 <Fs::setcwd(Process*, char*)+0x130>
c0013015:	83 ec 0c             	sub    esp,0xc
c0013018:	56                   	push   esi
c0013019:	e8 4e d7 fe ff       	call   c000076c <strlen>
c001301e:	83 c4 10             	add    esp,0x10
c0013021:	83 f8 03             	cmp    eax,0x3
c0013024:	75 34                	jne    c001305a <Fs::setcwd(Process*, char*)+0x95>
c0013026:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001302b:	75 2d                	jne    c001305a <Fs::setcwd(Process*, char*)+0x95>
c001302d:	eb cf                	jmp    c0012ffe <Fs::setcwd(Process*, char*)+0x39>
c001302f:	8b 14 85 00 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2000]
c0013036:	b8 05 00 00 00       	mov    eax,0x5
c001303b:	85 d2                	test   edx,edx
c001303d:	0f 84 b2 00 00 00    	je     c00130f5 <Fs::setcwd(Process*, char*)+0x130>
c0013043:	b8 06 00 00 00       	mov    eax,0x6
c0013048:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001304f:	0f 85 92 00 00 00    	jne    c00130e7 <Fs::setcwd(Process*, char*)+0x122>
c0013055:	e9 9b 00 00 00       	jmp    c00130f5 <Fs::setcwd(Process*, char*)+0x130>
c001305a:	83 ec 0c             	sub    esp,0xc
c001305d:	68 14 01 00 00       	push   0x114
c0013062:	e8 32 c5 ff ff       	call   c000f599 <malloc>
c0013067:	83 c4 0c             	add    esp,0xc
c001306a:	89 c3                	mov    ebx,eax
c001306c:	55                   	push   ebp
c001306d:	56                   	push   esi
c001306e:	50                   	push   eax
c001306f:	e8 e0 fb ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c0013074:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013079:	83 c4 0c             	add    esp,0xc
c001307c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013080:	50                   	push   eax
c0013081:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013085:	50                   	push   eax
c0013086:	53                   	push   ebx
c0013087:	e8 d8 fe ff ff       	call   c0012f64 <File::stat(unsigned long long*, bool*)>
c001308c:	83 c4 10             	add    esp,0x10
c001308f:	83 f8 02             	cmp    eax,0x2
c0013092:	74 04                	je     c0013098 <Fs::setcwd(Process*, char*)+0xd3>
c0013094:	85 c0                	test   eax,eax
c0013096:	74 1c                	je     c00130b4 <Fs::setcwd(Process*, char*)+0xef>
c0013098:	b8 01 00 00 00       	mov    eax,0x1
c001309d:	85 db                	test   ebx,ebx
c001309f:	74 54                	je     c00130f5 <Fs::setcwd(Process*, char*)+0x130>
c00130a1:	83 ec 0c             	sub    esp,0xc
c00130a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130a6:	53                   	push   ebx
c00130a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130aa:	83 c4 10             	add    esp,0x10
c00130ad:	b8 01 00 00 00       	mov    eax,0x1
c00130b2:	eb 41                	jmp    c00130f5 <Fs::setcwd(Process*, char*)+0x130>
c00130b4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00130b9:	75 1c                	jne    c00130d7 <Fs::setcwd(Process*, char*)+0x112>
c00130bb:	b8 02 00 00 00       	mov    eax,0x2
c00130c0:	85 db                	test   ebx,ebx
c00130c2:	74 31                	je     c00130f5 <Fs::setcwd(Process*, char*)+0x130>
c00130c4:	83 ec 0c             	sub    esp,0xc
c00130c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130c9:	53                   	push   ebx
c00130ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130cd:	83 c4 10             	add    esp,0x10
c00130d0:	b8 02 00 00 00       	mov    eax,0x2
c00130d5:	eb 1e                	jmp    c00130f5 <Fs::setcwd(Process*, char*)+0x130>
c00130d7:	85 db                	test   ebx,ebx
c00130d9:	74 0c                	je     c00130e7 <Fs::setcwd(Process*, char*)+0x122>
c00130db:	83 ec 0c             	sub    esp,0xc
c00130de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130e0:	53                   	push   ebx
c00130e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130e4:	83 c4 10             	add    esp,0x10
c00130e7:	50                   	push   eax
c00130e8:	50                   	push   eax
c00130e9:	56                   	push   esi
c00130ea:	57                   	push   edi
c00130eb:	e8 1c d7 fe ff       	call   c000080c <strcpy>
c00130f0:	83 c4 10             	add    esp,0x10
c00130f3:	31 c0                	xor    eax,eax
c00130f5:	81 c4 1c 02 00 00    	add    esp,0x21c
c00130fb:	5b                   	pop    ebx
c00130fc:	5e                   	pop    esi
c00130fd:	5f                   	pop    edi
c00130fe:	5d                   	pop    ebp
c00130ff:	c3                   	ret    

c0013100 <Directory::Directory(char const*, Process*)>:
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013107:	83 ec 08             	sub    esp,0x8
c001310a:	6a 00                	push   0x0
c001310c:	50                   	push   eax
c001310d:	e8 c8 dc ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c0013112:	83 c4 10             	add    esp,0x10
c0013115:	ba 98 a9 02 c0       	mov    edx,0xc002a998
c001311a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311e:	89 10                	mov    DWORD PTR [eax],edx
c0013120:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013124:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001312a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312e:	83 c0 0d             	add    eax,0xd
c0013131:	83 ec 04             	sub    esp,0x4
c0013134:	52                   	push   edx
c0013135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013139:	50                   	push   eax
c001313a:	e8 6b f9 ff ff       	call   c0012aaa <Fs::standardiseFiles(char*, char const*, char const*)>
c001313f:	83 c4 10             	add    esp,0x10
c0013142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013146:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013149:	8d 50 bf             	lea    edx,[eax-0x41]
c001314c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013150:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001315a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001315e:	90                   	nop
c001315f:	83 c4 0c             	add    esp,0xc
c0013162:	c3                   	ret    
c0013163:	90                   	nop

c0013164 <Directory::open()>:
c0013164:	53                   	push   ebx
c0013165:	b8 0b 00 00 00       	mov    eax,0xb
c001316a:	83 ec 08             	sub    esp,0x8
c001316d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013171:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013178:	80 fa 19             	cmp    dl,0x19
c001317b:	77 3d                	ja     c00131ba <Directory::open()+0x56>
c001317d:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0013184:	85 d2                	test   edx,edx
c0013186:	74 32                	je     c00131ba <Directory::open()+0x56>
c0013188:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001318e:	85 d2                	test   edx,edx
c0013190:	74 28                	je     c00131ba <Directory::open()+0x56>
c0013192:	b8 06 00 00 00       	mov    eax,0x6
c0013197:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001319b:	75 1d                	jne    c00131ba <Directory::open()+0x56>
c001319d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00131a3:	50                   	push   eax
c00131a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00131a6:	51                   	push   ecx
c00131a7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00131aa:	51                   	push   ecx
c00131ab:	52                   	push   edx
c00131ac:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00131af:	83 c4 10             	add    esp,0x10
c00131b2:	85 c0                	test   eax,eax
c00131b4:	75 04                	jne    c00131ba <Directory::open()+0x56>
c00131b6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00131ba:	83 c4 08             	add    esp,0x8
c00131bd:	5b                   	pop    ebx
c00131be:	c3                   	ret    
c00131bf:	90                   	nop

c00131c0 <Directory::close()>:
c00131c0:	53                   	push   ebx
c00131c1:	b8 0b 00 00 00       	mov    eax,0xb
c00131c6:	83 ec 08             	sub    esp,0x8
c00131c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131cd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131d4:	80 fa 19             	cmp    dl,0x19
c00131d7:	77 41                	ja     c001321a <Directory::close()+0x5a>
c00131d9:	8b 1c 95 00 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2000]
c00131e0:	85 db                	test   ebx,ebx
c00131e2:	74 36                	je     c001321a <Directory::close()+0x5a>
c00131e4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131eb:	74 2d                	je     c001321a <Directory::close()+0x5a>
c00131ed:	b8 05 00 00 00       	mov    eax,0x5
c00131f2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131f6:	74 22                	je     c001321a <Directory::close()+0x5a>
c00131f8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131fc:	8b 04 95 00 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2000]
c0013203:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013209:	53                   	push   ebx
c001320a:	53                   	push   ebx
c001320b:	8b 10                	mov    edx,DWORD PTR [eax]
c001320d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013213:	50                   	push   eax
c0013214:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013217:	83 c4 10             	add    esp,0x10
c001321a:	83 c4 08             	add    esp,0x8
c001321d:	5b                   	pop    ebx
c001321e:	c3                   	ret    
c001321f:	90                   	nop

c0013220 <Directory::unlink()>:
c0013220:	83 ec 0c             	sub    esp,0xc
c0013223:	b8 0b 00 00 00       	mov    eax,0xb
c0013228:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001322c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013233:	80 f9 19             	cmp    cl,0x19
c0013236:	77 2f                	ja     c0013267 <Directory::unlink()+0x47>
c0013238:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c001323f:	85 c9                	test   ecx,ecx
c0013241:	74 24                	je     c0013267 <Directory::unlink()+0x47>
c0013243:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013249:	85 c9                	test   ecx,ecx
c001324b:	74 1a                	je     c0013267 <Directory::unlink()+0x47>
c001324d:	b8 06 00 00 00       	mov    eax,0x6
c0013252:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013256:	75 0f                	jne    c0013267 <Directory::unlink()+0x47>
c0013258:	83 c2 0d             	add    edx,0xd
c001325b:	50                   	push   eax
c001325c:	50                   	push   eax
c001325d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001325f:	52                   	push   edx
c0013260:	51                   	push   ecx
c0013261:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	83 c4 0c             	add    esp,0xc
c001326a:	c3                   	ret    
c001326b:	90                   	nop

c001326c <Directory::rename(char const*)>:
c001326c:	83 ec 0c             	sub    esp,0xc
c001326f:	b8 0b 00 00 00       	mov    eax,0xb
c0013274:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013278:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001327f:	80 f9 19             	cmp    cl,0x19
c0013282:	77 32                	ja     c00132b6 <Directory::rename(char const*)+0x4a>
c0013284:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c001328b:	85 c9                	test   ecx,ecx
c001328d:	74 27                	je     c00132b6 <Directory::rename(char const*)+0x4a>
c001328f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013295:	85 c9                	test   ecx,ecx
c0013297:	74 1d                	je     c00132b6 <Directory::rename(char const*)+0x4a>
c0013299:	b8 06 00 00 00       	mov    eax,0x6
c001329e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132a2:	75 12                	jne    c00132b6 <Directory::rename(char const*)+0x4a>
c00132a4:	83 c2 0d             	add    edx,0xd
c00132a7:	50                   	push   eax
c00132a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132ae:	52                   	push   edx
c00132af:	51                   	push   ecx
c00132b0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00132b3:	83 c4 10             	add    esp,0x10
c00132b6:	83 c4 0c             	add    esp,0xc
c00132b9:	c3                   	ret    

c00132ba <Directory::exists()>:
c00132ba:	83 ec 0c             	sub    esp,0xc
c00132bd:	31 c0                	xor    eax,eax
c00132bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132c3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132ca:	80 f9 19             	cmp    cl,0x19
c00132cd:	77 24                	ja     c00132f3 <Directory::exists()+0x39>
c00132cf:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c00132d6:	85 c9                	test   ecx,ecx
c00132d8:	74 19                	je     c00132f3 <Directory::exists()+0x39>
c00132da:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132e0:	85 c9                	test   ecx,ecx
c00132e2:	74 0f                	je     c00132f3 <Directory::exists()+0x39>
c00132e4:	83 c2 0d             	add    edx,0xd
c00132e7:	50                   	push   eax
c00132e8:	50                   	push   eax
c00132e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132eb:	52                   	push   edx
c00132ec:	51                   	push   ecx
c00132ed:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00132f0:	83 c4 10             	add    esp,0x10
c00132f3:	83 c4 0c             	add    esp,0xc
c00132f6:	c3                   	ret    
c00132f7:	90                   	nop

c00132f8 <Directory::read(dirent*)>:
c00132f8:	83 ec 1c             	sub    esp,0x1c
c00132fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013300:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013304:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001330b:	80 fa 19             	cmp    dl,0x19
c001330e:	77 30                	ja     c0013340 <Directory::read(dirent*)+0x48>
c0013310:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0013317:	85 d2                	test   edx,edx
c0013319:	74 25                	je     c0013340 <Directory::read(dirent*)+0x48>
c001331b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013322:	74 1c                	je     c0013340 <Directory::read(dirent*)+0x48>
c0013324:	83 ec 0c             	sub    esp,0xc
c0013327:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013329:	8d 54 24 18          	lea    edx,[esp+0x18]
c001332d:	52                   	push   edx
c001332e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013332:	6a 00                	push   0x0
c0013334:	68 10 01 00 00       	push   0x110
c0013339:	51                   	push   ecx
c001333a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001333d:	83 c4 20             	add    esp,0x20
c0013340:	83 c4 1c             	add    esp,0x1c
c0013343:	c3                   	ret    

c0013344 <Directory::create()>:
c0013344:	83 ec 0c             	sub    esp,0xc
c0013347:	b8 0b 00 00 00       	mov    eax,0xb
c001334c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013350:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013357:	80 f9 19             	cmp    cl,0x19
c001335a:	77 2f                	ja     c001338b <Directory::create()+0x47>
c001335c:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c0013363:	85 c9                	test   ecx,ecx
c0013365:	74 24                	je     c001338b <Directory::create()+0x47>
c0013367:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001336d:	85 c9                	test   ecx,ecx
c001336f:	74 1a                	je     c001338b <Directory::create()+0x47>
c0013371:	b8 06 00 00 00       	mov    eax,0x6
c0013376:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001337a:	75 0f                	jne    c001338b <Directory::create()+0x47>
c001337c:	83 c2 0d             	add    edx,0xd
c001337f:	50                   	push   eax
c0013380:	50                   	push   eax
c0013381:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013383:	52                   	push   edx
c0013384:	51                   	push   ecx
c0013385:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013388:	83 c4 10             	add    esp,0x10
c001338b:	83 c4 0c             	add    esp,0xc
c001338e:	c3                   	ret    
c001338f:	90                   	nop

c0013390 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013390:	b8 0a 00 00 00       	mov    eax,0xa
c0013395:	c3                   	ret    

c0013396 <Bus::Bus(char const*)>:
c0013396:	83 ec 0c             	sub    esp,0xc
c0013399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001339d:	83 ec 08             	sub    esp,0x8
c00133a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133a4:	50                   	push   eax
c00133a5:	e8 88 09 00 00       	call   c0013d32 <Device::Device(char const*)>
c00133aa:	83 c4 10             	add    esp,0x10
c00133ad:	ba b4 a9 02 c0       	mov    edx,0xc002a9b4
c00133b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b6:	89 10                	mov    DWORD PTR [eax],edx
c00133b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133bc:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00133c6:	90                   	nop
c00133c7:	83 c4 0c             	add    esp,0xc
c00133ca:	c3                   	ret    
c00133cb:	90                   	nop

c00133cc <Bus::~Bus()>:
c00133cc:	83 ec 0c             	sub    esp,0xc
c00133cf:	ba b4 a9 02 c0       	mov    edx,0xc002a9b4
c00133d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d8:	89 10                	mov    DWORD PTR [eax],edx
c00133da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133de:	83 ec 0c             	sub    esp,0xc
c00133e1:	50                   	push   eax
c00133e2:	e8 15 06 00 00       	call   c00139fc <Device::~Device()>
c00133e7:	83 c4 10             	add    esp,0x10
c00133ea:	90                   	nop
c00133eb:	83 c4 0c             	add    esp,0xc
c00133ee:	c3                   	ret    
c00133ef:	90                   	nop

c00133f0 <Bus::~Bus()>:
c00133f0:	83 ec 0c             	sub    esp,0xc
c00133f3:	83 ec 0c             	sub    esp,0xc
c00133f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133fa:	e8 cd ff ff ff       	call   c00133cc <Bus::~Bus()>
c00133ff:	83 c4 10             	add    esp,0x10
c0013402:	83 ec 08             	sub    esp,0x8
c0013405:	68 58 01 00 00       	push   0x158
c001340a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001340e:	e8 0a f2 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0013413:	83 c4 10             	add    esp,0x10
c0013416:	83 c4 0c             	add    esp,0xc
c0013419:	c3                   	ret    

c001341a <Buzzer::Buzzer(char const*)>:
c001341a:	83 ec 0c             	sub    esp,0xc
c001341d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013421:	83 ec 08             	sub    esp,0x8
c0013424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013428:	50                   	push   eax
c0013429:	e8 04 09 00 00       	call   c0013d32 <Device::Device(char const*)>
c001342e:	83 c4 10             	add    esp,0x10
c0013431:	ba e0 a9 02 c0       	mov    edx,0xc002a9e0
c0013436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343a:	89 10                	mov    DWORD PTR [eax],edx
c001343c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013440:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001344a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013458:	90                   	nop
c0013459:	83 c4 0c             	add    esp,0xc
c001345c:	c3                   	ret    
c001345d:	90                   	nop

c001345e <Buzzer::~Buzzer()>:
c001345e:	83 ec 0c             	sub    esp,0xc
c0013461:	ba e0 a9 02 c0       	mov    edx,0xc002a9e0
c0013466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346a:	89 10                	mov    DWORD PTR [eax],edx
c001346c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013470:	83 ec 0c             	sub    esp,0xc
c0013473:	50                   	push   eax
c0013474:	e8 83 05 00 00       	call   c00139fc <Device::~Device()>
c0013479:	83 c4 10             	add    esp,0x10
c001347c:	90                   	nop
c001347d:	83 c4 0c             	add    esp,0xc
c0013480:	c3                   	ret    
c0013481:	90                   	nop

c0013482 <Buzzer::~Buzzer()>:
c0013482:	83 ec 0c             	sub    esp,0xc
c0013485:	83 ec 0c             	sub    esp,0xc
c0013488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001348c:	e8 cd ff ff ff       	call   c001345e <Buzzer::~Buzzer()>
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	83 ec 08             	sub    esp,0x8
c0013497:	68 5c 01 00 00       	push   0x15c
c001349c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a0:	e8 78 f1 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c00134a5:	83 c4 10             	add    esp,0x10
c00134a8:	83 c4 0c             	add    esp,0xc
c00134ab:	c3                   	ret    

c00134ac <Buzzer::stop()>:
c00134ac:	83 ec 14             	sub    esp,0x14
c00134af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00134b5:	6a 00                	push   0x0
c00134b7:	50                   	push   eax
c00134b8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00134bb:	83 c4 1c             	add    esp,0x1c
c00134be:	c3                   	ret    

c00134bf <beepThread(void*)>:
c00134bf:	53                   	push   ebx
c00134c0:	83 ec 08             	sub    esp,0x8
c00134c3:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00134c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134cc:	48                   	dec    eax
c00134cd:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c00134d2:	75 01                	jne    c00134d5 <beepThread(void*)+0x16>
c00134d4:	fb                   	sti    
c00134d5:	50                   	push   eax
c00134d6:	50                   	push   eax
c00134d7:	b8 40 42 0f 00       	mov    eax,0xf4240
c00134dc:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00134e2:	52                   	push   edx
c00134e3:	50                   	push   eax
c00134e4:	e8 e2 a7 00 00       	call   c001dccb <nanoSleep(unsigned long long)>
c00134e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134ec:	e8 bb ff ff ff       	call   c00134ac <Buzzer::stop()>
c00134f1:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00134f9:	83 c4 18             	add    esp,0x18
c00134fc:	5b                   	pop    ebx
c00134fd:	e9 c5 a6 00 00       	jmp    c001dbc7 <blockTask(TaskState)>

c0013502 <Buzzer::beep(int, int, bool)>:
c0013502:	57                   	push   edi
c0013503:	56                   	push   esi
c0013504:	53                   	push   ebx
c0013505:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013509:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001350d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013511:	52                   	push   edx
c0013512:	52                   	push   edx
c0013513:	8b 06                	mov    eax,DWORD PTR [esi]
c0013515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013519:	56                   	push   esi
c001351a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001351d:	83 c4 10             	add    esp,0x10
c0013520:	89 f8                	mov    eax,edi
c0013522:	84 c0                	test   al,al
c0013524:	74 1f                	je     c0013545 <Buzzer::beep(int, int, bool)+0x43>
c0013526:	50                   	push   eax
c0013527:	50                   	push   eax
c0013528:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001352e:	99                   	cdq    
c001352f:	52                   	push   edx
c0013530:	50                   	push   eax
c0013531:	e8 95 a7 00 00       	call   c001dccb <nanoSleep(unsigned long long)>
c0013536:	83 c4 10             	add    esp,0x10
c0013539:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001353d:	5b                   	pop    ebx
c001353e:	5e                   	pop    esi
c001353f:	5f                   	pop    edi
c0013540:	e9 67 ff ff ff       	jmp    c00134ac <Buzzer::stop()>
c0013545:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001354b:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0013550:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013558:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001355c:	c7 44 24 14 bf 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc00134bf
c0013564:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013568:	5b                   	pop    ebx
c0013569:	5e                   	pop    esi
c001356a:	5f                   	pop    edi
c001356b:	e9 5c a2 00 00       	jmp    c001d7cc <Process::createThread(void (*)(void*), void*, int)>

c0013570 <User::loadClockSettings(int)>:
c0013570:	53                   	push   ebx
c0013571:	83 ec 14             	sub    esp,0x14
c0013574:	68 14 01 00 00       	push   0x114
c0013579:	e8 1b c0 ff ff       	call   c000f599 <malloc>
c001357e:	83 c4 0c             	add    esp,0xc
c0013581:	89 c3                	mov    ebx,eax
c0013583:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c0013589:	68 08 aa 02 c0       	push   0xc002aa08
c001358e:	50                   	push   eax
c001358f:	e8 c0 f6 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c0013594:	58                   	pop    eax
c0013595:	5a                   	pop    edx
c0013596:	6a 01                	push   0x1
c0013598:	53                   	push   ebx
c0013599:	e8 1a f7 ff ff       	call   c0012cb8 <File::open(FileOpenMode)>
c001359e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135a1:	e8 70 f7 ff ff       	call   c0012d16 <File::close()>
c00135a6:	83 c4 10             	add    esp,0x10
c00135a9:	85 db                	test   ebx,ebx
c00135ab:	74 0f                	je     c00135bc <User::loadClockSettings(int)+0x4c>
c00135ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00135b3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00135b6:	83 c4 08             	add    esp,0x8
c00135b9:	5b                   	pop    ebx
c00135ba:	ff e0                	jmp    eax
c00135bc:	83 c4 08             	add    esp,0x8
c00135bf:	5b                   	pop    ebx
c00135c0:	c3                   	ret    
c00135c1:	90                   	nop

c00135c2 <Clock::Clock(char const*)>:
c00135c2:	83 ec 0c             	sub    esp,0xc
c00135c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c9:	83 ec 08             	sub    esp,0x8
c00135cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d0:	50                   	push   eax
c00135d1:	e8 5c 07 00 00       	call   c0013d32 <Device::Device(char const*)>
c00135d6:	83 c4 10             	add    esp,0x10
c00135d9:	ba 30 aa 02 c0       	mov    edx,0xc002aa30
c00135de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e2:	89 10                	mov    DWORD PTR [eax],edx
c00135e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00135f2:	90                   	nop
c00135f3:	83 c4 0c             	add    esp,0xc
c00135f6:	c3                   	ret    
c00135f7:	90                   	nop

c00135f8 <Clock::~Clock()>:
c00135f8:	83 ec 0c             	sub    esp,0xc
c00135fb:	ba 30 aa 02 c0       	mov    edx,0xc002aa30
c0013600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013604:	89 10                	mov    DWORD PTR [eax],edx
c0013606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001360a:	83 ec 0c             	sub    esp,0xc
c001360d:	50                   	push   eax
c001360e:	e8 e9 03 00 00       	call   c00139fc <Device::~Device()>
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	90                   	nop
c0013617:	83 c4 0c             	add    esp,0xc
c001361a:	c3                   	ret    
c001361b:	90                   	nop

c001361c <Clock::~Clock()>:
c001361c:	83 ec 0c             	sub    esp,0xc
c001361f:	83 ec 0c             	sub    esp,0xc
c0013622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013626:	e8 cd ff ff ff       	call   c00135f8 <Clock::~Clock()>
c001362b:	83 c4 10             	add    esp,0x10
c001362e:	83 ec 08             	sub    esp,0x8
c0013631:	68 58 01 00 00       	push   0x158
c0013636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001363a:	e8 de ef ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c001363f:	83 c4 10             	add    esp,0x10
c0013642:	83 c4 0c             	add    esp,0xc
c0013645:	c3                   	ret    

c0013646 <Clock::timeInSecondsLocal()>:
c0013646:	53                   	push   ebx
c0013647:	83 ec 14             	sub    esp,0x14
c001364a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001364e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013650:	50                   	push   eax
c0013651:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013654:	0f b6 0d 7c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db7c
c001365b:	03 0d 80 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db80
c0013661:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013667:	89 cb                	mov    ebx,ecx
c0013669:	c1 fb 1f             	sar    ebx,0x1f
c001366c:	01 c8                	add    eax,ecx
c001366e:	11 da                	adc    edx,ebx
c0013670:	83 c4 10             	add    esp,0x10
c0013673:	31 c9                	xor    ecx,ecx
c0013675:	80 3d 7d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db7d,0x0
c001367c:	74 05                	je     c0013683 <Clock::timeInSecondsLocal()+0x3d>
c001367e:	b9 08 07 00 00       	mov    ecx,0x708
c0013683:	31 db                	xor    ebx,ebx
c0013685:	01 c8                	add    eax,ecx
c0013687:	11 da                	adc    edx,ebx
c0013689:	83 c4 08             	add    esp,0x8
c001368c:	5b                   	pop    ebx
c001368d:	c3                   	ret    

c001368e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001368e:	57                   	push   edi
c001368f:	56                   	push   esi
c0013690:	53                   	push   ebx
c0013691:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013695:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013699:	8b 01                	mov    eax,DWORD PTR [ecx]
c001369b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001369f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00136a2:	0f b6 05 7c db 02 c0 	movzx  eax,BYTE PTR ds:0xc002db7c
c00136a9:	03 05 80 db 02 c0    	add    eax,DWORD PTR ds:0xc002db80
c00136af:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00136b5:	99                   	cdq    
c00136b6:	29 c6                	sub    esi,eax
c00136b8:	19 d7                	sbb    edi,edx
c00136ba:	89 f0                	mov    eax,esi
c00136bc:	89 fa                	mov    edx,edi
c00136be:	31 f6                	xor    esi,esi
c00136c0:	80 3d 7d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db7d,0x0
c00136c7:	74 05                	je     c00136ce <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00136c9:	be 08 07 00 00       	mov    esi,0x708
c00136ce:	31 ff                	xor    edi,edi
c00136d0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00136d4:	29 f0                	sub    eax,esi
c00136d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136da:	19 fa                	sbb    edx,edi
c00136dc:	89 d8                	mov    eax,ebx
c00136de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00136e2:	5b                   	pop    ebx
c00136e3:	5e                   	pop    esi
c00136e4:	5f                   	pop    edi
c00136e5:	ff e0                	jmp    eax

c00136e7 <datetimeToSeconds(datetime_t)>:
c00136e7:	55                   	push   ebp
c00136e8:	57                   	push   edi
c00136e9:	56                   	push   esi
c00136ea:	53                   	push   ebx
c00136eb:	83 ec 14             	sub    esp,0x14
c00136ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00136f2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00136f6:	89 d3                	mov    ebx,edx
c00136f8:	0f b6 c6             	movzx  eax,dh
c00136fb:	c1 eb 10             	shr    ebx,0x10
c00136fe:	48                   	dec    eax
c00136ff:	66 81 eb 6c 07       	sub    bx,0x76c
c0013704:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013708:	0f b6 f5             	movzx  esi,ch
c001370b:	89 cf                	mov    edi,ecx
c001370d:	6b f6 3c             	imul   esi,esi,0x3c
c0013710:	c1 ef 10             	shr    edi,0x10
c0013713:	0f b6 c9             	movzx  ecx,cl
c0013716:	89 f8                	mov    eax,edi
c0013718:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001371e:	0f b6 f8             	movzx  edi,al
c0013721:	0f b6 d2             	movzx  edx,dl
c0013724:	01 fe                	add    esi,edi
c0013726:	01 f1                	add    ecx,esi
c0013728:	0f b7 f3             	movzx  esi,bx
c001372b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001372f:	c1 f9 1f             	sar    ecx,0x1f
c0013732:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013737:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001373b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013740:	8b 0c 8d 80 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5580]
c0013747:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001374b:	76 29                	jbe    c0013776 <datetimeToSeconds(datetime_t)+0x8f>
c001374d:	f6 c3 03             	test   bl,0x3
c0013750:	75 24                	jne    c0013776 <datetimeToSeconds(datetime_t)+0x8f>
c0013752:	31 d2                	xor    edx,edx
c0013754:	bf 64 00 00 00       	mov    edi,0x64
c0013759:	89 d8                	mov    eax,ebx
c001375b:	66 f7 f7             	div    di
c001375e:	66 85 d2             	test   dx,dx
c0013761:	75 12                	jne    c0013775 <datetimeToSeconds(datetime_t)+0x8e>
c0013763:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013769:	bf 90 01 00 00       	mov    edi,0x190
c001376e:	99                   	cdq    
c001376f:	f7 ff                	idiv   edi
c0013771:	85 d2                	test   edx,edx
c0013773:	75 01                	jne    c0013776 <datetimeToSeconds(datetime_t)+0x8f>
c0013775:	41                   	inc    ecx
c0013776:	66 83 fb 46          	cmp    bx,0x46
c001377a:	76 45                	jbe    c00137c1 <datetimeToSeconds(datetime_t)+0xda>
c001377c:	bb 46 00 00 00       	mov    ebx,0x46
c0013781:	bf 64 00 00 00       	mov    edi,0x64
c0013786:	bd 90 01 00 00       	mov    ebp,0x190
c001378b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013790:	f6 c3 03             	test   bl,0x3
c0013793:	75 23                	jne    c00137b8 <datetimeToSeconds(datetime_t)+0xd1>
c0013795:	89 d8                	mov    eax,ebx
c0013797:	99                   	cdq    
c0013798:	f7 ff                	idiv   edi
c001379a:	b8 6e 01 00 00       	mov    eax,0x16e
c001379f:	85 d2                	test   edx,edx
c00137a1:	75 15                	jne    c00137b8 <datetimeToSeconds(datetime_t)+0xd1>
c00137a3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00137a9:	99                   	cdq    
c00137aa:	f7 fd                	idiv   ebp
c00137ac:	83 fa 01             	cmp    edx,0x1
c00137af:	19 c0                	sbb    eax,eax
c00137b1:	f7 d0                	not    eax
c00137b3:	05 6e 01 00 00       	add    eax,0x16e
c00137b8:	01 c1                	add    ecx,eax
c00137ba:	43                   	inc    ebx
c00137bb:	39 f3                	cmp    ebx,esi
c00137bd:	7c cc                	jl     c001378b <datetimeToSeconds(datetime_t)+0xa4>
c00137bf:	eb 35                	jmp    c00137f6 <datetimeToSeconds(datetime_t)+0x10f>
c00137c1:	74 33                	je     c00137f6 <datetimeToSeconds(datetime_t)+0x10f>
c00137c3:	b8 45 00 00 00       	mov    eax,0x45
c00137c8:	89 c2                	mov    edx,eax
c00137ca:	83 e2 03             	and    edx,0x3
c00137cd:	39 f0                	cmp    eax,esi
c00137cf:	7e 0f                	jle    c00137e0 <datetimeToSeconds(datetime_t)+0xf9>
c00137d1:	83 fa 01             	cmp    edx,0x1
c00137d4:	19 d2                	sbb    edx,edx
c00137d6:	48                   	dec    eax
c00137d7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00137de:	eb e8                	jmp    c00137c8 <datetimeToSeconds(datetime_t)+0xe1>
c00137e0:	b8 6d 01 00 00       	mov    eax,0x16d
c00137e5:	85 d2                	test   edx,edx
c00137e7:	75 0b                	jne    c00137f4 <datetimeToSeconds(datetime_t)+0x10d>
c00137e9:	66 83 fb 01          	cmp    bx,0x1
c00137ed:	19 c0                	sbb    eax,eax
c00137ef:	05 6e 01 00 00       	add    eax,0x16e
c00137f4:	29 c1                	sub    ecx,eax
c00137f6:	b8 80 51 01 00       	mov    eax,0x15180
c00137fb:	f7 e9                	imul   ecx
c00137fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013801:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013805:	83 c4 14             	add    esp,0x14
c0013808:	5b                   	pop    ebx
c0013809:	5e                   	pop    esi
c001380a:	5f                   	pop    edi
c001380b:	5d                   	pop    ebp
c001380c:	c3                   	ret    
c001380d:	90                   	nop

c001380e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001380e:	57                   	push   edi
c001380f:	56                   	push   esi
c0013810:	53                   	push   ebx
c0013811:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013815:	8b 06                	mov    eax,DWORD PTR [esi]
c0013817:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001381a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001381e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013822:	e8 c0 fe ff ff       	call   c00136e7 <datetimeToSeconds(datetime_t)>
c0013827:	59                   	pop    ecx
c0013828:	0f b6 0d 7c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db7c
c001382f:	5b                   	pop    ebx
c0013830:	03 0d 80 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db80
c0013836:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001383c:	89 cb                	mov    ebx,ecx
c001383e:	c1 fb 1f             	sar    ebx,0x1f
c0013841:	29 c8                	sub    eax,ecx
c0013843:	19 da                	sbb    edx,ebx
c0013845:	31 c9                	xor    ecx,ecx
c0013847:	80 3d 7d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db7d,0x0
c001384e:	74 05                	je     c0013855 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013850:	b9 08 07 00 00       	mov    ecx,0x708
c0013855:	31 db                	xor    ebx,ebx
c0013857:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001385b:	29 c8                	sub    eax,ecx
c001385d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013861:	19 da                	sbb    edx,ebx
c0013863:	89 f8                	mov    eax,edi
c0013865:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013869:	5b                   	pop    ebx
c001386a:	5e                   	pop    esi
c001386b:	5f                   	pop    edi
c001386c:	ff e0                	jmp    eax

c001386e <secondsToDatetime(unsigned long long)>:
c001386e:	55                   	push   ebp
c001386f:	57                   	push   edi
c0013870:	56                   	push   esi
c0013871:	53                   	push   ebx
c0013872:	83 ec 1c             	sub    esp,0x1c
c0013875:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013879:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001387d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013881:	6a 00                	push   0x0
c0013883:	68 80 51 01 00       	push   0x15180
c0013888:	55                   	push   ebp
c0013889:	57                   	push   edi
c001388a:	e8 a5 2e 01 00       	call   c0026734 <__udivdi3>
c001388f:	83 c4 10             	add    esp,0x10
c0013892:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001389c:	6a 00                	push   0x0
c001389e:	68 80 51 01 00       	push   0x15180
c00138a3:	55                   	push   ebp
c00138a4:	57                   	push   edi
c00138a5:	bf 10 0e 00 00       	mov    edi,0xe10
c00138aa:	e8 85 2f 01 00       	call   c0026834 <__umoddi3>
c00138af:	83 c4 10             	add    esp,0x10
c00138b2:	99                   	cdq    
c00138b3:	f7 ff                	idiv   edi
c00138b5:	bf 3c 00 00 00       	mov    edi,0x3c
c00138ba:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00138bd:	89 d0                	mov    eax,edx
c00138bf:	99                   	cdq    
c00138c0:	f7 ff                	idiv   edi
c00138c2:	85 db                	test   ebx,ebx
c00138c4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00138c7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00138ca:	79 11                	jns    c00138dd <secondsToDatetime(unsigned long long)+0x6f>
c00138cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00138d0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00138d6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138db:	eb 07                	jmp    c00138e4 <secondsToDatetime(unsigned long long)+0x76>
c00138dd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138e2:	89 d8                	mov    eax,ebx
c00138e4:	bf b4 05 00 00       	mov    edi,0x5b4
c00138e9:	99                   	cdq    
c00138ea:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00138ef:	f7 f9                	idiv   ecx
c00138f1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00138f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138fa:	31 d2                	xor    edx,edx
c00138fc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013904:	01 c3                	add    ebx,eax
c0013906:	89 d8                	mov    eax,ebx
c0013908:	f7 f1                	div    ecx
c001390a:	31 d2                	xor    edx,edx
c001390c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001390f:	89 d8                	mov    eax,ebx
c0013911:	f7 f7                	div    edi
c0013913:	31 d2                	xor    edx,edx
c0013915:	29 c1                	sub    ecx,eax
c0013917:	89 d8                	mov    eax,ebx
c0013919:	f7 f5                	div    ebp
c001391b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013920:	29 c1                	sub    ecx,eax
c0013922:	31 d2                	xor    edx,edx
c0013924:	89 c8                	mov    eax,ecx
c0013926:	f7 f5                	div    ebp
c0013928:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001392d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013931:	31 d2                	xor    edx,edx
c0013933:	89 c8                	mov    eax,ecx
c0013935:	f7 f5                	div    ebp
c0013937:	31 d2                	xor    edx,edx
c0013939:	01 c3                	add    ebx,eax
c001393b:	89 c8                	mov    eax,ecx
c001393d:	f7 f7                	div    edi
c001393f:	bf 99 00 00 00       	mov    edi,0x99
c0013944:	29 c3                	sub    ebx,eax
c0013946:	31 d2                	xor    edx,edx
c0013948:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013950:	29 c3                	sub    ebx,eax
c0013952:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013955:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013958:	bb 05 00 00 00       	mov    ebx,0x5
c001395d:	83 c1 02             	add    ecx,0x2
c0013960:	89 c8                	mov    eax,ecx
c0013962:	f7 f7                	div    edi
c0013964:	31 d2                	xor    edx,edx
c0013966:	89 c7                	mov    edi,eax
c0013968:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001396e:	83 c0 02             	add    eax,0x2
c0013971:	f7 f3                	div    ebx
c0013973:	89 eb                	mov    ebx,ebp
c0013975:	29 c3                	sub    ebx,eax
c0013977:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001397d:	88 1e                	mov    BYTE PTR [esi],bl
c001397f:	19 c0                	sbb    eax,eax
c0013981:	31 d2                	xor    edx,edx
c0013983:	83 e0 0c             	and    eax,0xc
c0013986:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001398a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013992:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013996:	83 f9 01             	cmp    ecx,0x1
c0013999:	0f 96 c2             	setbe  dl
c001399c:	41                   	inc    ecx
c001399d:	01 d0                	add    eax,edx
c001399f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00139a2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00139a6:	83 c4 1c             	add    esp,0x1c
c00139a9:	89 f0                	mov    eax,esi
c00139ab:	5b                   	pop    ebx
c00139ac:	5e                   	pop    esi
c00139ad:	5f                   	pop    edi
c00139ae:	5d                   	pop    ebp
c00139af:	c2 04 00             	ret    0x4

c00139b2 <Clock::timeInDatetimeLocal()>:
c00139b2:	53                   	push   ebx
c00139b3:	83 ec 14             	sub    esp,0x14
c00139b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139be:	e8 83 fc ff ff       	call   c0013646 <Clock::timeInSecondsLocal()>
c00139c3:	83 c4 0c             	add    esp,0xc
c00139c6:	52                   	push   edx
c00139c7:	50                   	push   eax
c00139c8:	53                   	push   ebx
c00139c9:	e8 a0 fe ff ff       	call   c001386e <secondsToDatetime(unsigned long long)>
c00139ce:	89 d8                	mov    eax,ebx
c00139d0:	83 c4 14             	add    esp,0x14
c00139d3:	5b                   	pop    ebx
c00139d4:	c2 04 00             	ret    0x4
c00139d7:	90                   	nop

c00139d8 <Device::hibernate()>:
c00139d8:	c3                   	ret    
c00139d9:	90                   	nop

c00139da <Device::wake()>:
c00139da:	c3                   	ret    
c00139db:	90                   	nop

c00139dc <Device::detect()>:
c00139dc:	c3                   	ret    
c00139dd:	90                   	nop

c00139de <Device::disableLegacy()>:
c00139de:	c3                   	ret    
c00139df:	90                   	nop

c00139e0 <Device::powerSaving(PowerSavingLevel)>:
c00139e0:	c3                   	ret    
c00139e1:	90                   	nop

c00139e2 <DriverlessDevice::close(int, int, void*)>:
c00139e2:	31 c0                	xor    eax,eax
c00139e4:	c3                   	ret    
c00139e5:	90                   	nop

c00139e6 <DriverlessDevice::detect()>:
c00139e6:	c3                   	ret    
c00139e7:	90                   	nop

c00139e8 <DriverlessDevice::open(int, int, void*)>:
c00139e8:	83 ec 18             	sub    esp,0x18
c00139eb:	68 b0 aa 02 c0       	push   0xc002aab0
c00139f0:	e8 6c 64 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c00139f5:	83 c8 ff             	or     eax,0xffffffff
c00139f8:	83 c4 1c             	add    esp,0x1c
c00139fb:	c3                   	ret    

c00139fc <Device::~Device()>:
c00139fc:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c0013a01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a05:	89 10                	mov    DWORD PTR [eax],edx
c0013a07:	90                   	nop
c0013a08:	c3                   	ret    
c0013a09:	90                   	nop

c0013a0a <Device::~Device()>:
c0013a0a:	83 ec 0c             	sub    esp,0xc
c0013a0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a11:	e8 e6 ff ff ff       	call   c00139fc <Device::~Device()>
c0013a16:	83 c4 04             	add    esp,0x4
c0013a19:	83 ec 08             	sub    esp,0x8
c0013a1c:	68 58 01 00 00       	push   0x158
c0013a21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a25:	e8 f3 eb ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0013a2a:	83 c4 10             	add    esp,0x10
c0013a2d:	83 c4 0c             	add    esp,0xc
c0013a30:	c3                   	ret    
c0013a31:	90                   	nop

c0013a32 <Device::findAndLoadDriver()>:
c0013a32:	c7 44 24 04 ce aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aace
c0013a3a:	e9 b6 ec ff ff       	jmp    c00126f5 <Dbg::kprintf(char const*, ...)>
c0013a3f:	90                   	nop

c0013a40 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a40:	57                   	push   edi
c0013a41:	b9 09 00 00 00       	mov    ecx,0x9
c0013a46:	56                   	push   esi
c0013a47:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a4b:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a4f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a59:	81 c7 18 01 00 00    	add    edi,0x118
c0013a5f:	fc                   	cld    
c0013a60:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a62:	5e                   	pop    esi
c0013a63:	5f                   	pop    edi
c0013a64:	c3                   	ret    
c0013a65:	90                   	nop

c0013a66 <Device::preOpenACPI(void*, char*, char*)>:
c0013a66:	57                   	push   edi
c0013a67:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013a6c:	56                   	push   esi
c0013a6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a71:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a75:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013a7f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013a85:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013a8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a91:	b9 0e 00 00 00       	mov    ecx,0xe
c0013a96:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013a9c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013aa0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013aa2:	5e                   	pop    esi
c0013aa3:	5f                   	pop    edi
c0013aa4:	c3                   	ret    
c0013aa5:	90                   	nop

c0013aa6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013aaa:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013aaf:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ab6:	75 0b                	jne    c0013ac3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ab8:	8b 00                	mov    eax,DWORD PTR [eax]
c0013aba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013abe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013ac1:	eb 1e                	jmp    c0013ae1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013ac3:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0013ac8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ace:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ad4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ad6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ada:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ade:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013ae1:	ff e0                	jmp    eax
c0013ae3:	90                   	nop

c0013ae4 <Device::getParent()>:
c0013ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ae8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013aee:	c3                   	ret    
c0013aef:	90                   	nop

c0013af0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013af4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013af9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b00:	75 0b                	jne    c0013b0d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b02:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b04:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b08:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b0b:	eb 1e                	jmp    c0013b2b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b0d:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0013b12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b18:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b1e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b20:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b28:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b2b:	ff e0                	jmp    eax
c0013b2d:	90                   	nop

c0013b2e <Device::addChild(Device*)>:
c0013b2e:	53                   	push   ebx
c0013b2f:	83 ec 08             	sub    esp,0x8
c0013b32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b3a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b40:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b46:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b48:	85 d2                	test   edx,edx
c0013b4a:	74 04                	je     c0013b50 <Device::addChild(Device*)+0x22>
c0013b4c:	89 d3                	mov    ebx,edx
c0013b4e:	eb f6                	jmp    c0013b46 <Device::addChild(Device*)+0x18>
c0013b50:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b53:	83 ec 0c             	sub    esp,0xc
c0013b56:	6a 08                	push   0x8
c0013b58:	e8 3c ba ff ff       	call   c000f599 <malloc>
c0013b5d:	89 03                	mov    DWORD PTR [ebx],eax
c0013b5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b6c:	83 c4 18             	add    esp,0x18
c0013b6f:	5b                   	pop    ebx
c0013b70:	c3                   	ret    
c0013b71:	90                   	nop

c0013b72 <Device::removeAllChildren()>:
c0013b72:	56                   	push   esi
c0013b73:	53                   	push   ebx
c0013b74:	52                   	push   edx
c0013b75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b79:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b7f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b82:	74 17                	je     c0013b9b <Device::removeAllChildren()+0x29>
c0013b84:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b87:	85 c0                	test   eax,eax
c0013b89:	74 0c                	je     c0013b97 <Device::removeAllChildren()+0x25>
c0013b8b:	83 ec 0c             	sub    esp,0xc
c0013b8e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b90:	50                   	push   eax
c0013b91:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013b94:	83 c4 10             	add    esp,0x10
c0013b97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b99:	eb e4                	jmp    c0013b7f <Device::removeAllChildren()+0xd>
c0013b9b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013ba1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ba7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bb4:	58                   	pop    eax
c0013bb5:	5b                   	pop    ebx
c0013bb6:	5e                   	pop    esi
c0013bb7:	c3                   	ret    

c0013bb8 <Device::hibernateAll()>:
c0013bb8:	53                   	push   ebx
c0013bb9:	83 ec 14             	sub    esp,0x14
c0013bbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bc2:	53                   	push   ebx
c0013bc3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013bc6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bcc:	83 c4 10             	add    esp,0x10
c0013bcf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bd2:	74 0f                	je     c0013be3 <Device::hibernateAll()+0x2b>
c0013bd4:	83 ec 0c             	sub    esp,0xc
c0013bd7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bda:	e8 d9 ff ff ff       	call   c0013bb8 <Device::hibernateAll()>
c0013bdf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013be1:	eb e9                	jmp    c0013bcc <Device::hibernateAll()+0x14>
c0013be3:	83 c4 08             	add    esp,0x8
c0013be6:	5b                   	pop    ebx
c0013be7:	c3                   	ret    

c0013be8 <Device::wakeAll()>:
c0013be8:	53                   	push   ebx
c0013be9:	83 ec 14             	sub    esp,0x14
c0013bec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bf2:	53                   	push   ebx
c0013bf3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013bf6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bfc:	83 c4 10             	add    esp,0x10
c0013bff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c02:	74 0f                	je     c0013c13 <Device::wakeAll()+0x2b>
c0013c04:	83 ec 0c             	sub    esp,0xc
c0013c07:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c0a:	e8 d9 ff ff ff       	call   c0013be8 <Device::wakeAll()>
c0013c0f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c11:	eb e9                	jmp    c0013bfc <Device::wakeAll()+0x14>
c0013c13:	83 c4 08             	add    esp,0x8
c0013c16:	5b                   	pop    ebx
c0013c17:	c3                   	ret    

c0013c18 <Device::detectAll()>:
c0013c18:	53                   	push   ebx
c0013c19:	83 ec 14             	sub    esp,0x14
c0013c1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c22:	53                   	push   ebx
c0013c23:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c26:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c2c:	83 c4 10             	add    esp,0x10
c0013c2f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c32:	74 0f                	je     c0013c43 <Device::detectAll()+0x2b>
c0013c34:	83 ec 0c             	sub    esp,0xc
c0013c37:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c3a:	e8 d9 ff ff ff       	call   c0013c18 <Device::detectAll()>
c0013c3f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c41:	eb e9                	jmp    c0013c2c <Device::detectAll()+0x14>
c0013c43:	83 c4 08             	add    esp,0x8
c0013c46:	5b                   	pop    ebx
c0013c47:	c3                   	ret    

c0013c48 <Device::disableLegacyAll()>:
c0013c48:	53                   	push   ebx
c0013c49:	83 ec 14             	sub    esp,0x14
c0013c4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c52:	53                   	push   ebx
c0013c53:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c56:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c5c:	83 c4 10             	add    esp,0x10
c0013c5f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c62:	74 0f                	je     c0013c73 <Device::disableLegacyAll()+0x2b>
c0013c64:	83 ec 0c             	sub    esp,0xc
c0013c67:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c6a:	e8 d9 ff ff ff       	call   c0013c48 <Device::disableLegacyAll()>
c0013c6f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c71:	eb e9                	jmp    c0013c5c <Device::disableLegacyAll()+0x14>
c0013c73:	83 c4 08             	add    esp,0x8
c0013c76:	5b                   	pop    ebx
c0013c77:	c3                   	ret    

c0013c78 <Device::loadDriversForAll()>:
c0013c78:	53                   	push   ebx
c0013c79:	83 ec 08             	sub    esp,0x8
c0013c7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c80:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013c87:	75 0c                	jne    c0013c95 <Device::loadDriversForAll()+0x1d>
c0013c89:	83 ec 0c             	sub    esp,0xc
c0013c8c:	53                   	push   ebx
c0013c8d:	e8 a0 fd ff ff       	call   c0013a32 <Device::findAndLoadDriver()>
c0013c92:	83 c4 10             	add    esp,0x10
c0013c95:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c9b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c9e:	74 12                	je     c0013cb2 <Device::loadDriversForAll()+0x3a>
c0013ca0:	83 ec 0c             	sub    esp,0xc
c0013ca3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ca6:	e8 cd ff ff ff       	call   c0013c78 <Device::loadDriversForAll()>
c0013cab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cad:	83 c4 10             	add    esp,0x10
c0013cb0:	eb e9                	jmp    c0013c9b <Device::loadDriversForAll()+0x23>
c0013cb2:	83 c4 08             	add    esp,0x8
c0013cb5:	5b                   	pop    ebx
c0013cb6:	c3                   	ret    
c0013cb7:	90                   	nop

c0013cb8 <Device::closeAll()>:
c0013cb8:	53                   	push   ebx
c0013cb9:	83 ec 08             	sub    esp,0x8
c0013cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cc2:	6a 00                	push   0x0
c0013cc4:	6a 00                	push   0x0
c0013cc6:	6a 00                	push   0x0
c0013cc8:	53                   	push   ebx
c0013cc9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ccc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cd2:	83 c4 10             	add    esp,0x10
c0013cd5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cd8:	74 0f                	je     c0013ce9 <Device::closeAll()+0x31>
c0013cda:	83 ec 0c             	sub    esp,0xc
c0013cdd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ce0:	e8 d3 ff ff ff       	call   c0013cb8 <Device::closeAll()>
c0013ce5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ce7:	eb e9                	jmp    c0013cd2 <Device::closeAll()+0x1a>
c0013ce9:	83 c4 08             	add    esp,0x8
c0013cec:	5b                   	pop    ebx
c0013ced:	c3                   	ret    

c0013cee <Device::powerSavingAll(PowerSavingLevel)>:
c0013cee:	56                   	push   esi
c0013cef:	53                   	push   ebx
c0013cf0:	83 ec 0c             	sub    esp,0xc
c0013cf3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cf7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013cfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cfd:	56                   	push   esi
c0013cfe:	53                   	push   ebx
c0013cff:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d02:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d08:	83 c4 10             	add    esp,0x10
c0013d0b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d0e:	74 0f                	je     c0013d1f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d10:	52                   	push   edx
c0013d11:	52                   	push   edx
c0013d12:	56                   	push   esi
c0013d13:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d16:	e8 d3 ff ff ff       	call   c0013cee <Device::powerSavingAll(PowerSavingLevel)>
c0013d1b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d1d:	eb e9                	jmp    c0013d08 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d1f:	58                   	pop    eax
c0013d20:	5b                   	pop    ebx
c0013d21:	5e                   	pop    esi
c0013d22:	c3                   	ret    
c0013d23:	90                   	nop

c0013d24 <Device::setName(char const*)>:
c0013d24:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d2c:	e9 db ca fe ff       	jmp    c000080c <strcpy>
c0013d31:	90                   	nop

c0013d32 <Device::Device(char const*)>:
c0013d32:	83 ec 1c             	sub    esp,0x1c
c0013d35:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c0013d3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d3e:	89 10                	mov    DWORD PTR [eax],edx
c0013d40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d44:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d52:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d60:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d6e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d78:	83 ec 08             	sub    esp,0x8
c0013d7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d83:	e8 9c ff ff ff       	call   c0013d24 <Device::setName(char const*)>
c0013d88:	83 c4 10             	add    esp,0x10
c0013d8b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d93:	83 ec 0c             	sub    esp,0xc
c0013d96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d9a:	e8 fa b7 ff ff       	call   c000f599 <malloc>
c0013d9f:	83 c4 10             	add    esp,0x10
c0013da2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013da8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013daf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013db3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013db9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dbd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013dc3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dcd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013dd3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dde:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013de5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013df0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e02:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e10:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e1e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013e28:	90                   	nop
c0013e29:	83 c4 1c             	add    esp,0x1c
c0013e2c:	c3                   	ret    
c0013e2d:	90                   	nop

c0013e2e <Device::getName()>:
c0013e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e32:	05 d0 00 00 00       	add    eax,0xd0
c0013e37:	c3                   	ret    

c0013e38 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e38:	83 ec 0c             	sub    esp,0xc
c0013e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3f:	83 ec 08             	sub    esp,0x8
c0013e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e46:	50                   	push   eax
c0013e47:	e8 e6 fe ff ff       	call   c0013d32 <Device::Device(char const*)>
c0013e4c:	83 c4 10             	add    esp,0x10
c0013e4f:	ba 3c ab 02 c0       	mov    edx,0xc002ab3c
c0013e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e58:	89 10                	mov    DWORD PTR [eax],edx
c0013e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e68:	90                   	nop
c0013e69:	83 c4 0c             	add    esp,0xc
c0013e6c:	c3                   	ret    
c0013e6d:	90                   	nop

c0013e6e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e6e:	57                   	push   edi
c0013e6f:	56                   	push   esi
c0013e70:	53                   	push   ebx
c0013e71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e75:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e7d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e83:	75 0c                	jne    c0013e91 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e85:	52                   	push   edx
c0013e86:	52                   	push   edx
c0013e87:	53                   	push   ebx
c0013e88:	56                   	push   esi
c0013e89:	e8 e2 47 01 00       	call   c0028670 <LinkedList<Device>::addElement(Device*)>
c0013e8e:	83 c4 10             	add    esp,0x10
c0013e91:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e9a:	74 12                	je     c0013eae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e9c:	50                   	push   eax
c0013e9d:	57                   	push   edi
c0013e9e:	56                   	push   esi
c0013e9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ea2:	e8 c7 ff ff ff       	call   c0013e6e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ea7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ea9:	83 c4 10             	add    esp,0x10
c0013eac:	eb e9                	jmp    c0013e97 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013eae:	5b                   	pop    ebx
c0013eaf:	5e                   	pop    esi
c0013eb0:	5f                   	pop    edi
c0013eb1:	c3                   	ret    

c0013eb2 <getDevicesOfType(DeviceType)>:
c0013eb2:	53                   	push   ebx
c0013eb3:	83 ec 14             	sub    esp,0x14
c0013eb6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013eba:	53                   	push   ebx
c0013ebb:	e8 8c 48 01 00       	call   c002874c <LinkedList<Device>::LinkedList()>
c0013ec0:	83 c4 0c             	add    esp,0xc
c0013ec3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ec7:	53                   	push   ebx
c0013ec8:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c0013ece:	e8 9b ff ff ff       	call   c0013e6e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ed3:	89 d8                	mov    eax,ebx
c0013ed5:	83 c4 18             	add    esp,0x18
c0013ed8:	5b                   	pop    ebx
c0013ed9:	c2 04 00             	ret    0x4

c0013edc <HardDiskController::HardDiskController(char const*)>:
c0013edc:	83 ec 0c             	sub    esp,0xc
c0013edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee3:	83 ec 08             	sub    esp,0x8
c0013ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eea:	50                   	push   eax
c0013eeb:	e8 42 fe ff ff       	call   c0013d32 <Device::Device(char const*)>
c0013ef0:	83 c4 10             	add    esp,0x10
c0013ef3:	ba 68 ab 02 c0       	mov    edx,0xc002ab68
c0013ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013efc:	89 10                	mov    DWORD PTR [eax],edx
c0013efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f02:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013f0c:	90                   	nop
c0013f0d:	83 c4 0c             	add    esp,0xc
c0013f10:	c3                   	ret    
c0013f11:	90                   	nop

c0013f12 <HardDiskController::~HardDiskController()>:
c0013f12:	83 ec 0c             	sub    esp,0xc
c0013f15:	ba 68 ab 02 c0       	mov    edx,0xc002ab68
c0013f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f1e:	89 10                	mov    DWORD PTR [eax],edx
c0013f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f24:	83 ec 0c             	sub    esp,0xc
c0013f27:	50                   	push   eax
c0013f28:	e8 cf fa ff ff       	call   c00139fc <Device::~Device()>
c0013f2d:	83 c4 10             	add    esp,0x10
c0013f30:	90                   	nop
c0013f31:	83 c4 0c             	add    esp,0xc
c0013f34:	c3                   	ret    
c0013f35:	90                   	nop

c0013f36 <HardDiskController::~HardDiskController()>:
c0013f36:	83 ec 0c             	sub    esp,0xc
c0013f39:	83 ec 0c             	sub    esp,0xc
c0013f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f40:	e8 cd ff ff ff       	call   c0013f12 <HardDiskController::~HardDiskController()>
c0013f45:	83 c4 10             	add    esp,0x10
c0013f48:	83 ec 08             	sub    esp,0x8
c0013f4b:	68 58 01 00 00       	push   0x158
c0013f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f54:	e8 c4 e6 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0013f59:	83 c4 10             	add    esp,0x10
c0013f5c:	83 c4 0c             	add    esp,0xc
c0013f5f:	c3                   	ret    

c0013f60 <PhysicalDisk::eject()>:
c0013f60:	83 c8 ff             	or     eax,0xffffffff
c0013f63:	c3                   	ret    

c0013f64 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6b:	83 ec 08             	sub    esp,0x8
c0013f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f72:	50                   	push   eax
c0013f73:	e8 ba fd ff ff       	call   c0013d32 <Device::Device(char const*)>
c0013f78:	83 c4 10             	add    esp,0x10
c0013f7b:	ba 94 ab 02 c0       	mov    edx,0xc002ab94
c0013f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f84:	89 10                	mov    DWORD PTR [eax],edx
c0013f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f95:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fb2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fc6:	90                   	nop
c0013fc7:	83 c4 0c             	add    esp,0xc
c0013fca:	c3                   	ret    
c0013fcb:	90                   	nop

c0013fcc <PhysicalDisk::startCache()>:
c0013fcc:	56                   	push   esi
c0013fcd:	53                   	push   ebx
c0013fce:	83 ec 10             	sub    esp,0x10
c0013fd1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fd5:	6a 44                	push   0x44
c0013fd7:	e8 bd b5 ff ff       	call   c000f599 <malloc>
c0013fdc:	89 c6                	mov    esi,eax
c0013fde:	58                   	pop    eax
c0013fdf:	5a                   	pop    edx
c0013fe0:	53                   	push   ebx
c0013fe1:	56                   	push   esi
c0013fe2:	e8 71 28 00 00       	call   c0016858 <VCache::VCache(PhysicalDisk*)>
c0013fe7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013fed:	83 c4 14             	add    esp,0x14
c0013ff0:	5b                   	pop    ebx
c0013ff1:	5e                   	pop    esi
c0013ff2:	c3                   	ret    
c0013ff3:	90                   	nop

c0013ff4 <PhysicalDisk::~PhysicalDisk()>:
c0013ff4:	83 ec 0c             	sub    esp,0xc
c0013ff7:	ba 94 ab 02 c0       	mov    edx,0xc002ab94
c0013ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014000:	89 10                	mov    DWORD PTR [eax],edx
c0014002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014006:	83 ec 0c             	sub    esp,0xc
c0014009:	50                   	push   eax
c001400a:	e8 ed f9 ff ff       	call   c00139fc <Device::~Device()>
c001400f:	83 c4 10             	add    esp,0x10
c0014012:	90                   	nop
c0014013:	83 c4 0c             	add    esp,0xc
c0014016:	c3                   	ret    
c0014017:	90                   	nop

c0014018 <PhysicalDisk::~PhysicalDisk()>:
c0014018:	83 ec 0c             	sub    esp,0xc
c001401b:	83 ec 0c             	sub    esp,0xc
c001401e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014022:	e8 cd ff ff ff       	call   c0013ff4 <PhysicalDisk::~PhysicalDisk()>
c0014027:	83 c4 10             	add    esp,0x10
c001402a:	83 ec 08             	sub    esp,0x8
c001402d:	68 6c 01 00 00       	push   0x16c
c0014032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014036:	e8 e2 e5 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c001403b:	83 c4 10             	add    esp,0x10
c001403e:	83 c4 0c             	add    esp,0xc
c0014041:	c3                   	ret    

c0014042 <FPU::FPU(char const*)>:
c0014042:	83 ec 0c             	sub    esp,0xc
c0014045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014049:	83 ec 08             	sub    esp,0x8
c001404c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014050:	50                   	push   eax
c0014051:	e8 dc fc ff ff       	call   c0013d32 <Device::Device(char const*)>
c0014056:	83 c4 10             	add    esp,0x10
c0014059:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c001405e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014062:	89 10                	mov    DWORD PTR [eax],edx
c0014064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014068:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014072:	90                   	nop
c0014073:	83 c4 0c             	add    esp,0xc
c0014076:	c3                   	ret    
c0014077:	90                   	nop

c0014078 <FPU::~FPU()>:
c0014078:	83 ec 0c             	sub    esp,0xc
c001407b:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c0014080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014084:	89 10                	mov    DWORD PTR [eax],edx
c0014086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408a:	83 ec 0c             	sub    esp,0xc
c001408d:	50                   	push   eax
c001408e:	e8 69 f9 ff ff       	call   c00139fc <Device::~Device()>
c0014093:	83 c4 10             	add    esp,0x10
c0014096:	90                   	nop
c0014097:	83 c4 0c             	add    esp,0xc
c001409a:	c3                   	ret    
c001409b:	90                   	nop

c001409c <FPU::~FPU()>:
c001409c:	83 ec 0c             	sub    esp,0xc
c001409f:	83 ec 0c             	sub    esp,0xc
c00140a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a6:	e8 cd ff ff ff       	call   c0014078 <FPU::~FPU()>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	83 ec 08             	sub    esp,0x8
c00140b1:	68 58 01 00 00       	push   0x158
c00140b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ba:	e8 5e e5 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c00140bf:	83 c4 10             	add    esp,0x10
c00140c2:	83 c4 0c             	add    esp,0xc
c00140c5:	c3                   	ret    

c00140c6 <setupFPU()>:
c00140c6:	53                   	push   ebx
c00140c7:	83 ec 08             	sub    esp,0x8
c00140ca:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c00140d0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140d7:	74 19                	je     c00140f2 <setupFPU()+0x2c>
c00140d9:	83 ec 0c             	sub    esp,0xc
c00140dc:	68 58 01 00 00       	push   0x158
c00140e1:	e8 b3 b4 ff ff       	call   c000f599 <malloc>
c00140e6:	89 c3                	mov    ebx,eax
c00140e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00140eb:	e8 cc 11 01 00       	call   c00252bc <AVX::AVX()>
c00140f0:	eb 5b                	jmp    c001414d <setupFPU()+0x87>
c00140f2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140f8:	84 c0                	test   al,al
c00140fa:	79 19                	jns    c0014115 <setupFPU()+0x4f>
c00140fc:	83 ec 0c             	sub    esp,0xc
c00140ff:	68 58 01 00 00       	push   0x158
c0014104:	e8 90 b4 ff ff       	call   c000f599 <malloc>
c0014109:	89 c3                	mov    ebx,eax
c001410b:	89 04 24             	mov    DWORD PTR [esp],eax
c001410e:	e8 cf 12 01 00       	call   c00253e2 <SSE::SSE()>
c0014113:	eb 38                	jmp    c001414d <setupFPU()+0x87>
c0014115:	a8 20                	test   al,0x20
c0014117:	74 19                	je     c0014132 <setupFPU()+0x6c>
c0014119:	83 ec 0c             	sub    esp,0xc
c001411c:	68 58 01 00 00       	push   0x158
c0014121:	e8 73 b4 ff ff       	call   c000f599 <malloc>
c0014126:	89 c3                	mov    ebx,eax
c0014128:	89 04 24             	mov    DWORD PTR [esp],eax
c001412b:	e8 1c 12 01 00       	call   c002534c <MMX::MMX()>
c0014130:	eb 1b                	jmp    c001414d <setupFPU()+0x87>
c0014132:	a8 10                	test   al,0x10
c0014134:	74 1c                	je     c0014152 <setupFPU()+0x8c>
c0014136:	83 ec 0c             	sub    esp,0xc
c0014139:	68 58 01 00 00       	push   0x158
c001413e:	e8 56 b4 ff ff       	call   c000f599 <malloc>
c0014143:	89 c3                	mov    ebx,eax
c0014145:	89 04 24             	mov    DWORD PTR [esp],eax
c0014148:	e8 23 13 01 00       	call   c0025470 <x87::x87()>
c001414d:	83 c4 10             	add    esp,0x10
c0014150:	eb 24                	jmp    c0014176 <setupFPU()+0xb0>
c0014152:	83 e0 ef             	and    eax,0xffffffef
c0014155:	83 ec 0c             	sub    esp,0xc
c0014158:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001415e:	68 c4 ab 02 c0       	push   0xc002abc4
c0014163:	e8 8d e5 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014168:	0f 20 c0             	mov    eax,cr0
c001416b:	83 c8 04             	or     eax,0x4
c001416e:	0f 22 c0             	mov    cr0,eax
c0014171:	31 db                	xor    ebx,ebx
c0014173:	83 c4 10             	add    esp,0x10
c0014176:	89 d8                	mov    eax,ebx
c0014178:	83 c4 08             	add    esp,0x8
c001417b:	5b                   	pop    ebx
c001417c:	c3                   	ret    
c001417d:	90                   	nop

c001417e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001417e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014182:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014186:	c1 e0 04             	shl    eax,0x4
c0014189:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001418d:	8d 50 10             	lea    edx,[eax+0x10]
c0014190:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014196:	74 08                	je     c00141a0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014198:	83 c0 04             	add    eax,0x4
c001419b:	39 d0                	cmp    eax,edx
c001419d:	75 f1                	jne    c0014190 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001419f:	c3                   	ret    
c00141a0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141aa:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141b4:	eb e2                	jmp    c0014198 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00141b6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00141b6:	57                   	push   edi
c00141b7:	31 c0                	xor    eax,eax
c00141b9:	56                   	push   esi
c00141ba:	53                   	push   ebx
c00141bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141c3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141c7:	89 da                	mov    edx,ebx
c00141c9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141cd:	c1 e2 04             	shl    edx,0x4
c00141d0:	01 ca                	add    edx,ecx
c00141d2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141da:	74 16                	je     c00141f2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00141dc:	40                   	inc    eax
c00141dd:	83 f8 04             	cmp    eax,0x4
c00141e0:	75 f0                	jne    c00141d2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141e2:	c7 44 24 10 08 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac08
c00141ea:	5b                   	pop    ebx
c00141eb:	5e                   	pop    esi
c00141ec:	5f                   	pop    edi
c00141ed:	e9 6f 5c 00 00       	jmp    c0019e61 <Krnl::panic(char const*)>
c00141f2:	8d 04 98             	lea    eax,[eax+ebx*4]
c00141f5:	8d 04 81             	lea    eax,[ecx+eax*4]
c00141f8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00141fe:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014204:	5b                   	pop    ebx
c0014205:	5e                   	pop    esi
c0014206:	5f                   	pop    edi
c0014207:	c3                   	ret    

c0014208 <doubleFault(regs*, void*)>:
c0014208:	55                   	push   ebp
c0014209:	89 e5                	mov    ebp,esp
c001420b:	83 ec 08             	sub    esp,0x8
c001420e:	83 ec 0c             	sub    esp,0xc
c0014211:	68 15 ac 02 c0       	push   0xc002ac15
c0014216:	e8 46 5c 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c001421b:	83 c4 10             	add    esp,0x10
c001421e:	90                   	nop
c001421f:	c9                   	leave  
c0014220:	c3                   	ret    
c0014221:	90                   	nop

c0014222 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014222:	56                   	push   esi
c0014223:	53                   	push   ebx
c0014224:	50                   	push   eax
c0014225:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014229:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001422d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014232:	75 35                	jne    c0014269 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014234:	8d 43 20             	lea    eax,[ebx+0x20]
c0014237:	31 d2                	xor    edx,edx
c0014239:	89 c1                	mov    ecx,eax
c001423b:	c1 e1 04             	shl    ecx,0x4
c001423e:	01 f1                	add    ecx,esi
c0014240:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014248:	74 3e                	je     c0014288 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001424a:	42                   	inc    edx
c001424b:	83 fa 04             	cmp    edx,0x4
c001424e:	75 f0                	jne    c0014240 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014250:	83 ec 0c             	sub    esp,0xc
c0014253:	68 2f ac 02 c0       	push   0xc002ac2f
c0014258:	e8 04 5c 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c001425d:	83 c4 10             	add    esp,0x10
c0014260:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014265:	5a                   	pop    edx
c0014266:	5b                   	pop    ebx
c0014267:	5e                   	pop    esi
c0014268:	c3                   	ret    
c0014269:	83 ec 0c             	sub    esp,0xc
c001426c:	56                   	push   esi
c001426d:	e8 bc fb ff ff       	call   c0013e2e <Device::getName()>
c0014272:	83 c4 10             	add    esp,0x10
c0014275:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014278:	75 ba                	jne    c0014234 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001427a:	83 fb 0f             	cmp    ebx,0xf
c001427d:	7f 29                	jg     c00142a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001427f:	0f b6 9b 60 cc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd33a0]
c0014286:	eb ac                	jmp    c0014234 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014288:	8d 04 82             	lea    eax,[edx+eax*4]
c001428b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001428f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014292:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014298:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001429c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00142a2:	89 d8                	mov    eax,ebx
c00142a4:	5a                   	pop    edx
c00142a5:	5b                   	pop    ebx
c00142a6:	5e                   	pop    esi
c00142a7:	c3                   	ret    
c00142a8:	83 ec 0c             	sub    esp,0xc
c00142ab:	68 22 ac 02 c0       	push   0xc002ac22
c00142b0:	e8 ac 5b 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c00142b5:	83 c4 10             	add    esp,0x10
c00142b8:	e9 77 ff ff ff       	jmp    c0014234 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142bd:	90                   	nop

c00142be <InterruptController::clearAllHandlers(int, bool)>:
c00142be:	56                   	push   esi
c00142bf:	53                   	push   ebx
c00142c0:	52                   	push   edx
c00142c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142c9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142ce:	75 61                	jne    c0014331 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142d0:	8d 46 20             	lea    eax,[esi+0x20]
c00142d3:	c1 e6 04             	shl    esi,0x4
c00142d6:	c1 e0 04             	shl    eax,0x4
c00142d9:	01 de                	add    esi,ebx
c00142db:	01 d8                	add    eax,ebx
c00142dd:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00142e7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00142f1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00142fb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014305:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001430f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014319:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014323:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001432d:	58                   	pop    eax
c001432e:	5b                   	pop    ebx
c001432f:	5e                   	pop    esi
c0014330:	c3                   	ret    
c0014331:	83 ec 0c             	sub    esp,0xc
c0014334:	53                   	push   ebx
c0014335:	e8 f4 fa ff ff       	call   c0013e2e <Device::getName()>
c001433a:	83 c4 10             	add    esp,0x10
c001433d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014340:	75 8e                	jne    c00142d0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014342:	83 fe 0f             	cmp    esi,0xf
c0014345:	7f 09                	jg     c0014350 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014347:	0f b6 b6 60 cc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd33a0]
c001434e:	eb 80                	jmp    c00142d0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014350:	83 ec 0c             	sub    esp,0xc
c0014353:	68 3c ac 02 c0       	push   0xc002ac3c
c0014358:	e8 04 5b 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c001435d:	83 c4 10             	add    esp,0x10
c0014360:	e9 6b ff ff ff       	jmp    c00142d0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014365:	90                   	nop

c0014366 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014366:	56                   	push   esi
c0014367:	53                   	push   ebx
c0014368:	52                   	push   edx
c0014369:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001436d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014371:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014376:	75 3a                	jne    c00143b2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001437c:	8d 50 20             	lea    edx,[eax+0x20]
c001437f:	c1 e2 04             	shl    edx,0x4
c0014382:	8d 04 16             	lea    eax,[esi+edx*1]
c0014385:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014389:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001438f:	74 0b                	je     c001439c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014391:	83 c0 04             	add    eax,0x4
c0014394:	39 d0                	cmp    eax,edx
c0014396:	75 f1                	jne    c0014389 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014398:	58                   	pop    eax
c0014399:	5b                   	pop    ebx
c001439a:	5e                   	pop    esi
c001439b:	c3                   	ret    
c001439c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143a6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143b0:	eb df                	jmp    c0014391 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00143b2:	83 ec 0c             	sub    esp,0xc
c00143b5:	56                   	push   esi
c00143b6:	e8 73 fa ff ff       	call   c0013e2e <Device::getName()>
c00143bb:	83 c4 10             	add    esp,0x10
c00143be:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143c1:	75 b5                	jne    c0014378 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143c3:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143c8:	7f 11                	jg     c00143db <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143ce:	0f b6 80 60 cc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd33a0]
c00143d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143d9:	eb 9d                	jmp    c0014378 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143db:	83 ec 0c             	sub    esp,0xc
c00143de:	68 49 ac 02 c0       	push   0xc002ac49
c00143e3:	e8 79 5a 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c00143e8:	83 c4 10             	add    esp,0x10
c00143eb:	eb 8b                	jmp    c0014378 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00143ed <nmiHandler(regs*, void*)>:
c00143ed:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00143f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143f6:	e9 05 a9 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00143fb <int_handler>:
c00143fb:	55                   	push   ebp
c00143fc:	57                   	push   edi
c00143fd:	56                   	push   esi
c00143fe:	53                   	push   ebx
c00143ff:	83 ec 0c             	sub    esp,0xc
c0014402:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014406:	80 3d 44 05 03 c0 00 	cmp    BYTE PTR ds:0xc0030544,0x0
c001440d:	74 0b                	je     c001441a <int_handler+0x1f>
c001440f:	fa                   	cli    
c0014410:	f4                   	hlt    
c0014411:	80 3d 44 05 03 c0 00 	cmp    BYTE PTR ds:0xc0030544,0x0
c0014418:	75 f5                	jne    c001440f <int_handler+0x14>
c001441a:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001441f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014422:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014428:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001442e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014431:	83 f8 17             	cmp    eax,0x17
c0014434:	77 13                	ja     c0014449 <int_handler+0x4e>
c0014436:	83 ec 08             	sub    esp,0x8
c0014439:	8b 17                	mov    edx,DWORD PTR [edi]
c001443b:	8d 43 e0             	lea    eax,[ebx-0x20]
c001443e:	0f b6 c0             	movzx  eax,al
c0014441:	50                   	push   eax
c0014442:	57                   	push   edi
c0014443:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014446:	83 c4 10             	add    esp,0x10
c0014449:	83 c3 15             	add    ebx,0x15
c001444c:	c1 e3 04             	shl    ebx,0x4
c001444f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014453:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001445a:	31 db                	xor    ebx,ebx
c001445c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014460:	85 c0                	test   eax,eax
c0014462:	74 13                	je     c0014477 <int_handler+0x7c>
c0014464:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014467:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001446b:	74 1c                	je     c0014489 <int_handler+0x8e>
c001446d:	83 ec 08             	sub    esp,0x8
c0014470:	52                   	push   edx
c0014471:	56                   	push   esi
c0014472:	ff d0                	call   eax
c0014474:	83 c4 10             	add    esp,0x10
c0014477:	43                   	inc    ebx
c0014478:	83 fb 04             	cmp    ebx,0x4
c001447b:	75 df                	jne    c001445c <int_handler+0x61>
c001447d:	83 c4 0c             	add    esp,0xc
c0014480:	31 c0                	xor    eax,eax
c0014482:	5b                   	pop    ebx
c0014483:	31 d2                	xor    edx,edx
c0014485:	5e                   	pop    esi
c0014486:	5f                   	pop    edi
c0014487:	5d                   	pop    ebp
c0014488:	c3                   	ret    
c0014489:	83 ec 08             	sub    esp,0x8
c001448c:	52                   	push   edx
c001448d:	56                   	push   esi
c001448e:	ff d0                	call   eax
c0014490:	83 c4 10             	add    esp,0x10
c0014493:	83 c4 0c             	add    esp,0xc
c0014496:	5b                   	pop    ebx
c0014497:	5e                   	pop    esi
c0014498:	5f                   	pop    edi
c0014499:	5d                   	pop    ebp
c001449a:	c3                   	ret    
c001449b:	90                   	nop

c001449c <InterruptController::InterruptController(char const*)>:
c001449c:	83 ec 1c             	sub    esp,0x1c
c001449f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a3:	83 ec 08             	sub    esp,0x8
c00144a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144aa:	50                   	push   eax
c00144ab:	e8 82 f8 ff ff       	call   c0013d32 <Device::Device(char const*)>
c00144b0:	83 c4 10             	add    esp,0x10
c00144b3:	ba 04 af 02 c0       	mov    edx,0xc002af04
c00144b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144bc:	89 10                	mov    DWORD PTR [eax],edx
c00144be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144d4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00144dc:	7f 5e                	jg     c001453c <InterruptController::InterruptController(char const*)+0xa0>
c00144de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144e6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144eb:	7f 49                	jg     c0014536 <InterruptController::InterruptController(char const*)+0x9a>
c00144ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144f5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014500:	01 ca                	add    edx,ecx
c0014502:	83 c2 54             	add    edx,0x54
c0014505:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001450d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014511:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014515:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001451c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014520:	01 ca                	add    edx,ecx
c0014522:	81 c2 54 04 00 00    	add    edx,0x454
c0014528:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014530:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014534:	eb b0                	jmp    c00144e6 <InterruptController::InterruptController(char const*)+0x4a>
c0014536:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001453a:	eb 98                	jmp    c00144d4 <InterruptController::InterruptController(char const*)+0x38>
c001453c:	90                   	nop
c001453d:	83 c4 1c             	add    esp,0x1c
c0014540:	c3                   	ret    
c0014541:	90                   	nop

c0014542 <InterruptController::~InterruptController()>:
c0014542:	83 ec 0c             	sub    esp,0xc
c0014545:	ba 04 af 02 c0       	mov    edx,0xc002af04
c001454a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001454e:	89 10                	mov    DWORD PTR [eax],edx
c0014550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014554:	83 ec 0c             	sub    esp,0xc
c0014557:	50                   	push   eax
c0014558:	e8 9f f4 ff ff       	call   c00139fc <Device::~Device()>
c001455d:	83 c4 10             	add    esp,0x10
c0014560:	90                   	nop
c0014561:	83 c4 0c             	add    esp,0xc
c0014564:	c3                   	ret    
c0014565:	90                   	nop

c0014566 <InterruptController::~InterruptController()>:
c0014566:	83 ec 0c             	sub    esp,0xc
c0014569:	83 ec 0c             	sub    esp,0xc
c001456c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014570:	e8 cd ff ff ff       	call   c0014542 <InterruptController::~InterruptController()>
c0014575:	83 c4 10             	add    esp,0x10
c0014578:	83 ec 08             	sub    esp,0x8
c001457b:	68 58 21 00 00       	push   0x2158
c0014580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014584:	e8 94 e0 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0014589:	83 c4 10             	add    esp,0x10
c001458c:	83 c4 0c             	add    esp,0xc
c001458f:	c3                   	ret    

c0014590 <displayDebugInfo(regs*)>:
c0014590:	55                   	push   ebp
c0014591:	57                   	push   edi
c0014592:	56                   	push   esi
c0014593:	53                   	push   ebx
c0014594:	83 ec 24             	sub    esp,0x24
c0014597:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001459b:	0f 20 c2             	mov    edx,cr0
c001459e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00145a2:	0f 20 d7             	mov    edi,cr2
c00145a5:	0f 20 de             	mov    esi,cr3
c00145a8:	0f 20 e5             	mov    ebp,cr4
c00145ab:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00145ae:	68 56 ac 02 c0       	push   0xc002ac56
c00145b3:	e8 3d e1 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00145b8:	59                   	pop    ecx
c00145b9:	58                   	pop    eax
c00145ba:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145bd:	68 61 ac 02 c0       	push   0xc002ac61
c00145c2:	e8 2e e1 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00145c7:	58                   	pop    eax
c00145c8:	5a                   	pop    edx
c00145c9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145cc:	68 6c ac 02 c0       	push   0xc002ac6c
c00145d1:	e8 1f e1 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00145d6:	59                   	pop    ecx
c00145d7:	58                   	pop    eax
c00145d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145db:	68 77 ac 02 c0       	push   0xc002ac77
c00145e0:	e8 10 e1 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00145e5:	58                   	pop    eax
c00145e6:	5a                   	pop    edx
c00145e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145ea:	68 82 ac 02 c0       	push   0xc002ac82
c00145ef:	e8 01 e1 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00145f4:	59                   	pop    ecx
c00145f5:	58                   	pop    eax
c00145f6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00145f9:	68 8d ac 02 c0       	push   0xc002ac8d
c00145fe:	e8 f2 e0 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014603:	58                   	pop    eax
c0014604:	5a                   	pop    edx
c0014605:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014608:	68 98 ac 02 c0       	push   0xc002ac98
c001460d:	e8 e3 e0 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014612:	59                   	pop    ecx
c0014613:	58                   	pop    eax
c0014614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014617:	68 a3 ac 02 c0       	push   0xc002aca3
c001461c:	e8 d4 e0 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014621:	58                   	pop    eax
c0014622:	5a                   	pop    edx
c0014623:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014626:	68 ae ac 02 c0       	push   0xc002acae
c001462b:	e8 c5 e0 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014630:	59                   	pop    ecx
c0014631:	58                   	pop    eax
c0014632:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014635:	68 bd ac 02 c0       	push   0xc002acbd
c001463a:	e8 b6 e0 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001463f:	58                   	pop    eax
c0014640:	5a                   	pop    edx
c0014641:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014644:	68 c8 ac 02 c0       	push   0xc002acc8
c0014649:	e8 a7 e0 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001464e:	59                   	pop    ecx
c001464f:	58                   	pop    eax
c0014650:	57                   	push   edi
c0014651:	68 d3 ac 02 c0       	push   0xc002acd3
c0014656:	e8 9a e0 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001465b:	58                   	pop    eax
c001465c:	5a                   	pop    edx
c001465d:	56                   	push   esi
c001465e:	68 de ac 02 c0       	push   0xc002acde
c0014663:	e8 8d e0 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014668:	59                   	pop    ecx
c0014669:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001466e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014674:	e8 da bc ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0014679:	58                   	pop    eax
c001467a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001467d:	5a                   	pop    edx
c001467e:	c1 e0 05             	shl    eax,0x5
c0014681:	05 c0 c9 02 c0       	add    eax,0xc002c9c0
c0014686:	50                   	push   eax
c0014687:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001468c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014692:	e8 c9 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014697:	59                   	pop    ecx
c0014698:	58                   	pop    eax
c0014699:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001469e:	68 e9 ac 02 c0       	push   0xc002ace9
c00146a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a9:	e8 b2 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146ae:	58                   	pop    eax
c00146af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146b4:	5a                   	pop    edx
c00146b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146b8:	83 c0 0c             	add    eax,0xc
c00146bb:	50                   	push   eax
c00146bc:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00146c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c7:	e8 94 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146cc:	59                   	pop    ecx
c00146cd:	58                   	pop    eax
c00146ce:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00146d3:	68 f2 ac 02 c0       	push   0xc002acf2
c00146d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146de:	e8 7d c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146e3:	58                   	pop    eax
c00146e4:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00146e9:	5a                   	pop    edx
c00146ea:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f3:	e8 22 c1 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00146f8:	59                   	pop    ecx
c00146f9:	58                   	pop    eax
c00146fa:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00146ff:	68 fa ac 02 c0       	push   0xc002acfa
c0014704:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470a:	e8 51 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001470f:	58                   	pop    eax
c0014710:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014715:	5a                   	pop    edx
c0014716:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014719:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471f:	e8 f6 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014724:	59                   	pop    ecx
c0014725:	58                   	pop    eax
c0014726:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001472b:	68 02 ad 02 c0       	push   0xc002ad02
c0014730:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014736:	e8 25 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001473b:	58                   	pop    eax
c001473c:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014741:	5a                   	pop    edx
c0014742:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014745:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474b:	e8 ca c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014750:	59                   	pop    ecx
c0014751:	58                   	pop    eax
c0014752:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014757:	68 0a ad 02 c0       	push   0xc002ad0a
c001475c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014762:	e8 f9 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014767:	58                   	pop    eax
c0014768:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001476d:	5a                   	pop    edx
c001476e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014771:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014777:	e8 9e c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001477c:	59                   	pop    ecx
c001477d:	58                   	pop    eax
c001477e:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014783:	68 12 ad 02 c0       	push   0xc002ad12
c0014788:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478e:	e8 cd c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014793:	58                   	pop    eax
c0014794:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014799:	5a                   	pop    edx
c001479a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001479d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a3:	e8 72 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147a8:	59                   	pop    ecx
c00147a9:	58                   	pop    eax
c00147aa:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00147af:	68 1a ad 02 c0       	push   0xc002ad1a
c00147b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ba:	e8 a1 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147bf:	58                   	pop    eax
c00147c0:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00147c5:	5a                   	pop    edx
c00147c6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147cf:	e8 46 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147d4:	59                   	pop    ecx
c00147d5:	58                   	pop    eax
c00147d6:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00147db:	68 22 ad 02 c0       	push   0xc002ad22
c00147e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e6:	e8 75 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147eb:	58                   	pop    eax
c00147ec:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00147f1:	5a                   	pop    edx
c00147f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147f6:	52                   	push   edx
c00147f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fd:	e8 18 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014802:	59                   	pop    ecx
c0014803:	58                   	pop    eax
c0014804:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014809:	68 2b ad 02 c0       	push   0xc002ad2b
c001480e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014814:	e8 47 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014819:	58                   	pop    eax
c001481a:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001481f:	5a                   	pop    edx
c0014820:	57                   	push   edi
c0014821:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014827:	e8 ee bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001482c:	59                   	pop    ecx
c001482d:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014832:	5f                   	pop    edi
c0014833:	68 33 ad 02 c0       	push   0xc002ad33
c0014838:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483e:	e8 1d c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014843:	58                   	pop    eax
c0014844:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014849:	5a                   	pop    edx
c001484a:	56                   	push   esi
c001484b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014851:	e8 c4 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014856:	59                   	pop    ecx
c0014857:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001485c:	5e                   	pop    esi
c001485d:	68 3b ad 02 c0       	push   0xc002ad3b
c0014862:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014868:	e8 f3 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001486d:	5f                   	pop    edi
c001486e:	58                   	pop    eax
c001486f:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014874:	55                   	push   ebp
c0014875:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487b:	e8 9a bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014880:	58                   	pop    eax
c0014881:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014886:	5a                   	pop    edx
c0014887:	68 43 ad 02 c0       	push   0xc002ad43
c001488c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014892:	e8 c9 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014897:	0f 21 c0             	mov    eax,db0
c001489a:	59                   	pop    ecx
c001489b:	5e                   	pop    esi
c001489c:	50                   	push   eax
c001489d:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00148a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a8:	e8 6d bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148ad:	5f                   	pop    edi
c00148ae:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00148b3:	5d                   	pop    ebp
c00148b4:	68 4c ad 02 c0       	push   0xc002ad4c
c00148b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148bf:	e8 9c bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148c4:	0f 21 c8             	mov    eax,db1
c00148c7:	5a                   	pop    edx
c00148c8:	59                   	pop    ecx
c00148c9:	50                   	push   eax
c00148ca:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00148cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d5:	e8 40 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148da:	5e                   	pop    esi
c00148db:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00148e0:	5f                   	pop    edi
c00148e1:	68 54 ad 02 c0       	push   0xc002ad54
c00148e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ec:	e8 6f bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148f1:	0f 21 d0             	mov    eax,db2
c00148f4:	5d                   	pop    ebp
c00148f5:	5a                   	pop    edx
c00148f6:	50                   	push   eax
c00148f7:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00148fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014902:	e8 13 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014907:	59                   	pop    ecx
c0014908:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001490d:	5e                   	pop    esi
c001490e:	68 5c ad 02 c0       	push   0xc002ad5c
c0014913:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014919:	e8 42 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001491e:	0f 21 d8             	mov    eax,db3
c0014921:	5f                   	pop    edi
c0014922:	5d                   	pop    ebp
c0014923:	50                   	push   eax
c0014924:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014929:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001492f:	e8 e6 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014934:	58                   	pop    eax
c0014935:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001493a:	5a                   	pop    edx
c001493b:	68 64 ad 02 c0       	push   0xc002ad64
c0014940:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014946:	e8 15 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001494b:	0f 21 f0             	mov    eax,db6
c001494e:	59                   	pop    ecx
c001494f:	5e                   	pop    esi
c0014950:	50                   	push   eax
c0014951:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014956:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495c:	e8 b9 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014961:	5f                   	pop    edi
c0014962:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014967:	5d                   	pop    ebp
c0014968:	68 6c ad 02 c0       	push   0xc002ad6c
c001496d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014973:	e8 e8 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014978:	0f 21 f8             	mov    eax,db7
c001497b:	5a                   	pop    edx
c001497c:	59                   	pop    ecx
c001497d:	50                   	push   eax
c001497e:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0014983:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014989:	e8 8c be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001498e:	5e                   	pop    esi
c001498f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014992:	e8 43 86 00 00       	call   c001cfda <Thr::getDriverNameFromAddress(unsigned long)>
c0014997:	83 c4 10             	add    esp,0x10
c001499a:	85 c0                	test   eax,eax
c001499c:	74 7d                	je     c0014a1b <displayDebugInfo(regs*)+0x48b>
c001499e:	89 c6                	mov    esi,eax
c00149a0:	50                   	push   eax
c00149a1:	50                   	push   eax
c00149a2:	56                   	push   esi
c00149a3:	68 74 ad 02 c0       	push   0xc002ad74
c00149a8:	e8 48 dd ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00149ad:	5a                   	pop    edx
c00149ae:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00149b3:	59                   	pop    ecx
c00149b4:	68 82 ad 02 c0       	push   0xc002ad82
c00149b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149bf:	e8 9c be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149c4:	5f                   	pop    edi
c00149c5:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00149ca:	5d                   	pop    ebp
c00149cb:	56                   	push   esi
c00149cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d2:	e8 89 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149d7:	58                   	pop    eax
c00149d8:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00149dd:	5a                   	pop    edx
c00149de:	68 8e ad 02 c0       	push   0xc002ad8e
c00149e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e9:	e8 72 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149ee:	59                   	pop    ecx
c00149ef:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00149f4:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00149fa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149fd:	e8 0f 86 00 00       	call   c001d011 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014a02:	5b                   	pop    ebx
c0014a03:	5d                   	pop    ebp
c0014a04:	50                   	push   eax
c0014a05:	57                   	push   edi
c0014a06:	e8 0f be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a0b:	58                   	pop    eax
c0014a0c:	5a                   	pop    edx
c0014a0d:	56                   	push   esi
c0014a0e:	68 9a ad 02 c0       	push   0xc002ad9a
c0014a13:	e8 dd dc ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014a18:	83 c4 10             	add    esp,0x10
c0014a1b:	fa                   	cli    
c0014a1c:	f4                   	hlt    
c0014a1d:	eb fe                	jmp    c0014a1d <displayDebugInfo(regs*)+0x48d>

c0014a1f <x87EmulHandler(regs*, void*)>:
c0014a1f:	83 ec 0c             	sub    esp,0xc
c0014a22:	0f 20 c2             	mov    edx,cr0
c0014a25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a2a:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014a2e:	75 4b                	jne    c0014a7b <x87EmulHandler(regs*, void*)+0x5c>
c0014a30:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0014a35:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014a3b:	85 c0                	test   eax,eax
c0014a3d:	74 05                	je     c0014a44 <x87EmulHandler(regs*, void*)+0x25>
c0014a3f:	83 e2 08             	and    edx,0x8
c0014a42:	75 17                	jne    c0014a5b <x87EmulHandler(regs*, void*)+0x3c>
c0014a44:	83 ec 0c             	sub    esp,0xc
c0014a47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a4b:	e8 61 a9 00 00       	call   c001f3b1 <Vm::x87Handler(regs*)>
c0014a50:	83 c4 10             	add    esp,0x10
c0014a53:	84 c0                	test   al,al
c0014a55:	74 24                	je     c0014a7b <x87EmulHandler(regs*, void*)+0x5c>
c0014a57:	83 c4 0c             	add    esp,0xc
c0014a5a:	c3                   	ret    
c0014a5b:	83 ec 0c             	sub    esp,0xc
c0014a5e:	68 c0 ad 02 c0       	push   0xc002adc0
c0014a63:	e8 8d dc ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014a68:	0f 06                	clts   
c0014a6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a6f:	83 c4 10             	add    esp,0x10
c0014a72:	a3 88 db 02 c0       	mov    ds:0xc002db88,eax
c0014a77:	83 c4 0c             	add    esp,0xc
c0014a7a:	c3                   	ret    
c0014a7b:	83 ec 0c             	sub    esp,0xc
c0014a7e:	68 aa ad 02 c0       	push   0xc002adaa
c0014a83:	e8 6d dc ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014a88:	5a                   	pop    edx
c0014a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a8d:	e8 fe fa ff ff       	call   c0014590 <displayDebugInfo(regs*)>

c0014a92 <gpFault(regs*, void*)>:
c0014a92:	53                   	push   ebx
c0014a93:	83 ec 14             	sub    esp,0x14
c0014a96:	c7 05 84 db 02 c0 8a e8 01 c0 	mov    DWORD PTR ds:0xc002db84,0xc001e88a
c0014aa0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014aa4:	53                   	push   ebx
c0014aa5:	e8 e0 9d 00 00       	call   c001e88a <Vm::faultHandler(regs*)>
c0014aaa:	83 c4 10             	add    esp,0x10
c0014aad:	84 c0                	test   al,al
c0014aaf:	74 05                	je     c0014ab6 <gpFault(regs*, void*)+0x24>
c0014ab1:	83 c4 08             	add    esp,0x8
c0014ab4:	5b                   	pop    ebx
c0014ab5:	c3                   	ret    
c0014ab6:	83 ec 0c             	sub    esp,0xc
c0014ab9:	68 cd ad 02 c0       	push   0xc002adcd
c0014abe:	e8 32 dc ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014ac3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ac6:	e8 c5 fa ff ff       	call   c0014590 <displayDebugInfo(regs*)>

c0014acb <pgFault(regs*, void*)>:
c0014acb:	83 ec 18             	sub    esp,0x18
c0014ace:	68 e8 ad 02 c0       	push   0xc002ade8
c0014ad3:	e8 1d dc ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014ad8:	0f 20 d0             	mov    eax,cr2
c0014adb:	5a                   	pop    edx
c0014adc:	59                   	pop    ecx
c0014add:	50                   	push   eax
c0014ade:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ae3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ae6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014aec:	e8 01 d7 ff ff       	call   c00121f2 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014af1:	83 c4 10             	add    esp,0x10
c0014af4:	84 c0                	test   al,al
c0014af6:	74 04                	je     c0014afc <pgFault(regs*, void*)+0x31>
c0014af8:	83 c4 0c             	add    esp,0xc
c0014afb:	c3                   	ret    
c0014afc:	83 ec 0c             	sub    esp,0xc
c0014aff:	68 f2 ad 02 c0       	push   0xc002adf2
c0014b04:	e8 ec db ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014b09:	58                   	pop    eax
c0014b0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b0e:	e8 7d fa ff ff       	call   c0014590 <displayDebugInfo(regs*)>

c0014b13 <otherISRHandler(regs*, void*)>:
c0014b13:	53                   	push   ebx
c0014b14:	83 ec 0c             	sub    esp,0xc
c0014b17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b1b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014b1e:	50                   	push   eax
c0014b1f:	50                   	push   eax
c0014b20:	68 ff ad 02 c0       	push   0xc002adff
c0014b25:	e8 cb db ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014b2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b2d:	e8 5e fa ff ff       	call   c0014590 <displayDebugInfo(regs*)>

c0014b32 <opcodeFault(regs*, void*)>:
c0014b32:	55                   	push   ebp
c0014b33:	89 e5                	mov    ebp,esp
c0014b35:	56                   	push   esi
c0014b36:	53                   	push   ebx
c0014b37:	83 ec 40             	sub    esp,0x40
c0014b3a:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0014b3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b45:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014b4b:	84 c0                	test   al,al
c0014b4d:	74 24                	je     c0014b73 <opcodeFault(regs*, void*)+0x41>
c0014b4f:	83 ec 0c             	sub    esp,0xc
c0014b52:	68 1c ae 02 c0       	push   0xc002ae1c
c0014b57:	e8 99 db ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014b5c:	83 c4 10             	add    esp,0x10
c0014b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b65:	8d 50 19             	lea    edx,[eax+0x19]
c0014b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b6b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b6e:	e9 d5 05 00 00       	jmp    c0015148 <opcodeFault(regs*, void*)+0x616>
c0014b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b76:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b79:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014b7c:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014b80:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b87:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b8a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b90:	8a 00                	mov    al,BYTE PTR [eax]
c0014b92:	3c f0                	cmp    al,0xf0
c0014b94:	75 17                	jne    c0014bad <opcodeFault(regs*, void*)+0x7b>
c0014b96:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ba8:	e9 da 00 00 00       	jmp    c0014c87 <opcodeFault(regs*, void*)+0x155>
c0014bad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb0:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb2:	3c f2                	cmp    al,0xf2
c0014bb4:	74 09                	je     c0014bbf <opcodeFault(regs*, void*)+0x8d>
c0014bb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb9:	8a 00                	mov    al,BYTE PTR [eax]
c0014bbb:	3c f3                	cmp    al,0xf3
c0014bbd:	75 1b                	jne    c0014bda <opcodeFault(regs*, void*)+0xa8>
c0014bbf:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bc3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bcc:	8d 50 01             	lea    edx,[eax+0x1]
c0014bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bd5:	e9 ad 00 00 00       	jmp    c0014c87 <opcodeFault(regs*, void*)+0x155>
c0014bda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bdd:	8a 00                	mov    al,BYTE PTR [eax]
c0014bdf:	3c 66                	cmp    al,0x66
c0014be1:	75 1f                	jne    c0014c02 <opcodeFault(regs*, void*)+0xd0>
c0014be3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014be7:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014beb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bf4:	8d 50 01             	lea    edx,[eax+0x1]
c0014bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bfd:	e9 85 00 00 00       	jmp    c0014c87 <opcodeFault(regs*, void*)+0x155>
c0014c02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c05:	8a 00                	mov    al,BYTE PTR [eax]
c0014c07:	3c 67                	cmp    al,0x67
c0014c09:	75 18                	jne    c0014c23 <opcodeFault(regs*, void*)+0xf1>
c0014c0b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c0f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c15:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c18:	8d 50 01             	lea    edx,[eax+0x1]
c0014c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c21:	eb 64                	jmp    c0014c87 <opcodeFault(regs*, void*)+0x155>
c0014c23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c26:	8a 00                	mov    al,BYTE PTR [eax]
c0014c28:	3c 2e                	cmp    al,0x2e
c0014c2a:	74 09                	je     c0014c35 <opcodeFault(regs*, void*)+0x103>
c0014c2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c2f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c31:	3c 3e                	cmp    al,0x3e
c0014c33:	75 18                	jne    c0014c4d <opcodeFault(regs*, void*)+0x11b>
c0014c35:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c39:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c3f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c42:	8d 50 01             	lea    edx,[eax+0x1]
c0014c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c48:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c4b:	eb 3a                	jmp    c0014c87 <opcodeFault(regs*, void*)+0x155>
c0014c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c50:	8a 00                	mov    al,BYTE PTR [eax]
c0014c52:	3c 36                	cmp    al,0x36
c0014c54:	74 1b                	je     c0014c71 <opcodeFault(regs*, void*)+0x13f>
c0014c56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c59:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5b:	3c 26                	cmp    al,0x26
c0014c5d:	74 12                	je     c0014c71 <opcodeFault(regs*, void*)+0x13f>
c0014c5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c62:	8a 00                	mov    al,BYTE PTR [eax]
c0014c64:	3c 64                	cmp    al,0x64
c0014c66:	74 09                	je     c0014c71 <opcodeFault(regs*, void*)+0x13f>
c0014c68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c6b:	8a 00                	mov    al,BYTE PTR [eax]
c0014c6d:	3c 65                	cmp    al,0x65
c0014c6f:	75 16                	jne    c0014c87 <opcodeFault(regs*, void*)+0x155>
c0014c71:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c75:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c7e:	8d 50 01             	lea    edx,[eax+0x1]
c0014c81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c84:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8a:	8a 00                	mov    al,BYTE PTR [eax]
c0014c8c:	3c 0f                	cmp    al,0xf
c0014c8e:	0f 85 ad 00 00 00    	jne    c0014d41 <opcodeFault(regs*, void*)+0x20f>
c0014c94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c97:	40                   	inc    eax
c0014c98:	8a 00                	mov    al,BYTE PTR [eax]
c0014c9a:	3c c2                	cmp    al,0xc2
c0014c9c:	74 0e                	je     c0014cac <opcodeFault(regs*, void*)+0x17a>
c0014c9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca1:	40                   	inc    eax
c0014ca2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ca4:	3c c3                	cmp    al,0xc3
c0014ca6:	0f 85 95 00 00 00    	jne    c0014d41 <opcodeFault(regs*, void*)+0x20f>
c0014cac:	83 ec 0c             	sub    esp,0xc
c0014caf:	68 3f ae 02 c0       	push   0xc002ae3f
c0014cb4:	e8 3c da ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0014cb9:	83 c4 10             	add    esp,0x10
c0014cbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc2:	8d 50 01             	lea    edx,[eax+0x1]
c0014cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ccb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd1:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd3:	8d 50 fe             	lea    edx,[eax-0x2]
c0014cd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd9:	88 10                	mov    BYTE PTR [eax],dl
c0014cdb:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014cde:	50                   	push   eax
c0014cdf:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ce2:	50                   	push   eax
c0014ce3:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ce6:	50                   	push   eax
c0014ce7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cea:	e8 8b 48 00 00       	call   c001957a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cef:	83 c4 10             	add    esp,0x10
c0014cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf8:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cfb:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014cfe:	01 d0                	add    eax,edx
c0014d00:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014d03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d06:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d09:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014d0c:	48                   	dec    eax
c0014d0d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014d10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d13:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014d16:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1c:	83 ec 04             	sub    esp,0x4
c0014d1f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014d22:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014d25:	50                   	push   eax
c0014d26:	e8 89 b4 fe ff       	call   c00001b4 <voodooXADD>
c0014d2b:	83 c4 10             	add    esp,0x10
c0014d2e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014d31:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014d34:	01 c2                	add    edx,eax
c0014d36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d39:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d3c:	e9 07 04 00 00       	jmp    c0015148 <opcodeFault(regs*, void*)+0x616>
c0014d41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d44:	8a 00                	mov    al,BYTE PTR [eax]
c0014d46:	3c 0f                	cmp    al,0xf
c0014d48:	0f 85 8b 01 00 00    	jne    c0014ed9 <opcodeFault(regs*, void*)+0x3a7>
c0014d4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d51:	40                   	inc    eax
c0014d52:	8a 00                	mov    al,BYTE PTR [eax]
c0014d54:	3c c7                	cmp    al,0xc7
c0014d56:	0f 86 7d 01 00 00    	jbe    c0014ed9 <opcodeFault(regs*, void*)+0x3a7>
c0014d5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d5f:	40                   	inc    eax
c0014d60:	8a 00                	mov    al,BYTE PTR [eax]
c0014d62:	3c cf                	cmp    al,0xcf
c0014d64:	0f 87 6f 01 00 00    	ja     c0014ed9 <opcodeFault(regs*, void*)+0x3a7>
c0014d6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d6d:	40                   	inc    eax
c0014d6e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d70:	83 c0 38             	add    eax,0x38
c0014d73:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014d76:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d7a:	75 0b                	jne    c0014d87 <opcodeFault(regs*, void*)+0x255>
c0014d7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d82:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d85:	eb 75                	jmp    c0014dfc <opcodeFault(regs*, void*)+0x2ca>
c0014d87:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d8b:	75 0b                	jne    c0014d98 <opcodeFault(regs*, void*)+0x266>
c0014d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d90:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d93:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d96:	eb 64                	jmp    c0014dfc <opcodeFault(regs*, void*)+0x2ca>
c0014d98:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d9c:	75 0b                	jne    c0014da9 <opcodeFault(regs*, void*)+0x277>
c0014d9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014da4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014da7:	eb 53                	jmp    c0014dfc <opcodeFault(regs*, void*)+0x2ca>
c0014da9:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014dad:	75 0b                	jne    c0014dba <opcodeFault(regs*, void*)+0x288>
c0014daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014db5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014db8:	eb 42                	jmp    c0014dfc <opcodeFault(regs*, void*)+0x2ca>
c0014dba:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014dbe:	75 0b                	jne    c0014dcb <opcodeFault(regs*, void*)+0x299>
c0014dc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc3:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014dc6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dc9:	eb 31                	jmp    c0014dfc <opcodeFault(regs*, void*)+0x2ca>
c0014dcb:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014dcf:	75 0b                	jne    c0014ddc <opcodeFault(regs*, void*)+0x2aa>
c0014dd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014dd7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dda:	eb 20                	jmp    c0014dfc <opcodeFault(regs*, void*)+0x2ca>
c0014ddc:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014de0:	75 0b                	jne    c0014ded <opcodeFault(regs*, void*)+0x2bb>
c0014de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014de8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014deb:	eb 0f                	jmp    c0014dfc <opcodeFault(regs*, void*)+0x2ca>
c0014ded:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014df1:	75 09                	jne    c0014dfc <opcodeFault(regs*, void*)+0x2ca>
c0014df3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014df9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dfc:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014e00:	74 10                	je     c0014e12 <opcodeFault(regs*, void*)+0x2e0>
c0014e02:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014e09:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014e10:	eb 2d                	jmp    c0014e3f <opcodeFault(regs*, void*)+0x30d>
c0014e12:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e15:	c1 e0 18             	shl    eax,0x18
c0014e18:	89 c2                	mov    edx,eax
c0014e1a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e1d:	c1 e0 08             	shl    eax,0x8
c0014e20:	25 00 00 ff 00       	and    eax,0xff0000
c0014e25:	09 c2                	or     edx,eax
c0014e27:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e2a:	c1 e8 08             	shr    eax,0x8
c0014e2d:	25 00 ff 00 00       	and    eax,0xff00
c0014e32:	09 c2                	or     edx,eax
c0014e34:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e37:	c1 e8 18             	shr    eax,0x18
c0014e3a:	09 d0                	or     eax,edx
c0014e3c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e3f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e43:	75 0b                	jne    c0014e50 <opcodeFault(regs*, void*)+0x31e>
c0014e45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e48:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e4b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e4e:	eb 75                	jmp    c0014ec5 <opcodeFault(regs*, void*)+0x393>
c0014e50:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e54:	75 0b                	jne    c0014e61 <opcodeFault(regs*, void*)+0x32f>
c0014e56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e59:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e5c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e5f:	eb 64                	jmp    c0014ec5 <opcodeFault(regs*, void*)+0x393>
c0014e61:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e65:	75 0b                	jne    c0014e72 <opcodeFault(regs*, void*)+0x340>
c0014e67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e6d:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e70:	eb 53                	jmp    c0014ec5 <opcodeFault(regs*, void*)+0x393>
c0014e72:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e76:	75 0b                	jne    c0014e83 <opcodeFault(regs*, void*)+0x351>
c0014e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e7e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014e81:	eb 42                	jmp    c0014ec5 <opcodeFault(regs*, void*)+0x393>
c0014e83:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e87:	75 0b                	jne    c0014e94 <opcodeFault(regs*, void*)+0x362>
c0014e89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e8f:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014e92:	eb 31                	jmp    c0014ec5 <opcodeFault(regs*, void*)+0x393>
c0014e94:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e98:	75 0b                	jne    c0014ea5 <opcodeFault(regs*, void*)+0x373>
c0014e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ea0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014ea3:	eb 20                	jmp    c0014ec5 <opcodeFault(regs*, void*)+0x393>
c0014ea5:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014ea9:	75 0b                	jne    c0014eb6 <opcodeFault(regs*, void*)+0x384>
c0014eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014eb1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014eb4:	eb 0f                	jmp    c0014ec5 <opcodeFault(regs*, void*)+0x393>
c0014eb6:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014eba:	75 09                	jne    c0014ec5 <opcodeFault(regs*, void*)+0x393>
c0014ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ebf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ec2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014ec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ecb:	8d 50 02             	lea    edx,[eax+0x2]
c0014ece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ed4:	e9 6f 02 00 00       	jmp    c0015148 <opcodeFault(regs*, void*)+0x616>
c0014ed9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014edc:	8a 00                	mov    al,BYTE PTR [eax]
c0014ede:	3c 0f                	cmp    al,0xf
c0014ee0:	0f 85 8d 01 00 00    	jne    c0015073 <opcodeFault(regs*, void*)+0x541>
c0014ee6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ee9:	40                   	inc    eax
c0014eea:	8a 00                	mov    al,BYTE PTR [eax]
c0014eec:	3c c7                	cmp    al,0xc7
c0014eee:	0f 85 7f 01 00 00    	jne    c0015073 <opcodeFault(regs*, void*)+0x541>
c0014ef4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014efd:	8d 50 01             	lea    edx,[eax+0x1]
c0014f00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f03:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f06:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014f09:	50                   	push   eax
c0014f0a:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014f0d:	50                   	push   eax
c0014f0e:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014f11:	50                   	push   eax
c0014f12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f15:	e8 60 46 00 00       	call   c001957a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014f1a:	83 c4 10             	add    esp,0x10
c0014f1d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014f20:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014f23:	83 f0 01             	xor    eax,0x1
c0014f26:	84 c0                	test   al,al
c0014f28:	0f 84 45 01 00 00    	je     c0015073 <opcodeFault(regs*, void*)+0x541>
c0014f2e:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014f31:	3c 01                	cmp    al,0x1
c0014f33:	0f 85 3a 01 00 00    	jne    c0015073 <opcodeFault(regs*, void*)+0x541>
c0014f39:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014f3c:	83 f0 01             	xor    eax,0x1
c0014f3f:	84 c0                	test   al,al
c0014f41:	0f 84 2c 01 00 00    	je     c0015073 <opcodeFault(regs*, void*)+0x541>
c0014f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f4d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f50:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f57:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f5a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f5d:	89 c2                	mov    edx,eax
c0014f5f:	b8 00 00 00 00       	mov    eax,0x0
c0014f64:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f67:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f70:	ba 00 00 00 00       	mov    edx,0x0
c0014f75:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014f78:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f81:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f84:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014f8b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f8e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f91:	89 c2                	mov    edx,eax
c0014f93:	b8 00 00 00 00       	mov    eax,0x0
c0014f98:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f9b:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014fa4:	ba 00 00 00 00       	mov    edx,0x0
c0014fa9:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014fac:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014faf:	fa                   	cli    
c0014fb0:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0014fb5:	40                   	inc    eax
c0014fb6:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0014fbb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fbe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fc3:	89 c1                	mov    ecx,eax
c0014fc5:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014fc8:	89 cb                	mov    ebx,ecx
c0014fca:	89 d0                	mov    eax,edx
c0014fcc:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014fcf:	89 c6                	mov    esi,eax
c0014fd1:	89 f0                	mov    eax,esi
c0014fd3:	09 d8                	or     eax,ebx
c0014fd5:	85 c0                	test   eax,eax
c0014fd7:	75 21                	jne    c0014ffa <opcodeFault(regs*, void*)+0x4c8>
c0014fd9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014fdc:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014fdf:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014fe2:	89 01                	mov    DWORD PTR [ecx],eax
c0014fe4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014fe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fed:	83 c8 40             	or     eax,0x40
c0014ff0:	89 c2                	mov    edx,eax
c0014ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014ff8:	eb 3e                	jmp    c0015038 <opcodeFault(regs*, void*)+0x506>
c0014ffa:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ffd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015000:	8b 00                	mov    eax,DWORD PTR [eax]
c0015002:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015005:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015008:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001500b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015011:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015014:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015017:	89 d0                	mov    eax,edx
c0015019:	31 d2                	xor    edx,edx
c001501b:	89 c3                	mov    ebx,eax
c001501d:	89 d6                	mov    esi,edx
c001501f:	89 da                	mov    edx,ebx
c0015021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015024:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001502d:	83 e0 bf             	and    eax,0xffffffbf
c0015030:	89 c2                	mov    edx,eax
c0015032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015035:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015038:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001503d:	48                   	dec    eax
c001503e:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0015043:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015048:	85 c0                	test   eax,eax
c001504a:	75 01                	jne    c001504d <opcodeFault(regs*, void*)+0x51b>
c001504c:	fb                   	sti    
c001504d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015050:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015053:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015056:	01 c2                	add    edx,eax
c0015058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001505e:	83 ec 0c             	sub    esp,0xc
c0015061:	68 4e ae 02 c0       	push   0xc002ae4e
c0015066:	e8 8a d6 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001506b:	83 c4 10             	add    esp,0x10
c001506e:	e9 d5 00 00 00       	jmp    c0015148 <opcodeFault(regs*, void*)+0x616>
c0015073:	83 ec 0c             	sub    esp,0xc
c0015076:	68 61 ae 02 c0       	push   0xc002ae61
c001507b:	e8 75 d6 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0015080:	83 c4 10             	add    esp,0x10
c0015083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015086:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001508f:	c1 e0 04             	shl    eax,0x4
c0015092:	01 d0                	add    eax,edx
c0015094:	83 c0 03             	add    eax,0x3
c0015097:	8a 00                	mov    al,BYTE PTR [eax]
c0015099:	0f b6 d8             	movzx  ebx,al
c001509c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150a8:	c1 e0 04             	shl    eax,0x4
c00150ab:	01 d0                	add    eax,edx
c00150ad:	83 c0 02             	add    eax,0x2
c00150b0:	8a 00                	mov    al,BYTE PTR [eax]
c00150b2:	0f b6 c8             	movzx  ecx,al
c00150b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150c1:	c1 e0 04             	shl    eax,0x4
c00150c4:	01 d0                	add    eax,edx
c00150c6:	40                   	inc    eax
c00150c7:	8a 00                	mov    al,BYTE PTR [eax]
c00150c9:	0f b6 d0             	movzx  edx,al
c00150cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cf:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00150d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150d8:	c1 e0 04             	shl    eax,0x4
c00150db:	01 f0                	add    eax,esi
c00150dd:	8a 00                	mov    al,BYTE PTR [eax]
c00150df:	0f b6 c0             	movzx  eax,al
c00150e2:	83 ec 0c             	sub    esp,0xc
c00150e5:	53                   	push   ebx
c00150e6:	51                   	push   ecx
c00150e7:	52                   	push   edx
c00150e8:	50                   	push   eax
c00150e9:	68 74 ae 02 c0       	push   0xc002ae74
c00150ee:	e8 02 d6 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00150f3:	83 c4 20             	add    esp,0x20
c00150f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150fc:	83 c0 03             	add    eax,0x3
c00150ff:	8a 00                	mov    al,BYTE PTR [eax]
c0015101:	0f b6 d8             	movzx  ebx,al
c0015104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015107:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001510a:	83 c0 02             	add    eax,0x2
c001510d:	8a 00                	mov    al,BYTE PTR [eax]
c001510f:	0f b6 c8             	movzx  ecx,al
c0015112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015115:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015118:	40                   	inc    eax
c0015119:	8a 00                	mov    al,BYTE PTR [eax]
c001511b:	0f b6 d0             	movzx  edx,al
c001511e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015121:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015124:	8a 00                	mov    al,BYTE PTR [eax]
c0015126:	0f b6 c0             	movzx  eax,al
c0015129:	83 ec 0c             	sub    esp,0xc
c001512c:	53                   	push   ebx
c001512d:	51                   	push   ecx
c001512e:	52                   	push   edx
c001512f:	50                   	push   eax
c0015130:	68 9c ae 02 c0       	push   0xc002ae9c
c0015135:	e8 bb d5 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001513a:	83 c4 20             	add    esp,0x20
c001513d:	83 ec 0c             	sub    esp,0xc
c0015140:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015143:	e8 48 f4 ff ff       	call   c0014590 <displayDebugInfo(regs*)>
c0015148:	8d 65 f8             	lea    esp,[ebp-0x8]
c001514b:	5b                   	pop    ebx
c001514c:	5e                   	pop    esi
c001514d:	5d                   	pop    ebp
c001514e:	c3                   	ret    

c001514f <displayProgramFault(char const*)>:
c001514f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015154:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015157:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001515d:	85 c0                	test   eax,eax
c001515f:	74 15                	je     c0015176 <displayProgramFault(char const*)+0x27>
c0015161:	83 ec 0c             	sub    esp,0xc
c0015164:	6a 04                	push   0x4
c0015166:	6a 0f                	push   0xf
c0015168:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001516c:	50                   	push   eax
c001516d:	e8 ea b3 ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015172:	83 c4 1c             	add    esp,0x1c
c0015175:	c3                   	ret    
c0015176:	c3                   	ret    

c0015177 <setupInterruptController()>:
c0015177:	55                   	push   ebp
c0015178:	89 e5                	mov    ebp,esp
c001517a:	53                   	push   ebx
c001517b:	83 ec 24             	sub    esp,0x24
c001517e:	b8 00 00 00 00       	mov    eax,0x0
c0015183:	85 c0                	test   eax,eax
c0015185:	0f 95 c0             	setne  al
c0015188:	84 c0                	test   al,al
c001518a:	74 5b                	je     c00151e7 <setupInterruptController()+0x70>
c001518c:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015193:	83 ec 0c             	sub    esp,0xc
c0015196:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015199:	e8 fb a3 ff ff       	call   c000f599 <malloc>
c001519e:	83 c4 10             	add    esp,0x10
c00151a1:	89 c3                	mov    ebx,eax
c00151a3:	83 ec 0c             	sub    esp,0xc
c00151a6:	53                   	push   ebx
c00151a7:	e8 02 05 01 00       	call   c00256ae <APIC::APIC()>
c00151ac:	83 c4 10             	add    esp,0x10
c00151af:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00151b2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00151b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ba:	83 c0 08             	add    eax,0x8
c00151bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bf:	6a 00                	push   0x0
c00151c1:	6a 00                	push   0x0
c00151c3:	6a 00                	push   0x0
c00151c5:	52                   	push   edx
c00151c6:	ff d0                	call   eax
c00151c8:	83 c4 10             	add    esp,0x10
c00151cb:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00151d0:	83 ec 08             	sub    esp,0x8
c00151d3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00151d6:	50                   	push   eax
c00151d7:	e8 52 e9 ff ff       	call   c0013b2e <Device::addChild(Device*)>
c00151dc:	83 c4 10             	add    esp,0x10
c00151df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151e2:	e9 79 03 00 00       	jmp    c0015560 <setupInterruptController()+0x3e9>
c00151e7:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c00151ec:	84 c0                	test   al,al
c00151ee:	75 14                	jne    c0015204 <setupInterruptController()+0x8d>
c00151f0:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00151f5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00151fb:	83 e2 fe             	and    edx,0xfffffffe
c00151fe:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015204:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0015209:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001520f:	83 e0 01             	and    eax,0x1
c0015212:	84 c0                	test   al,al
c0015214:	0f 95 c0             	setne  al
c0015217:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001521a:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015221:	83 ec 0c             	sub    esp,0xc
c0015224:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015227:	e8 6d a3 ff ff       	call   c000f599 <malloc>
c001522c:	83 c4 10             	add    esp,0x10
c001522f:	89 c3                	mov    ebx,eax
c0015231:	83 ec 0c             	sub    esp,0xc
c0015234:	53                   	push   ebx
c0015235:	e8 cc 09 01 00       	call   c0025c06 <PIC::PIC()>
c001523a:	83 c4 10             	add    esp,0x10
c001523d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015240:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015243:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015246:	8b 00                	mov    eax,DWORD PTR [eax]
c0015248:	83 c0 08             	add    eax,0x8
c001524b:	8b 00                	mov    eax,DWORD PTR [eax]
c001524d:	6a 00                	push   0x0
c001524f:	6a 00                	push   0x0
c0015251:	6a 00                	push   0x0
c0015253:	52                   	push   edx
c0015254:	ff d0                	call   eax
c0015256:	83 c4 10             	add    esp,0x10
c0015259:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001525d:	74 73                	je     c00152d2 <setupInterruptController()+0x15b>
c001525f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015262:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015265:	8b 00                	mov    eax,DWORD PTR [eax]
c0015267:	83 c0 0c             	add    eax,0xc
c001526a:	8b 00                	mov    eax,DWORD PTR [eax]
c001526c:	6a 00                	push   0x0
c001526e:	6a 00                	push   0x0
c0015270:	6a 00                	push   0x0
c0015272:	52                   	push   edx
c0015273:	ff d0                	call   eax
c0015275:	83 c4 10             	add    esp,0x10
c0015278:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001527c:	74 15                	je     c0015293 <setupInterruptController()+0x11c>
c001527e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015281:	8b 00                	mov    eax,DWORD PTR [eax]
c0015283:	83 c0 04             	add    eax,0x4
c0015286:	8b 00                	mov    eax,DWORD PTR [eax]
c0015288:	83 ec 0c             	sub    esp,0xc
c001528b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001528e:	ff d0                	call   eax
c0015290:	83 c4 10             	add    esp,0x10
c0015293:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001529a:	83 ec 0c             	sub    esp,0xc
c001529d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00152a0:	e8 f4 a2 ff ff       	call   c000f599 <malloc>
c00152a5:	83 c4 10             	add    esp,0x10
c00152a8:	89 c3                	mov    ebx,eax
c00152aa:	83 ec 0c             	sub    esp,0xc
c00152ad:	53                   	push   ebx
c00152ae:	e8 fb 03 01 00       	call   c00256ae <APIC::APIC()>
c00152b3:	83 c4 10             	add    esp,0x10
c00152b6:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152b9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c1:	83 c0 08             	add    eax,0x8
c00152c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c6:	6a 00                	push   0x0
c00152c8:	6a 00                	push   0x0
c00152ca:	6a 00                	push   0x0
c00152cc:	52                   	push   edx
c00152cd:	ff d0                	call   eax
c00152cf:	83 c4 10             	add    esp,0x10
c00152d2:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00152d7:	83 ec 08             	sub    esp,0x8
c00152da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152dd:	50                   	push   eax
c00152de:	e8 4b e8 ff ff       	call   c0013b2e <Device::addChild(Device*)>
c00152e3:	83 c4 10             	add    esp,0x10
c00152e6:	c7 05 88 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db88,0x0
c00152f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f5:	83 c0 24             	add    eax,0x24
c00152f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fa:	6a 00                	push   0x0
c00152fc:	68 13 4b 01 c0       	push   0xc0014b13
c0015301:	6a 00                	push   0x0
c0015303:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015306:	ff d0                	call   eax
c0015308:	83 c4 10             	add    esp,0x10
c001530b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015310:	83 c0 24             	add    eax,0x24
c0015313:	8b 00                	mov    eax,DWORD PTR [eax]
c0015315:	6a 00                	push   0x0
c0015317:	68 13 4b 01 c0       	push   0xc0014b13
c001531c:	6a 01                	push   0x1
c001531e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015321:	ff d0                	call   eax
c0015323:	83 c4 10             	add    esp,0x10
c0015326:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015329:	8b 00                	mov    eax,DWORD PTR [eax]
c001532b:	83 c0 24             	add    eax,0x24
c001532e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015330:	6a 00                	push   0x0
c0015332:	68 ed 43 01 c0       	push   0xc00143ed
c0015337:	6a 02                	push   0x2
c0015339:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001533c:	ff d0                	call   eax
c001533e:	83 c4 10             	add    esp,0x10
c0015341:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015344:	8b 00                	mov    eax,DWORD PTR [eax]
c0015346:	83 c0 24             	add    eax,0x24
c0015349:	8b 00                	mov    eax,DWORD PTR [eax]
c001534b:	6a 00                	push   0x0
c001534d:	68 13 4b 01 c0       	push   0xc0014b13
c0015352:	6a 03                	push   0x3
c0015354:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015357:	ff d0                	call   eax
c0015359:	83 c4 10             	add    esp,0x10
c001535c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015361:	83 c0 24             	add    eax,0x24
c0015364:	8b 00                	mov    eax,DWORD PTR [eax]
c0015366:	6a 00                	push   0x0
c0015368:	68 13 4b 01 c0       	push   0xc0014b13
c001536d:	6a 04                	push   0x4
c001536f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015372:	ff d0                	call   eax
c0015374:	83 c4 10             	add    esp,0x10
c0015377:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537a:	8b 00                	mov    eax,DWORD PTR [eax]
c001537c:	83 c0 24             	add    eax,0x24
c001537f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015381:	6a 00                	push   0x0
c0015383:	68 13 4b 01 c0       	push   0xc0014b13
c0015388:	6a 05                	push   0x5
c001538a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538d:	ff d0                	call   eax
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015395:	8b 00                	mov    eax,DWORD PTR [eax]
c0015397:	83 c0 24             	add    eax,0x24
c001539a:	8b 00                	mov    eax,DWORD PTR [eax]
c001539c:	6a 00                	push   0x0
c001539e:	68 32 4b 01 c0       	push   0xc0014b32
c00153a3:	6a 06                	push   0x6
c00153a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a8:	ff d0                	call   eax
c00153aa:	83 c4 10             	add    esp,0x10
c00153ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b2:	83 c0 24             	add    eax,0x24
c00153b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b7:	6a 00                	push   0x0
c00153b9:	68 1f 4a 01 c0       	push   0xc0014a1f
c00153be:	6a 07                	push   0x7
c00153c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153c3:	ff d0                	call   eax
c00153c5:	83 c4 10             	add    esp,0x10
c00153c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cd:	83 c0 24             	add    eax,0x24
c00153d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d2:	6a 00                	push   0x0
c00153d4:	68 08 42 01 c0       	push   0xc0014208
c00153d9:	6a 08                	push   0x8
c00153db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153de:	ff d0                	call   eax
c00153e0:	83 c4 10             	add    esp,0x10
c00153e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e8:	83 c0 24             	add    eax,0x24
c00153eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ed:	6a 00                	push   0x0
c00153ef:	68 13 4b 01 c0       	push   0xc0014b13
c00153f4:	6a 09                	push   0x9
c00153f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f9:	ff d0                	call   eax
c00153fb:	83 c4 10             	add    esp,0x10
c00153fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015401:	8b 00                	mov    eax,DWORD PTR [eax]
c0015403:	83 c0 24             	add    eax,0x24
c0015406:	8b 00                	mov    eax,DWORD PTR [eax]
c0015408:	6a 00                	push   0x0
c001540a:	68 13 4b 01 c0       	push   0xc0014b13
c001540f:	6a 0a                	push   0xa
c0015411:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015414:	ff d0                	call   eax
c0015416:	83 c4 10             	add    esp,0x10
c0015419:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541c:	8b 00                	mov    eax,DWORD PTR [eax]
c001541e:	83 c0 24             	add    eax,0x24
c0015421:	8b 00                	mov    eax,DWORD PTR [eax]
c0015423:	6a 00                	push   0x0
c0015425:	68 13 4b 01 c0       	push   0xc0014b13
c001542a:	6a 0b                	push   0xb
c001542c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001542f:	ff d0                	call   eax
c0015431:	83 c4 10             	add    esp,0x10
c0015434:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015437:	8b 00                	mov    eax,DWORD PTR [eax]
c0015439:	83 c0 24             	add    eax,0x24
c001543c:	8b 00                	mov    eax,DWORD PTR [eax]
c001543e:	6a 00                	push   0x0
c0015440:	68 13 4b 01 c0       	push   0xc0014b13
c0015445:	6a 0c                	push   0xc
c0015447:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001544a:	ff d0                	call   eax
c001544c:	83 c4 10             	add    esp,0x10
c001544f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015452:	8b 00                	mov    eax,DWORD PTR [eax]
c0015454:	83 c0 24             	add    eax,0x24
c0015457:	8b 00                	mov    eax,DWORD PTR [eax]
c0015459:	6a 00                	push   0x0
c001545b:	68 92 4a 01 c0       	push   0xc0014a92
c0015460:	6a 0d                	push   0xd
c0015462:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015465:	ff d0                	call   eax
c0015467:	83 c4 10             	add    esp,0x10
c001546a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546d:	8b 00                	mov    eax,DWORD PTR [eax]
c001546f:	83 c0 24             	add    eax,0x24
c0015472:	8b 00                	mov    eax,DWORD PTR [eax]
c0015474:	6a 00                	push   0x0
c0015476:	68 cb 4a 01 c0       	push   0xc0014acb
c001547b:	6a 0e                	push   0xe
c001547d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015480:	ff d0                	call   eax
c0015482:	83 c4 10             	add    esp,0x10
c0015485:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015488:	8b 00                	mov    eax,DWORD PTR [eax]
c001548a:	83 c0 24             	add    eax,0x24
c001548d:	8b 00                	mov    eax,DWORD PTR [eax]
c001548f:	6a 00                	push   0x0
c0015491:	68 13 4b 01 c0       	push   0xc0014b13
c0015496:	6a 0f                	push   0xf
c0015498:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001549b:	ff d0                	call   eax
c001549d:	83 c4 10             	add    esp,0x10
c00154a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a5:	83 c0 24             	add    eax,0x24
c00154a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154aa:	6a 00                	push   0x0
c00154ac:	68 13 4b 01 c0       	push   0xc0014b13
c00154b1:	6a 10                	push   0x10
c00154b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154b6:	ff d0                	call   eax
c00154b8:	83 c4 10             	add    esp,0x10
c00154bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154be:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c0:	83 c0 24             	add    eax,0x24
c00154c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c5:	6a 00                	push   0x0
c00154c7:	68 13 4b 01 c0       	push   0xc0014b13
c00154cc:	6a 11                	push   0x11
c00154ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154d1:	ff d0                	call   eax
c00154d3:	83 c4 10             	add    esp,0x10
c00154d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154db:	83 c0 24             	add    eax,0x24
c00154de:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e0:	6a 00                	push   0x0
c00154e2:	68 13 4b 01 c0       	push   0xc0014b13
c00154e7:	6a 12                	push   0x12
c00154e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ec:	ff d0                	call   eax
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f6:	83 c0 24             	add    eax,0x24
c00154f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154fb:	6a 00                	push   0x0
c00154fd:	68 13 4b 01 c0       	push   0xc0014b13
c0015502:	6a 13                	push   0x13
c0015504:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015507:	ff d0                	call   eax
c0015509:	83 c4 10             	add    esp,0x10
c001550c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015511:	83 c0 24             	add    eax,0x24
c0015514:	8b 00                	mov    eax,DWORD PTR [eax]
c0015516:	6a 00                	push   0x0
c0015518:	68 13 4b 01 c0       	push   0xc0014b13
c001551d:	6a 14                	push   0x14
c001551f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015522:	ff d0                	call   eax
c0015524:	83 c4 10             	add    esp,0x10
c0015527:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552a:	8b 00                	mov    eax,DWORD PTR [eax]
c001552c:	83 c0 24             	add    eax,0x24
c001552f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015531:	6a 00                	push   0x0
c0015533:	68 13 4b 01 c0       	push   0xc0014b13
c0015538:	6a 1e                	push   0x1e
c001553a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001553d:	ff d0                	call   eax
c001553f:	83 c4 10             	add    esp,0x10
c0015542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015545:	8b 00                	mov    eax,DWORD PTR [eax]
c0015547:	83 c0 24             	add    eax,0x24
c001554a:	8b 00                	mov    eax,DWORD PTR [eax]
c001554c:	6a 00                	push   0x0
c001554e:	68 50 c0 01 c0       	push   0xc001c050
c0015553:	6a 60                	push   0x60
c0015555:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015558:	ff d0                	call   eax
c001555a:	83 c4 10             	add    esp,0x10
c001555d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015560:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015563:	c9                   	leave  
c0015564:	c3                   	ret    
c0015565:	90                   	nop

c0015566 <InterruptController::convertLegacyIRQNumber(int)>:
c0015566:	55                   	push   ebp
c0015567:	89 e5                	mov    ebp,esp
c0015569:	83 ec 08             	sub    esp,0x8
c001556c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556f:	83 ec 0c             	sub    esp,0xc
c0015572:	50                   	push   eax
c0015573:	e8 b6 e8 ff ff       	call   c0013e2e <Device::getName()>
c0015578:	83 c4 10             	add    esp,0x10
c001557b:	8a 00                	mov    al,BYTE PTR [eax]
c001557d:	3c 41                	cmp    al,0x41
c001557f:	0f 94 c0             	sete   al
c0015582:	84 c0                	test   al,al
c0015584:	74 28                	je     c00155ae <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015586:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001558a:	7f 12                	jg     c001559e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001558c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001558f:	05 60 cc 02 c0       	add    eax,0xc002cc60
c0015594:	8a 00                	mov    al,BYTE PTR [eax]
c0015596:	0f b6 c0             	movzx  eax,al
c0015599:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001559c:	eb 10                	jmp    c00155ae <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001559e:	83 ec 0c             	sub    esp,0xc
c00155a1:	68 c4 ae 02 c0       	push   0xc002aec4
c00155a6:	e8 b6 48 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c00155ab:	83 c4 10             	add    esp,0x10
c00155ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155b1:	c9                   	leave  
c00155b2:	c3                   	ret    
c00155b3:	90                   	nop

c00155b4 <startGUI(void*)>:
c00155b4:	55                   	push   ebp
c00155b5:	89 e5                	mov    ebp,esp
c00155b7:	53                   	push   ebx
c00155b8:	83 ec 04             	sub    esp,0x4
c00155bb:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00155c0:	48                   	dec    eax
c00155c1:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c00155c6:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00155cb:	85 c0                	test   eax,eax
c00155cd:	75 01                	jne    c00155d0 <startGUI(void*)+0x1c>
c00155cf:	fb                   	sti    
c00155d0:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c00155d6:	83 ec 08             	sub    esp,0x8
c00155d9:	6a 01                	push   0x1
c00155db:	68 44 af 02 c0       	push   0xc002af44
c00155e0:	e8 46 7a 00 00       	call   c001d02b <Thr::loadDLL(char const*, bool)>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	83 ec 08             	sub    esp,0x8
c00155eb:	53                   	push   ebx
c00155ec:	50                   	push   eax
c00155ed:	e8 6a 7c 00 00       	call   c001d25c <Thr::executeDLL(unsigned long, void*)>
c00155f2:	83 c4 10             	add    esp,0x10
c00155f5:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c00155fb:	83 ec 08             	sub    esp,0x8
c00155fe:	6a 01                	push   0x1
c0015600:	68 5e af 02 c0       	push   0xc002af5e
c0015605:	e8 21 7a 00 00       	call   c001d02b <Thr::loadDLL(char const*, bool)>
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	83 ec 08             	sub    esp,0x8
c0015610:	53                   	push   ebx
c0015611:	50                   	push   eax
c0015612:	e8 45 7c 00 00       	call   c001d25c <Thr::executeDLL(unsigned long, void*)>
c0015617:	83 c4 10             	add    esp,0x10
c001561a:	90                   	nop
c001561b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001561e:	c9                   	leave  
c001561f:	c3                   	ret    

c0015620 <startGUIVESA(void*)>:
c0015620:	55                   	push   ebp
c0015621:	89 e5                	mov    ebp,esp
c0015623:	53                   	push   ebx
c0015624:	83 ec 04             	sub    esp,0x4
c0015627:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001562c:	48                   	dec    eax
c001562d:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0015632:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015637:	85 c0                	test   eax,eax
c0015639:	75 01                	jne    c001563c <startGUIVESA(void*)+0x1c>
c001563b:	fb                   	sti    
c001563c:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c0015642:	83 ec 08             	sub    esp,0x8
c0015645:	6a 01                	push   0x1
c0015647:	68 78 af 02 c0       	push   0xc002af78
c001564c:	e8 da 79 00 00       	call   c001d02b <Thr::loadDLL(char const*, bool)>
c0015651:	83 c4 10             	add    esp,0x10
c0015654:	83 ec 08             	sub    esp,0x8
c0015657:	53                   	push   ebx
c0015658:	50                   	push   eax
c0015659:	e8 fe 7b 00 00       	call   c001d25c <Thr::executeDLL(unsigned long, void*)>
c001565e:	83 c4 10             	add    esp,0x10
c0015661:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c0015667:	83 ec 08             	sub    esp,0x8
c001566a:	6a 01                	push   0x1
c001566c:	68 5e af 02 c0       	push   0xc002af5e
c0015671:	e8 b5 79 00 00       	call   c001d02b <Thr::loadDLL(char const*, bool)>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	83 ec 08             	sub    esp,0x8
c001567c:	53                   	push   ebx
c001567d:	50                   	push   eax
c001567e:	e8 d9 7b 00 00       	call   c001d25c <Thr::executeDLL(unsigned long, void*)>
c0015683:	83 c4 10             	add    esp,0x10
c0015686:	90                   	nop
c0015687:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001568a:	c9                   	leave  
c001568b:	c3                   	ret    

c001568c <sendKeyToTerminal(unsigned char)>:
c001568c:	55                   	push   ebp
c001568d:	89 e5                	mov    ebp,esp
c001568f:	83 ec 28             	sub    esp,0x28
c0015692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015695:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015698:	a1 c4 da 02 c0       	mov    eax,ds:0xc002dac4
c001569d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00156a1:	83 ec 08             	sub    esp,0x8
c00156a4:	52                   	push   edx
c00156a5:	50                   	push   eax
c00156a6:	e8 57 b3 ff ff       	call   c0010a02 <VgaText::receiveKey(unsigned char)>
c00156ab:	83 c4 10             	add    esp,0x10
c00156ae:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00156b2:	0f 85 8f 00 00 00    	jne    c0015747 <sendKeyToTerminal(unsigned char)+0xbb>
c00156b8:	fa                   	cli    
c00156b9:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00156be:	40                   	inc    eax
c00156bf:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c00156c4:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c00156c9:	40                   	inc    eax
c00156ca:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c00156cf:	a1 a0 db 02 c0       	mov    eax,ds:0xc002dba0
c00156d4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156d7:	c7 05 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dba0,0x0
c00156e1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156e5:	74 1f                	je     c0015706 <sendKeyToTerminal(unsigned char)+0x7a>
c00156e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156f6:	83 ec 0c             	sub    esp,0xc
c00156f9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156fc:	e8 73 87 00 00       	call   c001de74 <unblockTask(ThreadControlBlock*)>
c0015701:	83 c4 10             	add    esp,0x10
c0015704:	eb db                	jmp    c00156e1 <sendKeyToTerminal(unsigned char)+0x55>
c0015706:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001570b:	48                   	dec    eax
c001570c:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c0015711:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c0015716:	85 c0                	test   eax,eax
c0015718:	75 18                	jne    c0015732 <sendKeyToTerminal(unsigned char)+0xa6>
c001571a:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001571f:	85 c0                	test   eax,eax
c0015721:	74 0f                	je     c0015732 <sendKeyToTerminal(unsigned char)+0xa6>
c0015723:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001572d:	e8 bf 82 00 00       	call   c001d9f1 <schedule()>
c0015732:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015737:	48                   	dec    eax
c0015738:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001573d:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015742:	85 c0                	test   eax,eax
c0015744:	75 01                	jne    c0015747 <sendKeyToTerminal(unsigned char)+0xbb>
c0015746:	fb                   	sti    
c0015747:	90                   	nop
c0015748:	c9                   	leave  
c0015749:	c3                   	ret    

c001574a <sendKeyboardToken(KeyboardToken)>:
c001574a:	55                   	push   ebp
c001574b:	89 e5                	mov    ebp,esp
c001574d:	83 ec 18             	sub    esp,0x18
c0015750:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015756:	0f b7 c0             	movzx  eax,ax
c0015759:	83 f2 01             	xor    edx,0x1
c001575c:	88 90 c0 db 02 c0    	mov    BYTE PTR [eax-0x3ffd2440],dl
c0015762:	a1 a8 db 02 c0       	mov    eax,ds:0xc002dba8
c0015767:	85 c0                	test   eax,eax
c0015769:	74 24                	je     c001578f <sendKeyboardToken(KeyboardToken)+0x45>
c001576b:	8b 0d a8 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002dba8
c0015771:	83 ec 04             	sub    esp,0x4
c0015774:	68 c0 db 02 c0       	push   0xc002dbc0
c0015779:	83 ec 08             	sub    esp,0x8
c001577c:	89 e2                	mov    edx,esp
c001577e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015781:	89 02                	mov    DWORD PTR [edx],eax
c0015783:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015786:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001578a:	ff d1                	call   ecx
c001578c:	83 c4 10             	add    esp,0x10
c001578f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015792:	66 3d 03 02          	cmp    ax,0x203
c0015796:	75 07                	jne    c001579f <sendKeyboardToken(KeyboardToken)+0x55>
c0015798:	a0 c0 dc 02 c0       	mov    al,ds:0xc002dcc0
c001579d:	84 c0                	test   al,al
c001579f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00157a3:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00157a6:	a0 c8 df 02 c0       	mov    al,ds:0xc002dfc8
c00157ab:	38 c2                	cmp    dl,al
c00157ad:	74 1c                	je     c00157cb <sendKeyboardToken(KeyboardToken)+0x81>
c00157af:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00157b2:	a2 c8 df 02 c0       	mov    ds:0xc002dfc8,al
c00157b7:	a0 c8 df 02 c0       	mov    al,ds:0xc002dfc8
c00157bc:	0f b6 c0             	movzx  eax,al
c00157bf:	83 ec 0c             	sub    esp,0xc
c00157c2:	50                   	push   eax
c00157c3:	e8 7c a8 ff ff       	call   c0010044 <setTerminalScrollLock(bool)>
c00157c8:	83 c4 10             	add    esp,0x10
c00157cb:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00157ce:	84 c0                	test   al,al
c00157d0:	0f 84 ae 00 00 00    	je     c0015884 <sendKeyboardToken(KeyboardToken)+0x13a>
c00157d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d9:	66 3d 10 03          	cmp    ax,0x310
c00157dd:	75 06                	jne    c00157e5 <sendKeyboardToken(KeyboardToken)+0x9b>
c00157df:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00157e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e8:	66 3d 11 03          	cmp    ax,0x311
c00157ec:	75 06                	jne    c00157f4 <sendKeyboardToken(KeyboardToken)+0xaa>
c00157ee:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00157f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f7:	66 3d 12 03          	cmp    ax,0x312
c00157fb:	75 06                	jne    c0015803 <sendKeyboardToken(KeyboardToken)+0xb9>
c00157fd:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015806:	66 3d 13 03          	cmp    ax,0x313
c001580a:	75 06                	jne    c0015812 <sendKeyboardToken(KeyboardToken)+0xc8>
c001580c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015815:	66 3d 14 03          	cmp    ax,0x314
c0015819:	75 06                	jne    c0015821 <sendKeyboardToken(KeyboardToken)+0xd7>
c001581b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015824:	66 3d 15 03          	cmp    ax,0x315
c0015828:	75 06                	jne    c0015830 <sendKeyboardToken(KeyboardToken)+0xe6>
c001582a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015833:	66 3d 16 03          	cmp    ax,0x316
c0015837:	75 06                	jne    c001583f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015839:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001583f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015842:	66 3d 17 03          	cmp    ax,0x317
c0015846:	75 06                	jne    c001584e <sendKeyboardToken(KeyboardToken)+0x104>
c0015848:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015851:	66 3d 18 03          	cmp    ax,0x318
c0015855:	75 06                	jne    c001585d <sendKeyboardToken(KeyboardToken)+0x113>
c0015857:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001585d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015860:	66 3d 19 03          	cmp    ax,0x319
c0015864:	75 06                	jne    c001586c <sendKeyboardToken(KeyboardToken)+0x122>
c0015866:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001586c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586f:	66 3d 1a 03          	cmp    ax,0x31a
c0015873:	0f 85 c9 00 00 00    	jne    c0015942 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015879:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001587f:	e9 be 00 00 00       	jmp    c0015942 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015887:	66 3d 10 03          	cmp    ax,0x310
c001588b:	75 0a                	jne    c0015897 <sendKeyboardToken(KeyboardToken)+0x14d>
c001588d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015893:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589a:	66 3d 11 03          	cmp    ax,0x311
c001589e:	75 0a                	jne    c00158aa <sendKeyboardToken(KeyboardToken)+0x160>
c00158a0:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00158a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ad:	66 3d 12 03          	cmp    ax,0x312
c00158b1:	75 0a                	jne    c00158bd <sendKeyboardToken(KeyboardToken)+0x173>
c00158b3:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00158b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c0:	66 3d 13 03          	cmp    ax,0x313
c00158c4:	75 0a                	jne    c00158d0 <sendKeyboardToken(KeyboardToken)+0x186>
c00158c6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00158cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d3:	66 3d 14 03          	cmp    ax,0x314
c00158d7:	75 0a                	jne    c00158e3 <sendKeyboardToken(KeyboardToken)+0x199>
c00158d9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00158df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e6:	66 3d 15 03          	cmp    ax,0x315
c00158ea:	75 0a                	jne    c00158f6 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00158ec:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f9:	66 3d 16 03          	cmp    ax,0x316
c00158fd:	75 0a                	jne    c0015909 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00158ff:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015905:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590c:	66 3d 17 03          	cmp    ax,0x317
c0015910:	75 0a                	jne    c001591c <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015912:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015918:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001591c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591f:	66 3d 18 03          	cmp    ax,0x318
c0015923:	75 0a                	jne    c001592f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015925:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001592b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001592f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015932:	66 3d 19 03          	cmp    ax,0x319
c0015936:	75 0a                	jne    c0015942 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015938:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001593e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015945:	66 3d 00 02          	cmp    ax,0x200
c0015949:	75 2c                	jne    c0015977 <sendKeyboardToken(KeyboardToken)+0x22d>
c001594b:	a0 c0 df 02 c0       	mov    al,ds:0xc002dfc0
c0015950:	83 f0 01             	xor    eax,0x1
c0015953:	84 c0                	test   al,al
c0015955:	74 20                	je     c0015977 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015957:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001595c:	6a 01                	push   0x1
c001595e:	6a 00                	push   0x0
c0015960:	68 b4 55 01 c0       	push   0xc00155b4
c0015965:	50                   	push   eax
c0015966:	e8 61 7e 00 00       	call   c001d7cc <Process::createThread(void (*)(void*), void*, int)>
c001596b:	83 c4 10             	add    esp,0x10
c001596e:	c6 05 c0 df 02 c0 01 	mov    BYTE PTR ds:0xc002dfc0,0x1
c0015975:	eb 33                	jmp    c00159aa <sendKeyboardToken(KeyboardToken)+0x260>
c0015977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597a:	66 3d 01 02          	cmp    ax,0x201
c001597e:	75 2a                	jne    c00159aa <sendKeyboardToken(KeyboardToken)+0x260>
c0015980:	a0 c0 df 02 c0       	mov    al,ds:0xc002dfc0
c0015985:	83 f0 01             	xor    eax,0x1
c0015988:	84 c0                	test   al,al
c001598a:	74 1e                	je     c00159aa <sendKeyboardToken(KeyboardToken)+0x260>
c001598c:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0015991:	6a 01                	push   0x1
c0015993:	6a 00                	push   0x0
c0015995:	68 20 56 01 c0       	push   0xc0015620
c001599a:	50                   	push   eax
c001599b:	e8 2c 7e 00 00       	call   c001d7cc <Process::createThread(void (*)(void*), void*, int)>
c00159a0:	83 c4 10             	add    esp,0x10
c00159a3:	c6 05 c0 df 02 c0 01 	mov    BYTE PTR ds:0xc002dfc0,0x1
c00159aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ad:	66 3d 1d 03          	cmp    ax,0x31d
c00159b1:	75 06                	jne    c00159b9 <sendKeyboardToken(KeyboardToken)+0x26f>
c00159b3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00159b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bc:	66 3d 1c 03          	cmp    ax,0x31c
c00159c0:	75 06                	jne    c00159c8 <sendKeyboardToken(KeyboardToken)+0x27e>
c00159c2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00159c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cb:	66 3d 1b 03          	cmp    ax,0x31b
c00159cf:	75 06                	jne    c00159d7 <sendKeyboardToken(KeyboardToken)+0x28d>
c00159d1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00159d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159da:	66 3d 1e 03          	cmp    ax,0x31e
c00159de:	75 06                	jne    c00159e6 <sendKeyboardToken(KeyboardToken)+0x29c>
c00159e0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00159e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e9:	66 3d 1f 03          	cmp    ax,0x31f
c00159ed:	75 06                	jne    c00159f5 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00159ef:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00159f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f8:	66 3d 1a 03          	cmp    ax,0x31a
c00159fc:	75 06                	jne    c0015a04 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00159fe:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015a04:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015a08:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a0b:	83 f0 01             	xor    eax,0x1
c0015a0e:	84 c0                	test   al,al
c0015a10:	74 77                	je     c0015a89 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015a12:	a0 c1 dc 02 c0       	mov    al,ds:0xc002dcc1
c0015a17:	84 c0                	test   al,al
c0015a19:	74 41                	je     c0015a5c <sendKeyboardToken(KeyboardToken)+0x312>
c0015a1b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a1f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015a23:	74 2b                	je     c0015a50 <sendKeyboardToken(KeyboardToken)+0x306>
c0015a25:	8b 15 c4 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfc4
c0015a2b:	89 d0                	mov    eax,edx
c0015a2d:	c1 e0 02             	shl    eax,0x2
c0015a30:	01 d0                	add    eax,edx
c0015a32:	01 c0                	add    eax,eax
c0015a34:	a3 c4 df 02 c0       	mov    ds:0xc002dfc4,eax
c0015a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3c:	0f b7 c0             	movzx  eax,ax
c0015a3f:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a42:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c0015a47:	01 d0                	add    eax,edx
c0015a49:	a3 c4 df 02 c0       	mov    ds:0xc002dfc4,eax
c0015a4e:	eb 6d                	jmp    c0015abd <sendKeyboardToken(KeyboardToken)+0x373>
c0015a50:	c7 05 c4 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dfc4,0x0
c0015a5a:	eb 61                	jmp    c0015abd <sendKeyboardToken(KeyboardToken)+0x373>
c0015a5c:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c0015a61:	85 c0                	test   eax,eax
c0015a63:	74 18                	je     c0015a7d <sendKeyboardToken(KeyboardToken)+0x333>
c0015a65:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c0015a6a:	0f b6 c0             	movzx  eax,al
c0015a6d:	83 ec 0c             	sub    esp,0xc
c0015a70:	50                   	push   eax
c0015a71:	e8 16 fc ff ff       	call   c001568c <sendKeyToTerminal(unsigned char)>
c0015a76:	83 c4 10             	add    esp,0x10
c0015a79:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a7d:	c7 05 c4 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dfc4,0x0
c0015a87:	eb 34                	jmp    c0015abd <sendKeyboardToken(KeyboardToken)+0x373>
c0015a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a8c:	66 3d 01 01          	cmp    ax,0x101
c0015a90:	75 2b                	jne    c0015abd <sendKeyboardToken(KeyboardToken)+0x373>
c0015a92:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c0015a97:	85 c0                	test   eax,eax
c0015a99:	74 18                	je     c0015ab3 <sendKeyboardToken(KeyboardToken)+0x369>
c0015a9b:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c0015aa0:	0f b6 c0             	movzx  eax,al
c0015aa3:	83 ec 0c             	sub    esp,0xc
c0015aa6:	50                   	push   eax
c0015aa7:	e8 e0 fb ff ff       	call   c001568c <sendKeyToTerminal(unsigned char)>
c0015aac:	83 c4 10             	add    esp,0x10
c0015aaf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ab3:	c7 05 c4 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dfc4,0x0
c0015abd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ac0:	83 f0 01             	xor    eax,0x1
c0015ac3:	84 c0                	test   al,al
c0015ac5:	74 4c                	je     c0015b13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ac7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015aca:	83 f0 01             	xor    eax,0x1
c0015acd:	84 c0                	test   al,al
c0015acf:	74 42                	je     c0015b13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ad1:	a0 c0 dc 02 c0       	mov    al,ds:0xc002dcc0
c0015ad6:	83 f0 01             	xor    eax,0x1
c0015ad9:	84 c0                	test   al,al
c0015adb:	74 36                	je     c0015b13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae0:	66 83 f8 1f          	cmp    ax,0x1f
c0015ae4:	76 09                	jbe    c0015aef <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae9:	66 83 f8 7e          	cmp    ax,0x7e
c0015aed:	76 12                	jbe    c0015b01 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015aef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af2:	66 83 f8 0a          	cmp    ax,0xa
c0015af6:	74 09                	je     c0015b01 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015af8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afb:	66 83 f8 08          	cmp    ax,0x8
c0015aff:	75 12                	jne    c0015b13 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b04:	0f b6 c0             	movzx  eax,al
c0015b07:	83 ec 0c             	sub    esp,0xc
c0015b0a:	50                   	push   eax
c0015b0b:	e8 7c fb ff ff       	call   c001568c <sendKeyToTerminal(unsigned char)>
c0015b10:	83 c4 10             	add    esp,0x10
c0015b13:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b16:	83 f0 01             	xor    eax,0x1
c0015b19:	84 c0                	test   al,al
c0015b1b:	74 4f                	je     c0015b6c <sendKeyboardToken(KeyboardToken)+0x422>
c0015b1d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b20:	83 f0 01             	xor    eax,0x1
c0015b23:	84 c0                	test   al,al
c0015b25:	74 45                	je     c0015b6c <sendKeyboardToken(KeyboardToken)+0x422>
c0015b27:	a0 c0 dc 02 c0       	mov    al,ds:0xc002dcc0
c0015b2c:	84 c0                	test   al,al
c0015b2e:	74 3c                	je     c0015b6c <sendKeyboardToken(KeyboardToken)+0x422>
c0015b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b33:	66 83 f8 3f          	cmp    ax,0x3f
c0015b37:	76 33                	jbe    c0015b6c <sendKeyboardToken(KeyboardToken)+0x422>
c0015b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3c:	66 83 f8 7f          	cmp    ax,0x7f
c0015b40:	77 2a                	ja     c0015b6c <sendKeyboardToken(KeyboardToken)+0x422>
c0015b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b45:	88 c2                	mov    dl,al
c0015b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4a:	66 83 f8 5f          	cmp    ax,0x5f
c0015b4e:	76 04                	jbe    c0015b54 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015b50:	b0 20                	mov    al,0x20
c0015b52:	eb 02                	jmp    c0015b56 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015b54:	b0 00                	mov    al,0x0
c0015b56:	29 c2                	sub    edx,eax
c0015b58:	88 d0                	mov    al,dl
c0015b5a:	83 e8 40             	sub    eax,0x40
c0015b5d:	0f b6 c0             	movzx  eax,al
c0015b60:	83 ec 0c             	sub    esp,0xc
c0015b63:	50                   	push   eax
c0015b64:	e8 23 fb ff ff       	call   c001568c <sendKeyToTerminal(unsigned char)>
c0015b69:	83 c4 10             	add    esp,0x10
c0015b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6f:	66 3d 00 03          	cmp    ax,0x300
c0015b73:	75 0f                	jne    c0015b84 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b75:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b78:	83 f0 01             	xor    eax,0x1
c0015b7b:	84 c0                	test   al,al
c0015b7d:	74 05                	je     c0015b84 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b7f:	e8 31 a8 ff ff       	call   c00103b5 <doTerminalCycle()>
c0015b84:	90                   	nop
c0015b85:	c9                   	leave  
c0015b86:	c3                   	ret    

c0015b87 <clearInternalKeybuffer(VgaText*)>:
c0015b87:	55                   	push   ebp
c0015b88:	89 e5                	mov    ebp,esp
c0015b8a:	83 ec 08             	sub    esp,0x8
c0015b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b90:	05 98 01 00 00       	add    eax,0x198
c0015b95:	83 ec 0c             	sub    esp,0xc
c0015b98:	50                   	push   eax
c0015b99:	e8 ce ab fe ff       	call   c000076c <strlen>
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ba4:	81 c2 98 01 00 00    	add    edx,0x198
c0015baa:	83 ec 04             	sub    esp,0x4
c0015bad:	50                   	push   eax
c0015bae:	6a 00                	push   0x0
c0015bb0:	52                   	push   edx
c0015bb1:	e8 9a ab fe ff       	call   c0000750 <memset>
c0015bb6:	83 c4 10             	add    esp,0x10
c0015bb9:	90                   	nop
c0015bba:	c9                   	leave  
c0015bbb:	c3                   	ret    

c0015bbc <readKeyboard(VgaText*, char*, unsigned long)>:
c0015bbc:	55                   	push   ebp
c0015bbd:	89 e5                	mov    ebp,esp
c0015bbf:	83 ec 18             	sub    esp,0x18
c0015bc2:	a1 a8 db 02 c0       	mov    eax,ds:0xc002dba8
c0015bc7:	85 c0                	test   eax,eax
c0015bc9:	74 2a                	je     c0015bf5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015bcb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015bd1:	8b 0d a8 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002dba8
c0015bd7:	83 ec 04             	sub    esp,0x4
c0015bda:	68 c0 db 02 c0       	push   0xc002dbc0
c0015bdf:	83 ec 08             	sub    esp,0x8
c0015be2:	89 e2                	mov    edx,esp
c0015be4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015be7:	89 02                	mov    DWORD PTR [edx],eax
c0015be9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015bec:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015bf0:	ff d1                	call   ecx
c0015bf2:	83 c4 10             	add    esp,0x10
c0015bf5:	fb                   	sti    
c0015bf6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015bfd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c01:	0f 84 a1 00 00 00    	je     c0015ca8 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0a:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c10:	84 c0                	test   al,al
c0015c12:	75 28                	jne    c0015c3c <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015c14:	fa                   	cli    
c0015c15:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015c1a:	40                   	inc    eax
c0015c1b:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0015c20:	e8 cc 7d 00 00       	call   c001d9f1 <schedule()>
c0015c25:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015c2a:	48                   	dec    eax
c0015c2b:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0015c30:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0015c35:	85 c0                	test   eax,eax
c0015c37:	75 ce                	jne    c0015c07 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c39:	fb                   	sti    
c0015c3a:	eb cb                	jmp    c0015c07 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c3f:	8d 50 01             	lea    edx,[eax+0x1]
c0015c42:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c45:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c48:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015c4e:	88 10                	mov    BYTE PTR [eax],dl
c0015c50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c53:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c59:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c5f:	05 98 01 00 00       	add    eax,0x198
c0015c64:	83 ec 0c             	sub    esp,0xc
c0015c67:	50                   	push   eax
c0015c68:	e8 ff aa fe ff       	call   c000076c <strlen>
c0015c6d:	83 c4 10             	add    esp,0x10
c0015c70:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c73:	81 c2 98 01 00 00    	add    edx,0x198
c0015c79:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c7c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c7f:	81 c2 98 01 00 00    	add    edx,0x198
c0015c85:	83 ec 04             	sub    esp,0x4
c0015c88:	50                   	push   eax
c0015c89:	51                   	push   ecx
c0015c8a:	52                   	push   edx
c0015c8b:	e8 f8 a9 fe ff       	call   c0000688 <memmove>
c0015c90:	83 c4 10             	add    esp,0x10
c0015c93:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c96:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c99:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c9d:	0f 85 5a ff ff ff    	jne    c0015bfd <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015ca3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca6:	eb 03                	jmp    c0015cab <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015ca8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cab:	c9                   	leave  
c0015cac:	c3                   	ret    
c0015cad:	90                   	nop

c0015cae <Keyboard::Keyboard(char const*)>:
c0015cae:	83 ec 0c             	sub    esp,0xc
c0015cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cb5:	83 ec 08             	sub    esp,0x8
c0015cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cbc:	50                   	push   eax
c0015cbd:	e8 70 e0 ff ff       	call   c0013d32 <Device::Device(char const*)>
c0015cc2:	83 c4 10             	add    esp,0x10
c0015cc5:	ba 9c af 02 c0       	mov    edx,0xc002af9c
c0015cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cce:	89 10                	mov    DWORD PTR [eax],edx
c0015cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cd4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015cde:	c6 05 a4 db 02 c0 01 	mov    BYTE PTR ds:0xc002dba4,0x1
c0015ce5:	90                   	nop
c0015ce6:	83 c4 0c             	add    esp,0xc
c0015ce9:	c3                   	ret    

c0015cea <Keyboard::~Keyboard()>:
c0015cea:	83 ec 0c             	sub    esp,0xc
c0015ced:	ba 9c af 02 c0       	mov    edx,0xc002af9c
c0015cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cf6:	89 10                	mov    DWORD PTR [eax],edx
c0015cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cfc:	83 ec 0c             	sub    esp,0xc
c0015cff:	50                   	push   eax
c0015d00:	e8 f7 dc ff ff       	call   c00139fc <Device::~Device()>
c0015d05:	83 c4 10             	add    esp,0x10
c0015d08:	90                   	nop
c0015d09:	83 c4 0c             	add    esp,0xc
c0015d0c:	c3                   	ret    
c0015d0d:	90                   	nop

c0015d0e <Keyboard::~Keyboard()>:
c0015d0e:	83 ec 0c             	sub    esp,0xc
c0015d11:	83 ec 0c             	sub    esp,0xc
c0015d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d18:	e8 cd ff ff ff       	call   c0015cea <Keyboard::~Keyboard()>
c0015d1d:	83 c4 10             	add    esp,0x10
c0015d20:	83 ec 08             	sub    esp,0x8
c0015d23:	68 5c 01 00 00       	push   0x15c
c0015d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d2c:	e8 ec c8 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0015d31:	83 c4 10             	add    esp,0x10
c0015d34:	83 c4 0c             	add    esp,0xc
c0015d37:	c3                   	ret    

c0015d38 <LogicalDisk::close(int, int, void*)>:
c0015d38:	83 c8 ff             	or     eax,0xffffffff
c0015d3b:	c3                   	ret    

c0015d3c <LogicalDisk::~LogicalDisk()>:
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	ba 14 b0 02 c0       	mov    edx,0xc002b014
c0015d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d48:	89 10                	mov    DWORD PTR [eax],edx
c0015d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d4e:	83 ec 0c             	sub    esp,0xc
c0015d51:	50                   	push   eax
c0015d52:	e8 a5 dc ff ff       	call   c00139fc <Device::~Device()>
c0015d57:	83 c4 10             	add    esp,0x10
c0015d5a:	90                   	nop
c0015d5b:	83 c4 0c             	add    esp,0xc
c0015d5e:	c3                   	ret    
c0015d5f:	90                   	nop

c0015d60 <LogicalDisk::~LogicalDisk()>:
c0015d60:	83 ec 0c             	sub    esp,0xc
c0015d63:	83 ec 0c             	sub    esp,0xc
c0015d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d6a:	e8 cd ff ff ff       	call   c0015d3c <LogicalDisk::~LogicalDisk()>
c0015d6f:	83 c4 10             	add    esp,0x10
c0015d72:	83 ec 08             	sub    esp,0x8
c0015d75:	68 74 01 00 00       	push   0x174
c0015d7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d7e:	e8 9a c8 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0015d83:	83 c4 10             	add    esp,0x10
c0015d86:	83 c4 0c             	add    esp,0xc
c0015d89:	c3                   	ret    

c0015d8a <LogicalDisk::open(int, int, void*)>:
c0015d8a:	83 ec 18             	sub    esp,0x18
c0015d8d:	68 c8 af 02 c0       	push   0xc002afc8
c0015d92:	e8 ca 40 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0015d97:	83 c8 ff             	or     eax,0xffffffff
c0015d9a:	83 c4 1c             	add    esp,0x1c
c0015d9d:	c3                   	ret    

c0015d9e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d9e:	53                   	push   ebx
c0015d9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015da3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015da7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015dab:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015db1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015db7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015dbd:	77 10                	ja     c0015dcf <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015dbf:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015dc5:	89 d3                	mov    ebx,edx
c0015dc7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015dcd:	72 05                	jb     c0015dd4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015dcf:	83 c8 ff             	or     eax,0xffffffff
c0015dd2:	89 c2                	mov    edx,eax
c0015dd4:	5b                   	pop    ebx
c0015dd5:	c3                   	ret    

c0015dd6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015dd6:	56                   	push   esi
c0015dd7:	83 c8 ff             	or     eax,0xffffffff
c0015dda:	53                   	push   ebx
c0015ddb:	89 c2                	mov    edx,eax
c0015ddd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015de1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015de5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015de9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015def:	77 27                	ja     c0015e18 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015df1:	89 d8                	mov    eax,ebx
c0015df3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015df9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015dff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e04:	89 c2                	mov    edx,eax
c0015e06:	73 10                	jae    c0015e18 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e08:	89 c8                	mov    eax,ecx
c0015e0a:	89 da                	mov    edx,ebx
c0015e0c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015e12:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015e18:	5b                   	pop    ebx
c0015e19:	5e                   	pop    esi
c0015e1a:	c3                   	ret    
c0015e1b:	90                   	nop

c0015e1c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e1c:	83 ec 1c             	sub    esp,0x1c
c0015e1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e33:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e42:	83 ec 08             	sub    esp,0x8
c0015e45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e49:	50                   	push   eax
c0015e4a:	e8 e3 de ff ff       	call   c0013d32 <Device::Device(char const*)>
c0015e4f:	83 c4 10             	add    esp,0x10
c0015e52:	ba 14 b0 02 c0       	mov    edx,0xc002b014
c0015e57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e5b:	89 10                	mov    DWORD PTR [eax],edx
c0015e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e61:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e6c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e77:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e81:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e8d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e93:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e99:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015ea0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ea4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015eaa:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eb4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015eb8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015ebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ec2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ecc:	90                   	nop
c0015ecd:	83 c4 1c             	add    esp,0x1c
c0015ed0:	c3                   	ret    
c0015ed1:	90                   	nop

c0015ed2 <LogicalDisk::assignDriveLetter()>:
c0015ed2:	55                   	push   ebp
c0015ed3:	57                   	push   edi
c0015ed4:	56                   	push   esi
c0015ed5:	53                   	push   ebx
c0015ed6:	83 ec 14             	sub    esp,0x14
c0015ed9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015edd:	8b 3d e0 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfe0
c0015ee3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ee9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015eed:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ef3:	8b 3d e4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfe4
c0015ef9:	3c 01                	cmp    al,0x1
c0015efb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015eff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015f03:	19 c0                	sbb    eax,eax
c0015f05:	83 e0 02             	and    eax,0x2
c0015f08:	83 c0 41             	add    eax,0x41
c0015f0b:	0f be e8             	movsx  ebp,al
c0015f0e:	3c 43                	cmp    al,0x43
c0015f10:	75 10                	jne    c0015f22 <LogicalDisk::assignDriveLetter()+0x50>
c0015f12:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015f19:	75 5d                	jne    c0015f78 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f1b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f20:	75 56                	jne    c0015f78 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f22:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015f25:	ba 01 00 00 00       	mov    edx,0x1
c0015f2a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f2e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f32:	d3 e2                	shl    edx,cl
c0015f34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f38:	89 d7                	mov    edi,edx
c0015f3a:	89 d6                	mov    esi,edx
c0015f3c:	c1 ff 1f             	sar    edi,0x1f
c0015f3f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f43:	21 f9                	and    ecx,edi
c0015f45:	09 d1                	or     ecx,edx
c0015f47:	75 2f                	jne    c0015f78 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f49:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f4d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f51:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f57:	09 f2                	or     edx,esi
c0015f59:	89 15 e0 df 02 c0    	mov    DWORD PTR ds:0xc002dfe0,edx
c0015f5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f63:	09 fa                	or     edx,edi
c0015f65:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f69:	89 15 e4 df 02 c0    	mov    DWORD PTR ds:0xc002dfe4,edx
c0015f6f:	89 1c bd 00 e0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2000],ebx
c0015f76:	eb 08                	jmp    c0015f80 <LogicalDisk::assignDriveLetter()+0xae>
c0015f78:	45                   	inc    ebp
c0015f79:	40                   	inc    eax
c0015f7a:	3c 5b                	cmp    al,0x5b
c0015f7c:	75 90                	jne    c0015f0e <LogicalDisk::assignDriveLetter()+0x3c>
c0015f7e:	31 c0                	xor    eax,eax
c0015f80:	83 c4 14             	add    esp,0x14
c0015f83:	5b                   	pop    ebx
c0015f84:	5e                   	pop    esi
c0015f85:	5f                   	pop    edi
c0015f86:	5d                   	pop    ebp
c0015f87:	c3                   	ret    

c0015f88 <LogicalDisk::mount()>:
c0015f88:	56                   	push   esi
c0015f89:	53                   	push   ebx
c0015f8a:	53                   	push   ebx
c0015f8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f8f:	8b 1d 74 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db74
c0015f95:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f9f:	85 db                	test   ebx,ebx
c0015fa1:	74 27                	je     c0015fca <LogicalDisk::mount()+0x42>
c0015fa3:	51                   	push   ecx
c0015fa4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015fab:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015fad:	83 e8 41             	sub    eax,0x41
c0015fb0:	50                   	push   eax
c0015fb1:	56                   	push   esi
c0015fb2:	53                   	push   ebx
c0015fb3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fb6:	83 c4 10             	add    esp,0x10
c0015fb9:	84 c0                	test   al,al
c0015fbb:	74 08                	je     c0015fc5 <LogicalDisk::mount()+0x3d>
c0015fbd:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015fc3:	eb 07                	jmp    c0015fcc <LogicalDisk::mount()+0x44>
c0015fc5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015fc8:	eb d5                	jmp    c0015f9f <LogicalDisk::mount()+0x17>
c0015fca:	31 c0                	xor    eax,eax
c0015fcc:	5a                   	pop    edx
c0015fcd:	5b                   	pop    ebx
c0015fce:	5e                   	pop    esi
c0015fcf:	c3                   	ret    

c0015fd0 <LogicalDisk::unmount()>:
c0015fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fd4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015fde:	c3                   	ret    
c0015fdf:	90                   	nop

c0015fe0 <LogicalDisk::eject()>:
c0015fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fe4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015fea:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ff0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015ff3:	90                   	nop

c0015ff4 <LogicalDisk::unassignDriveLetter()>:
c0015ff4:	57                   	push   edi
c0015ff5:	56                   	push   esi
c0015ff6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ffa:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016001:	84 c9                	test   cl,cl
c0016003:	75 0f                	jne    c0016014 <LogicalDisk::unassignDriveLetter()+0x20>
c0016005:	c7 44 24 0c ec af 02 c0 	mov    DWORD PTR [esp+0xc],0xc002afec
c001600d:	5e                   	pop    esi
c001600e:	5f                   	pop    edi
c001600f:	e9 4d 3e 00 00       	jmp    c0019e61 <Krnl::panic(char const*)>
c0016014:	83 e9 41             	sub    ecx,0x41
c0016017:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001601e:	b8 01 00 00 00       	mov    eax,0x1
c0016023:	c7 04 8d 00 e0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2000],0x0
c001602e:	d3 e0                	shl    eax,cl
c0016030:	89 c7                	mov    edi,eax
c0016032:	f7 d0                	not    eax
c0016034:	c1 ff 1f             	sar    edi,0x1f
c0016037:	21 05 e0 df 02 c0    	and    DWORD PTR ds:0xc002dfe0,eax
c001603d:	89 fe                	mov    esi,edi
c001603f:	f7 d6                	not    esi
c0016041:	21 35 e4 df 02 c0    	and    DWORD PTR ds:0xc002dfe4,esi
c0016047:	5e                   	pop    esi
c0016048:	5f                   	pop    edi
c0016049:	c3                   	ret    

c001604a <LogicalDisk::read(unsigned long long, int, void*)>:
c001604a:	57                   	push   edi
c001604b:	56                   	push   esi
c001604c:	53                   	push   ebx
c001604d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016051:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016055:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016059:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001605d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016063:	77 41                	ja     c00160a6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016065:	99                   	cdq    
c0016066:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001606c:	01 c8                	add    eax,ecx
c001606e:	11 da                	adc    edx,ebx
c0016070:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016076:	19 d7                	sbb    edi,edx
c0016078:	72 33                	jb     c00160ad <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001607a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016080:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016086:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001608a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001608e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016094:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001609a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001609e:	5b                   	pop    ebx
c001609f:	5e                   	pop    esi
c00160a0:	5f                   	pop    edi
c00160a1:	e9 cc 0a 00 00       	jmp    c0016b72 <VCache::read(unsigned long long, int, void*)>
c00160a6:	b8 05 00 00 00       	mov    eax,0x5
c00160ab:	eb 05                	jmp    c00160b2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00160ad:	b8 07 00 00 00       	mov    eax,0x7
c00160b2:	5b                   	pop    ebx
c00160b3:	5e                   	pop    esi
c00160b4:	5f                   	pop    edi
c00160b5:	c3                   	ret    

c00160b6 <LogicalDisk::write(unsigned long long, int, void*)>:
c00160b6:	57                   	push   edi
c00160b7:	56                   	push   esi
c00160b8:	53                   	push   ebx
c00160b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160c1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160c9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160cf:	77 41                	ja     c0016112 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00160d1:	99                   	cdq    
c00160d2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160d8:	01 c8                	add    eax,ecx
c00160da:	11 da                	adc    edx,ebx
c00160dc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160e2:	19 d7                	sbb    edi,edx
c00160e4:	72 33                	jb     c0016119 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00160e6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160ec:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160f2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160f6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160fa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016100:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001610a:	5b                   	pop    ebx
c001610b:	5e                   	pop    esi
c001610c:	5f                   	pop    edi
c001610d:	e9 76 09 00 00       	jmp    c0016a88 <VCache::write(unsigned long long, int, void*)>
c0016112:	b8 05 00 00 00       	mov    eax,0x5
c0016117:	eb 05                	jmp    c001611e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016119:	b8 07 00 00 00       	mov    eax,0x7
c001611e:	5b                   	pop    ebx
c001611f:	5e                   	pop    esi
c0016120:	5f                   	pop    edi
c0016121:	c3                   	ret    

c0016122 <Mouse::Mouse(char const*)>:
c0016122:	83 ec 0c             	sub    esp,0xc
c0016125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016129:	83 ec 08             	sub    esp,0x8
c001612c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016130:	50                   	push   eax
c0016131:	e8 fc db ff ff       	call   c0013d32 <Device::Device(char const*)>
c0016136:	83 c4 10             	add    esp,0x10
c0016139:	ba 40 b0 02 c0       	mov    edx,0xc002b040
c001613e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016142:	89 10                	mov    DWORD PTR [eax],edx
c0016144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016148:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016152:	90                   	nop
c0016153:	83 c4 0c             	add    esp,0xc
c0016156:	c3                   	ret    
c0016157:	90                   	nop

c0016158 <Mouse::~Mouse()>:
c0016158:	83 ec 0c             	sub    esp,0xc
c001615b:	ba 40 b0 02 c0       	mov    edx,0xc002b040
c0016160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016164:	89 10                	mov    DWORD PTR [eax],edx
c0016166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001616a:	83 ec 0c             	sub    esp,0xc
c001616d:	50                   	push   eax
c001616e:	e8 89 d8 ff ff       	call   c00139fc <Device::~Device()>
c0016173:	83 c4 10             	add    esp,0x10
c0016176:	90                   	nop
c0016177:	83 c4 0c             	add    esp,0xc
c001617a:	c3                   	ret    
c001617b:	90                   	nop

c001617c <Mouse::~Mouse()>:
c001617c:	83 ec 0c             	sub    esp,0xc
c001617f:	83 ec 0c             	sub    esp,0xc
c0016182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016186:	e8 cd ff ff ff       	call   c0016158 <Mouse::~Mouse()>
c001618b:	83 c4 10             	add    esp,0x10
c001618e:	83 ec 08             	sub    esp,0x8
c0016191:	68 58 01 00 00       	push   0x158
c0016196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001619a:	e8 7e c4 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c001619f:	83 c4 10             	add    esp,0x10
c00161a2:	83 c4 0c             	add    esp,0xc
c00161a5:	c3                   	ret    

c00161a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00161a6:	55                   	push   ebp
c00161a7:	57                   	push   edi
c00161a8:	56                   	push   esi
c00161a9:	53                   	push   ebx
c00161aa:	81 ec 28 01 00 00    	sub    esp,0x128
c00161b0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00161b7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00161be:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00161c5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00161cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161d0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00161d4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161db:	e8 4e dc ff ff       	call   c0013e2e <Device::getName()>
c00161e0:	5a                   	pop    edx
c00161e1:	59                   	pop    ecx
c00161e2:	50                   	push   eax
c00161e3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00161e7:	55                   	push   ebp
c00161e8:	e8 1f a6 fe ff       	call   c000080c <strcpy>
c00161ed:	5b                   	pop    ebx
c00161ee:	58                   	pop    eax
c00161ef:	68 64 b0 02 c0       	push   0xc002b064
c00161f4:	55                   	push   ebp
c00161f5:	e8 52 a7 fe ff       	call   c000094c <strcat>
c00161fa:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016201:	e8 93 93 ff ff       	call   c000f599 <malloc>
c0016206:	83 c4 0c             	add    esp,0xc
c0016209:	89 c3                	mov    ebx,eax
c001620b:	57                   	push   edi
c001620c:	56                   	push   esi
c001620d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016215:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001621c:	55                   	push   ebp
c001621d:	50                   	push   eax
c001621e:	e8 f9 fb ff ff       	call   c0015e1c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016223:	83 c4 14             	add    esp,0x14
c0016226:	53                   	push   ebx
c0016227:	e8 a6 fc ff ff       	call   c0015ed2 <LogicalDisk::assignDriveLetter()>
c001622c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001622f:	e8 54 fd ff ff       	call   c0015f88 <LogicalDisk::mount()>
c0016234:	58                   	pop    eax
c0016235:	5a                   	pop    edx
c0016236:	53                   	push   ebx
c0016237:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001623e:	e8 eb d8 ff ff       	call   c0013b2e <Device::addChild(Device*)>
c0016243:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016249:	5b                   	pop    ebx
c001624a:	5e                   	pop    esi
c001624b:	5f                   	pop    edi
c001624c:	5d                   	pop    ebp
c001624d:	c3                   	ret    

c001624e <createPartitionsForDisk(PhysicalDisk*)>:
c001624e:	55                   	push   ebp
c001624f:	57                   	push   edi
c0016250:	56                   	push   esi
c0016251:	53                   	push   ebx
c0016252:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016258:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001625f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016265:	3d 00 02 00 00       	cmp    eax,0x200
c001626a:	74 27                	je     c0016293 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001626c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016272:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016278:	83 ec 10             	sub    esp,0x10
c001627b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001627f:	99                   	cdq    
c0016280:	c1 e6 0a             	shl    esi,0xa
c0016283:	52                   	push   edx
c0016284:	89 fd                	mov    ebp,edi
c0016286:	50                   	push   eax
c0016287:	55                   	push   ebp
c0016288:	56                   	push   esi
c0016289:	e8 a6 04 01 00       	call   c0026734 <__udivdi3>
c001628e:	e9 b1 00 00 00       	jmp    c0016344 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016293:	83 ec 0c             	sub    esp,0xc
c0016296:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016298:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001629c:	56                   	push   esi
c001629d:	6a 01                	push   0x1
c001629f:	6a 00                	push   0x0
c00162a1:	6a 00                	push   0x0
c00162a3:	53                   	push   ebx
c00162a4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00162a7:	83 c4 20             	add    esp,0x20
c00162aa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00162b2:	75 0a                	jne    c00162be <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00162b4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00162bc:	74 2c                	je     c00162ea <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00162be:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162c4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162ca:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162d0:	83 ec 10             	sub    esp,0x10
c00162d3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162d7:	89 f7                	mov    edi,esi
c00162d9:	c1 e0 0a             	shl    eax,0xa
c00162dc:	c1 ff 1f             	sar    edi,0x1f
c00162df:	57                   	push   edi
c00162e0:	56                   	push   esi
c00162e1:	52                   	push   edx
c00162e2:	50                   	push   eax
c00162e3:	e8 4c 04 01 00       	call   c0026734 <__udivdi3>
c00162e8:	eb 5a                	jmp    c0016344 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162ea:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00162f1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00162f8:	83 e1 7f             	and    ecx,0x7f
c00162fb:	83 e0 7f             	and    eax,0x7f
c00162fe:	01 c1                	add    ecx,eax
c0016300:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016307:	83 e0 7f             	and    eax,0x7f
c001630a:	01 c1                	add    ecx,eax
c001630c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016313:	83 e0 7f             	and    eax,0x7f
c0016316:	00 c1                	add    cl,al
c0016318:	74 41                	je     c001635b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001631a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016320:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016326:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001632c:	83 ec 10             	sub    esp,0x10
c001632f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016333:	89 f7                	mov    edi,esi
c0016335:	c1 e0 0a             	shl    eax,0xa
c0016338:	c1 ff 1f             	sar    edi,0x1f
c001633b:	57                   	push   edi
c001633c:	56                   	push   esi
c001633d:	52                   	push   edx
c001633e:	50                   	push   eax
c001633f:	e8 f0 03 01 00       	call   c0026734 <__udivdi3>
c0016344:	83 c4 14             	add    esp,0x14
c0016347:	52                   	push   edx
c0016348:	50                   	push   eax
c0016349:	6a 00                	push   0x0
c001634b:	6a 00                	push   0x0
c001634d:	53                   	push   ebx
c001634e:	e8 53 fe ff ff       	call   c00161a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016353:	83 c4 20             	add    esp,0x20
c0016356:	e9 79 01 00 00       	jmp    c00164d4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001635b:	89 f0                	mov    eax,esi
c001635d:	31 f6                	xor    esi,esi
c001635f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016366:	75 02                	jne    c001636a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016368:	89 f1                	mov    ecx,esi
c001636a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016371:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016378:	c1 e2 08             	shl    edx,0x8
c001637b:	c1 e7 10             	shl    edi,0x10
c001637e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016386:	09 fa                	or     edx,edi
c0016388:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016390:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016397:	83 c0 10             	add    eax,0x10
c001639a:	09 fa                	or     edx,edi
c001639c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00163a3:	c1 e7 18             	shl    edi,0x18
c00163a6:	09 fa                	or     edx,edi
c00163a8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00163af:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00163b3:	c1 e7 10             	shl    edi,0x10
c00163b6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00163bd:	c1 e2 08             	shl    edx,0x8
c00163c0:	09 fa                	or     edx,edi
c00163c2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00163c9:	09 fa                	or     edx,edi
c00163cb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00163d2:	c1 e7 18             	shl    edi,0x18
c00163d5:	09 fa                	or     edx,edi
c00163d7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00163db:	46                   	inc    esi
c00163dc:	83 fe 04             	cmp    esi,0x4
c00163df:	0f 85 7a ff ff ff    	jne    c001635f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00163e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e9:	83 f0 01             	xor    eax,0x1
c00163ec:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00163f0:	75 57                	jne    c0016449 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163f6:	83 f0 01             	xor    eax,0x1
c00163f9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00163fd:	75 4a                	jne    c0016449 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163ff:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016403:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001640b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016413:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016419:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001641f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016425:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016429:	89 f7                	mov    edi,esi
c001642b:	c1 e0 0a             	shl    eax,0xa
c001642e:	c1 ff 1f             	sar    edi,0x1f
c0016431:	57                   	push   edi
c0016432:	56                   	push   esi
c0016433:	52                   	push   edx
c0016434:	50                   	push   eax
c0016435:	e8 fa 02 01 00       	call   c0026734 <__udivdi3>
c001643a:	83 c4 10             	add    esp,0x10
c001643d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016441:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016445:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016449:	84 c9                	test   cl,cl
c001644b:	74 53                	je     c00164a0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001644d:	0f b6 c9             	movzx  ecx,cl
c0016450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016454:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016458:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001645c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016468:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001646c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016470:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016474:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016478:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001647c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016480:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016484:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016488:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001648c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016490:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016494:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016498:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001649c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00164a0:	31 ed                	xor    ebp,ebp
c00164a2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00164a6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00164aa:	89 f8                	mov    eax,edi
c00164ac:	09 f0                	or     eax,esi
c00164ae:	74 1e                	je     c00164ce <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00164b0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00164b4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00164b8:	89 d1                	mov    ecx,edx
c00164ba:	09 c1                	or     ecx,eax
c00164bc:	74 10                	je     c00164ce <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00164be:	83 ec 0c             	sub    esp,0xc
c00164c1:	57                   	push   edi
c00164c2:	56                   	push   esi
c00164c3:	52                   	push   edx
c00164c4:	50                   	push   eax
c00164c5:	53                   	push   ebx
c00164c6:	e8 db fc ff ff       	call   c00161a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00164cb:	83 c4 20             	add    esp,0x20
c00164ce:	45                   	inc    ebp
c00164cf:	83 fd 04             	cmp    ebp,0x4
c00164d2:	75 ce                	jne    c00164a2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00164d4:	81 c4 5c 02 00 00    	add    esp,0x25c
c00164da:	5b                   	pop    ebx
c00164db:	5e                   	pop    esi
c00164dc:	5f                   	pop    edi
c00164dd:	5d                   	pop    ebp
c00164de:	c3                   	ret    
c00164df:	90                   	nop

c00164e0 <Serial::Serial(char const*)>:
c00164e0:	83 ec 0c             	sub    esp,0xc
c00164e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e7:	83 ec 08             	sub    esp,0x8
c00164ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ee:	50                   	push   eax
c00164ef:	e8 3e d8 ff ff       	call   c0013d32 <Device::Device(char const*)>
c00164f4:	83 c4 10             	add    esp,0x10
c00164f7:	ba 78 b0 02 c0       	mov    edx,0xc002b078
c00164fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016500:	89 10                	mov    DWORD PTR [eax],edx
c0016502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016506:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016510:	90                   	nop
c0016511:	83 c4 0c             	add    esp,0xc
c0016514:	c3                   	ret    
c0016515:	90                   	nop

c0016516 <Serial::~Serial()>:
c0016516:	83 ec 0c             	sub    esp,0xc
c0016519:	ba 78 b0 02 c0       	mov    edx,0xc002b078
c001651e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016522:	89 10                	mov    DWORD PTR [eax],edx
c0016524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016528:	83 ec 0c             	sub    esp,0xc
c001652b:	50                   	push   eax
c001652c:	e8 cb d4 ff ff       	call   c00139fc <Device::~Device()>
c0016531:	83 c4 10             	add    esp,0x10
c0016534:	90                   	nop
c0016535:	83 c4 0c             	add    esp,0xc
c0016538:	c3                   	ret    
c0016539:	90                   	nop

c001653a <Serial::~Serial()>:
c001653a:	83 ec 0c             	sub    esp,0xc
c001653d:	83 ec 0c             	sub    esp,0xc
c0016540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016544:	e8 cd ff ff ff       	call   c0016516 <Serial::~Serial()>
c0016549:	83 c4 10             	add    esp,0x10
c001654c:	83 ec 08             	sub    esp,0x8
c001654f:	68 58 01 00 00       	push   0x158
c0016554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016558:	e8 c0 c0 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c001655d:	83 c4 10             	add    esp,0x10
c0016560:	83 c4 0c             	add    esp,0xc
c0016563:	c3                   	ret    

c0016564 <Timer::Timer(char const*)>:
c0016564:	83 ec 0c             	sub    esp,0xc
c0016567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001656b:	83 ec 08             	sub    esp,0x8
c001656e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016572:	50                   	push   eax
c0016573:	e8 ba d7 ff ff       	call   c0013d32 <Device::Device(char const*)>
c0016578:	83 c4 10             	add    esp,0x10
c001657b:	ba bc b0 02 c0       	mov    edx,0xc002b0bc
c0016580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016584:	89 10                	mov    DWORD PTR [eax],edx
c0016586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001658a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016594:	90                   	nop
c0016595:	83 c4 0c             	add    esp,0xc
c0016598:	c3                   	ret    
c0016599:	90                   	nop

c001659a <Timer::~Timer()>:
c001659a:	83 ec 0c             	sub    esp,0xc
c001659d:	ba bc b0 02 c0       	mov    edx,0xc002b0bc
c00165a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a6:	89 10                	mov    DWORD PTR [eax],edx
c00165a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	50                   	push   eax
c00165b0:	e8 47 d4 ff ff       	call   c00139fc <Device::~Device()>
c00165b5:	83 c4 10             	add    esp,0x10
c00165b8:	90                   	nop
c00165b9:	83 c4 0c             	add    esp,0xc
c00165bc:	c3                   	ret    
c00165bd:	90                   	nop

c00165be <Timer::~Timer()>:
c00165be:	83 ec 0c             	sub    esp,0xc
c00165c1:	83 ec 0c             	sub    esp,0xc
c00165c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165c8:	e8 cd ff ff ff       	call   c001659a <Timer::~Timer()>
c00165cd:	83 c4 10             	add    esp,0x10
c00165d0:	83 ec 08             	sub    esp,0x8
c00165d3:	68 5c 01 00 00       	push   0x15c
c00165d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165dc:	e8 3c c0 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c00165e1:	83 c4 10             	add    esp,0x10
c00165e4:	83 c4 0c             	add    esp,0xc
c00165e7:	c3                   	ret    

c00165e8 <Timer::read()>:
c00165e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165ec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00165f2:	c3                   	ret    

c00165f3 <timerHandler(unsigned long long)>:
c00165f3:	55                   	push   ebp
c00165f4:	57                   	push   edi
c00165f5:	56                   	push   esi
c00165f6:	53                   	push   ebx
c00165f7:	83 ec 0c             	sub    esp,0xc
c00165fa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00165fe:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016602:	01 35 70 e0 02 c0    	add    DWORD PTR ds:0xc002e070,esi
c0016608:	11 3d 74 e0 02 c0    	adc    DWORD PTR ds:0xc002e074,edi
c001660e:	80 3d 0d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da0d,0x0
c0016615:	0f 84 42 01 00 00    	je     c001675d <timerHandler(unsigned long long)+0x16a>
c001661b:	fa                   	cli    
c001661c:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c0016622:	83 ec 0c             	sub    esp,0xc
c0016625:	ff 05 24 0f 03 c0    	inc    DWORD PTR ds:0xc0030f24
c001662b:	68 38 0f 03 c0       	push   0xc0030f38
c0016630:	e8 59 21 01 00       	call   c002878e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016635:	83 c4 10             	add    esp,0x10
c0016638:	84 c0                	test   al,al
c001663a:	0f 85 a2 00 00 00    	jne    c00166e2 <timerHandler(unsigned long long)+0xef>
c0016640:	83 ec 0c             	sub    esp,0xc
c0016643:	68 38 0f 03 c0       	push   0xc0030f38
c0016648:	e8 5d 21 01 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001664d:	83 c4 10             	add    esp,0x10
c0016650:	89 c3                	mov    ebx,eax
c0016652:	83 ec 0c             	sub    esp,0xc
c0016655:	68 38 0f 03 c0       	push   0xc0030f38
c001665a:	e8 4b 21 01 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001665f:	c7 04 24 38 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f38
c0016666:	89 c5                	mov    ebp,eax
c0016668:	e8 45 21 01 00       	call   c00287b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001666d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016670:	83 c4 10             	add    esp,0x10
c0016673:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016676:	39 15 70 e0 02 c0    	cmp    DWORD PTR ds:0xc002e070,edx
c001667c:	a1 74 e0 02 c0       	mov    eax,ds:0xc002e074
c0016681:	19 c8                	sbb    eax,ecx
c0016683:	72 21                	jb     c00166a6 <timerHandler(unsigned long long)+0xb3>
c0016685:	83 ec 0c             	sub    esp,0xc
c0016688:	55                   	push   ebp
c0016689:	e8 e6 77 00 00       	call   c001de74 <unblockTask(ThreadControlBlock*)>
c001668e:	83 c4 10             	add    esp,0x10
c0016691:	39 eb                	cmp    ebx,ebp
c0016693:	75 21                	jne    c00166b6 <timerHandler(unsigned long long)+0xc3>
c0016695:	83 ec 0c             	sub    esp,0xc
c0016698:	68 38 0f 03 c0       	push   0xc0030f38
c001669d:	e8 08 21 01 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166a2:	89 c3                	mov    ebx,eax
c00166a4:	eb 0d                	jmp    c00166b3 <timerHandler(unsigned long long)+0xc0>
c00166a6:	50                   	push   eax
c00166a7:	50                   	push   eax
c00166a8:	55                   	push   ebp
c00166a9:	68 38 0f 03 c0       	push   0xc0030f38
c00166ae:	e8 ad 21 01 00       	call   c0028860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166b3:	83 c4 10             	add    esp,0x10
c00166b6:	83 ec 0c             	sub    esp,0xc
c00166b9:	68 38 0f 03 c0       	push   0xc0030f38
c00166be:	e8 cb 20 01 00       	call   c002878e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166c3:	83 c4 10             	add    esp,0x10
c00166c6:	84 c0                	test   al,al
c00166c8:	75 18                	jne    c00166e2 <timerHandler(unsigned long long)+0xef>
c00166ca:	83 ec 0c             	sub    esp,0xc
c00166cd:	68 38 0f 03 c0       	push   0xc0030f38
c00166d2:	e8 d3 20 01 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166d7:	83 c4 10             	add    esp,0x10
c00166da:	39 d8                	cmp    eax,ebx
c00166dc:	0f 85 70 ff ff ff    	jne    c0016652 <timerHandler(unsigned long long)+0x5f>
c00166e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e7:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00166eb:	74 3d                	je     c001672a <timerHandler(unsigned long long)+0x137>
c00166ed:	80 3d 0c da 02 c0 00 	cmp    BYTE PTR ds:0xc002da0c,0x0
c00166f4:	74 34                	je     c001672a <timerHandler(unsigned long long)+0x137>
c00166f6:	fa                   	cli    
c00166f7:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c00166fd:	31 d2                	xor    edx,edx
c00166ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016704:	89 f9                	mov    ecx,edi
c0016706:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016709:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001670e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016711:	39 c6                	cmp    esi,eax
c0016713:	19 d1                	sbb    ecx,edx
c0016715:	72 05                	jb     c001671c <timerHandler(unsigned long long)+0x129>
c0016717:	e8 d5 72 00 00       	call   c001d9f1 <schedule()>
c001671c:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0016721:	48                   	dec    eax
c0016722:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0016727:	75 01                	jne    c001672a <timerHandler(unsigned long long)+0x137>
c0016729:	fb                   	sti    
c001672a:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001672f:	48                   	dec    eax
c0016730:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c0016735:	75 18                	jne    c001674f <timerHandler(unsigned long long)+0x15c>
c0016737:	83 3d 20 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f20,0x0
c001673e:	74 0f                	je     c001674f <timerHandler(unsigned long long)+0x15c>
c0016740:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001674a:	e8 a2 72 00 00       	call   c001d9f1 <schedule()>
c001674f:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0016754:	48                   	dec    eax
c0016755:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001675a:	75 01                	jne    c001675d <timerHandler(unsigned long long)+0x16a>
c001675c:	fb                   	sti    
c001675d:	83 c4 0c             	add    esp,0xc
c0016760:	5b                   	pop    ebx
c0016761:	5e                   	pop    esi
c0016762:	5f                   	pop    edi
c0016763:	5d                   	pop    ebp
c0016764:	c3                   	ret    

c0016765 <setupTimer(int)>:
c0016765:	57                   	push   edi
c0016766:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001676b:	56                   	push   esi
c001676c:	53                   	push   ebx
c001676d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016771:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016777:	83 ec 0c             	sub    esp,0xc
c001677a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016780:	e8 a9 d6 ff ff       	call   c0013e2e <Device::getName()>
c0016785:	83 c4 10             	add    esp,0x10
c0016788:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001678b:	0f 85 8d 00 00 00    	jne    c001681e <setupTimer(int)+0xb9>
c0016791:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0016796:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001679d:	74 7f                	je     c001681e <setupTimer(int)+0xb9>
c001679f:	83 ec 0c             	sub    esp,0xc
c00167a2:	68 5c 01 00 00       	push   0x15c
c00167a7:	e8 ed 8d ff ff       	call   c000f599 <malloc>
c00167ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00167af:	89 c3                	mov    ebx,eax
c00167b1:	e8 5a fb 00 00       	call   c0026310 <PIT::PIT()>
c00167b6:	59                   	pop    ecx
c00167b7:	5f                   	pop    edi
c00167b8:	53                   	push   ebx
c00167b9:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c00167bf:	e8 6a d3 ff ff       	call   c0013b2e <Device::addChild(Device*)>
c00167c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167c6:	6a 00                	push   0x0
c00167c8:	6a 00                	push   0x0
c00167ca:	56                   	push   esi
c00167cb:	53                   	push   ebx
c00167cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167cf:	83 c4 14             	add    esp,0x14
c00167d2:	68 60 01 00 00       	push   0x160
c00167d7:	e8 bd 8d ff ff       	call   c000f599 <malloc>
c00167dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00167df:	89 c7                	mov    edi,eax
c00167e1:	e8 da f9 00 00       	call   c00261c0 <APICTimer::APICTimer()>
c00167e6:	6a 00                	push   0x0
c00167e8:	6a 00                	push   0x0
c00167ea:	56                   	push   esi
c00167eb:	57                   	push   edi
c00167ec:	e8 d1 f8 00 00       	call   c00260c2 <APICTimer::open(int, int, void*)>
c00167f1:	83 c4 20             	add    esp,0x20
c00167f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167f6:	6a 00                	push   0x0
c00167f8:	6a 00                	push   0x0
c00167fa:	6a 00                	push   0x0
c00167fc:	53                   	push   ebx
c00167fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016800:	58                   	pop    eax
c0016801:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0016806:	5a                   	pop    edx
c0016807:	57                   	push   edi
c0016808:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001680e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016814:	e8 15 d3 ff ff       	call   c0013b2e <Device::addChild(Device*)>
c0016819:	83 c4 10             	add    esp,0x10
c001681c:	eb 33                	jmp    c0016851 <setupTimer(int)+0xec>
c001681e:	83 ec 0c             	sub    esp,0xc
c0016821:	68 5c 01 00 00       	push   0x15c
c0016826:	e8 6e 8d ff ff       	call   c000f599 <malloc>
c001682b:	89 04 24             	mov    DWORD PTR [esp],eax
c001682e:	89 c3                	mov    ebx,eax
c0016830:	e8 db fa 00 00       	call   c0026310 <PIT::PIT()>
c0016835:	58                   	pop    eax
c0016836:	5a                   	pop    edx
c0016837:	53                   	push   ebx
c0016838:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c001683e:	e8 eb d2 ff ff       	call   c0013b2e <Device::addChild(Device*)>
c0016843:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016845:	6a 00                	push   0x0
c0016847:	6a 00                	push   0x0
c0016849:	56                   	push   esi
c001684a:	53                   	push   ebx
c001684b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001684e:	83 c4 20             	add    esp,0x20
c0016851:	89 d8                	mov    eax,ebx
c0016853:	5b                   	pop    ebx
c0016854:	5e                   	pop    esi
c0016855:	5f                   	pop    edi
c0016856:	c3                   	ret    
c0016857:	90                   	nop

c0016858 <VCache::VCache(PhysicalDisk*)>:
c0016858:	53                   	push   ebx
c0016859:	83 ec 18             	sub    esp,0x18
c001685c:	ba ec b0 02 c0       	mov    edx,0xc002b0ec
c0016861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016865:	89 10                	mov    DWORD PTR [eax],edx
c0016867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016876:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001687d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016881:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016888:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001688f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016893:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001689a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00168a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00168ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00168b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00168bf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00168c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ca:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00168ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00168d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168da:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00168de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00168e9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00168f1:	83 ec 0c             	sub    esp,0xc
c00168f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168f8:	e8 9c 8c ff ff       	call   c000f599 <malloc>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	89 c3                	mov    ebx,eax
c0016902:	83 ec 0c             	sub    esp,0xc
c0016905:	53                   	push   ebx
c0016906:	e8 af 6e 00 00       	call   c001d7ba <Mutex::Mutex()>
c001690b:	83 c4 10             	add    esp,0x10
c001690e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016912:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016919:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001691d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016924:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001692b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001692f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016939:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001693c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016940:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016946:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001694c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016950:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016953:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001695e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016962:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016968:	05 00 01 00 00       	add    eax,0x100
c001696d:	c1 e0 04             	shl    eax,0x4
c0016970:	83 ec 0c             	sub    esp,0xc
c0016973:	50                   	push   eax
c0016974:	e8 20 8c ff ff       	call   c000f599 <malloc>
c0016979:	83 c4 10             	add    esp,0x10
c001697c:	89 c2                	mov    edx,eax
c001697e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016982:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016989:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016994:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016998:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001699c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169a2:	c1 e0 07             	shl    eax,0x7
c00169a5:	83 ec 0c             	sub    esp,0xc
c00169a8:	50                   	push   eax
c00169a9:	e8 eb 8b ff ff       	call   c000f599 <malloc>
c00169ae:	83 c4 10             	add    esp,0x10
c00169b1:	89 c2                	mov    edx,eax
c00169b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00169ba:	90                   	nop
c00169bb:	83 c4 18             	add    esp,0x18
c00169be:	5b                   	pop    ebx
c00169bf:	c3                   	ret    

c00169c0 <VCache::invalidateReadBuffer()>:
c00169c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169c4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00169ca:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00169ce:	c3                   	ret    
c00169cf:	90                   	nop

c00169d0 <VCache::writeWriteBuffer()>:
c00169d0:	53                   	push   ebx
c00169d1:	83 ec 14             	sub    esp,0x14
c00169d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00169d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169db:	8b 10                	mov    edx,DWORD PTR [eax]
c00169dd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169e0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169e3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00169e6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00169e9:	50                   	push   eax
c00169ea:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00169ed:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00169f4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00169fb:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00169ff:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016a06:	83 c4 28             	add    esp,0x28
c0016a09:	5b                   	pop    ebx
c0016a0a:	c3                   	ret    
c0016a0b:	90                   	nop

c0016a0c <VCache::~VCache()>:
c0016a0c:	83 ec 0c             	sub    esp,0xc
c0016a0f:	ba ec b0 02 c0       	mov    edx,0xc002b0ec
c0016a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a18:	89 10                	mov    DWORD PTR [eax],edx
c0016a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a1e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016a21:	84 c0                	test   al,al
c0016a23:	74 0f                	je     c0016a34 <VCache::~VCache()+0x28>
c0016a25:	83 ec 0c             	sub    esp,0xc
c0016a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a2c:	e8 9f ff ff ff       	call   c00169d0 <VCache::writeWriteBuffer()>
c0016a31:	83 c4 10             	add    esp,0x10
c0016a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a38:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a3b:	83 ec 0c             	sub    esp,0xc
c0016a3e:	50                   	push   eax
c0016a3f:	e8 65 8b ff ff       	call   c000f5a9 <free>
c0016a44:	83 c4 10             	add    esp,0x10
c0016a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a4b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a4e:	83 ec 0c             	sub    esp,0xc
c0016a51:	50                   	push   eax
c0016a52:	e8 52 8b ff ff       	call   c000f5a9 <free>
c0016a57:	83 c4 10             	add    esp,0x10
c0016a5a:	90                   	nop
c0016a5b:	83 c4 0c             	add    esp,0xc
c0016a5e:	c3                   	ret    
c0016a5f:	90                   	nop

c0016a60 <VCache::~VCache()>:
c0016a60:	83 ec 0c             	sub    esp,0xc
c0016a63:	83 ec 0c             	sub    esp,0xc
c0016a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a6a:	e8 9d ff ff ff       	call   c0016a0c <VCache::~VCache()>
c0016a6f:	83 c4 10             	add    esp,0x10
c0016a72:	83 ec 08             	sub    esp,0x8
c0016a75:	6a 44                	push   0x44
c0016a77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a7b:	e8 9d bb ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0016a80:	83 c4 10             	add    esp,0x10
c0016a83:	83 c4 0c             	add    esp,0xc
c0016a86:	c3                   	ret    
c0016a87:	90                   	nop

c0016a88 <VCache::write(unsigned long long, int, void*)>:
c0016a88:	55                   	push   ebp
c0016a89:	57                   	push   edi
c0016a8a:	56                   	push   esi
c0016a8b:	53                   	push   ebx
c0016a8c:	83 ec 18             	sub    esp,0x18
c0016a8f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a97:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a9b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a9e:	e8 5d 72 00 00       	call   c001dd00 <Semaphore::acquire()>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016aaa:	74 0c                	je     c0016ab8 <VCache::write(unsigned long long, int, void*)+0x30>
c0016aac:	83 ec 0c             	sub    esp,0xc
c0016aaf:	53                   	push   ebx
c0016ab0:	e8 0b ff ff ff       	call   c00169c0 <VCache::invalidateReadBuffer()>
c0016ab5:	83 c4 10             	add    esp,0x10
c0016ab8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016abc:	74 5c                	je     c0016b1a <VCache::write(unsigned long long, int, void*)+0x92>
c0016abe:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016ac1:	89 e8                	mov    eax,ebp
c0016ac3:	99                   	cdq    
c0016ac4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016ac7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016aca:	89 c1                	mov    ecx,eax
c0016acc:	89 d0                	mov    eax,edx
c0016ace:	31 f1                	xor    ecx,esi
c0016ad0:	31 f8                	xor    eax,edi
c0016ad2:	09 c1                	or     ecx,eax
c0016ad4:	75 38                	jne    c0016b0e <VCache::write(unsigned long long, int, void*)+0x86>
c0016ad6:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016adb:	75 31                	jne    c0016b0e <VCache::write(unsigned long long, int, void*)+0x86>
c0016add:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ae0:	89 ef                	mov    edi,ebp
c0016ae2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016ae8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016aec:	0f af f9             	imul   edi,ecx
c0016aef:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016af2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016af4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016af7:	40                   	inc    eax
c0016af8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016afb:	83 c0 80             	add    eax,0xffffff80
c0016afe:	75 5c                	jne    c0016b5c <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b00:	83 ec 0c             	sub    esp,0xc
c0016b03:	53                   	push   ebx
c0016b04:	e8 c7 fe ff ff       	call   c00169d0 <VCache::writeWriteBuffer()>
c0016b09:	83 c4 10             	add    esp,0x10
c0016b0c:	eb 4e                	jmp    c0016b5c <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b0e:	83 ec 0c             	sub    esp,0xc
c0016b11:	53                   	push   ebx
c0016b12:	e8 b9 fe ff ff       	call   c00169d0 <VCache::writeWriteBuffer()>
c0016b17:	83 c4 10             	add    esp,0x10
c0016b1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b1d:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016b22:	7f 22                	jg     c0016b46 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016b24:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016b27:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016b2a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016b2e:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b32:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016b35:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016b38:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b3e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b44:	eb 16                	jmp    c0016b5c <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b46:	83 ec 0c             	sub    esp,0xc
c0016b49:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b53:	57                   	push   edi
c0016b54:	56                   	push   esi
c0016b55:	50                   	push   eax
c0016b56:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b59:	83 c4 20             	add    esp,0x20
c0016b5c:	83 ec 0c             	sub    esp,0xc
c0016b5f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b62:	e8 f5 77 00 00       	call   c001e35c <Semaphore::release()>
c0016b67:	83 c4 1c             	add    esp,0x1c
c0016b6a:	31 c0                	xor    eax,eax
c0016b6c:	5b                   	pop    ebx
c0016b6d:	5e                   	pop    esi
c0016b6e:	5f                   	pop    edi
c0016b6f:	5d                   	pop    ebp
c0016b70:	c3                   	ret    
c0016b71:	90                   	nop

c0016b72 <VCache::read(unsigned long long, int, void*)>:
c0016b72:	55                   	push   ebp
c0016b73:	57                   	push   edi
c0016b74:	56                   	push   esi
c0016b75:	53                   	push   ebx
c0016b76:	83 ec 28             	sub    esp,0x28
c0016b79:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b7d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b81:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b85:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016b89:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b8c:	e8 6f 71 00 00       	call   c001dd00 <Semaphore::acquire()>
c0016b91:	83 c4 10             	add    esp,0x10
c0016b94:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b98:	74 0c                	je     c0016ba6 <VCache::read(unsigned long long, int, void*)+0x34>
c0016b9a:	83 ec 0c             	sub    esp,0xc
c0016b9d:	53                   	push   ebx
c0016b9e:	e8 2d fe ff ff       	call   c00169d0 <VCache::writeWriteBuffer()>
c0016ba3:	83 c4 10             	add    esp,0x10
c0016ba6:	83 fd 01             	cmp    ebp,0x1
c0016ba9:	0f 85 80 00 00 00    	jne    c0016c2f <VCache::read(unsigned long long, int, void*)+0xbd>
c0016baf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bb6:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016bbd:	75 70                	jne    c0016c2f <VCache::read(unsigned long long, int, void*)+0xbd>
c0016bbf:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016bc2:	89 e9                	mov    ecx,ebp
c0016bc4:	f7 d9                	neg    ecx
c0016bc6:	89 c8                	mov    eax,ecx
c0016bc8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016bcc:	c1 f8 1f             	sar    eax,0x1f
c0016bcf:	21 f1                	and    ecx,esi
c0016bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bd5:	89 c8                	mov    eax,ecx
c0016bd7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bdb:	21 f9                	and    ecx,edi
c0016bdd:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016be1:	89 ca                	mov    edx,ecx
c0016be3:	74 0a                	je     c0016bef <VCache::read(unsigned long long, int, void*)+0x7d>
c0016be5:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016be8:	75 05                	jne    c0016bef <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bea:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016bed:	74 23                	je     c0016c12 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016bef:	83 ec 0c             	sub    esp,0xc
c0016bf2:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016bf6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016bfa:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016bfd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016c00:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016c02:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016c05:	55                   	push   ebp
c0016c06:	52                   	push   edx
c0016c07:	50                   	push   eax
c0016c08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c0c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016c0f:	83 c4 20             	add    esp,0x20
c0016c12:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c15:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c19:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016c1f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016c22:	48                   	dec    eax
c0016c23:	21 c6                	and    esi,eax
c0016c25:	0f af f1             	imul   esi,ecx
c0016c28:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016c2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c2d:	eb 1d                	jmp    c0016c4c <VCache::read(unsigned long long, int, void*)+0xda>
c0016c2f:	83 ec 0c             	sub    esp,0xc
c0016c32:	53                   	push   ebx
c0016c33:	e8 88 fd ff ff       	call   c00169c0 <VCache::invalidateReadBuffer()>
c0016c38:	5a                   	pop    edx
c0016c39:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016c42:	55                   	push   ebp
c0016c43:	57                   	push   edi
c0016c44:	56                   	push   esi
c0016c45:	50                   	push   eax
c0016c46:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c49:	83 c4 20             	add    esp,0x20
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c52:	e8 05 77 00 00       	call   c001e35c <Semaphore::release()>
c0016c57:	83 c4 2c             	add    esp,0x2c
c0016c5a:	31 c0                	xor    eax,eax
c0016c5c:	5b                   	pop    ebx
c0016c5d:	5e                   	pop    esi
c0016c5e:	5f                   	pop    edi
c0016c5f:	5d                   	pop    ebp
c0016c60:	c3                   	ret    
c0016c61:	90                   	nop

c0016c62 <Video::putrect(int, int, int, int, unsigned int)>:
c0016c62:	55                   	push   ebp
c0016c63:	57                   	push   edi
c0016c64:	56                   	push   esi
c0016c65:	53                   	push   ebx
c0016c66:	83 ec 1c             	sub    esp,0x1c
c0016c69:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c71:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c75:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c79:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c81:	01 df                	add    edi,ebx
c0016c83:	39 fb                	cmp    ebx,edi
c0016c85:	7d 1f                	jge    c0016ca6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016c87:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c8b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016c8f:	7d 12                	jge    c0016ca3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016c91:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016c97:	53                   	push   ebx
c0016c98:	55                   	push   ebp
c0016c99:	45                   	inc    ebp
c0016c9a:	56                   	push   esi
c0016c9b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c9e:	83 c4 10             	add    esp,0x10
c0016ca1:	eb e8                	jmp    c0016c8b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016ca3:	43                   	inc    ebx
c0016ca4:	eb dd                	jmp    c0016c83 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ca6:	83 c4 1c             	add    esp,0x1c
c0016ca9:	5b                   	pop    ebx
c0016caa:	5e                   	pop    esi
c0016cab:	5f                   	pop    edi
c0016cac:	5d                   	pop    ebp
c0016cad:	c3                   	ret    

c0016cae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016cae:	55                   	push   ebp
c0016caf:	57                   	push   edi
c0016cb0:	31 ff                	xor    edi,edi
c0016cb2:	56                   	push   esi
c0016cb3:	53                   	push   ebx
c0016cb4:	83 ec 1c             	sub    esp,0x1c
c0016cb7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016cbb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016cbf:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016cc6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ccb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ccf:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016cd3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016cd7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016cda:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016cde:	01 f9                	add    ecx,edi
c0016ce0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016ce4:	7d 2f                	jge    c0016d15 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016ce6:	31 f6                	xor    esi,esi
c0016ce8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016cec:	01 f2                	add    edx,esi
c0016cee:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016cf2:	7d 1a                	jge    c0016d0e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016cf4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016cf7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016cfa:	46                   	inc    esi
c0016cfb:	51                   	push   ecx
c0016cfc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016d00:	52                   	push   edx
c0016d01:	55                   	push   ebp
c0016d02:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d05:	83 c4 10             	add    esp,0x10
c0016d08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d0c:	eb da                	jmp    c0016ce8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016d0e:	47                   	inc    edi
c0016d0f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016d13:	eb c5                	jmp    c0016cda <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016d15:	83 c4 1c             	add    esp,0x1c
c0016d18:	5b                   	pop    ebx
c0016d19:	5e                   	pop    esi
c0016d1a:	5f                   	pop    edi
c0016d1b:	5d                   	pop    ebp
c0016d1c:	c3                   	ret    
c0016d1d:	90                   	nop

c0016d1e <Video::blit(unsigned int*, int, int, int, int)>:
c0016d1e:	55                   	push   ebp
c0016d1f:	57                   	push   edi
c0016d20:	56                   	push   esi
c0016d21:	53                   	push   ebx
c0016d22:	83 ec 1c             	sub    esp,0x1c
c0016d25:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d29:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d2d:	85 c0                	test   eax,eax
c0016d2f:	79 02                	jns    c0016d33 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016d31:	31 c0                	xor    eax,eax
c0016d33:	c1 e0 02             	shl    eax,0x2
c0016d36:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d42:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016d46:	39 d8                	cmp    eax,ebx
c0016d48:	7e 49                	jle    c0016d93 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d4a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d50:	7c 41                	jl     c0016d93 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d52:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016d56:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d5a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d5e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016d62:	39 f9                	cmp    ecx,edi
c0016d64:	7e 22                	jle    c0016d88 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016d66:	83 c5 04             	add    ebp,0x4
c0016d69:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d6f:	7c 14                	jl     c0016d85 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016d71:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d73:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016d76:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d7a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d7e:	56                   	push   esi
c0016d7f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016d82:	83 c4 10             	add    esp,0x10
c0016d85:	47                   	inc    edi
c0016d86:	eb d2                	jmp    c0016d5a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016d88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d8c:	43                   	inc    ebx
c0016d8d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016d91:	eb ab                	jmp    c0016d3e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016d93:	83 c4 1c             	add    esp,0x1c
c0016d96:	5b                   	pop    ebx
c0016d97:	5e                   	pop    esi
c0016d98:	5f                   	pop    edi
c0016d99:	5d                   	pop    ebp
c0016d9a:	c3                   	ret    
c0016d9b:	90                   	nop

c0016d9c <Video::clearScreen(unsigned int)>:
c0016d9c:	57                   	push   edi
c0016d9d:	56                   	push   esi
c0016d9e:	53                   	push   ebx
c0016d9f:	31 db                	xor    ebx,ebx
c0016da1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016da5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016dab:	7e 1f                	jle    c0016dcc <Video::clearScreen(unsigned int)+0x30>
c0016dad:	31 ff                	xor    edi,edi
c0016daf:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016db5:	7e 12                	jle    c0016dc9 <Video::clearScreen(unsigned int)+0x2d>
c0016db7:	8b 06                	mov    eax,DWORD PTR [esi]
c0016db9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016dbd:	53                   	push   ebx
c0016dbe:	57                   	push   edi
c0016dbf:	47                   	inc    edi
c0016dc0:	56                   	push   esi
c0016dc1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016dc4:	83 c4 10             	add    esp,0x10
c0016dc7:	eb e6                	jmp    c0016daf <Video::clearScreen(unsigned int)+0x13>
c0016dc9:	43                   	inc    ebx
c0016dca:	eb d9                	jmp    c0016da5 <Video::clearScreen(unsigned int)+0x9>
c0016dcc:	5b                   	pop    ebx
c0016dcd:	5e                   	pop    esi
c0016dce:	5f                   	pop    edi
c0016dcf:	c3                   	ret    

c0016dd0 <Video::putpixel(int, int, unsigned int)>:
c0016dd0:	c7 44 24 04 f4 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b0f4
c0016dd8:	e9 84 30 00 00       	jmp    c0019e61 <Krnl::panic(char const*)>
c0016ddd:	90                   	nop

c0016dde <Video::Video(char const*)>:
c0016dde:	83 ec 0c             	sub    esp,0xc
c0016de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016de5:	83 ec 08             	sub    esp,0x8
c0016de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dec:	50                   	push   eax
c0016ded:	e8 40 cf ff ff       	call   c0013d32 <Device::Device(char const*)>
c0016df2:	83 c4 10             	add    esp,0x10
c0016df5:	ba 64 b1 02 c0       	mov    edx,0xc002b164
c0016dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dfe:	89 10                	mov    DWORD PTR [eax],edx
c0016e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e04:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016e0e:	90                   	nop
c0016e0f:	83 c4 0c             	add    esp,0xc
c0016e12:	c3                   	ret    
c0016e13:	90                   	nop

c0016e14 <Video::~Video()>:
c0016e14:	83 ec 0c             	sub    esp,0xc
c0016e17:	ba 64 b1 02 c0       	mov    edx,0xc002b164
c0016e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e20:	89 10                	mov    DWORD PTR [eax],edx
c0016e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e26:	83 ec 0c             	sub    esp,0xc
c0016e29:	50                   	push   eax
c0016e2a:	e8 cd cb ff ff       	call   c00139fc <Device::~Device()>
c0016e2f:	83 c4 10             	add    esp,0x10
c0016e32:	90                   	nop
c0016e33:	83 c4 0c             	add    esp,0xc
c0016e36:	c3                   	ret    
c0016e37:	90                   	nop

c0016e38 <Video::~Video()>:
c0016e38:	83 ec 0c             	sub    esp,0xc
c0016e3b:	83 ec 0c             	sub    esp,0xc
c0016e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e42:	e8 cd ff ff ff       	call   c0016e14 <Video::~Video()>
c0016e47:	83 c4 10             	add    esp,0x10
c0016e4a:	83 ec 08             	sub    esp,0x8
c0016e4d:	68 64 01 00 00       	push   0x164
c0016e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e56:	e8 c2 b7 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0016e5b:	83 c4 10             	add    esp,0x10
c0016e5e:	83 c4 0c             	add    esp,0xc
c0016e61:	c3                   	ret    

c0016e62 <Video::isMonochrome()>:
c0016e62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e66:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016e6c:	c3                   	ret    
c0016e6d:	90                   	nop

c0016e6e <Video::getWidth()>:
c0016e6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e72:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e78:	c3                   	ret    
c0016e79:	90                   	nop

c0016e7a <Video::getHeight()>:
c0016e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e7e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e84:	c3                   	ret    
c0016e85:	90                   	nop

c0016e86 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016e86:	55                   	push   ebp
c0016e87:	57                   	push   edi
c0016e88:	56                   	push   esi
c0016e89:	53                   	push   ebx
c0016e8a:	83 ec 2c             	sub    esp,0x2c
c0016e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e91:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e95:	83 f8 01             	cmp    eax,0x1
c0016e98:	19 c9                	sbb    ecx,ecx
c0016e9a:	31 db                	xor    ebx,ebx
c0016e9c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016ea0:	89 cd                	mov    ebp,ecx
c0016ea2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016eaa:	f7 d5                	not    ebp
c0016eac:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016eb2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016eb6:	01 d8                	add    eax,ebx
c0016eb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ebc:	56                   	push   esi
c0016ebd:	e8 b8 ff ff ff       	call   c0016e7a <Video::getHeight()>
c0016ec2:	59                   	pop    ecx
c0016ec3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016ec7:	7e 70                	jle    c0016f39 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016ec9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016ecd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ed1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016ed4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ed8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016edc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016ee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ee7:	89 f8                	mov    eax,edi
c0016ee9:	83 c0 20             	add    eax,0x20
c0016eec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ef0:	56                   	push   esi
c0016ef1:	e8 78 ff ff ff       	call   c0016e6e <Video::getWidth()>
c0016ef6:	5a                   	pop    edx
c0016ef7:	39 c7                	cmp    edi,eax
c0016ef9:	7d 34                	jge    c0016f2f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016efb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016f00:	74 05                	je     c0016f07 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016f02:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f04:	55                   	push   ebp
c0016f05:	eb 0d                	jmp    c0016f14 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016f07:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016f0c:	74 12                	je     c0016f20 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016f0e:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f14:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f18:	57                   	push   edi
c0016f19:	56                   	push   esi
c0016f1a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f1d:	83 c4 10             	add    esp,0x10
c0016f20:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016f24:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016f28:	47                   	inc    edi
c0016f29:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016f2d:	75 c1                	jne    c0016ef0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016f2f:	43                   	inc    ebx
c0016f30:	83 fb 20             	cmp    ebx,0x20
c0016f33:	0f 85 79 ff ff ff    	jne    c0016eb2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016f39:	83 c4 2c             	add    esp,0x2c
c0016f3c:	5b                   	pop    ebx
c0016f3d:	5e                   	pop    esi
c0016f3e:	5f                   	pop    edi
c0016f3f:	5d                   	pop    ebp
c0016f40:	c3                   	ret    
c0016f41:	90                   	nop

c0016f42 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016f42:	55                   	push   ebp
c0016f43:	57                   	push   edi
c0016f44:	56                   	push   esi
c0016f45:	53                   	push   ebx
c0016f46:	83 ec 28             	sub    esp,0x28
c0016f49:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016f4d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016f51:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016f55:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016f59:	c1 e6 08             	shl    esi,0x8
c0016f5c:	01 c6                	add    esi,eax
c0016f5e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016f62:	c1 e0 08             	shl    eax,0x8
c0016f65:	01 d0                	add    eax,edx
c0016f67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f6f:	0f af c6             	imul   eax,esi
c0016f72:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016f79:	50                   	push   eax
c0016f7a:	e8 1a 86 ff ff       	call   c000f599 <malloc>
c0016f7f:	83 c4 10             	add    esp,0x10
c0016f82:	89 c7                	mov    edi,eax
c0016f84:	85 c0                	test   eax,eax
c0016f86:	75 10                	jne    c0016f98 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016f88:	83 ec 0c             	sub    esp,0xc
c0016f8b:	68 15 b1 02 c0       	push   0xc002b115
c0016f90:	e8 cc 2e 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0016f95:	83 c4 10             	add    esp,0x10
c0016f98:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016f9b:	ba 12 00 00 00       	mov    edx,0x12
c0016fa0:	84 c0                	test   al,al
c0016fa2:	74 11                	je     c0016fb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016fa4:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016fa8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016fac:	c1 fa 03             	sar    edx,0x3
c0016faf:	0f af d1             	imul   edx,ecx
c0016fb2:	83 c2 12             	add    edx,0x12
c0016fb5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016fb9:	74 04                	je     c0016fbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016fbb:	85 f6                	test   esi,esi
c0016fbd:	75 12                	jne    c0016fd1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016fbf:	83 ec 0c             	sub    esp,0xc
c0016fc2:	68 25 b1 02 c0       	push   0xc002b125
c0016fc7:	e8 29 b7 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0016fcc:	e9 b8 00 00 00       	jmp    c0017089 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016fd1:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016fd5:	80 f9 02             	cmp    cl,0x2
c0016fd8:	0f 85 96 00 00 00    	jne    c0017074 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016fde:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016fe3:	75 0e                	jne    c0016ff3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fe5:	84 c0                	test   al,al
c0016fe7:	75 0a                	jne    c0016ff3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fe9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016fec:	83 e8 18             	sub    eax,0x18
c0016fef:	a8 f7                	test   al,0xf7
c0016ff1:	74 0a                	je     c0016ffd <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016ff3:	83 ec 0c             	sub    esp,0xc
c0016ff6:	68 3a b1 02 c0       	push   0xc002b13a
c0016ffb:	eb 7f                	jmp    c001707c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016ffd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017005:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001700d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0017011:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017019:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001701d:	75 0c                	jne    c001702b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001701f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0017024:	c1 e0 18             	shl    eax,0x18
c0017027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001702b:	45                   	inc    ebp
c001702c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0017031:	c1 e1 10             	shl    ecx,0x10
c0017034:	89 c8                	mov    eax,ecx
c0017036:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001703b:	c1 e1 08             	shl    ecx,0x8
c001703e:	09 c1                	or     ecx,eax
c0017040:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017044:	09 c1                	or     ecx,eax
c0017046:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001704a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001704e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017052:	c1 f8 03             	sar    eax,0x3
c0017055:	01 c2                	add    edx,eax
c0017057:	89 e8                	mov    eax,ebp
c0017059:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001705d:	39 c6                	cmp    esi,eax
c001705f:	7f b0                	jg     c0017011 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0017061:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017065:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017069:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001706c:	7e 22                	jle    c0017090 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001706e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017072:	eb 99                	jmp    c001700d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017074:	50                   	push   eax
c0017075:	50                   	push   eax
c0017076:	51                   	push   ecx
c0017077:	68 48 b1 02 c0       	push   0xc002b148
c001707c:	e8 74 b6 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0017081:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017084:	e8 20 85 ff ff       	call   c000f5a9 <free>
c0017089:	83 c4 10             	add    esp,0x10
c001708c:	31 ff                	xor    edi,edi
c001708e:	eb 0f                	jmp    c001709f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0017090:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017094:	89 30                	mov    DWORD PTR [eax],esi
c0017096:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001709a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001709d:	89 30                	mov    DWORD PTR [eax],esi
c001709f:	83 c4 1c             	add    esp,0x1c
c00170a2:	89 f8                	mov    eax,edi
c00170a4:	5b                   	pop    ebx
c00170a5:	5e                   	pop    esi
c00170a6:	5f                   	pop    edi
c00170a7:	5d                   	pop    ebp
c00170a8:	c3                   	ret    
c00170a9:	90                   	nop

c00170aa <Video::putTGA(int, int, unsigned char*, int)>:
c00170aa:	55                   	push   ebp
c00170ab:	57                   	push   edi
c00170ac:	56                   	push   esi
c00170ad:	53                   	push   ebx
c00170ae:	83 ec 28             	sub    esp,0x28
c00170b1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00170b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170b9:	50                   	push   eax
c00170ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170be:	50                   	push   eax
c00170bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00170c3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00170c7:	56                   	push   esi
c00170c8:	e8 75 fe ff ff       	call   c0016f42 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00170cd:	83 c4 20             	add    esp,0x20
c00170d0:	85 c0                	test   eax,eax
c00170d2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00170d6:	74 35                	je     c001710d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170d8:	89 c7                	mov    edi,eax
c00170da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170de:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00170e2:	39 d8                	cmp    eax,ebx
c00170e4:	7e 27                	jle    c001710d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170e6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170ee:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00170f2:	39 e8                	cmp    eax,ebp
c00170f4:	7e 14                	jle    c001710a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00170f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00170f8:	83 c7 04             	add    edi,0x4
c00170fb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00170fe:	53                   	push   ebx
c00170ff:	55                   	push   ebp
c0017100:	45                   	inc    ebp
c0017101:	56                   	push   esi
c0017102:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017105:	83 c4 10             	add    esp,0x10
c0017108:	eb e0                	jmp    c00170ea <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001710a:	43                   	inc    ebx
c001710b:	eb cd                	jmp    c00170da <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001710d:	83 c4 1c             	add    esp,0x1c
c0017110:	5b                   	pop    ebx
c0017111:	5e                   	pop    esi
c0017112:	5f                   	pop    edi
c0017113:	5d                   	pop    ebp
c0017114:	c3                   	ret    
c0017115:	90                   	nop

c0017116 <ACPI::close(int, int, void*)>:
c0017116:	83 ec 1c             	sub    esp,0x1c
c0017119:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017121:	74 0a                	je     c001712d <ACPI::close(int, int, void*)+0x17>
c0017123:	b8 00 00 00 00       	mov    eax,0x0
c0017128:	e9 8a 00 00 00       	jmp    c00171b7 <ACPI::close(int, int, void*)+0xa1>
c001712d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017132:	75 27                	jne    c001715b <ACPI::close(int, int, void*)+0x45>
c0017134:	a1 a8 00 03 c0       	mov    eax,ds:0xc00300a8
c0017139:	85 c0                	test   eax,eax
c001713b:	74 07                	je     c0017144 <ACPI::close(int, int, void*)+0x2e>
c001713d:	a1 a8 00 03 c0       	mov    eax,ds:0xc00300a8
c0017142:	ff d0                	call   eax
c0017144:	83 ec 0c             	sub    esp,0xc
c0017147:	68 a4 b1 02 c0       	push   0xc002b1a4
c001714c:	e8 10 2d 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0017151:	83 c4 10             	add    esp,0x10
c0017154:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017159:	eb 5c                	jmp    c00171b7 <ACPI::close(int, int, void*)+0xa1>
c001715b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017160:	75 50                	jne    c00171b2 <ACPI::close(int, int, void*)+0x9c>
c0017162:	a1 a4 00 03 c0       	mov    eax,ds:0xc00300a4
c0017167:	85 c0                	test   eax,eax
c0017169:	74 07                	je     c0017172 <ACPI::close(int, int, void*)+0x5c>
c001716b:	a1 a4 00 03 c0       	mov    eax,ds:0xc00300a4
c0017170:	ff d0                	call   eax
c0017172:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017177:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001717c:	83 e0 02             	and    eax,0x2
c001717f:	74 1c                	je     c001719d <ACPI::close(int, int, void*)+0x87>
c0017181:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017188:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001718c:	89 c2                	mov    edx,eax
c001718e:	ec                   	in     al,dx
c001718f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017193:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017197:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001719b:	eb da                	jmp    c0017177 <ACPI::close(int, int, void*)+0x61>
c001719d:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00171a4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00171a9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00171ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00171b1:	ee                   	out    dx,al
c00171b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00171b7:	83 c4 1c             	add    esp,0x1c
c00171ba:	c3                   	ret    

c00171bb <findRSDP()>:
c00171bb:	83 ec 1c             	sub    esp,0x1c
c00171be:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00171c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171c9:	83 e0 04             	and    eax,0x4
c00171cc:	84 c0                	test   al,al
c00171ce:	75 07                	jne    c00171d7 <findRSDP()+0x1c>
c00171d0:	b8 00 00 00 00       	mov    eax,0x0
c00171d5:	eb 6a                	jmp    c0017241 <findRSDP()+0x86>
c00171d7:	a1 54 da 02 c0       	mov    eax,ds:0xc002da54
c00171dc:	3d ff 07 00 00       	cmp    eax,0x7ff
c00171e1:	7f 1b                	jg     c00171fe <findRSDP()+0x43>
c00171e3:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00171e8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171ee:	83 e2 fb             	and    edx,0xfffffffb
c00171f1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171f7:	b8 00 00 00 00       	mov    eax,0x0
c00171fc:	eb 43                	jmp    c0017241 <findRSDP()+0x86>
c00171fe:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017206:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001720e:	77 2c                	ja     c001723c <findRSDP()+0x81>
c0017210:	83 ec 04             	sub    esp,0x4
c0017213:	6a 08                	push   0x8
c0017215:	68 3f b2 02 c0       	push   0xc002b23f
c001721a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001721e:	e8 29 94 fe ff       	call   c000064c <memcmp>
c0017223:	83 c4 10             	add    esp,0x10
c0017226:	85 c0                	test   eax,eax
c0017228:	0f 94 c0             	sete   al
c001722b:	84 c0                	test   al,al
c001722d:	74 06                	je     c0017235 <findRSDP()+0x7a>
c001722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017233:	eb 0c                	jmp    c0017241 <findRSDP()+0x86>
c0017235:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001723a:	eb ca                	jmp    c0017206 <findRSDP()+0x4b>
c001723c:	b8 00 00 00 00       	mov    eax,0x0
c0017241:	83 c4 1c             	add    esp,0x1c
c0017244:	c3                   	ret    

c0017245 <loadACPITables(unsigned char*)>:
c0017245:	57                   	push   edi
c0017246:	56                   	push   esi
c0017247:	53                   	push   ebx
c0017248:	83 ec 60             	sub    esp,0x60
c001724b:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0017250:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017256:	83 e0 04             	and    eax,0x4
c0017259:	84 c0                	test   al,al
c001725b:	0f 84 33 02 00 00    	je     c0017494 <loadACPITables(unsigned char*)+0x24f>
c0017261:	a0 c0 02 03 c0       	mov    al,ds:0xc00302c0
c0017266:	84 c0                	test   al,al
c0017268:	74 75                	je     c00172df <loadACPITables(unsigned char*)+0x9a>
c001726a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001726e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017272:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017276:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017279:	83 e8 24             	sub    eax,0x24
c001727c:	c1 e8 03             	shr    eax,0x3
c001727f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017283:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001728b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001728f:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017293:	0f 8d b2 00 00 00    	jge    c001734b <loadACPITables(unsigned char*)+0x106>
c0017299:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001729d:	83 c0 24             	add    eax,0x24
c00172a0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00172a4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00172a8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00172ac:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00172b0:	c1 e0 03             	shl    eax,0x3
c00172b3:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00172b7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00172bb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00172be:	8b 00                	mov    eax,DWORD PTR [eax]
c00172c0:	89 c1                	mov    ecx,eax
c00172c2:	a1 ac 00 03 c0       	mov    eax,ds:0xc00300ac
c00172c7:	8d 50 01             	lea    edx,[eax+0x1]
c00172ca:	89 15 ac 00 03 c0    	mov    DWORD PTR ds:0xc00300ac,edx
c00172d0:	89 ca                	mov    edx,ecx
c00172d2:	89 14 c5 c4 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff3c],edx
c00172d9:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00172dd:	eb ac                	jmp    c001728b <loadACPITables(unsigned char*)+0x46>
c00172df:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172e3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00172e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172ee:	83 e8 24             	sub    eax,0x24
c00172f1:	c1 e8 02             	shr    eax,0x2
c00172f4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172f8:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017300:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017304:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017308:	7d 41                	jge    c001734b <loadACPITables(unsigned char*)+0x106>
c001730a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001730e:	83 c0 24             	add    eax,0x24
c0017311:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017315:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017319:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001731d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017321:	c1 e0 02             	shl    eax,0x2
c0017324:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017328:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001732c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001732e:	a1 ac 00 03 c0       	mov    eax,ds:0xc00300ac
c0017333:	8d 50 01             	lea    edx,[eax+0x1]
c0017336:	89 15 ac 00 03 c0    	mov    DWORD PTR ds:0xc00300ac,edx
c001733c:	89 ca                	mov    edx,ecx
c001733e:	89 14 c5 c4 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff3c],edx
c0017345:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017349:	eb b5                	jmp    c0017300 <loadACPITables(unsigned char*)+0xbb>
c001734b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017353:	a1 ac 00 03 c0       	mov    eax,ds:0xc00300ac
c0017358:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001735c:	0f 8d 33 01 00 00    	jge    c0017495 <loadACPITables(unsigned char*)+0x250>
c0017362:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017366:	8b 04 c5 c4 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff3c]
c001736d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017371:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017375:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001737d:	25 ff 0f 00 00       	and    eax,0xfff
c0017382:	89 c6                	mov    esi,eax
c0017384:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c001738a:	83 ec 0c             	sub    esp,0xc
c001738d:	6a 01                	push   0x1
c001738f:	e8 89 9e ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0017394:	83 c4 10             	add    esp,0x10
c0017397:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001739b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173a1:	83 ec 0c             	sub    esp,0xc
c00173a4:	6a 01                	push   0x1
c00173a6:	6a 01                	push   0x1
c00173a8:	50                   	push   eax
c00173a9:	52                   	push   edx
c00173aa:	53                   	push   ebx
c00173ab:	e8 20 a9 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173b0:	83 c4 20             	add    esp,0x20
c00173b3:	09 f0                	or     eax,esi
c00173b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173b9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00173bd:	c1 e0 03             	shl    eax,0x3
c00173c0:	05 c0 00 03 c0       	add    eax,0xc00300c0
c00173c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173d1:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00173d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00173e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00173ed:	89 c6                	mov    esi,eax
c00173ef:	89 d7                	mov    edi,edx
c00173f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173f3:	89 c8                	mov    eax,ecx
c00173f5:	89 fa                	mov    edx,edi
c00173f7:	89 f3                	mov    ebx,esi
c00173f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00173fd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017401:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017405:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017409:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001740c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017410:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017414:	05 00 10 00 00       	add    eax,0x1000
c0017419:	c1 e8 0c             	shr    eax,0xc
c001741c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017420:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017424:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001742c:	25 ff 0f 00 00       	and    eax,0xfff
c0017431:	89 c6                	mov    esi,eax
c0017433:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c0017439:	83 ec 0c             	sub    esp,0xc
c001743c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017440:	e8 d8 9d ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0017445:	83 c4 10             	add    esp,0x10
c0017448:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001744c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017452:	83 ec 0c             	sub    esp,0xc
c0017455:	6a 01                	push   0x1
c0017457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001745b:	50                   	push   eax
c001745c:	52                   	push   edx
c001745d:	53                   	push   ebx
c001745e:	e8 6d a8 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017463:	83 c4 20             	add    esp,0x20
c0017466:	09 f0                	or     eax,esi
c0017468:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001746c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017470:	83 ec 0c             	sub    esp,0xc
c0017473:	50                   	push   eax
c0017474:	e8 ea a1 ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c0017479:	83 c4 10             	add    esp,0x10
c001747c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017480:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017484:	89 14 c5 c4 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff3c],edx
c001748b:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001748f:	e9 bf fe ff ff       	jmp    c0017353 <loadACPITables(unsigned char*)+0x10e>
c0017494:	90                   	nop
c0017495:	83 c4 60             	add    esp,0x60
c0017498:	5b                   	pop    ebx
c0017499:	5e                   	pop    esi
c001749a:	5f                   	pop    edi
c001749b:	c3                   	ret    

c001749c <findRSDT(unsigned char*)>:
c001749c:	57                   	push   edi
c001749d:	56                   	push   esi
c001749e:	53                   	push   ebx
c001749f:	83 ec 50             	sub    esp,0x50
c00174a2:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00174a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174ad:	83 e0 04             	and    eax,0x4
c00174b0:	84 c0                	test   al,al
c00174b2:	75 0a                	jne    c00174be <findRSDT(unsigned char*)+0x22>
c00174b4:	b8 00 00 00 00       	mov    eax,0x0
c00174b9:	e9 21 01 00 00       	jmp    c00175df <findRSDT(unsigned char*)+0x143>
c00174be:	89 e0                	mov    eax,esp
c00174c0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00174c4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00174c8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00174cc:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00174d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174d8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00174e0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174e4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00174e8:	89 c6                	mov    esi,eax
c00174ea:	89 d7                	mov    edi,edx
c00174ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00174ee:	89 c8                	mov    eax,ecx
c00174f0:	89 fa                	mov    edx,edi
c00174f2:	89 f3                	mov    ebx,esi
c00174f4:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00174f8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00174fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017500:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017504:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017508:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017510:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017514:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017518:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001751c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017520:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017524:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017528:	25 ff 0f 00 00       	and    eax,0xfff
c001752d:	89 c6                	mov    esi,eax
c001752f:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c0017535:	83 ec 0c             	sub    esp,0xc
c0017538:	6a 02                	push   0x2
c001753a:	e8 de 9c ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c001753f:	83 c4 10             	add    esp,0x10
c0017542:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017546:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001754c:	83 ec 0c             	sub    esp,0xc
c001754f:	6a 01                	push   0x1
c0017551:	6a 02                	push   0x2
c0017553:	50                   	push   eax
c0017554:	52                   	push   edx
c0017555:	53                   	push   ebx
c0017556:	e8 75 a7 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001755b:	83 c4 20             	add    esp,0x20
c001755e:	09 f0                	or     eax,esi
c0017560:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017564:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017568:	25 ff 0f 00 00       	and    eax,0xfff
c001756d:	89 c6                	mov    esi,eax
c001756f:	8b 1d 70 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db70
c0017575:	83 ec 0c             	sub    esp,0xc
c0017578:	6a 02                	push   0x2
c001757a:	e8 9e 9c ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c001757f:	83 c4 10             	add    esp,0x10
c0017582:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017586:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001758c:	83 ec 0c             	sub    esp,0xc
c001758f:	6a 01                	push   0x1
c0017591:	6a 02                	push   0x2
c0017593:	50                   	push   eax
c0017594:	52                   	push   edx
c0017595:	53                   	push   ebx
c0017596:	e8 35 a7 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001759b:	83 c4 20             	add    esp,0x20
c001759e:	09 f0                	or     eax,esi
c00175a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00175a4:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00175a9:	75 11                	jne    c00175bc <findRSDT(unsigned char*)+0x120>
c00175ab:	c6 05 c0 02 03 c0 00 	mov    BYTE PTR ds:0xc00302c0,0x0
c00175b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00175b6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175ba:	eb 1f                	jmp    c00175db <findRSDT(unsigned char*)+0x13f>
c00175bc:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00175c1:	75 11                	jne    c00175d4 <findRSDT(unsigned char*)+0x138>
c00175c3:	c6 05 c0 02 03 c0 01 	mov    BYTE PTR ds:0xc00302c0,0x1
c00175ca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175ce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175d2:	eb 07                	jmp    c00175db <findRSDT(unsigned char*)+0x13f>
c00175d4:	b8 00 00 00 00       	mov    eax,0x0
c00175d9:	eb 04                	jmp    c00175df <findRSDT(unsigned char*)+0x143>
c00175db:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175df:	83 c4 50             	add    esp,0x50
c00175e2:	5b                   	pop    ebx
c00175e3:	5e                   	pop    esi
c00175e4:	5f                   	pop    edi
c00175e5:	c3                   	ret    

c00175e6 <findDataTable(unsigned char*, char*)>:
c00175e6:	83 ec 1c             	sub    esp,0x1c
c00175e9:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00175ee:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175f4:	83 e0 04             	and    eax,0x4
c00175f7:	84 c0                	test   al,al
c00175f9:	75 07                	jne    c0017602 <findDataTable(unsigned char*, char*)+0x1c>
c00175fb:	b8 00 00 00 00       	mov    eax,0x0
c0017600:	eb 52                	jmp    c0017654 <findDataTable(unsigned char*, char*)+0x6e>
c0017602:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001760a:	a1 ac 00 03 c0       	mov    eax,ds:0xc00300ac
c001760f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017613:	7d 3a                	jge    c001764f <findDataTable(unsigned char*, char*)+0x69>
c0017615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017619:	c1 e0 03             	shl    eax,0x3
c001761c:	05 c0 00 03 c0       	add    eax,0xc00300c0
c0017621:	83 ec 04             	sub    esp,0x4
c0017624:	6a 04                	push   0x4
c0017626:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001762a:	50                   	push   eax
c001762b:	e8 1c 90 fe ff       	call   c000064c <memcmp>
c0017630:	83 c4 10             	add    esp,0x10
c0017633:	85 c0                	test   eax,eax
c0017635:	0f 94 c0             	sete   al
c0017638:	84 c0                	test   al,al
c001763a:	74 0d                	je     c0017649 <findDataTable(unsigned char*, char*)+0x63>
c001763c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017640:	8b 04 c5 c4 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff3c]
c0017647:	eb 0b                	jmp    c0017654 <findDataTable(unsigned char*, char*)+0x6e>
c0017649:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001764d:	eb bb                	jmp    c001760a <findDataTable(unsigned char*, char*)+0x24>
c001764f:	b8 00 00 00 00       	mov    eax,0x0
c0017654:	83 c4 1c             	add    esp,0x1c
c0017657:	c3                   	ret    

c0017658 <scanMADT()>:
c0017658:	53                   	push   ebx
c0017659:	83 ec 38             	sub    esp,0x38
c001765c:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0017661:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017667:	83 e0 04             	and    eax,0x4
c001766a:	84 c0                	test   al,al
c001766c:	0f 84 4a 04 00 00    	je     c0017abc <scanMADT()+0x464>
c0017672:	e8 44 fb ff ff       	call   c00171bb <findRSDP()>
c0017677:	a3 cc 02 03 c0       	mov    ds:0xc00302cc,eax
c001767c:	a1 cc 02 03 c0       	mov    eax,ds:0xc00302cc
c0017681:	85 c0                	test   eax,eax
c0017683:	75 19                	jne    c001769e <scanMADT()+0x46>
c0017685:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001768a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017690:	83 e2 fb             	and    edx,0xfffffffb
c0017693:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017699:	e9 22 04 00 00       	jmp    c0017ac0 <scanMADT()+0x468>
c001769e:	a1 cc 02 03 c0       	mov    eax,ds:0xc00302cc
c00176a3:	83 ec 0c             	sub    esp,0xc
c00176a6:	50                   	push   eax
c00176a7:	e8 f0 fd ff ff       	call   c001749c <findRSDT(unsigned char*)>
c00176ac:	83 c4 10             	add    esp,0x10
c00176af:	a3 c8 02 03 c0       	mov    ds:0xc00302c8,eax
c00176b4:	a1 c8 02 03 c0       	mov    eax,ds:0xc00302c8
c00176b9:	85 c0                	test   eax,eax
c00176bb:	75 19                	jne    c00176d6 <scanMADT()+0x7e>
c00176bd:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00176c2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176c8:	83 e2 fb             	and    edx,0xfffffffb
c00176cb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176d1:	e9 ea 03 00 00       	jmp    c0017ac0 <scanMADT()+0x468>
c00176d6:	a1 c8 02 03 c0       	mov    eax,ds:0xc00302c8
c00176db:	83 ec 0c             	sub    esp,0xc
c00176de:	50                   	push   eax
c00176df:	e8 61 fb ff ff       	call   c0017245 <loadACPITables(unsigned char*)>
c00176e4:	83 c4 10             	add    esp,0x10
c00176e7:	a1 c8 02 03 c0       	mov    eax,ds:0xc00302c8
c00176ec:	83 ec 08             	sub    esp,0x8
c00176ef:	68 48 b2 02 c0       	push   0xc002b248
c00176f4:	50                   	push   eax
c00176f5:	e8 ec fe ff ff       	call   c00175e6 <findDataTable(unsigned char*, char*)>
c00176fa:	83 c4 10             	add    esp,0x10
c00176fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017701:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017706:	75 19                	jne    c0017721 <scanMADT()+0xc9>
c0017708:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001770d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017713:	83 e2 fe             	and    edx,0xfffffffe
c0017716:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001771c:	e9 9f 03 00 00       	jmp    c0017ac0 <scanMADT()+0x468>
c0017721:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017729:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001772d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017730:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017734:	0f 87 86 03 00 00    	ja     c0017ac0 <scanMADT()+0x468>
c001773a:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017742:	0f 87 78 03 00 00    	ja     c0017ac0 <scanMADT()+0x468>
c0017748:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001774c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017750:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017754:	8d 50 01             	lea    edx,[eax+0x1]
c0017757:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001775b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001775f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017763:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017767:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001776b:	8d 50 01             	lea    edx,[eax+0x1]
c001776e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017772:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017776:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001777a:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001777e:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017783:	0f 86 36 03 00 00    	jbe    c0017abf <scanMADT()+0x467>
c0017789:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001778e:	75 57                	jne    c00177e7 <scanMADT()+0x18f>
c0017790:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017794:	8d 50 01             	lea    edx,[eax+0x1]
c0017797:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001779b:	8a 15 c0 04 03 c0    	mov    dl,BYTE PTR ds:0xc00304c0
c00177a1:	0f b6 d2             	movzx  edx,dl
c00177a4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177a8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177ac:	88 82 00 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfb00],al
c00177b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177b6:	8d 50 01             	lea    edx,[eax+0x1]
c00177b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177bd:	8a 15 c0 04 03 c0    	mov    dl,BYTE PTR ds:0xc00304c0
c00177c3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00177c6:	88 0d c0 04 03 c0    	mov    BYTE PTR ds:0xc00304c0,cl
c00177cc:	0f b6 d2             	movzx  edx,dl
c00177cf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177d3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177d7:	88 82 e0 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb20],al
c00177dd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177e2:	e9 c1 02 00 00       	jmp    c0017aa8 <scanMADT()+0x450>
c00177e7:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00177ec:	0f 85 14 01 00 00    	jne    c0017906 <scanMADT()+0x2ae>
c00177f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177f6:	8d 50 01             	lea    edx,[eax+0x1]
c00177f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177fd:	8a 15 80 03 03 c0    	mov    dl,BYTE PTR ds:0xc0030380
c0017803:	0f b6 d2             	movzx  edx,dl
c0017806:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001780a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001780e:	88 82 a0 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfc60],al
c0017814:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017818:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001781c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017820:	01 d0                	add    eax,edx
c0017822:	83 c0 2c             	add    eax,0x2c
c0017825:	8a 00                	mov    al,BYTE PTR [eax]
c0017827:	0f b6 d0             	movzx  edx,al
c001782a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001782e:	8d 48 01             	lea    ecx,[eax+0x1]
c0017831:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017835:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017839:	0f b6 c0             	movzx  eax,al
c001783c:	c1 e0 08             	shl    eax,0x8
c001783f:	89 d1                	mov    ecx,edx
c0017841:	09 c1                	or     ecx,eax
c0017843:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017847:	8d 50 02             	lea    edx,[eax+0x2]
c001784a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001784e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017852:	0f b6 c0             	movzx  eax,al
c0017855:	c1 e0 10             	shl    eax,0x10
c0017858:	09 c1                	or     ecx,eax
c001785a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001785e:	8d 50 03             	lea    edx,[eax+0x3]
c0017861:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017865:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017869:	0f b6 c0             	movzx  eax,al
c001786c:	c1 e0 18             	shl    eax,0x18
c001786f:	09 c1                	or     ecx,eax
c0017871:	89 ca                	mov    edx,ecx
c0017873:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c0017878:	0f b6 c0             	movzx  eax,al
c001787b:	89 14 85 c0 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc40],edx
c0017882:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017887:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001788b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001788f:	01 d0                	add    eax,edx
c0017891:	83 c0 2c             	add    eax,0x2c
c0017894:	8a 00                	mov    al,BYTE PTR [eax]
c0017896:	0f b6 d0             	movzx  edx,al
c0017899:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001789d:	8d 48 01             	lea    ecx,[eax+0x1]
c00178a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178a4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00178a8:	0f b6 c0             	movzx  eax,al
c00178ab:	c1 e0 08             	shl    eax,0x8
c00178ae:	89 d1                	mov    ecx,edx
c00178b0:	09 c1                	or     ecx,eax
c00178b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178b6:	8d 50 02             	lea    edx,[eax+0x2]
c00178b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178bd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178c1:	0f b6 c0             	movzx  eax,al
c00178c4:	c1 e0 10             	shl    eax,0x10
c00178c7:	09 c1                	or     ecx,eax
c00178c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178cd:	8d 50 03             	lea    edx,[eax+0x3]
c00178d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178d4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178d8:	0f b6 c0             	movzx  eax,al
c00178db:	c1 e0 18             	shl    eax,0x18
c00178de:	09 c1                	or     ecx,eax
c00178e0:	89 ca                	mov    edx,ecx
c00178e2:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c00178e7:	0f b6 c0             	movzx  eax,al
c00178ea:	89 14 85 40 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfbc0],edx
c00178f1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178f6:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c00178fb:	40                   	inc    eax
c00178fc:	a2 80 03 03 c0       	mov    ds:0xc0030380,al
c0017901:	e9 a2 01 00 00       	jmp    c0017aa8 <scanMADT()+0x450>
c0017906:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001790b:	0f 85 e9 00 00 00    	jne    c00179fa <scanMADT()+0x3a2>
c0017911:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017915:	8d 50 01             	lea    edx,[eax+0x1]
c0017918:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001791c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017920:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017924:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017928:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001792c:	8d 50 01             	lea    edx,[eax+0x1]
c001792f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017933:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017937:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001793b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001793f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017943:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017947:	01 d0                	add    eax,edx
c0017949:	83 c0 2c             	add    eax,0x2c
c001794c:	8a 00                	mov    al,BYTE PTR [eax]
c001794e:	0f b6 d0             	movzx  edx,al
c0017951:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017955:	8d 48 01             	lea    ecx,[eax+0x1]
c0017958:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001795c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017960:	0f b6 c0             	movzx  eax,al
c0017963:	c1 e0 08             	shl    eax,0x8
c0017966:	89 d1                	mov    ecx,edx
c0017968:	09 c1                	or     ecx,eax
c001796a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001796e:	8d 50 02             	lea    edx,[eax+0x2]
c0017971:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017975:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017979:	0f b6 c0             	movzx  eax,al
c001797c:	c1 e0 10             	shl    eax,0x10
c001797f:	09 c1                	or     ecx,eax
c0017981:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017985:	8d 50 03             	lea    edx,[eax+0x3]
c0017988:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001798c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017990:	0f b6 c0             	movzx  eax,al
c0017993:	c1 e0 18             	shl    eax,0x18
c0017996:	09 c8                	or     eax,ecx
c0017998:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001799c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00179a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179a9:	01 d0                	add    eax,edx
c00179ab:	83 c0 2c             	add    eax,0x2c
c00179ae:	8a 00                	mov    al,BYTE PTR [eax]
c00179b0:	0f b6 c0             	movzx  eax,al
c00179b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00179b7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00179ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179be:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00179c2:	0f b6 d2             	movzx  edx,dl
c00179c5:	c1 e2 08             	shl    edx,0x8
c00179c8:	09 d0                	or     eax,edx
c00179ca:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00179cf:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00179d4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00179d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179dd:	88 90 60 cc 02 c0    	mov    BYTE PTR [eax-0x3ffd33a0],dl
c00179e3:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00179e8:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00179ed:	66 89 84 12 60 03 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfca0],ax
c00179f5:	e9 ae 00 00 00       	jmp    c0017aa8 <scanMADT()+0x450>
c00179fa:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00179ff:	0f 85 97 00 00 00    	jne    c0017a9c <scanMADT()+0x444>
c0017a05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a09:	8d 50 01             	lea    edx,[eax+0x1]
c0017a0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a14:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a18:	0f b6 c0             	movzx  eax,al
c0017a1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a27:	01 d0                	add    eax,edx
c0017a29:	83 c0 2c             	add    eax,0x2c
c0017a2c:	8a 00                	mov    al,BYTE PTR [eax]
c0017a2e:	0f b6 d0             	movzx  edx,al
c0017a31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a35:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a3c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a40:	0f b6 c0             	movzx  eax,al
c0017a43:	c1 e0 08             	shl    eax,0x8
c0017a46:	09 d0                	or     eax,edx
c0017a48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a4c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a55:	8d 50 01             	lea    edx,[eax+0x1]
c0017a58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a5c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a60:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a64:	0f b6 c0             	movzx  eax,al
c0017a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a6f:	c1 e0 08             	shl    eax,0x8
c0017a72:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017a76:	89 c1                	mov    ecx,eax
c0017a78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a7c:	c1 e0 18             	shl    eax,0x18
c0017a7f:	89 c3                	mov    ebx,eax
c0017a81:	a1 d0 02 03 c0       	mov    eax,ds:0xc00302d0
c0017a86:	8d 50 01             	lea    edx,[eax+0x1]
c0017a89:	89 15 d0 02 03 c0    	mov    DWORD PTR ds:0xc00302d0,edx
c0017a8f:	09 d9                	or     ecx,ebx
c0017a91:	89 ca                	mov    edx,ecx
c0017a93:	89 14 85 e0 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd20],edx
c0017a9a:	eb 0c                	jmp    c0017aa8 <scanMADT()+0x450>
c0017a9c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017aa1:	75 05                	jne    c0017aa8 <scanMADT()+0x450>
c0017aa3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017aa8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017aad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ab1:	01 d0                	add    eax,edx
c0017ab3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017ab7:	e9 6d fc ff ff       	jmp    c0017729 <scanMADT()+0xd1>
c0017abc:	90                   	nop
c0017abd:	eb 01                	jmp    c0017ac0 <scanMADT()+0x468>
c0017abf:	90                   	nop
c0017ac0:	83 c4 38             	add    esp,0x38
c0017ac3:	5b                   	pop    ebx
c0017ac4:	c3                   	ret    
c0017ac5:	90                   	nop

c0017ac6 <ACPI::ACPI()>:
c0017ac6:	83 ec 0c             	sub    esp,0xc
c0017ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017acd:	83 ec 08             	sub    esp,0x8
c0017ad0:	68 4d b2 02 c0       	push   0xc002b24d
c0017ad5:	50                   	push   eax
c0017ad6:	e8 57 c2 ff ff       	call   c0013d32 <Device::Device(char const*)>
c0017adb:	83 c4 10             	add    esp,0x10
c0017ade:	ba a8 b3 02 c0       	mov    edx,0xc002b3a8
c0017ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ae7:	89 10                	mov    DWORD PTR [eax],edx
c0017ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aed:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017af8:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b06:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017b10:	e8 43 fb ff ff       	call   c0017658 <scanMADT()>
c0017b15:	90                   	nop
c0017b16:	83 c4 0c             	add    esp,0xc
c0017b19:	c3                   	ret    

c0017b1a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017b1a:	83 ec 2c             	sub    esp,0x2c
c0017b1d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017b21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b25:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017b29:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017b2d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017b32:	88 d0                	mov    al,dl
c0017b34:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b38:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b3d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017b45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b49:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b4f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017b53:	0f 8d 97 00 00 00    	jge    c0017bf0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017b59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b61:	83 c2 2a             	add    edx,0x2a
c0017b64:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017b68:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017b6d:	75 78                	jne    c0017be7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b77:	83 c2 2a             	add    edx,0x2a
c0017b7a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017b7e:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017b82:	75 63                	jne    c0017be7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b84:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b89:	74 3a                	je     c0017bc5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017b8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b93:	83 c2 2a             	add    edx,0x2a
c0017b96:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017b9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ba1:	39 c2                	cmp    edx,eax
c0017ba3:	74 10                	je     c0017bb5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017ba5:	83 ec 0c             	sub    esp,0xc
c0017ba8:	68 c8 b1 02 c0       	push   0xc002b1c8
c0017bad:	e8 af 22 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0017bb2:	83 c4 10             	add    esp,0x10
c0017bb5:	83 ec 0c             	sub    esp,0xc
c0017bb8:	68 52 b2 02 c0       	push   0xc002b252
c0017bbd:	e8 9f 22 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0017bc2:	83 c4 10             	add    esp,0x10
c0017bc5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017bc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bcd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bd1:	83 c2 2a             	add    edx,0x2a
c0017bd4:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017bd8:	8b 02                	mov    eax,DWORD PTR [edx]
c0017bda:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017bdd:	89 01                	mov    DWORD PTR [ecx],eax
c0017bdf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017be2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017be7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017beb:	e9 55 ff ff ff       	jmp    c0017b45 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017bf0:	90                   	nop
c0017bf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bf5:	83 c4 2c             	add    esp,0x2c
c0017bf8:	c2 04 00             	ret    0x4
c0017bfb:	90                   	nop

c0017bfc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017bfc:	83 ec 1c             	sub    esp,0x1c
c0017bff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c03:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c0b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017c10:	88 c8                	mov    al,cl
c0017c12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017c16:	88 d0                	mov    al,dl
c0017c18:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c20:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c2a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c2d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017c31:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c39:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c3f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c43:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017c46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c4a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017c4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c53:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c59:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017c5d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c64:	83 c2 2a             	add    edx,0x2a
c0017c67:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c6f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c79:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c7c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c80:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017c84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c88:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c8e:	8d 50 01             	lea    edx,[eax+0x1]
c0017c91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c95:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017c9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c9f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ca5:	3d 00 02 00 00       	cmp    eax,0x200
c0017caa:	75 10                	jne    c0017cbc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017cac:	83 ec 0c             	sub    esp,0xc
c0017caf:	68 61 b2 02 c0       	push   0xc002b261
c0017cb4:	e8 a8 21 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0017cb9:	83 c4 10             	add    esp,0x10
c0017cbc:	90                   	nop
c0017cbd:	83 c4 1c             	add    esp,0x1c
c0017cc0:	c3                   	ret    
c0017cc1:	90                   	nop

c0017cc2 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017cc2:	b8 00 00 00 00       	mov    eax,0x0
c0017cc7:	c3                   	ret    

c0017cc8 <ACPI::detectPCI()>:
c0017cc8:	53                   	push   ebx
c0017cc9:	83 ec 28             	sub    esp,0x28
c0017ccc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017cd1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017cd6:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0017cdb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ce1:	83 e0 04             	and    eax,0x4
c0017ce4:	84 c0                	test   al,al
c0017ce6:	74 2b                	je     c0017d13 <ACPI::detectPCI()+0x4b>
c0017ce8:	a1 c8 02 03 c0       	mov    eax,ds:0xc00302c8
c0017ced:	83 ec 08             	sub    esp,0x8
c0017cf0:	68 7e b2 02 c0       	push   0xc002b27e
c0017cf5:	50                   	push   eax
c0017cf6:	e8 eb f8 ff ff       	call   c00175e6 <findDataTable(unsigned char*, char*)>
c0017cfb:	83 c4 10             	add    esp,0x10
c0017cfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d02:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017d07:	74 0a                	je     c0017d13 <ACPI::detectPCI()+0x4b>
c0017d09:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d0e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d13:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017d1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d1f:	8a 00                	mov    al,BYTE PTR [eax]
c0017d21:	3c 01                	cmp    al,0x1
c0017d23:	75 0c                	jne    c0017d31 <ACPI::detectPCI()+0x69>
c0017d25:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d2a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d2f:	eb 26                	jmp    c0017d57 <ACPI::detectPCI()+0x8f>
c0017d31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d35:	8a 00                	mov    al,BYTE PTR [eax]
c0017d37:	3c 02                	cmp    al,0x2
c0017d39:	75 1c                	jne    c0017d57 <ACPI::detectPCI()+0x8f>
c0017d3b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d40:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d45:	74 10                	je     c0017d57 <ACPI::detectPCI()+0x8f>
c0017d47:	83 ec 0c             	sub    esp,0xc
c0017d4a:	68 f8 b1 02 c0       	push   0xc002b1f8
c0017d4f:	e8 0d 21 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0017d54:	83 c4 10             	add    esp,0x10
c0017d57:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017d5b:	83 f0 01             	xor    eax,0x1
c0017d5e:	84 c0                	test   al,al
c0017d60:	74 3f                	je     c0017da1 <ACPI::detectPCI()+0xd9>
c0017d62:	e8 e9 83 fe ff       	call   c0000150 <manualPCIProbe>
c0017d67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d6b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d70:	75 0c                	jne    c0017d7e <ACPI::detectPCI()+0xb6>
c0017d72:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d77:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d7c:	eb 23                	jmp    c0017da1 <ACPI::detectPCI()+0xd9>
c0017d7e:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017d83:	75 1c                	jne    c0017da1 <ACPI::detectPCI()+0xd9>
c0017d85:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d8a:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d8f:	74 10                	je     c0017da1 <ACPI::detectPCI()+0xd9>
c0017d91:	83 ec 0c             	sub    esp,0xc
c0017d94:	68 f8 b1 02 c0       	push   0xc002b1f8
c0017d99:	e8 c3 20 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0017d9e:	83 c4 10             	add    esp,0x10
c0017da1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017da6:	74 7e                	je     c0017e26 <ACPI::detectPCI()+0x15e>
c0017da8:	83 ec 0c             	sub    esp,0xc
c0017dab:	68 83 b2 02 c0       	push   0xc002b283
c0017db0:	e8 3e 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017db5:	83 c4 10             	add    esp,0x10
c0017db8:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017dc0:	83 ec 0c             	sub    esp,0xc
c0017dc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017dc7:	e8 cd 77 ff ff       	call   c000f599 <malloc>
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	89 c3                	mov    ebx,eax
c0017dd1:	83 ec 0c             	sub    esp,0xc
c0017dd4:	53                   	push   ebx
c0017dd5:	e8 b0 a5 00 00       	call   c002238a <PCI::PCI()>
c0017dda:	83 c4 10             	add    esp,0x10
c0017ddd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017de1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017de5:	83 ec 08             	sub    esp,0x8
c0017de8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dec:	50                   	push   eax
c0017ded:	e8 3c bd ff ff       	call   c0013b2e <Device::addChild(Device*)>
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dfb:	83 c0 08             	add    eax,0x8
c0017dfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e00:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017e05:	74 07                	je     c0017e0e <ACPI::detectPCI()+0x146>
c0017e07:	ba 01 00 00 00       	mov    edx,0x1
c0017e0c:	eb 05                	jmp    c0017e13 <ACPI::detectPCI()+0x14b>
c0017e0e:	ba 02 00 00 00       	mov    edx,0x2
c0017e13:	6a 00                	push   0x0
c0017e15:	6a 00                	push   0x0
c0017e17:	52                   	push   edx
c0017e18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e1c:	ff d0                	call   eax
c0017e1e:	83 c4 10             	add    esp,0x10
c0017e21:	e9 9e 00 00 00       	jmp    c0017ec4 <ACPI::detectPCI()+0x1fc>
c0017e26:	83 ec 0c             	sub    esp,0xc
c0017e29:	68 9b b2 02 c0       	push   0xc002b29b
c0017e2e:	e8 c2 a8 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0017e33:	83 c4 10             	add    esp,0x10
c0017e36:	83 ec 0c             	sub    esp,0xc
c0017e39:	68 a6 b2 02 c0       	push   0xc002b2a6
c0017e3e:	e8 b0 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e43:	83 c4 10             	add    esp,0x10
c0017e46:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017e4d:	83 ec 0c             	sub    esp,0xc
c0017e50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e54:	e8 40 77 ff ff       	call   c000f599 <malloc>
c0017e59:	83 c4 10             	add    esp,0x10
c0017e5c:	89 c3                	mov    ebx,eax
c0017e5e:	83 ec 0c             	sub    esp,0xc
c0017e61:	53                   	push   ebx
c0017e62:	e8 8d b0 00 00       	call   c0022ef4 <IDE::IDE()>
c0017e67:	83 c4 10             	add    esp,0x10
c0017e6a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017e6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e72:	83 ec 08             	sub    esp,0x8
c0017e75:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e79:	50                   	push   eax
c0017e7a:	e8 af bc ff ff       	call   c0013b2e <Device::addChild(Device*)>
c0017e7f:	83 c4 10             	add    esp,0x10
c0017e82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e86:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017e90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e94:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017e9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ea1:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017eaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eae:	8b 00                	mov    eax,DWORD PTR [eax]
c0017eb0:	83 c0 08             	add    eax,0x8
c0017eb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0017eb5:	6a 00                	push   0x0
c0017eb7:	6a 00                	push   0x0
c0017eb9:	6a 00                	push   0x0
c0017ebb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ebf:	ff d0                	call   eax
c0017ec1:	83 c4 10             	add    esp,0x10
c0017ec4:	90                   	nop
c0017ec5:	83 c4 28             	add    esp,0x28
c0017ec8:	5b                   	pop    ebx
c0017ec9:	c3                   	ret    

c0017eca <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017eca:	83 ec 1c             	sub    esp,0x1c
c0017ecd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ed1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017ed4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ed8:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0017edd:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ee2:	83 ec 08             	sub    esp,0x8
c0017ee5:	52                   	push   edx
c0017ee6:	50                   	push   eax
c0017ee7:	e8 c4 6c ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017eec:	83 c4 10             	add    esp,0x10
c0017eef:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017ef3:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0017ef8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017efd:	83 ec 04             	sub    esp,0x4
c0017f00:	6a 01                	push   0x1
c0017f02:	52                   	push   edx
c0017f03:	50                   	push   eax
c0017f04:	e8 d9 6d ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f09:	83 c4 10             	add    esp,0x10
c0017f0c:	90                   	nop
c0017f0d:	83 c4 1c             	add    esp,0x1c
c0017f10:	c3                   	ret    
c0017f11:	90                   	nop

c0017f12 <ACPI::sleep()>:
c0017f12:	83 ec 0c             	sub    esp,0xc
c0017f15:	a1 a0 00 03 c0       	mov    eax,ds:0xc00300a0
c0017f1a:	85 c0                	test   eax,eax
c0017f1c:	74 07                	je     c0017f25 <ACPI::sleep()+0x13>
c0017f1e:	a1 a0 00 03 c0       	mov    eax,ds:0xc00300a0
c0017f23:	ff d0                	call   eax
c0017f25:	90                   	nop
c0017f26:	83 c4 0c             	add    esp,0xc
c0017f29:	c3                   	ret    

c0017f2a <ACPI::open(int, int, void*)>:
c0017f2a:	57                   	push   edi
c0017f2b:	56                   	push   esi
c0017f2c:	53                   	push   ebx
c0017f2d:	81 ec 60 01 00 00    	sub    esp,0x160
c0017f33:	83 ec 0c             	sub    esp,0xc
c0017f36:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017f3d:	e8 86 fd ff ff       	call   c0017cc8 <ACPI::detectPCI()>
c0017f42:	83 c4 10             	add    esp,0x10
c0017f45:	83 ec 0c             	sub    esp,0xc
c0017f48:	68 20 b2 02 c0       	push   0xc002b220
c0017f4d:	e8 a1 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f52:	83 c4 10             	add    esp,0x10
c0017f55:	83 ec 0c             	sub    esp,0xc
c0017f58:	68 bb b2 02 c0       	push   0xc002b2bb
c0017f5d:	e8 52 46 00 00       	call   c001c5b4 <Thr::loadKernelSymbolTable(char const*)>
c0017f62:	83 c4 10             	add    esp,0x10
c0017f65:	83 ec 0c             	sub    esp,0xc
c0017f68:	68 d9 b2 02 c0       	push   0xc002b2d9
c0017f6d:	e8 81 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f72:	83 c4 10             	add    esp,0x10
c0017f75:	83 ec 04             	sub    esp,0x4
c0017f78:	6a 0c                	push   0xc
c0017f7a:	68 f4 b2 02 c0       	push   0xc002b2f4
c0017f7f:	68 05 b3 02 c0       	push   0xc002b305
c0017f84:	e8 94 2c 00 00       	call   c001ac1d <Reg::readIntWithDefault(char*, char*, int)>
c0017f89:	83 c4 10             	add    esp,0x10
c0017f8c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017f93:	83 ec 0c             	sub    esp,0xc
c0017f96:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017f9d:	e8 85 94 ff ff       	call   c0011427 <Virt::setupPageSwapping(int)>
c0017fa2:	83 c4 10             	add    esp,0x10
c0017fa5:	83 ec 0c             	sub    esp,0xc
c0017fa8:	68 35 9e 02 c0       	push   0xc0029e35
c0017fad:	e8 41 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017fb2:	83 c4 10             	add    esp,0x10
c0017fb5:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c0017fbb:	83 ec 08             	sub    esp,0x8
c0017fbe:	6a 01                	push   0x1
c0017fc0:	68 0c b3 02 c0       	push   0xc002b30c
c0017fc5:	e8 61 50 00 00       	call   c001d02b <Thr::loadDLL(char const*, bool)>
c0017fca:	83 c4 10             	add    esp,0x10
c0017fcd:	83 ec 08             	sub    esp,0x8
c0017fd0:	53                   	push   ebx
c0017fd1:	50                   	push   eax
c0017fd2:	e8 85 52 00 00       	call   c001d25c <Thr::executeDLL(unsigned long, void*)>
c0017fd7:	83 c4 10             	add    esp,0x10
c0017fda:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017fe1:	83 ec 08             	sub    esp,0x8
c0017fe4:	6a 12                	push   0x12
c0017fe6:	50                   	push   eax
c0017fe7:	e8 c6 be ff ff       	call   c0013eb2 <getDevicesOfType(DeviceType)>
c0017fec:	83 c4 0c             	add    esp,0xc
c0017fef:	83 ec 0c             	sub    esp,0xc
c0017ff2:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017ff9:	50                   	push   eax
c0017ffa:	e8 85 09 01 00       	call   c0028984 <LinkedList<Device>::isEmpty()>
c0017fff:	83 c4 10             	add    esp,0x10
c0018002:	83 f0 01             	xor    eax,0x1
c0018005:	84 c0                	test   al,al
c0018007:	0f 84 43 01 00 00    	je     c0018150 <ACPI::open(int, int, void*)+0x226>
c001800d:	83 ec 0c             	sub    esp,0xc
c0018010:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018017:	50                   	push   eax
c0018018:	e8 83 09 01 00       	call   c00289a0 <LinkedList<Device>::getFirstElement()>
c001801d:	83 c4 10             	add    esp,0x10
c0018020:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018027:	83 ec 0c             	sub    esp,0xc
c001802a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018031:	50                   	push   eax
c0018032:	e8 71 09 01 00       	call   c00289a8 <LinkedList<Device>::removeFirst()>
c0018037:	83 c4 10             	add    esp,0x10
c001803a:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018041:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018048:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c001804f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018053:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018059:	ba 09 00 00 00       	mov    edx,0x9
c001805e:	fc                   	cld    
c001805f:	89 c7                	mov    edi,eax
c0018061:	89 de                	mov    esi,ebx
c0018063:	89 d1                	mov    ecx,edx
c0018065:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018067:	83 ec 08             	sub    esp,0x8
c001806a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001806e:	50                   	push   eax
c001806f:	83 ec 24             	sub    esp,0x24
c0018072:	89 e0                	mov    eax,esp
c0018074:	89 c3                	mov    ebx,eax
c0018076:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001807a:	ba 09 00 00 00       	mov    edx,0x9
c001807f:	89 df                	mov    edi,ebx
c0018081:	89 c6                	mov    esi,eax
c0018083:	89 d1                	mov    ecx,edx
c0018085:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018087:	e8 dc a7 00 00       	call   c0022868 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001808c:	83 c4 30             	add    esp,0x30
c001808f:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018096:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001809e:	0f 84 4b ff ff ff    	je     c0017fef <ACPI::open(int, int, void*)+0xc5>
c00180a4:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00180af:	83 ec 0c             	sub    esp,0xc
c00180b2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00180b9:	e8 db 74 ff ff       	call   c000f599 <malloc>
c00180be:	83 c4 10             	add    esp,0x10
c00180c1:	89 c3                	mov    ebx,eax
c00180c3:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00180c8:	83 ec 04             	sub    esp,0x4
c00180cb:	50                   	push   eax
c00180cc:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180d3:	53                   	push   ebx
c00180d4:	e8 7b ab ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00180e3:	83 ec 0c             	sub    esp,0xc
c00180e6:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180ed:	e8 34 ae ff ff       	call   c0012f26 <File::exists()>
c00180f2:	83 c4 10             	add    esp,0x10
c00180f5:	84 c0                	test   al,al
c00180f7:	74 27                	je     c0018120 <ACPI::open(int, int, void*)+0x1f6>
c00180f9:	83 ec 08             	sub    esp,0x8
c00180fc:	6a 01                	push   0x1
c00180fe:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018105:	e8 21 4f 00 00       	call   c001d02b <Thr::loadDLL(char const*, bool)>
c001810a:	83 c4 10             	add    esp,0x10
c001810d:	83 ec 08             	sub    esp,0x8
c0018110:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018117:	50                   	push   eax
c0018118:	e8 3f 51 00 00       	call   c001d25c <Thr::executeDLL(unsigned long, void*)>
c001811d:	83 c4 10             	add    esp,0x10
c0018120:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018128:	0f 84 c1 fe ff ff    	je     c0017fef <ACPI::open(int, int, void*)+0xc5>
c001812e:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018135:	8b 00                	mov    eax,DWORD PTR [eax]
c0018137:	83 c0 08             	add    eax,0x8
c001813a:	8b 00                	mov    eax,DWORD PTR [eax]
c001813c:	83 ec 0c             	sub    esp,0xc
c001813f:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018146:	ff d0                	call   eax
c0018148:	83 c4 10             	add    esp,0x10
c001814b:	e9 9f fe ff ff       	jmp    c0017fef <ACPI::open(int, int, void*)+0xc5>
c0018150:	83 ec 0c             	sub    esp,0xc
c0018153:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001815a:	50                   	push   eax
c001815b:	e8 22 08 01 00       	call   c0028982 <LinkedList<Device>::~LinkedList()>
c0018160:	83 c4 10             	add    esp,0x10
c0018163:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c0018169:	83 ec 08             	sub    esp,0x8
c001816c:	6a 01                	push   0x1
c001816e:	68 27 b3 02 c0       	push   0xc002b327
c0018173:	e8 b3 4e 00 00       	call   c001d02b <Thr::loadDLL(char const*, bool)>
c0018178:	83 c4 10             	add    esp,0x10
c001817b:	83 ec 08             	sub    esp,0x8
c001817e:	53                   	push   ebx
c001817f:	50                   	push   eax
c0018180:	e8 d7 50 00 00       	call   c001d25c <Thr::executeDLL(unsigned long, void*)>
c0018185:	83 c4 10             	add    esp,0x10
c0018188:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c001818e:	83 ec 08             	sub    esp,0x8
c0018191:	6a 01                	push   0x1
c0018193:	68 44 b3 02 c0       	push   0xc002b344
c0018198:	e8 8e 4e 00 00       	call   c001d02b <Thr::loadDLL(char const*, bool)>
c001819d:	83 c4 10             	add    esp,0x10
c00181a0:	83 ec 08             	sub    esp,0x8
c00181a3:	53                   	push   ebx
c00181a4:	50                   	push   eax
c00181a5:	e8 b2 50 00 00       	call   c001d25c <Thr::executeDLL(unsigned long, void*)>
c00181aa:	83 c4 10             	add    esp,0x10
c00181ad:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00181b2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00181b8:	83 e0 04             	and    eax,0x4
c00181bb:	84 c0                	test   al,al
c00181bd:	0f 84 0d 01 00 00    	je     c00182d0 <ACPI::open(int, int, void*)+0x3a6>
c00181c3:	83 ec 0c             	sub    esp,0xc
c00181c6:	68 61 b3 02 c0       	push   0xc002b361
c00181cb:	e8 23 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00181d0:	83 c4 10             	add    esp,0x10
c00181d3:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00181de:	83 ec 0c             	sub    esp,0xc
c00181e1:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00181e8:	e8 ac 73 ff ff       	call   c000f599 <malloc>
c00181ed:	83 c4 10             	add    esp,0x10
c00181f0:	89 c3                	mov    ebx,eax
c00181f2:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00181f7:	83 ec 04             	sub    esp,0x4
c00181fa:	50                   	push   eax
c00181fb:	68 7e b3 02 c0       	push   0xc002b37e
c0018200:	53                   	push   ebx
c0018201:	e8 4e aa ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c0018206:	83 c4 10             	add    esp,0x10
c0018209:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018210:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018218:	74 1a                	je     c0018234 <ACPI::open(int, int, void*)+0x30a>
c001821a:	83 ec 0c             	sub    esp,0xc
c001821d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018224:	e8 fd ac ff ff       	call   c0012f26 <File::exists()>
c0018229:	83 c4 10             	add    esp,0x10
c001822c:	84 c0                	test   al,al
c001822e:	74 04                	je     c0018234 <ACPI::open(int, int, void*)+0x30a>
c0018230:	b0 01                	mov    al,0x1
c0018232:	eb 02                	jmp    c0018236 <ACPI::open(int, int, void*)+0x30c>
c0018234:	b0 00                	mov    al,0x0
c0018236:	84 c0                	test   al,al
c0018238:	74 25                	je     c001825f <ACPI::open(int, int, void*)+0x335>
c001823a:	83 ec 08             	sub    esp,0x8
c001823d:	6a 01                	push   0x1
c001823f:	68 7e b3 02 c0       	push   0xc002b37e
c0018244:	e8 e2 4d 00 00       	call   c001d02b <Thr::loadDLL(char const*, bool)>
c0018249:	83 c4 10             	add    esp,0x10
c001824c:	83 ec 08             	sub    esp,0x8
c001824f:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018256:	50                   	push   eax
c0018257:	e8 00 50 00 00       	call   c001d25c <Thr::executeDLL(unsigned long, void*)>
c001825c:	83 c4 10             	add    esp,0x10
c001825f:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018267:	74 27                	je     c0018290 <ACPI::open(int, int, void*)+0x366>
c0018269:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018271:	74 1d                	je     c0018290 <ACPI::open(int, int, void*)+0x366>
c0018273:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001827a:	8b 00                	mov    eax,DWORD PTR [eax]
c001827c:	83 c0 08             	add    eax,0x8
c001827f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018281:	83 ec 0c             	sub    esp,0xc
c0018284:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001828b:	ff d0                	call   eax
c001828d:	83 c4 10             	add    esp,0x10
c0018290:	a1 c8 02 03 c0       	mov    eax,ds:0xc00302c8
c0018295:	83 ec 08             	sub    esp,0x8
c0018298:	68 9b b3 02 c0       	push   0xc002b39b
c001829d:	50                   	push   eax
c001829e:	e8 43 f3 ff ff       	call   c00175e6 <findDataTable(unsigned char*, char*)>
c00182a3:	83 c4 10             	add    esp,0x10
c00182a6:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00182ad:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00182b5:	74 19                	je     c00182d0 <ACPI::open(int, int, void*)+0x3a6>
c00182b7:	83 ec 08             	sub    esp,0x8
c00182ba:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00182c1:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00182c8:	e8 fd fb ff ff       	call   c0017eca <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00182cd:	83 c4 10             	add    esp,0x10
c00182d0:	b8 00 00 00 00       	mov    eax,0x0
c00182d5:	81 c4 60 01 00 00    	add    esp,0x160
c00182db:	5b                   	pop    ebx
c00182dc:	5e                   	pop    esi
c00182dd:	5f                   	pop    edi
c00182de:	c3                   	ret    
c00182df:	90                   	nop

c00182e0 <CPU::close(int, int, void*)>:
c00182e0:	31 c0                	xor    eax,eax
c00182e2:	c3                   	ret    
c00182e3:	90                   	nop

c00182e4 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00182e4:	55                   	push   ebp
c00182e5:	57                   	push   edi
c00182e6:	56                   	push   esi
c00182e7:	53                   	push   ebx
c00182e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00182ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182f0:	89 ce                	mov    esi,ecx
c00182f2:	89 d5                	mov    ebp,edx
c00182f4:	80 f9 04             	cmp    cl,0x4
c00182f7:	75 28                	jne    c0018321 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00182f9:	8d 42 f9             	lea    eax,[edx-0x7]
c00182fc:	3c 03                	cmp    al,0x3
c00182fe:	0f 86 63 01 00 00    	jbe    c0018467 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018304:	80 fa 03             	cmp    dl,0x3
c0018307:	0f 84 5a 01 00 00    	je     c0018467 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001830d:	8d 7a f2             	lea    edi,[edx-0xe]
c0018310:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c0018315:	89 fb                	mov    ebx,edi
c0018317:	80 fb 01             	cmp    bl,0x1
c001831a:	77 4e                	ja     c001836a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001831c:	e9 52 01 00 00       	jmp    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018321:	80 f9 05             	cmp    cl,0x5
c0018324:	75 4d                	jne    c0018373 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018326:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c001832b:	80 fa 03             	cmp    dl,0x3
c001832e:	0f 86 3f 01 00 00    	jbe    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018334:	8d 7a fa             	lea    edi,[edx-0x6]
c0018337:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c001833c:	89 fb                	mov    ebx,edi
c001833e:	80 fb 01             	cmp    bl,0x1
c0018341:	0f 86 2c 01 00 00    	jbe    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018347:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c001834c:	80 fa 08             	cmp    dl,0x8
c001834f:	0f 84 1e 01 00 00    	je     c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018355:	89 d7                	mov    edi,edx
c0018357:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c001835c:	83 e7 fb             	and    edi,0xfffffffb
c001835f:	89 fb                	mov    ebx,edi
c0018361:	80 fb 09             	cmp    bl,0x9
c0018364:	0f 84 09 01 00 00    	je     c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001836a:	31 c0                	xor    eax,eax
c001836c:	89 eb                	mov    ebx,ebp
c001836e:	0f b6 fb             	movzx  edi,bl
c0018371:	eb 30                	jmp    c00183a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018373:	31 c0                	xor    eax,eax
c0018375:	80 f9 06             	cmp    cl,0x6
c0018378:	75 f2                	jne    c001836c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001837a:	80 fa 0a             	cmp    dl,0xa
c001837d:	77 ed                	ja     c001836c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001837f:	bf de 05 00 00       	mov    edi,0x5de
c0018384:	0f a3 d7             	bt     edi,edx
c0018387:	73 e3                	jae    c001836c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018389:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c001838e:	e9 e0 00 00 00       	jmp    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018393:	39 c7                	cmp    edi,eax
c0018395:	0f 84 d3 00 00 00    	je     c001846e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001839b:	40                   	inc    eax
c001839c:	3d d0 00 00 00       	cmp    eax,0xd0
c00183a1:	74 09                	je     c00183ac <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00183a3:	89 f3                	mov    ebx,esi
c00183a5:	80 fb 0f             	cmp    bl,0xf
c00183a8:	75 f1                	jne    c001839b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00183aa:	eb e7                	jmp    c0018393 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00183ac:	80 f9 10             	cmp    cl,0x10
c00183af:	75 14                	jne    c00183c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00183b1:	8d 42 fc             	lea    eax,[edx-0x4]
c00183b4:	83 e0 fb             	and    eax,0xfffffffb
c00183b7:	3c 02                	cmp    al,0x2
c00183b9:	76 34                	jbe    c00183ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00183bb:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c00183c0:	80 fa 02             	cmp    dl,0x2
c00183c3:	eb 24                	jmp    c00183e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00183c5:	80 f9 11             	cmp    cl,0x11
c00183c8:	75 13                	jne    c00183dd <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00183ca:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c00183cf:	80 fa 03             	cmp    dl,0x3
c00183d2:	0f 85 9b 00 00 00    	jne    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183d8:	e9 91 00 00 00       	jmp    c001846e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183dd:	80 f9 12             	cmp    cl,0x12
c00183e0:	75 14                	jne    c00183f6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00183e2:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c00183e7:	fe ca                	dec    dl
c00183e9:	0f 85 84 00 00 00    	jne    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ef:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c00183f4:	eb 7d                	jmp    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183f6:	80 f9 14             	cmp    cl,0x14
c00183f9:	75 12                	jne    c001840d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00183fb:	4a                   	dec    edx
c00183fc:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c0018401:	80 fa 01             	cmp    dl,0x1
c0018404:	77 6d                	ja     c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018406:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c001840b:	eb 66                	jmp    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001840d:	80 f9 15             	cmp    cl,0x15
c0018410:	75 31                	jne    c0018443 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018412:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c0018417:	80 fa 01             	cmp    dl,0x1
c001841a:	74 57                	je     c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841c:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c0018421:	80 fa 13             	cmp    dl,0x13
c0018424:	76 0c                	jbe    c0018432 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018426:	80 fa 30             	cmp    dl,0x30
c0018429:	75 48                	jne    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001842b:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c0018430:	eb 41                	jmp    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018432:	b9 04 00 09 00       	mov    ecx,0x90004
c0018437:	0f a3 d1             	bt     ecx,edx
c001843a:	73 37                	jae    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001843c:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c0018441:	eb 30                	jmp    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018443:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c0018448:	80 f9 16             	cmp    cl,0x16
c001844b:	75 26                	jne    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844d:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c0018452:	84 d2                	test   dl,dl
c0018454:	74 1d                	je     c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018456:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c001845b:	80 fa 30             	cmp    dl,0x30
c001845e:	75 13                	jne    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018460:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c0018465:	eb 0c                	jmp    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018467:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c001846c:	eb 05                	jmp    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001846e:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c0018473:	5b                   	pop    ebx
c0018474:	5e                   	pop    esi
c0018475:	5f                   	pop    edi
c0018476:	5d                   	pop    ebp
c0018477:	c3                   	ret    

c0018478 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018478:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001847c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018480:	80 f9 04             	cmp    cl,0x4
c0018483:	75 6b                	jne    c00184f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018485:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c001848a:	80 fa 01             	cmp    dl,0x1
c001848d:	0f 86 92 02 00 00    	jbe    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018493:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c0018498:	80 fa 02             	cmp    dl,0x2
c001849b:	0f 84 84 02 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a1:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00184a6:	80 fa 03             	cmp    dl,0x3
c00184a9:	0f 84 76 02 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184af:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00184b4:	80 fa 04             	cmp    dl,0x4
c00184b7:	0f 84 68 02 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184bd:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c00184c2:	80 fa 05             	cmp    dl,0x5
c00184c5:	0f 84 5a 02 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184cb:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00184d0:	80 fa 07             	cmp    dl,0x7
c00184d3:	0f 84 4c 02 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d9:	83 ea 08             	sub    edx,0x8
c00184dc:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c00184e1:	80 fa 01             	cmp    dl,0x1
c00184e4:	0f 87 3b 02 00 00    	ja     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ea:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c00184ef:	c3                   	ret    
c00184f0:	80 f9 05             	cmp    cl,0x5
c00184f3:	75 45                	jne    c001853a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00184f5:	8d 4a ff             	lea    ecx,[edx-0x1]
c00184f8:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c00184fd:	80 f9 02             	cmp    cl,0x2
c0018500:	0f 86 1f 02 00 00    	jbe    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018506:	80 fa 04             	cmp    dl,0x4
c0018509:	0f 84 f3 01 00 00    	je     c0018702 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001850f:	80 fa 07             	cmp    dl,0x7
c0018512:	0f 84 0d 02 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018518:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c001851d:	80 fa 08             	cmp    dl,0x8
c0018520:	0f 84 ff 01 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018526:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c001852b:	80 fa 09             	cmp    dl,0x9
c001852e:	0f 85 f1 01 00 00    	jne    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018534:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c0018539:	c3                   	ret    
c001853a:	80 f9 06             	cmp    cl,0x6
c001853d:	0f 85 85 01 00 00    	jne    c00186c8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018543:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c0018548:	80 fa 01             	cmp    dl,0x1
c001854b:	0f 84 d4 01 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018551:	8d 42 fb             	lea    eax,[edx-0x5]
c0018554:	3c 01                	cmp    al,0x1
c0018556:	0f 86 ac 01 00 00    	jbe    c0018708 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001855c:	80 fa 03             	cmp    dl,0x3
c001855f:	0f 84 a3 01 00 00    	je     c0018708 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018565:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018568:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c001856d:	80 f9 01             	cmp    cl,0x1
c0018570:	0f 86 af 01 00 00    	jbe    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018576:	80 fa 09             	cmp    dl,0x9
c0018579:	0f 84 8f 01 00 00    	je     c001870e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001857f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018582:	80 f9 01             	cmp    cl,0x1
c0018585:	0f 86 9a 01 00 00    	jbe    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001858b:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018590:	80 fa 0d             	cmp    dl,0xd
c0018593:	0f 84 8c 01 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018599:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c001859e:	80 fa 0e             	cmp    dl,0xe
c00185a1:	0f 84 7e 01 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a7:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00185ac:	80 fa 0f             	cmp    dl,0xf
c00185af:	0f 84 70 01 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b5:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00185ba:	80 fa 15             	cmp    dl,0x15
c00185bd:	0f 84 62 01 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c3:	8d 4a ea             	lea    ecx,[edx-0x16]
c00185c6:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00185cb:	80 f9 01             	cmp    cl,0x1
c00185ce:	0f 86 51 01 00 00    	jbe    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d4:	80 fa 1a             	cmp    dl,0x1a
c00185d7:	0f 84 37 01 00 00    	je     c0018714 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00185dd:	80 fa 1c             	cmp    dl,0x1c
c00185e0:	0f 84 34 01 00 00    	je     c001871a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00185e6:	80 fa 1d             	cmp    dl,0x1d
c00185e9:	0f 84 36 01 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ef:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c00185f4:	80 fa 25             	cmp    dl,0x25
c00185f7:	0f 84 28 01 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185fd:	8d 4a da             	lea    ecx,[edx-0x26]
c0018600:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018605:	80 f9 01             	cmp    cl,0x1
c0018608:	0f 86 17 01 00 00    	jbe    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001860e:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c0018613:	80 fa 2a             	cmp    dl,0x2a
c0018616:	0f 84 09 01 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861c:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018621:	80 fa 2c             	cmp    dl,0x2c
c0018624:	0f 84 fb 00 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862a:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c001862f:	80 fa 2d             	cmp    dl,0x2d
c0018632:	0f 84 ed 00 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018638:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c001863d:	80 fa 2e             	cmp    dl,0x2e
c0018640:	0f 84 df 00 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018646:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c001864b:	80 fa 2f             	cmp    dl,0x2f
c001864e:	0f 84 d1 00 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018654:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018657:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c001865c:	80 f9 01             	cmp    cl,0x1
c001865f:	0f 86 c0 00 00 00    	jbe    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018665:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c001866a:	80 fa 37             	cmp    dl,0x37
c001866d:	0f 84 b2 00 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018673:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c0018678:	80 fa 3a             	cmp    dl,0x3a
c001867b:	0f 84 a4 00 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018681:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c0018686:	80 fa 3c             	cmp    dl,0x3c
c0018689:	0f 84 96 00 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868f:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c0018694:	80 fa 3d             	cmp    dl,0x3d
c0018697:	0f 84 88 00 00 00    	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869d:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00186a2:	80 fa 3e             	cmp    dl,0x3e
c00186a5:	74 7e                	je     c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a7:	8d 42 bb             	lea    eax,[edx-0x45]
c00186aa:	3c 01                	cmp    al,0x1
c00186ac:	76 72                	jbe    c0018720 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186ae:	80 fa 3f             	cmp    dl,0x3f
c00186b1:	74 6d                	je     c0018720 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186b3:	80 fa 4a             	cmp    dl,0x4a
c00186b6:	74 0a                	je     c00186c2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00186b8:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c00186bd:	80 fa 4d             	cmp    dl,0x4d
c00186c0:	75 63                	jne    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c2:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00186c7:	c3                   	ret    
c00186c8:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c00186cd:	80 f9 0b             	cmp    cl,0xb
c00186d0:	75 0a                	jne    c00186dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00186d2:	fe ca                	dec    dl
c00186d4:	75 4f                	jne    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d6:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c00186db:	c3                   	ret    
c00186dc:	80 f9 0f             	cmp    cl,0xf
c00186df:	75 44                	jne    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e1:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c00186e6:	80 fa 02             	cmp    dl,0x2
c00186e9:	76 3a                	jbe    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186eb:	8d 42 fd             	lea    eax,[edx-0x3]
c00186ee:	3c 01                	cmp    al,0x1
c00186f0:	76 0a                	jbe    c00186fc <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00186f2:	b8 21 b5 02 c0       	mov    eax,0xc002b521
c00186f7:	80 fa 06             	cmp    dl,0x6
c00186fa:	75 29                	jne    c0018725 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186fc:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c0018701:	c3                   	ret    
c0018702:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c0018707:	c3                   	ret    
c0018708:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c001870d:	c3                   	ret    
c001870e:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018713:	c3                   	ret    
c0018714:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018719:	c3                   	ret    
c001871a:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c001871f:	c3                   	ret    
c0018720:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c0018725:	c3                   	ret    

c0018726 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018726:	60                   	pusha  
c0018727:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001872f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018733:	9c                   	pushf  
c0018734:	fa                   	cli    
c0018735:	0f 09                	wbinvd 
c0018737:	0f 30                	wrmsr  
c0018739:	9d                   	popf   
c001873a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001873e:	89 02                	mov    DWORD PTR [edx],eax
c0018740:	61                   	popa   
c0018741:	c3                   	ret    

c0018742 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018742:	60                   	pusha  
c0018743:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018747:	9c                   	pushf  
c0018748:	fa                   	cli    
c0018749:	0f 09                	wbinvd 
c001874b:	31 c0                	xor    eax,eax
c001874d:	31 d2                	xor    edx,edx
c001874f:	0f 32                	rdmsr  
c0018751:	9d                   	popf   
c0018752:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018756:	89 02                	mov    DWORD PTR [edx],eax
c0018758:	61                   	popa   
c0018759:	c3                   	ret    

c001875a <CPU::AMD_K6_writeback(int, int, int)>:
c001875a:	56                   	push   esi
c001875b:	53                   	push   ebx
c001875c:	83 ec 10             	sub    esp,0x10
c001875f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018763:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018768:	75 5d                	jne    c00187c7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001876a:	83 f8 08             	cmp    eax,0x8
c001876d:	75 09                	jne    c0018778 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001876f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018774:	7e 13                	jle    c0018789 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018776:	eb 30                	jmp    c00187a8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018778:	83 f8 06             	cmp    eax,0x6
c001877b:	7c 4a                	jl     c00187c7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001877d:	83 f8 07             	cmp    eax,0x7
c0018780:	7e 07                	jle    c0018789 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018782:	83 f8 09             	cmp    eax,0x9
c0018785:	74 21                	je     c00187a8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018787:	eb 3e                	jmp    c00187c7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018789:	89 e6                	mov    esi,esp
c001878b:	8b 1d 48 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da48
c0018791:	56                   	push   esi
c0018792:	c1 eb 15             	shr    ebx,0x15
c0018795:	68 82 00 00 c0       	push   0xc0000082
c001879a:	83 e3 7e             	and    ebx,0x7e
c001879d:	e8 a0 ff ff ff       	call   c0018742 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187a2:	56                   	push   esi
c00187a3:	6a 00                	push   0x0
c00187a5:	53                   	push   ebx
c00187a6:	eb 12                	jmp    c00187ba <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00187a8:	89 e3                	mov    ebx,esp
c00187aa:	53                   	push   ebx
c00187ab:	68 82 00 00 c0       	push   0xc0000082
c00187b0:	e8 8d ff ff ff       	call   c0018742 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187b5:	53                   	push   ebx
c00187b6:	6a 00                	push   0x0
c00187b8:	6a 00                	push   0x0
c00187ba:	68 82 00 00 c0       	push   0xc0000082
c00187bf:	e8 62 ff ff ff       	call   c0018726 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00187c4:	83 c4 18             	add    esp,0x18
c00187c7:	83 c4 10             	add    esp,0x10
c00187ca:	5b                   	pop    ebx
c00187cb:	5e                   	pop    esi
c00187cc:	c3                   	ret    
c00187cd:	90                   	nop

c00187ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187ce:	55                   	push   ebp
c00187cf:	57                   	push   edi
c00187d0:	56                   	push   esi
c00187d1:	53                   	push   ebx
c00187d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187d6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00187da:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00187de:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00187e2:	39 05 20 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf20,eax
c00187e8:	75 23                	jne    c001880d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00187ea:	a1 2c 05 03 c0       	mov    eax,ds:0xc003052c
c00187ef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00187f3:	89 06                	mov    DWORD PTR [esi],eax
c00187f5:	a1 28 05 03 c0       	mov    eax,ds:0xc0030528
c00187fa:	89 07                	mov    DWORD PTR [edi],eax
c00187fc:	a1 24 05 03 c0       	mov    eax,ds:0xc0030524
c0018801:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018804:	a1 20 05 03 c0       	mov    eax,ds:0xc0030520
c0018809:	89 02                	mov    DWORD PTR [edx],eax
c001880b:	eb 3f                	jmp    c001884c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001880d:	31 c9                	xor    ecx,ecx
c001880f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018813:	0f a2                	cpuid  
c0018815:	89 06                	mov    DWORD PTR [esi],eax
c0018817:	89 1f                	mov    DWORD PTR [edi],ebx
c0018819:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001881d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018820:	89 10                	mov    DWORD PTR [eax],edx
c0018822:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018826:	a3 20 cf 02 c0       	mov    ds:0xc002cf20,eax
c001882b:	8b 06                	mov    eax,DWORD PTR [esi]
c001882d:	a3 2c 05 03 c0       	mov    ds:0xc003052c,eax
c0018832:	8b 07                	mov    eax,DWORD PTR [edi]
c0018834:	a3 28 05 03 c0       	mov    ds:0xc0030528,eax
c0018839:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001883c:	a3 24 05 03 c0       	mov    ds:0xc0030524,eax
c0018841:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018845:	8b 00                	mov    eax,DWORD PTR [eax]
c0018847:	a3 20 05 03 c0       	mov    ds:0xc0030520,eax
c001884c:	5b                   	pop    ebx
c001884d:	5e                   	pop    esi
c001884e:	5f                   	pop    edi
c001884f:	5d                   	pop    ebp
c0018850:	c3                   	ret    
c0018851:	90                   	nop

c0018852 <CPU::cpuidCheckEDX(unsigned int)>:
c0018852:	83 ec 10             	sub    esp,0x10
c0018855:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018859:	50                   	push   eax
c001885a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001885e:	50                   	push   eax
c001885f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018863:	50                   	push   eax
c0018864:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018868:	50                   	push   eax
c0018869:	6a 01                	push   0x1
c001886b:	e8 5e ff ff ff       	call   c00187ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018870:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018874:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018878:	0f 95 c0             	setne  al
c001887b:	83 c4 24             	add    esp,0x24
c001887e:	c3                   	ret    
c001887f:	90                   	nop

c0018880 <CPU::cpuidCheckECX(unsigned int)>:
c0018880:	83 ec 10             	sub    esp,0x10
c0018883:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018887:	50                   	push   eax
c0018888:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001888c:	50                   	push   eax
c001888d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018891:	50                   	push   eax
c0018892:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018896:	50                   	push   eax
c0018897:	6a 01                	push   0x1
c0018899:	e8 30 ff ff ff       	call   c00187ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001889e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188a2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188a6:	0f 95 c0             	setne  al
c00188a9:	83 c4 24             	add    esp,0x24
c00188ac:	c3                   	ret    
c00188ad:	90                   	nop

c00188ae <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00188ae:	83 ec 10             	sub    esp,0x10
c00188b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b5:	50                   	push   eax
c00188b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ba:	50                   	push   eax
c00188bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188bf:	50                   	push   eax
c00188c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c4:	50                   	push   eax
c00188c5:	6a 07                	push   0x7
c00188c7:	e8 02 ff ff ff       	call   c00187ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188d0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00188d4:	0f 95 c0             	setne  al
c00188d7:	83 c4 24             	add    esp,0x24
c00188da:	c3                   	ret    
c00188db:	90                   	nop

c00188dc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00188dc:	83 ec 10             	sub    esp,0x10
c00188df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e3:	50                   	push   eax
c00188e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e8:	50                   	push   eax
c00188e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ed:	50                   	push   eax
c00188ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188f2:	50                   	push   eax
c00188f3:	6a 07                	push   0x7
c00188f5:	e8 d4 fe ff ff       	call   c00187ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188fe:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018902:	0f 95 c0             	setne  al
c0018905:	83 c4 24             	add    esp,0x24
c0018908:	c3                   	ret    
c0018909:	90                   	nop

c001890a <CPU::CPU()>:
c001890a:	83 ec 0c             	sub    esp,0xc
c001890d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018911:	83 ec 08             	sub    esp,0x8
c0018914:	68 21 b5 02 c0       	push   0xc002b521
c0018919:	50                   	push   eax
c001891a:	e8 13 b4 ff ff       	call   c0013d32 <Device::Device(char const*)>
c001891f:	83 c4 10             	add    esp,0x10
c0018922:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c0018927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001892b:	89 10                	mov    DWORD PTR [eax],edx
c001892d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018931:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001893b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001893f:	05 78 01 00 00       	add    eax,0x178
c0018944:	83 ec 0c             	sub    esp,0xc
c0018947:	50                   	push   eax
c0018948:	e8 7f 64 ff ff       	call   c000edcc <GDT::GDT()>
c001894d:	83 c4 10             	add    esp,0x10
c0018950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018954:	05 7c 09 00 00       	add    eax,0x97c
c0018959:	83 ec 0c             	sub    esp,0xc
c001895c:	50                   	push   eax
c001895d:	e8 ba 66 ff ff       	call   c000f01c <IDT::IDT()>
c0018962:	83 c4 10             	add    esp,0x10
c0018965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018969:	05 7c 11 00 00       	add    eax,0x117c
c001896e:	83 ec 0c             	sub    esp,0xc
c0018971:	50                   	push   eax
c0018972:	e8 ed 81 ff ff       	call   c0010b64 <TSS::TSS()>
c0018977:	83 c4 10             	add    esp,0x10
c001897a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001897e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018989:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018993:	90                   	nop
c0018994:	83 c4 0c             	add    esp,0xc
c0018997:	c3                   	ret    

c0018998 <CPU::displayFeatures()>:
c0018998:	c3                   	ret    
c0018999:	90                   	nop

c001899a <CPU::detectFeatures()>:
c001899a:	55                   	push   ebp
c001899b:	57                   	push   edi
c001899c:	56                   	push   esi
c001899d:	53                   	push   ebx
c001899e:	83 ec 50             	sub    esp,0x50
c00189a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00189a5:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00189af:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00189b6:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00189bc:	6a 0d                	push   0xd
c00189be:	6a 00                	push   0x0
c00189c0:	55                   	push   ebp
c00189c1:	e8 8a 7d fe ff       	call   c0000750 <memset>
c00189c6:	83 c4 10             	add    esp,0x10
c00189c9:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00189ce:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00189d5:	0f 84 22 09 00 00    	je     c00192fd <CPU::detectFeatures()+0x963>
c00189db:	83 ec 0c             	sub    esp,0xc
c00189de:	89 ef                	mov    edi,ebp
c00189e0:	6a 10                	push   0x10
c00189e2:	e8 6b fe ff ff       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c00189e7:	83 e0 01             	and    eax,0x1
c00189ea:	8d 14 00             	lea    edx,[eax+eax*1]
c00189ed:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189f3:	83 e0 fd             	and    eax,0xfffffffd
c00189f6:	09 d0                	or     eax,edx
c00189f8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189fe:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018a05:	e8 48 fe ff ff       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c0018a0a:	83 e0 01             	and    eax,0x1
c0018a0d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018a14:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a1a:	83 e0 fb             	and    eax,0xfffffffb
c0018a1d:	09 d0                	or     eax,edx
c0018a1f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a25:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018a2c:	e8 21 fe ff ff       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c0018a31:	83 e0 01             	and    eax,0x1
c0018a34:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018a3b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a41:	83 e0 f7             	and    eax,0xfffffff7
c0018a44:	09 d0                	or     eax,edx
c0018a46:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a4c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018a53:	e8 fa fd ff ff       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c0018a58:	83 e0 01             	and    eax,0x1
c0018a5b:	c1 e0 04             	shl    eax,0x4
c0018a5e:	88 c2                	mov    dl,al
c0018a60:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a66:	83 e0 ef             	and    eax,0xffffffef
c0018a69:	09 d0                	or     eax,edx
c0018a6b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a71:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018a78:	e8 d5 fd ff ff       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c0018a7d:	83 e0 01             	and    eax,0x1
c0018a80:	c1 e0 05             	shl    eax,0x5
c0018a83:	88 c2                	mov    dl,al
c0018a85:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a8b:	83 e0 df             	and    eax,0xffffffdf
c0018a8e:	09 d0                	or     eax,edx
c0018a90:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a96:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018a9d:	e8 b0 fd ff ff       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c0018aa2:	83 e0 01             	and    eax,0x1
c0018aa5:	8d 14 00             	lea    edx,[eax+eax*1]
c0018aa8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018aae:	83 e0 fd             	and    eax,0xfffffffd
c0018ab1:	09 d0                	or     eax,edx
c0018ab3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018ab9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018ac0:	e8 8d fd ff ff       	call   c0018852 <CPU::cpuidCheckEDX(unsigned int)>
c0018ac5:	83 e0 01             	and    eax,0x1
c0018ac8:	c1 e0 06             	shl    eax,0x6
c0018acb:	88 c2                	mov    dl,al
c0018acd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018ad3:	83 e0 bf             	and    eax,0xffffffbf
c0018ad6:	09 d0                	or     eax,edx
c0018ad8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ade:	58                   	pop    eax
c0018adf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ae3:	50                   	push   eax
c0018ae4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ae8:	50                   	push   eax
c0018ae9:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018aed:	56                   	push   esi
c0018aee:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018af2:	50                   	push   eax
c0018af3:	6a 00                	push   0x0
c0018af5:	e8 d4 fc ff ff       	call   c00187ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018afa:	b8 04 00 00 00       	mov    eax,0x4
c0018aff:	89 c1                	mov    ecx,eax
c0018b01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b03:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018b09:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018b0d:	89 c1                	mov    ecx,eax
c0018b0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b11:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018b17:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018b1b:	89 c1                	mov    ecx,eax
c0018b1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b1f:	83 c4 18             	add    esp,0x18
c0018b22:	68 cc b3 02 c0       	push   0xc002b3cc
c0018b27:	55                   	push   ebp
c0018b28:	e8 6b 7d fe ff       	call   c0000898 <strcmp>
c0018b2d:	83 c4 10             	add    esp,0x10
c0018b30:	85 c0                	test   eax,eax
c0018b32:	75 0f                	jne    c0018b43 <CPU::detectFeatures()+0x1a9>
c0018b34:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018b3e:	e9 22 02 00 00       	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018b43:	50                   	push   eax
c0018b44:	50                   	push   eax
c0018b45:	68 d9 b3 02 c0       	push   0xc002b3d9
c0018b4a:	55                   	push   ebp
c0018b4b:	e8 48 7d fe ff       	call   c0000898 <strcmp>
c0018b50:	83 c4 10             	add    esp,0x10
c0018b53:	85 c0                	test   eax,eax
c0018b55:	74 dd                	je     c0018b34 <CPU::detectFeatures()+0x19a>
c0018b57:	50                   	push   eax
c0018b58:	50                   	push   eax
c0018b59:	68 e6 b3 02 c0       	push   0xc002b3e6
c0018b5e:	55                   	push   ebp
c0018b5f:	e8 34 7d fe ff       	call   c0000898 <strcmp>
c0018b64:	83 c4 10             	add    esp,0x10
c0018b67:	85 c0                	test   eax,eax
c0018b69:	74 2a                	je     c0018b95 <CPU::detectFeatures()+0x1fb>
c0018b6b:	50                   	push   eax
c0018b6c:	50                   	push   eax
c0018b6d:	68 f3 b3 02 c0       	push   0xc002b3f3
c0018b72:	55                   	push   ebp
c0018b73:	e8 20 7d fe ff       	call   c0000898 <strcmp>
c0018b78:	83 c4 10             	add    esp,0x10
c0018b7b:	85 c0                	test   eax,eax
c0018b7d:	74 16                	je     c0018b95 <CPU::detectFeatures()+0x1fb>
c0018b7f:	50                   	push   eax
c0018b80:	50                   	push   eax
c0018b81:	68 00 b4 02 c0       	push   0xc002b400
c0018b86:	55                   	push   ebp
c0018b87:	e8 0c 7d fe ff       	call   c0000898 <strcmp>
c0018b8c:	83 c4 10             	add    esp,0x10
c0018b8f:	85 c0                	test   eax,eax
c0018b91:	74 48                	je     c0018bdb <CPU::detectFeatures()+0x241>
c0018b93:	eb 0f                	jmp    c0018ba4 <CPU::detectFeatures()+0x20a>
c0018b95:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018b9f:	e9 c1 01 00 00       	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018ba4:	50                   	push   eax
c0018ba5:	50                   	push   eax
c0018ba6:	68 0d b4 02 c0       	push   0xc002b40d
c0018bab:	55                   	push   ebp
c0018bac:	e8 e7 7c fe ff       	call   c0000898 <strcmp>
c0018bb1:	83 c4 10             	add    esp,0x10
c0018bb4:	85 c0                	test   eax,eax
c0018bb6:	74 23                	je     c0018bdb <CPU::detectFeatures()+0x241>
c0018bb8:	57                   	push   edi
c0018bb9:	57                   	push   edi
c0018bba:	68 1a b4 02 c0       	push   0xc002b41a
c0018bbf:	55                   	push   ebp
c0018bc0:	e8 d3 7c fe ff       	call   c0000898 <strcmp>
c0018bc5:	83 c4 10             	add    esp,0x10
c0018bc8:	85 c0                	test   eax,eax
c0018bca:	75 1e                	jne    c0018bea <CPU::detectFeatures()+0x250>
c0018bcc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018bd6:	e9 8a 01 00 00       	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018bdb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018be5:	e9 7b 01 00 00       	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018bea:	56                   	push   esi
c0018beb:	56                   	push   esi
c0018bec:	68 27 b4 02 c0       	push   0xc002b427
c0018bf1:	55                   	push   ebp
c0018bf2:	e8 a1 7c fe ff       	call   c0000898 <strcmp>
c0018bf7:	83 c4 10             	add    esp,0x10
c0018bfa:	85 c0                	test   eax,eax
c0018bfc:	75 0f                	jne    c0018c0d <CPU::detectFeatures()+0x273>
c0018bfe:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018c08:	e9 58 01 00 00       	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018c0d:	51                   	push   ecx
c0018c0e:	51                   	push   ecx
c0018c0f:	68 e6 b3 02 c0       	push   0xc002b3e6
c0018c14:	55                   	push   ebp
c0018c15:	e8 7e 7c fe ff       	call   c0000898 <strcmp>
c0018c1a:	83 c4 10             	add    esp,0x10
c0018c1d:	85 c0                	test   eax,eax
c0018c1f:	75 0f                	jne    c0018c30 <CPU::detectFeatures()+0x296>
c0018c21:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018c2b:	e9 35 01 00 00       	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018c30:	52                   	push   edx
c0018c31:	52                   	push   edx
c0018c32:	68 34 b4 02 c0       	push   0xc002b434
c0018c37:	55                   	push   ebp
c0018c38:	e8 5b 7c fe ff       	call   c0000898 <strcmp>
c0018c3d:	83 c4 10             	add    esp,0x10
c0018c40:	85 c0                	test   eax,eax
c0018c42:	75 0f                	jne    c0018c53 <CPU::detectFeatures()+0x2b9>
c0018c44:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018c4e:	e9 12 01 00 00       	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018c53:	50                   	push   eax
c0018c54:	50                   	push   eax
c0018c55:	68 41 b4 02 c0       	push   0xc002b441
c0018c5a:	55                   	push   ebp
c0018c5b:	e8 38 7c fe ff       	call   c0000898 <strcmp>
c0018c60:	83 c4 10             	add    esp,0x10
c0018c63:	85 c0                	test   eax,eax
c0018c65:	75 0f                	jne    c0018c76 <CPU::detectFeatures()+0x2dc>
c0018c67:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018c71:	e9 ef 00 00 00       	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018c76:	50                   	push   eax
c0018c77:	50                   	push   eax
c0018c78:	68 4e b4 02 c0       	push   0xc002b44e
c0018c7d:	55                   	push   ebp
c0018c7e:	e8 15 7c fe ff       	call   c0000898 <strcmp>
c0018c83:	83 c4 10             	add    esp,0x10
c0018c86:	85 c0                	test   eax,eax
c0018c88:	75 0f                	jne    c0018c99 <CPU::detectFeatures()+0x2ff>
c0018c8a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018c94:	e9 cc 00 00 00       	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018c99:	50                   	push   eax
c0018c9a:	50                   	push   eax
c0018c9b:	68 5b b4 02 c0       	push   0xc002b45b
c0018ca0:	55                   	push   ebp
c0018ca1:	e8 f2 7b fe ff       	call   c0000898 <strcmp>
c0018ca6:	83 c4 10             	add    esp,0x10
c0018ca9:	85 c0                	test   eax,eax
c0018cab:	75 0f                	jne    c0018cbc <CPU::detectFeatures()+0x322>
c0018cad:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018cb7:	e9 a9 00 00 00       	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018cbc:	50                   	push   eax
c0018cbd:	50                   	push   eax
c0018cbe:	68 68 b4 02 c0       	push   0xc002b468
c0018cc3:	55                   	push   ebp
c0018cc4:	e8 cf 7b fe ff       	call   c0000898 <strcmp>
c0018cc9:	83 c4 10             	add    esp,0x10
c0018ccc:	85 c0                	test   eax,eax
c0018cce:	75 0f                	jne    c0018cdf <CPU::detectFeatures()+0x345>
c0018cd0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018cda:	e9 86 00 00 00       	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018cdf:	50                   	push   eax
c0018ce0:	50                   	push   eax
c0018ce1:	68 75 b4 02 c0       	push   0xc002b475
c0018ce6:	55                   	push   ebp
c0018ce7:	e8 ac 7b fe ff       	call   c0000898 <strcmp>
c0018cec:	83 c4 10             	add    esp,0x10
c0018cef:	85 c0                	test   eax,eax
c0018cf1:	75 0c                	jne    c0018cff <CPU::detectFeatures()+0x365>
c0018cf3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018cfd:	eb 66                	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018cff:	50                   	push   eax
c0018d00:	50                   	push   eax
c0018d01:	68 82 b4 02 c0       	push   0xc002b482
c0018d06:	55                   	push   ebp
c0018d07:	e8 8c 7b fe ff       	call   c0000898 <strcmp>
c0018d0c:	83 c4 10             	add    esp,0x10
c0018d0f:	85 c0                	test   eax,eax
c0018d11:	75 0c                	jne    c0018d1f <CPU::detectFeatures()+0x385>
c0018d13:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018d1d:	eb 46                	jmp    c0018d65 <CPU::detectFeatures()+0x3cb>
c0018d1f:	57                   	push   edi
c0018d20:	57                   	push   edi
c0018d21:	68 8f b4 02 c0       	push   0xc002b48f
c0018d26:	55                   	push   ebp
c0018d27:	e8 6c 7b fe ff       	call   c0000898 <strcmp>
c0018d2c:	83 c4 10             	add    esp,0x10
c0018d2f:	85 c0                	test   eax,eax
c0018d31:	74 e0                	je     c0018d13 <CPU::detectFeatures()+0x379>
c0018d33:	56                   	push   esi
c0018d34:	56                   	push   esi
c0018d35:	68 9c b4 02 c0       	push   0xc002b49c
c0018d3a:	55                   	push   ebp
c0018d3b:	e8 58 7b fe ff       	call   c0000898 <strcmp>
c0018d40:	83 c4 10             	add    esp,0x10
c0018d43:	85 c0                	test   eax,eax
c0018d45:	74 cc                	je     c0018d13 <CPU::detectFeatures()+0x379>
c0018d47:	51                   	push   ecx
c0018d48:	51                   	push   ecx
c0018d49:	68 a9 b4 02 c0       	push   0xc002b4a9
c0018d4e:	55                   	push   ebp
c0018d4f:	e8 44 7b fe ff       	call   c0000898 <strcmp>
c0018d54:	83 c4 10             	add    esp,0x10
c0018d57:	85 c0                	test   eax,eax
c0018d59:	74 b8                	je     c0018d13 <CPU::detectFeatures()+0x379>
c0018d5b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018d65:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018d6a:	0f 86 be 00 00 00    	jbe    c0018e2e <CPU::detectFeatures()+0x494>
c0018d70:	83 ec 0c             	sub    esp,0xc
c0018d73:	68 80 00 00 00       	push   0x80
c0018d78:	e8 31 fb ff ff       	call   c00188ae <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d7d:	83 e0 01             	and    eax,0x1
c0018d80:	c1 e0 06             	shl    eax,0x6
c0018d83:	88 c2                	mov    dl,al
c0018d85:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d8b:	83 e0 bf             	and    eax,0xffffffbf
c0018d8e:	09 d0                	or     eax,edx
c0018d90:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d96:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018d9d:	e8 0c fb ff ff       	call   c00188ae <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018da2:	83 e0 01             	and    eax,0x1
c0018da5:	c1 e0 04             	shl    eax,0x4
c0018da8:	88 c2                	mov    dl,al
c0018daa:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018db0:	83 e0 ef             	and    eax,0xffffffef
c0018db3:	09 d0                	or     eax,edx
c0018db5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018dbb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018dc2:	e8 e7 fa ff ff       	call   c00188ae <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018dc7:	c1 e0 07             	shl    eax,0x7
c0018dca:	88 c2                	mov    dl,al
c0018dcc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018dd2:	83 e0 7f             	and    eax,0x7f
c0018dd5:	09 d0                	or     eax,edx
c0018dd7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ddd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018de4:	e8 f3 fa ff ff       	call   c00188dc <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018de9:	83 e0 01             	and    eax,0x1
c0018dec:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018df3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018df9:	83 e0 f7             	and    eax,0xfffffff7
c0018dfc:	09 d0                	or     eax,edx
c0018dfe:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e04:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018e0b:	e8 cc fa ff ff       	call   c00188dc <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018e10:	83 c4 10             	add    esp,0x10
c0018e13:	83 e0 01             	and    eax,0x1
c0018e16:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e1d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018e23:	83 e0 fb             	and    eax,0xfffffffb
c0018e26:	09 d0                	or     eax,edx
c0018e28:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e2e:	83 ec 0c             	sub    esp,0xc
c0018e31:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e35:	50                   	push   eax
c0018e36:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e3a:	50                   	push   eax
c0018e3b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e3f:	56                   	push   esi
c0018e40:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e44:	50                   	push   eax
c0018e45:	6a 01                	push   0x1
c0018e47:	e8 82 f9 ff ff       	call   c00187ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e4c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018e50:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e56:	88 ca                	mov    dl,cl
c0018e58:	83 e0 f0             	and    eax,0xfffffff0
c0018e5b:	83 e2 0f             	and    edx,0xf
c0018e5e:	09 d0                	or     eax,edx
c0018e60:	88 ca                	mov    dl,cl
c0018e62:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018e68:	c0 ea 04             	shr    dl,0x4
c0018e6b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018e6f:	0f b6 c2             	movzx  eax,dl
c0018e72:	83 c4 20             	add    esp,0x20
c0018e75:	c1 e0 06             	shl    eax,0x6
c0018e78:	89 c7                	mov    edi,eax
c0018e7a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e80:	66 25 3f c0          	and    ax,0xc03f
c0018e84:	09 f8                	or     eax,edi
c0018e86:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e8d:	89 c8                	mov    eax,ecx
c0018e8f:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018e96:	c1 e8 08             	shr    eax,0x8
c0018e99:	83 e5 3f             	and    ebp,0x3f
c0018e9c:	83 e0 0f             	and    eax,0xf
c0018e9f:	89 c7                	mov    edi,eax
c0018ea1:	c1 e7 06             	shl    edi,0x6
c0018ea4:	09 ef                	or     edi,ebp
c0018ea6:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018ead:	89 fa                	mov    edx,edi
c0018eaf:	83 e5 c0             	and    ebp,0xffffffc0
c0018eb2:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018eb8:	88 c2                	mov    dl,al
c0018eba:	c0 ea 02             	shr    dl,0x2
c0018ebd:	89 d7                	mov    edi,edx
c0018ebf:	09 ef                	or     edi,ebp
c0018ec1:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018ec7:	89 fa                	mov    edx,edi
c0018ec9:	83 e5 cf             	and    ebp,0xffffffcf
c0018ecc:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018ed2:	89 cf                	mov    edi,ecx
c0018ed4:	c1 ef 0c             	shr    edi,0xc
c0018ed7:	83 e7 03             	and    edi,0x3
c0018eda:	c1 e7 04             	shl    edi,0x4
c0018edd:	09 ef                	or     edi,ebp
c0018edf:	3c 06                	cmp    al,0x6
c0018ee1:	89 fa                	mov    edx,edi
c0018ee3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ee9:	74 04                	je     c0018eef <CPU::detectFeatures()+0x555>
c0018eeb:	3c 0f                	cmp    al,0xf
c0018eed:	75 5c                	jne    c0018f4b <CPU::detectFeatures()+0x5b1>
c0018eef:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018ef3:	89 cf                	mov    edi,ecx
c0018ef5:	c1 ef 10             	shr    edi,0x10
c0018ef8:	c1 e7 04             	shl    edi,0x4
c0018efb:	09 fa                	or     edx,edi
c0018efd:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018f03:	0f b6 d2             	movzx  edx,dl
c0018f06:	66 81 e7 3f c0       	and    di,0xc03f
c0018f0b:	c1 e2 06             	shl    edx,0x6
c0018f0e:	09 fa                	or     edx,edi
c0018f10:	3c 0f                	cmp    al,0xf
c0018f12:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018f19:	75 30                	jne    c0018f4b <CPU::detectFeatures()+0x5b1>
c0018f1b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018f21:	c1 e9 14             	shr    ecx,0x14
c0018f24:	83 e0 3f             	and    eax,0x3f
c0018f27:	83 c1 0f             	add    ecx,0xf
c0018f2a:	88 ca                	mov    dl,cl
c0018f2c:	c0 e9 02             	shr    cl,0x2
c0018f2f:	c1 e2 06             	shl    edx,0x6
c0018f32:	09 d0                	or     eax,edx
c0018f34:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018f3a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018f40:	83 e0 c0             	and    eax,0xffffffc0
c0018f43:	09 c1                	or     ecx,eax
c0018f45:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018f4b:	83 ec 0c             	sub    esp,0xc
c0018f4e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f55:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f59:	50                   	push   eax
c0018f5a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018f5e:	55                   	push   ebp
c0018f5f:	56                   	push   esi
c0018f60:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f64:	57                   	push   edi
c0018f65:	68 00 00 00 80       	push   0x80000000
c0018f6a:	e8 5f f8 ff ff       	call   c00187ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f6f:	83 c4 20             	add    esp,0x20
c0018f72:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018f7a:	76 22                	jbe    c0018f9e <CPU::detectFeatures()+0x604>
c0018f7c:	83 ec 0c             	sub    esp,0xc
c0018f7f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f83:	50                   	push   eax
c0018f84:	55                   	push   ebp
c0018f85:	56                   	push   esi
c0018f86:	57                   	push   edi
c0018f87:	68 01 00 00 80       	push   0x80000001
c0018f8c:	e8 3d f8 ff ff       	call   c00187ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f91:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018f9b:	83 c4 20             	add    esp,0x20
c0018f9e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018fa4:	83 f8 01             	cmp    eax,0x1
c0018fa7:	75 6f                	jne    c0019018 <CPU::detectFeatures()+0x67e>
c0018fa9:	51                   	push   ecx
c0018faa:	51                   	push   ecx
c0018fab:	68 b5 b4 02 c0       	push   0xc002b4b5
c0018fb0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018fb4:	56                   	push   esi
c0018fb5:	e8 52 78 fe ff       	call   c000080c <strcpy>
c0018fba:	5f                   	pop    edi
c0018fbb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fc1:	5d                   	pop    ebp
c0018fc2:	66 c1 e8 06          	shr    ax,0x6
c0018fc6:	0f b6 c0             	movzx  eax,al
c0018fc9:	50                   	push   eax
c0018fca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fd0:	c1 e8 0e             	shr    eax,0xe
c0018fd3:	0f b6 c0             	movzx  eax,al
c0018fd6:	50                   	push   eax
c0018fd7:	e8 9c f4 ff ff       	call   c0018478 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018fdc:	5a                   	pop    edx
c0018fdd:	59                   	pop    ecx
c0018fde:	50                   	push   eax
c0018fdf:	56                   	push   esi
c0018fe0:	e8 67 79 fe ff       	call   c000094c <strcat>
c0018fe5:	5f                   	pop    edi
c0018fe6:	5d                   	pop    ebp
c0018fe7:	56                   	push   esi
c0018fe8:	53                   	push   ebx
c0018fe9:	e8 36 ad ff ff       	call   c0013d24 <Device::setName(char const*)>
c0018fee:	58                   	pop    eax
c0018fef:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ff5:	5a                   	pop    edx
c0018ff6:	68 bc b4 02 c0       	push   0xc002b4bc
c0018ffb:	50                   	push   eax
c0018ffc:	e8 97 78 fe ff       	call   c0000898 <strcmp>
c0019001:	83 c4 10             	add    esp,0x10
c0019004:	85 c0                	test   eax,eax
c0019006:	0f 85 71 03 00 00    	jne    c001937d <CPU::detectFeatures()+0x9e3>
c001900c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019013:	e9 65 03 00 00       	jmp    c001937d <CPU::detectFeatures()+0x9e3>
c0019018:	83 f8 02             	cmp    eax,0x2
c001901b:	0f 85 b5 00 00 00    	jne    c00190d6 <CPU::detectFeatures()+0x73c>
c0019021:	57                   	push   edi
c0019022:	57                   	push   edi
c0019023:	68 ce b4 02 c0       	push   0xc002b4ce
c0019028:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001902c:	56                   	push   esi
c001902d:	e8 da 77 fe ff       	call   c000080c <strcpy>
c0019032:	5d                   	pop    ebp
c0019033:	58                   	pop    eax
c0019034:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001903a:	66 c1 e8 06          	shr    ax,0x6
c001903e:	0f b6 c0             	movzx  eax,al
c0019041:	50                   	push   eax
c0019042:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019048:	c1 e8 0e             	shr    eax,0xe
c001904b:	0f b6 c0             	movzx  eax,al
c001904e:	50                   	push   eax
c001904f:	e8 90 f2 ff ff       	call   c00182e4 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019054:	5a                   	pop    edx
c0019055:	59                   	pop    ecx
c0019056:	50                   	push   eax
c0019057:	56                   	push   esi
c0019058:	e8 ef 78 fe ff       	call   c000094c <strcat>
c001905d:	5f                   	pop    edi
c001905e:	5d                   	pop    ebp
c001905f:	56                   	push   esi
c0019060:	53                   	push   ebx
c0019061:	e8 be ac ff ff       	call   c0013d24 <Device::setName(char const*)>
c0019066:	58                   	pop    eax
c0019067:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001906d:	5a                   	pop    edx
c001906e:	68 d3 b4 02 c0       	push   0xc002b4d3
c0019073:	50                   	push   eax
c0019074:	e8 1f 78 fe ff       	call   c0000898 <strcmp>
c0019079:	83 c4 10             	add    esp,0x10
c001907c:	85 c0                	test   eax,eax
c001907e:	75 20                	jne    c00190a0 <CPU::detectFeatures()+0x706>
c0019080:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c0019086:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001908c:	a8 01                	test   al,0x1
c001908e:	74 10                	je     c00190a0 <CPU::detectFeatures()+0x706>
c0019090:	83 e0 fe             	and    eax,0xfffffffe
c0019093:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019099:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00190a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190a6:	c1 e8 0e             	shr    eax,0xe
c00190a9:	3c 05                	cmp    al,0x5
c00190ab:	0f 85 cc 02 00 00    	jne    c001937d <CPU::detectFeatures()+0x9e3>
c00190b1:	56                   	push   esi
c00190b2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00190b8:	83 e0 0f             	and    eax,0xf
c00190bb:	50                   	push   eax
c00190bc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190c2:	66 c1 e8 06          	shr    ax,0x6
c00190c6:	0f b6 c0             	movzx  eax,al
c00190c9:	50                   	push   eax
c00190ca:	6a 05                	push   0x5
c00190cc:	e8 89 f6 ff ff       	call   c001875a <CPU::AMD_K6_writeback(int, int, int)>
c00190d1:	e9 1f 02 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x95b>
c00190d6:	8d 50 fd             	lea    edx,[eax-0x3]
c00190d9:	83 fa 01             	cmp    edx,0x1
c00190dc:	76 09                	jbe    c00190e7 <CPU::detectFeatures()+0x74d>
c00190de:	83 f8 06             	cmp    eax,0x6
c00190e1:	0f 85 91 01 00 00    	jne    c0019278 <CPU::detectFeatures()+0x8de>
c00190e7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190ed:	c1 ea 0e             	shr    edx,0xe
c00190f0:	80 fa 05             	cmp    dl,0x5
c00190f3:	75 7b                	jne    c0019170 <CPU::detectFeatures()+0x7d6>
c00190f5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190fb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019100:	66 81 fa 00 01       	cmp    dx,0x100
c0019105:	75 0c                	jne    c0019113 <CPU::detectFeatures()+0x779>
c0019107:	51                   	push   ecx
c0019108:	51                   	push   ecx
c0019109:	68 da b4 02 c0       	push   0xc002b4da
c001910e:	e9 dc 01 00 00       	jmp    c00192ef <CPU::detectFeatures()+0x955>
c0019113:	66 81 fa 00 02       	cmp    dx,0x200
c0019118:	75 0c                	jne    c0019126 <CPU::detectFeatures()+0x78c>
c001911a:	52                   	push   edx
c001911b:	52                   	push   edx
c001911c:	68 ed b4 02 c0       	push   0xc002b4ed
c0019121:	e9 c9 01 00 00       	jmp    c00192ef <CPU::detectFeatures()+0x955>
c0019126:	66 81 fa 40 02       	cmp    dx,0x240
c001912b:	75 0c                	jne    c0019139 <CPU::detectFeatures()+0x79f>
c001912d:	50                   	push   eax
c001912e:	50                   	push   eax
c001912f:	68 ff b4 02 c0       	push   0xc002b4ff
c0019134:	e9 b6 01 00 00       	jmp    c00192ef <CPU::detectFeatures()+0x955>
c0019139:	83 f8 06             	cmp    eax,0x6
c001913c:	75 0c                	jne    c001914a <CPU::detectFeatures()+0x7b0>
c001913e:	50                   	push   eax
c001913f:	50                   	push   eax
c0019140:	68 11 b5 02 c0       	push   0xc002b511
c0019145:	e9 a5 01 00 00       	jmp    c00192ef <CPU::detectFeatures()+0x955>
c001914a:	83 f8 04             	cmp    eax,0x4
c001914d:	75 0c                	jne    c001915b <CPU::detectFeatures()+0x7c1>
c001914f:	50                   	push   eax
c0019150:	50                   	push   eax
c0019151:	68 1d b5 02 c0       	push   0xc002b51d
c0019156:	e9 94 01 00 00       	jmp    c00192ef <CPU::detectFeatures()+0x955>
c001915b:	83 f8 03             	cmp    eax,0x3
c001915e:	0f 85 19 02 00 00    	jne    c001937d <CPU::detectFeatures()+0x9e3>
c0019164:	50                   	push   eax
c0019165:	50                   	push   eax
c0019166:	68 25 b5 02 c0       	push   0xc002b525
c001916b:	e9 7f 01 00 00       	jmp    c00192ef <CPU::detectFeatures()+0x955>
c0019170:	80 fa 06             	cmp    dl,0x6
c0019173:	0f 85 db 00 00 00    	jne    c0019254 <CPU::detectFeatures()+0x8ba>
c0019179:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001917f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019184:	66 81 fa 80 01       	cmp    dx,0x180
c0019189:	75 0c                	jne    c0019197 <CPU::detectFeatures()+0x7fd>
c001918b:	50                   	push   eax
c001918c:	50                   	push   eax
c001918d:	68 30 b5 02 c0       	push   0xc002b530
c0019192:	e9 58 01 00 00       	jmp    c00192ef <CPU::detectFeatures()+0x955>
c0019197:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001919d:	66 f7 c1 80 ff       	test   cx,0xff80
c00191a2:	75 0c                	jne    c00191b0 <CPU::detectFeatures()+0x816>
c00191a4:	50                   	push   eax
c00191a5:	50                   	push   eax
c00191a6:	68 40 b5 02 c0       	push   0xc002b540
c00191ab:	e9 3f 01 00 00       	jmp    c00192ef <CPU::detectFeatures()+0x955>
c00191b0:	66 81 fa 40 02       	cmp    dx,0x240
c00191b5:	75 0c                	jne    c00191c3 <CPU::detectFeatures()+0x829>
c00191b7:	55                   	push   ebp
c00191b8:	55                   	push   ebp
c00191b9:	68 47 b5 02 c0       	push   0xc002b547
c00191be:	e9 2c 01 00 00       	jmp    c00192ef <CPU::detectFeatures()+0x955>
c00191c3:	66 81 fa 80 02       	cmp    dx,0x280
c00191c8:	75 0c                	jne    c00191d6 <CPU::detectFeatures()+0x83c>
c00191ca:	57                   	push   edi
c00191cb:	57                   	push   edi
c00191cc:	68 50 b5 02 c0       	push   0xc002b550
c00191d1:	e9 19 01 00 00       	jmp    c00192ef <CPU::detectFeatures()+0x955>
c00191d6:	66 81 fa 40 03       	cmp    dx,0x340
c00191db:	74 ed                	je     c00191ca <CPU::detectFeatures()+0x830>
c00191dd:	66 81 fa c0 03       	cmp    dx,0x3c0
c00191e2:	75 0c                	jne    c00191f0 <CPU::detectFeatures()+0x856>
c00191e4:	56                   	push   esi
c00191e5:	56                   	push   esi
c00191e6:	68 57 b5 02 c0       	push   0xc002b557
c00191eb:	e9 ff 00 00 00       	jmp    c00192ef <CPU::detectFeatures()+0x955>
c00191f0:	83 f8 06             	cmp    eax,0x6
c00191f3:	0f 84 45 ff ff ff    	je     c001913e <CPU::detectFeatures()+0x7a4>
c00191f9:	83 f8 04             	cmp    eax,0x4
c00191fc:	0f 84 4d ff ff ff    	je     c001914f <CPU::detectFeatures()+0x7b5>
c0019202:	83 f8 03             	cmp    eax,0x3
c0019205:	0f 85 72 01 00 00    	jne    c001937d <CPU::detectFeatures()+0x9e3>
c001920b:	51                   	push   ecx
c001920c:	51                   	push   ecx
c001920d:	68 60 b5 02 c0       	push   0xc002b560
c0019212:	53                   	push   ebx
c0019213:	e8 0c ab ff ff       	call   c0013d24 <Device::setName(char const*)>
c0019218:	b1 c1                	mov    cl,0xc1
c001921a:	88 c8                	mov    al,cl
c001921c:	e6 22                	out    0x22,al
c001921e:	e4 23                	in     al,0x23
c0019220:	88 c2                	mov    dl,al
c0019222:	88 c8                	mov    al,cl
c0019224:	e6 22                	out    0x22,al
c0019226:	88 d0                	mov    al,dl
c0019228:	83 c8 10             	or     eax,0x10
c001922b:	e6 23                	out    0x23,al
c001922d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019234:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019237:	89 d0                	mov    eax,edx
c0019239:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001923f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019243:	40                   	inc    eax
c0019244:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001924a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001924f:	e9 a1 00 00 00       	jmp    c00192f5 <CPU::detectFeatures()+0x95b>
c0019254:	83 f8 06             	cmp    eax,0x6
c0019257:	0f 84 e1 fe ff ff    	je     c001913e <CPU::detectFeatures()+0x7a4>
c001925d:	83 f8 04             	cmp    eax,0x4
c0019260:	0f 84 e9 fe ff ff    	je     c001914f <CPU::detectFeatures()+0x7b5>
c0019266:	83 f8 03             	cmp    eax,0x3
c0019269:	0f 85 0e 01 00 00    	jne    c001937d <CPU::detectFeatures()+0x9e3>
c001926f:	52                   	push   edx
c0019270:	52                   	push   edx
c0019271:	68 6b b5 02 c0       	push   0xc002b56b
c0019276:	eb 77                	jmp    c00192ef <CPU::detectFeatures()+0x955>
c0019278:	83 f8 07             	cmp    eax,0x7
c001927b:	75 09                	jne    c0019286 <CPU::detectFeatures()+0x8ec>
c001927d:	50                   	push   eax
c001927e:	50                   	push   eax
c001927f:	68 75 b5 02 c0       	push   0xc002b575
c0019284:	eb 69                	jmp    c00192ef <CPU::detectFeatures()+0x955>
c0019286:	83 f8 0a             	cmp    eax,0xa
c0019289:	75 09                	jne    c0019294 <CPU::detectFeatures()+0x8fa>
c001928b:	50                   	push   eax
c001928c:	50                   	push   eax
c001928d:	68 80 b5 02 c0       	push   0xc002b580
c0019292:	eb 5b                	jmp    c00192ef <CPU::detectFeatures()+0x955>
c0019294:	83 f8 0b             	cmp    eax,0xb
c0019297:	75 09                	jne    c00192a2 <CPU::detectFeatures()+0x908>
c0019299:	50                   	push   eax
c001929a:	50                   	push   eax
c001929b:	68 88 b5 02 c0       	push   0xc002b588
c00192a0:	eb 4d                	jmp    c00192ef <CPU::detectFeatures()+0x955>
c00192a2:	83 f8 08             	cmp    eax,0x8
c00192a5:	75 09                	jne    c00192b0 <CPU::detectFeatures()+0x916>
c00192a7:	50                   	push   eax
c00192a8:	50                   	push   eax
c00192a9:	68 91 b5 02 c0       	push   0xc002b591
c00192ae:	eb 3f                	jmp    c00192ef <CPU::detectFeatures()+0x955>
c00192b0:	83 f8 09             	cmp    eax,0x9
c00192b3:	75 09                	jne    c00192be <CPU::detectFeatures()+0x924>
c00192b5:	50                   	push   eax
c00192b6:	50                   	push   eax
c00192b7:	68 99 b5 02 c0       	push   0xc002b599
c00192bc:	eb 31                	jmp    c00192ef <CPU::detectFeatures()+0x955>
c00192be:	83 f8 05             	cmp    eax,0x5
c00192c1:	75 09                	jne    c00192cc <CPU::detectFeatures()+0x932>
c00192c3:	50                   	push   eax
c00192c4:	50                   	push   eax
c00192c5:	68 a1 b5 02 c0       	push   0xc002b5a1
c00192ca:	eb 23                	jmp    c00192ef <CPU::detectFeatures()+0x955>
c00192cc:	83 f8 0c             	cmp    eax,0xc
c00192cf:	75 09                	jne    c00192da <CPU::detectFeatures()+0x940>
c00192d1:	55                   	push   ebp
c00192d2:	55                   	push   ebp
c00192d3:	68 af b5 02 c0       	push   0xc002b5af
c00192d8:	eb 15                	jmp    c00192ef <CPU::detectFeatures()+0x955>
c00192da:	83 f8 0d             	cmp    eax,0xd
c00192dd:	75 09                	jne    c00192e8 <CPU::detectFeatures()+0x94e>
c00192df:	57                   	push   edi
c00192e0:	57                   	push   edi
c00192e1:	68 ba b5 02 c0       	push   0xc002b5ba
c00192e6:	eb 07                	jmp    c00192ef <CPU::detectFeatures()+0x955>
c00192e8:	56                   	push   esi
c00192e9:	56                   	push   esi
c00192ea:	68 ce b5 02 c0       	push   0xc002b5ce
c00192ef:	53                   	push   ebx
c00192f0:	e8 2f aa ff ff       	call   c0013d24 <Device::setName(char const*)>
c00192f5:	83 c4 10             	add    esp,0x10
c00192f8:	e9 80 00 00 00       	jmp    c001937d <CPU::detectFeatures()+0x9e3>
c00192fd:	51                   	push   ecx
c00192fe:	51                   	push   ecx
c00192ff:	68 1a b4 02 c0       	push   0xc002b41a
c0019304:	55                   	push   ebp
c0019305:	e8 02 75 fe ff       	call   c000080c <strcpy>
c001930a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019314:	e8 95 6f fe ff       	call   c00002ae <is486>
c0019319:	83 c4 10             	add    esp,0x10
c001931c:	85 c0                	test   eax,eax
c001931e:	74 2b                	je     c001934b <CPU::detectFeatures()+0x9b1>
c0019320:	52                   	push   edx
c0019321:	52                   	push   edx
c0019322:	68 da b5 02 c0       	push   0xc002b5da
c0019327:	53                   	push   ebx
c0019328:	e8 f7 a9 ff ff       	call   c0013d24 <Device::setName(char const*)>
c001932d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019334:	0f 20 c0             	mov    eax,cr0
c0019337:	83 e0 14             	and    eax,0x14
c001933a:	83 c4 10             	add    esp,0x10
c001933d:	83 f8 04             	cmp    eax,0x4
c0019340:	75 1f                	jne    c0019361 <CPU::detectFeatures()+0x9c7>
c0019342:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019349:	eb 32                	jmp    c001937d <CPU::detectFeatures()+0x9e3>
c001934b:	50                   	push   eax
c001934c:	50                   	push   eax
c001934d:	68 e5 b5 02 c0       	push   0xc002b5e5
c0019352:	53                   	push   ebx
c0019353:	e8 cc a9 ff ff       	call   c0013d24 <Device::setName(char const*)>
c0019358:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001935f:	eb d3                	jmp    c0019334 <CPU::detectFeatures()+0x99a>
c0019361:	e8 23 6f fe ff       	call   c0000289 <hasLegacyFPU>
c0019366:	83 e0 01             	and    eax,0x1
c0019369:	8d 14 00             	lea    edx,[eax+eax*1]
c001936c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019372:	83 e0 fd             	and    eax,0xfffffffd
c0019375:	09 d0                	or     eax,edx
c0019377:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001937d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019384:	83 c4 4c             	add    esp,0x4c
c0019387:	5b                   	pop    ebx
c0019388:	5e                   	pop    esi
c0019389:	5f                   	pop    edi
c001938a:	5d                   	pop    ebp
c001938b:	c3                   	ret    

c001938c <CPU::setupSMEP()>:
c001938c:	0f 20 e0             	mov    eax,cr4
c001938f:	0d 00 00 10 00       	or     eax,0x100000
c0019394:	0f 22 e0             	mov    cr4,eax
c0019397:	c3                   	ret    

c0019398 <CPU::setupUMIP()>:
c0019398:	0f 20 e0             	mov    eax,cr4
c001939b:	80 cc 08             	or     ah,0x8
c001939e:	0f 22 e0             	mov    cr4,eax
c00193a1:	c3                   	ret    

c00193a2 <CPU::setupTSC()>:
c00193a2:	0f 20 e0             	mov    eax,cr4
c00193a5:	83 c8 04             	or     eax,0x4
c00193a8:	0f 22 e0             	mov    cr4,eax
c00193ab:	c3                   	ret    

c00193ac <CPU::setupLargePages()>:
c00193ac:	0f 20 e0             	mov    eax,cr4
c00193af:	83 c8 10             	or     eax,0x10
c00193b2:	0f 22 e0             	mov    cr4,eax
c00193b5:	c3                   	ret    

c00193b6 <CPU::setupPAT()>:
c00193b6:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00193bb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00193c2:	74 2c                	je     c00193f0 <CPU::setupPAT()+0x3a>
c00193c4:	53                   	push   ebx
c00193c5:	83 ec 10             	sub    esp,0x10
c00193c8:	68 77 02 00 00       	push   0x277
c00193cd:	50                   	push   eax
c00193ce:	e8 6d 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00193d3:	83 e2 f8             	and    edx,0xfffffff8
c00193d6:	83 ca 01             	or     edx,0x1
c00193d9:	52                   	push   edx
c00193da:	50                   	push   eax
c00193db:	68 77 02 00 00       	push   0x277
c00193e0:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c00193e6:	e8 81 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00193eb:	83 c4 28             	add    esp,0x28
c00193ee:	5b                   	pop    ebx
c00193ef:	c3                   	ret    
c00193f0:	c3                   	ret    
c00193f1:	90                   	nop

c00193f2 <CPU::setupMTRR()>:
c00193f2:	c3                   	ret    
c00193f3:	90                   	nop

c00193f4 <CPU::setupGlobalPages()>:
c00193f4:	0f 20 e0             	mov    eax,cr4
c00193f7:	0c 80                	or     al,0x80
c00193f9:	0f 22 e0             	mov    cr4,eax
c00193fc:	c3                   	ret    
c00193fd:	90                   	nop

c00193fe <CPU::allowUsermodeDataAccess()>:
c00193fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019402:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019409:	74 03                	je     c001940e <CPU::allowUsermodeDataAccess()+0x10>
c001940b:	0f 01 cb             	stac   
c001940e:	c3                   	ret    
c001940f:	90                   	nop

c0019410 <CPU::prohibitUsermodeDataAccess()>:
c0019410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019414:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001941b:	74 03                	je     c0019420 <CPU::prohibitUsermodeDataAccess()+0x10>
c001941d:	0f 01 ca             	clac   
c0019420:	c3                   	ret    
c0019421:	90                   	nop

c0019422 <CPU::setupSMAP()>:
c0019422:	0f 20 e0             	mov    eax,cr4
c0019425:	0d 00 00 20 00       	or     eax,0x200000
c001942a:	0f 22 e0             	mov    cr4,eax
c001942d:	eb e1                	jmp    c0019410 <CPU::prohibitUsermodeDataAccess()>
c001942f:	90                   	nop

c0019430 <CPU::setupFeatures()>:
c0019430:	83 ec 0c             	sub    esp,0xc
c0019433:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019437:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001943e:	74 07                	je     c0019447 <CPU::setupFeatures()+0x17>
c0019440:	52                   	push   edx
c0019441:	e8 46 ff ff ff       	call   c001938c <CPU::setupSMEP()>
c0019446:	58                   	pop    eax
c0019447:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001944e:	74 07                	je     c0019457 <CPU::setupFeatures()+0x27>
c0019450:	52                   	push   edx
c0019451:	e8 cc ff ff ff       	call   c0019422 <CPU::setupSMAP()>
c0019456:	58                   	pop    eax
c0019457:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001945e:	74 07                	je     c0019467 <CPU::setupFeatures()+0x37>
c0019460:	52                   	push   edx
c0019461:	e8 32 ff ff ff       	call   c0019398 <CPU::setupUMIP()>
c0019466:	58                   	pop    eax
c0019467:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001946e:	74 07                	je     c0019477 <CPU::setupFeatures()+0x47>
c0019470:	52                   	push   edx
c0019471:	e8 2c ff ff ff       	call   c00193a2 <CPU::setupTSC()>
c0019476:	58                   	pop    eax
c0019477:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001947e:	74 07                	je     c0019487 <CPU::setupFeatures()+0x57>
c0019480:	52                   	push   edx
c0019481:	e8 26 ff ff ff       	call   c00193ac <CPU::setupLargePages()>
c0019486:	59                   	pop    ecx
c0019487:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001948e:	74 07                	je     c0019497 <CPU::setupFeatures()+0x67>
c0019490:	52                   	push   edx
c0019491:	e8 5e ff ff ff       	call   c00193f4 <CPU::setupGlobalPages()>
c0019496:	58                   	pop    eax
c0019497:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001949e:	74 0c                	je     c00194ac <CPU::setupFeatures()+0x7c>
c00194a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00194a4:	83 c4 0c             	add    esp,0xc
c00194a7:	e9 0a ff ff ff       	jmp    c00193b6 <CPU::setupPAT()>
c00194ac:	83 c4 0c             	add    esp,0xc
c00194af:	c3                   	ret    

c00194b0 <CPU::open(int, int, void*)>:
c00194b0:	57                   	push   edi
c00194b1:	56                   	push   esi
c00194b2:	53                   	push   ebx
c00194b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00194b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00194bb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00194c1:	83 ec 0c             	sub    esp,0xc
c00194c4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00194ca:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00194d0:	50                   	push   eax
c00194d1:	e8 58 59 ff ff       	call   c000ee2e <GDT::setup()>
c00194d6:	83 c4 0c             	add    esp,0xc
c00194d9:	6a 00                	push   0x0
c00194db:	68 ef be ad de       	push   0xdeadbeef
c00194e0:	57                   	push   edi
c00194e1:	e8 be 76 ff ff       	call   c0010ba4 <TSS::setup(unsigned long, unsigned long)>
c00194e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00194e9:	e8 96 76 ff ff       	call   c0010b84 <TSS::flush()>
c00194ee:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00194f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00194f7:	e8 96 5b ff ff       	call   c000f092 <IDT::setup()>
c00194fc:	b8 00 04 00 00       	mov    eax,0x400
c0019501:	0f 23 f8             	mov    db7,eax
c0019504:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001950e:	e8 82 64 ff ff       	call   c000f995 <Phys::allocatePage()>
c0019513:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019519:	89 30                	mov    DWORD PTR [eax],esi
c001951b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019521:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019524:	58                   	pop    eax
c0019525:	5a                   	pop    edx
c0019526:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001952c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019530:	e8 7f 87 ff ff       	call   c0011cb4 <VAS::setCPUSpecific(unsigned long)>
c0019535:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019538:	e8 5d f4 ff ff       	call   c001899a <CPU::detectFeatures()>
c001953d:	e8 35 bc ff ff       	call   c0015177 <setupInterruptController()>
c0019542:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019548:	a1 20 da 02 c0       	mov    eax,ds:0xc002da20
c001954d:	83 e0 10             	and    eax,0x10
c0019550:	83 f8 01             	cmp    eax,0x1
c0019553:	19 c0                	sbb    eax,eax
c0019555:	83 e0 46             	and    eax,0x46
c0019558:	83 c0 1e             	add    eax,0x1e
c001955b:	89 04 24             	mov    DWORD PTR [esp],eax
c001955e:	e8 02 d2 ff ff       	call   c0016765 <setupTimer(int)>
c0019563:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019569:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001956c:	e8 bf fe ff ff       	call   c0019430 <CPU::setupFeatures()>
c0019571:	83 c4 10             	add    esp,0x10
c0019574:	31 c0                	xor    eax,eax
c0019576:	5b                   	pop    ebx
c0019577:	5e                   	pop    esi
c0019578:	5f                   	pop    edi
c0019579:	c3                   	ret    

c001957a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001957a:	57                   	push   edi
c001957b:	56                   	push   esi
c001957c:	53                   	push   ebx
c001957d:	51                   	push   ecx
c001957e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019582:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019585:	0f 02 c0             	lar    eax,ax
c0019588:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001958b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001958f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019592:	88 ca                	mov    dl,cl
c0019594:	c0 ea 06             	shr    dl,0x6
c0019597:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001959b:	89 ca                	mov    edx,ecx
c001959d:	66 c1 ea 03          	shr    dx,0x3
c00195a1:	83 e2 07             	and    edx,0x7
c00195a4:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00195a9:	88 17                	mov    BYTE PTR [edi],dl
c00195ab:	0f 84 a6 01 00 00    	je     c0019757 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00195b1:	83 e1 07             	and    ecx,0x7
c00195b4:	80 f9 04             	cmp    cl,0x4
c00195b7:	0f 84 98 00 00 00    	je     c0019655 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00195bd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00195c2:	0f 95 c0             	setne  al
c00195c5:	80 f9 05             	cmp    cl,0x5
c00195c8:	0f 95 c2             	setne  dl
c00195cb:	08 c2                	or     dl,al
c00195cd:	74 79                	je     c0019648 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00195cf:	84 c9                	test   cl,cl
c00195d1:	75 05                	jne    c00195d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00195d3:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195d6:	eb 3c                	jmp    c0019614 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195d8:	80 f9 01             	cmp    cl,0x1
c00195db:	75 05                	jne    c00195e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00195dd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195e0:	eb 32                	jmp    c0019614 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195e2:	80 f9 02             	cmp    cl,0x2
c00195e5:	75 05                	jne    c00195ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00195e7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195ea:	eb 28                	jmp    c0019614 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195ec:	31 c0                	xor    eax,eax
c00195ee:	80 f9 03             	cmp    cl,0x3
c00195f1:	75 05                	jne    c00195f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00195f3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195f6:	eb 1c                	jmp    c0019614 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195f8:	80 f9 05             	cmp    cl,0x5
c00195fb:	75 05                	jne    c0019602 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00195fd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019600:	eb 12                	jmp    c0019614 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019602:	80 f9 06             	cmp    cl,0x6
c0019605:	75 05                	jne    c001960c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019607:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001960a:	eb 08                	jmp    c0019614 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001960c:	80 f9 07             	cmp    cl,0x7
c001960f:	75 03                	jne    c0019614 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019611:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019614:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019619:	75 10                	jne    c001962b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001961b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001961f:	b9 03 00 00 00       	mov    ecx,0x3
c0019624:	01 d0                	add    eax,edx
c0019626:	e9 37 01 00 00       	jmp    c0019762 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001962b:	b9 02 00 00 00       	mov    ecx,0x2
c0019630:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019635:	0f 85 27 01 00 00    	jne    c0019762 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001963b:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001963e:	b9 06 00 00 00       	mov    ecx,0x6
c0019643:	e9 1a 01 00 00       	jmp    c0019762 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019648:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001964b:	b9 06 00 00 00       	mov    ecx,0x6
c0019650:	e9 0f 01 00 00       	jmp    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019655:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019658:	88 ca                	mov    dl,cl
c001965a:	c0 ea 06             	shr    dl,0x6
c001965d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019661:	89 ca                	mov    edx,ecx
c0019663:	66 c1 ea 03          	shr    dx,0x3
c0019667:	83 e2 07             	and    edx,0x7
c001966a:	80 e1 07             	and    cl,0x7
c001966d:	75 05                	jne    c0019674 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001966f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019672:	eb 4c                	jmp    c00196c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019674:	80 f9 01             	cmp    cl,0x1
c0019677:	75 05                	jne    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019679:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001967c:	eb 42                	jmp    c00196c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001967e:	80 f9 02             	cmp    cl,0x2
c0019681:	75 05                	jne    c0019688 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019683:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019686:	eb 38                	jmp    c00196c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019688:	80 f9 03             	cmp    cl,0x3
c001968b:	75 05                	jne    c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001968d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019690:	eb 2e                	jmp    c00196c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019692:	80 f9 04             	cmp    cl,0x4
c0019695:	75 12                	jne    c00196a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019697:	f6 c4 60             	test   ah,0x60
c001969a:	75 08                	jne    c00196a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001969c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001969f:	8d 78 14             	lea    edi,[eax+0x14]
c00196a2:	eb 1c                	jmp    c00196c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196a4:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00196a7:	eb 17                	jmp    c00196c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196a9:	80 f9 05             	cmp    cl,0x5
c00196ac:	75 05                	jne    c00196b3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00196ae:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00196b1:	eb 0d                	jmp    c00196c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196b3:	80 f9 06             	cmp    cl,0x6
c00196b6:	75 05                	jne    c00196bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00196b8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00196bb:	eb 03                	jmp    c00196c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196bd:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00196c0:	84 d2                	test   dl,dl
c00196c2:	75 05                	jne    c00196c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00196c4:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00196c7:	eb 3c                	jmp    c0019705 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196c9:	80 fa 01             	cmp    dl,0x1
c00196cc:	75 05                	jne    c00196d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00196ce:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196d1:	eb 32                	jmp    c0019705 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196d3:	80 fa 02             	cmp    dl,0x2
c00196d6:	75 05                	jne    c00196dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00196d8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00196db:	eb 28                	jmp    c0019705 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196dd:	80 fa 03             	cmp    dl,0x3
c00196e0:	75 05                	jne    c00196e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00196e2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00196e5:	eb 1e                	jmp    c0019705 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196e7:	31 c0                	xor    eax,eax
c00196e9:	80 fa 04             	cmp    dl,0x4
c00196ec:	74 17                	je     c0019705 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196ee:	80 fa 05             	cmp    dl,0x5
c00196f1:	75 05                	jne    c00196f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00196f3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00196f6:	eb 0d                	jmp    c0019705 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196f8:	80 fa 06             	cmp    dl,0x6
c00196fb:	75 05                	jne    c0019702 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00196fd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019700:	eb 03                	jmp    c0019705 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019702:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019705:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001970a:	0f 94 c2             	sete   dl
c001970d:	80 f9 05             	cmp    cl,0x5
c0019710:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019714:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019719:	d3 e0                	shl    eax,cl
c001971b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001971f:	74 0a                	je     c001972b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019721:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019724:	b9 07 00 00 00       	mov    ecx,0x7
c0019729:	eb 37                	jmp    c0019762 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001972b:	01 f8                	add    eax,edi
c001972d:	b9 03 00 00 00       	mov    ecx,0x3
c0019732:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019737:	74 2b                	je     c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019739:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001973e:	75 0d                	jne    c001974d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019740:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019744:	01 c8                	add    eax,ecx
c0019746:	b9 04 00 00 00       	mov    ecx,0x4
c001974b:	eb 17                	jmp    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001974d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019750:	b9 07 00 00 00       	mov    ecx,0x7
c0019755:	eb 0d                	jmp    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019757:	b9 02 00 00 00       	mov    ecx,0x2
c001975c:	b2 01                	mov    dl,0x1
c001975e:	31 c0                	xor    eax,eax
c0019760:	eb 02                	jmp    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019762:	31 d2                	xor    edx,edx
c0019764:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019768:	89 0b                	mov    DWORD PTR [ebx],ecx
c001976a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001976e:	88 11                	mov    BYTE PTR [ecx],dl
c0019770:	5a                   	pop    edx
c0019771:	5b                   	pop    ebx
c0019772:	5e                   	pop    esi
c0019773:	5f                   	pop    edi
c0019774:	c3                   	ret    

c0019775 <Krnl::smpEntry()>:
c0019775:	eb fe                	jmp    c0019775 <Krnl::smpEntry()>

c0019777 <Krnl::startCPU(int)>:
c0019777:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001977c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019783:	0f 84 36 01 00 00    	je     c00198bf <Krnl::startCPU(int)+0x148>
c0019789:	53                   	push   ebx
c001978a:	83 ec 10             	sub    esp,0x10
c001978d:	fa                   	cli    
c001978e:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c0019794:	6a 1b                	push   0x1b
c0019796:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c001979c:	e8 9f 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00197a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00197a6:	89 c3                	mov    ebx,eax
c00197a8:	58                   	pop    eax
c00197a9:	5a                   	pop    edx
c00197aa:	53                   	push   ebx
c00197ab:	68 1c b6 02 c0       	push   0xc002b61c
c00197b0:	e8 40 8f ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00197b5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197c3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197cd:	c1 e0 18             	shl    eax,0x18
c00197d0:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00197d6:	83 c4 10             	add    esp,0x10
c00197d9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00197df:	09 c2                	or     edx,eax
c00197e1:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00197e7:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00197ed:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197f3:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197f9:	80 cd c5             	or     ch,0xc5
c00197fc:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019802:	f3 90                	pause  
c0019804:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019806:	0f ba e1 0c          	bt     ecx,0xc
c001980a:	72 f6                	jb     c0019802 <Krnl::startCPU(int)+0x8b>
c001980c:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019812:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019818:	09 c1                	or     ecx,eax
c001981a:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019820:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019826:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001982c:	80 cd 85             	or     ch,0x85
c001982f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019835:	f3 90                	pause  
c0019837:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019839:	0f ba e1 0c          	bt     ecx,0xc
c001983d:	72 f6                	jb     c0019835 <Krnl::startCPU(int)+0xbe>
c001983f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019849:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001984f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019855:	09 c1                	or     ecx,eax
c0019857:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001985d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019863:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019869:	81 c9 02 06 00 00    	or     ecx,0x602
c001986f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019875:	f3 90                	pause  
c0019877:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019879:	0f ba e1 0c          	bt     ecx,0xc
c001987d:	72 f6                	jb     c0019875 <Krnl::startCPU(int)+0xfe>
c001987f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019889:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001988f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019895:	09 c8                	or     eax,ecx
c0019897:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001989d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00198a3:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00198a8:	0d 02 06 00 00       	or     eax,0x602
c00198ad:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00198b3:	f3 90                	pause  
c00198b5:	8b 02                	mov    eax,DWORD PTR [edx]
c00198b7:	0f ba e0 0c          	bt     eax,0xc
c00198bb:	72 f6                	jb     c00198b3 <Krnl::startCPU(int)+0x13c>
c00198bd:	eb fe                	jmp    c00198bd <Krnl::startCPU(int)+0x146>
c00198bf:	c3                   	ret    

c00198c0 <Krnl::startCPUs()>:
c00198c0:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00198c5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00198cb:	88 c2                	mov    dl,al
c00198cd:	83 e2 0a             	and    edx,0xa
c00198d0:	80 fa 0a             	cmp    dl,0xa
c00198d3:	75 09                	jne    c00198de <Krnl::startCPUs()+0x1e>
c00198d5:	a8 01                	test   al,0x1
c00198d7:	74 05                	je     c00198de <Krnl::startCPUs()+0x1e>
c00198d9:	e9 bd 68 fe ff       	jmp    c000019b <prepareTramp>
c00198de:	c3                   	ret    
c00198df:	90                   	nop

c00198e0 <EnvVarContainer::getEnv(char const*)>:
c00198e0:	57                   	push   edi
c00198e1:	56                   	push   esi
c00198e2:	53                   	push   ebx
c00198e3:	31 db                	xor    ebx,ebx
c00198e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198e9:	39 1e                	cmp    DWORD PTR [esi],ebx
c00198eb:	7e 2b                	jle    c0019918 <EnvVarContainer::getEnv(char const*)+0x38>
c00198ed:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198f4:	50                   	push   eax
c00198f5:	50                   	push   eax
c00198f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198f9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019900:	e8 93 6f fe ff       	call   c0000898 <strcmp>
c0019905:	83 c4 10             	add    esp,0x10
c0019908:	85 c0                	test   eax,eax
c001990a:	75 09                	jne    c0019915 <EnvVarContainer::getEnv(char const*)+0x35>
c001990c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001990f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019913:	eb 05                	jmp    c001991a <EnvVarContainer::getEnv(char const*)+0x3a>
c0019915:	43                   	inc    ebx
c0019916:	eb d1                	jmp    c00198e9 <EnvVarContainer::getEnv(char const*)+0x9>
c0019918:	31 c0                	xor    eax,eax
c001991a:	5b                   	pop    ebx
c001991b:	5e                   	pop    esi
c001991c:	5f                   	pop    edi
c001991d:	c3                   	ret    

c001991e <EnvVarContainer::setEnv(char const*, char const*)>:
c001991e:	55                   	push   ebp
c001991f:	57                   	push   edi
c0019920:	56                   	push   esi
c0019921:	53                   	push   ebx
c0019922:	83 ec 28             	sub    esp,0x28
c0019925:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019929:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001992d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019931:	56                   	push   esi
c0019932:	e8 35 6e fe ff       	call   c000076c <strlen>
c0019937:	40                   	inc    eax
c0019938:	89 04 24             	mov    DWORD PTR [esp],eax
c001993b:	e8 59 5c ff ff       	call   c000f599 <malloc>
c0019940:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019943:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019947:	e8 20 6e fe ff       	call   c000076c <strlen>
c001994c:	40                   	inc    eax
c001994d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019950:	e8 44 5c ff ff       	call   c000f599 <malloc>
c0019955:	89 34 24             	mov    DWORD PTR [esp],esi
c0019958:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001995c:	e8 0b 6e fe ff       	call   c000076c <strlen>
c0019961:	83 c4 0c             	add    esp,0xc
c0019964:	40                   	inc    eax
c0019965:	50                   	push   eax
c0019966:	6a 00                	push   0x0
c0019968:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001996c:	e8 df 6d fe ff       	call   c0000750 <memset>
c0019971:	89 34 24             	mov    DWORD PTR [esp],esi
c0019974:	e8 f3 6d fe ff       	call   c000076c <strlen>
c0019979:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001997d:	8d 48 01             	lea    ecx,[eax+0x1]
c0019980:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019982:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019985:	89 de                	mov    esi,ebx
c0019987:	e8 e0 6d fe ff       	call   c000076c <strlen>
c001998c:	83 c4 0c             	add    esp,0xc
c001998f:	40                   	inc    eax
c0019990:	50                   	push   eax
c0019991:	6a 00                	push   0x0
c0019993:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019997:	e8 b4 6d fe ff       	call   c0000750 <memset>
c001999c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001999f:	e8 c8 6d fe ff       	call   c000076c <strlen>
c00199a4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00199a8:	8d 48 01             	lea    ecx,[eax+0x1]
c00199ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00199b0:	40                   	inc    eax
c00199b1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00199b4:	c1 e0 03             	shl    eax,0x3
c00199b7:	5a                   	pop    edx
c00199b8:	59                   	pop    ecx
c00199b9:	50                   	push   eax
c00199ba:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00199bd:	e8 c3 5b ff ff       	call   c000f585 <realloc>
c00199c2:	8d 74 24 18          	lea    esi,[esp+0x18]
c00199c6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199c9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00199cc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00199d0:	b9 08 00 00 00       	mov    ecx,0x8
c00199d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199d7:	83 c4 2c             	add    esp,0x2c
c00199da:	5b                   	pop    ebx
c00199db:	5e                   	pop    esi
c00199dc:	5f                   	pop    edi
c00199dd:	5d                   	pop    ebp
c00199de:	c3                   	ret    
c00199df:	90                   	nop

c00199e0 <EnvVarContainer::deleteEnv(char const*)>:
c00199e0:	c3                   	ret    
c00199e1:	90                   	nop

c00199e2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00199e2:	55                   	push   ebp
c00199e3:	57                   	push   edi
c00199e4:	56                   	push   esi
c00199e5:	53                   	push   ebx
c00199e6:	81 ec 38 01 00 00    	sub    esp,0x138
c00199ec:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00199f3:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00199fa:	68 14 01 00 00       	push   0x114
c00199ff:	e8 95 5b ff ff       	call   c000f599 <malloc>
c0019a04:	83 c4 0c             	add    esp,0xc
c0019a07:	89 c3                	mov    ebx,eax
c0019a09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019a0c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019a13:	50                   	push   eax
c0019a14:	e8 3b 92 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c0019a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a1c:	e8 05 95 ff ff       	call   c0012f26 <File::exists()>
c0019a21:	83 c4 10             	add    esp,0x10
c0019a24:	84 c0                	test   al,al
c0019a26:	75 31                	jne    c0019a59 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019a28:	50                   	push   eax
c0019a29:	50                   	push   eax
c0019a2a:	6a 12                	push   0x12
c0019a2c:	53                   	push   ebx
c0019a2d:	e8 86 92 ff ff       	call   c0012cb8 <File::open(FileOpenMode)>
c0019a32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a34:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019a37:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a3a:	e8 2d 6d fe ff       	call   c000076c <strlen>
c0019a3f:	5a                   	pop    edx
c0019a40:	31 d2                	xor    edx,edx
c0019a42:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a46:	51                   	push   ecx
c0019a47:	56                   	push   esi
c0019a48:	52                   	push   edx
c0019a49:	50                   	push   eax
c0019a4a:	53                   	push   ebx
c0019a4b:	ff d7                	call   edi
c0019a4d:	83 c4 14             	add    esp,0x14
c0019a50:	53                   	push   ebx
c0019a51:	e8 c0 92 ff ff       	call   c0012d16 <File::close()>
c0019a56:	83 c4 10             	add    esp,0x10
c0019a59:	56                   	push   esi
c0019a5a:	31 f6                	xor    esi,esi
c0019a5c:	68 00 01 00 00       	push   0x100
c0019a61:	6a 00                	push   0x0
c0019a63:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a67:	50                   	push   eax
c0019a68:	e8 e3 6c fe ff       	call   c0000750 <memset>
c0019a6d:	5f                   	pop    edi
c0019a6e:	58                   	pop    eax
c0019a6f:	6a 01                	push   0x1
c0019a71:	53                   	push   ebx
c0019a72:	e8 41 92 ff ff       	call   c0012cb8 <File::open(FileOpenMode)>
c0019a77:	83 c4 10             	add    esp,0x10
c0019a7a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a82:	83 ec 0c             	sub    esp,0xc
c0019a85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a87:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a8b:	51                   	push   ecx
c0019a8c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a90:	52                   	push   edx
c0019a91:	6a 00                	push   0x0
c0019a93:	6a 01                	push   0x1
c0019a95:	53                   	push   ebx
c0019a96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a99:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a9d:	83 c4 20             	add    esp,0x20
c0019aa0:	3c 0d                	cmp    al,0xd
c0019aa2:	0f 84 09 01 00 00    	je     c0019bb1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019aa8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019aad:	0f 84 ef 00 00 00    	je     c0019ba2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019ab3:	3c 0a                	cmp    al,0xa
c0019ab5:	74 13                	je     c0019aca <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019ab7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019abc:	74 0c                	je     c0019aca <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019abe:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019ac4:	0f 8e d8 00 00 00    	jle    c0019ba2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019aca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ace:	83 ec 0c             	sub    esp,0xc
c0019ad1:	8d 78 01             	lea    edi,[eax+0x1]
c0019ad4:	57                   	push   edi
c0019ad5:	e8 bf 5a ff ff       	call   c000f599 <malloc>
c0019ada:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019ade:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019ae2:	8d 56 04             	lea    edx,[esi+0x4]
c0019ae5:	89 14 24             	mov    DWORD PTR [esp],edx
c0019ae8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019aec:	e8 a8 5a ff ff       	call   c000f599 <malloc>
c0019af1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019af5:	83 c4 0c             	add    esp,0xc
c0019af8:	57                   	push   edi
c0019af9:	6a 00                	push   0x0
c0019afb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019aff:	e8 4c 6c fe ff       	call   c0000750 <memset>
c0019b04:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019b08:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019b0c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019b10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b12:	83 c4 0c             	add    esp,0xc
c0019b15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b19:	52                   	push   edx
c0019b1a:	6a 00                	push   0x0
c0019b1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b20:	e8 2b 6c fe ff       	call   c0000750 <memset>
c0019b25:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019b29:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019b2d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b30:	e8 37 6c fe ff       	call   c000076c <strlen>
c0019b35:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019b39:	89 c1                	mov    ecx,eax
c0019b3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b3d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b40:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019b43:	40                   	inc    eax
c0019b44:	83 c4 10             	add    esp,0x10
c0019b47:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b4a:	85 d2                	test   edx,edx
c0019b4c:	75 0c                	jne    c0019b5a <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019b4e:	83 ec 0c             	sub    esp,0xc
c0019b51:	6a 08                	push   0x8
c0019b53:	e8 41 5a ff ff       	call   c000f599 <malloc>
c0019b58:	eb 0c                	jmp    c0019b66 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019b5a:	c1 e0 03             	shl    eax,0x3
c0019b5d:	51                   	push   ecx
c0019b5e:	51                   	push   ecx
c0019b5f:	50                   	push   eax
c0019b60:	52                   	push   edx
c0019b61:	e8 1f 5a ff ff       	call   c000f585 <realloc>
c0019b66:	83 c4 10             	add    esp,0x10
c0019b69:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b6c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b6f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019b72:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b76:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b7a:	b9 08 00 00 00       	mov    ecx,0x8
c0019b7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b81:	31 f6                	xor    esi,esi
c0019b83:	50                   	push   eax
c0019b84:	68 00 01 00 00       	push   0x100
c0019b89:	6a 00                	push   0x0
c0019b8b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b8f:	50                   	push   eax
c0019b90:	e8 bb 6b fe ff       	call   c0000750 <memset>
c0019b95:	83 c4 10             	add    esp,0x10
c0019b98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019ba0:	eb 0f                	jmp    c0019bb1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019ba2:	3c 3d                	cmp    al,0x3d
c0019ba4:	74 07                	je     c0019bad <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019ba6:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019baa:	46                   	inc    esi
c0019bab:	eb 04                	jmp    c0019bb1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019bad:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019bb1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019bb6:	0f 85 c6 fe ff ff    	jne    c0019a82 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019bbc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019bc2:	5b                   	pop    ebx
c0019bc3:	5e                   	pop    esi
c0019bc4:	5f                   	pop    edi
c0019bc5:	5d                   	pop    ebp
c0019bc6:	c3                   	ret    
c0019bc7:	90                   	nop

c0019bc8 <EnvVarContainer::__loadSystem()>:
c0019bc8:	83 ec 10             	sub    esp,0x10
c0019bcb:	68 40 cf 02 c0       	push   0xc002cf40
c0019bd0:	68 2d b6 02 c0       	push   0xc002b62d
c0019bd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bd9:	e8 04 fe ff ff       	call   c00199e2 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019bde:	83 c4 1c             	add    esp,0x1c
c0019be1:	c3                   	ret    

c0019be2 <EnvVarContainer::__loadUser()>:
c0019be2:	c3                   	ret    
c0019be3:	90                   	nop

c0019be4 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bfd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019c04:	90                   	nop
c0019c05:	c3                   	ret    

c0019c06 <EnvVarContainer::~EnvVarContainer()>:
c0019c06:	83 ec 0c             	sub    esp,0xc
c0019c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c10:	85 c0                	test   eax,eax
c0019c12:	74 1d                	je     c0019c31 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c18:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c1a:	85 c0                	test   eax,eax
c0019c1c:	74 13                	je     c0019c31 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c25:	83 ec 0c             	sub    esp,0xc
c0019c28:	50                   	push   eax
c0019c29:	e8 7b 59 ff ff       	call   c000f5a9 <free>
c0019c2e:	83 c4 10             	add    esp,0x10
c0019c31:	90                   	nop
c0019c32:	83 c4 0c             	add    esp,0xc
c0019c35:	c3                   	ret    

c0019c36 <Krnl::getEnv(Process*, char const*)>:
c0019c36:	53                   	push   ebx
c0019c37:	83 ec 08             	sub    esp,0x8
c0019c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c42:	39 05 50 0f 03 c0    	cmp    DWORD PTR ds:0xc0030f50,eax
c0019c48:	74 04                	je     c0019c4e <Krnl::getEnv(Process*, char const*)+0x18>
c0019c4a:	85 c0                	test   eax,eax
c0019c4c:	75 0b                	jne    c0019c59 <Krnl::getEnv(Process*, char const*)+0x23>
c0019c4e:	a1 34 05 03 c0       	mov    eax,ds:0xc0030534
c0019c53:	85 c0                	test   eax,eax
c0019c55:	75 19                	jne    c0019c70 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c57:	eb 27                	jmp    c0019c80 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c59:	52                   	push   edx
c0019c5a:	52                   	push   edx
c0019c5b:	53                   	push   ebx
c0019c5c:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c62:	e8 79 fc ff ff       	call   c00198e0 <EnvVarContainer::getEnv(char const*)>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	85 c0                	test   eax,eax
c0019c6c:	75 28                	jne    c0019c96 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c6e:	eb de                	jmp    c0019c4e <Krnl::getEnv(Process*, char const*)+0x18>
c0019c70:	52                   	push   edx
c0019c71:	52                   	push   edx
c0019c72:	53                   	push   ebx
c0019c73:	50                   	push   eax
c0019c74:	e8 67 fc ff ff       	call   c00198e0 <EnvVarContainer::getEnv(char const*)>
c0019c79:	83 c4 10             	add    esp,0x10
c0019c7c:	85 c0                	test   eax,eax
c0019c7e:	75 16                	jne    c0019c96 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c80:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c84:	a1 38 05 03 c0       	mov    eax,ds:0xc0030538
c0019c89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c8d:	83 c4 08             	add    esp,0x8
c0019c90:	5b                   	pop    ebx
c0019c91:	e9 4a fc ff ff       	jmp    c00198e0 <EnvVarContainer::getEnv(char const*)>
c0019c96:	83 c4 08             	add    esp,0x8
c0019c99:	5b                   	pop    ebx
c0019c9a:	c3                   	ret    

c0019c9b <Krnl::setEnvSystem(char const*, char const*)>:
c0019c9b:	83 ec 10             	sub    esp,0x10
c0019c9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ca2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ca6:	ff 35 38 05 03 c0    	push   DWORD PTR ds:0xc0030538
c0019cac:	e8 6d fc ff ff       	call   c001991e <EnvVarContainer::setEnv(char const*, char const*)>
c0019cb1:	83 c4 1c             	add    esp,0x1c
c0019cb4:	c3                   	ret    

c0019cb5 <Krnl::setEnvUser(char const*, char const*)>:
c0019cb5:	a1 34 05 03 c0       	mov    eax,ds:0xc0030534
c0019cba:	85 c0                	test   eax,eax
c0019cbc:	74 15                	je     c0019cd3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019cbe:	83 ec 10             	sub    esp,0x10
c0019cc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cc9:	50                   	push   eax
c0019cca:	e8 4f fc ff ff       	call   c001991e <EnvVarContainer::setEnv(char const*, char const*)>
c0019ccf:	83 c4 1c             	add    esp,0x1c
c0019cd2:	c3                   	ret    
c0019cd3:	c3                   	ret    

c0019cd4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cd8:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019cde:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ce2:	e9 37 fc ff ff       	jmp    c001991e <EnvVarContainer::setEnv(char const*, char const*)>

c0019ce7 <Krnl::deleteEnvSystem(char const*)>:
c0019ce7:	c3                   	ret    

c0019ce8 <Krnl::deleteEnvUser(char const*)>:
c0019ce8:	c3                   	ret    

c0019ce9 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019ce9:	c3                   	ret    

c0019cea <Krnl::newProcessEnv(Process*)>:
c0019cea:	83 ec 28             	sub    esp,0x28
c0019ced:	6a 0c                	push   0xc
c0019cef:	e8 a5 58 ff ff       	call   c000f599 <malloc>
c0019cf4:	5a                   	pop    edx
c0019cf5:	59                   	pop    ecx
c0019cf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cfa:	50                   	push   eax
c0019cfb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cff:	e8 e0 fe ff ff       	call   c0019be4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d08:	83 c4 2c             	add    esp,0x2c
c0019d0b:	c3                   	ret    

c0019d0c <Krnl::copyProcessEnv(Process*, Process*)>:
c0019d0c:	57                   	push   edi
c0019d0d:	56                   	push   esi
c0019d0e:	53                   	push   ebx
c0019d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d13:	83 ec 0c             	sub    esp,0xc
c0019d16:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019d1c:	6a 0c                	push   0xc
c0019d1e:	e8 76 58 ff ff       	call   c000f599 <malloc>
c0019d23:	89 c3                	mov    ebx,eax
c0019d25:	58                   	pop    eax
c0019d26:	5a                   	pop    edx
c0019d27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d2b:	53                   	push   ebx
c0019d2c:	e8 b3 fe ff ff       	call   c0019be4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d31:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d33:	89 03                	mov    DWORD PTR [ebx],eax
c0019d35:	c1 e0 03             	shl    eax,0x3
c0019d38:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d3b:	e8 59 58 ff ff       	call   c000f599 <malloc>
c0019d40:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d43:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019d45:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019d48:	c1 e1 03             	shl    ecx,0x3
c0019d4b:	89 c7                	mov    edi,eax
c0019d4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d4f:	83 c4 10             	add    esp,0x10
c0019d52:	89 d8                	mov    eax,ebx
c0019d54:	5b                   	pop    ebx
c0019d55:	5e                   	pop    esi
c0019d56:	5f                   	pop    edi
c0019d57:	c3                   	ret    

c0019d58 <Krnl::loadSystemEnv()>:
c0019d58:	53                   	push   ebx
c0019d59:	83 ec 14             	sub    esp,0x14
c0019d5c:	6a 0c                	push   0xc
c0019d5e:	e8 36 58 ff ff       	call   c000f599 <malloc>
c0019d63:	89 c3                	mov    ebx,eax
c0019d65:	58                   	pop    eax
c0019d66:	5a                   	pop    edx
c0019d67:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c0019d6d:	53                   	push   ebx
c0019d6e:	e8 71 fe ff ff       	call   c0019be4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d76:	89 1d 38 05 03 c0    	mov    DWORD PTR ds:0xc0030538,ebx
c0019d7c:	e8 47 fe ff ff       	call   c0019bc8 <EnvVarContainer::__loadSystem()>
c0019d81:	83 c4 18             	add    esp,0x18
c0019d84:	5b                   	pop    ebx
c0019d85:	c3                   	ret    

c0019d86 <Krnl::loadUserEnv()>:
c0019d86:	53                   	push   ebx
c0019d87:	83 ec 14             	sub    esp,0x14
c0019d8a:	6a 0c                	push   0xc
c0019d8c:	e8 08 58 ff ff       	call   c000f599 <malloc>
c0019d91:	89 c3                	mov    ebx,eax
c0019d93:	58                   	pop    eax
c0019d94:	5a                   	pop    edx
c0019d95:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c0019d9b:	53                   	push   ebx
c0019d9c:	e8 43 fe ff ff       	call   c0019be4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019da1:	89 1d 34 05 03 c0    	mov    DWORD PTR ds:0xc0030534,ebx
c0019da7:	83 c4 18             	add    esp,0x18
c0019daa:	5b                   	pop    ebx
c0019dab:	c3                   	ret    

c0019dac <Krnl::flushEnv()>:
c0019dac:	c3                   	ret    

c0019dad <Krnl::getProcessTotalEnvCount(Process*)>:
c0019dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019db1:	8b 15 34 05 03 c0    	mov    edx,DWORD PTR ds:0xc0030534
c0019db7:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019dbd:	a1 38 05 03 c0       	mov    eax,ds:0xc0030538
c0019dc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dc4:	03 01                	add    eax,DWORD PTR [ecx]
c0019dc6:	85 d2                	test   edx,edx
c0019dc8:	74 02                	je     c0019dcc <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019dca:	03 02                	add    eax,DWORD PTR [edx]
c0019dcc:	c3                   	ret    

c0019dcd <Krnl::getProcessEnvPair(Process*, int)>:
c0019dcd:	57                   	push   edi
c0019dce:	56                   	push   esi
c0019dcf:	8b 35 34 05 03 c0    	mov    esi,DWORD PTR ds:0xc0030534
c0019dd5:	53                   	push   ebx
c0019dd6:	85 f6                	test   esi,esi
c0019dd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ddc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019de0:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019de6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019dea:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019dec:	75 16                	jne    c0019e04 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019dee:	39 c2                	cmp    edx,eax
c0019df0:	7c 16                	jl     c0019e08 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019df2:	8b 0d 38 05 03 c0    	mov    ecx,DWORD PTR ds:0xc0030538
c0019df8:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019dfa:	01 c6                	add    esi,eax
c0019dfc:	39 d6                	cmp    esi,edx
c0019dfe:	7e 3c                	jle    c0019e3c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e00:	29 c2                	sub    edx,eax
c0019e02:	eb 04                	jmp    c0019e08 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019e04:	39 c2                	cmp    edx,eax
c0019e06:	7d 05                	jge    c0019e0d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019e08:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019e0b:	eb 20                	jmp    c0019e2d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019e0d:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019e0f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019e12:	39 d1                	cmp    ecx,edx
c0019e14:	7e 04                	jle    c0019e1a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019e16:	29 c2                	sub    edx,eax
c0019e18:	eb 10                	jmp    c0019e2a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019e1a:	8b 35 38 05 03 c0    	mov    esi,DWORD PTR ds:0xc0030538
c0019e20:	03 0e                	add    ecx,DWORD PTR [esi]
c0019e22:	39 d1                	cmp    ecx,edx
c0019e24:	7e 16                	jle    c0019e3c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e26:	29 c2                	sub    edx,eax
c0019e28:	29 fa                	sub    edx,edi
c0019e2a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e2d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019e30:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e32:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019e35:	89 03                	mov    DWORD PTR [ebx],eax
c0019e37:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019e3a:	eb 1d                	jmp    c0019e59 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019e3c:	83 ec 0c             	sub    esp,0xc
c0019e3f:	68 4f b6 02 c0       	push   0xc002b64f
c0019e44:	e8 18 00 00 00       	call   c0019e61 <Krnl::panic(char const*)>
c0019e49:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019e4f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019e56:	83 c4 10             	add    esp,0x10
c0019e59:	89 d8                	mov    eax,ebx
c0019e5b:	5b                   	pop    ebx
c0019e5c:	5e                   	pop    esi
c0019e5d:	5f                   	pop    edi
c0019e5e:	c2 04 00             	ret    0x4

c0019e61 <Krnl::panic(char const*)>:
c0019e61:	55                   	push   ebp
c0019e62:	89 e5                	mov    ebp,esp
c0019e64:	53                   	push   ebx
c0019e65:	83 ec 10             	sub    esp,0x10
c0019e68:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e6b:	fa                   	cli    
c0019e6c:	c6 05 44 05 03 c0 01 	mov    BYTE PTR ds:0xc0030544,0x1
c0019e73:	53                   	push   ebx
c0019e74:	e8 7a 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019e79:	58                   	pop    eax
c0019e7a:	c6 05 40 c9 02 c0 00 	mov    BYTE PTR ds:0xc002c940,0x0
c0019e81:	5a                   	pop    edx
c0019e82:	53                   	push   ebx
c0019e83:	68 69 b6 02 c0       	push   0xc002b669
c0019e88:	e8 68 88 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0019e8d:	59                   	pop    ecx
c0019e8e:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019e93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e99:	e8 b5 64 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0019e9e:	83 c4 0c             	add    esp,0xc
c0019ea1:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019ea6:	6a 01                	push   0x1
c0019ea8:	6a 0f                	push   0xf
c0019eaa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb0:	e8 fd 62 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019eb5:	58                   	pop    eax
c0019eb6:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019ebb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec1:	e8 0e 68 ff ff       	call   c00106d4 <VgaText::clearScreen()>
c0019ec6:	58                   	pop    eax
c0019ec7:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019ecc:	5a                   	pop    edx
c0019ecd:	68 82 b6 02 c0       	push   0xc002b682
c0019ed2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ed8:	e8 83 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019edd:	59                   	pop    ecx
c0019ede:	58                   	pop    eax
c0019edf:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019ee4:	68 28 b7 02 c0       	push   0xc002b728
c0019ee9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eef:	e8 6c 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ef4:	58                   	pop    eax
c0019ef5:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019efa:	5a                   	pop    edx
c0019efb:	68 9e b6 02 c0       	push   0xc002b69e
c0019f00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f06:	e8 55 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f0b:	59                   	pop    ecx
c0019f0c:	58                   	pop    eax
c0019f0d:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019f12:	53                   	push   ebx
c0019f13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f19:	e8 42 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f1e:	58                   	pop    eax
c0019f1f:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019f24:	5a                   	pop    edx
c0019f25:	68 be b6 02 c0       	push   0xc002b6be
c0019f2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f30:	e8 2b 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f35:	a1 40 05 03 c0       	mov    eax,ds:0xc0030540
c0019f3a:	83 c4 10             	add    esp,0x10
c0019f3d:	85 c0                	test   eax,eax
c0019f3f:	74 02                	je     c0019f43 <Krnl::panic(char const*)+0xe2>
c0019f41:	ff d0                	call   eax
c0019f43:	83 ec 0c             	sub    esp,0xc
c0019f46:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f49:	e8 8c 30 00 00       	call   c001cfda <Thr::getDriverNameFromAddress(unsigned long)>
c0019f4e:	83 c4 10             	add    esp,0x10
c0019f51:	89 c3                	mov    ebx,eax
c0019f53:	85 c0                	test   eax,eax
c0019f55:	0f 84 4e 02 00 00    	je     c001a1a9 <Krnl::panic(char const*)+0x348>
c0019f5b:	83 ec 08             	sub    esp,0x8
c0019f5e:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019f63:	68 64 b7 02 c0       	push   0xc002b764
c0019f68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f6e:	e8 ed 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f73:	58                   	pop    eax
c0019f74:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019f79:	5a                   	pop    edx
c0019f7a:	68 9e b6 02 c0       	push   0xc002b69e
c0019f7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f85:	e8 d6 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f8a:	59                   	pop    ecx
c0019f8b:	58                   	pop    eax
c0019f8c:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019f91:	53                   	push   ebx
c0019f92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f98:	e8 c3 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f9d:	83 c4 10             	add    esp,0x10
c0019fa0:	83 ec 08             	sub    esp,0x8
c0019fa3:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019fa8:	68 bd b6 02 c0       	push   0xc002b6bd
c0019fad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb3:	e8 a8 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fb8:	58                   	pop    eax
c0019fb9:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019fbe:	5a                   	pop    edx
c0019fbf:	68 bc b7 02 c0       	push   0xc002b7bc
c0019fc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fca:	e8 91 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fcf:	59                   	pop    ecx
c0019fd0:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019fd5:	5b                   	pop    ebx
c0019fd6:	68 fc b7 02 c0       	push   0xc002b7fc
c0019fdb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fe1:	e8 7a 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fe6:	58                   	pop    eax
c0019fe7:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0019fec:	5a                   	pop    edx
c0019fed:	68 a9 b6 02 c0       	push   0xc002b6a9
c0019ff2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ff8:	e8 63 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ffd:	59                   	pop    ecx
c0019ffe:	5b                   	pop    ebx
c0019fff:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a002:	68 c1 b6 02 c0       	push   0xc002b6c1
c001a007:	e8 e9 86 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001a00c:	58                   	pop    eax
c001a00d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a010:	5a                   	pop    edx
c001a011:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a014:	68 ca b6 02 c0       	push   0xc002b6ca
c001a019:	e8 d7 86 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001a01e:	59                   	pop    ecx
c001a01f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a022:	5b                   	pop    ebx
c001a023:	8b 00                	mov    eax,DWORD PTR [eax]
c001a025:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a028:	68 d3 b6 02 c0       	push   0xc002b6d3
c001a02d:	e8 c3 86 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001a032:	58                   	pop    eax
c001a033:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a038:	5a                   	pop    edx
c001a039:	68 40 b8 02 c0       	push   0xc002b840
c001a03e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a044:	e8 17 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a049:	59                   	pop    ecx
c001a04a:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a04f:	5b                   	pop    ebx
c001a050:	68 dc b6 02 c0       	push   0xc002b6dc
c001a055:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a05b:	e8 00 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a060:	0f 20 c0             	mov    eax,cr0
c001a063:	5a                   	pop    edx
c001a064:	59                   	pop    ecx
c001a065:	50                   	push   eax
c001a066:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a06b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a071:	e8 a4 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a076:	5b                   	pop    ebx
c001a077:	58                   	pop    eax
c001a078:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a07d:	68 e6 b6 02 c0       	push   0xc002b6e6
c001a082:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a088:	e8 d3 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a08d:	0f 20 d0             	mov    eax,cr2
c001a090:	5a                   	pop    edx
c001a091:	59                   	pop    ecx
c001a092:	50                   	push   eax
c001a093:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a098:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a09e:	e8 77 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0a3:	5b                   	pop    ebx
c001a0a4:	58                   	pop    eax
c001a0a5:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a0aa:	68 f0 b6 02 c0       	push   0xc002b6f0
c001a0af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b5:	e8 a6 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0ba:	0f 20 d8             	mov    eax,cr3
c001a0bd:	5a                   	pop    edx
c001a0be:	59                   	pop    ecx
c001a0bf:	50                   	push   eax
c001a0c0:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a0c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0cb:	e8 4a 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0d0:	5b                   	pop    ebx
c001a0d1:	58                   	pop    eax
c001a0d2:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a0d7:	68 03 b7 02 c0       	push   0xc002b703
c001a0dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e2:	e8 79 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0e7:	0f 20 e0             	mov    eax,cr4
c001a0ea:	5a                   	pop    edx
c001a0eb:	59                   	pop    ecx
c001a0ec:	50                   	push   eax
c001a0ed:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a0f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f8:	e8 1d 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0fd:	5b                   	pop    ebx
c001a0fe:	58                   	pop    eax
c001a0ff:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a104:	68 0d b7 02 c0       	push   0xc002b70d
c001a109:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a10f:	e8 4c 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a114:	5a                   	pop    edx
c001a115:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a11a:	59                   	pop    ecx
c001a11b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a121:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a124:	50                   	push   eax
c001a125:	e8 f0 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a12a:	5b                   	pop    ebx
c001a12b:	58                   	pop    eax
c001a12c:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a131:	68 24 b7 02 c0       	push   0xc002b724
c001a136:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a13c:	e8 1f 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a141:	5a                   	pop    edx
c001a142:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a147:	59                   	pop    ecx
c001a148:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a14e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a151:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a154:	50                   	push   eax
c001a155:	e8 c0 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a15a:	5b                   	pop    ebx
c001a15b:	58                   	pop    eax
c001a15c:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a161:	68 24 b7 02 c0       	push   0xc002b724
c001a166:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a16c:	e8 ef 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a171:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a176:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a179:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a17f:	8b 12                	mov    edx,DWORD PTR [edx]
c001a181:	59                   	pop    ecx
c001a182:	5b                   	pop    ebx
c001a183:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a186:	50                   	push   eax
c001a187:	e8 8e 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a18c:	83 c4 10             	add    esp,0x10
c001a18f:	b2 fe                	mov    dl,0xfe
c001a191:	e4 60                	in     al,0x60
c001a193:	3c 1c                	cmp    al,0x1c
c001a195:	74 04                	je     c001a19b <Krnl::panic(char const*)+0x33a>
c001a197:	3c 5a                	cmp    al,0x5a
c001a199:	75 f6                	jne    c001a191 <Krnl::panic(char const*)+0x330>
c001a19b:	e4 64                	in     al,0x64
c001a19d:	a8 02                	test   al,0x2
c001a19f:	75 fa                	jne    c001a19b <Krnl::panic(char const*)+0x33a>
c001a1a1:	88 d0                	mov    al,dl
c001a1a3:	e6 64                	out    0x64,al
c001a1a5:	fa                   	cli    
c001a1a6:	f4                   	hlt    
c001a1a7:	eb e8                	jmp    c001a191 <Krnl::panic(char const*)+0x330>
c001a1a9:	50                   	push   eax
c001a1aa:	50                   	push   eax
c001a1ab:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a1b0:	68 90 b7 02 c0       	push   0xc002b790
c001a1b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1bb:	e8 a0 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1c0:	58                   	pop    eax
c001a1c1:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a1c6:	5a                   	pop    edx
c001a1c7:	68 9e b6 02 c0       	push   0xc002b69e
c001a1cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1d2:	e8 89 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1d7:	59                   	pop    ecx
c001a1d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1dd:	5b                   	pop    ebx
c001a1de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a1e1:	83 c0 0c             	add    eax,0xc
c001a1e4:	50                   	push   eax
c001a1e5:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001a1ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1f0:	e8 6b 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1f5:	83 c4 10             	add    esp,0x10
c001a1f8:	e9 a3 fd ff ff       	jmp    c0019fa0 <Krnl::panic(char const*)+0x13f>

c001a1fd <Net::switchEndian16(unsigned short)>:
c001a1fd:	83 ec 04             	sub    esp,0x4
c001a200:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a204:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a208:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a20c:	c1 f8 08             	sar    eax,0x8
c001a20f:	89 c2                	mov    edx,eax
c001a211:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a215:	c1 e0 08             	shl    eax,0x8
c001a218:	09 d0                	or     eax,edx
c001a21a:	83 c4 04             	add    esp,0x4
c001a21d:	c3                   	ret    

c001a21e <Net::switchEndian32(unsigned int)>:
c001a21e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a222:	c1 e8 18             	shr    eax,0x18
c001a225:	89 c2                	mov    edx,eax
c001a227:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a22b:	c1 e0 08             	shl    eax,0x8
c001a22e:	25 00 00 ff 00       	and    eax,0xff0000
c001a233:	09 c2                	or     edx,eax
c001a235:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a239:	c1 e8 08             	shr    eax,0x8
c001a23c:	25 00 ff 00 00       	and    eax,0xff00
c001a241:	09 c2                	or     edx,eax
c001a243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a247:	c1 e0 18             	shl    eax,0x18
c001a24a:	09 d0                	or     eax,edx
c001a24c:	c3                   	ret    

c001a24d <Net::crc32Calc(unsigned char*, int)>:
c001a24d:	83 ec 10             	sub    esp,0x10
c001a250:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a255:	75 07                	jne    c001a25e <Net::crc32Calc(unsigned char*, int)+0x11>
c001a257:	b8 00 00 00 00       	mov    eax,0x0
c001a25c:	eb 7c                	jmp    c001a2da <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a25e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a263:	7f 07                	jg     c001a26c <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a265:	b8 00 00 00 00       	mov    eax,0x0
c001a26a:	eb 6e                	jmp    c001a2da <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a26c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a274:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a27c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a280:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a284:	7d 4e                	jge    c001a2d4 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a286:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a28a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a28e:	01 d0                	add    eax,edx
c001a290:	8a 00                	mov    al,BYTE PTR [eax]
c001a292:	0f b6 c0             	movzx  eax,al
c001a295:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a299:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a2a1:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a2a6:	7f 26                	jg     c001a2ce <Net::crc32Calc(unsigned char*, int)+0x81>
c001a2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ac:	83 e0 01             	and    eax,0x1
c001a2af:	74 0d                	je     c001a2be <Net::crc32Calc(unsigned char*, int)+0x71>
c001a2b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2b5:	d1 e8                	shr    eax,1
c001a2b7:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a2bc:	eb 06                	jmp    c001a2c4 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a2be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c2:	d1 e8                	shr    eax,1
c001a2c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2c8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2cc:	eb d3                	jmp    c001a2a1 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a2ce:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a2d2:	eb a8                	jmp    c001a27c <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a2d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d8:	f7 d0                	not    eax
c001a2da:	83 c4 10             	add    esp,0x10
c001a2dd:	c3                   	ret    

c001a2de <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a2de:	57                   	push   edi
c001a2df:	56                   	push   esi
c001a2e0:	53                   	push   ebx
c001a2e1:	83 ec 60             	sub    esp,0x60
c001a2e4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2eb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a2ef:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a2f7:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a2fc:	7f 1a                	jg     c001a318 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a2fe:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a305:	8d 50 01             	lea    edx,[eax+0x1]
c001a308:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a30f:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a312:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a316:	eb df                	jmp    c001a2f7 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a318:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a31f:	8d 50 01             	lea    edx,[eax+0x1]
c001a322:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a329:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a32c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a333:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a337:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a33b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a33f:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a347:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a34b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a34f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a353:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a357:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a35b:	89 c6                	mov    esi,eax
c001a35d:	89 d7                	mov    edi,edx
c001a35f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a361:	89 c8                	mov    eax,ecx
c001a363:	89 fa                	mov    edx,edi
c001a365:	89 f3                	mov    ebx,esi
c001a367:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a36b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a36f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a372:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a37a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a381:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a385:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a389:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a38d:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a399:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a39d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a3a1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a3a5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a3a9:	89 c6                	mov    esi,eax
c001a3ab:	89 d7                	mov    edi,edx
c001a3ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3af:	89 c8                	mov    eax,ecx
c001a3b1:	89 fa                	mov    edx,edi
c001a3b3:	89 f3                	mov    ebx,esi
c001a3b5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a3b9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a3bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3c1:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a3c9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3d0:	0f b7 c0             	movzx  eax,ax
c001a3d3:	c1 f8 08             	sar    eax,0x8
c001a3d6:	89 c1                	mov    ecx,eax
c001a3d8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3df:	8d 50 01             	lea    edx,[eax+0x1]
c001a3e2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3e9:	88 ca                	mov    dl,cl
c001a3eb:	88 10                	mov    BYTE PTR [eax],dl
c001a3ed:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a3f4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3fb:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3fe:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a405:	88 10                	mov    BYTE PTR [eax],dl
c001a407:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a40b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a40f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a416:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a41a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a41e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a422:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a426:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a42a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a42e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a432:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a436:	89 c6                	mov    esi,eax
c001a438:	89 d7                	mov    edi,edx
c001a43a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a43c:	89 c8                	mov    eax,ecx
c001a43e:	89 fa                	mov    edx,edi
c001a440:	89 f3                	mov    ebx,esi
c001a442:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a446:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a44a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a44e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a452:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a459:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a460:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a464:	50                   	push   eax
c001a465:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a469:	e8 df fd ff ff       	call   c001a24d <Net::crc32Calc(unsigned char*, int)>
c001a46e:	83 c4 08             	add    esp,0x8
c001a471:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a475:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a479:	c1 e8 18             	shr    eax,0x18
c001a47c:	89 c1                	mov    ecx,eax
c001a47e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a485:	8d 50 01             	lea    edx,[eax+0x1]
c001a488:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a48f:	88 ca                	mov    dl,cl
c001a491:	88 10                	mov    BYTE PTR [eax],dl
c001a493:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a497:	c1 e8 10             	shr    eax,0x10
c001a49a:	89 c1                	mov    ecx,eax
c001a49c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4a3:	8d 50 01             	lea    edx,[eax+0x1]
c001a4a6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4ad:	88 ca                	mov    dl,cl
c001a4af:	88 10                	mov    BYTE PTR [eax],dl
c001a4b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a4b5:	c1 e8 08             	shr    eax,0x8
c001a4b8:	89 c1                	mov    ecx,eax
c001a4ba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4c1:	8d 50 01             	lea    edx,[eax+0x1]
c001a4c4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4cb:	88 ca                	mov    dl,cl
c001a4cd:	88 10                	mov    BYTE PTR [eax],dl
c001a4cf:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4d6:	8d 50 01             	lea    edx,[eax+0x1]
c001a4d9:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4e0:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a4e4:	88 10                	mov    BYTE PTR [eax],dl
c001a4e6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4ea:	83 c4 60             	add    esp,0x60
c001a4ed:	5b                   	pop    ebx
c001a4ee:	5e                   	pop    esi
c001a4ef:	5f                   	pop    edi
c001a4f0:	c3                   	ret    

c001a4f1 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a4f1:	57                   	push   edi
c001a4f2:	56                   	push   esi
c001a4f3:	53                   	push   ebx
c001a4f4:	83 ec 70             	sub    esp,0x70
c001a4f7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4fe:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a502:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a50a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a511:	83 c0 0e             	add    eax,0xe
c001a514:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a518:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a51f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a523:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a52b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a52f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a533:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a537:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a53b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a53f:	89 c6                	mov    esi,eax
c001a541:	89 d7                	mov    edi,edx
c001a543:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a545:	89 c8                	mov    eax,ecx
c001a547:	89 fa                	mov    edx,edi
c001a549:	89 f3                	mov    ebx,esi
c001a54b:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a54f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a553:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a557:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a55f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a566:	83 c0 08             	add    eax,0x8
c001a569:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a56d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a574:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a578:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a580:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a584:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a588:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a58c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a590:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a594:	89 c6                	mov    esi,eax
c001a596:	89 d7                	mov    edi,edx
c001a598:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a59a:	89 c8                	mov    eax,ecx
c001a59c:	89 fa                	mov    edx,edi
c001a59e:	89 f3                	mov    ebx,esi
c001a5a0:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a5a4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a5a8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a5ac:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a5b4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5bb:	8d 50 01             	lea    edx,[eax+0x1]
c001a5be:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5c5:	8a 00                	mov    al,BYTE PTR [eax]
c001a5c7:	0f b6 c0             	movzx  eax,al
c001a5ca:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a5cf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5d6:	8d 50 01             	lea    edx,[eax+0x1]
c001a5d9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5e0:	8a 00                	mov    al,BYTE PTR [eax]
c001a5e2:	0f b6 c0             	movzx  eax,al
c001a5e5:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a5ea:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a5ef:	c1 e0 08             	shl    eax,0x8
c001a5f2:	89 c2                	mov    edx,eax
c001a5f4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5f8:	09 d0                	or     eax,edx
c001a5fa:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a601:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a605:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a60d:	75 46                	jne    c001a655 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a60f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a616:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a619:	66 3d dc 05          	cmp    ax,0x5dc
c001a61d:	77 16                	ja     c001a635 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a61f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a626:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a629:	0f b7 c0             	movzx  eax,ax
c001a62c:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a633:	eb 20                	jmp    c001a655 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a635:	83 ec 0c             	sub    esp,0xc
c001a638:	68 68 b8 02 c0       	push   0xc002b868
c001a63d:	e8 b3 80 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001a642:	83 c4 10             	add    esp,0x10
c001a645:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a64c:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a650:	e9 17 01 00 00       	jmp    c001a76c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a655:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a65c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a663:	8b 12                	mov    edx,DWORD PTR [edx]
c001a665:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a669:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a670:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a674:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a678:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a67c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a680:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a684:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a688:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a68c:	89 c6                	mov    esi,eax
c001a68e:	89 d7                	mov    edi,edx
c001a690:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a692:	89 c8                	mov    eax,ecx
c001a694:	89 fa                	mov    edx,edi
c001a696:	89 f3                	mov    ebx,esi
c001a698:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a69c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a6a0:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6a3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6aa:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a6b1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6b8:	8d 50 01             	lea    edx,[eax+0x1]
c001a6bb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6c2:	8a 00                	mov    al,BYTE PTR [eax]
c001a6c4:	0f b6 c0             	movzx  eax,al
c001a6c7:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a6cb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6d2:	8d 50 01             	lea    edx,[eax+0x1]
c001a6d5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6dc:	8a 00                	mov    al,BYTE PTR [eax]
c001a6de:	0f b6 c0             	movzx  eax,al
c001a6e1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a6e5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6ec:	8d 50 01             	lea    edx,[eax+0x1]
c001a6ef:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6f6:	8a 00                	mov    al,BYTE PTR [eax]
c001a6f8:	0f b6 c0             	movzx  eax,al
c001a6fb:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a6ff:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a706:	8d 50 01             	lea    edx,[eax+0x1]
c001a709:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a710:	8a 00                	mov    al,BYTE PTR [eax]
c001a712:	0f b6 c0             	movzx  eax,al
c001a715:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a719:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a71d:	c1 e0 18             	shl    eax,0x18
c001a720:	89 c2                	mov    edx,eax
c001a722:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a726:	c1 e0 10             	shl    eax,0x10
c001a729:	09 c2                	or     edx,eax
c001a72b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a72f:	c1 e0 08             	shl    eax,0x8
c001a732:	09 d0                	or     eax,edx
c001a734:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a738:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a73c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a743:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a747:	83 e8 04             	sub    eax,0x4
c001a74a:	83 ec 08             	sub    esp,0x8
c001a74d:	50                   	push   eax
c001a74e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a752:	e8 f6 fa ff ff       	call   c001a24d <Net::crc32Calc(unsigned char*, int)>
c001a757:	83 c4 10             	add    esp,0x10
c001a75a:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a75e:	0f 94 c2             	sete   dl
c001a761:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a768:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a76b:	90                   	nop
c001a76c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a773:	83 c4 70             	add    esp,0x70
c001a776:	5b                   	pop    ebx
c001a777:	5e                   	pop    esi
c001a778:	5f                   	pop    edi
c001a779:	c2 04 00             	ret    0x4

c001a77c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a77c:	55                   	push   ebp
c001a77d:	57                   	push   edi
c001a77e:	56                   	push   esi
c001a77f:	53                   	push   ebx
c001a780:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a786:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a78d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a78f:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a792:	80 fb 40             	cmp    bl,0x40
c001a795:	75 1b                	jne    c001a7b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a797:	8a 16                	mov    dl,BYTE PTR [esi]
c001a799:	84 d2                	test   dl,dl
c001a79b:	0f 84 f1 00 00 00    	je     c001a892 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7a1:	8d 46 01             	lea    eax,[esi+0x1]
c001a7a4:	80 fa 3a             	cmp    dl,0x3a
c001a7a7:	74 04                	je     c001a7ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a7a9:	89 c6                	mov    esi,eax
c001a7ab:	eb ea                	jmp    c001a797 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a7ad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7b0:	89 c6                	mov    esi,eax
c001a7b2:	50                   	push   eax
c001a7b3:	6a 40                	push   0x40
c001a7b5:	6a 00                	push   0x0
c001a7b7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7bb:	50                   	push   eax
c001a7bc:	e8 8f 5f fe ff       	call   c0000750 <memset>
c001a7c1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a7c8:	31 c0                	xor    eax,eax
c001a7ca:	83 c4 10             	add    esp,0x10
c001a7cd:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a7cf:	84 c9                	test   cl,cl
c001a7d1:	0f 84 bb 00 00 00    	je     c001a892 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7d7:	3d c7 00 00 00       	cmp    eax,0xc7
c001a7dc:	0f 8f b0 00 00 00    	jg     c001a892 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7e2:	80 f9 0a             	cmp    cl,0xa
c001a7e5:	0f 85 98 00 00 00    	jne    c001a883 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7eb:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7f0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a7f4:	a8 df                	test   al,0xdf
c001a7f6:	0f 94 c1             	sete   cl
c001a7f9:	3c 23                	cmp    al,0x23
c001a7fb:	0f 94 c2             	sete   dl
c001a7fe:	08 d1                	or     cl,dl
c001a800:	75 4a                	jne    c001a84c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a802:	8d 50 f7             	lea    edx,[eax-0x9]
c001a805:	80 fa 01             	cmp    dl,0x1
c001a808:	76 42                	jbe    c001a84c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a80a:	3c 5b                	cmp    al,0x5b
c001a80c:	75 42                	jne    c001a850 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a80e:	80 fb 40             	cmp    bl,0x40
c001a811:	75 39                	jne    c001a84c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a813:	83 ec 0c             	sub    esp,0xc
c001a816:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a81a:	52                   	push   edx
c001a81b:	e8 4c 5f fe ff       	call   c000076c <strlen>
c001a820:	83 c4 10             	add    esp,0x10
c001a823:	83 f8 3f             	cmp    eax,0x3f
c001a826:	77 6a                	ja     c001a892 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a828:	50                   	push   eax
c001a829:	50                   	push   eax
c001a82a:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a82e:	52                   	push   edx
c001a82f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a833:	52                   	push   edx
c001a834:	e8 d3 5f fe ff       	call   c000080c <strcpy>
c001a839:	58                   	pop    eax
c001a83a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a83e:	52                   	push   edx
c001a83f:	e8 28 5f fe ff       	call   c000076c <strlen>
c001a844:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a849:	83 c4 10             	add    esp,0x10
c001a84c:	31 d2                	xor    edx,edx
c001a84e:	eb 3a                	jmp    c001a88a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a850:	80 fb 40             	cmp    bl,0x40
c001a853:	74 06                	je     c001a85b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a855:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a859:	eb 20                	jmp    c001a87b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a85b:	50                   	push   eax
c001a85c:	50                   	push   eax
c001a85d:	55                   	push   ebp
c001a85e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a862:	50                   	push   eax
c001a863:	e8 30 60 fe ff       	call   c0000898 <strcmp>
c001a868:	83 c4 10             	add    esp,0x10
c001a86b:	85 c0                	test   eax,eax
c001a86d:	75 dd                	jne    c001a84c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a86f:	eb e4                	jmp    c001a855 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a871:	8d 50 01             	lea    edx,[eax+0x1]
c001a874:	80 f9 3d             	cmp    cl,0x3d
c001a877:	74 1d                	je     c001a896 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a879:	89 d0                	mov    eax,edx
c001a87b:	8a 08                	mov    cl,BYTE PTR [eax]
c001a87d:	84 c9                	test   cl,cl
c001a87f:	75 f0                	jne    c001a871 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a881:	eb 0f                	jmp    c001a892 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a883:	8d 50 01             	lea    edx,[eax+0x1]
c001a886:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a88a:	47                   	inc    edi
c001a88b:	89 d0                	mov    eax,edx
c001a88d:	e9 3b ff ff ff       	jmp    c001a7cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a892:	31 c0                	xor    eax,eax
c001a894:	eb 33                	jmp    c001a8c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a896:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a89a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a89d:	50                   	push   eax
c001a89e:	50                   	push   eax
c001a89f:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a8a3:	50                   	push   eax
c001a8a4:	56                   	push   esi
c001a8a5:	e8 ee 5f fe ff       	call   c0000898 <strcmp>
c001a8aa:	83 c4 10             	add    esp,0x10
c001a8ad:	85 c0                	test   eax,eax
c001a8af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8b3:	75 97                	jne    c001a84c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8b5:	51                   	push   ecx
c001a8b6:	51                   	push   ecx
c001a8b7:	52                   	push   edx
c001a8b8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a8bf:	e8 48 5f fe ff       	call   c000080c <strcpy>
c001a8c4:	83 c4 10             	add    esp,0x10
c001a8c7:	b0 01                	mov    al,0x1
c001a8c9:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a8cf:	5b                   	pop    ebx
c001a8d0:	5e                   	pop    esi
c001a8d1:	5f                   	pop    edi
c001a8d2:	5d                   	pop    ebp
c001a8d3:	c3                   	ret    

c001a8d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a8d4:	57                   	push   edi
c001a8d5:	56                   	push   esi
c001a8d6:	53                   	push   ebx
c001a8d7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8dd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a8e4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8eb:	53                   	push   ebx
c001a8ec:	e8 7b 5e fe ff       	call   c000076c <strlen>
c001a8f1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8f4:	89 c7                	mov    edi,eax
c001a8f6:	e8 71 5e fe ff       	call   c000076c <strlen>
c001a8fb:	83 c4 10             	add    esp,0x10
c001a8fe:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a902:	3d ff 00 00 00       	cmp    eax,0xff
c001a907:	0f 87 d3 00 00 00    	ja     c001a9e0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a90d:	57                   	push   edi
c001a90e:	57                   	push   edi
c001a90f:	56                   	push   esi
c001a910:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a914:	56                   	push   esi
c001a915:	e8 f2 5e fe ff       	call   c000080c <strcpy>
c001a91a:	58                   	pop    eax
c001a91b:	5a                   	pop    edx
c001a91c:	68 0a bc 02 c0       	push   0xc002bc0a
c001a921:	56                   	push   esi
c001a922:	e8 25 60 fe ff       	call   c000094c <strcat>
c001a927:	59                   	pop    ecx
c001a928:	5f                   	pop    edi
c001a929:	53                   	push   ebx
c001a92a:	56                   	push   esi
c001a92b:	e8 1c 60 fe ff       	call   c000094c <strcat>
c001a930:	58                   	pop    eax
c001a931:	5a                   	pop    edx
c001a932:	68 b4 b8 02 c0       	push   0xc002b8b4
c001a937:	56                   	push   esi
c001a938:	e8 0f 60 fe ff       	call   c000094c <strcat>
c001a93d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a944:	e8 50 4c ff ff       	call   c000f599 <malloc>
c001a949:	83 c4 0c             	add    esp,0xc
c001a94c:	89 c3                	mov    ebx,eax
c001a94e:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c001a954:	56                   	push   esi
c001a955:	50                   	push   eax
c001a956:	e8 f9 82 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001a95b:	83 c4 10             	add    esp,0x10
c001a95e:	85 db                	test   ebx,ebx
c001a960:	74 7e                	je     c001a9e0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a962:	51                   	push   ecx
c001a963:	51                   	push   ecx
c001a964:	6a 01                	push   0x1
c001a966:	53                   	push   ebx
c001a967:	e8 4c 83 ff ff       	call   c0012cb8 <File::open(FileOpenMode)>
c001a96c:	83 c4 10             	add    esp,0x10
c001a96f:	85 c0                	test   eax,eax
c001a971:	74 08                	je     c001a97b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a973:	83 ec 0c             	sub    esp,0xc
c001a976:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a978:	53                   	push   ebx
c001a979:	eb 5f                	jmp    c001a9da <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a97b:	52                   	push   edx
c001a97c:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a980:	50                   	push   eax
c001a981:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a985:	50                   	push   eax
c001a986:	53                   	push   ebx
c001a987:	e8 d8 85 ff ff       	call   c0012f64 <File::stat(unsigned long long*, bool*)>
c001a98c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a990:	83 c4 10             	add    esp,0x10
c001a993:	89 c1                	mov    ecx,eax
c001a995:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a999:	74 31                	je     c001a9cc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a99b:	83 ec 0c             	sub    esp,0xc
c001a99e:	50                   	push   eax
c001a99f:	e8 f5 4b ff ff       	call   c000f599 <malloc>
c001a9a4:	89 c6                	mov    esi,eax
c001a9a6:	58                   	pop    eax
c001a9a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9a9:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a9ad:	52                   	push   edx
c001a9ae:	56                   	push   esi
c001a9af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9b7:	53                   	push   ebx
c001a9b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9bb:	83 c4 20             	add    esp,0x20
c001a9be:	85 c0                	test   eax,eax
c001a9c0:	75 0a                	jne    c001a9cc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a9c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9c6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a9ca:	74 18                	je     c001a9e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a9cc:	83 ec 0c             	sub    esp,0xc
c001a9cf:	53                   	push   ebx
c001a9d0:	e8 41 83 ff ff       	call   c0012d16 <File::close()>
c001a9d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9dd:	83 c4 10             	add    esp,0x10
c001a9e0:	31 c0                	xor    eax,eax
c001a9e2:	eb 3b                	jmp    c001aa1f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a9e4:	83 ec 0c             	sub    esp,0xc
c001a9e7:	53                   	push   ebx
c001a9e8:	e8 29 83 ff ff       	call   c0012d16 <File::close()>
c001a9ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9f5:	83 c4 0c             	add    esp,0xc
c001a9f8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9ff:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa06:	56                   	push   esi
c001aa07:	e8 70 fd ff ff       	call   c001a77c <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aa0c:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa0f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aa13:	e8 91 4b ff ff       	call   c000f5a9 <free>
c001aa18:	83 c4 10             	add    esp,0x10
c001aa1b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aa1f:	81 c4 20 01 00 00    	add    esp,0x120
c001aa25:	5b                   	pop    ebx
c001aa26:	5e                   	pop    esi
c001aa27:	5f                   	pop    edi
c001aa28:	c3                   	ret    

c001aa29 <Reg::getLine(char*, char*, char*)>:
c001aa29:	57                   	push   edi
c001aa2a:	56                   	push   esi
c001aa2b:	53                   	push   ebx
c001aa2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa30:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa34:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa38:	57                   	push   edi
c001aa39:	56                   	push   esi
c001aa3a:	53                   	push   ebx
c001aa3b:	68 b9 b8 02 c0       	push   0xc002b8b9
c001aa40:	e8 8f fe ff ff       	call   c001a8d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa45:	83 c4 10             	add    esp,0x10
c001aa48:	84 c0                	test   al,al
c001aa4a:	75 10                	jne    c001aa5c <Reg::getLine(char*, char*, char*)+0x33>
c001aa4c:	57                   	push   edi
c001aa4d:	56                   	push   esi
c001aa4e:	53                   	push   ebx
c001aa4f:	68 de b8 02 c0       	push   0xc002b8de
c001aa54:	e8 7b fe ff ff       	call   c001a8d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa59:	83 c4 10             	add    esp,0x10
c001aa5c:	5b                   	pop    ebx
c001aa5d:	5e                   	pop    esi
c001aa5e:	5f                   	pop    edi
c001aa5f:	c3                   	ret    

c001aa60 <Reg::readInt(char*, char*, int*)>:
c001aa60:	55                   	push   ebp
c001aa61:	57                   	push   edi
c001aa62:	56                   	push   esi
c001aa63:	53                   	push   ebx
c001aa64:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa6a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa6e:	57                   	push   edi
c001aa6f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa76:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa7d:	e8 a7 ff ff ff       	call   c001aa29 <Reg::getLine(char*, char*, char*)>
c001aa82:	83 c4 10             	add    esp,0x10
c001aa85:	84 c0                	test   al,al
c001aa87:	0f 84 b3 00 00 00    	je     c001ab40 <Reg::readInt(char*, char*, int*)+0xe0>
c001aa8d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa91:	80 fa 2b             	cmp    dl,0x2b
c001aa94:	74 0c                	je     c001aaa2 <Reg::readInt(char*, char*, int*)+0x42>
c001aa96:	80 fa 2d             	cmp    dl,0x2d
c001aa99:	75 0e                	jne    c001aaa9 <Reg::readInt(char*, char*, int*)+0x49>
c001aa9b:	ba 01 00 00 00       	mov    edx,0x1
c001aaa0:	eb 0b                	jmp    c001aaad <Reg::readInt(char*, char*, int*)+0x4d>
c001aaa2:	ba 01 00 00 00       	mov    edx,0x1
c001aaa7:	eb 02                	jmp    c001aaab <Reg::readInt(char*, char*, int*)+0x4b>
c001aaa9:	31 d2                	xor    edx,edx
c001aaab:	31 c0                	xor    eax,eax
c001aaad:	be 0a 00 00 00       	mov    esi,0xa
c001aab2:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aab7:	75 20                	jne    c001aad9 <Reg::readInt(char*, char*, int*)+0x79>
c001aab9:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aabd:	80 f9 78             	cmp    cl,0x78
c001aac0:	75 0a                	jne    c001aacc <Reg::readInt(char*, char*, int*)+0x6c>
c001aac2:	83 c2 02             	add    edx,0x2
c001aac5:	be 10 00 00 00       	mov    esi,0x10
c001aaca:	eb 0d                	jmp    c001aad9 <Reg::readInt(char*, char*, int*)+0x79>
c001aacc:	80 f9 62             	cmp    cl,0x62
c001aacf:	75 08                	jne    c001aad9 <Reg::readInt(char*, char*, int*)+0x79>
c001aad1:	83 c2 02             	add    edx,0x2
c001aad4:	be 02 00 00 00       	mov    esi,0x2
c001aad9:	01 d7                	add    edi,edx
c001aadb:	31 d2                	xor    edx,edx
c001aadd:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aadf:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aae3:	80 fb 0d             	cmp    bl,0xd
c001aae6:	0f 94 c3             	sete   bl
c001aae9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aaee:	0f 94 c1             	sete   cl
c001aaf1:	08 cb                	or     bl,cl
c001aaf3:	75 3a                	jne    c001ab2f <Reg::readInt(char*, char*, int*)+0xcf>
c001aaf5:	0f af d6             	imul   edx,esi
c001aaf8:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aafd:	83 fe 10             	cmp    esi,0x10
c001ab00:	75 26                	jne    c001ab28 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab02:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab06:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ab09:	89 e9                	mov    ecx,ebp
c001ab0b:	80 f9 05             	cmp    cl,0x5
c001ab0e:	77 06                	ja     c001ab16 <Reg::readInt(char*, char*, int*)+0xb6>
c001ab10:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ab14:	eb 16                	jmp    c001ab2c <Reg::readInt(char*, char*, int*)+0xcc>
c001ab16:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab1a:	83 e9 61             	sub    ecx,0x61
c001ab1d:	80 f9 05             	cmp    cl,0x5
c001ab20:	77 06                	ja     c001ab28 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab22:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ab26:	eb 04                	jmp    c001ab2c <Reg::readInt(char*, char*, int*)+0xcc>
c001ab28:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ab2c:	47                   	inc    edi
c001ab2d:	eb ae                	jmp    c001aadd <Reg::readInt(char*, char*, int*)+0x7d>
c001ab2f:	84 c0                	test   al,al
c001ab31:	74 02                	je     c001ab35 <Reg::readInt(char*, char*, int*)+0xd5>
c001ab33:	f7 da                	neg    edx
c001ab35:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ab3c:	89 10                	mov    DWORD PTR [eax],edx
c001ab3e:	88 d8                	mov    al,bl
c001ab40:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab46:	5b                   	pop    ebx
c001ab47:	5e                   	pop    esi
c001ab48:	5f                   	pop    edi
c001ab49:	5d                   	pop    ebp
c001ab4a:	c3                   	ret    

c001ab4b <Reg::readString(char*, char*, char*, int)>:
c001ab4b:	57                   	push   edi
c001ab4c:	56                   	push   esi
c001ab4d:	53                   	push   ebx
c001ab4e:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab54:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab5b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab5f:	57                   	push   edi
c001ab60:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab67:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab6e:	e8 b6 fe ff ff       	call   c001aa29 <Reg::getLine(char*, char*, char*)>
c001ab73:	83 c4 10             	add    esp,0x10
c001ab76:	89 c6                	mov    esi,eax
c001ab78:	84 c0                	test   al,al
c001ab7a:	74 44                	je     c001abc0 <Reg::readString(char*, char*, char*, int)+0x75>
c001ab7c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab83:	31 c0                	xor    eax,eax
c001ab85:	4a                   	dec    edx
c001ab86:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab89:	84 c9                	test   cl,cl
c001ab8b:	74 0f                	je     c001ab9c <Reg::readString(char*, char*, char*, int)+0x51>
c001ab8d:	39 c2                	cmp    edx,eax
c001ab8f:	7e 0b                	jle    c001ab9c <Reg::readString(char*, char*, char*, int)+0x51>
c001ab91:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab94:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab99:	40                   	inc    eax
c001ab9a:	eb ea                	jmp    c001ab86 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab9c:	83 ec 0c             	sub    esp,0xc
c001ab9f:	53                   	push   ebx
c001aba0:	e8 c7 5b fe ff       	call   c000076c <strlen>
c001aba5:	83 c4 10             	add    esp,0x10
c001aba8:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001abad:	75 11                	jne    c001abc0 <Reg::readString(char*, char*, char*, int)+0x75>
c001abaf:	83 ec 0c             	sub    esp,0xc
c001abb2:	53                   	push   ebx
c001abb3:	e8 b4 5b fe ff       	call   c000076c <strlen>
c001abb8:	83 c4 10             	add    esp,0x10
c001abbb:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001abc0:	81 c4 d0 00 00 00    	add    esp,0xd0
c001abc6:	89 f0                	mov    eax,esi
c001abc8:	5b                   	pop    ebx
c001abc9:	5e                   	pop    esi
c001abca:	5f                   	pop    edi
c001abcb:	c3                   	ret    

c001abcc <Reg::readBool(char*, char*, bool*)>:
c001abcc:	83 ec 20             	sub    esp,0x20
c001abcf:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abd3:	50                   	push   eax
c001abd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abdc:	e8 7f fe ff ff       	call   c001aa60 <Reg::readInt(char*, char*, int*)>
c001abe1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abe6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abea:	0f 95 02             	setne  BYTE PTR [edx]
c001abed:	83 c4 2c             	add    esp,0x2c
c001abf0:	c3                   	ret    

c001abf1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001abf1:	53                   	push   ebx
c001abf2:	83 ec 1c             	sub    esp,0x1c
c001abf5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001abf9:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abfd:	50                   	push   eax
c001abfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac06:	e8 c1 ff ff ff       	call   c001abcc <Reg::readBool(char*, char*, bool*)>
c001ac0b:	83 c4 10             	add    esp,0x10
c001ac0e:	84 c0                	test   al,al
c001ac10:	74 04                	je     c001ac16 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ac12:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ac16:	88 d8                	mov    al,bl
c001ac18:	83 c4 18             	add    esp,0x18
c001ac1b:	5b                   	pop    ebx
c001ac1c:	c3                   	ret    

c001ac1d <Reg::readIntWithDefault(char*, char*, int)>:
c001ac1d:	53                   	push   ebx
c001ac1e:	83 ec 1c             	sub    esp,0x1c
c001ac21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ac25:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac29:	50                   	push   eax
c001ac2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac32:	e8 29 fe ff ff       	call   c001aa60 <Reg::readInt(char*, char*, int*)>
c001ac37:	83 c4 10             	add    esp,0x10
c001ac3a:	84 c0                	test   al,al
c001ac3c:	74 04                	je     c001ac42 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ac3e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ac42:	89 d8                	mov    eax,ebx
c001ac44:	83 c4 18             	add    esp,0x18
c001ac47:	5b                   	pop    ebx
c001ac48:	c3                   	ret    

c001ac49 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac49:	57                   	push   edi
c001ac4a:	56                   	push   esi
c001ac4b:	56                   	push   esi
c001ac4c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac50:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac54:	56                   	push   esi
c001ac55:	57                   	push   edi
c001ac56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac5e:	e8 e8 fe ff ff       	call   c001ab4b <Reg::readString(char*, char*, char*, int)>
c001ac63:	83 c4 10             	add    esp,0x10
c001ac66:	84 c0                	test   al,al
c001ac68:	75 1a                	jne    c001ac84 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ac6a:	51                   	push   ecx
c001ac6b:	56                   	push   esi
c001ac6c:	6a 00                	push   0x0
c001ac6e:	57                   	push   edi
c001ac6f:	e8 dc 5a fe ff       	call   c0000750 <memset>
c001ac74:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ac77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac7d:	83 c4 10             	add    esp,0x10
c001ac80:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac84:	89 f8                	mov    eax,edi
c001ac86:	5a                   	pop    edx
c001ac87:	5e                   	pop    esi
c001ac88:	5f                   	pop    edi
c001ac89:	c3                   	ret    

c001ac8a <Sys::eject(regs*)>:
c001ac8a:	83 ec 0c             	sub    esp,0xc
c001ac8d:	83 ca ff             	or     edx,0xffffffff
c001ac90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac94:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac97:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac9c:	83 e9 41             	sub    ecx,0x41
c001ac9f:	83 f9 19             	cmp    ecx,0x19
c001aca2:	77 18                	ja     c001acbc <Sys::eject(regs*)+0x32>
c001aca4:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c001acab:	85 c9                	test   ecx,ecx
c001acad:	74 0d                	je     c001acbc <Sys::eject(regs*)+0x32>
c001acaf:	83 ec 0c             	sub    esp,0xc
c001acb2:	51                   	push   ecx
c001acb3:	e8 28 b3 ff ff       	call   c0015fe0 <LogicalDisk::eject()>
c001acb8:	83 c4 10             	add    esp,0x10
c001acbb:	99                   	cdq    
c001acbc:	83 c4 0c             	add    esp,0xc
c001acbf:	c3                   	ret    

c001acc0 <Sys::exit(regs*)>:
c001acc0:	83 ec 18             	sub    esp,0x18
c001acc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acc7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acca:	e8 c2 35 00 00       	call   c001e291 <terminateTask(int)>
c001accf:	83 c8 ff             	or     eax,0xffffffff
c001acd2:	83 c4 1c             	add    esp,0x1c
c001acd5:	89 c2                	mov    edx,eax
c001acd7:	c3                   	ret    

c001acd8 <Sys::getCwd(regs*)>:
c001acd8:	83 ec 10             	sub    esp,0x10
c001acdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acdf:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ace2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ace5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aced:	e8 64 7d ff ff       	call   c0012a56 <Fs::getcwd(Process*, char*, int)>
c001acf2:	83 c4 1c             	add    esp,0x1c
c001acf5:	99                   	cdq    
c001acf6:	c3                   	ret    

c001acf7 <Sys::getPID(regs*)>:
c001acf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acfc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acff:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad01:	99                   	cdq    
c001ad02:	c3                   	ret    

c001ad03 <Sys::getRAMData(regs*)>:
c001ad03:	8b 0d 54 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da54
c001ad09:	6b 05 50 da 02 c0 64 	imul   eax,DWORD PTR ds:0xc002da50,0x64
c001ad10:	99                   	cdq    
c001ad11:	f7 f9                	idiv   ecx
c001ad13:	c1 e0 18             	shl    eax,0x18
c001ad16:	09 c8                	or     eax,ecx
c001ad18:	99                   	cdq    
c001ad19:	c3                   	ret    

c001ad1a <Sys::getVGAPtr(regs*)>:
c001ad1a:	55                   	push   ebp
c001ad1b:	57                   	push   edi
c001ad1c:	56                   	push   esi
c001ad1d:	53                   	push   ebx
c001ad1e:	83 ec 18             	sub    esp,0x18
c001ad21:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad25:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ad28:	e8 b0 30 00 00       	call   c001dddd <Thr::processFromPID(int)>
c001ad2d:	83 c4 10             	add    esp,0x10
c001ad30:	89 c1                	mov    ecx,eax
c001ad32:	b8 01 00 00 00       	mov    eax,0x1
c001ad37:	85 c9                	test   ecx,ecx
c001ad39:	74 59                	je     c001ad94 <Sys::getVGAPtr(regs*)+0x7a>
c001ad3b:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ad41:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ad45:	74 0c                	je     c001ad53 <Sys::getVGAPtr(regs*)+0x39>
c001ad47:	83 ec 0c             	sub    esp,0xc
c001ad4a:	53                   	push   ebx
c001ad4b:	e8 03 56 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001ad50:	83 c4 10             	add    esp,0x10
c001ad53:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ad56:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ad59:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ad5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ad63:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad66:	81 c3 82 00 00 00    	add    ebx,0x82
c001ad6c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ad72:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad75:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ad78:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ad7e:	50                   	push   eax
c001ad7f:	50                   	push   eax
c001ad80:	53                   	push   ebx
c001ad81:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad84:	05 a8 0f 00 00       	add    eax,0xfa8
c001ad89:	50                   	push   eax
c001ad8a:	e8 7d 5a fe ff       	call   c000080c <strcpy>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	31 c0                	xor    eax,eax
c001ad94:	83 c4 0c             	add    esp,0xc
c001ad97:	31 d2                	xor    edx,edx
c001ad99:	5b                   	pop    ebx
c001ad9a:	5e                   	pop    esi
c001ad9b:	5f                   	pop    edi
c001ad9c:	5d                   	pop    ebp
c001ad9d:	c3                   	ret    

c001ad9e <Sys::loadDLL(regs*)>:
c001ad9e:	56                   	push   esi
c001ad9f:	53                   	push   ebx
c001ada0:	31 d2                	xor    edx,edx
c001ada2:	51                   	push   ecx
c001ada3:	b8 01 00 00 00       	mov    eax,0x1
c001ada8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001adac:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001adb0:	0f 84 8c 00 00 00    	je     c001ae42 <Sys::loadDLL(regs*)+0xa4>
c001adb6:	83 ec 0c             	sub    esp,0xc
c001adb9:	68 14 01 00 00       	push   0x114
c001adbe:	e8 d6 47 ff ff       	call   c000f599 <malloc>
c001adc3:	83 c4 0c             	add    esp,0xc
c001adc6:	89 c3                	mov    ebx,eax
c001adc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adcd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001add0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001add3:	53                   	push   ebx
c001add4:	e8 7b 7e ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001add9:	83 c4 10             	add    esp,0x10
c001addc:	31 d2                	xor    edx,edx
c001adde:	b8 02 00 00 00       	mov    eax,0x2
c001ade3:	85 db                	test   ebx,ebx
c001ade5:	74 5b                	je     c001ae42 <Sys::loadDLL(regs*)+0xa4>
c001ade7:	83 ec 0c             	sub    esp,0xc
c001adea:	53                   	push   ebx
c001adeb:	e8 36 81 ff ff       	call   c0012f26 <File::exists()>
c001adf0:	83 c4 10             	add    esp,0x10
c001adf3:	84 c0                	test   al,al
c001adf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adf7:	75 11                	jne    c001ae0a <Sys::loadDLL(regs*)+0x6c>
c001adf9:	83 ec 0c             	sub    esp,0xc
c001adfc:	53                   	push   ebx
c001adfd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae00:	83 c4 10             	add    esp,0x10
c001ae03:	b8 03 00 00 00       	mov    eax,0x3
c001ae08:	eb 36                	jmp    c001ae40 <Sys::loadDLL(regs*)+0xa2>
c001ae0a:	83 ec 0c             	sub    esp,0xc
c001ae0d:	53                   	push   ebx
c001ae0e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae11:	58                   	pop    eax
c001ae12:	5a                   	pop    edx
c001ae13:	6a 00                	push   0x0
c001ae15:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ae18:	e8 0e 22 00 00       	call   c001d02b <Thr::loadDLL(char const*, bool)>
c001ae1d:	83 c4 10             	add    esp,0x10
c001ae20:	89 c1                	mov    ecx,eax
c001ae22:	31 d2                	xor    edx,edx
c001ae24:	b8 04 00 00 00       	mov    eax,0x4
c001ae29:	85 c9                	test   ecx,ecx
c001ae2b:	74 15                	je     c001ae42 <Sys::loadDLL(regs*)+0xa4>
c001ae2d:	53                   	push   ebx
c001ae2e:	53                   	push   ebx
c001ae2f:	ff 35 08 da 02 c0    	push   DWORD PTR ds:0xc002da08
c001ae35:	51                   	push   ecx
c001ae36:	e8 21 24 00 00       	call   c001d25c <Thr::executeDLL(unsigned long, void*)>
c001ae3b:	83 c4 10             	add    esp,0x10
c001ae3e:	31 c0                	xor    eax,eax
c001ae40:	31 d2                	xor    edx,edx
c001ae42:	59                   	pop    ecx
c001ae43:	5b                   	pop    ebx
c001ae44:	5e                   	pop    esi
c001ae45:	c3                   	ret    

c001ae46 <Sys::read(regs*)>:
c001ae46:	57                   	push   edi
c001ae47:	56                   	push   esi
c001ae48:	53                   	push   ebx
c001ae49:	83 ec 10             	sub    esp,0x10
c001ae4c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae50:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae53:	83 f8 02             	cmp    eax,0x2
c001ae56:	77 10                	ja     c001ae68 <Sys::read(regs*)+0x22>
c001ae58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae5d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae60:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae66:	eb 0e                	jmp    c001ae76 <Sys::read(regs*)+0x30>
c001ae68:	83 ec 0c             	sub    esp,0xc
c001ae6b:	50                   	push   eax
c001ae6c:	e8 56 62 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001ae71:	83 c4 10             	add    esp,0x10
c001ae74:	89 c1                	mov    ecx,eax
c001ae76:	83 c8 ff             	or     eax,0xffffffff
c001ae79:	85 c9                	test   ecx,ecx
c001ae7b:	89 c2                	mov    edx,eax
c001ae7d:	74 28                	je     c001aea7 <Sys::read(regs*)+0x61>
c001ae7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae87:	31 ff                	xor    edi,edi
c001ae89:	83 ec 0c             	sub    esp,0xc
c001ae8c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae8e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae92:	52                   	push   edx
c001ae93:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae96:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae99:	57                   	push   edi
c001ae9a:	56                   	push   esi
c001ae9b:	51                   	push   ecx
c001ae9c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aea3:	83 c4 20             	add    esp,0x20
c001aea6:	99                   	cdq    
c001aea7:	83 c4 10             	add    esp,0x10
c001aeaa:	5b                   	pop    ebx
c001aeab:	5e                   	pop    esi
c001aeac:	5f                   	pop    edi
c001aead:	c3                   	ret    

c001aeae <Sys::sbrk(regs*)>:
c001aeae:	56                   	push   esi
c001aeaf:	53                   	push   ebx
c001aeb0:	50                   	push   eax
c001aeb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aeb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aeba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aebd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001aec0:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001aec6:	85 db                	test   ebx,ebx
c001aec8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001aecb:	74 02                	je     c001aecf <Sys::sbrk(regs*)+0x21>
c001aecd:	79 06                	jns    c001aed5 <Sys::sbrk(regs*)+0x27>
c001aecf:	89 f0                	mov    eax,esi
c001aed1:	31 d2                	xor    edx,edx
c001aed3:	eb 2a                	jmp    c001aeff <Sys::sbrk(regs*)+0x51>
c001aed5:	83 c8 ff             	or     eax,0xffffffff
c001aed8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001aede:	89 c2                	mov    edx,eax
c001aee0:	77 1d                	ja     c001aeff <Sys::sbrk(regs*)+0x51>
c001aee2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001aee8:	50                   	push   eax
c001aee9:	c1 ea 0c             	shr    edx,0xc
c001aeec:	68 07 0c 00 00       	push   0xc07
c001aef1:	52                   	push   edx
c001aef2:	51                   	push   ecx
c001aef3:	e8 e4 6b ff ff       	call   c0011adc <VAS::allocatePages(int, int)>
c001aef8:	89 f0                	mov    eax,esi
c001aefa:	31 d2                	xor    edx,edx
c001aefc:	83 c4 10             	add    esp,0x10
c001aeff:	59                   	pop    ecx
c001af00:	5b                   	pop    ebx
c001af01:	5e                   	pop    esi
c001af02:	c3                   	ret    

c001af03 <Sys::setCwd(regs*)>:
c001af03:	83 ec 14             	sub    esp,0x14
c001af06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af0a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001af0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af12:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af15:	e8 ab 80 ff ff       	call   c0012fc5 <Fs::setcwd(Process*, char*)>
c001af1a:	83 c4 1c             	add    esp,0x1c
c001af1d:	99                   	cdq    
c001af1e:	c3                   	ret    

c001af1f <Sys::setTime(regs*)>:
c001af1f:	55                   	push   ebp
c001af20:	31 c9                	xor    ecx,ecx
c001af22:	57                   	push   edi
c001af23:	bd 0c 00 00 00       	mov    ebp,0xc
c001af28:	56                   	push   esi
c001af29:	53                   	push   ebx
c001af2a:	31 db                	xor    ebx,ebx
c001af2c:	83 ec 10             	sub    esp,0x10
c001af2f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af33:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001af36:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001af39:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001af3c:	89 c2                	mov    edx,eax
c001af3e:	66 81 ef 6c 07       	sub    di,0x76c
c001af43:	83 e2 1f             	and    edx,0x1f
c001af46:	c1 e7 10             	shl    edi,0x10
c001af49:	42                   	inc    edx
c001af4a:	c1 e8 05             	shr    eax,0x5
c001af4d:	88 d1                	mov    cl,dl
c001af4f:	31 d2                	xor    edx,edx
c001af51:	f7 f5                	div    ebp
c001af53:	89 dd                	mov    ebp,ebx
c001af55:	88 d5                	mov    ch,dl
c001af57:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001af5d:	0f b7 c1             	movzx  eax,cx
c001af60:	31 d2                	xor    edx,edx
c001af62:	09 f8                	or     eax,edi
c001af64:	bf 3c 00 00 00       	mov    edi,0x3c
c001af69:	89 c1                	mov    ecx,eax
c001af6b:	89 f0                	mov    eax,esi
c001af6d:	f7 f7                	div    edi
c001af6f:	c1 e2 10             	shl    edx,0x10
c001af72:	09 d5                	or     ebp,edx
c001af74:	31 d2                	xor    edx,edx
c001af76:	89 eb                	mov    ebx,ebp
c001af78:	f7 f7                	div    edi
c001af7a:	bf 10 0e 00 00       	mov    edi,0xe10
c001af7f:	88 d7                	mov    bh,dl
c001af81:	89 f0                	mov    eax,esi
c001af83:	31 d2                	xor    edx,edx
c001af85:	f7 f7                	div    edi
c001af87:	bf 18 00 00 00       	mov    edi,0x18
c001af8c:	31 d2                	xor    edx,edx
c001af8e:	f7 f7                	div    edi
c001af90:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001af95:	88 d3                	mov    bl,dl
c001af97:	53                   	push   ebx
c001af98:	51                   	push   ecx
c001af99:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af9f:	e8 6a 88 ff ff       	call   c001380e <Clock::setTimeInDatetimeLocal(datetime_t)>
c001afa4:	83 c4 1c             	add    esp,0x1c
c001afa7:	83 f0 01             	xor    eax,0x1
c001afaa:	5b                   	pop    ebx
c001afab:	0f b6 c0             	movzx  eax,al
c001afae:	5e                   	pop    esi
c001afaf:	31 d2                	xor    edx,edx
c001afb1:	5f                   	pop    edi
c001afb2:	5d                   	pop    ebp
c001afb3:	c3                   	ret    

c001afb4 <Sys::timezone(regs*)>:
c001afb4:	53                   	push   ebx
c001afb5:	83 ec 08             	sub    esp,0x8
c001afb8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afbc:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001afc0:	75 17                	jne    c001afd9 <Sys::timezone(regs*)+0x25>
c001afc2:	83 ec 0c             	sub    esp,0xc
c001afc5:	68 f9 b8 02 c0       	push   0xc002b8f9
c001afca:	e8 26 77 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001afcf:	83 c8 ff             	or     eax,0xffffffff
c001afd2:	83 c4 10             	add    esp,0x10
c001afd5:	89 c2                	mov    edx,eax
c001afd7:	eb 20                	jmp    c001aff9 <Sys::timezone(regs*)+0x45>
c001afd9:	83 ec 0c             	sub    esp,0xc
c001afdc:	68 0e b9 02 c0       	push   0xc002b90e
c001afe1:	e8 0f 77 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001afe6:	58                   	pop    eax
c001afe7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001afea:	e8 81 85 ff ff       	call   c0013570 <User::loadClockSettings(int)>
c001afef:	83 c4 10             	add    esp,0x10
c001aff2:	b8 01 00 00 00       	mov    eax,0x1
c001aff7:	31 d2                	xor    edx,edx
c001aff9:	83 c4 08             	add    esp,0x8
c001affc:	5b                   	pop    ebx
c001affd:	c3                   	ret    

c001affe <Sys::write(regs*)>:
c001affe:	57                   	push   edi
c001afff:	56                   	push   esi
c001b000:	53                   	push   ebx
c001b001:	83 ec 10             	sub    esp,0x10
c001b004:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b008:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b00b:	83 f8 02             	cmp    eax,0x2
c001b00e:	77 10                	ja     c001b020 <Sys::write(regs*)+0x22>
c001b010:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b015:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b018:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b01e:	eb 0e                	jmp    c001b02e <Sys::write(regs*)+0x30>
c001b020:	83 ec 0c             	sub    esp,0xc
c001b023:	50                   	push   eax
c001b024:	e8 9e 60 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b029:	83 c4 10             	add    esp,0x10
c001b02c:	89 c1                	mov    ecx,eax
c001b02e:	83 c8 ff             	or     eax,0xffffffff
c001b031:	85 c9                	test   ecx,ecx
c001b033:	89 c2                	mov    edx,eax
c001b035:	74 28                	je     c001b05f <Sys::write(regs*)+0x61>
c001b037:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b03f:	31 ff                	xor    edi,edi
c001b041:	83 ec 0c             	sub    esp,0xc
c001b044:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b046:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b04a:	52                   	push   edx
c001b04b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b04e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b051:	57                   	push   edi
c001b052:	56                   	push   esi
c001b053:	51                   	push   ecx
c001b054:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b057:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b05b:	83 c4 20             	add    esp,0x20
c001b05e:	99                   	cdq    
c001b05f:	83 c4 10             	add    esp,0x10
c001b062:	5b                   	pop    ebx
c001b063:	5e                   	pop    esi
c001b064:	5f                   	pop    edi
c001b065:	c3                   	ret    

c001b066 <Sys::wsbe(regs*)>:
c001b066:	57                   	push   edi
c001b067:	b9 0b 00 00 00       	mov    ecx,0xb
c001b06c:	56                   	push   esi
c001b06d:	be 4d b9 02 c0       	mov    esi,0xc002b94d
c001b072:	53                   	push   ebx
c001b073:	83 ec 30             	sub    esp,0x30
c001b076:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b07a:	fc                   	cld    
c001b07b:	83 ec 0c             	sub    esp,0xc
c001b07e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b080:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b084:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b089:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b08c:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b092:	8b 06                	mov    eax,DWORD PTR [esi]
c001b094:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b097:	57                   	push   edi
c001b098:	e8 cf 56 fe ff       	call   c000076c <strlen>
c001b09d:	5a                   	pop    edx
c001b09e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b0a2:	52                   	push   edx
c001b0a3:	31 d2                	xor    edx,edx
c001b0a5:	57                   	push   edi
c001b0a6:	52                   	push   edx
c001b0a7:	50                   	push   eax
c001b0a8:	56                   	push   esi
c001b0a9:	ff d3                	call   ebx
c001b0ab:	83 c4 14             	add    esp,0x14
c001b0ae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b0b2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b0b5:	e8 d7 31 00 00       	call   c001e291 <terminateTask(int)>
c001b0ba:	83 c4 40             	add    esp,0x40
c001b0bd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b0c2:	5b                   	pop    ebx
c001b0c3:	31 d2                	xor    edx,edx
c001b0c5:	5e                   	pop    esi
c001b0c6:	5f                   	pop    edi
c001b0c7:	c3                   	ret    

c001b0c8 <Sys::yield(regs*)>:
c001b0c8:	57                   	push   edi
c001b0c9:	56                   	push   esi
c001b0ca:	53                   	push   ebx
c001b0cb:	fa                   	cli    
c001b0cc:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001b0d2:	e8 1a 29 00 00       	call   c001d9f1 <schedule()>
c001b0d7:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001b0dc:	48                   	dec    eax
c001b0dd:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001b0e2:	75 01                	jne    c001b0e5 <Sys::yield(regs*)+0x1d>
c001b0e4:	fb                   	sti    
c001b0e5:	8b 35 70 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e070
c001b0eb:	8b 3d 74 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e074
c001b0f1:	89 f0                	mov    eax,esi
c001b0f3:	89 fb                	mov    ebx,edi
c001b0f5:	89 f1                	mov    ecx,esi
c001b0f7:	c1 e0 07             	shl    eax,0x7
c001b0fa:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b0fe:	25 80 30 0f 00       	and    eax,0xf3080
c001b103:	c1 eb 17             	shr    ebx,0x17
c001b106:	31 c8                	xor    eax,ecx
c001b108:	89 da                	mov    edx,ebx
c001b10a:	5b                   	pop    ebx
c001b10b:	5e                   	pop    esi
c001b10c:	5f                   	pop    edi
c001b10d:	c3                   	ret    

c001b10e <sysCallSeekDir(regs*)>:
c001b10e:	31 c0                	xor    eax,eax
c001b110:	31 d2                	xor    edx,edx
c001b112:	c3                   	ret    

c001b113 <sysCallTellDir(regs*)>:
c001b113:	31 c0                	xor    eax,eax
c001b115:	31 d2                	xor    edx,edx
c001b117:	c3                   	ret    

c001b118 <sysCallVerify(regs*)>:
c001b118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b11c:	31 d2                	xor    edx,edx
c001b11e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b121:	c3                   	ret    

c001b122 <sysCallGetArgc(regs*)>:
c001b122:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b127:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b12a:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b130:	99                   	cdq    
c001b131:	c3                   	ret    

c001b132 <sysFormatDisk(regs*)>:
c001b132:	56                   	push   esi
c001b133:	53                   	push   ebx
c001b134:	53                   	push   ebx
c001b135:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b139:	8b 1d 74 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db74
c001b13f:	eb 25                	jmp    c001b166 <sysFormatDisk(regs*)+0x34>
c001b141:	83 ec 0c             	sub    esp,0xc
c001b144:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b147:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b149:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b14c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b14f:	50                   	push   eax
c001b150:	ff 34 85 00 e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd2000]
c001b157:	53                   	push   ebx
c001b158:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b15b:	83 c4 20             	add    esp,0x20
c001b15e:	83 f8 08             	cmp    eax,0x8
c001b161:	75 12                	jne    c001b175 <sysFormatDisk(regs*)+0x43>
c001b163:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b166:	85 db                	test   ebx,ebx
c001b168:	75 d7                	jne    c001b141 <sysFormatDisk(regs*)+0xf>
c001b16a:	59                   	pop    ecx
c001b16b:	b8 03 00 00 00       	mov    eax,0x3
c001b170:	31 d2                	xor    edx,edx
c001b172:	5b                   	pop    ebx
c001b173:	5e                   	pop    esi
c001b174:	c3                   	ret    
c001b175:	85 c0                	test   eax,eax
c001b177:	74 1b                	je     c001b194 <sysFormatDisk(regs*)+0x62>
c001b179:	83 f8 09             	cmp    eax,0x9
c001b17c:	74 0b                	je     c001b189 <sysFormatDisk(regs*)+0x57>
c001b17e:	59                   	pop    ecx
c001b17f:	b8 02 00 00 00       	mov    eax,0x2
c001b184:	31 d2                	xor    edx,edx
c001b186:	5b                   	pop    ebx
c001b187:	5e                   	pop    esi
c001b188:	c3                   	ret    
c001b189:	59                   	pop    ecx
c001b18a:	b8 01 00 00 00       	mov    eax,0x1
c001b18f:	31 d2                	xor    edx,edx
c001b191:	5b                   	pop    ebx
c001b192:	5e                   	pop    esi
c001b193:	c3                   	ret    
c001b194:	59                   	pop    ecx
c001b195:	31 c0                	xor    eax,eax
c001b197:	31 d2                	xor    edx,edx
c001b199:	5b                   	pop    ebx
c001b19a:	5e                   	pop    esi
c001b19b:	c3                   	ret    

c001b19c <sysSetDiskVolumeLabel(regs*)>:
c001b19c:	56                   	push   esi
c001b19d:	53                   	push   ebx
c001b19e:	53                   	push   ebx
c001b19f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1a3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b1a6:	83 f8 19             	cmp    eax,0x19
c001b1a9:	77 29                	ja     c001b1d4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b1ab:	8b 0c 85 00 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2000]
c001b1b2:	85 c9                	test   ecx,ecx
c001b1b4:	74 1e                	je     c001b1d4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b1b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b1b9:	85 d2                	test   edx,edx
c001b1bb:	74 17                	je     c001b1d4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b1bd:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b1c3:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b1c5:	52                   	push   edx
c001b1c6:	50                   	push   eax
c001b1c7:	51                   	push   ecx
c001b1c8:	53                   	push   ebx
c001b1c9:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b1cc:	83 c4 10             	add    esp,0x10
c001b1cf:	99                   	cdq    
c001b1d0:	59                   	pop    ecx
c001b1d1:	5b                   	pop    ebx
c001b1d2:	5e                   	pop    esi
c001b1d3:	c3                   	ret    
c001b1d4:	59                   	pop    ecx
c001b1d5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1da:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1df:	5b                   	pop    ebx
c001b1e0:	5e                   	pop    esi
c001b1e1:	c3                   	ret    

c001b1e2 <sysGetDiskVolumeLabel(regs*)>:
c001b1e2:	57                   	push   edi
c001b1e3:	56                   	push   esi
c001b1e4:	53                   	push   ebx
c001b1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b1ec:	83 fa 19             	cmp    edx,0x19
c001b1ef:	77 34                	ja     c001b225 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1f1:	8b 0c 95 00 e0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2000]
c001b1f8:	85 c9                	test   ecx,ecx
c001b1fa:	74 29                	je     c001b225 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1fc:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b1ff:	85 db                	test   ebx,ebx
c001b201:	74 22                	je     c001b225 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b203:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b206:	85 c0                	test   eax,eax
c001b208:	74 1b                	je     c001b225 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b20a:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b210:	83 ec 0c             	sub    esp,0xc
c001b213:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b215:	50                   	push   eax
c001b216:	53                   	push   ebx
c001b217:	52                   	push   edx
c001b218:	51                   	push   ecx
c001b219:	56                   	push   esi
c001b21a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b21d:	83 c4 20             	add    esp,0x20
c001b220:	99                   	cdq    
c001b221:	5b                   	pop    ebx
c001b222:	5e                   	pop    esi
c001b223:	5f                   	pop    edi
c001b224:	c3                   	ret    
c001b225:	5b                   	pop    ebx
c001b226:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b22b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b230:	5e                   	pop    esi
c001b231:	5f                   	pop    edi
c001b232:	c3                   	ret    

c001b233 <sysShutdown(regs*)>:
c001b233:	83 ec 0c             	sub    esp,0xc
c001b236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b23a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b23d:	85 c0                	test   eax,eax
c001b23f:	74 18                	je     c001b259 <sysShutdown(regs*)+0x26>
c001b241:	83 f8 01             	cmp    eax,0x1
c001b244:	74 38                	je     c001b27e <sysShutdown(regs*)+0x4b>
c001b246:	83 f8 02             	cmp    eax,0x2
c001b249:	74 24                	je     c001b26f <sysShutdown(regs*)+0x3c>
c001b24b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b250:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b255:	83 c4 0c             	add    esp,0xc
c001b258:	c3                   	ret    
c001b259:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001b25e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b260:	6a 00                	push   0x0
c001b262:	6a 00                	push   0x0
c001b264:	6a 00                	push   0x0
c001b266:	50                   	push   eax
c001b267:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b26a:	83 c4 10             	add    esp,0x10
c001b26d:	eb dc                	jmp    c001b24b <sysShutdown(regs*)+0x18>
c001b26f:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001b274:	8b 10                	mov    edx,DWORD PTR [eax]
c001b276:	6a 00                	push   0x0
c001b278:	6a 00                	push   0x0
c001b27a:	6a 01                	push   0x1
c001b27c:	eb e8                	jmp    c001b266 <sysShutdown(regs*)+0x33>
c001b27e:	a1 a0 00 03 c0       	mov    eax,ds:0xc00300a0
c001b283:	85 c0                	test   eax,eax
c001b285:	74 02                	je     c001b289 <sysShutdown(regs*)+0x56>
c001b287:	ff d0                	call   eax
c001b289:	31 c0                	xor    eax,eax
c001b28b:	31 d2                	xor    edx,edx
c001b28d:	83 c4 0c             	add    esp,0xc
c001b290:	c3                   	ret    

c001b291 <sysCallRealpath(regs*)>:
c001b291:	83 ec 0c             	sub    esp,0xc
c001b294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b298:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b29b:	85 d2                	test   edx,edx
c001b29d:	74 07                	je     c001b2a6 <sysCallRealpath(regs*)+0x15>
c001b29f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b2a2:	85 c0                	test   eax,eax
c001b2a4:	75 0b                	jne    c001b2b1 <sysCallRealpath(regs*)+0x20>
c001b2a6:	b8 01 00 00 00       	mov    eax,0x1
c001b2ab:	31 d2                	xor    edx,edx
c001b2ad:	83 c4 0c             	add    esp,0xc
c001b2b0:	c3                   	ret    
c001b2b1:	51                   	push   ecx
c001b2b2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b2b8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b2bb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b2c1:	51                   	push   ecx
c001b2c2:	52                   	push   edx
c001b2c3:	50                   	push   eax
c001b2c4:	e8 e1 77 ff ff       	call   c0012aaa <Fs::standardiseFiles(char*, char const*, char const*)>
c001b2c9:	83 c4 10             	add    esp,0x10
c001b2cc:	31 c0                	xor    eax,eax
c001b2ce:	31 d2                	xor    edx,edx
c001b2d0:	83 c4 0c             	add    esp,0xc
c001b2d3:	c3                   	ret    

c001b2d4 <sysCallReadDir(regs*)>:
c001b2d4:	53                   	push   ebx
c001b2d5:	83 ec 18             	sub    esp,0x18
c001b2d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2dc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2df:	83 f8 02             	cmp    eax,0x2
c001b2e2:	76 60                	jbe    c001b344 <sysCallReadDir(regs*)+0x70>
c001b2e4:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b2eb:	77 48                	ja     c001b335 <sysCallReadDir(regs*)+0x61>
c001b2ed:	83 ec 0c             	sub    esp,0xc
c001b2f0:	50                   	push   eax
c001b2f1:	e8 d1 5d ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b2f6:	83 c4 10             	add    esp,0x10
c001b2f9:	85 c0                	test   eax,eax
c001b2fb:	74 38                	je     c001b335 <sysCallReadDir(regs*)+0x61>
c001b2fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b305:	83 ec 0c             	sub    esp,0xc
c001b308:	8b 10                	mov    edx,DWORD PTR [eax]
c001b30a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b30e:	51                   	push   ecx
c001b30f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b312:	6a 00                	push   0x0
c001b314:	68 10 01 00 00       	push   0x110
c001b319:	50                   	push   eax
c001b31a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b31d:	83 c4 20             	add    esp,0x20
c001b320:	85 c0                	test   eax,eax
c001b322:	74 29                	je     c001b34d <sysCallReadDir(regs*)+0x79>
c001b324:	83 f8 07             	cmp    eax,0x7
c001b327:	74 1b                	je     c001b344 <sysCallReadDir(regs*)+0x70>
c001b329:	b8 02 00 00 00       	mov    eax,0x2
c001b32e:	31 d2                	xor    edx,edx
c001b330:	83 c4 18             	add    esp,0x18
c001b333:	5b                   	pop    ebx
c001b334:	c3                   	ret    
c001b335:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b33a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b33f:	83 c4 18             	add    esp,0x18
c001b342:	5b                   	pop    ebx
c001b343:	c3                   	ret    
c001b344:	b8 01 00 00 00       	mov    eax,0x1
c001b349:	31 d2                	xor    edx,edx
c001b34b:	eb e3                	jmp    c001b330 <sysCallReadDir(regs*)+0x5c>
c001b34d:	31 c0                	xor    eax,eax
c001b34f:	31 d2                	xor    edx,edx
c001b351:	eb dd                	jmp    c001b330 <sysCallReadDir(regs*)+0x5c>

c001b353 <sysCallIsATTY(regs*)>:
c001b353:	83 ec 0c             	sub    esp,0xc
c001b356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b35a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b35d:	83 f8 02             	cmp    eax,0x2
c001b360:	76 07                	jbe    c001b369 <sysCallIsATTY(regs*)+0x16>
c001b362:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b367:	75 26                	jne    c001b38f <sysCallIsATTY(regs*)+0x3c>
c001b369:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b36e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b371:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b377:	85 c0                	test   eax,eax
c001b379:	74 24                	je     c001b39f <sysCallIsATTY(regs*)+0x4c>
c001b37b:	83 ec 0c             	sub    esp,0xc
c001b37e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b380:	50                   	push   eax
c001b381:	ff 12                	call   DWORD PTR [edx]
c001b383:	31 d2                	xor    edx,edx
c001b385:	0f b6 c0             	movzx  eax,al
c001b388:	83 c4 10             	add    esp,0x10
c001b38b:	83 c4 0c             	add    esp,0xc
c001b38e:	c3                   	ret    
c001b38f:	83 ec 0c             	sub    esp,0xc
c001b392:	50                   	push   eax
c001b393:	e8 2f 5d ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b398:	83 c4 10             	add    esp,0x10
c001b39b:	85 c0                	test   eax,eax
c001b39d:	75 dc                	jne    c001b37b <sysCallIsATTY(regs*)+0x28>
c001b39f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3a9:	83 c4 0c             	add    esp,0xc
c001b3ac:	c3                   	ret    

c001b3ad <sysCallSeek(regs*)>:
c001b3ad:	53                   	push   ebx
c001b3ae:	83 ec 08             	sub    esp,0x8
c001b3b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3b8:	8d 50 fd             	lea    edx,[eax-0x3]
c001b3bb:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b3c1:	77 32                	ja     c001b3f5 <sysCallSeek(regs*)+0x48>
c001b3c3:	83 ec 0c             	sub    esp,0xc
c001b3c6:	50                   	push   eax
c001b3c7:	e8 fb 5c ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b3cc:	83 c4 0c             	add    esp,0xc
c001b3cf:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b3d2:	31 db                	xor    ebx,ebx
c001b3d4:	53                   	push   ebx
c001b3d5:	51                   	push   ecx
c001b3d6:	50                   	push   eax
c001b3d7:	e8 9a 79 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001b3dc:	83 c4 10             	add    esp,0x10
c001b3df:	85 c0                	test   eax,eax
c001b3e1:	0f 95 c0             	setne  al
c001b3e4:	31 d2                	xor    edx,edx
c001b3e6:	0f b6 c0             	movzx  eax,al
c001b3e9:	f7 d8                	neg    eax
c001b3eb:	83 d2 00             	adc    edx,0x0
c001b3ee:	83 c4 08             	add    esp,0x8
c001b3f1:	f7 da                	neg    edx
c001b3f3:	5b                   	pop    ebx
c001b3f4:	c3                   	ret    
c001b3f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3ff:	83 c4 08             	add    esp,0x8
c001b402:	5b                   	pop    ebx
c001b403:	c3                   	ret    

c001b404 <sysCallTell(regs*)>:
c001b404:	53                   	push   ebx
c001b405:	83 ec 08             	sub    esp,0x8
c001b408:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b40c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b40f:	83 f8 02             	cmp    eax,0x2
c001b412:	76 4d                	jbe    c001b461 <sysCallTell(regs*)+0x5d>
c001b414:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b419:	76 19                	jbe    c001b434 <sysCallTell(regs*)+0x30>
c001b41b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b41e:	31 d2                	xor    edx,edx
c001b420:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b426:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b42d:	31 c0                	xor    eax,eax
c001b42f:	83 c4 08             	add    esp,0x8
c001b432:	5b                   	pop    ebx
c001b433:	c3                   	ret    
c001b434:	83 ec 0c             	sub    esp,0xc
c001b437:	50                   	push   eax
c001b438:	e8 8a 5c ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b43d:	5a                   	pop    edx
c001b43e:	59                   	pop    ecx
c001b43f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b442:	50                   	push   eax
c001b443:	e8 84 79 ff ff       	call   c0012dcc <File::tell(unsigned long long*)>
c001b448:	83 c4 10             	add    esp,0x10
c001b44b:	85 c0                	test   eax,eax
c001b44d:	0f 95 c0             	setne  al
c001b450:	31 d2                	xor    edx,edx
c001b452:	0f b6 c0             	movzx  eax,al
c001b455:	f7 d8                	neg    eax
c001b457:	83 d2 00             	adc    edx,0x0
c001b45a:	83 c4 08             	add    esp,0x8
c001b45d:	f7 da                	neg    edx
c001b45f:	5b                   	pop    ebx
c001b460:	c3                   	ret    
c001b461:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b466:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b46b:	83 c4 08             	add    esp,0x8
c001b46e:	5b                   	pop    ebx
c001b46f:	c3                   	ret    

c001b470 <sysCallSize(regs*)>:
c001b470:	53                   	push   ebx
c001b471:	83 ec 18             	sub    esp,0x18
c001b474:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b478:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b47b:	83 f8 02             	cmp    eax,0x2
c001b47e:	76 53                	jbe    c001b4d3 <sysCallSize(regs*)+0x63>
c001b480:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b485:	76 19                	jbe    c001b4a0 <sysCallSize(regs*)+0x30>
c001b487:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b48a:	31 d2                	xor    edx,edx
c001b48c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b492:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b499:	31 c0                	xor    eax,eax
c001b49b:	83 c4 18             	add    esp,0x18
c001b49e:	5b                   	pop    ebx
c001b49f:	c3                   	ret    
c001b4a0:	83 ec 0c             	sub    esp,0xc
c001b4a3:	50                   	push   eax
c001b4a4:	e8 1e 5c ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b4a9:	83 c4 0c             	add    esp,0xc
c001b4ac:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b4b0:	52                   	push   edx
c001b4b1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b4b4:	50                   	push   eax
c001b4b5:	e8 aa 7a ff ff       	call   c0012f64 <File::stat(unsigned long long*, bool*)>
c001b4ba:	83 c4 10             	add    esp,0x10
c001b4bd:	85 c0                	test   eax,eax
c001b4bf:	0f 95 c0             	setne  al
c001b4c2:	31 d2                	xor    edx,edx
c001b4c4:	0f b6 c0             	movzx  eax,al
c001b4c7:	f7 d8                	neg    eax
c001b4c9:	83 d2 00             	adc    edx,0x0
c001b4cc:	83 c4 18             	add    esp,0x18
c001b4cf:	f7 da                	neg    edx
c001b4d1:	5b                   	pop    ebx
c001b4d2:	c3                   	ret    
c001b4d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4dd:	83 c4 18             	add    esp,0x18
c001b4e0:	5b                   	pop    ebx
c001b4e1:	c3                   	ret    

c001b4e2 <sysCallSizeFromFilename(regs*)>:
c001b4e2:	57                   	push   edi
c001b4e3:	56                   	push   esi
c001b4e4:	53                   	push   ebx
c001b4e5:	83 ec 20             	sub    esp,0x20
c001b4e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4ec:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b4ef:	83 fb 02             	cmp    ebx,0x2
c001b4f2:	0f 86 88 00 00 00    	jbe    c001b580 <sysCallSizeFromFilename(regs*)+0x9e>
c001b4f8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b4fe:	76 1b                	jbe    c001b51b <sysCallSizeFromFilename(regs*)+0x39>
c001b500:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b503:	31 d2                	xor    edx,edx
c001b505:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b50b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b512:	83 c4 20             	add    esp,0x20
c001b515:	31 c0                	xor    eax,eax
c001b517:	5b                   	pop    ebx
c001b518:	5e                   	pop    esi
c001b519:	5f                   	pop    edi
c001b51a:	c3                   	ret    
c001b51b:	83 ec 0c             	sub    esp,0xc
c001b51e:	68 14 01 00 00       	push   0x114
c001b523:	e8 71 40 ff ff       	call   c000f599 <malloc>
c001b528:	83 c4 0c             	add    esp,0xc
c001b52b:	89 c7                	mov    edi,eax
c001b52d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b532:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b535:	53                   	push   ebx
c001b536:	57                   	push   edi
c001b537:	e8 18 77 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001b53c:	83 c4 0c             	add    esp,0xc
c001b53f:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b543:	50                   	push   eax
c001b544:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b547:	57                   	push   edi
c001b548:	e8 17 7a ff ff       	call   c0012f64 <File::stat(unsigned long long*, bool*)>
c001b54d:	83 c4 10             	add    esp,0x10
c001b550:	85 ff                	test   edi,edi
c001b552:	74 14                	je     c001b568 <sysCallSizeFromFilename(regs*)+0x86>
c001b554:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b558:	8b 17                	mov    edx,DWORD PTR [edi]
c001b55a:	83 ec 0c             	sub    esp,0xc
c001b55d:	57                   	push   edi
c001b55e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b561:	83 c4 10             	add    esp,0x10
c001b564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b568:	85 c0                	test   eax,eax
c001b56a:	0f 95 c0             	setne  al
c001b56d:	31 d2                	xor    edx,edx
c001b56f:	0f b6 c0             	movzx  eax,al
c001b572:	f7 d8                	neg    eax
c001b574:	83 d2 00             	adc    edx,0x0
c001b577:	83 c4 20             	add    esp,0x20
c001b57a:	f7 da                	neg    edx
c001b57c:	5b                   	pop    ebx
c001b57d:	5e                   	pop    esi
c001b57e:	5f                   	pop    edi
c001b57f:	c3                   	ret    
c001b580:	83 c4 20             	add    esp,0x20
c001b583:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b588:	5b                   	pop    ebx
c001b589:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b58e:	5e                   	pop    esi
c001b58f:	5f                   	pop    edi
c001b590:	c3                   	ret    

c001b591 <sysCallClose(regs*)>:
c001b591:	53                   	push   ebx
c001b592:	83 ec 08             	sub    esp,0x8
c001b595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b599:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b59c:	83 f8 02             	cmp    eax,0x2
c001b59f:	76 41                	jbe    c001b5e2 <sysCallClose(regs*)+0x51>
c001b5a1:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b5a7:	83 fa 01             	cmp    edx,0x1
c001b5aa:	76 2d                	jbe    c001b5d9 <sysCallClose(regs*)+0x48>
c001b5ac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b5b1:	77 2f                	ja     c001b5e2 <sysCallClose(regs*)+0x51>
c001b5b3:	83 ec 0c             	sub    esp,0xc
c001b5b6:	50                   	push   eax
c001b5b7:	e8 0b 5b ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b5bc:	89 c3                	mov    ebx,eax
c001b5be:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5c1:	e8 50 77 ff ff       	call   c0012d16 <File::close()>
c001b5c6:	83 c4 10             	add    esp,0x10
c001b5c9:	85 db                	test   ebx,ebx
c001b5cb:	74 0c                	je     c001b5d9 <sysCallClose(regs*)+0x48>
c001b5cd:	83 ec 0c             	sub    esp,0xc
c001b5d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5d2:	53                   	push   ebx
c001b5d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5d6:	83 c4 10             	add    esp,0x10
c001b5d9:	31 c0                	xor    eax,eax
c001b5db:	31 d2                	xor    edx,edx
c001b5dd:	83 c4 08             	add    esp,0x8
c001b5e0:	5b                   	pop    ebx
c001b5e1:	c3                   	ret    
c001b5e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5ec:	83 c4 08             	add    esp,0x8
c001b5ef:	5b                   	pop    ebx
c001b5f0:	c3                   	ret    

c001b5f1 <sysCallOpenDir(regs*)>:
c001b5f1:	56                   	push   esi
c001b5f2:	53                   	push   ebx
c001b5f3:	53                   	push   ebx
c001b5f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5f8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b5fb:	85 f6                	test   esi,esi
c001b5fd:	74 59                	je     c001b658 <sysCallOpenDir(regs*)+0x67>
c001b5ff:	83 ec 0c             	sub    esp,0xc
c001b602:	68 14 01 00 00       	push   0x114
c001b607:	e8 8d 3f ff ff       	call   c000f599 <malloc>
c001b60c:	83 c4 0c             	add    esp,0xc
c001b60f:	89 c6                	mov    esi,eax
c001b611:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b616:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b619:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b61c:	56                   	push   esi
c001b61d:	e8 de 7a ff ff       	call   c0013100 <Directory::Directory(char const*, Process*)>
c001b622:	83 c4 10             	add    esp,0x10
c001b625:	85 f6                	test   esi,esi
c001b627:	74 2f                	je     c001b658 <sysCallOpenDir(regs*)+0x67>
c001b629:	83 ec 0c             	sub    esp,0xc
c001b62c:	56                   	push   esi
c001b62d:	e8 32 7b ff ff       	call   c0013164 <Directory::open()>
c001b632:	83 c4 10             	add    esp,0x10
c001b635:	85 c0                	test   eax,eax
c001b637:	75 1f                	jne    c001b658 <sysCallOpenDir(regs*)+0x67>
c001b639:	83 ec 0c             	sub    esp,0xc
c001b63c:	56                   	push   esi
c001b63d:	e8 90 57 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001b642:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b645:	83 c4 10             	add    esp,0x10
c001b648:	89 02                	mov    DWORD PTR [edx],eax
c001b64a:	c1 f8 1f             	sar    eax,0x1f
c001b64d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b650:	31 c0                	xor    eax,eax
c001b652:	59                   	pop    ecx
c001b653:	31 d2                	xor    edx,edx
c001b655:	5b                   	pop    ebx
c001b656:	5e                   	pop    esi
c001b657:	c3                   	ret    
c001b658:	59                   	pop    ecx
c001b659:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b65e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b663:	5b                   	pop    ebx
c001b664:	5e                   	pop    esi
c001b665:	c3                   	ret    

c001b666 <sysCallCloseDir(regs*)>:
c001b666:	53                   	push   ebx
c001b667:	83 ec 08             	sub    esp,0x8
c001b66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b66e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b671:	8d 50 fd             	lea    edx,[eax-0x3]
c001b674:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b67a:	77 2f                	ja     c001b6ab <sysCallCloseDir(regs*)+0x45>
c001b67c:	83 ec 0c             	sub    esp,0xc
c001b67f:	50                   	push   eax
c001b680:	e8 42 5a ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b685:	89 c3                	mov    ebx,eax
c001b687:	89 04 24             	mov    DWORD PTR [esp],eax
c001b68a:	e8 31 7b ff ff       	call   c00131c0 <Directory::close()>
c001b68f:	83 c4 10             	add    esp,0x10
c001b692:	85 db                	test   ebx,ebx
c001b694:	74 0c                	je     c001b6a2 <sysCallCloseDir(regs*)+0x3c>
c001b696:	83 ec 0c             	sub    esp,0xc
c001b699:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b69b:	53                   	push   ebx
c001b69c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b69f:	83 c4 10             	add    esp,0x10
c001b6a2:	31 c0                	xor    eax,eax
c001b6a4:	31 d2                	xor    edx,edx
c001b6a6:	83 c4 08             	add    esp,0x8
c001b6a9:	5b                   	pop    ebx
c001b6aa:	c3                   	ret    
c001b6ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6b5:	83 c4 08             	add    esp,0x8
c001b6b8:	5b                   	pop    ebx
c001b6b9:	c3                   	ret    

c001b6ba <sysCallMakeDir(regs*)>:
c001b6ba:	56                   	push   esi
c001b6bb:	53                   	push   ebx
c001b6bc:	83 ec 10             	sub    esp,0x10
c001b6bf:	68 14 01 00 00       	push   0x114
c001b6c4:	e8 d0 3e ff ff       	call   c000f599 <malloc>
c001b6c9:	83 c4 0c             	add    esp,0xc
c001b6cc:	89 c3                	mov    ebx,eax
c001b6ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6d3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6da:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6dd:	53                   	push   ebx
c001b6de:	e8 1d 7a ff ff       	call   c0013100 <Directory::Directory(char const*, Process*)>
c001b6e3:	83 c4 10             	add    esp,0x10
c001b6e6:	85 db                	test   ebx,ebx
c001b6e8:	74 32                	je     c001b71c <sysCallMakeDir(regs*)+0x62>
c001b6ea:	83 ec 0c             	sub    esp,0xc
c001b6ed:	53                   	push   ebx
c001b6ee:	e8 51 7c ff ff       	call   c0013344 <Directory::create()>
c001b6f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6f6:	89 c6                	mov    esi,eax
c001b6f8:	e8 c3 7a ff ff       	call   c00131c0 <Directory::close()>
c001b6fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b702:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b705:	83 c4 10             	add    esp,0x10
c001b708:	31 c0                	xor    eax,eax
c001b70a:	59                   	pop    ecx
c001b70b:	85 f6                	test   esi,esi
c001b70d:	5b                   	pop    ebx
c001b70e:	0f 95 c0             	setne  al
c001b711:	5e                   	pop    esi
c001b712:	31 d2                	xor    edx,edx
c001b714:	f7 d8                	neg    eax
c001b716:	83 d2 00             	adc    edx,0x0
c001b719:	f7 da                	neg    edx
c001b71b:	c3                   	ret    
c001b71c:	59                   	pop    ecx
c001b71d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b722:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b727:	5b                   	pop    ebx
c001b728:	5e                   	pop    esi
c001b729:	c3                   	ret    

c001b72a <sysCallWait(regs*)>:
c001b72a:	83 ec 10             	sub    esp,0x10
c001b72d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b731:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b734:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b737:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b73a:	e8 b5 24 00 00       	call   c001dbf4 <waitTask(int, int*, int)>
c001b73f:	83 c4 1c             	add    esp,0x1c
c001b742:	99                   	cdq    
c001b743:	c3                   	ret    

c001b744 <sysCallNotImpl(regs*)>:
c001b744:	83 ec 18             	sub    esp,0x18
c001b747:	68 79 b9 02 c0       	push   0xc002b979
c001b74c:	e8 10 e7 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001b751:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b756:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b75b:	83 c4 1c             	add    esp,0x1c
c001b75e:	c3                   	ret    

c001b75f <sysPanic(regs*)>:
c001b75f:	83 ec 18             	sub    esp,0x18
c001b762:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b766:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b769:	e8 f3 e6 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001b76e:	b8 01 00 00 00       	mov    eax,0x1
c001b773:	31 d2                	xor    edx,edx
c001b775:	83 c4 1c             	add    esp,0x1c
c001b778:	c3                   	ret    

c001b779 <sysCallRmdir(regs*)>:
c001b779:	56                   	push   esi
c001b77a:	53                   	push   ebx
c001b77b:	83 ec 20             	sub    esp,0x20
c001b77e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b782:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b785:	68 14 01 00 00       	push   0x114
c001b78a:	e8 0a 3e ff ff       	call   c000f599 <malloc>
c001b78f:	83 c4 0c             	add    esp,0xc
c001b792:	89 c3                	mov    ebx,eax
c001b794:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b799:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b79c:	56                   	push   esi
c001b79d:	53                   	push   ebx
c001b79e:	e8 b1 74 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001b7a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7a6:	e8 85 76 ff ff       	call   c0012e30 <File::unlink()>
c001b7ab:	83 c4 10             	add    esp,0x10
c001b7ae:	85 db                	test   ebx,ebx
c001b7b0:	74 14                	je     c001b7c6 <sysCallRmdir(regs*)+0x4d>
c001b7b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7b6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7b8:	83 ec 0c             	sub    esp,0xc
c001b7bb:	53                   	push   ebx
c001b7bc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7bf:	83 c4 10             	add    esp,0x10
c001b7c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7c6:	85 c0                	test   eax,eax
c001b7c8:	0f 95 c0             	setne  al
c001b7cb:	31 d2                	xor    edx,edx
c001b7cd:	0f b6 c0             	movzx  eax,al
c001b7d0:	f7 d8                	neg    eax
c001b7d2:	83 d2 00             	adc    edx,0x0
c001b7d5:	83 c4 14             	add    esp,0x14
c001b7d8:	f7 da                	neg    edx
c001b7da:	5b                   	pop    ebx
c001b7db:	5e                   	pop    esi
c001b7dc:	c3                   	ret    

c001b7dd <sysCallUnlink(regs*)>:
c001b7dd:	56                   	push   esi
c001b7de:	53                   	push   ebx
c001b7df:	83 ec 20             	sub    esp,0x20
c001b7e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7e6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7e9:	68 14 01 00 00       	push   0x114
c001b7ee:	e8 a6 3d ff ff       	call   c000f599 <malloc>
c001b7f3:	83 c4 0c             	add    esp,0xc
c001b7f6:	89 c3                	mov    ebx,eax
c001b7f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7fd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b800:	56                   	push   esi
c001b801:	53                   	push   ebx
c001b802:	e8 4d 74 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001b807:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b80a:	e8 21 76 ff ff       	call   c0012e30 <File::unlink()>
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	85 db                	test   ebx,ebx
c001b814:	74 14                	je     c001b82a <sysCallUnlink(regs*)+0x4d>
c001b816:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b81a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b81c:	83 ec 0c             	sub    esp,0xc
c001b81f:	53                   	push   ebx
c001b820:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b823:	83 c4 10             	add    esp,0x10
c001b826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b82a:	85 c0                	test   eax,eax
c001b82c:	0f 95 c0             	setne  al
c001b82f:	31 d2                	xor    edx,edx
c001b831:	0f b6 c0             	movzx  eax,al
c001b834:	f7 d8                	neg    eax
c001b836:	83 d2 00             	adc    edx,0x0
c001b839:	83 c4 14             	add    esp,0x14
c001b83c:	f7 da                	neg    edx
c001b83e:	5b                   	pop    ebx
c001b83f:	5e                   	pop    esi
c001b840:	c3                   	ret    

c001b841 <sysCallGetArgv(regs*)>:
c001b841:	83 ec 0c             	sub    esp,0xc
c001b844:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b848:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b84b:	85 c0                	test   eax,eax
c001b84d:	78 2b                	js     c001b87a <sysCallGetArgv(regs*)+0x39>
c001b84f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b855:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b858:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b85e:	7d 1a                	jge    c001b87a <sysCallGetArgv(regs*)+0x39>
c001b860:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b867:	85 c0                	test   eax,eax
c001b869:	74 17                	je     c001b882 <sysCallGetArgv(regs*)+0x41>
c001b86b:	83 ec 08             	sub    esp,0x8
c001b86e:	50                   	push   eax
c001b86f:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b872:	e8 95 4f fe ff       	call   c000080c <strcpy>
c001b877:	83 c4 10             	add    esp,0x10
c001b87a:	31 c0                	xor    eax,eax
c001b87c:	31 d2                	xor    edx,edx
c001b87e:	83 c4 0c             	add    esp,0xc
c001b881:	c3                   	ret    
c001b882:	b8 01 00 00 00       	mov    eax,0x1
c001b887:	31 d2                	xor    edx,edx
c001b889:	83 c4 0c             	add    esp,0xc
c001b88c:	c3                   	ret    

c001b88d <sysCallTTYName(regs*)>:
c001b88d:	56                   	push   esi
c001b88e:	53                   	push   ebx
c001b88f:	53                   	push   ebx
c001b890:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b894:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b897:	85 c0                	test   eax,eax
c001b899:	74 5f                	je     c001b8fa <sysCallTTYName(regs*)+0x6d>
c001b89b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b89e:	83 f8 02             	cmp    eax,0x2
c001b8a1:	77 3e                	ja     c001b8e1 <sysCallTTYName(regs*)+0x54>
c001b8a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8ab:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b8b1:	85 db                	test   ebx,ebx
c001b8b3:	74 45                	je     c001b8fa <sysCallTTYName(regs*)+0x6d>
c001b8b5:	83 ec 0c             	sub    esp,0xc
c001b8b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8ba:	53                   	push   ebx
c001b8bb:	ff 10                	call   DWORD PTR [eax]
c001b8bd:	83 c4 10             	add    esp,0x10
c001b8c0:	84 c0                	test   al,al
c001b8c2:	74 41                	je     c001b905 <sysCallTTYName(regs*)+0x78>
c001b8c4:	83 ec 08             	sub    esp,0x8
c001b8c7:	81 c3 82 00 00 00    	add    ebx,0x82
c001b8cd:	53                   	push   ebx
c001b8ce:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b8d1:	e8 36 4f fe ff       	call   c000080c <strcpy>
c001b8d6:	83 c4 10             	add    esp,0x10
c001b8d9:	31 c0                	xor    eax,eax
c001b8db:	59                   	pop    ecx
c001b8dc:	31 d2                	xor    edx,edx
c001b8de:	5b                   	pop    ebx
c001b8df:	5e                   	pop    esi
c001b8e0:	c3                   	ret    
c001b8e1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8e6:	74 bb                	je     c001b8a3 <sysCallTTYName(regs*)+0x16>
c001b8e8:	83 ec 0c             	sub    esp,0xc
c001b8eb:	50                   	push   eax
c001b8ec:	e8 d6 57 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b8f1:	83 c4 10             	add    esp,0x10
c001b8f4:	89 c3                	mov    ebx,eax
c001b8f6:	85 db                	test   ebx,ebx
c001b8f8:	75 bb                	jne    c001b8b5 <sysCallTTYName(regs*)+0x28>
c001b8fa:	59                   	pop    ecx
c001b8fb:	b8 01 00 00 00       	mov    eax,0x1
c001b900:	31 d2                	xor    edx,edx
c001b902:	5b                   	pop    ebx
c001b903:	5e                   	pop    esi
c001b904:	c3                   	ret    
c001b905:	59                   	pop    ecx
c001b906:	b8 02 00 00 00       	mov    eax,0x2
c001b90b:	31 d2                	xor    edx,edx
c001b90d:	5b                   	pop    ebx
c001b90e:	5e                   	pop    esi
c001b90f:	c3                   	ret    

c001b910 <sysCallUSleep(regs*)>:
c001b910:	83 ec 14             	sub    esp,0x14
c001b913:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b918:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b91c:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b923:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b926:	01 ca                	add    edx,ecx
c001b928:	52                   	push   edx
c001b929:	50                   	push   eax
c001b92a:	e8 9c 23 00 00       	call   c001dccb <nanoSleep(unsigned long long)>
c001b92f:	31 c0                	xor    eax,eax
c001b931:	31 d2                	xor    edx,edx
c001b933:	83 c4 1c             	add    esp,0x1c
c001b936:	c3                   	ret    

c001b937 <sysCallSpawn(regs*)>:
c001b937:	56                   	push   esi
c001b938:	53                   	push   ebx
c001b939:	50                   	push   eax
c001b93a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b93e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b941:	85 c0                	test   eax,eax
c001b943:	75 08                	jne    c001b94d <sysCallSpawn(regs*)+0x16>
c001b945:	59                   	pop    ecx
c001b946:	31 c0                	xor    eax,eax
c001b948:	31 d2                	xor    edx,edx
c001b94a:	5b                   	pop    ebx
c001b94b:	5e                   	pop    esi
c001b94c:	c3                   	ret    
c001b94d:	83 ec 0c             	sub    esp,0xc
c001b950:	68 3f 07 00 00       	push   0x73f
c001b955:	e8 3f 3c ff ff       	call   c000f599 <malloc>
c001b95a:	83 c4 10             	add    esp,0x10
c001b95d:	89 c6                	mov    esi,eax
c001b95f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b962:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b965:	85 c0                	test   eax,eax
c001b967:	75 32                	jne    c001b99b <sysCallSpawn(regs*)+0x64>
c001b969:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b96e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b971:	52                   	push   edx
c001b972:	50                   	push   eax
c001b973:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b976:	56                   	push   esi
c001b977:	e8 74 1a 00 00       	call   c001d3f0 <Process::Process(char const*, Process*, char**)>
c001b97c:	83 c4 10             	add    esp,0x10
c001b97f:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b986:	75 bd                	jne    c001b945 <sysCallSpawn(regs*)+0xe>
c001b988:	83 ec 0c             	sub    esp,0xc
c001b98b:	56                   	push   esi
c001b98c:	e8 41 1f 00 00       	call   c001d8d2 <Process::createUserThread()>
c001b991:	8b 06                	mov    eax,DWORD PTR [esi]
c001b993:	83 c4 10             	add    esp,0x10
c001b996:	99                   	cdq    
c001b997:	59                   	pop    ecx
c001b998:	5b                   	pop    ebx
c001b999:	5e                   	pop    esi
c001b99a:	c3                   	ret    
c001b99b:	31 c0                	xor    eax,eax
c001b99d:	eb d2                	jmp    c001b971 <sysCallSpawn(regs*)+0x3a>

c001b99f <sysCallGetEnv(regs*)>:
c001b99f:	57                   	push   edi
c001b9a0:	56                   	push   esi
c001b9a1:	53                   	push   ebx
c001b9a2:	83 ec 1c             	sub    esp,0x1c
c001b9a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b9a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9ae:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b9b1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b9b4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9b7:	e8 f1 e3 ff ff       	call   c0019dad <Krnl::getProcessTotalEnvCount(Process*)>
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	39 c7                	cmp    edi,eax
c001b9c1:	7c 14                	jl     c001b9d7 <sysCallGetEnv(regs*)+0x38>
c001b9c3:	85 f6                	test   esi,esi
c001b9c5:	75 0b                	jne    c001b9d2 <sysCallGetEnv(regs*)+0x33>
c001b9c7:	83 c4 10             	add    esp,0x10
c001b9ca:	31 c0                	xor    eax,eax
c001b9cc:	5b                   	pop    ebx
c001b9cd:	31 d2                	xor    edx,edx
c001b9cf:	5e                   	pop    esi
c001b9d0:	5f                   	pop    edi
c001b9d1:	c3                   	ret    
c001b9d2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9d5:	eb f0                	jmp    c001b9c7 <sysCallGetEnv(regs*)+0x28>
c001b9d7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9db:	52                   	push   edx
c001b9dc:	57                   	push   edi
c001b9dd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9e3:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b9e6:	50                   	push   eax
c001b9e7:	e8 e1 e3 ff ff       	call   c0019dcd <Krnl::getProcessEnvPair(Process*, int)>
c001b9ec:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b9f7:	83 c4 0c             	add    esp,0xc
c001b9fa:	85 c9                	test   ecx,ecx
c001b9fc:	75 23                	jne    c001ba21 <sysCallGetEnv(regs*)+0x82>
c001b9fe:	83 ec 0c             	sub    esp,0xc
c001ba01:	50                   	push   eax
c001ba02:	e8 65 4d fe ff       	call   c000076c <strlen>
c001ba07:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba0a:	89 c3                	mov    ebx,eax
c001ba0c:	e8 5b 4d fe ff       	call   c000076c <strlen>
c001ba11:	83 c4 10             	add    esp,0x10
c001ba14:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001ba18:	83 c4 10             	add    esp,0x10
c001ba1b:	31 d2                	xor    edx,edx
c001ba1d:	5b                   	pop    ebx
c001ba1e:	5e                   	pop    esi
c001ba1f:	5f                   	pop    edi
c001ba20:	c3                   	ret    
c001ba21:	83 ec 08             	sub    esp,0x8
c001ba24:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba27:	50                   	push   eax
c001ba28:	56                   	push   esi
c001ba29:	e8 de 4d fe ff       	call   c000080c <strcpy>
c001ba2e:	58                   	pop    eax
c001ba2f:	5a                   	pop    edx
c001ba30:	68 93 b9 02 c0       	push   0xc002b993
c001ba35:	56                   	push   esi
c001ba36:	e8 11 4f fe ff       	call   c000094c <strcat>
c001ba3b:	59                   	pop    ecx
c001ba3c:	5b                   	pop    ebx
c001ba3d:	57                   	push   edi
c001ba3e:	56                   	push   esi
c001ba3f:	e8 08 4f fe ff       	call   c000094c <strcat>
c001ba44:	83 c4 10             	add    esp,0x10
c001ba47:	e9 7b ff ff ff       	jmp    c001b9c7 <sysCallGetEnv(regs*)+0x28>

c001ba4c <sysAppSettings(regs*)>:
c001ba4c:	57                   	push   edi
c001ba4d:	56                   	push   esi
c001ba4e:	56                   	push   esi
c001ba4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba53:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba56:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001ba5c:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba61:	66 3d c0 09          	cmp    ax,0x9c0
c001ba65:	75 2e                	jne    c001ba95 <sysAppSettings(regs*)+0x49>
c001ba67:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001ba6d:	83 e0 1f             	and    eax,0x1f
c001ba70:	3c 01                	cmp    al,0x1
c001ba72:	74 2c                	je     c001baa0 <sysAppSettings(regs*)+0x54>
c001ba74:	3c 07                	cmp    al,0x7
c001ba76:	0f 84 b3 00 00 00    	je     c001bb2f <sysAppSettings(regs*)+0xe3>
c001ba7c:	84 c0                	test   al,al
c001ba7e:	0f 84 d2 00 00 00    	je     c001bb56 <sysAppSettings(regs*)+0x10a>
c001ba84:	3c 08                	cmp    al,0x8
c001ba86:	74 63                	je     c001baeb <sysAppSettings(regs*)+0x9f>
c001ba88:	59                   	pop    ecx
c001ba89:	0f b6 c0             	movzx  eax,al
c001ba8c:	5e                   	pop    esi
c001ba8d:	05 e8 03 00 00       	add    eax,0x3e8
c001ba92:	5f                   	pop    edi
c001ba93:	99                   	cdq    
c001ba94:	c3                   	ret    
c001ba95:	b8 01 00 00 00       	mov    eax,0x1
c001ba9a:	59                   	pop    ecx
c001ba9b:	31 d2                	xor    edx,edx
c001ba9d:	5e                   	pop    esi
c001ba9e:	5f                   	pop    edi
c001ba9f:	c3                   	ret    
c001baa0:	50                   	push   eax
c001baa1:	68 00 01 00 00       	push   0x100
c001baa6:	6a 00                	push   0x0
c001baa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bab0:	83 c0 0c             	add    eax,0xc
c001bab3:	50                   	push   eax
c001bab4:	e8 97 4c fe ff       	call   c0000750 <memset>
c001bab9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001babe:	b9 ff 00 00 00       	mov    ecx,0xff
c001bac3:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bac6:	83 c7 0c             	add    edi,0xc
c001bac9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bacb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bad0:	5a                   	pop    edx
c001bad1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bad4:	59                   	pop    ecx
c001bad5:	8d 50 0c             	lea    edx,[eax+0xc]
c001bad8:	52                   	push   edx
c001bad9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001badf:	e8 0e 47 ff ff       	call   c00101f2 <VgaText::setTitle(char*)>
c001bae4:	83 c4 10             	add    esp,0x10
c001bae7:	31 c0                	xor    eax,eax
c001bae9:	eb af                	jmp    c001ba9a <sysAppSettings(regs*)+0x4e>
c001baeb:	83 ec 08             	sub    esp,0x8
c001baee:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001baf4:	83 e0 0f             	and    eax,0xf
c001baf7:	50                   	push   eax
c001baf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bafd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb06:	e8 d7 46 ff ff       	call   c00101e2 <VgaText::setTitleColour(VgaColour)>
c001bb0b:	5f                   	pop    edi
c001bb0c:	58                   	pop    eax
c001bb0d:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bb13:	c1 e8 04             	shr    eax,0x4
c001bb16:	83 e0 0f             	and    eax,0xf
c001bb19:	50                   	push   eax
c001bb1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb28:	e8 a5 46 ff ff       	call   c00101d2 <VgaText::setTitleTextColour(VgaColour)>
c001bb2d:	eb b5                	jmp    c001bae4 <sysAppSettings(regs*)+0x98>
c001bb2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb34:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb37:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb3d:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bb43:	c0 e8 06             	shr    al,0x6
c001bb46:	83 e0 01             	and    eax,0x1
c001bb49:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bb4f:	31 c0                	xor    eax,eax
c001bb51:	e9 44 ff ff ff       	jmp    c001ba9a <sysAppSettings(regs*)+0x4e>
c001bb56:	b8 02 00 00 00       	mov    eax,0x2
c001bb5b:	e9 3a ff ff ff       	jmp    c001ba9a <sysAppSettings(regs*)+0x4e>

c001bb60 <sysSetFatAttrib(regs*)>:
c001bb60:	57                   	push   edi
c001bb61:	56                   	push   esi
c001bb62:	53                   	push   ebx
c001bb63:	83 ec 1c             	sub    esp,0x1c
c001bb66:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb6a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb6d:	68 14 01 00 00       	push   0x114
c001bb72:	e8 22 3a ff ff       	call   c000f599 <malloc>
c001bb77:	83 c4 0c             	add    esp,0xc
c001bb7a:	89 c3                	mov    ebx,eax
c001bb7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb81:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb84:	57                   	push   edi
c001bb85:	53                   	push   ebx
c001bb86:	e8 c9 70 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001bb8b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb8e:	83 c4 0c             	add    esp,0xc
c001bb91:	0f b6 d4             	movzx  edx,ah
c001bb94:	0f b6 c0             	movzx  eax,al
c001bb97:	52                   	push   edx
c001bb98:	50                   	push   eax
c001bb99:	53                   	push   ebx
c001bb9a:	e8 2b 73 ff ff       	call   c0012eca <File::chfatattr(unsigned char, unsigned char)>
c001bb9f:	83 c4 10             	add    esp,0x10
c001bba2:	85 db                	test   ebx,ebx
c001bba4:	74 14                	je     c001bbba <sysSetFatAttrib(regs*)+0x5a>
c001bba6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbaa:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bbac:	83 ec 0c             	sub    esp,0xc
c001bbaf:	53                   	push   ebx
c001bbb0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbb3:	83 c4 10             	add    esp,0x10
c001bbb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbba:	85 c0                	test   eax,eax
c001bbbc:	0f 95 c0             	setne  al
c001bbbf:	31 d2                	xor    edx,edx
c001bbc1:	0f b6 c0             	movzx  eax,al
c001bbc4:	f7 d8                	neg    eax
c001bbc6:	83 d2 00             	adc    edx,0x0
c001bbc9:	83 c4 10             	add    esp,0x10
c001bbcc:	f7 da                	neg    edx
c001bbce:	5b                   	pop    ebx
c001bbcf:	5e                   	pop    esi
c001bbd0:	5f                   	pop    edi
c001bbd1:	c3                   	ret    

c001bbd2 <sysPipe(regs*)>:
c001bbd2:	57                   	push   edi
c001bbd3:	56                   	push   esi
c001bbd4:	53                   	push   ebx
c001bbd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd9:	83 ec 0c             	sub    esp,0xc
c001bbdc:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bbdf:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bbe2:	6a 20                	push   0x20
c001bbe4:	e8 b0 39 ff ff       	call   c000f599 <malloc>
c001bbe9:	89 c3                	mov    ebx,eax
c001bbeb:	58                   	pop    eax
c001bbec:	5a                   	pop    edx
c001bbed:	68 00 50 00 00       	push   0x5000
c001bbf2:	53                   	push   ebx
c001bbf3:	e8 72 43 ff ff       	call   c000ff6a <Pipe::Pipe(int)>
c001bbf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbfb:	e8 d2 51 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001bc00:	89 07                	mov    DWORD PTR [edi],eax
c001bc02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc05:	e8 c8 51 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001bc0a:	83 c4 10             	add    esp,0x10
c001bc0d:	89 06                	mov    DWORD PTR [esi],eax
c001bc0f:	31 d2                	xor    edx,edx
c001bc11:	5b                   	pop    ebx
c001bc12:	31 c0                	xor    eax,eax
c001bc14:	5e                   	pop    esi
c001bc15:	5f                   	pop    edi
c001bc16:	c3                   	ret    

c001bc17 <sysGetUnixTime(regs*)>:
c001bc17:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001bc1c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc26:	e9 1b 7a ff ff       	jmp    c0013646 <Clock::timeInSecondsLocal()>

c001bc2b <string_ends_with(char const*, char const*)>:
c001bc2b:	57                   	push   edi
c001bc2c:	56                   	push   esi
c001bc2d:	53                   	push   ebx
c001bc2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc32:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc36:	83 ec 0c             	sub    esp,0xc
c001bc39:	53                   	push   ebx
c001bc3a:	e8 2d 4b fe ff       	call   c000076c <strlen>
c001bc3f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc42:	89 c6                	mov    esi,eax
c001bc44:	e8 23 4b fe ff       	call   c000076c <strlen>
c001bc49:	83 c4 10             	add    esp,0x10
c001bc4c:	39 c6                	cmp    esi,eax
c001bc4e:	7d 06                	jge    c001bc56 <string_ends_with(char const*, char const*)+0x2b>
c001bc50:	5b                   	pop    ebx
c001bc51:	31 c0                	xor    eax,eax
c001bc53:	5e                   	pop    esi
c001bc54:	5f                   	pop    edi
c001bc55:	c3                   	ret    
c001bc56:	83 ec 08             	sub    esp,0x8
c001bc59:	29 c6                	sub    esi,eax
c001bc5b:	57                   	push   edi
c001bc5c:	01 f3                	add    ebx,esi
c001bc5e:	53                   	push   ebx
c001bc5f:	e8 34 4c fe ff       	call   c0000898 <strcmp>
c001bc64:	83 c4 10             	add    esp,0x10
c001bc67:	85 c0                	test   eax,eax
c001bc69:	5b                   	pop    ebx
c001bc6a:	0f 94 c0             	sete   al
c001bc6d:	5e                   	pop    esi
c001bc6e:	0f b6 c0             	movzx  eax,al
c001bc71:	5f                   	pop    edi
c001bc72:	c3                   	ret    

c001bc73 <sysCallOpen(regs*)>:
c001bc73:	56                   	push   esi
c001bc74:	53                   	push   ebx
c001bc75:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc7b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bc82:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bc85:	85 c9                	test   ecx,ecx
c001bc87:	0f 84 ad 01 00 00    	je     c001be3a <sysCallOpen(regs*)+0x1c7>
c001bc8d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc90:	85 c0                	test   eax,eax
c001bc92:	0f 84 a2 01 00 00    	je     c001be3a <sysCallOpen(regs*)+0x1c7>
c001bc98:	52                   	push   edx
c001bc99:	68 95 b9 02 c0       	push   0xc002b995
c001bc9e:	50                   	push   eax
c001bc9f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bca3:	56                   	push   esi
c001bca4:	e8 01 6e ff ff       	call   c0012aaa <Fs::standardiseFiles(char*, char const*, char const*)>
c001bca9:	89 34 24             	mov    DWORD PTR [esp],esi
c001bcac:	e8 bb 4a fe ff       	call   c000076c <strlen>
c001bcb1:	83 c4 10             	add    esp,0x10
c001bcb4:	48                   	dec    eax
c001bcb5:	74 1d                	je     c001bcd4 <sysCallOpen(regs*)+0x61>
c001bcb7:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bcba:	eb 0f                	jmp    c001bccb <sysCallOpen(regs*)+0x58>
c001bcbc:	80 fa 3a             	cmp    dl,0x3a
c001bcbf:	74 0f                	je     c001bcd0 <sysCallOpen(regs*)+0x5d>
c001bcc1:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bcc5:	48                   	dec    eax
c001bcc6:	74 0c                	je     c001bcd4 <sysCallOpen(regs*)+0x61>
c001bcc8:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bccb:	80 fa 2e             	cmp    dl,0x2e
c001bcce:	75 ec                	jne    c001bcbc <sysCallOpen(regs*)+0x49>
c001bcd0:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bcd4:	83 ec 08             	sub    esp,0x8
c001bcd7:	68 99 b9 02 c0       	push   0xc002b999
c001bcdc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcdf:	e8 47 ff ff ff       	call   c001bc2b <string_ends_with(char const*, char const*)>
c001bce4:	83 c4 10             	add    esp,0x10
c001bce7:	85 c0                	test   eax,eax
c001bce9:	74 1d                	je     c001bd08 <sysCallOpen(regs*)+0x95>
c001bceb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcee:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bcf4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcfb:	81 c4 04 01 00 00    	add    esp,0x104
c001bd01:	31 c0                	xor    eax,eax
c001bd03:	31 d2                	xor    edx,edx
c001bd05:	5b                   	pop    ebx
c001bd06:	5e                   	pop    esi
c001bd07:	c3                   	ret    
c001bd08:	83 ec 08             	sub    esp,0x8
c001bd0b:	68 9e b9 02 c0       	push   0xc002b99e
c001bd10:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd13:	e8 13 ff ff ff       	call   c001bc2b <string_ends_with(char const*, char const*)>
c001bd18:	83 c4 10             	add    esp,0x10
c001bd1b:	85 c0                	test   eax,eax
c001bd1d:	75 cc                	jne    c001bceb <sysCallOpen(regs*)+0x78>
c001bd1f:	83 ec 08             	sub    esp,0x8
c001bd22:	68 9a b9 02 c0       	push   0xc002b99a
c001bd27:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd2a:	e8 69 4b fe ff       	call   c0000898 <strcmp>
c001bd2f:	83 c4 10             	add    esp,0x10
c001bd32:	85 c0                	test   eax,eax
c001bd34:	74 b5                	je     c001bceb <sysCallOpen(regs*)+0x78>
c001bd36:	83 ec 08             	sub    esp,0x8
c001bd39:	68 99 b9 02 c0       	push   0xc002b999
c001bd3e:	56                   	push   esi
c001bd3f:	e8 e7 fe ff ff       	call   c001bc2b <string_ends_with(char const*, char const*)>
c001bd44:	83 c4 10             	add    esp,0x10
c001bd47:	85 c0                	test   eax,eax
c001bd49:	75 a0                	jne    c001bceb <sysCallOpen(regs*)+0x78>
c001bd4b:	83 ec 08             	sub    esp,0x8
c001bd4e:	68 a3 b9 02 c0       	push   0xc002b9a3
c001bd53:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd56:	e8 d0 fe ff ff       	call   c001bc2b <string_ends_with(char const*, char const*)>
c001bd5b:	83 c4 10             	add    esp,0x10
c001bd5e:	85 c0                	test   eax,eax
c001bd60:	0f 85 e7 00 00 00    	jne    c001be4d <sysCallOpen(regs*)+0x1da>
c001bd66:	83 ec 08             	sub    esp,0x8
c001bd69:	68 a8 b9 02 c0       	push   0xc002b9a8
c001bd6e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd71:	e8 b5 fe ff ff       	call   c001bc2b <string_ends_with(char const*, char const*)>
c001bd76:	83 c4 10             	add    esp,0x10
c001bd79:	85 c0                	test   eax,eax
c001bd7b:	0f 85 cc 00 00 00    	jne    c001be4d <sysCallOpen(regs*)+0x1da>
c001bd81:	83 ec 08             	sub    esp,0x8
c001bd84:	68 a4 b9 02 c0       	push   0xc002b9a4
c001bd89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd8c:	e8 07 4b fe ff       	call   c0000898 <strcmp>
c001bd91:	83 c4 10             	add    esp,0x10
c001bd94:	85 c0                	test   eax,eax
c001bd96:	0f 84 b1 00 00 00    	je     c001be4d <sysCallOpen(regs*)+0x1da>
c001bd9c:	83 ec 08             	sub    esp,0x8
c001bd9f:	68 a3 b9 02 c0       	push   0xc002b9a3
c001bda4:	56                   	push   esi
c001bda5:	e8 81 fe ff ff       	call   c001bc2b <string_ends_with(char const*, char const*)>
c001bdaa:	83 c4 10             	add    esp,0x10
c001bdad:	85 c0                	test   eax,eax
c001bdaf:	0f 85 98 00 00 00    	jne    c001be4d <sysCallOpen(regs*)+0x1da>
c001bdb5:	83 ec 0c             	sub    esp,0xc
c001bdb8:	68 14 01 00 00       	push   0x114
c001bdbd:	e8 d7 37 ff ff       	call   c000f599 <malloc>
c001bdc2:	83 c4 0c             	add    esp,0xc
c001bdc5:	89 c6                	mov    esi,eax
c001bdc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdcc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdcf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdd2:	56                   	push   esi
c001bdd3:	e8 7c 6e ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001bdd8:	83 c4 10             	add    esp,0x10
c001bddb:	85 f6                	test   esi,esi
c001bddd:	74 5b                	je     c001be3a <sysCallOpen(regs*)+0x1c7>
c001bddf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bde2:	0f b6 c2             	movzx  eax,dl
c001bde5:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bde8:	89 d0                	mov    eax,edx
c001bdea:	83 e0 01             	and    eax,0x1
c001bded:	f6 c2 02             	test   dl,0x2
c001bdf0:	74 03                	je     c001bdf5 <sysCallOpen(regs*)+0x182>
c001bdf2:	83 c8 02             	or     eax,0x2
c001bdf5:	f6 c2 04             	test   dl,0x4
c001bdf8:	74 03                	je     c001bdfd <sysCallOpen(regs*)+0x18a>
c001bdfa:	83 c8 04             	or     eax,0x4
c001bdfd:	f6 c2 08             	test   dl,0x8
c001be00:	74 03                	je     c001be05 <sysCallOpen(regs*)+0x192>
c001be02:	83 c8 0a             	or     eax,0xa
c001be05:	83 e2 10             	and    edx,0x10
c001be08:	74 03                	je     c001be0d <sysCallOpen(regs*)+0x19a>
c001be0a:	83 c8 12             	or     eax,0x12
c001be0d:	83 ec 08             	sub    esp,0x8
c001be10:	50                   	push   eax
c001be11:	56                   	push   esi
c001be12:	e8 a1 6e ff ff       	call   c0012cb8 <File::open(FileOpenMode)>
c001be17:	83 c4 10             	add    esp,0x10
c001be1a:	85 c0                	test   eax,eax
c001be1c:	75 1c                	jne    c001be3a <sysCallOpen(regs*)+0x1c7>
c001be1e:	83 ec 0c             	sub    esp,0xc
c001be21:	56                   	push   esi
c001be22:	e8 ab 4f ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001be27:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be2a:	83 c4 10             	add    esp,0x10
c001be2d:	89 02                	mov    DWORD PTR [edx],eax
c001be2f:	c1 f8 1f             	sar    eax,0x1f
c001be32:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be35:	e9 c1 fe ff ff       	jmp    c001bcfb <sysCallOpen(regs*)+0x88>
c001be3a:	81 c4 04 01 00 00    	add    esp,0x104
c001be40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be45:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be4a:	5b                   	pop    ebx
c001be4b:	5e                   	pop    esi
c001be4c:	c3                   	ret    
c001be4d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be50:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be56:	e9 99 fe ff ff       	jmp    c001bcf4 <sysCallOpen(regs*)+0x81>

c001be5b <Sys::loadSyscalls()>:
c001be5b:	c7 05 60 05 03 c0 c8 b0 01 c0 	mov    DWORD PTR ds:0xc0030560,0xc001b0c8
c001be65:	c7 05 64 05 03 c0 c0 ac 01 c0 	mov    DWORD PTR ds:0xc0030564,0xc001acc0
c001be6f:	c7 05 68 05 03 c0 ae ae 01 c0 	mov    DWORD PTR ds:0xc0030568,0xc001aeae
c001be79:	c7 05 6c 05 03 c0 fe af 01 c0 	mov    DWORD PTR ds:0xc003056c,0xc001affe
c001be83:	c7 05 70 05 03 c0 46 ae 01 c0 	mov    DWORD PTR ds:0xc0030570,0xc001ae46
c001be8d:	c7 05 74 05 03 c0 f7 ac 01 c0 	mov    DWORD PTR ds:0xc0030574,0xc001acf7
c001be97:	c7 05 78 05 03 c0 d8 ac 01 c0 	mov    DWORD PTR ds:0xc0030578,0xc001acd8
c001bea1:	c7 05 7c 05 03 c0 03 af 01 c0 	mov    DWORD PTR ds:0xc003057c,0xc001af03
c001beab:	c7 05 84 05 03 c0 91 b5 01 c0 	mov    DWORD PTR ds:0xc0030584,0xc001b591
c001beb5:	c7 05 80 05 03 c0 73 bc 01 c0 	mov    DWORD PTR ds:0xc0030580,0xc001bc73
c001bebf:	c7 05 88 05 03 c0 f1 b5 01 c0 	mov    DWORD PTR ds:0xc0030588,0xc001b5f1
c001bec9:	c7 05 8c 05 03 c0 d4 b2 01 c0 	mov    DWORD PTR ds:0xc003058c,0xc001b2d4
c001bed3:	c7 05 90 05 03 c0 0e b1 01 c0 	mov    DWORD PTR ds:0xc0030590,0xc001b10e
c001bedd:	c7 05 94 05 03 c0 13 b1 01 c0 	mov    DWORD PTR ds:0xc0030594,0xc001b113
c001bee7:	c7 05 98 05 03 c0 ba b6 01 c0 	mov    DWORD PTR ds:0xc0030598,0xc001b6ba
c001bef1:	c7 05 9c 05 03 c0 66 b6 01 c0 	mov    DWORD PTR ds:0xc003059c,0xc001b666
c001befb:	c7 05 a0 05 03 c0 ad b3 01 c0 	mov    DWORD PTR ds:0xc00305a0,0xc001b3ad
c001bf05:	c7 05 a4 05 03 c0 04 b4 01 c0 	mov    DWORD PTR ds:0xc00305a4,0xc001b404
c001bf0f:	c7 05 a8 05 03 c0 70 b4 01 c0 	mov    DWORD PTR ds:0xc00305a8,0xc001b470
c001bf19:	c7 05 ac 05 03 c0 18 b1 01 c0 	mov    DWORD PTR ds:0xc00305ac,0xc001b118
c001bf23:	c7 05 b0 05 03 c0 2a b7 01 c0 	mov    DWORD PTR ds:0xc00305b0,0xc001b72a
c001bf2d:	c7 05 b4 05 03 c0 44 b7 01 c0 	mov    DWORD PTR ds:0xc00305b4,0xc001b744
c001bf37:	c7 05 b8 05 03 c0 44 b7 01 c0 	mov    DWORD PTR ds:0xc00305b8,0xc001b744
c001bf41:	c7 05 bc 05 03 c0 79 b7 01 c0 	mov    DWORD PTR ds:0xc00305bc,0xc001b779
c001bf4b:	c7 05 c0 05 03 c0 dd b7 01 c0 	mov    DWORD PTR ds:0xc00305c0,0xc001b7dd
c001bf55:	c7 05 c4 05 03 c0 22 b1 01 c0 	mov    DWORD PTR ds:0xc00305c4,0xc001b122
c001bf5f:	c7 05 c8 05 03 c0 41 b8 01 c0 	mov    DWORD PTR ds:0xc00305c8,0xc001b841
c001bf69:	c7 05 cc 05 03 c0 91 b2 01 c0 	mov    DWORD PTR ds:0xc00305cc,0xc001b291
c001bf73:	c7 05 d0 05 03 c0 8d b8 01 c0 	mov    DWORD PTR ds:0xc00305d0,0xc001b88d
c001bf7d:	c7 05 d4 05 03 c0 53 b3 01 c0 	mov    DWORD PTR ds:0xc00305d4,0xc001b353
c001bf87:	c7 05 d8 05 03 c0 10 b9 01 c0 	mov    DWORD PTR ds:0xc00305d8,0xc001b910
c001bf91:	c7 05 dc 05 03 c0 e2 b4 01 c0 	mov    DWORD PTR ds:0xc00305dc,0xc001b4e2
c001bf9b:	c7 05 e0 05 03 c0 37 b9 01 c0 	mov    DWORD PTR ds:0xc00305e0,0xc001b937
c001bfa5:	c7 05 e4 05 03 c0 9f b9 01 c0 	mov    DWORD PTR ds:0xc00305e4,0xc001b99f
c001bfaf:	c7 05 e8 05 03 c0 4c ba 01 c0 	mov    DWORD PTR ds:0xc00305e8,0xc001ba4c
c001bfb9:	c7 05 ec 05 03 c0 32 b1 01 c0 	mov    DWORD PTR ds:0xc00305ec,0xc001b132
c001bfc3:	c7 05 f0 05 03 c0 9c b1 01 c0 	mov    DWORD PTR ds:0xc00305f0,0xc001b19c
c001bfcd:	c7 05 f4 05 03 c0 e2 b1 01 c0 	mov    DWORD PTR ds:0xc00305f4,0xc001b1e2
c001bfd7:	c7 05 f8 05 03 c0 60 bb 01 c0 	mov    DWORD PTR ds:0xc00305f8,0xc001bb60
c001bfe1:	c7 05 fc 05 03 c0 5f b7 01 c0 	mov    DWORD PTR ds:0xc00305fc,0xc001b75f
c001bfeb:	c7 05 00 06 03 c0 33 b2 01 c0 	mov    DWORD PTR ds:0xc0030600,0xc001b233
c001bff5:	c7 05 04 06 03 c0 d2 bb 01 c0 	mov    DWORD PTR ds:0xc0030604,0xc001bbd2
c001bfff:	c7 05 08 06 03 c0 17 bc 01 c0 	mov    DWORD PTR ds:0xc0030608,0xc001bc17
c001c009:	c7 05 0c 06 03 c0 9e ad 01 c0 	mov    DWORD PTR ds:0xc003060c,0xc001ad9e
c001c013:	c7 05 10 06 03 c0 1f af 01 c0 	mov    DWORD PTR ds:0xc0030610,0xc001af1f
c001c01d:	c7 05 14 06 03 c0 b4 af 01 c0 	mov    DWORD PTR ds:0xc0030614,0xc001afb4
c001c027:	c7 05 18 06 03 c0 8a ac 01 c0 	mov    DWORD PTR ds:0xc0030618,0xc001ac8a
c001c031:	c7 05 1c 06 03 c0 66 b0 01 c0 	mov    DWORD PTR ds:0xc003061c,0xc001b066
c001c03b:	c7 05 20 06 03 c0 03 ad 01 c0 	mov    DWORD PTR ds:0xc0030620,0xc001ad03
c001c045:	c7 05 24 06 03 c0 1a ad 01 c0 	mov    DWORD PTR ds:0xc0030624,0xc001ad1a
c001c04f:	c3                   	ret    

c001c050 <Sys::systemCall(regs*, void*)>:
c001c050:	53                   	push   ebx
c001c051:	83 ec 08             	sub    esp,0x8
c001c054:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c058:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c05b:	83 f8 7f             	cmp    eax,0x7f
c001c05e:	77 16                	ja     c001c076 <Sys::systemCall(regs*, void*)+0x26>
c001c060:	8b 14 85 60 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfaa0]
c001c067:	85 d2                	test   edx,edx
c001c069:	74 0b                	je     c001c076 <Sys::systemCall(regs*, void*)+0x26>
c001c06b:	83 ec 0c             	sub    esp,0xc
c001c06e:	53                   	push   ebx
c001c06f:	ff d2                	call   edx
c001c071:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c074:	eb 0d                	jmp    c001c083 <Sys::systemCall(regs*, void*)+0x33>
c001c076:	52                   	push   edx
c001c077:	52                   	push   edx
c001c078:	50                   	push   eax
c001c079:	68 ad b9 02 c0       	push   0xc002b9ad
c001c07e:	e8 72 66 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001c083:	83 c4 10             	add    esp,0x10
c001c086:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c08b:	31 d2                	xor    edx,edx
c001c08d:	83 c4 08             	add    esp,0x8
c001c090:	5b                   	pop    ebx
c001c091:	c3                   	ret    

c001c092 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c092:	55                   	push   ebp
c001c093:	57                   	push   edi
c001c094:	56                   	push   esi
c001c095:	53                   	push   ebx
c001c096:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c09c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c0a3:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c0aa:	85 c0                	test   eax,eax
c001c0ac:	0f 95 c1             	setne  cl
c001c0af:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c0b7:	0f 94 c2             	sete   dl
c001c0ba:	84 d1                	test   cl,dl
c001c0bc:	74 23                	je     c001c0e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c0be:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c0c4:	74 1b                	je     c001c0e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c0c6:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c0cc:	89 da                	mov    edx,ebx
c001c0ce:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c0d4:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c0da:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c0e1:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c0e8:	05 ff 0f 00 00       	add    eax,0xfff
c001c0ed:	83 ec 0c             	sub    esp,0xc
c001c0f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0f4:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c0fa:	c1 e8 0c             	shr    eax,0xc
c001c0fd:	89 fe                	mov    esi,edi
c001c0ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c103:	c1 ee 0c             	shr    esi,0xc
c001c106:	6a 01                	push   0x1
c001c108:	e8 10 51 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c001c10d:	89 c5                	mov    ebp,eax
c001c10f:	58                   	pop    eax
c001c110:	5a                   	pop    edx
c001c111:	56                   	push   esi
c001c112:	68 c1 b9 02 c0       	push   0xc002b9c1
c001c117:	e8 d9 65 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001c11c:	59                   	pop    ecx
c001c11d:	58                   	pop    eax
c001c11e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c122:	68 d3 b9 02 c0       	push   0xc002b9d3
c001c127:	e8 c9 65 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001c12c:	83 c4 10             	add    esp,0x10
c001c12f:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c135:	0f 86 31 01 00 00    	jbe    c001c26c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c13b:	c1 e6 0c             	shl    esi,0xc
c001c13e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c141:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c144:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c148:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c14f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c152:	01 df                	add    edi,ebx
c001c154:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c157:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c15b:	0f 84 08 01 00 00    	je     c001c269 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c161:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c167:	76 05                	jbe    c001c16e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c169:	bf 00 10 00 00       	mov    edi,0x1000
c001c16e:	83 ec 0c             	sub    esp,0xc
c001c171:	31 d2                	xor    edx,edx
c001c173:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c17a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c17c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c180:	50                   	push   eax
c001c181:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c185:	56                   	push   esi
c001c186:	52                   	push   edx
c001c187:	57                   	push   edi
c001c188:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c18f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c192:	83 c4 20             	add    esp,0x20
c001c195:	85 c0                	test   eax,eax
c001c197:	74 0a                	je     c001c1a3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c199:	53                   	push   ebx
c001c19a:	53                   	push   ebx
c001c19b:	50                   	push   eax
c001c19c:	68 e5 b9 02 c0       	push   0xc002b9e5
c001c1a1:	eb 0f                	jmp    c001c1b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c1a3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c1a7:	74 20                	je     c001c1c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c1a9:	51                   	push   ecx
c001c1aa:	51                   	push   ecx
c001c1ab:	6a 00                	push   0x0
c001c1ad:	68 10 ba 02 c0       	push   0xc002ba10
c001c1b2:	e8 3e 65 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001c1b7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1ba:	e8 a4 54 ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c001c1bf:	83 c4 10             	add    esp,0x10
c001c1c2:	31 c0                	xor    eax,eax
c001c1c4:	e9 68 01 00 00       	jmp    c001c331 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c1c9:	fa                   	cli    
c001c1ca:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001c1d0:	e8 c0 37 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c1d5:	6a 07                	push   0x7
c001c1d7:	89 c7                	mov    edi,eax
c001c1d9:	55                   	push   ebp
c001c1da:	50                   	push   eax
c001c1db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1e9:	e8 ec 57 ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1ee:	83 c4 0c             	add    esp,0xc
c001c1f1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c1f8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1fe:	6a 00                	push   0x0
c001c200:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c205:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c208:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c20e:	e8 21 56 ff ff       	call   c0011834 <VAS::mapOtherVASIn(bool, VAS*)>
c001c213:	58                   	pop    eax
c001c214:	5a                   	pop    edx
c001c215:	68 07 0c 00 00       	push   0xc07
c001c21a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c21e:	57                   	push   edi
c001c21f:	89 ef                	mov    edi,ebp
c001c221:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c228:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c22e:	6a 00                	push   0x0
c001c230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c235:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c238:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c23e:	e8 53 5b ff ff       	call   c0011d96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c243:	b9 00 10 00 00       	mov    ecx,0x1000
c001c248:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c24a:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001c24f:	83 c4 20             	add    esp,0x20
c001c252:	48                   	dec    eax
c001c253:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001c258:	85 c0                	test   eax,eax
c001c25a:	75 01                	jne    c001c25d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c25c:	fb                   	sti    
c001c25d:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c264:	e9 df fe ff ff       	jmp    c001c148 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c269:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c26c:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c274:	0f 86 a9 00 00 00    	jbe    c001c323 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c27a:	fa                   	cli    
c001c27b:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001c281:	51                   	push   ecx
c001c282:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c289:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c28f:	6a 00                	push   0x0
c001c291:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c296:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c299:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c29f:	e8 90 55 ff ff       	call   c0011834 <VAS::mapOtherVASIn(bool, VAS*)>
c001c2a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c2a8:	c1 e6 0c             	shl    esi,0xc
c001c2ab:	01 de                	add    esi,ebx
c001c2ad:	83 c4 10             	add    esp,0x10
c001c2b0:	39 de                	cmp    esi,ebx
c001c2b2:	74 61                	je     c001c315 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c2b4:	e8 dc 36 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c2b9:	6a 07                	push   0x7
c001c2bb:	89 c7                	mov    edi,eax
c001c2bd:	55                   	push   ebp
c001c2be:	50                   	push   eax
c001c2bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2c7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2cd:	e8 08 57 ff ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c001c2d2:	58                   	pop    eax
c001c2d3:	5a                   	pop    edx
c001c2d4:	68 07 0c 00 00       	push   0xc07
c001c2d9:	53                   	push   ebx
c001c2da:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c2e0:	57                   	push   edi
c001c2e1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c2e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2ee:	6a 00                	push   0x0
c001c2f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2f8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2fe:	e8 93 5a ff ff       	call   c0011d96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c303:	83 c4 1c             	add    esp,0x1c
c001c306:	68 00 10 00 00       	push   0x1000
c001c30b:	6a 00                	push   0x0
c001c30d:	55                   	push   ebp
c001c30e:	e8 3d 44 fe ff       	call   c0000750 <memset>
c001c313:	eb 98                	jmp    c001c2ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c315:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001c31a:	48                   	dec    eax
c001c31b:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001c320:	75 01                	jne    c001c323 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c322:	fb                   	sti    
c001c323:	83 ec 0c             	sub    esp,0xc
c001c326:	55                   	push   ebp
c001c327:	e8 37 53 ff ff       	call   c0011663 <Virt::freeKernelVirtualPages(unsigned long)>
c001c32c:	83 c4 10             	add    esp,0x10
c001c32f:	b0 01                	mov    al,0x1
c001c331:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c337:	5b                   	pop    ebx
c001c338:	5e                   	pop    esi
c001c339:	5f                   	pop    edi
c001c33a:	5d                   	pop    ebp
c001c33b:	c3                   	ret    

c001c33c <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c33c:	55                   	push   ebp
c001c33d:	57                   	push   edi
c001c33e:	56                   	push   esi
c001c33f:	53                   	push   ebx
c001c340:	83 ec 48             	sub    esp,0x48
c001c343:	68 14 01 00 00       	push   0x114
c001c348:	e8 4c 32 ff ff       	call   c000f599 <malloc>
c001c34d:	83 c4 0c             	add    esp,0xc
c001c350:	89 c6                	mov    esi,eax
c001c352:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c356:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c35a:	50                   	push   eax
c001c35b:	e8 f4 68 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001c360:	58                   	pop    eax
c001c361:	5a                   	pop    edx
c001c362:	6a 01                	push   0x1
c001c364:	56                   	push   esi
c001c365:	e8 4e 69 ff ff       	call   c0012cb8 <File::open(FileOpenMode)>
c001c36a:	83 c4 10             	add    esp,0x10
c001c36d:	85 c0                	test   eax,eax
c001c36f:	0f 85 47 01 00 00    	jne    c001c4bc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c375:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c37d:	83 ec 0c             	sub    esp,0xc
c001c380:	6a 34                	push   0x34
c001c382:	e8 12 32 ff ff       	call   c000f599 <malloc>
c001c387:	89 c3                	mov    ebx,eax
c001c389:	58                   	pop    eax
c001c38a:	8b 06                	mov    eax,DWORD PTR [esi]
c001c38c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c390:	57                   	push   edi
c001c391:	53                   	push   ebx
c001c392:	6a 00                	push   0x0
c001c394:	6a 34                	push   0x34
c001c396:	56                   	push   esi
c001c397:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c39a:	83 c4 20             	add    esp,0x20
c001c39d:	85 c0                	test   eax,eax
c001c39f:	0f 85 17 01 00 00    	jne    c001c4bc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3a5:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c3ab:	0f 85 0b 01 00 00    	jne    c001c4bc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3b1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3b4:	85 c0                	test   eax,eax
c001c3b6:	0f 84 00 01 00 00    	je     c001c4bc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3bc:	31 d2                	xor    edx,edx
c001c3be:	55                   	push   ebp
c001c3bf:	52                   	push   edx
c001c3c0:	50                   	push   eax
c001c3c1:	56                   	push   esi
c001c3c2:	e8 af 69 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001c3c7:	83 c4 10             	add    esp,0x10
c001c3ca:	85 c0                	test   eax,eax
c001c3cc:	0f 85 ea 00 00 00    	jne    c001c4bc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3d2:	83 ec 0c             	sub    esp,0xc
c001c3d5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c3d8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3e0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3e4:	0f af c2             	imul   eax,edx
c001c3e7:	50                   	push   eax
c001c3e8:	e8 ac 31 ff ff       	call   c000f599 <malloc>
c001c3ed:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3fa:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3fe:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c402:	0f af c2             	imul   eax,edx
c001c405:	99                   	cdq    
c001c406:	52                   	push   edx
c001c407:	50                   	push   eax
c001c408:	56                   	push   esi
c001c409:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c40c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c40f:	83 c4 20             	add    esp,0x20
c001c412:	85 c0                	test   eax,eax
c001c414:	0f 84 a2 00 00 00    	je     c001c4bc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c41a:	31 d2                	xor    edx,edx
c001c41c:	51                   	push   ecx
c001c41d:	52                   	push   edx
c001c41e:	50                   	push   eax
c001c41f:	56                   	push   esi
c001c420:	e8 51 69 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001c425:	83 c4 10             	add    esp,0x10
c001c428:	85 c0                	test   eax,eax
c001c42a:	0f 85 8c 00 00 00    	jne    c001c4bc <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c430:	83 ec 0c             	sub    esp,0xc
c001c433:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c437:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c43b:	31 ed                	xor    ebp,ebp
c001c43d:	0f af c2             	imul   eax,edx
c001c440:	50                   	push   eax
c001c441:	e8 53 31 ff ff       	call   c000f599 <malloc>
c001c446:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c448:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c44f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c453:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c457:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c45b:	0f af c2             	imul   eax,edx
c001c45e:	99                   	cdq    
c001c45f:	52                   	push   edx
c001c460:	50                   	push   eax
c001c461:	56                   	push   esi
c001c462:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c465:	83 c4 20             	add    esp,0x20
c001c468:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c470:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c474:	0f 86 80 00 00 00    	jbe    c001c4fa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c47a:	0f b7 fd             	movzx  edi,bp
c001c47d:	c1 e7 05             	shl    edi,0x5
c001c480:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c484:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c487:	75 6b                	jne    c001c4f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c489:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c48c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c490:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c493:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c497:	52                   	push   edx
c001c498:	31 d2                	xor    edx,edx
c001c49a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c49d:	52                   	push   edx
c001c49e:	50                   	push   eax
c001c49f:	56                   	push   esi
c001c4a0:	e8 d1 68 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001c4a5:	83 c4 10             	add    esp,0x10
c001c4a8:	85 c0                	test   eax,eax
c001c4aa:	74 17                	je     c001c4c3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c4ac:	83 ec 0c             	sub    esp,0xc
c001c4af:	68 3c ba 02 c0       	push   0xc002ba3c
c001c4b4:	e8 3c 62 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001c4b9:	83 c4 10             	add    esp,0x10
c001c4bc:	31 c0                	xor    eax,eax
c001c4be:	e9 87 00 00 00       	jmp    c001c54a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c4c3:	83 ec 0c             	sub    esp,0xc
c001c4c6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c4c9:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c4cc:	50                   	push   eax
c001c4cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c4d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4d5:	56                   	push   esi
c001c4d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c4da:	e8 b3 fb ff ff       	call   c001c092 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c4df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4e3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c4e7:	83 c4 20             	add    esp,0x20
c001c4ea:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c4ee:	73 04                	jae    c001c4f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4f4:	45                   	inc    ebp
c001c4f5:	e9 76 ff ff ff       	jmp    c001c470 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c4fa:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c4fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c502:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c506:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c50c:	83 ec 0c             	sub    esp,0xc
c001c50f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c515:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c51a:	05 00 10 00 00       	add    eax,0x1000
c001c51f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c526:	e8 7e 30 ff ff       	call   c000f5a9 <free>
c001c52b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c52e:	e8 76 30 ff ff       	call   c000f5a9 <free>
c001c533:	58                   	pop    eax
c001c534:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c538:	e8 6c 30 ff ff       	call   c000f5a9 <free>
c001c53d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c540:	e8 d1 67 ff ff       	call   c0012d16 <File::close()>
c001c545:	83 c4 10             	add    esp,0x10
c001c548:	b0 01                	mov    al,0x1
c001c54a:	83 c4 3c             	add    esp,0x3c
c001c54d:	5b                   	pop    ebx
c001c54e:	5e                   	pop    esi
c001c54f:	5f                   	pop    edi
c001c550:	5d                   	pop    ebp
c001c551:	c3                   	ret    

c001c552 <Thr::runtimeReferenceHelper()>:
c001c552:	83 ec 18             	sub    esp,0x18
c001c555:	68 44 ba 02 c0       	push   0xc002ba44
c001c55a:	e8 96 61 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001c55f:	fa                   	cli    
c001c560:	83 c4 10             	add    esp,0x10
c001c563:	eb fe                	jmp    c001c563 <Thr::runtimeReferenceHelper()+0x11>

c001c565 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c565:	57                   	push   edi
c001c566:	56                   	push   esi
c001c567:	53                   	push   ebx
c001c568:	31 db                	xor    ebx,ebx
c001c56a:	39 1d 00 0f 03 c0    	cmp    DWORD PTR ds:0xc0030f00,ebx
c001c570:	7e 3c                	jle    c001c5ae <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c572:	8b 34 9d 80 0e 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf180]
c001c579:	31 ff                	xor    edi,edi
c001c57b:	39 3c 9d 80 0d 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf280],edi
c001c582:	7e 27                	jle    c001c5ab <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c584:	50                   	push   eax
c001c585:	50                   	push   eax
c001c586:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c58a:	8b 06                	mov    eax,DWORD PTR [esi]
c001c58c:	03 04 9d 00 0e 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf200]
c001c593:	50                   	push   eax
c001c594:	e8 ff 42 fe ff       	call   c0000898 <strcmp>
c001c599:	83 c4 10             	add    esp,0x10
c001c59c:	85 c0                	test   eax,eax
c001c59e:	75 05                	jne    c001c5a5 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c5a0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c5a3:	eb 0b                	jmp    c001c5b0 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c5a5:	83 c6 10             	add    esi,0x10
c001c5a8:	47                   	inc    edi
c001c5a9:	eb d0                	jmp    c001c57b <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c5ab:	43                   	inc    ebx
c001c5ac:	eb bc                	jmp    c001c56a <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c5ae:	31 c0                	xor    eax,eax
c001c5b0:	5b                   	pop    ebx
c001c5b1:	5e                   	pop    esi
c001c5b2:	5f                   	pop    edi
c001c5b3:	c3                   	ret    

c001c5b4 <Thr::loadKernelSymbolTable(char const*)>:
c001c5b4:	55                   	push   ebp
c001c5b5:	57                   	push   edi
c001c5b6:	56                   	push   esi
c001c5b7:	53                   	push   ebx
c001c5b8:	83 ec 68             	sub    esp,0x68
c001c5bb:	8b 35 50 0f 03 c0    	mov    esi,DWORD PTR ds:0xc0030f50
c001c5c1:	68 14 01 00 00       	push   0x114
c001c5c6:	e8 ce 2f ff ff       	call   c000f599 <malloc>
c001c5cb:	83 c4 0c             	add    esp,0xc
c001c5ce:	89 c3                	mov    ebx,eax
c001c5d0:	56                   	push   esi
c001c5d1:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c5d5:	50                   	push   eax
c001c5d6:	e8 79 66 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001c5db:	5e                   	pop    esi
c001c5dc:	5f                   	pop    edi
c001c5dd:	6a 01                	push   0x1
c001c5df:	53                   	push   ebx
c001c5e0:	e8 d3 66 ff ff       	call   c0012cb8 <File::open(FileOpenMode)>
c001c5e5:	83 c4 10             	add    esp,0x10
c001c5e8:	85 c0                	test   eax,eax
c001c5ea:	74 0a                	je     c001c5f6 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c5ec:	83 ec 0c             	sub    esp,0xc
c001c5ef:	68 66 ba 02 c0       	push   0xc002ba66
c001c5f4:	eb 34                	jmp    c001c62a <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c5f6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c5fe:	83 ec 0c             	sub    esp,0xc
c001c601:	6a 34                	push   0x34
c001c603:	e8 91 2f ff ff       	call   c000f599 <malloc>
c001c608:	59                   	pop    ecx
c001c609:	89 c7                	mov    edi,eax
c001c60b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c60f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c611:	56                   	push   esi
c001c612:	57                   	push   edi
c001c613:	6a 00                	push   0x0
c001c615:	6a 34                	push   0x34
c001c617:	53                   	push   ebx
c001c618:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c61b:	83 c4 20             	add    esp,0x20
c001c61e:	85 c0                	test   eax,eax
c001c620:	74 17                	je     c001c639 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c622:	83 ec 0c             	sub    esp,0xc
c001c625:	68 7d ba 02 c0       	push   0xc002ba7d
c001c62a:	e8 32 d8 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001c62f:	83 c4 10             	add    esp,0x10
c001c632:	31 c0                	xor    eax,eax
c001c634:	e9 31 02 00 00       	jmp    c001c86a <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c639:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c63f:	75 e1                	jne    c001c622 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c641:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c644:	85 c0                	test   eax,eax
c001c646:	74 da                	je     c001c622 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c648:	52                   	push   edx
c001c649:	31 d2                	xor    edx,edx
c001c64b:	52                   	push   edx
c001c64c:	50                   	push   eax
c001c64d:	53                   	push   ebx
c001c64e:	e8 23 67 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001c653:	83 c4 10             	add    esp,0x10
c001c656:	85 c0                	test   eax,eax
c001c658:	75 c8                	jne    c001c622 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c65a:	83 ec 0c             	sub    esp,0xc
c001c65d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c661:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c665:	31 ed                	xor    ebp,ebp
c001c667:	0f af c2             	imul   eax,edx
c001c66a:	50                   	push   eax
c001c66b:	e8 29 2f ff ff       	call   c000f599 <malloc>
c001c670:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c672:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c676:	89 34 24             	mov    DWORD PTR [esp],esi
c001c679:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c67d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c681:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c685:	0f af c2             	imul   eax,edx
c001c688:	99                   	cdq    
c001c689:	52                   	push   edx
c001c68a:	50                   	push   eax
c001c68b:	53                   	push   ebx
c001c68c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c68f:	83 c4 20             	add    esp,0x20
c001c692:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c69a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c6a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c6aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c6b2:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c6b6:	0f 86 aa 00 00 00    	jbe    c001c766 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c6bc:	0f b7 f5             	movzx  esi,bp
c001c6bf:	6b f6 28             	imul   esi,esi,0x28
c001c6c2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c6c6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c6c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6cd:	50                   	push   eax
c001c6ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6d2:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c6d6:	8b 16                	mov    edx,DWORD PTR [esi]
c001c6d8:	6b c0 28             	imul   eax,eax,0x28
c001c6db:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c6df:	89 d0                	mov    eax,edx
c001c6e1:	31 d2                	xor    edx,edx
c001c6e3:	52                   	push   edx
c001c6e4:	50                   	push   eax
c001c6e5:	53                   	push   ebx
c001c6e6:	e8 8b 66 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001c6eb:	83 c4 0c             	add    esp,0xc
c001c6ee:	6a 20                	push   0x20
c001c6f0:	6a 00                	push   0x0
c001c6f2:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6f6:	52                   	push   edx
c001c6f7:	e8 54 40 fe ff       	call   c0000750 <memset>
c001c6fc:	58                   	pop    eax
c001c6fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6ff:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c703:	51                   	push   ecx
c001c704:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c708:	52                   	push   edx
c001c709:	6a 00                	push   0x0
c001c70b:	6a 1f                	push   0x1f
c001c70d:	53                   	push   ebx
c001c70e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c711:	83 c4 18             	add    esp,0x18
c001c714:	68 94 ba 02 c0       	push   0xc002ba94
c001c719:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c71d:	52                   	push   edx
c001c71e:	e8 75 41 fe ff       	call   c0000898 <strcmp>
c001c723:	83 c4 10             	add    esp,0x10
c001c726:	85 c0                	test   eax,eax
c001c728:	75 0f                	jne    c001c739 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c72a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c72d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c731:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c735:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c739:	50                   	push   eax
c001c73a:	50                   	push   eax
c001c73b:	68 9c ba 02 c0       	push   0xc002ba9c
c001c740:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c744:	50                   	push   eax
c001c745:	e8 4e 41 fe ff       	call   c0000898 <strcmp>
c001c74a:	83 c4 10             	add    esp,0x10
c001c74d:	85 c0                	test   eax,eax
c001c74f:	75 0f                	jne    c001c760 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c751:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c754:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c758:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c75c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c760:	45                   	inc    ebp
c001c761:	e9 4c ff ff ff       	jmp    c001c6b2 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c766:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c76b:	75 10                	jne    c001c77d <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c76d:	83 ec 0c             	sub    esp,0xc
c001c770:	68 a4 ba 02 c0       	push   0xc002baa4
c001c775:	e8 e7 d6 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001c77a:	83 c4 10             	add    esp,0x10
c001c77d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c782:	75 10                	jne    c001c794 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c784:	83 ec 0c             	sub    esp,0xc
c001c787:	68 a4 ba 02 c0       	push   0xc002baa4
c001c78c:	e8 d0 d6 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001c791:	83 c4 10             	add    esp,0x10
c001c794:	31 d2                	xor    edx,edx
c001c796:	50                   	push   eax
c001c797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79b:	52                   	push   edx
c001c79c:	50                   	push   eax
c001c79d:	53                   	push   ebx
c001c79e:	e8 d3 65 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001c7a3:	5a                   	pop    edx
c001c7a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7a8:	e8 ec 2d ff ff       	call   c000f599 <malloc>
c001c7ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7b5:	31 c9                	xor    ecx,ecx
c001c7b7:	5e                   	pop    esi
c001c7b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7ba:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c7be:	55                   	push   ebp
c001c7bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7c3:	51                   	push   ecx
c001c7c4:	52                   	push   edx
c001c7c5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c7c9:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c7cd:	53                   	push   ebx
c001c7ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7d1:	83 c4 14             	add    esp,0x14
c001c7d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7d8:	e8 bc 2d ff ff       	call   c000f599 <malloc>
c001c7dd:	89 c6                	mov    esi,eax
c001c7df:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7e1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7e4:	56                   	push   esi
c001c7e5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c7e9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c7ed:	51                   	push   ecx
c001c7ee:	52                   	push   edx
c001c7ef:	53                   	push   ebx
c001c7f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7f7:	8b 15 00 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f00
c001c7fd:	83 c4 1c             	add    esp,0x1c
c001c800:	c1 e8 04             	shr    eax,0x4
c001c803:	89 04 95 80 0d 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf280],eax
c001c80a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c80e:	31 d2                	xor    edx,edx
c001c810:	52                   	push   edx
c001c811:	50                   	push   eax
c001c812:	53                   	push   ebx
c001c813:	e8 5e 65 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001c818:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c81a:	31 d2                	xor    edx,edx
c001c81c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c81f:	56                   	push   esi
c001c820:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c824:	52                   	push   edx
c001c825:	50                   	push   eax
c001c826:	53                   	push   ebx
c001c827:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c82a:	83 c4 14             	add    esp,0x14
c001c82d:	53                   	push   ebx
c001c82e:	e8 e3 64 ff ff       	call   c0012d16 <File::close()>
c001c833:	5d                   	pop    ebp
c001c834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c838:	e8 6c 2d ff ff       	call   c000f5a9 <free>
c001c83d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c840:	e8 64 2d ff ff       	call   c000f5a9 <free>
c001c845:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001c84a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c84e:	8d 50 01             	lea    edx,[eax+0x1]
c001c851:	89 0c 85 80 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf180],ecx
c001c858:	89 34 85 00 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf200],esi
c001c85f:	89 15 00 0f 03 c0    	mov    DWORD PTR ds:0xc0030f00,edx
c001c865:	83 c4 10             	add    esp,0x10
c001c868:	b0 01                	mov    al,0x1
c001c86a:	83 c4 5c             	add    esp,0x5c
c001c86d:	5b                   	pop    ebx
c001c86e:	5e                   	pop    esi
c001c86f:	5f                   	pop    edi
c001c870:	5d                   	pop    ebp
c001c871:	c3                   	ret    

c001c872 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c872:	55                   	push   ebp
c001c873:	57                   	push   edi
c001c874:	56                   	push   esi
c001c875:	53                   	push   ebx
c001c876:	81 ec 68 03 00 00    	sub    esp,0x368
c001c87c:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c883:	8b 1d 50 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f50
c001c889:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c88d:	68 14 01 00 00       	push   0x114
c001c892:	e8 02 2d ff ff       	call   c000f599 <malloc>
c001c897:	83 c4 0c             	add    esp,0xc
c001c89a:	89 c5                	mov    ebp,eax
c001c89c:	53                   	push   ebx
c001c89d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c8a4:	50                   	push   eax
c001c8a5:	e8 aa 63 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001c8aa:	5e                   	pop    esi
c001c8ab:	5f                   	pop    edi
c001c8ac:	6a 01                	push   0x1
c001c8ae:	55                   	push   ebp
c001c8af:	e8 04 64 ff ff       	call   c0012cb8 <File::open(FileOpenMode)>
c001c8b4:	83 c4 10             	add    esp,0x10
c001c8b7:	85 c0                	test   eax,eax
c001c8b9:	0f 85 a7 06 00 00    	jne    c001cf66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8bf:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c8c7:	83 ec 0c             	sub    esp,0xc
c001c8ca:	6a 34                	push   0x34
c001c8cc:	e8 c8 2c ff ff       	call   c000f599 <malloc>
c001c8d1:	5b                   	pop    ebx
c001c8d2:	89 c7                	mov    edi,eax
c001c8d4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c8d8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8db:	53                   	push   ebx
c001c8dc:	57                   	push   edi
c001c8dd:	6a 00                	push   0x0
c001c8df:	6a 34                	push   0x34
c001c8e1:	55                   	push   ebp
c001c8e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8e5:	83 c4 20             	add    esp,0x20
c001c8e8:	85 c0                	test   eax,eax
c001c8ea:	0f 85 76 06 00 00    	jne    c001cf66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8f0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c8f6:	0f 85 6a 06 00 00    	jne    c001cf66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8fc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c8ff:	85 c0                	test   eax,eax
c001c901:	0f 84 5f 06 00 00    	je     c001cf66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c907:	31 d2                	xor    edx,edx
c001c909:	51                   	push   ecx
c001c90a:	52                   	push   edx
c001c90b:	50                   	push   eax
c001c90c:	55                   	push   ebp
c001c90d:	e8 64 64 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001c912:	83 c4 10             	add    esp,0x10
c001c915:	85 c0                	test   eax,eax
c001c917:	0f 85 49 06 00 00    	jne    c001cf66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c91d:	83 ec 0c             	sub    esp,0xc
c001c920:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c923:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c927:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c92b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c92f:	0f af c2             	imul   eax,edx
c001c932:	50                   	push   eax
c001c933:	e8 61 2c ff ff       	call   c000f599 <malloc>
c001c938:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c93b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c93f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c942:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c946:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c94a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c94e:	0f af c2             	imul   eax,edx
c001c951:	99                   	cdq    
c001c952:	52                   	push   edx
c001c953:	50                   	push   eax
c001c954:	55                   	push   ebp
c001c955:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c958:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c95b:	83 c4 20             	add    esp,0x20
c001c95e:	85 c0                	test   eax,eax
c001c960:	0f 84 00 06 00 00    	je     c001cf66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c966:	52                   	push   edx
c001c967:	31 d2                	xor    edx,edx
c001c969:	52                   	push   edx
c001c96a:	50                   	push   eax
c001c96b:	55                   	push   ebp
c001c96c:	e8 05 64 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001c971:	83 c4 10             	add    esp,0x10
c001c974:	85 c0                	test   eax,eax
c001c976:	0f 85 ea 05 00 00    	jne    c001cf66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c97c:	83 ec 0c             	sub    esp,0xc
c001c97f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c983:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c987:	31 f6                	xor    esi,esi
c001c989:	0f af c2             	imul   eax,edx
c001c98c:	50                   	push   eax
c001c98d:	e8 07 2c ff ff       	call   c000f599 <malloc>
c001c992:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c995:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c99c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9a0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c9a4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c9a8:	0f af c2             	imul   eax,edx
c001c9ab:	99                   	cdq    
c001c9ac:	52                   	push   edx
c001c9ad:	50                   	push   eax
c001c9ae:	55                   	push   ebp
c001c9af:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9b2:	83 c4 20             	add    esp,0x20
c001c9b5:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c9b9:	0f 86 8a 00 00 00    	jbe    c001ca49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c9bf:	0f b7 de             	movzx  ebx,si
c001c9c2:	c1 e3 05             	shl    ebx,0x5
c001c9c5:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c9c9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c9cc:	75 75                	jne    c001ca43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c9ce:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9d1:	31 d2                	xor    edx,edx
c001c9d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9de:	50                   	push   eax
c001c9df:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c9e2:	52                   	push   edx
c001c9e3:	50                   	push   eax
c001c9e4:	55                   	push   ebp
c001c9e5:	e8 8c 63 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001c9ea:	83 c4 10             	add    esp,0x10
c001c9ed:	85 c0                	test   eax,eax
c001c9ef:	0f 85 71 05 00 00    	jne    c001cf66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9f5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c9fc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9ff:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001ca03:	31 d2                	xor    edx,edx
c001ca05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ca09:	83 ec 0c             	sub    esp,0xc
c001ca0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca10:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca17:	50                   	push   eax
c001ca18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca20:	52                   	push   edx
c001ca21:	50                   	push   eax
c001ca22:	55                   	push   ebp
c001ca23:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca26:	83 c4 1c             	add    esp,0x1c
c001ca29:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca2c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ca2f:	50                   	push   eax
c001ca30:	6a 00                	push   0x0
c001ca32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca36:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ca3a:	50                   	push   eax
c001ca3b:	e8 10 3d fe ff       	call   c0000750 <memset>
c001ca40:	83 c4 10             	add    esp,0x10
c001ca43:	46                   	inc    esi
c001ca44:	e9 6c ff ff ff       	jmp    c001c9b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca49:	53                   	push   ebx
c001ca4a:	31 db                	xor    ebx,ebx
c001ca4c:	68 00 01 00 00       	push   0x100
c001ca51:	6a 00                	push   0x0
c001ca53:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca57:	50                   	push   eax
c001ca58:	e8 f3 3c fe ff       	call   c0000750 <memset>
c001ca5d:	83 c4 0c             	add    esp,0xc
c001ca60:	68 00 01 00 00       	push   0x100
c001ca65:	6a 00                	push   0x0
c001ca67:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca6e:	50                   	push   eax
c001ca6f:	e8 dc 3c fe ff       	call   c0000750 <memset>
c001ca74:	83 c4 10             	add    esp,0x10
c001ca77:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca7f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca87:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca8f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca97:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca9f:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001caa3:	0f 86 30 01 00 00    	jbe    c001cbd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001caa9:	0f b7 f3             	movzx  esi,bx
c001caac:	6b f6 28             	imul   esi,esi,0x28
c001caaf:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cab3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cab6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001caba:	52                   	push   edx
c001cabb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cabf:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cac3:	8b 06                	mov    eax,DWORD PTR [esi]
c001cac5:	6b d2 28             	imul   edx,edx,0x28
c001cac8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cacc:	31 d2                	xor    edx,edx
c001cace:	52                   	push   edx
c001cacf:	50                   	push   eax
c001cad0:	55                   	push   ebp
c001cad1:	e8 a0 62 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001cad6:	83 c4 0c             	add    esp,0xc
c001cad9:	6a 20                	push   0x20
c001cadb:	6a 00                	push   0x0
c001cadd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cae4:	51                   	push   ecx
c001cae5:	e8 66 3c fe ff       	call   c0000750 <memset>
c001caea:	59                   	pop    ecx
c001caeb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001caee:	8d 54 24 58          	lea    edx,[esp+0x58]
c001caf2:	52                   	push   edx
c001caf3:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cafa:	51                   	push   ecx
c001cafb:	6a 00                	push   0x0
c001cafd:	6a 1f                	push   0x1f
c001caff:	55                   	push   ebp
c001cb00:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb03:	83 c4 1c             	add    esp,0x1c
c001cb06:	6a 09                	push   0x9
c001cb08:	68 be ba 02 c0       	push   0xc002babe
c001cb0d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cb14:	51                   	push   ecx
c001cb15:	e8 32 3b fe ff       	call   c000064c <memcmp>
c001cb1a:	83 c4 10             	add    esp,0x10
c001cb1d:	85 c0                	test   eax,eax
c001cb1f:	75 21                	jne    c001cb42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cb21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb29:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb31:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb34:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb3b:	89 d0                	mov    eax,edx
c001cb3d:	40                   	inc    eax
c001cb3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb42:	50                   	push   eax
c001cb43:	6a 09                	push   0x9
c001cb45:	68 c8 ba 02 c0       	push   0xc002bac8
c001cb4a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb51:	50                   	push   eax
c001cb52:	e8 f5 3a fe ff       	call   c000064c <memcmp>
c001cb57:	83 c4 10             	add    esp,0x10
c001cb5a:	85 c0                	test   eax,eax
c001cb5c:	75 21                	jne    c001cb7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb66:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb6e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb71:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb78:	89 d0                	mov    eax,edx
c001cb7a:	40                   	inc    eax
c001cb7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb7f:	50                   	push   eax
c001cb80:	50                   	push   eax
c001cb81:	68 94 ba 02 c0       	push   0xc002ba94
c001cb86:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb8d:	50                   	push   eax
c001cb8e:	e8 05 3d fe ff       	call   c0000898 <strcmp>
c001cb93:	83 c4 10             	add    esp,0x10
c001cb96:	85 c0                	test   eax,eax
c001cb98:	75 0f                	jne    c001cba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cb9a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cba5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cba9:	50                   	push   eax
c001cbaa:	50                   	push   eax
c001cbab:	68 9c ba 02 c0       	push   0xc002ba9c
c001cbb0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbb7:	50                   	push   eax
c001cbb8:	e8 db 3c fe ff       	call   c0000898 <strcmp>
c001cbbd:	83 c4 10             	add    esp,0x10
c001cbc0:	85 c0                	test   eax,eax
c001cbc2:	75 0f                	jne    c001cbd3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cbc4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbc7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbcf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cbd3:	43                   	inc    ebx
c001cbd4:	e9 c6 fe ff ff       	jmp    c001ca9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cbd9:	31 d2                	xor    edx,edx
c001cbdb:	50                   	push   eax
c001cbdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbe0:	52                   	push   edx
c001cbe1:	50                   	push   eax
c001cbe2:	55                   	push   ebp
c001cbe3:	e8 8e 61 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001cbe8:	58                   	pop    eax
c001cbe9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbed:	e8 a7 29 ff ff       	call   c000f599 <malloc>
c001cbf2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbf5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cbf9:	31 d2                	xor    edx,edx
c001cbfb:	58                   	pop    eax
c001cbfc:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc00:	53                   	push   ebx
c001cc01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cc05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc09:	52                   	push   edx
c001cc0a:	50                   	push   eax
c001cc0b:	55                   	push   ebp
c001cc0c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc0f:	83 c4 14             	add    esp,0x14
c001cc12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc16:	e8 7e 29 ff ff       	call   c000f599 <malloc>
c001cc1b:	31 d2                	xor    edx,edx
c001cc1d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cc21:	83 c4 0c             	add    esp,0xc
c001cc24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc28:	52                   	push   edx
c001cc29:	50                   	push   eax
c001cc2a:	55                   	push   ebp
c001cc2b:	e8 46 61 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001cc30:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc33:	31 d2                	xor    edx,edx
c001cc35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc40:	52                   	push   edx
c001cc41:	50                   	push   eax
c001cc42:	55                   	push   ebp
c001cc43:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc46:	83 c4 20             	add    esp,0x20
c001cc49:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc51:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc55:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc59:	0f 84 0b 03 00 00    	je     c001cf6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cc5f:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc66:	31 d2                	xor    edx,edx
c001cc68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc6c:	c1 e8 03             	shr    eax,0x3
c001cc6f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc73:	51                   	push   ecx
c001cc74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc78:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc7c:	52                   	push   edx
c001cc7d:	50                   	push   eax
c001cc7e:	55                   	push   ebp
c001cc7f:	e8 f2 60 ff ff       	call   c0012d76 <File::seek(unsigned long long)>
c001cc84:	5b                   	pop    ebx
c001cc85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc89:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc90:	e8 04 29 ff ff       	call   c000f599 <malloc>
c001cc95:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc9c:	31 d2                	xor    edx,edx
c001cc9e:	5e                   	pop    esi
c001cc9f:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cca3:	50                   	push   eax
c001cca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ccac:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001ccb3:	52                   	push   edx
c001ccb4:	50                   	push   eax
c001ccb5:	55                   	push   ebp
c001ccb6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ccb9:	83 c4 20             	add    esp,0x20
c001ccbc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ccc4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ccc8:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cccc:	0f 8d 7c 02 00 00    	jge    c001cf4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001ccd2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccda:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001ccdf:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cce2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccea:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ccee:	89 d8                	mov    eax,ebx
c001ccf0:	c1 e8 08             	shr    eax,0x8
c001ccf3:	89 c6                	mov    esi,eax
c001ccf5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ccf9:	c1 e6 04             	shl    esi,0x4
c001ccfc:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cd00:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cd03:	85 d2                	test   edx,edx
c001cd05:	0f 85 bf 00 00 00    	jne    c001cdca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd0b:	83 ec 0c             	sub    esp,0xc
c001cd0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd12:	03 06                	add    eax,DWORD PTR [esi]
c001cd14:	50                   	push   eax
c001cd15:	e8 4b f8 ff ff       	call   c001c565 <Thr::getAddressOfKernelSymbol(char const*)>
c001cd1a:	83 c4 10             	add    esp,0x10
c001cd1d:	89 c2                	mov    edx,eax
c001cd1f:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cd24:	85 c0                	test   eax,eax
c001cd26:	0f 85 9e 00 00 00    	jne    c001cdca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd2c:	83 ec 0c             	sub    esp,0xc
c001cd2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd33:	03 06                	add    eax,DWORD PTR [esi]
c001cd35:	50                   	push   eax
c001cd36:	e8 04 18 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cd3b:	83 c4 10             	add    esp,0x10
c001cd3e:	89 c2                	mov    edx,eax
c001cd40:	85 c0                	test   eax,eax
c001cd42:	0f 85 82 00 00 00    	jne    c001cdca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd48:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd4c:	50                   	push   eax
c001cd4d:	50                   	push   eax
c001cd4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd52:	03 06                	add    eax,DWORD PTR [esi]
c001cd54:	50                   	push   eax
c001cd55:	68 d2 ba 02 c0       	push   0xc002bad2
c001cd5a:	e8 96 59 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001cd5f:	58                   	pop    eax
c001cd60:	5a                   	pop    edx
c001cd61:	68 ec ba 02 c0       	push   0xc002baec
c001cd66:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd6d:	50                   	push   eax
c001cd6e:	e8 99 3a fe ff       	call   c000080c <strcpy>
c001cd73:	59                   	pop    ecx
c001cd74:	58                   	pop    eax
c001cd75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd79:	03 06                	add    eax,DWORD PTR [esi]
c001cd7b:	50                   	push   eax
c001cd7c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd83:	50                   	push   eax
c001cd84:	e8 c3 3b fe ff       	call   c000094c <strcat>
c001cd89:	58                   	pop    eax
c001cd8a:	5a                   	pop    edx
c001cd8b:	68 82 bb 02 c0       	push   0xc002bb82
c001cd90:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd97:	50                   	push   eax
c001cd98:	e8 af 3b fe ff       	call   c000094c <strcat>
c001cd9d:	83 c4 10             	add    esp,0x10
c001cda0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cda5:	0f 84 5d 01 00 00    	je     c001cf08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cdab:	83 ec 0c             	sub    esp,0xc
c001cdae:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdb5:	50                   	push   eax
c001cdb6:	e8 a6 d0 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001cdbb:	83 c4 10             	add    esp,0x10
c001cdbe:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cdc2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cdc6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cdca:	80 fb 01             	cmp    bl,0x1
c001cdcd:	0f 85 88 00 00 00    	jne    c001ce5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cdd3:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cdda:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cdde:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cde2:	01 ce                	add    esi,ecx
c001cde4:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cdea:	0f 94 c0             	sete   al
c001cded:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cdf3:	0f 94 c3             	sete   bl
c001cdf6:	09 c3                	or     ebx,eax
c001cdf8:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdfa:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cdff:	74 41                	je     c001ce42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001ce01:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001ce04:	84 db                	test   bl,bl
c001ce06:	75 15                	jne    c001ce1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001ce08:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce0c:	66 83 f8 0c          	cmp    ax,0xc
c001ce10:	76 05                	jbe    c001ce17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001ce12:	b8 0c 00 00 00       	mov    eax,0xc
c001ce17:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce1b:	76 37                	jbe    c001ce54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce1d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001ce21:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce26:	0f 84 dc 00 00 00    	je     c001cf08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce2c:	83 ec 0c             	sub    esp,0xc
c001ce2f:	68 03 bb 02 c0       	push   0xc002bb03
c001ce34:	e8 28 d0 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001ce39:	83 c4 10             	add    esp,0x10
c001ce3c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ce40:	eb 12                	jmp    c001ce54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce42:	01 c1                	add    ecx,eax
c001ce44:	84 db                	test   bl,bl
c001ce46:	75 0c                	jne    c001ce54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce48:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce4c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce50:	77 02                	ja     c001ce54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce52:	01 d1                	add    ecx,edx
c001ce54:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce56:	e9 ea 00 00 00       	jmp    c001cf45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce5b:	80 fb 02             	cmp    bl,0x2
c001ce5e:	75 7c                	jne    c001cedc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ce60:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce67:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce6b:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce6f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce75:	74 20                	je     c001ce97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce77:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce7d:	74 18                	je     c001ce97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce7f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce83:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce88:	66 83 f8 0e          	cmp    ax,0xe
c001ce8c:	77 03                	ja     c001ce91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ce8e:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ce91:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ce95:	76 1f                	jbe    c001ceb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001ce97:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce9b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cea0:	74 66                	je     c001cf08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cea2:	83 ec 0c             	sub    esp,0xc
c001cea5:	68 1f bb 02 c0       	push   0xc002bb1f
c001ceaa:	e8 b2 cf ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001ceaf:	83 c4 10             	add    esp,0x10
c001ceb2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ceb6:	8b 06                	mov    eax,DWORD PTR [esi]
c001ceb8:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cebd:	74 13                	je     c001ced2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cebf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cec3:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ceca:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cece:	01 c8                	add    eax,ecx
c001ced0:	eb 04                	jmp    c001ced6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001ced2:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ced6:	01 c2                	add    edx,eax
c001ced8:	89 16                	mov    DWORD PTR [esi],edx
c001ceda:	eb 69                	jmp    c001cf45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cedc:	0f b6 db             	movzx  ebx,bl
c001cedf:	50                   	push   eax
c001cee0:	50                   	push   eax
c001cee1:	53                   	push   ebx
c001cee2:	68 3b bb 02 c0       	push   0xc002bb3b
c001cee7:	e8 09 58 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001ceec:	83 c4 10             	add    esp,0x10
c001ceef:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cef4:	74 12                	je     c001cf08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cef6:	83 ec 0c             	sub    esp,0xc
c001cef9:	68 46 bb 02 c0       	push   0xc002bb46
c001cefe:	e8 5e cf ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001cf03:	83 c4 10             	add    esp,0x10
c001cf06:	eb 3d                	jmp    c001cf45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cf08:	83 ec 0c             	sub    esp,0xc
c001cf0b:	55                   	push   ebp
c001cf0c:	e8 05 5e ff ff       	call   c0012d16 <File::close()>
c001cf11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf14:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf1a:	59                   	pop    ecx
c001cf1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf1f:	e8 85 26 ff ff       	call   c000f5a9 <free>
c001cf24:	5b                   	pop    ebx
c001cf25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf29:	e8 7b 26 ff ff       	call   c000f5a9 <free>
c001cf2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf31:	e8 73 26 ff ff       	call   c000f5a9 <free>
c001cf36:	5e                   	pop    esi
c001cf37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf3b:	e8 69 26 ff ff       	call   c000f5a9 <free>
c001cf40:	83 c4 10             	add    esp,0x10
c001cf43:	eb 21                	jmp    c001cf66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf45:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cf49:	e9 76 fd ff ff       	jmp    c001ccc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf4e:	83 ec 0c             	sub    esp,0xc
c001cf51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf55:	e8 4f 26 ff ff       	call   c000f5a9 <free>
c001cf5a:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf5e:	83 c4 10             	add    esp,0x10
c001cf61:	e9 eb fc ff ff       	jmp    c001cc51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf66:	31 c0                	xor    eax,eax
c001cf68:	eb 33                	jmp    c001cf9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cf6a:	83 ec 0c             	sub    esp,0xc
c001cf6d:	55                   	push   ebp
c001cf6e:	e8 a3 5d ff ff       	call   c0012d16 <File::close()>
c001cf73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf76:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf7c:	58                   	pop    eax
c001cf7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf81:	e8 23 26 ff ff       	call   c000f5a9 <free>
c001cf86:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf89:	e8 1b 26 ff ff       	call   c000f5a9 <free>
c001cf8e:	5a                   	pop    edx
c001cf8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf93:	e8 11 26 ff ff       	call   c000f5a9 <free>
c001cf98:	83 c4 10             	add    esp,0x10
c001cf9b:	b0 01                	mov    al,0x1
c001cf9d:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cfa3:	5b                   	pop    ebx
c001cfa4:	5e                   	pop    esi
c001cfa5:	5f                   	pop    edi
c001cfa6:	5d                   	pop    ebp
c001cfa7:	c3                   	ret    

c001cfa8 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cfa8:	56                   	push   esi
c001cfa9:	31 d2                	xor    edx,edx
c001cfab:	53                   	push   ebx
c001cfac:	8b 1d 60 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030760
c001cfb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cfb6:	39 d3                	cmp    ebx,edx
c001cfb8:	7e 1b                	jle    c001cfd5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cfba:	8b 04 95 80 09 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf680]
c001cfc1:	39 c8                	cmp    eax,ecx
c001cfc3:	77 0d                	ja     c001cfd2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cfc5:	8b 34 95 80 07 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf880]
c001cfcc:	01 c6                	add    esi,eax
c001cfce:	39 ce                	cmp    esi,ecx
c001cfd0:	77 05                	ja     c001cfd7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cfd2:	42                   	inc    edx
c001cfd3:	eb e1                	jmp    c001cfb6 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cfd5:	31 c0                	xor    eax,eax
c001cfd7:	5b                   	pop    ebx
c001cfd8:	5e                   	pop    esi
c001cfd9:	c3                   	ret    

c001cfda <Thr::getDriverNameFromAddress(unsigned long)>:
c001cfda:	53                   	push   ebx
c001cfdb:	31 c0                	xor    eax,eax
c001cfdd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cfe1:	8b 1d 60 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030760
c001cfe7:	39 c3                	cmp    ebx,eax
c001cfe9:	7e 22                	jle    c001d00d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cfeb:	8b 14 85 80 09 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf680]
c001cff2:	39 ca                	cmp    edx,ecx
c001cff4:	77 14                	ja     c001d00a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cff6:	03 14 85 80 07 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf880]
c001cffd:	39 ca                	cmp    edx,ecx
c001cfff:	76 09                	jbe    c001d00a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d001:	8b 04 85 80 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf480]
c001d008:	eb 05                	jmp    c001d00f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d00a:	40                   	inc    eax
c001d00b:	eb da                	jmp    c001cfe7 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d00d:	31 c0                	xor    eax,eax
c001d00f:	5b                   	pop    ebx
c001d010:	c3                   	ret    

c001d011 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d011:	53                   	push   ebx
c001d012:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d016:	53                   	push   ebx
c001d017:	e8 8c ff ff ff       	call   c001cfa8 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d01c:	5a                   	pop    edx
c001d01d:	31 d2                	xor    edx,edx
c001d01f:	85 c0                	test   eax,eax
c001d021:	74 04                	je     c001d027 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d023:	89 da                	mov    edx,ebx
c001d025:	29 c2                	sub    edx,eax
c001d027:	89 d0                	mov    eax,edx
c001d029:	5b                   	pop    ebx
c001d02a:	c3                   	ret    

c001d02b <Thr::loadDLL(char const*, bool)>:
c001d02b:	55                   	push   ebp
c001d02c:	57                   	push   edi
c001d02d:	56                   	push   esi
c001d02e:	53                   	push   ebx
c001d02f:	81 ec 34 01 00 00    	sub    esp,0x134
c001d035:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d03c:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d043:	56                   	push   esi
c001d044:	68 5e bb 02 c0       	push   0xc002bb5e
c001d049:	e8 a7 56 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001d04e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d055:	e8 3f 25 ff ff       	call   c000f599 <malloc>
c001d05a:	83 c4 0c             	add    esp,0xc
c001d05d:	89 c3                	mov    ebx,eax
c001d05f:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c001d065:	56                   	push   esi
c001d066:	50                   	push   eax
c001d067:	e8 e8 5b ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001d06c:	83 c4 10             	add    esp,0x10
c001d06f:	85 db                	test   ebx,ebx
c001d071:	75 3c                	jne    c001d0af <Thr::loadDLL(char const*, bool)+0x84>
c001d073:	89 f8                	mov    eax,edi
c001d075:	84 c0                	test   al,al
c001d077:	0f 84 d2 01 00 00    	je     c001d24f <Thr::loadDLL(char const*, bool)+0x224>
c001d07d:	55                   	push   ebp
c001d07e:	55                   	push   ebp
c001d07f:	68 6f bb 02 c0       	push   0xc002bb6f
c001d084:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d088:	55                   	push   ebp
c001d089:	e8 7e 37 fe ff       	call   c000080c <strcpy>
c001d08e:	58                   	pop    eax
c001d08f:	5a                   	pop    edx
c001d090:	56                   	push   esi
c001d091:	55                   	push   ebp
c001d092:	e8 b5 38 fe ff       	call   c000094c <strcat>
c001d097:	59                   	pop    ecx
c001d098:	58                   	pop    eax
c001d099:	68 82 bb 02 c0       	push   0xc002bb82
c001d09e:	55                   	push   ebp
c001d09f:	e8 a8 38 fe ff       	call   c000094c <strcat>
c001d0a4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d0a7:	e8 b5 cd ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001d0ac:	83 c4 10             	add    esp,0x10
c001d0af:	51                   	push   ecx
c001d0b0:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d0b4:	50                   	push   eax
c001d0b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d0b9:	50                   	push   eax
c001d0ba:	53                   	push   ebx
c001d0bb:	e8 a4 5e ff ff       	call   c0012f64 <File::stat(unsigned long long*, bool*)>
c001d0c0:	83 c4 10             	add    esp,0x10
c001d0c3:	85 db                	test   ebx,ebx
c001d0c5:	74 0c                	je     c001d0d3 <Thr::loadDLL(char const*, bool)+0xa8>
c001d0c7:	83 ec 0c             	sub    esp,0xc
c001d0ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0cc:	53                   	push   ebx
c001d0cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0d0:	83 c4 10             	add    esp,0x10
c001d0d3:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d0d8:	75 0a                	jne    c001d0e4 <Thr::loadDLL(char const*, bool)+0xb9>
c001d0da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0de:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d0e2:	75 3c                	jne    c001d120 <Thr::loadDLL(char const*, bool)+0xf5>
c001d0e4:	89 f8                	mov    eax,edi
c001d0e6:	84 c0                	test   al,al
c001d0e8:	0f 84 49 01 00 00    	je     c001d237 <Thr::loadDLL(char const*, bool)+0x20c>
c001d0ee:	51                   	push   ecx
c001d0ef:	51                   	push   ecx
c001d0f0:	68 6f bb 02 c0       	push   0xc002bb6f
c001d0f5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0f9:	53                   	push   ebx
c001d0fa:	e8 0d 37 fe ff       	call   c000080c <strcpy>
c001d0ff:	5d                   	pop    ebp
c001d100:	58                   	pop    eax
c001d101:	56                   	push   esi
c001d102:	53                   	push   ebx
c001d103:	e8 44 38 fe ff       	call   c000094c <strcat>
c001d108:	58                   	pop    eax
c001d109:	5a                   	pop    edx
c001d10a:	68 82 bb 02 c0       	push   0xc002bb82
c001d10f:	53                   	push   ebx
c001d110:	e8 37 38 fe ff       	call   c000094c <strcat>
c001d115:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d118:	e8 44 cd ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001d11d:	83 c4 10             	add    esp,0x10
c001d120:	52                   	push   edx
c001d121:	6a 03                	push   0x3
c001d123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d127:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d12b:	05 ff 0f 00 00       	add    eax,0xfff
c001d130:	83 d2 00             	adc    edx,0x0
c001d133:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d137:	50                   	push   eax
c001d138:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c001d13e:	e8 99 49 ff ff       	call   c0011adc <VAS::allocatePages(int, int)>
c001d143:	59                   	pop    ecx
c001d144:	89 c3                	mov    ebx,eax
c001d146:	5d                   	pop    ebp
c001d147:	50                   	push   eax
c001d148:	68 d1 a0 02 c0       	push   0xc002a0d1
c001d14d:	e8 a3 55 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001d152:	89 34 24             	mov    DWORD PTR [esp],esi
c001d155:	e8 12 36 fe ff       	call   c000076c <strlen>
c001d15a:	8b 2d 60 07 03 c0    	mov    ebp,DWORD PTR ds:0xc0030760
c001d160:	40                   	inc    eax
c001d161:	89 04 24             	mov    DWORD PTR [esp],eax
c001d164:	e8 30 24 ff ff       	call   c000f599 <malloc>
c001d169:	89 04 ad 80 0b 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf480],eax
c001d170:	58                   	pop    eax
c001d171:	a1 60 07 03 c0       	mov    eax,ds:0xc0030760
c001d176:	5a                   	pop    edx
c001d177:	56                   	push   esi
c001d178:	ff 34 85 80 0b 03 c0 	push   DWORD PTR [eax*4-0x3ffcf480]
c001d17f:	e8 88 36 fe ff       	call   c000080c <strcpy>
c001d184:	a1 60 07 03 c0       	mov    eax,ds:0xc0030760
c001d189:	8d 50 01             	lea    edx,[eax+0x1]
c001d18c:	89 1c 85 80 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf680],ebx
c001d193:	89 15 60 07 03 c0    	mov    DWORD PTR ds:0xc0030760,edx
c001d199:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d19d:	83 c4 0c             	add    esp,0xc
c001d1a0:	89 14 85 80 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf880],edx
c001d1a7:	6a 01                	push   0x1
c001d1a9:	53                   	push   ebx
c001d1aa:	56                   	push   esi
c001d1ab:	e8 c2 f6 ff ff       	call   c001c872 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d1b0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d1b4:	83 c4 10             	add    esp,0x10
c001d1b7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d1bc:	0f 85 89 00 00 00    	jne    c001d24b <Thr::loadDLL(char const*, bool)+0x220>
c001d1c2:	89 f8                	mov    eax,edi
c001d1c4:	84 c0                	test   al,al
c001d1c6:	74 73                	je     c001d23b <Thr::loadDLL(char const*, bool)+0x210>
c001d1c8:	83 ec 0c             	sub    esp,0xc
c001d1cb:	68 84 bb 02 c0       	push   0xc002bb84
c001d1d0:	e8 8c cc ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001d1d5:	83 c4 10             	add    esp,0x10
c001d1d8:	eb 61                	jmp    c001d23b <Thr::loadDLL(char const*, bool)+0x210>
c001d1da:	50                   	push   eax
c001d1db:	50                   	push   eax
c001d1dc:	89 e8                	mov    eax,ebp
c001d1de:	c1 e0 0c             	shl    eax,0xc
c001d1e1:	01 d8                	add    eax,ebx
c001d1e3:	50                   	push   eax
c001d1e4:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c001d1ea:	e8 55 44 ff ff       	call   c0011644 <VAS::getPageTableEntry(unsigned long)>
c001d1ef:	83 c4 10             	add    esp,0x10
c001d1f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1f4:	a8 60                	test   al,0x60
c001d1f6:	75 11                	jne    c001d209 <Thr::loadDLL(char const*, bool)+0x1de>
c001d1f8:	83 ec 0c             	sub    esp,0xc
c001d1fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d200:	50                   	push   eax
c001d201:	e8 1e 27 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d206:	83 c4 10             	add    esp,0x10
c001d209:	45                   	inc    ebp
c001d20a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d20e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d212:	05 ff 0f 00 00       	add    eax,0xfff
c001d217:	bf 00 00 00 00       	mov    edi,0x0
c001d21c:	83 d2 00             	adc    edx,0x0
c001d21f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d223:	c1 ea 0c             	shr    edx,0xc
c001d226:	39 c5                	cmp    ebp,eax
c001d228:	89 d1                	mov    ecx,edx
c001d22a:	89 f8                	mov    eax,edi
c001d22c:	19 c8                	sbb    eax,ecx
c001d22e:	72 aa                	jb     c001d1da <Thr::loadDLL(char const*, bool)+0x1af>
c001d230:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d235:	75 18                	jne    c001d24f <Thr::loadDLL(char const*, bool)+0x224>
c001d237:	31 db                	xor    ebx,ebx
c001d239:	eb 14                	jmp    c001d24f <Thr::loadDLL(char const*, bool)+0x224>
c001d23b:	83 ec 0c             	sub    esp,0xc
c001d23e:	68 a3 bb 02 c0       	push   0xc002bba3
c001d243:	e8 19 cc ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001d248:	83 c4 10             	add    esp,0x10
c001d24b:	31 ed                	xor    ebp,ebp
c001d24d:	eb bb                	jmp    c001d20a <Thr::loadDLL(char const*, bool)+0x1df>
c001d24f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d255:	89 d8                	mov    eax,ebx
c001d257:	5b                   	pop    ebx
c001d258:	5e                   	pop    esi
c001d259:	5f                   	pop    edi
c001d25a:	5d                   	pop    ebp
c001d25b:	c3                   	ret    

c001d25c <Thr::executeDLL(unsigned long, void*)>:
c001d25c:	56                   	push   esi
c001d25d:	53                   	push   ebx
c001d25e:	52                   	push   edx
c001d25f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d263:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d267:	85 db                	test   ebx,ebx
c001d269:	75 10                	jne    c001d27b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d26b:	83 ec 0c             	sub    esp,0xc
c001d26e:	68 bf bb 02 c0       	push   0xc002bbbf
c001d273:	e8 e9 cb ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001d278:	83 c4 10             	add    esp,0x10
c001d27b:	50                   	push   eax
c001d27c:	50                   	push   eax
c001d27d:	53                   	push   ebx
c001d27e:	68 e9 bb 02 c0       	push   0xc002bbe9
c001d283:	e8 6d 54 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001d288:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d28c:	89 d8                	mov    eax,ebx
c001d28e:	83 c4 14             	add    esp,0x14
c001d291:	5b                   	pop    ebx
c001d292:	5e                   	pop    esi
c001d293:	ff e0                	jmp    eax
c001d295:	90                   	nop

c001d296 <userModeEntryPoint(void*)>:
c001d296:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001d29b:	48                   	dec    eax
c001d29c:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001d2a1:	75 01                	jne    c001d2a4 <userModeEntryPoint(void*)+0xe>
c001d2a3:	fb                   	sti    
c001d2a4:	fb                   	sti    
c001d2a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d2ad:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d2b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2b7:	e9 6e 30 fe ff       	jmp    c000032a <goToUsermode>

c001d2bc <changeTSS>:
c001d2bc:	83 ec 14             	sub    esp,0x14
c001d2bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2c4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d2c7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d2cc:	c1 e2 15             	shl    edx,0x15
c001d2cf:	29 d0                	sub    eax,edx
c001d2d1:	50                   	push   eax
c001d2d2:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001d2d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2dd:	05 7c 11 00 00       	add    eax,0x117c
c001d2e2:	50                   	push   eax
c001d2e3:	e8 8a 38 ff ff       	call   c0010b72 <TSS::setESP(unsigned long)>
c001d2e8:	83 c4 1c             	add    esp,0x1c
c001d2eb:	c3                   	ret    

c001d2ec <switchToThread(ThreadControlBlock*)>:
c001d2ec:	57                   	push   edi
c001d2ed:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001d2f2:	56                   	push   esi
c001d2f3:	85 c0                	test   eax,eax
c001d2f5:	53                   	push   ebx
c001d2f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2fa:	0f 85 88 00 00 00    	jne    c001d388 <switchToThread(ThreadControlBlock*)+0x9c>
c001d300:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d303:	3c ff                	cmp    al,0xff
c001d305:	74 7d                	je     c001d384 <switchToThread(ThreadControlBlock*)+0x98>
c001d307:	0f b6 d0             	movzx  edx,al
c001d30a:	b8 84 03 00 00       	mov    eax,0x384
c001d30f:	29 d0                	sub    eax,edx
c001d311:	c1 e0 10             	shl    eax,0x10
c001d314:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d317:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d31a:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c001d31f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d325:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d32c:	74 4a                	je     c001d378 <switchToThread(ThreadControlBlock*)+0x8c>
c001d32e:	0f 31                	rdtsc  
c001d330:	a3 68 0f 03 c0       	mov    ds:0xc0030f68,eax
c001d335:	89 c6                	mov    esi,eax
c001d337:	89 d7                	mov    edi,edx
c001d339:	2b 35 58 0f 03 c0    	sub    esi,DWORD PTR ds:0xc0030f58
c001d33f:	89 15 6c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f6c,edx
c001d345:	1b 3d 5c 0f 03 c0    	sbb    edi,DWORD PTR ds:0xc0030f5c
c001d34b:	89 35 60 0f 03 c0    	mov    DWORD PTR ds:0xc0030f60,esi
c001d351:	a3 58 0f 03 c0       	mov    ds:0xc0030f58,eax
c001d356:	89 3d 64 0f 03 c0    	mov    DWORD PTR ds:0xc0030f64,edi
c001d35c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d362:	89 15 5c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f5c,edx
c001d368:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d36b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d36e:	01 c6                	add    esi,eax
c001d370:	11 d7                	adc    edi,edx
c001d372:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d375:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d378:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d37c:	5b                   	pop    ebx
c001d37d:	5e                   	pop    esi
c001d37e:	5f                   	pop    edi
c001d37f:	e9 de 2f fe ff       	jmp    c0000362 <switchToThreadASM>
c001d384:	31 c0                	xor    eax,eax
c001d386:	eb 8f                	jmp    c001d317 <switchToThread(ThreadControlBlock*)+0x2b>
c001d388:	5b                   	pop    ebx
c001d389:	c7 05 20 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x1
c001d393:	5e                   	pop    esi
c001d394:	5f                   	pop    edi
c001d395:	c3                   	ret    

c001d396 <Process::addArgs(char**)>:
c001d396:	57                   	push   edi
c001d397:	56                   	push   esi
c001d398:	53                   	push   ebx
c001d399:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d39d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d3a1:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d3ab:	85 ff                	test   edi,edi
c001d3ad:	74 3d                	je     c001d3ec <Process::addArgs(char**)+0x56>
c001d3af:	8b 07                	mov    eax,DWORD PTR [edi]
c001d3b1:	85 c0                	test   eax,eax
c001d3b3:	74 37                	je     c001d3ec <Process::addArgs(char**)+0x56>
c001d3b5:	31 db                	xor    ebx,ebx
c001d3b7:	83 ec 0c             	sub    esp,0xc
c001d3ba:	50                   	push   eax
c001d3bb:	e8 ac 33 fe ff       	call   c000076c <strlen>
c001d3c0:	40                   	inc    eax
c001d3c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3c4:	e8 d0 21 ff ff       	call   c000f599 <malloc>
c001d3c9:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d3d0:	5a                   	pop    edx
c001d3d1:	59                   	pop    ecx
c001d3d2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d3d5:	43                   	inc    ebx
c001d3d6:	50                   	push   eax
c001d3d7:	e8 30 34 fe ff       	call   c000080c <strcpy>
c001d3dc:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d3e2:	83 c4 10             	add    esp,0x10
c001d3e5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d3e8:	85 c0                	test   eax,eax
c001d3ea:	75 cb                	jne    c001d3b7 <Process::addArgs(char**)+0x21>
c001d3ec:	5b                   	pop    ebx
c001d3ed:	5e                   	pop    esi
c001d3ee:	5f                   	pop    edi
c001d3ef:	c3                   	ret    

c001d3f0 <Process::Process(char const*, Process*, char**)>:
c001d3f0:	56                   	push   esi
c001d3f1:	53                   	push   ebx
c001d3f2:	83 ec 14             	sub    esp,0x14
c001d3f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f9:	05 0c 02 00 00       	add    eax,0x20c
c001d3fe:	bb 07 00 00 00       	mov    ebx,0x7
c001d403:	89 c6                	mov    esi,eax
c001d405:	85 db                	test   ebx,ebx
c001d407:	78 12                	js     c001d41b <Process::Process(char const*, Process*, char**)+0x2b>
c001d409:	83 ec 0c             	sub    esp,0xc
c001d40c:	56                   	push   esi
c001d40d:	e8 94 b6 00 00       	call   c0028aa6 <ThreadControlBlock::ThreadControlBlock()>
c001d412:	83 c4 10             	add    esp,0x10
c001d415:	83 c6 63             	add    esi,0x63
c001d418:	4b                   	dec    ebx
c001d419:	eb ea                	jmp    c001d405 <Process::Process(char const*, Process*, char**)+0x15>
c001d41b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d41f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d426:	83 ec 0c             	sub    esp,0xc
c001d429:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d42d:	e8 b8 c8 ff ff       	call   c0019cea <Krnl::newProcessEnv(Process*)>
c001d432:	83 c4 10             	add    esp,0x10
c001d435:	89 c2                	mov    edx,eax
c001d437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d43b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d445:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d44e:	a1 90 cf 02 c0       	mov    eax,ds:0xc002cf90
c001d453:	8d 50 01             	lea    edx,[eax+0x1]
c001d456:	89 15 90 cf 02 c0    	mov    DWORD PTR ds:0xc002cf90,edx
c001d45c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d460:	89 02                	mov    DWORD PTR [edx],eax
c001d462:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d46a:	83 ec 0c             	sub    esp,0xc
c001d46d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d471:	e8 23 21 ff ff       	call   c000f599 <malloc>
c001d476:	83 c4 10             	add    esp,0x10
c001d479:	89 c3                	mov    ebx,eax
c001d47b:	83 ec 08             	sub    esp,0x8
c001d47e:	6a 00                	push   0x0
c001d480:	53                   	push   ebx
c001d481:	e8 fe 49 ff ff       	call   c0011e84 <VAS::VAS(bool)>
c001d486:	83 c4 10             	add    esp,0x10
c001d489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d48d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d497:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d4a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d4a9:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d4af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4b9:	85 c0                	test   eax,eax
c001d4bb:	74 42                	je     c001d4ff <Process::Process(char const*, Process*, char**)+0x10f>
c001d4bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4c1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4c7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d4cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d4d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4db:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4e1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d4e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4eb:	05 0c 01 00 00       	add    eax,0x10c
c001d4f0:	83 ec 08             	sub    esp,0x8
c001d4f3:	52                   	push   edx
c001d4f4:	50                   	push   eax
c001d4f5:	e8 12 33 fe ff       	call   c000080c <strcpy>
c001d4fa:	83 c4 10             	add    esp,0x10
c001d4fd:	eb 63                	jmp    c001d562 <Process::Process(char const*, Process*, char**)+0x172>
c001d4ff:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d507:	83 ec 0c             	sub    esp,0xc
c001d50a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d50e:	e8 86 20 ff ff       	call   c000f599 <malloc>
c001d513:	83 c4 10             	add    esp,0x10
c001d516:	89 c3                	mov    ebx,eax
c001d518:	83 ec 08             	sub    esp,0x8
c001d51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d51f:	53                   	push   ebx
c001d520:	e8 61 33 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d525:	83 c4 10             	add    esp,0x10
c001d528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d52c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d536:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d53c:	83 ec 0c             	sub    esp,0xc
c001d53f:	50                   	push   eax
c001d540:	e8 00 2b ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d545:	83 c4 10             	add    esp,0x10
c001d548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d54c:	05 0c 01 00 00       	add    eax,0x10c
c001d551:	83 ec 08             	sub    esp,0x8
c001d554:	68 08 bc 02 c0       	push   0xc002bc08
c001d559:	50                   	push   eax
c001d55a:	e8 ad 32 fe ff       	call   c000080c <strcpy>
c001d55f:	83 c4 10             	add    esp,0x10
c001d562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d566:	83 c0 0c             	add    eax,0xc
c001d569:	83 ec 08             	sub    esp,0x8
c001d56c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d570:	50                   	push   eax
c001d571:	e8 96 32 fe ff       	call   c000080c <strcpy>
c001d576:	83 c4 10             	add    esp,0x10
c001d579:	83 ec 08             	sub    esp,0x8
c001d57c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d580:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d584:	e8 0d fe ff ff       	call   c001d396 <Process::addArgs(char**)>
c001d589:	83 c4 10             	add    esp,0x10
c001d58c:	83 ec 08             	sub    esp,0x8
c001d58f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d593:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d597:	e8 a0 ed ff ff       	call   c001c33c <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d59c:	83 c4 10             	add    esp,0x10
c001d59f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d5a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d5a7:	83 f0 01             	xor    eax,0x1
c001d5aa:	88 c2                	mov    dl,al
c001d5ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5b0:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d5b6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d5bb:	83 ec 08             	sub    esp,0x8
c001d5be:	50                   	push   eax
c001d5bf:	68 60 bc 02 c0       	push   0xc002bc60
c001d5c4:	e8 2c 51 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001d5c9:	83 c4 10             	add    esp,0x10
c001d5cc:	90                   	nop
c001d5cd:	83 c4 14             	add    esp,0x14
c001d5d0:	5b                   	pop    ebx
c001d5d1:	5e                   	pop    esi
c001d5d2:	c3                   	ret    
c001d5d3:	90                   	nop

c001d5d4 <Process::Process(bool, char const*, Process*, char**)>:
c001d5d4:	56                   	push   esi
c001d5d5:	53                   	push   ebx
c001d5d6:	83 ec 24             	sub    esp,0x24
c001d5d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d5dd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d5e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5e5:	05 0c 02 00 00       	add    eax,0x20c
c001d5ea:	bb 07 00 00 00       	mov    ebx,0x7
c001d5ef:	89 c6                	mov    esi,eax
c001d5f1:	85 db                	test   ebx,ebx
c001d5f3:	78 12                	js     c001d607 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d5f5:	83 ec 0c             	sub    esp,0xc
c001d5f8:	56                   	push   esi
c001d5f9:	e8 a8 b4 00 00       	call   c0028aa6 <ThreadControlBlock::ThreadControlBlock()>
c001d5fe:	83 c4 10             	add    esp,0x10
c001d601:	83 c6 63             	add    esi,0x63
c001d604:	4b                   	dec    ebx
c001d605:	eb ea                	jmp    c001d5f1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d607:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d60b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d612:	83 ec 0c             	sub    esp,0xc
c001d615:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d619:	e8 cc c6 ff ff       	call   c0019cea <Krnl::newProcessEnv(Process*)>
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	89 c2                	mov    edx,eax
c001d623:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d627:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d62d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d631:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d63a:	a1 90 cf 02 c0       	mov    eax,ds:0xc002cf90
c001d63f:	8d 50 01             	lea    edx,[eax+0x1]
c001d642:	89 15 90 cf 02 c0    	mov    DWORD PTR ds:0xc002cf90,edx
c001d648:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d64c:	89 02                	mov    DWORD PTR [edx],eax
c001d64e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d656:	83 ec 0c             	sub    esp,0xc
c001d659:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d65d:	e8 37 1f ff ff       	call   c000f599 <malloc>
c001d662:	83 c4 10             	add    esp,0x10
c001d665:	89 c3                	mov    ebx,eax
c001d667:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d66c:	83 ec 08             	sub    esp,0x8
c001d66f:	50                   	push   eax
c001d670:	53                   	push   ebx
c001d671:	e8 0e 48 ff ff       	call   c0011e84 <VAS::VAS(bool)>
c001d676:	83 c4 10             	add    esp,0x10
c001d679:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d67d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d683:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d687:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d691:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d695:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d699:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d69f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6a3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6a9:	85 c0                	test   eax,eax
c001d6ab:	74 42                	je     c001d6ef <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d6ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6b1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6b7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d6bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6c1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d6c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6cb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6d1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d6d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6db:	05 0c 01 00 00       	add    eax,0x10c
c001d6e0:	83 ec 08             	sub    esp,0x8
c001d6e3:	52                   	push   edx
c001d6e4:	50                   	push   eax
c001d6e5:	e8 22 31 fe ff       	call   c000080c <strcpy>
c001d6ea:	83 c4 10             	add    esp,0x10
c001d6ed:	eb 63                	jmp    c001d752 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d6ef:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d6f7:	83 ec 0c             	sub    esp,0xc
c001d6fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d6fe:	e8 96 1e ff ff       	call   c000f599 <malloc>
c001d703:	83 c4 10             	add    esp,0x10
c001d706:	89 c3                	mov    ebx,eax
c001d708:	83 ec 08             	sub    esp,0x8
c001d70b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d70f:	53                   	push   ebx
c001d710:	e8 71 31 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d715:	83 c4 10             	add    esp,0x10
c001d718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d71c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d722:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d726:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d72c:	83 ec 0c             	sub    esp,0xc
c001d72f:	50                   	push   eax
c001d730:	e8 10 29 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d735:	83 c4 10             	add    esp,0x10
c001d738:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d73c:	05 0c 01 00 00       	add    eax,0x10c
c001d741:	83 ec 08             	sub    esp,0x8
c001d744:	68 08 bc 02 c0       	push   0xc002bc08
c001d749:	50                   	push   eax
c001d74a:	e8 bd 30 fe ff       	call   c000080c <strcpy>
c001d74f:	83 c4 10             	add    esp,0x10
c001d752:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d756:	83 c0 0c             	add    eax,0xc
c001d759:	83 ec 08             	sub    esp,0x8
c001d75c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d760:	50                   	push   eax
c001d761:	e8 a6 30 fe ff       	call   c000080c <strcpy>
c001d766:	83 c4 10             	add    esp,0x10
c001d769:	83 ec 08             	sub    esp,0x8
c001d76c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d770:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d774:	e8 1d fc ff ff       	call   c001d396 <Process::addArgs(char**)>
c001d779:	83 c4 10             	add    esp,0x10
c001d77c:	90                   	nop
c001d77d:	83 c4 24             	add    esp,0x24
c001d780:	5b                   	pop    ebx
c001d781:	5e                   	pop    esi
c001d782:	c3                   	ret    

c001d783 <taskStartupFunction>:
c001d783:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d788:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d78b:	c3                   	ret    

c001d78c <Semaphore::Semaphore(int)>:
c001d78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d790:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d794:	89 10                	mov    DWORD PTR [eax],edx
c001d796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d79a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d7a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d7ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7b0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d7b7:	90                   	nop
c001d7b8:	c3                   	ret    
c001d7b9:	90                   	nop

c001d7ba <Mutex::Mutex()>:
c001d7ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7be:	6a 01                	push   0x1
c001d7c0:	50                   	push   eax
c001d7c1:	e8 c6 ff ff ff       	call   c001d78c <Semaphore::Semaphore(int)>
c001d7c6:	83 c4 08             	add    esp,0x8
c001d7c9:	90                   	nop
c001d7ca:	c3                   	ret    
c001d7cb:	90                   	nop

c001d7cc <Process::createThread(void (*)(void*), void*, int)>:
c001d7cc:	55                   	push   ebp
c001d7cd:	31 c9                	xor    ecx,ecx
c001d7cf:	57                   	push   edi
c001d7d0:	56                   	push   esi
c001d7d1:	53                   	push   ebx
c001d7d2:	83 ec 1c             	sub    esp,0x1c
c001d7d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7d9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d7e0:	89 f2                	mov    edx,esi
c001d7e2:	0f b7 c2             	movzx  eax,dx
c001d7e5:	83 e2 01             	and    edx,0x1
c001d7e8:	74 16                	je     c001d800 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d7ea:	d1 f8                	sar    eax,1
c001d7ec:	41                   	inc    ecx
c001d7ed:	89 c2                	mov    edx,eax
c001d7ef:	83 f9 10             	cmp    ecx,0x10
c001d7f2:	75 ee                	jne    c001d7e2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d7f4:	83 c4 1c             	add    esp,0x1c
c001d7f7:	31 db                	xor    ebx,ebx
c001d7f9:	89 d8                	mov    eax,ebx
c001d7fb:	5b                   	pop    ebx
c001d7fc:	5e                   	pop    esi
c001d7fd:	5f                   	pop    edi
c001d7fe:	5d                   	pop    ebp
c001d7ff:	c3                   	ret    
c001d800:	b8 01 00 00 00       	mov    eax,0x1
c001d805:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d808:	d3 e0                	shl    eax,cl
c001d80a:	09 c6                	or     esi,eax
c001d80c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d80f:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d816:	89 c6                	mov    esi,eax
c001d818:	c1 e6 05             	shl    esi,0x5
c001d81b:	01 f0                	add    eax,esi
c001d81d:	01 d8                	add    eax,ebx
c001d81f:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d826:	75 0a                	jne    c001d832 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d828:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d832:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d838:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d83c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d83f:	01 ca                	add    edx,ecx
c001d841:	83 ec 08             	sub    esp,0x8
c001d844:	89 d0                	mov    eax,edx
c001d846:	c1 e0 05             	shl    eax,0x5
c001d849:	01 d0                	add    eax,edx
c001d84b:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d84f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d853:	01 d8                	add    eax,ebx
c001d855:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d85b:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d861:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d867:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d86d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d873:	89 cd                	mov    ebp,ecx
c001d875:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d879:	f7 dd                	neg    ebp
c001d87b:	c1 e5 15             	shl    ebp,0x15
c001d87e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d884:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d88a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d894:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d89a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d8a4:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d8ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8b2:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d8b9:	53                   	push   ebx
c001d8ba:	68 44 0f 03 c0       	push   0xc0030f44
c001d8bf:	e8 9c af 00 00       	call   c0028860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d8c4:	89 d8                	mov    eax,ebx
c001d8c6:	83 c4 10             	add    esp,0x10
c001d8c9:	83 c4 1c             	add    esp,0x1c
c001d8cc:	5b                   	pop    ebx
c001d8cd:	5e                   	pop    esi
c001d8ce:	5f                   	pop    edi
c001d8cf:	5d                   	pop    ebp
c001d8d0:	c3                   	ret    
c001d8d1:	90                   	nop

c001d8d2 <Process::createUserThread()>:
c001d8d2:	83 ec 0c             	sub    esp,0xc
c001d8d5:	68 80 00 00 00       	push   0x80
c001d8da:	6a 00                	push   0x0
c001d8dc:	68 96 d2 01 c0       	push   0xc001d296
c001d8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8e5:	e8 e2 fe ff ff       	call   c001d7cc <Process::createThread(void (*)(void*), void*, int)>
c001d8ea:	83 c4 1c             	add    esp,0x1c
c001d8ed:	c3                   	ret    

c001d8ee <setupMultitasking(void (*)())>:
c001d8ee:	56                   	push   esi
c001d8ef:	53                   	push   ebx
c001d8f0:	51                   	push   ecx
c001d8f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8f5:	eb 10                	jmp    c001d907 <setupMultitasking(void (*)())+0x19>
c001d8f7:	83 ec 0c             	sub    esp,0xc
c001d8fa:	68 44 0f 03 c0       	push   0xc0030f44
c001d8ff:	e8 ae ae 00 00       	call   c00287b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d904:	83 c4 10             	add    esp,0x10
c001d907:	83 ec 0c             	sub    esp,0xc
c001d90a:	68 44 0f 03 c0       	push   0xc0030f44
c001d90f:	e8 7a ae 00 00       	call   c002878e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d914:	83 c4 10             	add    esp,0x10
c001d917:	84 c0                	test   al,al
c001d919:	74 dc                	je     c001d8f7 <setupMultitasking(void (*)())+0x9>
c001d91b:	83 ec 0c             	sub    esp,0xc
c001d91e:	68 3f 07 00 00       	push   0x73f
c001d923:	e8 71 1c ff ff       	call   c000f599 <malloc>
c001d928:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d92f:	89 c3                	mov    ebx,eax
c001d931:	6a 00                	push   0x0
c001d933:	68 0c bc 02 c0       	push   0xc002bc0c
c001d938:	6a 01                	push   0x1
c001d93a:	50                   	push   eax
c001d93b:	e8 94 fc ff ff       	call   c001d5d4 <Process::Process(bool, char const*, Process*, char**)>
c001d940:	83 c4 14             	add    esp,0x14
c001d943:	89 1d 50 0f 03 c0    	mov    DWORD PTR ds:0xc0030f50,ebx
c001d949:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d94f:	e8 ff 29 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001d954:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d95c:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d966:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d96c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d96f:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d979:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d97f:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d985:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d98f:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d999:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d9a3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d9a9:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d9b3:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d9b9:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d9c3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d9c9:	58                   	pop    eax
c001d9ca:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d9d0:	5a                   	pop    edx
c001d9d1:	68 08 bc 02 c0       	push   0xc002bc08
c001d9d6:	50                   	push   eax
c001d9d7:	e8 30 2e fe ff       	call   c000080c <strcpy>
c001d9dc:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d9e3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9e7:	83 c4 14             	add    esp,0x14
c001d9ea:	5b                   	pop    ebx
c001d9eb:	5e                   	pop    esi
c001d9ec:	e9 63 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d9f1 <schedule()>:
c001d9f1:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001d9f6:	85 c0                	test   eax,eax
c001d9f8:	74 0b                	je     c001da05 <schedule()+0x14>
c001d9fa:	c7 05 20 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x1
c001da04:	c3                   	ret    
c001da05:	53                   	push   ebx
c001da06:	83 ec 14             	sub    esp,0x14
c001da09:	68 44 0f 03 c0       	push   0xc0030f44
c001da0e:	e8 7b ad 00 00       	call   c002878e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da13:	83 c4 10             	add    esp,0x10
c001da16:	84 c0                	test   al,al
c001da18:	75 38                	jne    c001da52 <schedule()+0x61>
c001da1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da1f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001da22:	4a                   	dec    edx
c001da23:	74 32                	je     c001da57 <schedule()+0x66>
c001da25:	83 ec 0c             	sub    esp,0xc
c001da28:	68 44 0f 03 c0       	push   0xc0030f44
c001da2d:	e8 78 ad 00 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da32:	c7 04 24 44 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f44
c001da39:	89 c3                	mov    ebx,eax
c001da3b:	e8 72 ad 00 00       	call   c00287b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da40:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001da47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da4a:	e8 9d f8 ff ff       	call   c001d2ec <switchToThread(ThreadControlBlock*)>
c001da4f:	83 c4 10             	add    esp,0x10
c001da52:	83 c4 08             	add    esp,0x8
c001da55:	5b                   	pop    ebx
c001da56:	c3                   	ret    
c001da57:	83 ec 08             	sub    esp,0x8
c001da5a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da61:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da67:	68 44 0f 03 c0       	push   0xc0030f44
c001da6c:	e8 ef ad 00 00       	call   c0028860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da71:	83 c4 10             	add    esp,0x10
c001da74:	eb af                	jmp    c001da25 <schedule()+0x34>

c001da76 <Semaphore::tryAcquire()>:
c001da76:	53                   	push   ebx
c001da77:	83 ec 08             	sub    esp,0x8
c001da7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da7e:	fa                   	cli    
c001da7f:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001da84:	8d 50 01             	lea    edx,[eax+0x1]
c001da87:	89 15 28 0f 03 c0    	mov    DWORD PTR ds:0xc0030f28,edx
c001da8d:	8b 15 24 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f24
c001da93:	8d 5a 01             	lea    ebx,[edx+0x1]
c001da96:	89 1d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,ebx
c001da9c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001da9f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001daa1:	7c 2a                	jl     c001dacd <Semaphore::tryAcquire()+0x57>
c001daa3:	89 15 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,edx
c001daa9:	85 d2                	test   edx,edx
c001daab:	75 0a                	jne    c001dab7 <Semaphore::tryAcquire()+0x41>
c001daad:	8b 15 20 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f20
c001dab3:	85 d2                	test   edx,edx
c001dab5:	75 5b                	jne    c001db12 <Semaphore::tryAcquire()+0x9c>
c001dab7:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001dabc:	85 c0                	test   eax,eax
c001dabe:	74 07                	je     c001dac7 <Semaphore::tryAcquire()+0x51>
c001dac0:	31 c0                	xor    eax,eax
c001dac2:	83 c4 08             	add    esp,0x8
c001dac5:	5b                   	pop    ebx
c001dac6:	c3                   	ret    
c001dac7:	fb                   	sti    
c001dac8:	83 c4 08             	add    esp,0x8
c001dacb:	5b                   	pop    ebx
c001dacc:	c3                   	ret    
c001dacd:	43                   	inc    ebx
c001dace:	89 15 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,edx
c001dad4:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001dad7:	85 d2                	test   edx,edx
c001dad9:	75 1f                	jne    c001dafa <Semaphore::tryAcquire()+0x84>
c001dadb:	8b 0d 20 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f20
c001dae1:	85 c9                	test   ecx,ecx
c001dae3:	74 15                	je     c001dafa <Semaphore::tryAcquire()+0x84>
c001dae5:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001daef:	e8 fd fe ff ff       	call   c001d9f1 <schedule()>
c001daf4:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001daf9:	48                   	dec    eax
c001dafa:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001daff:	85 c0                	test   eax,eax
c001db01:	75 08                	jne    c001db0b <Semaphore::tryAcquire()+0x95>
c001db03:	fb                   	sti    
c001db04:	b0 01                	mov    al,0x1
c001db06:	83 c4 08             	add    esp,0x8
c001db09:	5b                   	pop    ebx
c001db0a:	c3                   	ret    
c001db0b:	b0 01                	mov    al,0x1
c001db0d:	83 c4 08             	add    esp,0x8
c001db10:	5b                   	pop    ebx
c001db11:	c3                   	ret    
c001db12:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001db1c:	e8 d0 fe ff ff       	call   c001d9f1 <schedule()>
c001db21:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001db26:	48                   	dec    eax
c001db27:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001db2c:	85 c0                	test   eax,eax
c001db2e:	75 90                	jne    c001dac0 <Semaphore::tryAcquire()+0x4a>
c001db30:	eb 95                	jmp    c001dac7 <Semaphore::tryAcquire()+0x51>

c001db32 <Semaphore::assertLocked(char const*)>:
c001db32:	83 ec 0c             	sub    esp,0xc
c001db35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db39:	fa                   	cli    
c001db3a:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001db40:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001db45:	8d 48 01             	lea    ecx,[eax+0x1]
c001db48:	89 0d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,ecx
c001db4e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001db50:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001db53:	7c 24                	jl     c001db79 <Semaphore::assertLocked(char const*)+0x47>
c001db55:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001db5a:	85 c0                	test   eax,eax
c001db5c:	75 09                	jne    c001db67 <Semaphore::assertLocked(char const*)+0x35>
c001db5e:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001db63:	85 c0                	test   eax,eax
c001db65:	75 29                	jne    c001db90 <Semaphore::assertLocked(char const*)+0x5e>
c001db67:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001db6c:	48                   	dec    eax
c001db6d:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001db72:	75 01                	jne    c001db75 <Semaphore::assertLocked(char const*)+0x43>
c001db74:	fb                   	sti    
c001db75:	83 c4 0c             	add    esp,0xc
c001db78:	c3                   	ret    
c001db79:	83 ec 0c             	sub    esp,0xc
c001db7c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001db80:	e8 dc c2 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001db85:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001db8a:	83 c4 10             	add    esp,0x10
c001db8d:	48                   	dec    eax
c001db8e:	eb c5                	jmp    c001db55 <Semaphore::assertLocked(char const*)+0x23>
c001db90:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001db9a:	e8 52 fe ff ff       	call   c001d9f1 <schedule()>
c001db9f:	eb c6                	jmp    c001db67 <Semaphore::assertLocked(char const*)+0x35>

c001dba1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dba1:	83 ec 0c             	sub    esp,0xc
c001dba4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dba9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbb0:	e8 3c fe ff ff       	call   c001d9f1 <schedule()>
c001dbb5:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001dbba:	48                   	dec    eax
c001dbbb:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001dbc0:	75 01                	jne    c001dbc3 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dbc2:	fb                   	sti    
c001dbc3:	83 c4 0c             	add    esp,0xc
c001dbc6:	c3                   	ret    

c001dbc7 <blockTask(TaskState)>:
c001dbc7:	83 ec 0c             	sub    esp,0xc
c001dbca:	fa                   	cli    
c001dbcb:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001dbd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbda:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbdd:	e8 0f fe ff ff       	call   c001d9f1 <schedule()>
c001dbe2:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001dbe7:	48                   	dec    eax
c001dbe8:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001dbed:	75 01                	jne    c001dbf0 <blockTask(TaskState)+0x29>
c001dbef:	fb                   	sti    
c001dbf0:	83 c4 0c             	add    esp,0xc
c001dbf3:	c3                   	ret    

c001dbf4 <waitTask(int, int*, int)>:
c001dbf4:	83 ec 18             	sub    esp,0x18
c001dbf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbfc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc00:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dc03:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dc07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc0c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dc0f:	6a 07                	push   0x7
c001dc11:	e8 b1 ff ff ff       	call   c001dbc7 <blockTask(TaskState)>
c001dc16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc1b:	83 c4 10             	add    esp,0x10
c001dc1e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dc21:	85 d2                	test   edx,edx
c001dc23:	74 0a                	je     c001dc2f <waitTask(int, int*, int)+0x3b>
c001dc25:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dc28:	89 02                	mov    DWORD PTR [edx],eax
c001dc2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc2f:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dc32:	83 c4 0c             	add    esp,0xc
c001dc35:	c3                   	ret    

c001dc36 <nanoSleepUntil(unsigned long long)>:
c001dc36:	83 ec 0c             	sub    esp,0xc
c001dc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc41:	3b 05 70 e0 02 c0    	cmp    eax,DWORD PTR ds:0xc002e070
c001dc47:	89 d1                	mov    ecx,edx
c001dc49:	1b 0d 74 e0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e074
c001dc4f:	73 04                	jae    c001dc55 <nanoSleepUntil(unsigned long long)+0x1f>
c001dc51:	83 c4 0c             	add    esp,0xc
c001dc54:	c3                   	ret    
c001dc55:	fa                   	cli    
c001dc56:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001dc5c:	83 ec 08             	sub    esp,0x8
c001dc5f:	ff 05 24 0f 03 c0    	inc    DWORD PTR ds:0xc0030f24
c001dc65:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc6b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dc6e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dc71:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc77:	68 38 0f 03 c0       	push   0xc0030f38
c001dc7c:	e8 df ab 00 00       	call   c0028860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc81:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc88:	e8 3a ff ff ff       	call   c001dbc7 <blockTask(TaskState)>
c001dc8d:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001dc92:	83 c4 10             	add    esp,0x10
c001dc95:	48                   	dec    eax
c001dc96:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001dc9b:	85 c0                	test   eax,eax
c001dc9d:	75 09                	jne    c001dca8 <nanoSleepUntil(unsigned long long)+0x72>
c001dc9f:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001dca4:	85 c0                	test   eax,eax
c001dca6:	75 12                	jne    c001dcba <nanoSleepUntil(unsigned long long)+0x84>
c001dca8:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001dcad:	48                   	dec    eax
c001dcae:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001dcb3:	75 9c                	jne    c001dc51 <nanoSleepUntil(unsigned long long)+0x1b>
c001dcb5:	fb                   	sti    
c001dcb6:	83 c4 0c             	add    esp,0xc
c001dcb9:	c3                   	ret    
c001dcba:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001dcc4:	e8 28 fd ff ff       	call   c001d9f1 <schedule()>
c001dcc9:	eb dd                	jmp    c001dca8 <nanoSleepUntil(unsigned long long)+0x72>

c001dccb <nanoSleep(unsigned long long)>:
c001dccb:	a1 70 e0 02 c0       	mov    eax,ds:0xc002e070
c001dcd0:	8b 15 74 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e074
c001dcd6:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dcda:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dcde:	e9 53 ff ff ff       	jmp    c001dc36 <nanoSleepUntil(unsigned long long)>

c001dce3 <sleep(unsigned long long)>:
c001dce3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dceb:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dcf0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dcf4:	01 ca                	add    edx,ecx
c001dcf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dcfa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dcfe:	eb cb                	jmp    c001dccb <nanoSleep(unsigned long long)>

c001dd00 <Semaphore::acquire()>:
c001dd00:	83 ec 0c             	sub    esp,0xc
c001dd03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd07:	fa                   	cli    
c001dd08:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001dd0d:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001dd13:	8d 48 01             	lea    ecx,[eax+0x1]
c001dd16:	89 0d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,ecx
c001dd1c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dd1f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dd21:	7d 28                	jge    c001dd4b <Semaphore::acquire()+0x4b>
c001dd23:	41                   	inc    ecx
c001dd24:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dd27:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001dd2c:	85 c0                	test   eax,eax
c001dd2e:	75 09                	jne    c001dd39 <Semaphore::acquire()+0x39>
c001dd30:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001dd35:	85 c0                	test   eax,eax
c001dd37:	75 4e                	jne    c001dd87 <Semaphore::acquire()+0x87>
c001dd39:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001dd3e:	48                   	dec    eax
c001dd3f:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001dd44:	75 01                	jne    c001dd47 <Semaphore::acquire()+0x47>
c001dd46:	fb                   	sti    
c001dd47:	83 c4 0c             	add    esp,0xc
c001dd4a:	c3                   	ret    
c001dd4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd50:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dd57:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dd5a:	85 c9                	test   ecx,ecx
c001dd5c:	74 3a                	je     c001dd98 <Semaphore::acquire()+0x98>
c001dd5e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dd61:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd67:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dd6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd6f:	83 ec 0c             	sub    esp,0xc
c001dd72:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dd75:	6a 05                	push   0x5
c001dd77:	e8 4b fe ff ff       	call   c001dbc7 <blockTask(TaskState)>
c001dd7c:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001dd81:	83 c4 10             	add    esp,0x10
c001dd84:	48                   	dec    eax
c001dd85:	eb a0                	jmp    c001dd27 <Semaphore::acquire()+0x27>
c001dd87:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001dd91:	e8 5b fc ff ff       	call   c001d9f1 <schedule()>
c001dd96:	eb a1                	jmp    c001dd39 <Semaphore::acquire()+0x39>
c001dd98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd9d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dda0:	eb c8                	jmp    c001dd6a <Semaphore::acquire()+0x6a>

c001dda2 <taskReturned>:
c001dda2:	83 ec 18             	sub    esp,0x18
c001dda5:	68 88 bc 02 c0       	push   0xc002bc88
c001ddaa:	e8 b2 c0 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001ddaf:	83 c4 10             	add    esp,0x10
c001ddb2:	83 ec 0c             	sub    esp,0xc
c001ddb5:	6a 02                	push   0x2
c001ddb7:	e8 0b fe ff ff       	call   c001dbc7 <blockTask(TaskState)>
c001ddbc:	fa                   	cli    
c001ddbd:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001ddc3:	e8 29 fc ff ff       	call   c001d9f1 <schedule()>
c001ddc8:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001ddcd:	83 c4 10             	add    esp,0x10
c001ddd0:	48                   	dec    eax
c001ddd1:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001ddd6:	85 c0                	test   eax,eax
c001ddd8:	75 d8                	jne    c001ddb2 <taskReturned+0x10>
c001ddda:	fb                   	sti    
c001dddb:	eb d5                	jmp    c001ddb2 <taskReturned+0x10>

c001dddd <Thr::processFromPID(int)>:
c001dddd:	57                   	push   edi
c001ddde:	56                   	push   esi
c001dddf:	53                   	push   ebx
c001dde0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dde4:	fa                   	cli    
c001dde5:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001ddeb:	83 ec 0c             	sub    esp,0xc
c001ddee:	68 44 0f 03 c0       	push   0xc0030f44
c001ddf3:	e8 b2 a9 00 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddf8:	83 c4 10             	add    esp,0x10
c001ddfb:	89 c7                	mov    edi,eax
c001ddfd:	eb 14                	jmp    c001de13 <Thr::processFromPID(int)+0x36>
c001ddff:	83 ec 0c             	sub    esp,0xc
c001de02:	68 44 0f 03 c0       	push   0xc0030f44
c001de07:	e8 9e a9 00 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de0c:	83 c4 10             	add    esp,0x10
c001de0f:	39 f8                	cmp    eax,edi
c001de11:	74 49                	je     c001de5c <Thr::processFromPID(int)+0x7f>
c001de13:	83 ec 0c             	sub    esp,0xc
c001de16:	68 44 0f 03 c0       	push   0xc0030f44
c001de1b:	e8 8a a9 00 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de20:	c7 04 24 44 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f44
c001de27:	89 c3                	mov    ebx,eax
c001de29:	e8 84 a9 00 00       	call   c00287b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de2e:	58                   	pop    eax
c001de2f:	5a                   	pop    edx
c001de30:	53                   	push   ebx
c001de31:	68 44 0f 03 c0       	push   0xc0030f44
c001de36:	e8 25 aa 00 00       	call   c0028860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de3b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de3e:	83 c4 10             	add    esp,0x10
c001de41:	39 30                	cmp    DWORD PTR [eax],esi
c001de43:	75 ba                	jne    c001ddff <Thr::processFromPID(int)+0x22>
c001de45:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001de4a:	48                   	dec    eax
c001de4b:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001de50:	74 07                	je     c001de59 <Thr::processFromPID(int)+0x7c>
c001de52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de55:	5b                   	pop    ebx
c001de56:	5e                   	pop    esi
c001de57:	5f                   	pop    edi
c001de58:	c3                   	ret    
c001de59:	fb                   	sti    
c001de5a:	eb f6                	jmp    c001de52 <Thr::processFromPID(int)+0x75>
c001de5c:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001de61:	48                   	dec    eax
c001de62:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001de67:	75 05                	jne    c001de6e <Thr::processFromPID(int)+0x91>
c001de69:	fb                   	sti    
c001de6a:	5b                   	pop    ebx
c001de6b:	5e                   	pop    esi
c001de6c:	5f                   	pop    edi
c001de6d:	c3                   	ret    
c001de6e:	5b                   	pop    ebx
c001de6f:	31 c0                	xor    eax,eax
c001de71:	5e                   	pop    esi
c001de72:	5f                   	pop    edi
c001de73:	c3                   	ret    

c001de74 <unblockTask(ThreadControlBlock*)>:
c001de74:	53                   	push   ebx
c001de75:	83 ec 08             	sub    esp,0x8
c001de78:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de7c:	fa                   	cli    
c001de7d:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001de83:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de86:	85 c0                	test   eax,eax
c001de88:	74 5a                	je     c001dee4 <unblockTask(ThreadControlBlock*)+0x70>
c001de8a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de8d:	48                   	dec    eax
c001de8e:	74 31                	je     c001dec1 <unblockTask(ThreadControlBlock*)+0x4d>
c001de90:	83 ec 0c             	sub    esp,0xc
c001de93:	68 44 0f 03 c0       	push   0xc0030f44
c001de98:	e8 0d a9 00 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de9d:	83 c4 10             	add    esp,0x10
c001dea0:	85 c0                	test   eax,eax
c001dea2:	75 17                	jne    c001debb <unblockTask(ThreadControlBlock*)+0x47>
c001dea4:	eb 50                	jmp    c001def6 <unblockTask(ThreadControlBlock*)+0x82>
c001dea6:	83 ec 08             	sub    esp,0x8
c001dea9:	50                   	push   eax
c001deaa:	68 44 0f 03 c0       	push   0xc0030f44
c001deaf:	e8 7e ac 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001deb4:	83 c4 10             	add    esp,0x10
c001deb7:	85 c0                	test   eax,eax
c001deb9:	74 3b                	je     c001def6 <unblockTask(ThreadControlBlock*)+0x82>
c001debb:	39 c3                	cmp    ebx,eax
c001debd:	75 e7                	jne    c001dea6 <unblockTask(ThreadControlBlock*)+0x32>
c001debf:	eb 10                	jmp    c001ded1 <unblockTask(ThreadControlBlock*)+0x5d>
c001dec1:	83 ec 0c             	sub    esp,0xc
c001dec4:	68 2a bc 02 c0       	push   0xc002bc2a
c001dec9:	e8 27 48 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001dece:	83 c4 10             	add    esp,0x10
c001ded1:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001ded6:	48                   	dec    eax
c001ded7:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001dedc:	75 01                	jne    c001dedf <unblockTask(ThreadControlBlock*)+0x6b>
c001dede:	fb                   	sti    
c001dedf:	83 c4 08             	add    esp,0x8
c001dee2:	5b                   	pop    ebx
c001dee3:	c3                   	ret    
c001dee4:	83 ec 0c             	sub    esp,0xc
c001dee7:	68 13 bc 02 c0       	push   0xc002bc13
c001deec:	e8 04 48 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001def1:	83 c4 10             	add    esp,0x10
c001def4:	eb db                	jmp    c001ded1 <unblockTask(ThreadControlBlock*)+0x5d>
c001def6:	83 ec 08             	sub    esp,0x8
c001def9:	53                   	push   ebx
c001defa:	68 44 0f 03 c0       	push   0xc0030f44
c001deff:	e8 5c a9 00 00       	call   c0028860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df04:	83 c4 10             	add    esp,0x10
c001df07:	eb c8                	jmp    c001ded1 <unblockTask(ThreadControlBlock*)+0x5d>

c001df09 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001df09:	55                   	push   ebp
c001df0a:	57                   	push   edi
c001df0b:	56                   	push   esi
c001df0c:	53                   	push   ebx
c001df0d:	83 ec 1c             	sub    esp,0x1c
c001df10:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df14:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df17:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001df1d:	85 ff                	test   edi,edi
c001df1f:	7e 20                	jle    c001df41 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001df21:	31 f6                	xor    esi,esi
c001df23:	83 ec 0c             	sub    esp,0xc
c001df26:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001df2d:	46                   	inc    esi
c001df2e:	e8 76 16 ff ff       	call   c000f5a9 <free>
c001df33:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df36:	83 c4 10             	add    esp,0x10
c001df39:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001df3f:	7f e2                	jg     c001df23 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001df41:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df4b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df50:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df53:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df56:	d3 c0                	rol    eax,cl
c001df58:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df5f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df62:	89 f7                	mov    edi,esi
c001df64:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df6c:	0f 85 64 01 00 00    	jne    c001e0d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df72:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001df78:	85 ed                	test   ebp,ebp
c001df7a:	74 1b                	je     c001df97 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001df7c:	83 ec 0c             	sub    esp,0xc
c001df7f:	55                   	push   ebp
c001df80:	e8 81 bc ff ff       	call   c0019c06 <EnvVarContainer::~EnvVarContainer()>
c001df85:	59                   	pop    ecx
c001df86:	5e                   	pop    esi
c001df87:	6a 0c                	push   0xc
c001df89:	55                   	push   ebp
c001df8a:	e8 8e 46 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c001df8f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df92:	83 c4 10             	add    esp,0x10
c001df95:	89 f7                	mov    edi,esi
c001df97:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df9d:	85 c0                	test   eax,eax
c001df9f:	0f 84 aa 00 00 00    	je     c001e04f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dfa5:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001dfa8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dfac:	31 c9                	xor    ecx,ecx
c001dfae:	eb 10                	jmp    c001dfc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001dfb0:	41                   	inc    ecx
c001dfb1:	83 f9 10             	cmp    ecx,0x10
c001dfb4:	0f 84 95 00 00 00    	je     c001e04f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dfba:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfc0:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dfc7:	d3 fa                	sar    edx,cl
c001dfc9:	83 e2 01             	and    edx,0x1
c001dfcc:	74 e2                	je     c001dfb0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfce:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dfd1:	01 ca                	add    edx,ecx
c001dfd3:	89 d5                	mov    ebp,edx
c001dfd5:	c1 e5 05             	shl    ebp,0x5
c001dfd8:	01 ea                	add    edx,ebp
c001dfda:	01 d0                	add    eax,edx
c001dfdc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dfe2:	83 fd 07             	cmp    ebp,0x7
c001dfe5:	75 c9                	jne    c001dfb0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfe7:	05 40 02 00 00       	add    eax,0x240
c001dfec:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dfef:	83 fd ff             	cmp    ebp,0xffffffff
c001dff2:	0f 8c e6 00 00 00    	jl     c001e0de <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001dff8:	0f 84 97 01 00 00    	je     c001e195 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dffe:	85 ed                	test   ebp,ebp
c001e000:	0f 84 7e 01 00 00    	je     c001e184 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e006:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e008:	75 a6                	jne    c001dfb0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e00a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e010:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e014:	01 d0                	add    eax,edx
c001e016:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e01a:	83 ec 0c             	sub    esp,0xc
c001e01d:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e023:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e026:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e02c:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e033:	50                   	push   eax
c001e034:	e8 3b fe ff ff       	call   c001de74 <unblockTask(ThreadControlBlock*)>
c001e039:	83 c4 10             	add    esp,0x10
c001e03c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e03f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e043:	89 f7                	mov    edi,esi
c001e045:	41                   	inc    ecx
c001e046:	83 f9 10             	cmp    ecx,0x10
c001e049:	0f 85 6b ff ff ff    	jne    c001dfba <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e04f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e055:	85 c0                	test   eax,eax
c001e057:	74 5d                	je     c001e0b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e059:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e05f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e065:	74 4f                	je     c001e0b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e067:	83 ec 0c             	sub    esp,0xc
c001e06a:	68 44 0f 03 c0       	push   0xc0030f44
c001e06f:	e8 36 a7 00 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e074:	c7 04 24 44 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f44
c001e07b:	89 c7                	mov    edi,eax
c001e07d:	e8 0c a7 00 00       	call   c002878e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e082:	83 c4 10             	add    esp,0x10
c001e085:	84 c0                	test   al,al
c001e087:	0f 84 c2 00 00 00    	je     c001e14f <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e08d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e090:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e096:	85 d2                	test   edx,edx
c001e098:	74 0f                	je     c001e0a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e09a:	83 ec 0c             	sub    esp,0xc
c001e09d:	8b 02                	mov    eax,DWORD PTR [edx]
c001e09f:	52                   	push   edx
c001e0a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e0a3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0a6:	83 c4 10             	add    esp,0x10
c001e0a9:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e0b3:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e0b6:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e0bc:	85 db                	test   ebx,ebx
c001e0be:	74 16                	je     c001e0d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e0c0:	83 ec 0c             	sub    esp,0xc
c001e0c3:	53                   	push   ebx
c001e0c4:	e8 95 37 ff ff       	call   c001185e <VAS::~VAS()>
c001e0c9:	58                   	pop    eax
c001e0ca:	5a                   	pop    edx
c001e0cb:	6a 14                	push   0x14
c001e0cd:	53                   	push   ebx
c001e0ce:	e8 4a 45 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c001e0d3:	83 c4 10             	add    esp,0x10
c001e0d6:	83 c4 1c             	add    esp,0x1c
c001e0d9:	5b                   	pop    ebx
c001e0da:	5e                   	pop    esi
c001e0db:	5f                   	pop    edi
c001e0dc:	5d                   	pop    ebp
c001e0dd:	c3                   	ret    
c001e0de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e0e2:	83 ec 0c             	sub    esp,0xc
c001e0e5:	68 bc bc 02 c0       	push   0xc002bcbc
c001e0ea:	e8 72 bd ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001e0ef:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0f2:	83 c4 10             	add    esp,0x10
c001e0f5:	89 f7                	mov    edi,esi
c001e0f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0fb:	e9 b0 fe ff ff       	jmp    c001dfb0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e100:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e106:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e10c:	75 1c                	jne    c001e12a <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e10e:	83 ec 0c             	sub    esp,0xc
c001e111:	68 24 bd 02 c0       	push   0xc002bd24
c001e116:	e8 da 45 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001e11b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e122:	e8 a0 fa ff ff       	call   c001dbc7 <blockTask(TaskState)>
c001e127:	83 c4 10             	add    esp,0x10
c001e12a:	83 ec 08             	sub    esp,0x8
c001e12d:	56                   	push   esi
c001e12e:	68 44 0f 03 c0       	push   0xc0030f44
c001e133:	e8 28 a7 00 00       	call   c0028860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e138:	c7 04 24 44 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f44
c001e13f:	e8 66 a6 00 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e144:	83 c4 10             	add    esp,0x10
c001e147:	39 f8                	cmp    eax,edi
c001e149:	0f 84 3e ff ff ff    	je     c001e08d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e14f:	83 ec 0c             	sub    esp,0xc
c001e152:	68 44 0f 03 c0       	push   0xc0030f44
c001e157:	e8 4e a6 00 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e15c:	c7 04 24 44 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f44
c001e163:	89 c6                	mov    esi,eax
c001e165:	e8 48 a6 00 00       	call   c00287b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e16a:	83 c4 10             	add    esp,0x10
c001e16d:	39 f3                	cmp    ebx,esi
c001e16f:	74 b9                	je     c001e12a <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e171:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e174:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e177:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e17d:	75 ab                	jne    c001e12a <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e17f:	e9 7c ff ff ff       	jmp    c001e100 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e184:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e188:	83 ec 0c             	sub    esp,0xc
c001e18b:	68 f0 bc 02 c0       	push   0xc002bcf0
c001e190:	e9 55 ff ff ff       	jmp    c001e0ea <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e195:	8b 36                	mov    esi,DWORD PTR [esi]
c001e197:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e19b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e19e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1a1:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e1a7:	01 d7                	add    edi,edx
c001e1a9:	89 f8                	mov    eax,edi
c001e1ab:	e9 66 fe ff ff       	jmp    c001e016 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e1b0 <cleanerTaskFunction(void*)>:
c001e1b0:	53                   	push   ebx
c001e1b1:	83 ec 08             	sub    esp,0x8
c001e1b4:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e1b9:	48                   	dec    eax
c001e1ba:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e1bf:	75 01                	jne    c001e1c2 <cleanerTaskFunction(void*)+0x12>
c001e1c1:	fb                   	sti    
c001e1c2:	fa                   	cli    
c001e1c3:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e1c8:	80 3d 0c 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f0c,0x0
c001e1cf:	8d 50 01             	lea    edx,[eax+0x1]
c001e1d2:	89 15 28 0f 03 c0    	mov    DWORD PTR ds:0xc0030f28,edx
c001e1d8:	0f 84 a1 00 00 00    	je     c001e27f <cleanerTaskFunction(void*)+0xcf>
c001e1de:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e1e3:	85 c0                	test   eax,eax
c001e1e5:	75 01                	jne    c001e1e8 <cleanerTaskFunction(void*)+0x38>
c001e1e7:	fb                   	sti    
c001e1e8:	c6 05 0c 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f0c,0x0
c001e1ef:	fa                   	cli    
c001e1f0:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e1f6:	ff 05 24 0f 03 c0    	inc    DWORD PTR ds:0xc0030f24
c001e1fc:	fa                   	cli    
c001e1fd:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e203:	eb 26                	jmp    c001e22b <cleanerTaskFunction(void*)+0x7b>
c001e205:	83 ec 0c             	sub    esp,0xc
c001e208:	68 2c 0f 03 c0       	push   0xc0030f2c
c001e20d:	e8 98 a5 00 00       	call   c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e212:	c7 04 24 2c 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f2c
c001e219:	89 c3                	mov    ebx,eax
c001e21b:	e8 92 a5 00 00       	call   c00287b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e220:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e223:	e8 e1 fc ff ff       	call   c001df09 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e228:	83 c4 10             	add    esp,0x10
c001e22b:	83 ec 0c             	sub    esp,0xc
c001e22e:	68 2c 0f 03 c0       	push   0xc0030f2c
c001e233:	e8 56 a5 00 00       	call   c002878e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e238:	83 c4 10             	add    esp,0x10
c001e23b:	84 c0                	test   al,al
c001e23d:	74 c6                	je     c001e205 <cleanerTaskFunction(void*)+0x55>
c001e23f:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e244:	48                   	dec    eax
c001e245:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e24a:	75 01                	jne    c001e24d <cleanerTaskFunction(void*)+0x9d>
c001e24c:	fb                   	sti    
c001e24d:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001e252:	48                   	dec    eax
c001e253:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001e258:	0f 85 56 ff ff ff    	jne    c001e1b4 <cleanerTaskFunction(void*)+0x4>
c001e25e:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001e263:	85 c0                	test   eax,eax
c001e265:	0f 84 49 ff ff ff    	je     c001e1b4 <cleanerTaskFunction(void*)+0x4>
c001e26b:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001e275:	e8 77 f7 ff ff       	call   c001d9f1 <schedule()>
c001e27a:	e9 35 ff ff ff       	jmp    c001e1b4 <cleanerTaskFunction(void*)+0x4>
c001e27f:	83 ec 0c             	sub    esp,0xc
c001e282:	6a 02                	push   0x2
c001e284:	e8 18 f9 ff ff       	call   c001dba1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e289:	83 c4 10             	add    esp,0x10
c001e28c:	e9 57 ff ff ff       	jmp    c001e1e8 <cleanerTaskFunction(void*)+0x38>

c001e291 <terminateTask(int)>:
c001e291:	83 ec 14             	sub    esp,0x14
c001e294:	fa                   	cli    
c001e295:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e29b:	ff 05 24 0f 03 c0    	inc    DWORD PTR ds:0xc0030f24
c001e2a1:	fa                   	cli    
c001e2a2:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e2a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e2ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b1:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e2b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e2bc:	50                   	push   eax
c001e2bd:	68 2c 0f 03 c0       	push   0xc0030f2c
c001e2c2:	e8 99 a5 00 00       	call   c0028860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2cc:	83 c4 10             	add    esp,0x10
c001e2cf:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e2d6:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e2db:	85 c0                	test   eax,eax
c001e2dd:	74 53                	je     c001e332 <terminateTask(int)+0xa1>
c001e2df:	83 ec 0c             	sub    esp,0xc
c001e2e2:	c6 05 0c 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f0c,0x1
c001e2e9:	50                   	push   eax
c001e2ea:	e8 85 fb ff ff       	call   c001de74 <unblockTask(ThreadControlBlock*)>
c001e2ef:	83 c4 10             	add    esp,0x10
c001e2f2:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e2f7:	48                   	dec    eax
c001e2f8:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e2fd:	75 01                	jne    c001e300 <terminateTask(int)+0x6f>
c001e2ff:	fb                   	sti    
c001e300:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001e305:	48                   	dec    eax
c001e306:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001e30b:	75 09                	jne    c001e316 <terminateTask(int)+0x85>
c001e30d:	83 3d 20 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f20,0x0
c001e314:	75 2e                	jne    c001e344 <terminateTask(int)+0xb3>
c001e316:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e31b:	48                   	dec    eax
c001e31c:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e321:	75 01                	jne    c001e324 <terminateTask(int)+0x93>
c001e323:	fb                   	sti    
c001e324:	fa                   	cli    
c001e325:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e32b:	e8 c1 f6 ff ff       	call   c001d9f1 <schedule()>
c001e330:	eb e4                	jmp    c001e316 <terminateTask(int)+0x85>
c001e332:	83 ec 0c             	sub    esp,0xc
c001e335:	68 41 bc 02 c0       	push   0xc002bc41
c001e33a:	e8 b6 43 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001e33f:	83 c4 10             	add    esp,0x10
c001e342:	eb ae                	jmp    c001e2f2 <terminateTask(int)+0x61>
c001e344:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001e34e:	eb db                	jmp    c001e32b <terminateTask(int)+0x9a>

c001e350 <Thr::terminateFromIRQ(int)>:
c001e350:	83 ec 18             	sub    esp,0x18
c001e353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e357:	e8 35 ff ff ff       	call   c001e291 <terminateTask(int)>

c001e35c <Semaphore::release()>:
c001e35c:	83 ec 0c             	sub    esp,0xc
c001e35f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e363:	fa                   	cli    
c001e364:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001e369:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e36f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e372:	89 0d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,ecx
c001e378:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e37b:	85 c9                	test   ecx,ecx
c001e37d:	74 3c                	je     c001e3bb <Semaphore::release()+0x5f>
c001e37f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e382:	83 ec 0c             	sub    esp,0xc
c001e385:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e388:	51                   	push   ecx
c001e389:	e8 e6 fa ff ff       	call   c001de74 <unblockTask(ThreadControlBlock*)>
c001e38e:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001e393:	83 c4 10             	add    esp,0x10
c001e396:	48                   	dec    eax
c001e397:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001e39c:	85 c0                	test   eax,eax
c001e39e:	75 09                	jne    c001e3a9 <Semaphore::release()+0x4d>
c001e3a0:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001e3a5:	85 c0                	test   eax,eax
c001e3a7:	75 17                	jne    c001e3c0 <Semaphore::release()+0x64>
c001e3a9:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e3ae:	48                   	dec    eax
c001e3af:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e3b4:	75 01                	jne    c001e3b7 <Semaphore::release()+0x5b>
c001e3b6:	fb                   	sti    
c001e3b7:	83 c4 0c             	add    esp,0xc
c001e3ba:	c3                   	ret    
c001e3bb:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e3be:	eb d7                	jmp    c001e397 <Semaphore::release()+0x3b>
c001e3c0:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c001e3ca:	e8 22 f6 ff ff       	call   c001d9f1 <schedule()>
c001e3cf:	eb d8                	jmp    c001e3a9 <Semaphore::release()+0x4d>

c001e3d1 <__static_initialization_and_destruction_0(int, int)>:
c001e3d1:	83 ec 0c             	sub    esp,0xc
c001e3d4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e3d9:	0f 85 88 00 00 00    	jne    c001e467 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3df:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e3e7:	75 7e                	jne    c001e467 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3e9:	83 ec 0c             	sub    esp,0xc
c001e3ec:	68 44 0f 03 c0       	push   0xc0030f44
c001e3f1:	e8 fa a6 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3f6:	83 c4 10             	add    esp,0x10
c001e3f9:	83 ec 04             	sub    esp,0x4
c001e3fc:	68 d8 c7 02 c0       	push   0xc002c7d8
c001e401:	68 44 0f 03 c0       	push   0xc0030f44
c001e406:	68 a4 8a 02 c0       	push   0xc0028aa4
c001e40b:	e8 87 41 ff ff       	call   c0012597 <__cxa_atexit>
c001e410:	83 c4 10             	add    esp,0x10
c001e413:	83 ec 0c             	sub    esp,0xc
c001e416:	68 38 0f 03 c0       	push   0xc0030f38
c001e41b:	e8 d0 a6 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e420:	83 c4 10             	add    esp,0x10
c001e423:	83 ec 04             	sub    esp,0x4
c001e426:	68 d8 c7 02 c0       	push   0xc002c7d8
c001e42b:	68 38 0f 03 c0       	push   0xc0030f38
c001e430:	68 a4 8a 02 c0       	push   0xc0028aa4
c001e435:	e8 5d 41 ff ff       	call   c0012597 <__cxa_atexit>
c001e43a:	83 c4 10             	add    esp,0x10
c001e43d:	83 ec 0c             	sub    esp,0xc
c001e440:	68 2c 0f 03 c0       	push   0xc0030f2c
c001e445:	e8 a6 a6 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e44a:	83 c4 10             	add    esp,0x10
c001e44d:	83 ec 04             	sub    esp,0x4
c001e450:	68 d8 c7 02 c0       	push   0xc002c7d8
c001e455:	68 2c 0f 03 c0       	push   0xc0030f2c
c001e45a:	68 a4 8a 02 c0       	push   0xc0028aa4
c001e45f:	e8 33 41 ff ff       	call   c0012597 <__cxa_atexit>
c001e464:	83 c4 10             	add    esp,0x10
c001e467:	90                   	nop
c001e468:	83 c4 0c             	add    esp,0xc
c001e46b:	c3                   	ret    

c001e46c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e46c:	83 ec 0c             	sub    esp,0xc
c001e46f:	83 ec 08             	sub    esp,0x8
c001e472:	68 ff ff 00 00       	push   0xffff
c001e477:	6a 01                	push   0x1
c001e479:	e8 53 ff ff ff       	call   c001e3d1 <__static_initialization_and_destruction_0(int, int)>
c001e47e:	83 c4 10             	add    esp,0x10
c001e481:	83 c4 0c             	add    esp,0xc
c001e484:	c3                   	ret    

c001e485 <Vm::inbv(unsigned short)>:
c001e485:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e489:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e48e:	75 06                	jne    c001e496 <Vm::inbv(unsigned short)+0x11>
c001e490:	a0 8c 0f 03 c0       	mov    al,ds:0xc0030f8c
c001e495:	c3                   	ret    
c001e496:	ec                   	in     al,dx
c001e497:	c3                   	ret    

c001e498 <Vm::outbv(unsigned short, unsigned char)>:
c001e498:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e49c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4a0:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e4a5:	75 25                	jne    c001e4cc <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e4a7:	8b 0d 8c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f8c
c001e4ad:	8d 51 01             	lea    edx,[ecx+0x1]
c001e4b0:	88 81 a0 0f 03 c0    	mov    BYTE PTR [ecx-0x3ffcf060],al
c001e4b6:	89 15 8c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f8c,edx
c001e4bc:	83 fa 20             	cmp    edx,0x20
c001e4bf:	75 0c                	jne    c001e4cd <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e4c1:	c7 05 8c 0f 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030f8c,0x1f
c001e4cb:	c3                   	ret    
c001e4cc:	ee                   	out    dx,al
c001e4cd:	c3                   	ret    

c001e4ce <Vm::realToLinear(unsigned short, unsigned short)>:
c001e4ce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4d8:	c1 e0 04             	shl    eax,0x4
c001e4db:	01 d0                	add    eax,edx
c001e4dd:	c3                   	ret    

c001e4de <Vm::getSegment(unsigned int)>:
c001e4de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4e2:	c1 e8 10             	shr    eax,0x10
c001e4e5:	c3                   	ret    

c001e4e6 <Vm::getOffset(unsigned int)>:
c001e4e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4ea:	c3                   	ret    

c001e4eb <Vm::mainloop2()>:
c001e4eb:	83 ec 18             	sub    esp,0x18
c001e4ee:	fa                   	cli    
c001e4ef:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e4f5:	6a 02                	push   0x2
c001e4f7:	c6 05 85 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f85,0x1
c001e4fe:	e8 9e f6 ff ff       	call   c001dba1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e503:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e508:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e50c:	52                   	push   edx
c001e50d:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e511:	52                   	push   edx
c001e512:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e516:	52                   	push   edx
c001e517:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e51b:	50                   	push   eax
c001e51c:	e8 d9 1d fe ff       	call   c00002fa <goToVM86>
c001e521:	83 c4 2c             	add    esp,0x2c
c001e524:	c3                   	ret    

c001e525 <Vm::mainVm8086Loop(void*)>:
c001e525:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e52a:	48                   	dec    eax
c001e52b:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e530:	75 01                	jne    c001e533 <Vm::mainVm8086Loop(void*)+0xe>
c001e532:	fb                   	sti    
c001e533:	eb b6                	jmp    c001e4eb <Vm::mainloop2()>

c001e535 <Vm::mainloop3(unsigned long)>:
c001e535:	83 ec 18             	sub    esp,0x18
c001e538:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e53c:	fa                   	cli    
c001e53d:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e543:	6a 02                	push   0x2
c001e545:	c6 05 84 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f84,0x1
c001e54c:	a3 80 0f 03 c0       	mov    ds:0xc0030f80,eax
c001e551:	e8 4b f6 ff ff       	call   c001dba1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e556:	83 c4 1c             	add    esp,0x1c
c001e559:	eb 90                	jmp    c001e4eb <Vm::mainloop2()>

c001e55b <Vm::initialise8086()>:
c001e55b:	83 ec 0c             	sub    esp,0xc
c001e55e:	68 80 00 00 00       	push   0x80
c001e563:	6a 00                	push   0x0
c001e565:	68 25 e5 01 c0       	push   0xc001e525
c001e56a:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c001e570:	e8 57 f2 ff ff       	call   c001d7cc <Process::createThread(void (*)(void*), void*, int)>
c001e575:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e57c:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e581:	68 00 01 00 00       	push   0x100
c001e586:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c001e58b:	6a 00                	push   0x0
c001e58d:	6a 00                	push   0x0
c001e58f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e595:	e8 36 37 ff ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e59a:	83 c4 2c             	add    esp,0x2c
c001e59d:	c3                   	ret    

c001e59e <Vm::finish8086()>:
c001e59e:	53                   	push   ebx
c001e59f:	83 ec 08             	sub    esp,0x8
c001e5a2:	fa                   	cli    
c001e5a3:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e5a9:	80 3d 84 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f84,0x0
c001e5b0:	75 15                	jne    c001e5c7 <Vm::finish8086()+0x29>
c001e5b2:	e8 3a f4 ff ff       	call   c001d9f1 <schedule()>
c001e5b7:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e5bc:	48                   	dec    eax
c001e5bd:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e5c2:	75 de                	jne    c001e5a2 <Vm::finish8086()+0x4>
c001e5c4:	fb                   	sti    
c001e5c5:	eb db                	jmp    c001e5a2 <Vm::finish8086()+0x4>
c001e5c7:	83 ec 0c             	sub    esp,0xc
c001e5ca:	8b 1d 80 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f80
c001e5d0:	ff 35 88 0f 03 c0    	push   DWORD PTR ds:0xc0030f88
c001e5d6:	c6 05 84 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f84,0x0
c001e5dd:	e8 92 f8 ff ff       	call   c001de74 <unblockTask(ThreadControlBlock*)>
c001e5e2:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e5e7:	83 c4 10             	add    esp,0x10
c001e5ea:	8d 50 ff             	lea    edx,[eax-0x1]
c001e5ed:	89 15 28 0f 03 c0    	mov    DWORD PTR ds:0xc0030f28,edx
c001e5f3:	85 d2                	test   edx,edx
c001e5f5:	75 01                	jne    c001e5f8 <Vm::finish8086()+0x5a>
c001e5f7:	fb                   	sti    
c001e5f8:	89 d8                	mov    eax,ebx
c001e5fa:	83 c4 08             	add    esp,0x8
c001e5fd:	5b                   	pop    ebx
c001e5fe:	c3                   	ret    

c001e5ff <Vm::getOutput8086(unsigned char*)>:
c001e5ff:	57                   	push   edi
c001e600:	8b 0d 8c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f8c
c001e606:	56                   	push   esi
c001e607:	be a0 0f 03 c0       	mov    esi,0xc0030fa0
c001e60c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e610:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e612:	a1 8c 0f 03 c0       	mov    eax,ds:0xc0030f8c
c001e617:	5e                   	pop    esi
c001e618:	c7 05 8c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f8c,0x0
c001e622:	5f                   	pop    edi
c001e623:	c3                   	ret    

c001e624 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e624:	55                   	push   ebp
c001e625:	57                   	push   edi
c001e626:	56                   	push   esi
c001e627:	53                   	push   ebx
c001e628:	83 ec 2c             	sub    esp,0x2c
c001e62b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e62f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e633:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e637:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e63b:	fa                   	cli    
c001e63c:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c001e642:	0f b6 35 85 0f 03 c0 	movzx  esi,BYTE PTR ds:0xc0030f85
c001e649:	89 f0                	mov    eax,esi
c001e64b:	84 c0                	test   al,al
c001e64d:	75 1d                	jne    c001e66c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e64f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e653:	e8 99 f3 ff ff       	call   c001d9f1 <schedule()>
c001e658:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e65d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e661:	48                   	dec    eax
c001e662:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e667:	75 d2                	jne    c001e63b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e669:	fb                   	sti    
c001e66a:	eb cf                	jmp    c001e63b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e66c:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e671:	c7 05 8c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f8c,0x0
c001e67b:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e67f:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e683:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e687:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e68b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e68f:	50                   	push   eax
c001e690:	6a 20                	push   0x20
c001e692:	6a 00                	push   0x0
c001e694:	68 a0 0f 03 c0       	push   0xc0030fa0
c001e699:	e8 b2 20 fe ff       	call   c0000750 <memset>
c001e69e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e6a5:	e8 ef 0e ff ff       	call   c000f599 <malloc>
c001e6aa:	83 c4 0c             	add    esp,0xc
c001e6ad:	89 c3                	mov    ebx,eax
c001e6af:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c001e6b5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e6b9:	50                   	push   eax
c001e6ba:	e8 95 45 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c001e6bf:	83 c4 10             	add    esp,0x10
c001e6c2:	85 db                	test   ebx,ebx
c001e6c4:	75 0a                	jne    c001e6d0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e6c6:	83 ec 0c             	sub    esp,0xc
c001e6c9:	68 4c bd 02 c0       	push   0xc002bd4c
c001e6ce:	eb 3e                	jmp    c001e70e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6d0:	50                   	push   eax
c001e6d1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e6d5:	50                   	push   eax
c001e6d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e6da:	50                   	push   eax
c001e6db:	53                   	push   ebx
c001e6dc:	e8 83 48 ff ff       	call   c0012f64 <File::stat(unsigned long long*, bool*)>
c001e6e1:	83 c4 10             	add    esp,0x10
c001e6e4:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e6e9:	74 0a                	je     c001e6f5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e6eb:	83 ec 0c             	sub    esp,0xc
c001e6ee:	68 60 bd 02 c0       	push   0xc002bd60
c001e6f3:	eb 19                	jmp    c001e70e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6f5:	51                   	push   ecx
c001e6f6:	51                   	push   ecx
c001e6f7:	6a 01                	push   0x1
c001e6f9:	53                   	push   ebx
c001e6fa:	e8 b9 45 ff ff       	call   c0012cb8 <File::open(FileOpenMode)>
c001e6ff:	83 c4 10             	add    esp,0x10
c001e702:	85 c0                	test   eax,eax
c001e704:	74 24                	je     c001e72a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e706:	83 ec 0c             	sub    esp,0xc
c001e709:	68 79 bd 02 c0       	push   0xc002bd79
c001e70e:	e8 4e b7 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001e713:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e718:	83 c4 10             	add    esp,0x10
c001e71b:	48                   	dec    eax
c001e71c:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e721:	85 c0                	test   eax,eax
c001e723:	75 01                	jne    c001e726 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e725:	fb                   	sti    
c001e726:	31 f6                	xor    esi,esi
c001e728:	eb 58                	jmp    c001e782 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e72a:	0f b7 ed             	movzx  ebp,bp
c001e72d:	50                   	push   eax
c001e72e:	0f b7 ff             	movzx  edi,di
c001e731:	50                   	push   eax
c001e732:	55                   	push   ebp
c001e733:	57                   	push   edi
c001e734:	e8 95 fd ff ff       	call   c001e4ce <Vm::realToLinear(unsigned short, unsigned short)>
c001e739:	5a                   	pop    edx
c001e73a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e73c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e740:	51                   	push   ecx
c001e741:	50                   	push   eax
c001e742:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e746:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e74a:	53                   	push   ebx
c001e74b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e74e:	83 c4 14             	add    esp,0x14
c001e751:	53                   	push   ebx
c001e752:	e8 bf 45 ff ff       	call   c0012d16 <File::close()>
c001e757:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001e75c:	83 c4 10             	add    esp,0x10
c001e75f:	48                   	dec    eax
c001e760:	c6 05 85 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f85,0x0
c001e767:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001e76c:	85 c0                	test   eax,eax
c001e76e:	75 01                	jne    c001e771 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e770:	fb                   	sti    
c001e771:	83 ec 0c             	sub    esp,0xc
c001e774:	ff 35 88 0f 03 c0    	push   DWORD PTR ds:0xc0030f88
c001e77a:	e8 f5 f6 ff ff       	call   c001de74 <unblockTask(ThreadControlBlock*)>
c001e77f:	83 c4 10             	add    esp,0x10
c001e782:	83 c4 2c             	add    esp,0x2c
c001e785:	89 f0                	mov    eax,esi
c001e787:	5b                   	pop    ebx
c001e788:	5e                   	pop    esi
c001e789:	5f                   	pop    edi
c001e78a:	5d                   	pop    ebp
c001e78b:	c3                   	ret    

c001e78c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e78c:	57                   	push   edi
c001e78d:	56                   	push   esi
c001e78e:	53                   	push   ebx
c001e78f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e797:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e79b:	83 e8 06             	sub    eax,0x6
c001e79e:	0f b7 c0             	movzx  eax,ax
c001e7a1:	50                   	push   eax
c001e7a2:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e7a7:	50                   	push   eax
c001e7a8:	e8 21 fd ff ff       	call   c001e4ce <Vm::realToLinear(unsigned short, unsigned short)>
c001e7ad:	5a                   	pop    edx
c001e7ae:	5e                   	pop    esi
c001e7af:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e7b2:	8d 56 fa             	lea    edx,[esi-0x6]
c001e7b5:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e7bb:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e7be:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e7c1:	83 c2 02             	add    edx,0x2
c001e7c4:	66 89 10             	mov    WORD PTR [eax],dx
c001e7c7:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e7ca:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e7ce:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e7d1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e7d5:	89 d6                	mov    esi,edx
c001e7d7:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e7dd:	66 81 e6 ff fd       	and    si,0xfdff
c001e7e2:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e7e6:	74 07                	je     c001e7ef <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e7e8:	89 d6                	mov    esi,edx
c001e7ea:	66 81 ce 00 02       	or     si,0x200
c001e7ef:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e7f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7f8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e7fc:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e804:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e807:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e80f:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e812:	5b                   	pop    ebx
c001e813:	5e                   	pop    esi
c001e814:	5f                   	pop    edi
c001e815:	c3                   	ret    

c001e816 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e816:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e81b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e820:	c1 e0 04             	shl    eax,0x4
c001e823:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e826:	c3                   	ret    

c001e827 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e827:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e82c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e831:	c1 e0 04             	shl    eax,0x4
c001e834:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e838:	c3                   	ret    

c001e839 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e839:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e83e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e843:	c1 e0 04             	shl    eax,0x4
c001e846:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e849:	c3                   	ret    

c001e84a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e84a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e84f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e854:	c1 e0 04             	shl    eax,0x4
c001e857:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e85b:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e85e:	c3                   	ret    

c001e85f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e85f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e864:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e869:	c1 e0 04             	shl    eax,0x4
c001e86c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e870:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e874:	c3                   	ret    

c001e875 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e875:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e87a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e87f:	c1 e0 04             	shl    eax,0x4
c001e882:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e886:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e889:	c3                   	ret    

c001e88a <Vm::faultHandler(regs*)>:
c001e88a:	55                   	push   ebp
c001e88b:	57                   	push   edi
c001e88c:	56                   	push   esi
c001e88d:	53                   	push   ebx
c001e88e:	83 ec 1c             	sub    esp,0x1c
c001e891:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e895:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e898:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e89c:	0f b7 f8             	movzx  edi,ax
c001e89f:	52                   	push   edx
c001e8a0:	0f b7 c0             	movzx  eax,ax
c001e8a3:	50                   	push   eax
c001e8a4:	e8 25 fc ff ff       	call   c001e4ce <Vm::realToLinear(unsigned short, unsigned short)>
c001e8a9:	5a                   	pop    edx
c001e8aa:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e8ad:	59                   	pop    ecx
c001e8ae:	89 c1                	mov    ecx,eax
c001e8b0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e8b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e8b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8c0:	0f b7 c5             	movzx  eax,bp
c001e8c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8c7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e8cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8cf:	e8 fa fb ff ff       	call   c001e4ce <Vm::realToLinear(unsigned short, unsigned short)>
c001e8d4:	5e                   	pop    esi
c001e8d5:	be 06 00 00 00       	mov    esi,0x6
c001e8da:	5a                   	pop    edx
c001e8db:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e8e0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e8e5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e8e8:	80 fa 9d             	cmp    dl,0x9d
c001e8eb:	0f 84 2c 02 00 00    	je     c001eb1d <Vm::faultHandler(regs*)+0x293>
c001e8f1:	0f 87 91 00 00 00    	ja     c001e988 <Vm::faultHandler(regs*)+0xfe>
c001e8f7:	80 fa 66             	cmp    dl,0x66
c001e8fa:	0f 84 98 01 00 00    	je     c001ea98 <Vm::faultHandler(regs*)+0x20e>
c001e900:	77 47                	ja     c001e949 <Vm::faultHandler(regs*)+0xbf>
c001e902:	80 fa 36             	cmp    dl,0x36
c001e905:	0f 84 80 01 00 00    	je     c001ea8b <Vm::faultHandler(regs*)+0x201>
c001e90b:	77 1a                	ja     c001e927 <Vm::faultHandler(regs*)+0x9d>
c001e90d:	80 fa 26             	cmp    dl,0x26
c001e910:	0f 84 4e 01 00 00    	je     c001ea64 <Vm::faultHandler(regs*)+0x1da>
c001e916:	80 fa 2e             	cmp    dl,0x2e
c001e919:	0f 85 e2 05 00 00    	jne    c001ef01 <Vm::faultHandler(regs*)+0x677>
c001e91f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e922:	31 f6                	xor    esi,esi
c001e924:	41                   	inc    ecx
c001e925:	eb be                	jmp    c001e8e5 <Vm::faultHandler(regs*)+0x5b>
c001e927:	80 fa 64             	cmp    dl,0x64
c001e92a:	0f 84 41 01 00 00    	je     c001ea71 <Vm::faultHandler(regs*)+0x1e7>
c001e930:	0f 87 48 01 00 00    	ja     c001ea7e <Vm::faultHandler(regs*)+0x1f4>
c001e936:	80 fa 3e             	cmp    dl,0x3e
c001e939:	0f 85 c2 05 00 00    	jne    c001ef01 <Vm::faultHandler(regs*)+0x677>
c001e93f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e942:	be 01 00 00 00       	mov    esi,0x1
c001e947:	eb db                	jmp    c001e924 <Vm::faultHandler(regs*)+0x9a>
c001e949:	80 fa 6d             	cmp    dl,0x6d
c001e94c:	0f 84 ec 02 00 00    	je     c001ec3e <Vm::faultHandler(regs*)+0x3b4>
c001e952:	77 17                	ja     c001e96b <Vm::faultHandler(regs*)+0xe1>
c001e954:	80 fa 67             	cmp    dl,0x67
c001e957:	0f 84 48 01 00 00    	je     c001eaa5 <Vm::faultHandler(regs*)+0x21b>
c001e95d:	80 fa 6c             	cmp    dl,0x6c
c001e960:	0f 84 69 02 00 00    	je     c001ebcf <Vm::faultHandler(regs*)+0x345>
c001e966:	e9 96 05 00 00       	jmp    c001ef01 <Vm::faultHandler(regs*)+0x677>
c001e96b:	80 fa 6f             	cmp    dl,0x6f
c001e96e:	0f 84 f4 03 00 00    	je     c001ed68 <Vm::faultHandler(regs*)+0x4de>
c001e974:	0f 82 59 03 00 00    	jb     c001ecd3 <Vm::faultHandler(regs*)+0x449>
c001e97a:	80 fa 9c             	cmp    dl,0x9c
c001e97d:	0f 84 2f 01 00 00    	je     c001eab2 <Vm::faultHandler(regs*)+0x228>
c001e983:	e9 79 05 00 00       	jmp    c001ef01 <Vm::faultHandler(regs*)+0x677>
c001e988:	80 fa ec             	cmp    dl,0xec
c001e98b:	0f 84 14 05 00 00    	je     c001eea5 <Vm::faultHandler(regs*)+0x61b>
c001e991:	77 7b                	ja     c001ea0e <Vm::faultHandler(regs*)+0x184>
c001e993:	80 fa e4             	cmp    dl,0xe4
c001e996:	0f 84 93 04 00 00    	je     c001ee2f <Vm::faultHandler(regs*)+0x5a5>
c001e99c:	77 53                	ja     c001e9f1 <Vm::faultHandler(regs*)+0x167>
c001e99e:	80 fa cd             	cmp    dl,0xcd
c001e9a1:	0f 84 d9 01 00 00    	je     c001eb80 <Vm::faultHandler(regs*)+0x2f6>
c001e9a7:	80 fa cf             	cmp    dl,0xcf
c001e9aa:	0f 85 51 05 00 00    	jne    c001ef01 <Vm::faultHandler(regs*)+0x677>
c001e9b0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e9b3:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e9b6:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e9ba:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e9bd:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e9c1:	81 ca 00 02 02 00    	or     edx,0x20200
c001e9c7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e9ca:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e9ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9d4:	66 c1 e8 09          	shr    ax,0x9
c001e9d8:	83 e0 01             	and    eax,0x1
c001e9db:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e9de:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e9e1:	83 c0 06             	add    eax,0x6
c001e9e4:	25 ff ff 00 00       	and    eax,0xffff
c001e9e9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e9ec:	e9 0c 05 00 00       	jmp    c001eefd <Vm::faultHandler(regs*)+0x673>
c001e9f1:	80 fa e6             	cmp    dl,0xe6
c001e9f4:	0f 84 7f 04 00 00    	je     c001ee79 <Vm::faultHandler(regs*)+0x5ef>
c001e9fa:	0f 82 4b 04 00 00    	jb     c001ee4b <Vm::faultHandler(regs*)+0x5c1>
c001ea00:	80 fa e7             	cmp    dl,0xe7
c001ea03:	0f 84 87 04 00 00    	je     c001ee90 <Vm::faultHandler(regs*)+0x606>
c001ea09:	e9 f3 04 00 00       	jmp    c001ef01 <Vm::faultHandler(regs*)+0x677>
c001ea0e:	80 fa ef             	cmp    dl,0xef
c001ea11:	0f 84 d1 04 00 00    	je     c001eee8 <Vm::faultHandler(regs*)+0x65e>
c001ea17:	77 28                	ja     c001ea41 <Vm::faultHandler(regs*)+0x1b7>
c001ea19:	80 fa ed             	cmp    dl,0xed
c001ea1c:	0f 84 9f 04 00 00    	je     c001eec1 <Vm::faultHandler(regs*)+0x637>
c001ea22:	80 fa ee             	cmp    dl,0xee
c001ea25:	0f 85 d6 04 00 00    	jne    c001ef01 <Vm::faultHandler(regs*)+0x677>
c001ea2b:	50                   	push   eax
c001ea2c:	50                   	push   eax
c001ea2d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ea31:	50                   	push   eax
c001ea32:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea36:	50                   	push   eax
c001ea37:	e8 5c fa ff ff       	call   c001e498 <Vm::outbv(unsigned short, unsigned char)>
c001ea3c:	e9 9f 04 00 00       	jmp    c001eee0 <Vm::faultHandler(regs*)+0x656>
c001ea41:	80 fa fa             	cmp    dl,0xfa
c001ea44:	0f 84 69 01 00 00    	je     c001ebb3 <Vm::faultHandler(regs*)+0x329>
c001ea4a:	80 fa fb             	cmp    dl,0xfb
c001ea4d:	0f 84 6e 01 00 00    	je     c001ebc1 <Vm::faultHandler(regs*)+0x337>
c001ea53:	80 fa f3             	cmp    dl,0xf3
c001ea56:	0f 85 a5 04 00 00    	jne    c001ef01 <Vm::faultHandler(regs*)+0x677>
c001ea5c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea5f:	e9 c0 fe ff ff       	jmp    c001e924 <Vm::faultHandler(regs*)+0x9a>
c001ea64:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea67:	be 02 00 00 00       	mov    esi,0x2
c001ea6c:	e9 b3 fe ff ff       	jmp    c001e924 <Vm::faultHandler(regs*)+0x9a>
c001ea71:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea74:	be 03 00 00 00       	mov    esi,0x3
c001ea79:	e9 a6 fe ff ff       	jmp    c001e924 <Vm::faultHandler(regs*)+0x9a>
c001ea7e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea81:	be 04 00 00 00       	mov    esi,0x4
c001ea86:	e9 99 fe ff ff       	jmp    c001e924 <Vm::faultHandler(regs*)+0x9a>
c001ea8b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea8e:	be 05 00 00 00       	mov    esi,0x5
c001ea93:	e9 8c fe ff ff       	jmp    c001e924 <Vm::faultHandler(regs*)+0x9a>
c001ea98:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea9b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001eaa0:	e9 7f fe ff ff       	jmp    c001e924 <Vm::faultHandler(regs*)+0x9a>
c001eaa5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eaa8:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001eaad:	e9 72 fe ff ff       	jmp    c001e924 <Vm::faultHandler(regs*)+0x9a>
c001eab2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eab5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001eab9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eabe:	74 30                	je     c001eaf0 <Vm::faultHandler(regs*)+0x266>
c001eac0:	83 e9 04             	sub    ecx,0x4
c001eac3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eac9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eacf:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ead2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ead5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eadb:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eadf:	0f 84 15 04 00 00    	je     c001eefa <Vm::faultHandler(regs*)+0x670>
c001eae5:	80 ce 02             	or     dh,0x2
c001eae8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eaeb:	e9 0a 04 00 00       	jmp    c001eefa <Vm::faultHandler(regs*)+0x670>
c001eaf0:	83 e9 02             	sub    ecx,0x2
c001eaf3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eaf9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eafc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eb00:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eb06:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eb0a:	74 05                	je     c001eb11 <Vm::faultHandler(regs*)+0x287>
c001eb0c:	80 ce 02             	or     dh,0x2
c001eb0f:	eb 03                	jmp    c001eb14 <Vm::faultHandler(regs*)+0x28a>
c001eb11:	80 e6 fd             	and    dh,0xfd
c001eb14:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eb18:	e9 dd 03 00 00       	jmp    c001eefa <Vm::faultHandler(regs*)+0x670>
c001eb1d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb22:	74 2a                	je     c001eb4e <Vm::faultHandler(regs*)+0x2c4>
c001eb24:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb26:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eb2c:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb32:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb35:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb37:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb3d:	c1 e8 09             	shr    eax,0x9
c001eb40:	83 e0 01             	and    eax,0x1
c001eb43:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb46:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb49:	83 c0 04             	add    eax,0x4
c001eb4c:	eb 25                	jmp    c001eb73 <Vm::faultHandler(regs*)+0x2e9>
c001eb4e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb51:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb57:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb5a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eb5d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb63:	66 c1 e8 09          	shr    ax,0x9
c001eb67:	83 e0 01             	and    eax,0x1
c001eb6a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb6d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb70:	83 c0 02             	add    eax,0x2
c001eb73:	25 ff ff 00 00       	and    eax,0xffff
c001eb78:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb7b:	e9 7a 03 00 00       	jmp    c001eefa <Vm::faultHandler(regs*)+0x670>
c001eb80:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb84:	3c ee                	cmp    al,0xee
c001eb86:	75 10                	jne    c001eb98 <Vm::faultHandler(regs*)+0x30e>
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001eb8e:	e8 a2 f9 ff ff       	call   c001e535 <Vm::mainloop3(unsigned long)>
c001eb93:	e9 4b 03 00 00       	jmp    c001eee3 <Vm::faultHandler(regs*)+0x659>
c001eb98:	83 ec 0c             	sub    esp,0xc
c001eb9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eba3:	51                   	push   ecx
c001eba4:	50                   	push   eax
c001eba5:	53                   	push   ebx
c001eba6:	e8 e1 fb ff ff       	call   c001e78c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ebab:	83 c4 20             	add    esp,0x20
c001ebae:	e9 4a 03 00 00       	jmp    c001eefd <Vm::faultHandler(regs*)+0x673>
c001ebb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebb8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ebbc:	e9 39 03 00 00       	jmp    c001eefa <Vm::faultHandler(regs*)+0x670>
c001ebc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebc6:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ebca:	e9 2b 03 00 00       	jmp    c001eefa <Vm::faultHandler(regs*)+0x670>
c001ebcf:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ebd2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebd7:	74 2b                	je     c001ec04 <Vm::faultHandler(regs*)+0x37a>
c001ebd9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ebe0:	76 22                	jbe    c001ec04 <Vm::faultHandler(regs*)+0x37a>
c001ebe2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebe6:	50                   	push   eax
c001ebe7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebeb:	50                   	push   eax
c001ebec:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebf0:	50                   	push   eax
c001ebf1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebf5:	50                   	push   eax
c001ebf6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebfa:	50                   	push   eax
c001ebfb:	6a 6c                	push   0x6c
c001ebfd:	6a 6c                	push   0x6c
c001ebff:	e9 b9 01 00 00       	jmp    c001edbd <Vm::faultHandler(regs*)+0x533>
c001ec04:	83 ec 0c             	sub    esp,0xc
c001ec07:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ec0b:	0f b7 f6             	movzx  esi,si
c001ec0e:	50                   	push   eax
c001ec0f:	e8 71 f8 ff ff       	call   c001e485 <Vm::inbv(unsigned short)>
c001ec14:	83 c4 0c             	add    esp,0xc
c001ec17:	0f b6 c0             	movzx  eax,al
c001ec1a:	50                   	push   eax
c001ec1b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ec1f:	50                   	push   eax
c001ec20:	56                   	push   esi
c001ec21:	e8 24 fc ff ff       	call   c001e84a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ec26:	83 c4 10             	add    esp,0x10
c001ec29:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec2c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec30:	74 03                	je     c001ec35 <Vm::faultHandler(regs*)+0x3ab>
c001ec32:	48                   	dec    eax
c001ec33:	eb 01                	jmp    c001ec36 <Vm::faultHandler(regs*)+0x3ac>
c001ec35:	40                   	inc    eax
c001ec36:	0f b7 c0             	movzx  eax,ax
c001ec39:	e9 8d 00 00 00       	jmp    c001eccb <Vm::faultHandler(regs*)+0x441>
c001ec3e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec41:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec44:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec49:	74 29                	je     c001ec74 <Vm::faultHandler(regs*)+0x3ea>
c001ec4b:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec50:	76 22                	jbe    c001ec74 <Vm::faultHandler(regs*)+0x3ea>
c001ec52:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec56:	50                   	push   eax
c001ec57:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec5b:	50                   	push   eax
c001ec5c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec60:	50                   	push   eax
c001ec61:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec65:	50                   	push   eax
c001ec66:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec6a:	50                   	push   eax
c001ec6b:	6a 6d                	push   0x6d
c001ec6d:	6a 6d                	push   0x6d
c001ec6f:	e9 49 01 00 00       	jmp    c001edbd <Vm::faultHandler(regs*)+0x533>
c001ec74:	0f b7 c8             	movzx  ecx,ax
c001ec77:	0f b7 f6             	movzx  esi,si
c001ec7a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ec7d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec82:	74 20                	je     c001eca4 <Vm::faultHandler(regs*)+0x41a>
c001ec84:	ed                   	in     eax,dx
c001ec85:	55                   	push   ebp
c001ec86:	50                   	push   eax
c001ec87:	51                   	push   ecx
c001ec88:	56                   	push   esi
c001ec89:	e8 e7 fb ff ff       	call   c001e875 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ec8e:	83 c4 10             	add    esp,0x10
c001ec91:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec94:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec98:	74 05                	je     c001ec9f <Vm::faultHandler(regs*)+0x415>
c001ec9a:	83 e8 04             	sub    eax,0x4
c001ec9d:	eb 27                	jmp    c001ecc6 <Vm::faultHandler(regs*)+0x43c>
c001ec9f:	83 c0 04             	add    eax,0x4
c001eca2:	eb 22                	jmp    c001ecc6 <Vm::faultHandler(regs*)+0x43c>
c001eca4:	66 ed                	in     ax,dx
c001eca6:	0f b7 c0             	movzx  eax,ax
c001eca9:	57                   	push   edi
c001ecaa:	50                   	push   eax
c001ecab:	51                   	push   ecx
c001ecac:	56                   	push   esi
c001ecad:	e8 ad fb ff ff       	call   c001e85f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ecb2:	83 c4 10             	add    esp,0x10
c001ecb5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ecb8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ecbc:	74 05                	je     c001ecc3 <Vm::faultHandler(regs*)+0x439>
c001ecbe:	83 e8 02             	sub    eax,0x2
c001ecc1:	eb 03                	jmp    c001ecc6 <Vm::faultHandler(regs*)+0x43c>
c001ecc3:	83 c0 02             	add    eax,0x2
c001ecc6:	25 ff ff 00 00       	and    eax,0xffff
c001eccb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ecce:	e9 27 02 00 00       	jmp    c001eefa <Vm::faultHandler(regs*)+0x670>
c001ecd3:	8d 46 ff             	lea    eax,[esi-0x1]
c001ecd6:	3c 05                	cmp    al,0x5
c001ecd8:	77 24                	ja     c001ecfe <Vm::faultHandler(regs*)+0x474>
c001ecda:	0f b6 c0             	movzx  eax,al
c001ecdd:	ff 24 85 ec bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4214]
c001ece4:	0f b7 fd             	movzx  edi,bp
c001ece7:	eb 15                	jmp    c001ecfe <Vm::faultHandler(regs*)+0x474>
c001ece9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001eced:	eb 0f                	jmp    c001ecfe <Vm::faultHandler(regs*)+0x474>
c001ecef:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ecf3:	eb 09                	jmp    c001ecfe <Vm::faultHandler(regs*)+0x474>
c001ecf5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ecf9:	eb 03                	jmp    c001ecfe <Vm::faultHandler(regs*)+0x474>
c001ecfb:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ecfe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed01:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed06:	74 29                	je     c001ed31 <Vm::faultHandler(regs*)+0x4a7>
c001ed08:	3d ff ff 00 00       	cmp    eax,0xffff
c001ed0d:	76 22                	jbe    c001ed31 <Vm::faultHandler(regs*)+0x4a7>
c001ed0f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed13:	50                   	push   eax
c001ed14:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed18:	50                   	push   eax
c001ed19:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed1d:	50                   	push   eax
c001ed1e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed22:	50                   	push   eax
c001ed23:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed27:	50                   	push   eax
c001ed28:	6a 6e                	push   0x6e
c001ed2a:	6a 6e                	push   0x6e
c001ed2c:	e9 8c 00 00 00       	jmp    c001edbd <Vm::faultHandler(regs*)+0x533>
c001ed31:	0f b7 c0             	movzx  eax,ax
c001ed34:	52                   	push   edx
c001ed35:	52                   	push   edx
c001ed36:	50                   	push   eax
c001ed37:	57                   	push   edi
c001ed38:	e8 d9 fa ff ff       	call   c001e816 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ed3d:	59                   	pop    ecx
c001ed3e:	0f b6 c0             	movzx  eax,al
c001ed41:	5e                   	pop    esi
c001ed42:	50                   	push   eax
c001ed43:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed47:	50                   	push   eax
c001ed48:	e8 4b f7 ff ff       	call   c001e498 <Vm::outbv(unsigned short, unsigned char)>
c001ed4d:	83 c4 10             	add    esp,0x10
c001ed50:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed53:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed57:	74 03                	je     c001ed5c <Vm::faultHandler(regs*)+0x4d2>
c001ed59:	48                   	dec    eax
c001ed5a:	eb 01                	jmp    c001ed5d <Vm::faultHandler(regs*)+0x4d3>
c001ed5c:	40                   	inc    eax
c001ed5d:	0f b7 c0             	movzx  eax,ax
c001ed60:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed63:	e9 92 01 00 00       	jmp    c001eefa <Vm::faultHandler(regs*)+0x670>
c001ed68:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed6b:	3c 05                	cmp    al,0x5
c001ed6d:	77 1f                	ja     c001ed8e <Vm::faultHandler(regs*)+0x504>
c001ed6f:	0f b6 c0             	movzx  eax,al
c001ed72:	ff 24 85 04 be 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd41fc]
c001ed79:	89 ef                	mov    edi,ebp
c001ed7b:	eb 11                	jmp    c001ed8e <Vm::faultHandler(regs*)+0x504>
c001ed7d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ed80:	eb 0c                	jmp    c001ed8e <Vm::faultHandler(regs*)+0x504>
c001ed82:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ed85:	eb 07                	jmp    c001ed8e <Vm::faultHandler(regs*)+0x504>
c001ed87:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ed8a:	eb 02                	jmp    c001ed8e <Vm::faultHandler(regs*)+0x504>
c001ed8c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ed8e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ed91:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed96:	74 37                	je     c001edcf <Vm::faultHandler(regs*)+0x545>
c001ed98:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ed9e:	76 2f                	jbe    c001edcf <Vm::faultHandler(regs*)+0x545>
c001eda0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eda4:	50                   	push   eax
c001eda5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eda9:	50                   	push   eax
c001edaa:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001edae:	50                   	push   eax
c001edaf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001edb3:	50                   	push   eax
c001edb4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001edb8:	50                   	push   eax
c001edb9:	6a 6f                	push   0x6f
c001edbb:	6a 6f                	push   0x6f
c001edbd:	68 92 bd 02 c0       	push   0xc002bd92
c001edc2:	e8 2e 39 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001edc7:	83 c4 20             	add    esp,0x20
c001edca:	e9 86 01 00 00       	jmp    c001ef55 <Vm::faultHandler(regs*)+0x6cb>
c001edcf:	0f b7 d7             	movzx  edx,di
c001edd2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001edd5:	0f b7 c6             	movzx  eax,si
c001edd8:	81 e1 00 04 00 00    	and    ecx,0x400
c001edde:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ede1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ede6:	74 1d                	je     c001ee05 <Vm::faultHandler(regs*)+0x57b>
c001ede8:	55                   	push   ebp
c001ede9:	55                   	push   ebp
c001edea:	50                   	push   eax
c001edeb:	52                   	push   edx
c001edec:	e8 48 fa ff ff       	call   c001e839 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001edf1:	83 c4 10             	add    esp,0x10
c001edf4:	89 fa                	mov    edx,edi
c001edf6:	ef                   	out    dx,eax
c001edf7:	85 c9                	test   ecx,ecx
c001edf9:	74 05                	je     c001ee00 <Vm::faultHandler(regs*)+0x576>
c001edfb:	83 ee 04             	sub    esi,0x4
c001edfe:	eb 21                	jmp    c001ee21 <Vm::faultHandler(regs*)+0x597>
c001ee00:	83 c6 04             	add    esi,0x4
c001ee03:	eb 1c                	jmp    c001ee21 <Vm::faultHandler(regs*)+0x597>
c001ee05:	55                   	push   ebp
c001ee06:	55                   	push   ebp
c001ee07:	50                   	push   eax
c001ee08:	52                   	push   edx
c001ee09:	e8 19 fa ff ff       	call   c001e827 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ee0e:	83 c4 10             	add    esp,0x10
c001ee11:	89 fa                	mov    edx,edi
c001ee13:	66 ef                	out    dx,ax
c001ee15:	85 c9                	test   ecx,ecx
c001ee17:	74 05                	je     c001ee1e <Vm::faultHandler(regs*)+0x594>
c001ee19:	83 ee 02             	sub    esi,0x2
c001ee1c:	eb 03                	jmp    c001ee21 <Vm::faultHandler(regs*)+0x597>
c001ee1e:	83 c6 02             	add    esi,0x2
c001ee21:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ee27:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ee2a:	e9 cb 00 00 00       	jmp    c001eefa <Vm::faultHandler(regs*)+0x670>
c001ee2f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee36:	83 ec 0c             	sub    esp,0xc
c001ee39:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee3d:	50                   	push   eax
c001ee3e:	e8 42 f6 ff ff       	call   c001e485 <Vm::inbv(unsigned short)>
c001ee43:	0f b6 c0             	movzx  eax,al
c001ee46:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee49:	eb 3f                	jmp    c001ee8a <Vm::faultHandler(regs*)+0x600>
c001ee4b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee50:	74 07                	je     c001ee59 <Vm::faultHandler(regs*)+0x5cf>
c001ee52:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee56:	ed                   	in     eax,dx
c001ee57:	eb 14                	jmp    c001ee6d <Vm::faultHandler(regs*)+0x5e3>
c001ee59:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ee5c:	66 31 f6             	xor    si,si
c001ee5f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ee62:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee66:	66 ed                	in     ax,dx
c001ee68:	0f b7 c0             	movzx  eax,ax
c001ee6b:	09 f0                	or     eax,esi
c001ee6d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee70:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee74:	e9 84 00 00 00       	jmp    c001eefd <Vm::faultHandler(regs*)+0x673>
c001ee79:	52                   	push   edx
c001ee7a:	52                   	push   edx
c001ee7b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee7f:	50                   	push   eax
c001ee80:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee84:	50                   	push   eax
c001ee85:	e8 0e f6 ff ff       	call   c001e498 <Vm::outbv(unsigned short, unsigned char)>
c001ee8a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee8e:	eb 53                	jmp    c001eee3 <Vm::faultHandler(regs*)+0x659>
c001ee90:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee93:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee97:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee9c:	74 03                	je     c001eea1 <Vm::faultHandler(regs*)+0x617>
c001ee9e:	ef                   	out    dx,eax
c001ee9f:	eb cf                	jmp    c001ee70 <Vm::faultHandler(regs*)+0x5e6>
c001eea1:	66 ef                	out    dx,ax
c001eea3:	eb cb                	jmp    c001ee70 <Vm::faultHandler(regs*)+0x5e6>
c001eea5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001eeac:	83 ec 0c             	sub    esp,0xc
c001eeaf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eeb3:	50                   	push   eax
c001eeb4:	e8 cc f5 ff ff       	call   c001e485 <Vm::inbv(unsigned short)>
c001eeb9:	0f b6 c0             	movzx  eax,al
c001eebc:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001eebf:	eb 1f                	jmp    c001eee0 <Vm::faultHandler(regs*)+0x656>
c001eec1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eec4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eec9:	74 03                	je     c001eece <Vm::faultHandler(regs*)+0x644>
c001eecb:	ed                   	in     eax,dx
c001eecc:	eb 0d                	jmp    c001eedb <Vm::faultHandler(regs*)+0x651>
c001eece:	66 ed                	in     ax,dx
c001eed0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001eed3:	0f b7 c0             	movzx  eax,ax
c001eed6:	66 31 d2             	xor    dx,dx
c001eed9:	09 d0                	or     eax,edx
c001eedb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001eede:	eb 1a                	jmp    c001eefa <Vm::faultHandler(regs*)+0x670>
c001eee0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eee3:	83 c4 10             	add    esp,0x10
c001eee6:	eb 15                	jmp    c001eefd <Vm::faultHandler(regs*)+0x673>
c001eee8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001eeeb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eeee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eef3:	74 03                	je     c001eef8 <Vm::faultHandler(regs*)+0x66e>
c001eef5:	ef                   	out    dx,eax
c001eef6:	eb 02                	jmp    c001eefa <Vm::faultHandler(regs*)+0x670>
c001eef8:	66 ef                	out    dx,ax
c001eefa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eefd:	b0 01                	mov    al,0x1
c001eeff:	eb 56                	jmp    c001ef57 <Vm::faultHandler(regs*)+0x6cd>
c001ef01:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ef05:	50                   	push   eax
c001ef06:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ef0a:	50                   	push   eax
c001ef0b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ef0f:	50                   	push   eax
c001ef10:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ef14:	50                   	push   eax
c001ef15:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef19:	50                   	push   eax
c001ef1a:	52                   	push   edx
c001ef1b:	52                   	push   edx
c001ef1c:	68 bf bd 02 c0       	push   0xc002bdbf
c001ef21:	e8 cf 37 ff ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c001ef26:	83 c4 20             	add    esp,0x20
c001ef29:	83 ec 0c             	sub    esp,0xc
c001ef2c:	6a 60                	push   0x60
c001ef2e:	e8 52 f5 ff ff       	call   c001e485 <Vm::inbv(unsigned short)>
c001ef33:	83 c4 10             	add    esp,0x10
c001ef36:	3c 1c                	cmp    al,0x1c
c001ef38:	74 04                	je     c001ef3e <Vm::faultHandler(regs*)+0x6b4>
c001ef3a:	3c 5a                	cmp    al,0x5a
c001ef3c:	75 eb                	jne    c001ef29 <Vm::faultHandler(regs*)+0x69f>
c001ef3e:	3c 5a                	cmp    al,0x5a
c001ef40:	74 04                	je     c001ef46 <Vm::faultHandler(regs*)+0x6bc>
c001ef42:	3c 1c                	cmp    al,0x1c
c001ef44:	75 0f                	jne    c001ef55 <Vm::faultHandler(regs*)+0x6cb>
c001ef46:	83 ec 0c             	sub    esp,0xc
c001ef49:	6a 60                	push   0x60
c001ef4b:	e8 35 f5 ff ff       	call   c001e485 <Vm::inbv(unsigned short)>
c001ef50:	83 c4 10             	add    esp,0x10
c001ef53:	eb e9                	jmp    c001ef3e <Vm::faultHandler(regs*)+0x6b4>
c001ef55:	31 c0                	xor    eax,eax
c001ef57:	83 c4 1c             	add    esp,0x1c
c001ef5a:	5b                   	pop    ebx
c001ef5b:	5e                   	pop    esi
c001ef5c:	5f                   	pop    edi
c001ef5d:	5d                   	pop    ebp
c001ef5e:	c3                   	ret    

c001ef5f <Vm::fpuInternalTo32(unsigned long long)>:
c001ef5f:	57                   	push   edi
c001ef60:	56                   	push   esi
c001ef61:	53                   	push   ebx
c001ef62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6a:	89 d6                	mov    esi,edx
c001ef6c:	89 d7                	mov    edi,edx
c001ef6e:	89 c1                	mov    ecx,eax
c001ef70:	c1 ef 14             	shr    edi,0x14
c001ef73:	89 d3                	mov    ebx,edx
c001ef75:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef7b:	31 d2                	xor    edx,edx
c001ef7d:	89 f8                	mov    eax,edi
c001ef7f:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef85:	bf ff 00 00 00       	mov    edi,0xff
c001ef8a:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef8f:	83 d2 ff             	adc    edx,0xffffffff
c001ef92:	39 c7                	cmp    edi,eax
c001ef94:	bf 00 00 00 00       	mov    edi,0x0
c001ef99:	19 d7                	sbb    edi,edx
c001ef9b:	72 15                	jb     c001efb2 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef9d:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001efa1:	c1 e0 17             	shl    eax,0x17
c001efa4:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001efaa:	09 f1                	or     ecx,esi
c001efac:	09 c1                	or     ecx,eax
c001efae:	89 cf                	mov    edi,ecx
c001efb0:	eb 02                	jmp    c001efb4 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001efb2:	31 ff                	xor    edi,edi
c001efb4:	89 f8                	mov    eax,edi
c001efb6:	5b                   	pop    ebx
c001efb7:	5e                   	pop    esi
c001efb8:	5f                   	pop    edi
c001efb9:	c3                   	ret    

c001efba <Vm::fpuInternalTo64(unsigned long long)>:
c001efba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efc2:	c3                   	ret    

c001efc3 <Vm::fpu32ToInternal(unsigned int)>:
c001efc3:	57                   	push   edi
c001efc4:	31 ff                	xor    edi,edi
c001efc6:	56                   	push   esi
c001efc7:	53                   	push   ebx
c001efc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001efcc:	89 cb                	mov    ebx,ecx
c001efce:	89 ce                	mov    esi,ecx
c001efd0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001efd6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001efdc:	c1 e9 17             	shr    ecx,0x17
c001efdf:	89 f0                	mov    eax,esi
c001efe1:	0f b6 d1             	movzx  edx,cl
c001efe4:	81 c2 80 03 00 00    	add    edx,0x380
c001efea:	89 d1                	mov    ecx,edx
c001efec:	89 fa                	mov    edx,edi
c001efee:	c1 e1 14             	shl    ecx,0x14
c001eff1:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001eff5:	c1 e0 1d             	shl    eax,0x1d
c001eff8:	89 d7                	mov    edi,edx
c001effa:	89 c6                	mov    esi,eax
c001effc:	89 ca                	mov    edx,ecx
c001effe:	89 f0                	mov    eax,esi
c001f000:	09 fa                	or     edx,edi
c001f002:	09 da                	or     edx,ebx
c001f004:	5b                   	pop    ebx
c001f005:	5e                   	pop    esi
c001f006:	5f                   	pop    edi
c001f007:	c3                   	ret    

c001f008 <Vm::fpu64ToInternal(unsigned long long)>:
c001f008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f00c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f010:	c3                   	ret    

c001f011 <Vm::fpuFloatToLong(unsigned long long)>:
c001f011:	57                   	push   edi
c001f012:	31 c0                	xor    eax,eax
c001f014:	56                   	push   esi
c001f015:	31 d2                	xor    edx,edx
c001f017:	53                   	push   ebx
c001f018:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f01c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f020:	89 d9                	mov    ecx,ebx
c001f022:	c1 e9 14             	shr    ecx,0x14
c001f025:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f02b:	89 cf                	mov    edi,ecx
c001f02d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f033:	78 33                	js     c001f068 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f035:	89 d9                	mov    ecx,ebx
c001f037:	89 f0                	mov    eax,esi
c001f039:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f03f:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f045:	89 ca                	mov    edx,ecx
c001f047:	b9 34 00 00 00       	mov    ecx,0x34
c001f04c:	29 f9                	sub    ecx,edi
c001f04e:	0f ad d0             	shrd   eax,edx,cl
c001f051:	d3 fa                	sar    edx,cl
c001f053:	f6 c1 20             	test   cl,0x20
c001f056:	74 05                	je     c001f05d <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f058:	89 d0                	mov    eax,edx
c001f05a:	c1 fa 1f             	sar    edx,0x1f
c001f05d:	85 db                	test   ebx,ebx
c001f05f:	79 07                	jns    c001f068 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f061:	f7 d8                	neg    eax
c001f063:	83 d2 00             	adc    edx,0x0
c001f066:	f7 da                	neg    edx
c001f068:	5b                   	pop    ebx
c001f069:	5e                   	pop    esi
c001f06a:	5f                   	pop    edi
c001f06b:	c3                   	ret    

c001f06c <Vm::fpuULongToFloat(unsigned long long)>:
c001f06c:	57                   	push   edi
c001f06d:	31 c9                	xor    ecx,ecx
c001f06f:	56                   	push   esi
c001f070:	53                   	push   ebx
c001f071:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f075:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f079:	0f ba e7 14          	bt     edi,0x14
c001f07d:	72 07                	jb     c001f086 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f07f:	01 f6                	add    esi,esi
c001f081:	11 ff                	adc    edi,edi
c001f083:	41                   	inc    ecx
c001f084:	eb f3                	jmp    c001f079 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f086:	89 fa                	mov    edx,edi
c001f088:	89 f0                	mov    eax,esi
c001f08a:	bb 33 04 00 00       	mov    ebx,0x433
c001f08f:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f095:	29 cb                	sub    ebx,ecx
c001f097:	89 d9                	mov    ecx,ebx
c001f099:	5b                   	pop    ebx
c001f09a:	c1 e1 14             	shl    ecx,0x14
c001f09d:	5e                   	pop    esi
c001f09e:	09 ca                	or     edx,ecx
c001f0a0:	5f                   	pop    edi
c001f0a1:	c3                   	ret    

c001f0a2 <Vm::fpuLongToFloat(long long)>:
c001f0a2:	56                   	push   esi
c001f0a3:	31 c0                	xor    eax,eax
c001f0a5:	53                   	push   ebx
c001f0a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f0aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f0ae:	39 c8                	cmp    eax,ecx
c001f0b0:	19 d8                	sbb    eax,ebx
c001f0b2:	7d 04                	jge    c001f0b8 <Vm::fpuLongToFloat(long long)+0x16>
c001f0b4:	31 f6                	xor    esi,esi
c001f0b6:	eb 0c                	jmp    c001f0c4 <Vm::fpuLongToFloat(long long)+0x22>
c001f0b8:	f7 d9                	neg    ecx
c001f0ba:	be 01 00 00 00       	mov    esi,0x1
c001f0bf:	83 d3 00             	adc    ebx,0x0
c001f0c2:	f7 db                	neg    ebx
c001f0c4:	31 c0                	xor    eax,eax
c001f0c6:	0f ba e3 14          	bt     ebx,0x14
c001f0ca:	72 07                	jb     c001f0d3 <Vm::fpuLongToFloat(long long)+0x31>
c001f0cc:	01 c9                	add    ecx,ecx
c001f0ce:	11 db                	adc    ebx,ebx
c001f0d0:	40                   	inc    eax
c001f0d1:	eb f3                	jmp    c001f0c6 <Vm::fpuLongToFloat(long long)+0x24>
c001f0d3:	ba 33 04 00 00       	mov    edx,0x433
c001f0d8:	29 c2                	sub    edx,eax
c001f0da:	89 c8                	mov    eax,ecx
c001f0dc:	c1 e2 14             	shl    edx,0x14
c001f0df:	89 d9                	mov    ecx,ebx
c001f0e1:	89 f3                	mov    ebx,esi
c001f0e3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f0e9:	09 ca                	or     edx,ecx
c001f0eb:	84 db                	test   bl,bl
c001f0ed:	74 06                	je     c001f0f5 <Vm::fpuLongToFloat(long long)+0x53>
c001f0ef:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f0f5:	5b                   	pop    ebx
c001f0f6:	5e                   	pop    esi
c001f0f7:	c3                   	ret    

c001f0f8 <Vm::fpuGet0()>:
c001f0f8:	31 c0                	xor    eax,eax
c001f0fa:	31 d2                	xor    edx,edx
c001f0fc:	c3                   	ret    

c001f0fd <Vm::fpuGet1()>:
c001f0fd:	b8 01 00 00 00       	mov    eax,0x1
c001f102:	31 d2                	xor    edx,edx
c001f104:	c3                   	ret    

c001f105 <Vm::fpuGetPi()>:
c001f105:	b8 03 00 00 00       	mov    eax,0x3
c001f10a:	31 d2                	xor    edx,edx
c001f10c:	c3                   	ret    

c001f10d <Vm::fpuGetLog2E()>:
c001f10d:	83 ec 18             	sub    esp,0x18
c001f110:	68 1c be 02 c0       	push   0xc002be1c
c001f115:	e8 47 ad ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001f11a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f11f:	31 d2                	xor    edx,edx
c001f121:	83 c4 1c             	add    esp,0x1c
c001f124:	c3                   	ret    

c001f125 <Vm::fpuGetLogE2()>:
c001f125:	83 ec 18             	sub    esp,0x18
c001f128:	68 28 be 02 c0       	push   0xc002be28
c001f12d:	e8 2f ad ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001f132:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f137:	31 d2                	xor    edx,edx
c001f139:	83 c4 1c             	add    esp,0x1c
c001f13c:	c3                   	ret    

c001f13d <Vm::fpuGetLog210()>:
c001f13d:	83 ec 18             	sub    esp,0x18
c001f140:	68 34 be 02 c0       	push   0xc002be34
c001f145:	e8 17 ad ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001f14a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f14f:	31 d2                	xor    edx,edx
c001f151:	83 c4 1c             	add    esp,0x1c
c001f154:	c3                   	ret    

c001f155 <Vm::fpuGetLog102()>:
c001f155:	83 ec 18             	sub    esp,0x18
c001f158:	68 41 be 02 c0       	push   0xc002be41
c001f15d:	e8 ff ac ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001f162:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f167:	31 d2                	xor    edx,edx
c001f169:	83 c4 1c             	add    esp,0x1c
c001f16c:	c3                   	ret    

c001f16d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f16d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f171:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f175:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f179:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f17d:	0f 92 c0             	setb   al
c001f180:	c3                   	ret    

c001f181 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f181:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f189:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f18d:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f191:	09 c2                	or     edx,eax
c001f193:	0f 94 c0             	sete   al
c001f196:	c3                   	ret    

c001f197 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f197:	57                   	push   edi
c001f198:	56                   	push   esi
c001f199:	53                   	push   ebx
c001f19a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f19e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1a2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f1a6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f1aa:	57                   	push   edi
c001f1ab:	56                   	push   esi
c001f1ac:	53                   	push   ebx
c001f1ad:	51                   	push   ecx
c001f1ae:	e8 ce ff ff ff       	call   c001f181 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	88 c2                	mov    dl,al
c001f1b8:	31 c0                	xor    eax,eax
c001f1ba:	84 d2                	test   dl,dl
c001f1bc:	75 0c                	jne    c001f1ca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f1be:	57                   	push   edi
c001f1bf:	56                   	push   esi
c001f1c0:	53                   	push   ebx
c001f1c1:	51                   	push   ecx
c001f1c2:	e8 a6 ff ff ff       	call   c001f16d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f1c7:	83 c4 10             	add    esp,0x10
c001f1ca:	83 e0 01             	and    eax,0x1
c001f1cd:	5b                   	pop    ebx
c001f1ce:	88 c1                	mov    cl,al
c001f1d0:	83 e2 01             	and    edx,0x1
c001f1d3:	a0 c1 0f 03 c0       	mov    al,ds:0xc0030fc1
c001f1d8:	c1 e2 06             	shl    edx,0x6
c001f1db:	83 e0 ba             	and    eax,0xffffffba
c001f1de:	5e                   	pop    esi
c001f1df:	09 c8                	or     eax,ecx
c001f1e1:	5f                   	pop    edi
c001f1e2:	09 d0                	or     eax,edx
c001f1e4:	a2 c1 0f 03 c0       	mov    ds:0xc0030fc1,al
c001f1e9:	c3                   	ret    

c001f1ea <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f1ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1f2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f1f6:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f1fa:	c3                   	ret    

c001f1fb <Vm::fpuAbs(unsigned long long)>:
c001f1fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f203:	c3                   	ret    

c001f204 <Vm::fpuChs(unsigned long long)>:
c001f204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f208:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f20c:	f7 d8                	neg    eax
c001f20e:	83 d2 00             	adc    edx,0x0
c001f211:	f7 da                	neg    edx
c001f213:	c3                   	ret    

c001f214 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f214:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f218:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f21d:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f221:	eb c7                	jmp    c001f1ea <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f223 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f223:	53                   	push   ebx
c001f224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f228:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f22c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f230:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f234:	0f af ca             	imul   ecx,edx
c001f237:	0f af d8             	imul   ebx,eax
c001f23a:	f7 e2                	mul    edx
c001f23c:	01 d9                	add    ecx,ebx
c001f23e:	5b                   	pop    ebx
c001f23f:	01 ca                	add    edx,ecx
c001f241:	c3                   	ret    

c001f242 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f242:	83 ec 0c             	sub    esp,0xc
c001f245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f249:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f255:	e8 da 74 00 00       	call   c0026734 <__udivdi3>
c001f25a:	83 c4 1c             	add    esp,0x1c
c001f25d:	c3                   	ret    

c001f25e <Vm::fpuSquare(unsigned long long)>:
c001f25e:	50                   	push   eax
c001f25f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f263:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f267:	52                   	push   edx
c001f268:	50                   	push   eax
c001f269:	52                   	push   edx
c001f26a:	50                   	push   eax
c001f26b:	e8 b3 ff ff ff       	call   c001f223 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f270:	83 c4 14             	add    esp,0x14
c001f273:	c3                   	ret    

c001f274 <Vm::fpuGetReg(int)>:
c001f274:	83 ec 0c             	sub    esp,0xc
c001f277:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f27c:	76 10                	jbe    c001f28e <Vm::fpuGetReg(int)+0x1a>
c001f27e:	83 ec 0c             	sub    esp,0xc
c001f281:	68 4e be 02 c0       	push   0xc002be4e
c001f286:	e8 d6 ab ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001f28b:	83 c4 10             	add    esp,0x10
c001f28e:	a0 c1 0f 03 c0       	mov    al,ds:0xc0030fc1
c001f293:	b9 08 00 00 00       	mov    ecx,0x8
c001f298:	c0 e8 03             	shr    al,0x3
c001f29b:	83 e0 07             	and    eax,0x7
c001f29e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2a2:	99                   	cdq    
c001f2a3:	f7 f9                	idiv   ecx
c001f2a5:	8b 04 d5 c4 0f 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf03c]
c001f2ac:	8b 14 d5 c8 0f 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf038]
c001f2b3:	83 c4 0c             	add    esp,0xc
c001f2b6:	c3                   	ret    

c001f2b7 <Vm::fpuSetReg(int, unsigned long long)>:
c001f2b7:	57                   	push   edi
c001f2b8:	56                   	push   esi
c001f2b9:	52                   	push   edx
c001f2ba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f2be:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f2c2:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f2c7:	76 10                	jbe    c001f2d9 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f2c9:	83 ec 0c             	sub    esp,0xc
c001f2cc:	68 61 be 02 c0       	push   0xc002be61
c001f2d1:	e8 8b ab ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c001f2d6:	83 c4 10             	add    esp,0x10
c001f2d9:	a0 c1 0f 03 c0       	mov    al,ds:0xc0030fc1
c001f2de:	b9 08 00 00 00       	mov    ecx,0x8
c001f2e3:	c0 e8 03             	shr    al,0x3
c001f2e6:	83 e0 07             	and    eax,0x7
c001f2e9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2ed:	99                   	cdq    
c001f2ee:	f7 f9                	idiv   ecx
c001f2f0:	89 34 d5 c4 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf03c],esi
c001f2f7:	89 3c d5 c8 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf038],edi
c001f2fe:	58                   	pop    eax
c001f2ff:	5e                   	pop    esi
c001f300:	5f                   	pop    edi
c001f301:	c3                   	ret    

c001f302 <Vm::fpuPush(unsigned long long)>:
c001f302:	a0 c1 0f 03 c0       	mov    al,ds:0xc0030fc1
c001f307:	c0 e8 03             	shr    al,0x3
c001f30a:	83 e0 07             	and    eax,0x7
c001f30d:	83 c0 07             	add    eax,0x7
c001f310:	88 c2                	mov    dl,al
c001f312:	83 e0 07             	and    eax,0x7
c001f315:	83 e2 07             	and    edx,0x7
c001f318:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f31f:	8a 15 c1 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030fc1
c001f325:	83 e2 c7             	and    edx,0xffffffc7
c001f328:	09 ca                	or     edx,ecx
c001f32a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f32e:	88 15 c1 0f 03 c0    	mov    BYTE PTR ds:0xc0030fc1,dl
c001f334:	89 0c c5 c8 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf038],ecx
c001f33b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f33f:	89 14 c5 c4 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf03c],edx
c001f346:	a1 04 10 03 c0       	mov    eax,ds:0xc0031004
c001f34b:	83 f8 08             	cmp    eax,0x8
c001f34e:	75 08                	jne    c001f358 <Vm::fpuPush(unsigned long long)+0x56>
c001f350:	80 0d c0 0f 03 c0 40 	or     BYTE PTR ds:0xc0030fc0,0x40
c001f357:	c3                   	ret    
c001f358:	40                   	inc    eax
c001f359:	a3 04 10 03 c0       	mov    ds:0xc0031004,eax
c001f35e:	c3                   	ret    

c001f35f <Vm::fpuPop()>:
c001f35f:	8a 0d c1 0f 03 c0    	mov    cl,BYTE PTR ds:0xc0030fc1
c001f365:	53                   	push   ebx
c001f366:	c0 e9 03             	shr    cl,0x3
c001f369:	8a 1d c1 0f 03 c0    	mov    bl,BYTE PTR ds:0xc0030fc1
c001f36f:	83 e1 07             	and    ecx,0x7
c001f372:	83 e3 c7             	and    ebx,0xffffffc7
c001f375:	8b 04 cd c4 0f 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf03c]
c001f37c:	8b 14 cd c8 0f 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf038]
c001f383:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f38a:	83 e1 38             	and    ecx,0x38
c001f38d:	09 d9                	or     ecx,ebx
c001f38f:	88 0d c1 0f 03 c0    	mov    BYTE PTR ds:0xc0030fc1,cl
c001f395:	8b 0d 04 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031004
c001f39b:	85 c9                	test   ecx,ecx
c001f39d:	74 09                	je     c001f3a8 <Vm::fpuPop()+0x49>
c001f39f:	49                   	dec    ecx
c001f3a0:	89 0d 04 10 03 c0    	mov    DWORD PTR ds:0xc0031004,ecx
c001f3a6:	eb 07                	jmp    c001f3af <Vm::fpuPop()+0x50>
c001f3a8:	80 0d c0 0f 03 c0 40 	or     BYTE PTR ds:0xc0030fc0,0x40
c001f3af:	5b                   	pop    ebx
c001f3b0:	c3                   	ret    

c001f3b1 <Vm::x87Handler(regs*)>:
c001f3b1:	55                   	push   ebp
c001f3b2:	57                   	push   edi
c001f3b3:	56                   	push   esi
c001f3b4:	53                   	push   ebx
c001f3b5:	83 ec 1c             	sub    esp,0x1c
c001f3b8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f3bc:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f3c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f3c4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f3cc:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f3d0:	50                   	push   eax
c001f3d1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f3d5:	50                   	push   eax
c001f3d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f3da:	50                   	push   eax
c001f3db:	53                   	push   ebx
c001f3dc:	e8 99 a1 ff ff       	call   c001957a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f3e1:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f3e4:	83 c4 10             	add    esp,0x10
c001f3e7:	89 c6                	mov    esi,eax
c001f3e9:	80 fa d9             	cmp    dl,0xd9
c001f3ec:	0f 85 52 01 00 00    	jne    c001f544 <Vm::x87Handler(regs*)+0x193>
c001f3f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3f6:	8d 50 20             	lea    edx,[eax+0x20]
c001f3f9:	80 fa 0e             	cmp    dl,0xe
c001f3fc:	0f 87 86 00 00 00    	ja     c001f488 <Vm::x87Handler(regs*)+0xd7>
c001f402:	0f b6 d2             	movzx  edx,dl
c001f405:	ff 24 95 74 be 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd418c]
c001f40c:	e8 e7 fc ff ff       	call   c001f0f8 <Vm::fpuGet0()>
c001f411:	eb 05                	jmp    c001f418 <Vm::x87Handler(regs*)+0x67>
c001f413:	e8 e5 fc ff ff       	call   c001f0fd <Vm::fpuGet1()>
c001f418:	57                   	push   edi
c001f419:	57                   	push   edi
c001f41a:	52                   	push   edx
c001f41b:	50                   	push   eax
c001f41c:	e8 e1 fe ff ff       	call   c001f302 <Vm::fpuPush(unsigned long long)>
c001f421:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f425:	83 c4 10             	add    esp,0x10
c001f428:	b0 01                	mov    al,0x1
c001f42a:	e9 e3 09 00 00       	jmp    c001fe12 <Vm::x87Handler(regs*)+0xa61>
c001f42f:	83 ec 0c             	sub    esp,0xc
c001f432:	6a 00                	push   0x0
c001f434:	e8 3b fe ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f439:	59                   	pop    ecx
c001f43a:	5e                   	pop    esi
c001f43b:	52                   	push   edx
c001f43c:	50                   	push   eax
c001f43d:	e8 c2 fd ff ff       	call   c001f204 <Vm::fpuChs(unsigned long long)>
c001f442:	eb 13                	jmp    c001f457 <Vm::x87Handler(regs*)+0xa6>
c001f444:	83 ec 0c             	sub    esp,0xc
c001f447:	6a 00                	push   0x0
c001f449:	e8 26 fe ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f44e:	5f                   	pop    edi
c001f44f:	5d                   	pop    ebp
c001f450:	52                   	push   edx
c001f451:	50                   	push   eax
c001f452:	e8 a4 fd ff ff       	call   c001f1fb <Vm::fpuAbs(unsigned long long)>
c001f457:	83 c4 0c             	add    esp,0xc
c001f45a:	52                   	push   edx
c001f45b:	50                   	push   eax
c001f45c:	6a 00                	push   0x0
c001f45e:	e8 54 fe ff ff       	call   c001f2b7 <Vm::fpuSetReg(int, unsigned long long)>
c001f463:	eb bc                	jmp    c001f421 <Vm::x87Handler(regs*)+0x70>
c001f465:	e8 d3 fc ff ff       	call   c001f13d <Vm::fpuGetLog210()>
c001f46a:	eb ac                	jmp    c001f418 <Vm::x87Handler(regs*)+0x67>
c001f46c:	e8 9c fc ff ff       	call   c001f10d <Vm::fpuGetLog2E()>
c001f471:	eb a5                	jmp    c001f418 <Vm::x87Handler(regs*)+0x67>
c001f473:	e8 8d fc ff ff       	call   c001f105 <Vm::fpuGetPi()>
c001f478:	eb 9e                	jmp    c001f418 <Vm::x87Handler(regs*)+0x67>
c001f47a:	e8 d6 fc ff ff       	call   c001f155 <Vm::fpuGetLog102()>
c001f47f:	eb 97                	jmp    c001f418 <Vm::x87Handler(regs*)+0x67>
c001f481:	e8 9f fc ff ff       	call   c001f125 <Vm::fpuGetLogE2()>
c001f486:	eb 90                	jmp    c001f418 <Vm::x87Handler(regs*)+0x67>
c001f488:	8d 50 40             	lea    edx,[eax+0x40]
c001f48b:	80 fa 07             	cmp    dl,0x7
c001f48e:	77 15                	ja     c001f4a5 <Vm::x87Handler(regs*)+0xf4>
c001f490:	83 ec 0c             	sub    esp,0xc
c001f493:	2d c0 00 00 00       	sub    eax,0xc0
c001f498:	50                   	push   eax
c001f499:	e8 d6 fd ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f49e:	59                   	pop    ecx
c001f49f:	5e                   	pop    esi
c001f4a0:	e9 75 ff ff ff       	jmp    c001f41a <Vm::x87Handler(regs*)+0x69>
c001f4a5:	8d 50 38             	lea    edx,[eax+0x38]
c001f4a8:	80 fa 07             	cmp    dl,0x7
c001f4ab:	77 3c                	ja     c001f4e9 <Vm::x87Handler(regs*)+0x138>
c001f4ad:	83 ec 0c             	sub    esp,0xc
c001f4b0:	2d c8 00 00 00       	sub    eax,0xc8
c001f4b5:	50                   	push   eax
c001f4b6:	e8 b9 fd ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f4bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4c2:	89 c6                	mov    esi,eax
c001f4c4:	89 d7                	mov    edi,edx
c001f4c6:	e8 a9 fd ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f4cb:	83 c4 0c             	add    esp,0xc
c001f4ce:	52                   	push   edx
c001f4cf:	50                   	push   eax
c001f4d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4d4:	2d c8 00 00 00       	sub    eax,0xc8
c001f4d9:	50                   	push   eax
c001f4da:	e8 d8 fd ff ff       	call   c001f2b7 <Vm::fpuSetReg(int, unsigned long long)>
c001f4df:	83 c4 0c             	add    esp,0xc
c001f4e2:	57                   	push   edi
c001f4e3:	56                   	push   esi
c001f4e4:	e9 73 ff ff ff       	jmp    c001f45c <Vm::x87Handler(regs*)+0xab>
c001f4e9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4ed:	84 d2                	test   dl,dl
c001f4ef:	75 0f                	jne    c001f500 <Vm::x87Handler(regs*)+0x14f>
c001f4f1:	83 ec 0c             	sub    esp,0xc
c001f4f4:	ff 36                	push   DWORD PTR [esi]
c001f4f6:	e8 c8 fa ff ff       	call   c001efc3 <Vm::fpu32ToInternal(unsigned int)>
c001f4fb:	e9 bf 00 00 00       	jmp    c001f5bf <Vm::x87Handler(regs*)+0x20e>
c001f500:	80 fa 03             	cmp    dl,0x3
c001f503:	75 13                	jne    c001f518 <Vm::x87Handler(regs*)+0x167>
c001f505:	e8 55 fe ff ff       	call   c001f35f <Vm::fpuPop()>
c001f50a:	55                   	push   ebp
c001f50b:	55                   	push   ebp
c001f50c:	52                   	push   edx
c001f50d:	50                   	push   eax
c001f50e:	e8 4c fa ff ff       	call   c001ef5f <Vm::fpuInternalTo32(unsigned long long)>
c001f513:	e9 88 00 00 00       	jmp    c001f5a0 <Vm::x87Handler(regs*)+0x1ef>
c001f518:	80 fa 05             	cmp    dl,0x5
c001f51b:	75 0e                	jne    c001f52b <Vm::x87Handler(regs*)+0x17a>
c001f51d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f520:	66 a3 c2 0f 03 c0    	mov    ds:0xc0030fc2,ax
c001f526:	e9 df 00 00 00       	jmp    c001f60a <Vm::x87Handler(regs*)+0x259>
c001f52b:	31 c0                	xor    eax,eax
c001f52d:	80 fa 07             	cmp    dl,0x7
c001f530:	0f 85 dc 08 00 00    	jne    c001fe12 <Vm::x87Handler(regs*)+0xa61>
c001f536:	66 a1 c2 0f 03 c0    	mov    ax,ds:0xc0030fc2
c001f53c:	66 89 06             	mov    WORD PTR [esi],ax
c001f53f:	e9 c6 00 00 00       	jmp    c001f60a <Vm::x87Handler(regs*)+0x259>
c001f544:	80 fa d8             	cmp    dl,0xd8
c001f547:	0f 84 c9 00 00 00    	je     c001f616 <Vm::x87Handler(regs*)+0x265>
c001f54d:	80 fa dc             	cmp    dl,0xdc
c001f550:	0f 84 0d 02 00 00    	je     c001f763 <Vm::x87Handler(regs*)+0x3b2>
c001f556:	80 fa de             	cmp    dl,0xde
c001f559:	0f 84 cd 02 00 00    	je     c001f82c <Vm::x87Handler(regs*)+0x47b>
c001f55f:	80 fa dd             	cmp    dl,0xdd
c001f562:	0f 84 5f 04 00 00    	je     c001f9c7 <Vm::x87Handler(regs*)+0x616>
c001f568:	80 fa da             	cmp    dl,0xda
c001f56b:	0f 84 24 05 00 00    	je     c001fa95 <Vm::x87Handler(regs*)+0x6e4>
c001f571:	80 fa df             	cmp    dl,0xdf
c001f574:	0f 84 68 05 00 00    	je     c001fae2 <Vm::x87Handler(regs*)+0x731>
c001f57a:	31 c0                	xor    eax,eax
c001f57c:	80 fa db             	cmp    dl,0xdb
c001f57f:	0f 85 8d 08 00 00    	jne    c001fe12 <Vm::x87Handler(regs*)+0xa61>
c001f585:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f589:	80 fa 03             	cmp    dl,0x3
c001f58c:	0f 85 70 06 00 00    	jne    c001fc02 <Vm::x87Handler(regs*)+0x851>
c001f592:	e8 c8 fd ff ff       	call   c001f35f <Vm::fpuPop()>
c001f597:	55                   	push   ebp
c001f598:	55                   	push   ebp
c001f599:	52                   	push   edx
c001f59a:	50                   	push   eax
c001f59b:	e8 71 fa ff ff       	call   c001f011 <Vm::fpuFloatToLong(unsigned long long)>
c001f5a0:	83 c4 10             	add    esp,0x10
c001f5a3:	89 06                	mov    DWORD PTR [esi],eax
c001f5a5:	eb 63                	jmp    c001f60a <Vm::x87Handler(regs*)+0x259>
c001f5a7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f5ab:	84 d2                	test   dl,dl
c001f5ad:	0f 85 e6 05 00 00    	jne    c001fb99 <Vm::x87Handler(regs*)+0x7e8>
c001f5b3:	57                   	push   edi
c001f5b4:	57                   	push   edi
c001f5b5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5b8:	ff 36                	push   DWORD PTR [esi]
c001f5ba:	e8 49 fa ff ff       	call   c001f008 <Vm::fpu64ToInternal(unsigned long long)>
c001f5bf:	5e                   	pop    esi
c001f5c0:	5f                   	pop    edi
c001f5c1:	52                   	push   edx
c001f5c2:	50                   	push   eax
c001f5c3:	e8 3a fd ff ff       	call   c001f302 <Vm::fpuPush(unsigned long long)>
c001f5c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5cc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5cf:	e9 51 fe ff ff       	jmp    c001f425 <Vm::x87Handler(regs*)+0x74>
c001f5d4:	80 fa 03             	cmp    dl,0x3
c001f5d7:	0f 85 d7 06 00 00    	jne    c001fcb4 <Vm::x87Handler(regs*)+0x903>
c001f5dd:	57                   	push   edi
c001f5de:	57                   	push   edi
c001f5df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5e2:	ff 36                	push   DWORD PTR [esi]
c001f5e4:	e8 1f fa ff ff       	call   c001f008 <Vm::fpu64ToInternal(unsigned long long)>
c001f5e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5f0:	89 c6                	mov    esi,eax
c001f5f2:	89 d7                	mov    edi,edx
c001f5f4:	e8 7b fc ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f5f9:	57                   	push   edi
c001f5fa:	56                   	push   esi
c001f5fb:	52                   	push   edx
c001f5fc:	50                   	push   eax
c001f5fd:	e8 95 fb ff ff       	call   c001f197 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f602:	83 c4 20             	add    esp,0x20
c001f605:	e8 55 fd ff ff       	call   c001f35f <Vm::fpuPop()>
c001f60a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f60e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f611:	e9 12 fe ff ff       	jmp    c001f428 <Vm::x87Handler(regs*)+0x77>
c001f616:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f61a:	8d 50 40             	lea    edx,[eax+0x40]
c001f61d:	80 fa 07             	cmp    dl,0x7
c001f620:	77 29                	ja     c001f64b <Vm::x87Handler(regs*)+0x29a>
c001f622:	83 ec 0c             	sub    esp,0xc
c001f625:	2d c0 00 00 00       	sub    eax,0xc0
c001f62a:	50                   	push   eax
c001f62b:	e8 44 fc ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f630:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f637:	89 c6                	mov    esi,eax
c001f639:	89 d7                	mov    edi,edx
c001f63b:	e8 34 fc ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f640:	57                   	push   edi
c001f641:	56                   	push   esi
c001f642:	52                   	push   edx
c001f643:	50                   	push   eax
c001f644:	e8 a1 fb ff ff       	call   c001f1ea <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f649:	eb 2f                	jmp    c001f67a <Vm::x87Handler(regs*)+0x2c9>
c001f64b:	8d 50 38             	lea    edx,[eax+0x38]
c001f64e:	80 fa 07             	cmp    dl,0x7
c001f651:	77 2f                	ja     c001f682 <Vm::x87Handler(regs*)+0x2d1>
c001f653:	83 ec 0c             	sub    esp,0xc
c001f656:	2d c8 00 00 00       	sub    eax,0xc8
c001f65b:	50                   	push   eax
c001f65c:	e8 13 fc ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f661:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f668:	89 c6                	mov    esi,eax
c001f66a:	89 d7                	mov    edi,edx
c001f66c:	e8 03 fc ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f671:	57                   	push   edi
c001f672:	56                   	push   esi
c001f673:	52                   	push   edx
c001f674:	50                   	push   eax
c001f675:	e8 a9 fb ff ff       	call   c001f223 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f67a:	83 c4 1c             	add    esp,0x1c
c001f67d:	e9 d8 fd ff ff       	jmp    c001f45a <Vm::x87Handler(regs*)+0xa9>
c001f682:	8d 50 30             	lea    edx,[eax+0x30]
c001f685:	80 fa 07             	cmp    dl,0x7
c001f688:	77 0d                	ja     c001f697 <Vm::x87Handler(regs*)+0x2e6>
c001f68a:	83 ec 0c             	sub    esp,0xc
c001f68d:	2d d0 00 00 00       	sub    eax,0xd0
c001f692:	e9 99 03 00 00       	jmp    c001fa30 <Vm::x87Handler(regs*)+0x67f>
c001f697:	8d 50 28             	lea    edx,[eax+0x28]
c001f69a:	80 fa 07             	cmp    dl,0x7
c001f69d:	77 0d                	ja     c001f6ac <Vm::x87Handler(regs*)+0x2fb>
c001f69f:	83 ec 0c             	sub    esp,0xc
c001f6a2:	2d d8 00 00 00       	sub    eax,0xd8
c001f6a7:	e9 c0 03 00 00       	jmp    c001fa6c <Vm::x87Handler(regs*)+0x6bb>
c001f6ac:	8d 50 20             	lea    edx,[eax+0x20]
c001f6af:	80 fa 07             	cmp    dl,0x7
c001f6b2:	77 1b                	ja     c001f6cf <Vm::x87Handler(regs*)+0x31e>
c001f6b4:	83 ec 0c             	sub    esp,0xc
c001f6b7:	2d e0 00 00 00       	sub    eax,0xe0
c001f6bc:	50                   	push   eax
c001f6bd:	e8 b2 fb ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f6c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6c9:	89 c6                	mov    esi,eax
c001f6cb:	89 d7                	mov    edi,edx
c001f6cd:	eb 22                	jmp    c001f6f1 <Vm::x87Handler(regs*)+0x340>
c001f6cf:	8d 50 18             	lea    edx,[eax+0x18]
c001f6d2:	80 fa 07             	cmp    dl,0x7
c001f6d5:	77 2d                	ja     c001f704 <Vm::x87Handler(regs*)+0x353>
c001f6d7:	83 ec 0c             	sub    esp,0xc
c001f6da:	6a 00                	push   0x0
c001f6dc:	e8 93 fb ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f6e1:	89 c6                	mov    esi,eax
c001f6e3:	89 d7                	mov    edi,edx
c001f6e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6e9:	2d e8 00 00 00       	sub    eax,0xe8
c001f6ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6f1:	e8 7e fb ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f6f6:	57                   	push   edi
c001f6f7:	56                   	push   esi
c001f6f8:	52                   	push   edx
c001f6f9:	50                   	push   eax
c001f6fa:	e8 15 fb ff ff       	call   c001f214 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6ff:	e9 76 ff ff ff       	jmp    c001f67a <Vm::x87Handler(regs*)+0x2c9>
c001f704:	8d 50 10             	lea    edx,[eax+0x10]
c001f707:	80 fa 07             	cmp    dl,0x7
c001f70a:	77 1b                	ja     c001f727 <Vm::x87Handler(regs*)+0x376>
c001f70c:	83 ec 0c             	sub    esp,0xc
c001f70f:	2d f0 00 00 00       	sub    eax,0xf0
c001f714:	50                   	push   eax
c001f715:	e8 5a fb ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f71a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f721:	89 c6                	mov    esi,eax
c001f723:	89 d7                	mov    edi,edx
c001f725:	eb 22                	jmp    c001f749 <Vm::x87Handler(regs*)+0x398>
c001f727:	3c f7                	cmp    al,0xf7
c001f729:	0f 86 d1 03 00 00    	jbe    c001fb00 <Vm::x87Handler(regs*)+0x74f>
c001f72f:	83 ec 0c             	sub    esp,0xc
c001f732:	6a 00                	push   0x0
c001f734:	e8 3b fb ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f739:	89 c6                	mov    esi,eax
c001f73b:	89 d7                	mov    edi,edx
c001f73d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f741:	2d f8 00 00 00       	sub    eax,0xf8
c001f746:	89 04 24             	mov    DWORD PTR [esp],eax
c001f749:	e8 26 fb ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f74e:	57                   	push   edi
c001f74f:	56                   	push   esi
c001f750:	52                   	push   edx
c001f751:	50                   	push   eax
c001f752:	e8 eb fa ff ff       	call   c001f242 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f757:	83 c4 1c             	add    esp,0x1c
c001f75a:	52                   	push   edx
c001f75b:	50                   	push   eax
c001f75c:	6a 00                	push   0x0
c001f75e:	e9 51 02 00 00       	jmp    c001f9b4 <Vm::x87Handler(regs*)+0x603>
c001f763:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f767:	8d 50 40             	lea    edx,[eax+0x40]
c001f76a:	80 fa 07             	cmp    dl,0x7
c001f76d:	77 37                	ja     c001f7a6 <Vm::x87Handler(regs*)+0x3f5>
c001f76f:	83 ec 0c             	sub    esp,0xc
c001f772:	2d c0 00 00 00       	sub    eax,0xc0
c001f777:	50                   	push   eax
c001f778:	e8 f7 fa ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f77d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f784:	89 c6                	mov    esi,eax
c001f786:	89 d7                	mov    edi,edx
c001f788:	e8 e7 fa ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f78d:	57                   	push   edi
c001f78e:	56                   	push   esi
c001f78f:	52                   	push   edx
c001f790:	50                   	push   eax
c001f791:	e8 54 fa ff ff       	call   c001f1ea <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f796:	83 c4 1c             	add    esp,0x1c
c001f799:	52                   	push   edx
c001f79a:	50                   	push   eax
c001f79b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f79f:	2d c0 00 00 00       	sub    eax,0xc0
c001f7a4:	eb 3d                	jmp    c001f7e3 <Vm::x87Handler(regs*)+0x432>
c001f7a6:	8d 50 38             	lea    edx,[eax+0x38]
c001f7a9:	80 fa 07             	cmp    dl,0x7
c001f7ac:	77 3b                	ja     c001f7e9 <Vm::x87Handler(regs*)+0x438>
c001f7ae:	83 ec 0c             	sub    esp,0xc
c001f7b1:	2d c8 00 00 00       	sub    eax,0xc8
c001f7b6:	50                   	push   eax
c001f7b7:	e8 b8 fa ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f7bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7c3:	89 c6                	mov    esi,eax
c001f7c5:	89 d7                	mov    edi,edx
c001f7c7:	e8 a8 fa ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f7cc:	57                   	push   edi
c001f7cd:	56                   	push   esi
c001f7ce:	52                   	push   edx
c001f7cf:	50                   	push   eax
c001f7d0:	e8 4e fa ff ff       	call   c001f223 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7d5:	83 c4 1c             	add    esp,0x1c
c001f7d8:	52                   	push   edx
c001f7d9:	50                   	push   eax
c001f7da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7de:	2d c8 00 00 00       	sub    eax,0xc8
c001f7e3:	50                   	push   eax
c001f7e4:	e9 75 fc ff ff       	jmp    c001f45e <Vm::x87Handler(regs*)+0xad>
c001f7e9:	83 c0 18             	add    eax,0x18
c001f7ec:	3c 07                	cmp    al,0x7
c001f7ee:	0f 87 3b 04 00 00    	ja     c001fc2f <Vm::x87Handler(regs*)+0x87e>
c001f7f4:	83 ec 0c             	sub    esp,0xc
c001f7f7:	6a 00                	push   0x0
c001f7f9:	e8 76 fa ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f7fe:	89 c6                	mov    esi,eax
c001f800:	89 d7                	mov    edi,edx
c001f802:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f806:	2d e8 00 00 00       	sub    eax,0xe8
c001f80b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f80e:	e8 61 fa ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f813:	57                   	push   edi
c001f814:	56                   	push   esi
c001f815:	52                   	push   edx
c001f816:	50                   	push   eax
c001f817:	e8 f8 f9 ff ff       	call   c001f214 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f81c:	83 c4 1c             	add    esp,0x1c
c001f81f:	52                   	push   edx
c001f820:	50                   	push   eax
c001f821:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f825:	2d e8 00 00 00       	sub    eax,0xe8
c001f82a:	eb b7                	jmp    c001f7e3 <Vm::x87Handler(regs*)+0x432>
c001f82c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f830:	8d 50 40             	lea    edx,[eax+0x40]
c001f833:	80 fa 07             	cmp    dl,0x7
c001f836:	77 3a                	ja     c001f872 <Vm::x87Handler(regs*)+0x4c1>
c001f838:	83 ec 0c             	sub    esp,0xc
c001f83b:	2d c0 00 00 00       	sub    eax,0xc0
c001f840:	50                   	push   eax
c001f841:	e8 2e fa ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f846:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f84d:	89 c6                	mov    esi,eax
c001f84f:	89 d7                	mov    edi,edx
c001f851:	e8 1e fa ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f856:	57                   	push   edi
c001f857:	56                   	push   esi
c001f858:	52                   	push   edx
c001f859:	50                   	push   eax
c001f85a:	e8 8b f9 ff ff       	call   c001f1ea <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f85f:	83 c4 1c             	add    esp,0x1c
c001f862:	52                   	push   edx
c001f863:	50                   	push   eax
c001f864:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f868:	2d c0 00 00 00       	sub    eax,0xc0
c001f86d:	e9 9e 01 00 00       	jmp    c001fa10 <Vm::x87Handler(regs*)+0x65f>
c001f872:	8d 50 20             	lea    edx,[eax+0x20]
c001f875:	80 fa 07             	cmp    dl,0x7
c001f878:	77 3a                	ja     c001f8b4 <Vm::x87Handler(regs*)+0x503>
c001f87a:	83 ec 0c             	sub    esp,0xc
c001f87d:	2d e0 00 00 00       	sub    eax,0xe0
c001f882:	50                   	push   eax
c001f883:	e8 ec f9 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f888:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f88f:	89 c6                	mov    esi,eax
c001f891:	89 d7                	mov    edi,edx
c001f893:	e8 dc f9 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f898:	57                   	push   edi
c001f899:	56                   	push   esi
c001f89a:	52                   	push   edx
c001f89b:	50                   	push   eax
c001f89c:	e8 73 f9 ff ff       	call   c001f214 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8a1:	83 c4 1c             	add    esp,0x1c
c001f8a4:	52                   	push   edx
c001f8a5:	50                   	push   eax
c001f8a6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8aa:	2d e0 00 00 00       	sub    eax,0xe0
c001f8af:	e9 5c 01 00 00       	jmp    c001fa10 <Vm::x87Handler(regs*)+0x65f>
c001f8b4:	8d 50 18             	lea    edx,[eax+0x18]
c001f8b7:	80 fa 07             	cmp    dl,0x7
c001f8ba:	77 3b                	ja     c001f8f7 <Vm::x87Handler(regs*)+0x546>
c001f8bc:	83 ec 0c             	sub    esp,0xc
c001f8bf:	6a 00                	push   0x0
c001f8c1:	e8 ae f9 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f8c6:	89 c6                	mov    esi,eax
c001f8c8:	89 d7                	mov    edi,edx
c001f8ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8ce:	2d e8 00 00 00       	sub    eax,0xe8
c001f8d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8d6:	e8 99 f9 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f8db:	57                   	push   edi
c001f8dc:	56                   	push   esi
c001f8dd:	52                   	push   edx
c001f8de:	50                   	push   eax
c001f8df:	e8 30 f9 ff ff       	call   c001f214 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8e4:	83 c4 1c             	add    esp,0x1c
c001f8e7:	52                   	push   edx
c001f8e8:	50                   	push   eax
c001f8e9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8ed:	2d e8 00 00 00       	sub    eax,0xe8
c001f8f2:	e9 19 01 00 00       	jmp    c001fa10 <Vm::x87Handler(regs*)+0x65f>
c001f8f7:	8d 50 38             	lea    edx,[eax+0x38]
c001f8fa:	80 fa 07             	cmp    dl,0x7
c001f8fd:	77 37                	ja     c001f936 <Vm::x87Handler(regs*)+0x585>
c001f8ff:	83 ec 0c             	sub    esp,0xc
c001f902:	2d c8 00 00 00       	sub    eax,0xc8
c001f907:	50                   	push   eax
c001f908:	e8 67 f9 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f90d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f914:	89 c6                	mov    esi,eax
c001f916:	89 d7                	mov    edi,edx
c001f918:	e8 57 f9 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f91d:	57                   	push   edi
c001f91e:	56                   	push   esi
c001f91f:	52                   	push   edx
c001f920:	50                   	push   eax
c001f921:	e8 fd f8 ff ff       	call   c001f223 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f926:	83 c4 1c             	add    esp,0x1c
c001f929:	52                   	push   edx
c001f92a:	50                   	push   eax
c001f92b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f92f:	2d c8 00 00 00       	sub    eax,0xc8
c001f934:	eb 7d                	jmp    c001f9b3 <Vm::x87Handler(regs*)+0x602>
c001f936:	3c f7                	cmp    al,0xf7
c001f938:	76 38                	jbe    c001f972 <Vm::x87Handler(regs*)+0x5c1>
c001f93a:	83 ec 0c             	sub    esp,0xc
c001f93d:	6a 00                	push   0x0
c001f93f:	e8 30 f9 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f944:	89 c6                	mov    esi,eax
c001f946:	89 d7                	mov    edi,edx
c001f948:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f94c:	2d f8 00 00 00       	sub    eax,0xf8
c001f951:	89 04 24             	mov    DWORD PTR [esp],eax
c001f954:	e8 1b f9 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f959:	57                   	push   edi
c001f95a:	56                   	push   esi
c001f95b:	52                   	push   edx
c001f95c:	50                   	push   eax
c001f95d:	e8 e0 f8 ff ff       	call   c001f242 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f962:	83 c4 1c             	add    esp,0x1c
c001f965:	52                   	push   edx
c001f966:	50                   	push   eax
c001f967:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f96b:	2d f8 00 00 00       	sub    eax,0xf8
c001f970:	eb 41                	jmp    c001f9b3 <Vm::x87Handler(regs*)+0x602>
c001f972:	8d 50 10             	lea    edx,[eax+0x10]
c001f975:	80 fa 07             	cmp    dl,0x7
c001f978:	0f 87 5a 01 00 00    	ja     c001fad8 <Vm::x87Handler(regs*)+0x727>
c001f97e:	83 ec 0c             	sub    esp,0xc
c001f981:	2d f0 00 00 00       	sub    eax,0xf0
c001f986:	50                   	push   eax
c001f987:	e8 e8 f8 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f98c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f993:	89 c6                	mov    esi,eax
c001f995:	89 d7                	mov    edi,edx
c001f997:	e8 d8 f8 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f99c:	57                   	push   edi
c001f99d:	56                   	push   esi
c001f99e:	52                   	push   edx
c001f99f:	50                   	push   eax
c001f9a0:	e8 9d f8 ff ff       	call   c001f242 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f9a5:	83 c4 1c             	add    esp,0x1c
c001f9a8:	52                   	push   edx
c001f9a9:	50                   	push   eax
c001f9aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9ae:	2d f0 00 00 00       	sub    eax,0xf0
c001f9b3:	50                   	push   eax
c001f9b4:	e8 fe f8 ff ff       	call   c001f2b7 <Vm::fpuSetReg(int, unsigned long long)>
c001f9b9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9bd:	e8 9d f9 ff ff       	call   c001f35f <Vm::fpuPop()>
c001f9c2:	e9 5e fa ff ff       	jmp    c001f425 <Vm::x87Handler(regs*)+0x74>
c001f9c7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9cb:	8d 50 30             	lea    edx,[eax+0x30]
c001f9ce:	80 fa 07             	cmp    dl,0x7
c001f9d1:	77 1d                	ja     c001f9f0 <Vm::x87Handler(regs*)+0x63f>
c001f9d3:	83 ec 0c             	sub    esp,0xc
c001f9d6:	6a 00                	push   0x0
c001f9d8:	e8 97 f8 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001f9dd:	83 c4 0c             	add    esp,0xc
c001f9e0:	52                   	push   edx
c001f9e1:	50                   	push   eax
c001f9e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9e6:	2d d0 00 00 00       	sub    eax,0xd0
c001f9eb:	e9 f3 fd ff ff       	jmp    c001f7e3 <Vm::x87Handler(regs*)+0x432>
c001f9f0:	8d 50 28             	lea    edx,[eax+0x28]
c001f9f3:	80 fa 07             	cmp    dl,0x7
c001f9f6:	77 28                	ja     c001fa20 <Vm::x87Handler(regs*)+0x66f>
c001f9f8:	83 ec 0c             	sub    esp,0xc
c001f9fb:	6a 00                	push   0x0
c001f9fd:	e8 72 f8 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fa02:	83 c4 0c             	add    esp,0xc
c001fa05:	52                   	push   edx
c001fa06:	50                   	push   eax
c001fa07:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa0b:	2d d8 00 00 00       	sub    eax,0xd8
c001fa10:	50                   	push   eax
c001fa11:	e8 a1 f8 ff ff       	call   c001f2b7 <Vm::fpuSetReg(int, unsigned long long)>
c001fa16:	e8 44 f9 ff ff       	call   c001f35f <Vm::fpuPop()>
c001fa1b:	e9 01 fa ff ff       	jmp    c001f421 <Vm::x87Handler(regs*)+0x70>
c001fa20:	8d 50 20             	lea    edx,[eax+0x20]
c001fa23:	80 fa 07             	cmp    dl,0x7
c001fa26:	77 30                	ja     c001fa58 <Vm::x87Handler(regs*)+0x6a7>
c001fa28:	83 ec 0c             	sub    esp,0xc
c001fa2b:	2d e0 00 00 00       	sub    eax,0xe0
c001fa30:	50                   	push   eax
c001fa31:	e8 3e f8 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fa36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa3d:	89 c6                	mov    esi,eax
c001fa3f:	89 d7                	mov    edi,edx
c001fa41:	e8 2e f8 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fa46:	57                   	push   edi
c001fa47:	56                   	push   esi
c001fa48:	52                   	push   edx
c001fa49:	50                   	push   eax
c001fa4a:	e8 48 f7 ff ff       	call   c001f197 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa4f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa53:	e9 54 02 00 00       	jmp    c001fcac <Vm::x87Handler(regs*)+0x8fb>
c001fa58:	8d 50 18             	lea    edx,[eax+0x18]
c001fa5b:	80 fa 07             	cmp    dl,0x7
c001fa5e:	0f 87 43 fb ff ff    	ja     c001f5a7 <Vm::x87Handler(regs*)+0x1f6>
c001fa64:	83 ec 0c             	sub    esp,0xc
c001fa67:	2d e8 00 00 00       	sub    eax,0xe8
c001fa6c:	50                   	push   eax
c001fa6d:	e8 02 f8 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fa72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa79:	89 c6                	mov    esi,eax
c001fa7b:	89 d7                	mov    edi,edx
c001fa7d:	e8 f2 f7 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fa82:	57                   	push   edi
c001fa83:	56                   	push   esi
c001fa84:	52                   	push   edx
c001fa85:	50                   	push   eax
c001fa86:	e8 0c f7 ff ff       	call   c001f197 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa8b:	83 c4 20             	add    esp,0x20
c001fa8e:	e8 cc f8 ff ff       	call   c001f35f <Vm::fpuPop()>
c001fa93:	eb 62                	jmp    c001faf7 <Vm::x87Handler(regs*)+0x746>
c001fa95:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa99:	0f 85 0f 01 00 00    	jne    c001fbae <Vm::x87Handler(regs*)+0x7fd>
c001fa9f:	83 ec 0c             	sub    esp,0xc
c001faa2:	6a 01                	push   0x1
c001faa4:	e8 cb f7 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001faa9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fab0:	89 c6                	mov    esi,eax
c001fab2:	89 d7                	mov    edi,edx
c001fab4:	e8 bb f7 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fab9:	57                   	push   edi
c001faba:	56                   	push   esi
c001fabb:	52                   	push   edx
c001fabc:	50                   	push   eax
c001fabd:	e8 d5 f6 ff ff       	call   c001f197 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fac2:	83 c4 20             	add    esp,0x20
c001fac5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fac9:	e8 91 f8 ff ff       	call   c001f35f <Vm::fpuPop()>
c001face:	e8 8c f8 ff ff       	call   c001f35f <Vm::fpuPop()>
c001fad3:	e9 50 f9 ff ff       	jmp    c001f428 <Vm::x87Handler(regs*)+0x77>
c001fad8:	3c d9                	cmp    al,0xd9
c001fada:	0f 85 b5 02 00 00    	jne    c001fd95 <Vm::x87Handler(regs*)+0x9e4>
c001fae0:	eb bd                	jmp    c001fa9f <Vm::x87Handler(regs*)+0x6ee>
c001fae2:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fae6:	0f 85 ea 02 00 00    	jne    c001fdd6 <Vm::x87Handler(regs*)+0xa25>
c001faec:	0f b7 05 c0 0f 03 c0 	movzx  eax,WORD PTR ds:0xc0030fc0
c001faf3:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001faf7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fafb:	e9 28 f9 ff ff       	jmp    c001f428 <Vm::x87Handler(regs*)+0x77>
c001fb00:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb04:	84 d2                	test   dl,dl
c001fb06:	75 0f                	jne    c001fb17 <Vm::x87Handler(regs*)+0x766>
c001fb08:	83 ec 0c             	sub    esp,0xc
c001fb0b:	ff 36                	push   DWORD PTR [esi]
c001fb0d:	e8 b1 f4 ff ff       	call   c001efc3 <Vm::fpu32ToInternal(unsigned int)>
c001fb12:	e9 2c 01 00 00       	jmp    c001fc43 <Vm::x87Handler(regs*)+0x892>
c001fb17:	80 fa 01             	cmp    dl,0x1
c001fb1a:	75 0f                	jne    c001fb2b <Vm::x87Handler(regs*)+0x77a>
c001fb1c:	83 ec 0c             	sub    esp,0xc
c001fb1f:	ff 36                	push   DWORD PTR [esi]
c001fb21:	e8 9d f4 ff ff       	call   c001efc3 <Vm::fpu32ToInternal(unsigned int)>
c001fb26:	e9 81 02 00 00       	jmp    c001fdac <Vm::x87Handler(regs*)+0x9fb>
c001fb2b:	80 fa 04             	cmp    dl,0x4
c001fb2e:	75 0f                	jne    c001fb3f <Vm::x87Handler(regs*)+0x78e>
c001fb30:	83 ec 0c             	sub    esp,0xc
c001fb33:	ff 36                	push   DWORD PTR [esi]
c001fb35:	e8 89 f4 ff ff       	call   c001efc3 <Vm::fpu32ToInternal(unsigned int)>
c001fb3a:	e9 86 01 00 00       	jmp    c001fcc5 <Vm::x87Handler(regs*)+0x914>
c001fb3f:	80 fa 05             	cmp    dl,0x5
c001fb42:	75 1b                	jne    c001fb5f <Vm::x87Handler(regs*)+0x7ae>
c001fb44:	83 ec 0c             	sub    esp,0xc
c001fb47:	6a 00                	push   0x0
c001fb49:	e8 26 f7 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fb4e:	89 c7                	mov    edi,eax
c001fb50:	89 d5                	mov    ebp,edx
c001fb52:	58                   	pop    eax
c001fb53:	ff 36                	push   DWORD PTR [esi]
c001fb55:	e8 69 f4 ff ff       	call   c001efc3 <Vm::fpu32ToInternal(unsigned int)>
c001fb5a:	e9 a3 01 00 00       	jmp    c001fd02 <Vm::x87Handler(regs*)+0x951>
c001fb5f:	80 fa 06             	cmp    dl,0x6
c001fb62:	75 0f                	jne    c001fb73 <Vm::x87Handler(regs*)+0x7c2>
c001fb64:	83 ec 0c             	sub    esp,0xc
c001fb67:	ff 36                	push   DWORD PTR [esi]
c001fb69:	e8 55 f4 ff ff       	call   c001efc3 <Vm::fpu32ToInternal(unsigned int)>
c001fb6e:	e9 ae 01 00 00       	jmp    c001fd21 <Vm::x87Handler(regs*)+0x970>
c001fb73:	31 c0                	xor    eax,eax
c001fb75:	80 fa 07             	cmp    dl,0x7
c001fb78:	0f 85 94 02 00 00    	jne    c001fe12 <Vm::x87Handler(regs*)+0xa61>
c001fb7e:	83 ec 0c             	sub    esp,0xc
c001fb81:	6a 00                	push   0x0
c001fb83:	e8 ec f6 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fb88:	89 c7                	mov    edi,eax
c001fb8a:	89 d5                	mov    ebp,edx
c001fb8c:	58                   	pop    eax
c001fb8d:	ff 36                	push   DWORD PTR [esi]
c001fb8f:	e8 2f f4 ff ff       	call   c001efc3 <Vm::fpu32ToInternal(unsigned int)>
c001fb94:	e9 cb 01 00 00       	jmp    c001fd64 <Vm::x87Handler(regs*)+0x9b3>
c001fb99:	80 fa 03             	cmp    dl,0x3
c001fb9c:	0f 85 d3 01 00 00    	jne    c001fd75 <Vm::x87Handler(regs*)+0x9c4>
c001fba2:	e8 b8 f7 ff ff       	call   c001f35f <Vm::fpuPop()>
c001fba7:	51                   	push   ecx
c001fba8:	51                   	push   ecx
c001fba9:	e9 de 01 00 00       	jmp    c001fd8c <Vm::x87Handler(regs*)+0x9db>
c001fbae:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbb2:	80 fa 01             	cmp    dl,0x1
c001fbb5:	75 09                	jne    c001fbc0 <Vm::x87Handler(regs*)+0x80f>
c001fbb7:	57                   	push   edi
c001fbb8:	57                   	push   edi
c001fbb9:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbbb:	e9 e3 01 00 00       	jmp    c001fda3 <Vm::x87Handler(regs*)+0x9f2>
c001fbc0:	80 fa 04             	cmp    dl,0x4
c001fbc3:	75 12                	jne    c001fbd7 <Vm::x87Handler(regs*)+0x826>
c001fbc5:	31 d2                	xor    edx,edx
c001fbc7:	51                   	push   ecx
c001fbc8:	51                   	push   ecx
c001fbc9:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbcb:	52                   	push   edx
c001fbcc:	50                   	push   eax
c001fbcd:	e8 d0 f4 ff ff       	call   c001f0a2 <Vm::fpuLongToFloat(long long)>
c001fbd2:	e9 ee 00 00 00       	jmp    c001fcc5 <Vm::x87Handler(regs*)+0x914>
c001fbd7:	31 c0                	xor    eax,eax
c001fbd9:	80 fa 07             	cmp    dl,0x7
c001fbdc:	0f 85 30 02 00 00    	jne    c001fe12 <Vm::x87Handler(regs*)+0xa61>
c001fbe2:	83 ec 0c             	sub    esp,0xc
c001fbe5:	6a 00                	push   0x0
c001fbe7:	e8 88 f6 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fbec:	89 c7                	mov    edi,eax
c001fbee:	89 d5                	mov    ebp,edx
c001fbf0:	58                   	pop    eax
c001fbf1:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbf3:	5a                   	pop    edx
c001fbf4:	31 d2                	xor    edx,edx
c001fbf6:	52                   	push   edx
c001fbf7:	50                   	push   eax
c001fbf8:	e8 a5 f4 ff ff       	call   c001f0a2 <Vm::fpuLongToFloat(long long)>
c001fbfd:	e9 62 01 00 00       	jmp    c001fd64 <Vm::x87Handler(regs*)+0x9b3>
c001fc02:	84 d2                	test   dl,dl
c001fc04:	75 0d                	jne    c001fc13 <Vm::x87Handler(regs*)+0x862>
c001fc06:	31 d2                	xor    edx,edx
c001fc08:	55                   	push   ebp
c001fc09:	55                   	push   ebp
c001fc0a:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc0c:	52                   	push   edx
c001fc0d:	50                   	push   eax
c001fc0e:	e9 d3 01 00 00       	jmp    c001fde6 <Vm::x87Handler(regs*)+0xa35>
c001fc13:	31 c0                	xor    eax,eax
c001fc15:	80 fa 02             	cmp    dl,0x2
c001fc18:	0f 85 f4 01 00 00    	jne    c001fe12 <Vm::x87Handler(regs*)+0xa61>
c001fc1e:	83 ec 0c             	sub    esp,0xc
c001fc21:	6a 00                	push   0x0
c001fc23:	e8 4c f6 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fc28:	59                   	pop    ecx
c001fc29:	5f                   	pop    edi
c001fc2a:	e9 6a f9 ff ff       	jmp    c001f599 <Vm::x87Handler(regs*)+0x1e8>
c001fc2f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc33:	84 d2                	test   dl,dl
c001fc35:	75 2a                	jne    c001fc61 <Vm::x87Handler(regs*)+0x8b0>
c001fc37:	50                   	push   eax
c001fc38:	50                   	push   eax
c001fc39:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc3c:	ff 36                	push   DWORD PTR [esi]
c001fc3e:	e8 c5 f3 ff ff       	call   c001f008 <Vm::fpu64ToInternal(unsigned long long)>
c001fc43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc4a:	89 c6                	mov    esi,eax
c001fc4c:	89 d7                	mov    edi,edx
c001fc4e:	e8 21 f6 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fc53:	57                   	push   edi
c001fc54:	56                   	push   esi
c001fc55:	52                   	push   edx
c001fc56:	50                   	push   eax
c001fc57:	e8 8e f5 ff ff       	call   c001f1ea <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc5c:	e9 64 01 00 00       	jmp    c001fdc5 <Vm::x87Handler(regs*)+0xa14>
c001fc61:	80 fa 01             	cmp    dl,0x1
c001fc64:	75 11                	jne    c001fc77 <Vm::x87Handler(regs*)+0x8c6>
c001fc66:	50                   	push   eax
c001fc67:	50                   	push   eax
c001fc68:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc6b:	ff 36                	push   DWORD PTR [esi]
c001fc6d:	e8 96 f3 ff ff       	call   c001f008 <Vm::fpu64ToInternal(unsigned long long)>
c001fc72:	e9 35 01 00 00       	jmp    c001fdac <Vm::x87Handler(regs*)+0x9fb>
c001fc77:	80 fa 02             	cmp    dl,0x2
c001fc7a:	0f 85 54 f9 ff ff    	jne    c001f5d4 <Vm::x87Handler(regs*)+0x223>
c001fc80:	55                   	push   ebp
c001fc81:	55                   	push   ebp
c001fc82:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc85:	ff 36                	push   DWORD PTR [esi]
c001fc87:	e8 7c f3 ff ff       	call   c001f008 <Vm::fpu64ToInternal(unsigned long long)>
c001fc8c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc93:	89 c6                	mov    esi,eax
c001fc95:	89 d7                	mov    edi,edx
c001fc97:	e8 d8 f5 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fc9c:	57                   	push   edi
c001fc9d:	56                   	push   esi
c001fc9e:	52                   	push   edx
c001fc9f:	50                   	push   eax
c001fca0:	e8 f2 f4 ff ff       	call   c001f197 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fca5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fca9:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcac:	83 c4 20             	add    esp,0x20
c001fcaf:	e9 74 f7 ff ff       	jmp    c001f428 <Vm::x87Handler(regs*)+0x77>
c001fcb4:	80 fa 04             	cmp    dl,0x4
c001fcb7:	75 2a                	jne    c001fce3 <Vm::x87Handler(regs*)+0x932>
c001fcb9:	51                   	push   ecx
c001fcba:	51                   	push   ecx
c001fcbb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcbe:	ff 36                	push   DWORD PTR [esi]
c001fcc0:	e8 43 f3 ff ff       	call   c001f008 <Vm::fpu64ToInternal(unsigned long long)>
c001fcc5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fccc:	89 c6                	mov    esi,eax
c001fcce:	89 d7                	mov    edi,edx
c001fcd0:	e8 9f f5 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fcd5:	57                   	push   edi
c001fcd6:	56                   	push   esi
c001fcd7:	52                   	push   edx
c001fcd8:	50                   	push   eax
c001fcd9:	e8 36 f5 ff ff       	call   c001f214 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcde:	e9 e2 00 00 00       	jmp    c001fdc5 <Vm::x87Handler(regs*)+0xa14>
c001fce3:	80 fa 05             	cmp    dl,0x5
c001fce6:	75 28                	jne    c001fd10 <Vm::x87Handler(regs*)+0x95f>
c001fce8:	83 ec 0c             	sub    esp,0xc
c001fceb:	6a 00                	push   0x0
c001fced:	e8 82 f5 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fcf2:	89 c7                	mov    edi,eax
c001fcf4:	89 d5                	mov    ebp,edx
c001fcf6:	58                   	pop    eax
c001fcf7:	5a                   	pop    edx
c001fcf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcfb:	ff 36                	push   DWORD PTR [esi]
c001fcfd:	e8 06 f3 ff ff       	call   c001f008 <Vm::fpu64ToInternal(unsigned long long)>
c001fd02:	83 c4 10             	add    esp,0x10
c001fd05:	55                   	push   ebp
c001fd06:	57                   	push   edi
c001fd07:	52                   	push   edx
c001fd08:	50                   	push   eax
c001fd09:	e8 06 f5 ff ff       	call   c001f214 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd0e:	eb 60                	jmp    c001fd70 <Vm::x87Handler(regs*)+0x9bf>
c001fd10:	80 fa 06             	cmp    dl,0x6
c001fd13:	75 2a                	jne    c001fd3f <Vm::x87Handler(regs*)+0x98e>
c001fd15:	51                   	push   ecx
c001fd16:	51                   	push   ecx
c001fd17:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd1a:	ff 36                	push   DWORD PTR [esi]
c001fd1c:	e8 e7 f2 ff ff       	call   c001f008 <Vm::fpu64ToInternal(unsigned long long)>
c001fd21:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd28:	89 c6                	mov    esi,eax
c001fd2a:	89 d7                	mov    edi,edx
c001fd2c:	e8 43 f5 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fd31:	57                   	push   edi
c001fd32:	56                   	push   esi
c001fd33:	52                   	push   edx
c001fd34:	50                   	push   eax
c001fd35:	e8 08 f5 ff ff       	call   c001f242 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd3a:	e9 86 00 00 00       	jmp    c001fdc5 <Vm::x87Handler(regs*)+0xa14>
c001fd3f:	31 c0                	xor    eax,eax
c001fd41:	80 fa 07             	cmp    dl,0x7
c001fd44:	0f 85 c8 00 00 00    	jne    c001fe12 <Vm::x87Handler(regs*)+0xa61>
c001fd4a:	83 ec 0c             	sub    esp,0xc
c001fd4d:	6a 00                	push   0x0
c001fd4f:	e8 20 f5 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fd54:	89 c7                	mov    edi,eax
c001fd56:	89 d5                	mov    ebp,edx
c001fd58:	58                   	pop    eax
c001fd59:	5a                   	pop    edx
c001fd5a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd5d:	ff 36                	push   DWORD PTR [esi]
c001fd5f:	e8 a4 f2 ff ff       	call   c001f008 <Vm::fpu64ToInternal(unsigned long long)>
c001fd64:	83 c4 10             	add    esp,0x10
c001fd67:	55                   	push   ebp
c001fd68:	57                   	push   edi
c001fd69:	52                   	push   edx
c001fd6a:	50                   	push   eax
c001fd6b:	e8 d2 f4 ff ff       	call   c001f242 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd70:	83 c4 0c             	add    esp,0xc
c001fd73:	eb 53                	jmp    c001fdc8 <Vm::x87Handler(regs*)+0xa17>
c001fd75:	31 c0                	xor    eax,eax
c001fd77:	80 fa 02             	cmp    dl,0x2
c001fd7a:	0f 85 92 00 00 00    	jne    c001fe12 <Vm::x87Handler(regs*)+0xa61>
c001fd80:	83 ec 0c             	sub    esp,0xc
c001fd83:	6a 00                	push   0x0
c001fd85:	e8 ea f4 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fd8a:	59                   	pop    ecx
c001fd8b:	5f                   	pop    edi
c001fd8c:	52                   	push   edx
c001fd8d:	50                   	push   eax
c001fd8e:	e8 27 f2 ff ff       	call   c001efba <Vm::fpuInternalTo64(unsigned long long)>
c001fd93:	eb 70                	jmp    c001fe05 <Vm::x87Handler(regs*)+0xa54>
c001fd95:	31 c0                	xor    eax,eax
c001fd97:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd9c:	75 74                	jne    c001fe12 <Vm::x87Handler(regs*)+0xa61>
c001fd9e:	50                   	push   eax
c001fd9f:	50                   	push   eax
c001fda0:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fda3:	31 d2                	xor    edx,edx
c001fda5:	52                   	push   edx
c001fda6:	50                   	push   eax
c001fda7:	e8 f6 f2 ff ff       	call   c001f0a2 <Vm::fpuLongToFloat(long long)>
c001fdac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdb3:	89 c6                	mov    esi,eax
c001fdb5:	89 d7                	mov    edi,edx
c001fdb7:	e8 b8 f4 ff ff       	call   c001f274 <Vm::fpuGetReg(int)>
c001fdbc:	57                   	push   edi
c001fdbd:	56                   	push   esi
c001fdbe:	52                   	push   edx
c001fdbf:	50                   	push   eax
c001fdc0:	e8 5e f4 ff ff       	call   c001f223 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdc5:	83 c4 1c             	add    esp,0x1c
c001fdc8:	52                   	push   edx
c001fdc9:	50                   	push   eax
c001fdca:	6a 00                	push   0x0
c001fdcc:	e8 e6 f4 ff ff       	call   c001f2b7 <Vm::fpuSetReg(int, unsigned long long)>
c001fdd1:	e9 f2 f7 ff ff       	jmp    c001f5c8 <Vm::x87Handler(regs*)+0x217>
c001fdd6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fdda:	80 fa 05             	cmp    dl,0x5
c001fddd:	75 11                	jne    c001fdf0 <Vm::x87Handler(regs*)+0xa3f>
c001fddf:	55                   	push   ebp
c001fde0:	55                   	push   ebp
c001fde1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fde4:	ff 36                	push   DWORD PTR [esi]
c001fde6:	e8 81 f2 ff ff       	call   c001f06c <Vm::fpuULongToFloat(unsigned long long)>
c001fdeb:	e9 cf f7 ff ff       	jmp    c001f5bf <Vm::x87Handler(regs*)+0x20e>
c001fdf0:	31 c0                	xor    eax,eax
c001fdf2:	80 fa 07             	cmp    dl,0x7
c001fdf5:	75 1b                	jne    c001fe12 <Vm::x87Handler(regs*)+0xa61>
c001fdf7:	e8 63 f5 ff ff       	call   c001f35f <Vm::fpuPop()>
c001fdfc:	51                   	push   ecx
c001fdfd:	51                   	push   ecx
c001fdfe:	52                   	push   edx
c001fdff:	50                   	push   eax
c001fe00:	e8 0c f2 ff ff       	call   c001f011 <Vm::fpuFloatToLong(unsigned long long)>
c001fe05:	83 c4 10             	add    esp,0x10
c001fe08:	89 06                	mov    DWORD PTR [esi],eax
c001fe0a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fe0d:	e9 f8 f7 ff ff       	jmp    c001f60a <Vm::x87Handler(regs*)+0x259>
c001fe12:	83 c4 1c             	add    esp,0x1c
c001fe15:	5b                   	pop    ebx
c001fe16:	5e                   	pop    esi
c001fe17:	5f                   	pop    edi
c001fe18:	5d                   	pop    ebp
c001fe19:	c3                   	ret    

c001fe1a <__static_initialization_and_destruction_0(int, int)>:
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fe22:	75 1a                	jne    c001fe3e <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe24:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fe2c:	75 10                	jne    c001fe3e <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe2e:	83 ec 0c             	sub    esp,0xc
c001fe31:	68 c0 0f 03 c0       	push   0xc0030fc0
c001fe36:	e8 ff 8c 00 00       	call   c0028b3a <Vm::_FPUState::_FPUState()>
c001fe3b:	83 c4 10             	add    esp,0x10
c001fe3e:	90                   	nop
c001fe3f:	83 c4 0c             	add    esp,0xc
c001fe42:	c3                   	ret    

c001fe43 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fe43:	83 ec 0c             	sub    esp,0xc
c001fe46:	83 ec 08             	sub    esp,0x8
c001fe49:	68 ff ff 00 00       	push   0xffff
c001fe4e:	6a 01                	push   0x1
c001fe50:	e8 c5 ff ff ff       	call   c001fe1a <__static_initialization_and_destruction_0(int, int)>
c001fe55:	83 c4 10             	add    esp,0x10
c001fe58:	83 c4 0c             	add    esp,0xc
c001fe5b:	c3                   	ret    

c001fe5c <FAT::getName()>:
c001fe5c:	b8 b0 be 02 c0       	mov    eax,0xc002beb0
c001fe61:	c3                   	ret    

c001fe62 <FAT::tell(void*, unsigned long long*)>:
c001fe62:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe67:	75 06                	jne    c001fe6f <FAT::tell(void*, unsigned long long*)+0xd>
c001fe69:	b8 04 00 00 00       	mov    eax,0x4
c001fe6e:	c3                   	ret    
c001fe6f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe74:	75 06                	jne    c001fe7c <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe76:	b8 04 00 00 00       	mov    eax,0x4
c001fe7b:	c3                   	ret    
c001fe7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe80:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe83:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe8a:	89 01                	mov    DWORD PTR [ecx],eax
c001fe8c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe8f:	b8 00 00 00 00       	mov    eax,0x0
c001fe94:	c3                   	ret    
c001fe95:	90                   	nop

c001fe96 <FAT::stat(void*, unsigned long long*)>:
c001fe96:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe9b:	75 06                	jne    c001fea3 <FAT::stat(void*, unsigned long long*)+0xd>
c001fe9d:	b8 04 00 00 00       	mov    eax,0x4
c001fea2:	c3                   	ret    
c001fea3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fea8:	75 06                	jne    c001feb0 <FAT::stat(void*, unsigned long long*)+0x1a>
c001feaa:	b8 04 00 00 00       	mov    eax,0x4
c001feaf:	c3                   	ret    
c001feb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001feb4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001feb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001feba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001febe:	89 01                	mov    DWORD PTR [ecx],eax
c001fec0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fec3:	b8 00 00 00 00       	mov    eax,0x0
c001fec8:	c3                   	ret    
c001fec9:	90                   	nop

c001feca <FAT::~FAT()>:
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	ba fc be 02 c0       	mov    edx,0xc002befc
c001fed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed6:	89 10                	mov    DWORD PTR [eax],edx
c001fed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fedc:	83 ec 0c             	sub    esp,0xc
c001fedf:	50                   	push   eax
c001fee0:	e8 3f 2b ff ff       	call   c0012a24 <Filesystem::~Filesystem()>
c001fee5:	83 c4 10             	add    esp,0x10
c001fee8:	90                   	nop
c001fee9:	83 c4 0c             	add    esp,0xc
c001feec:	c3                   	ret    
c001feed:	90                   	nop

c001feee <FAT::~FAT()>:
c001feee:	83 ec 0c             	sub    esp,0xc
c001fef1:	83 ec 0c             	sub    esp,0xc
c001fef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fef8:	e8 cd ff ff ff       	call   c001feca <FAT::~FAT()>
c001fefd:	83 c4 10             	add    esp,0x10
c001ff00:	83 ec 08             	sub    esp,0x8
c001ff03:	6a 08                	push   0x8
c001ff05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff09:	e8 0f 27 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c001ff0e:	83 c4 10             	add    esp,0x10
c001ff11:	83 c4 0c             	add    esp,0xc
c001ff14:	c3                   	ret    
c001ff15:	90                   	nop

c001ff16 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ff16:	83 ec 1c             	sub    esp,0x1c
c001ff19:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ff20:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ff25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff29:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c001ff30:	83 f8 ff             	cmp    eax,0xffffffff
c001ff33:	75 34                	jne    c001ff69 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ff35:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff39:	88 c2                	mov    dl,al
c001ff3b:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001ff40:	01 d0                	add    eax,edx
c001ff42:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff46:	8b 15 20 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031020
c001ff4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff50:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c001ff57:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001ff5c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff60:	89 14 85 c0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef40],edx
c001ff67:	eb 17                	jmp    c001ff80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff69:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff6d:	88 c2                	mov    dl,al
c001ff6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff73:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c001ff7a:	01 d0                	add    eax,edx
c001ff7c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff80:	83 ec 04             	sub    esp,0x4
c001ff83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff8b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff8f:	50                   	push   eax
c001ff90:	e8 69 6d fe ff       	call   c0006cfe <f_getlabel>
c001ff95:	83 c4 10             	add    esp,0x10
c001ff98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff9c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ffa1:	75 07                	jne    c001ffaa <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ffa3:	b8 00 00 00 00       	mov    eax,0x0
c001ffa8:	eb 05                	jmp    c001ffaf <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ffaa:	b8 01 00 00 00       	mov    eax,0x1
c001ffaf:	83 c4 1c             	add    esp,0x1c
c001ffb2:	c3                   	ret    
c001ffb3:	90                   	nop

c001ffb4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ffb4:	57                   	push   edi
c001ffb5:	83 ec 58             	sub    esp,0x58
c001ffb8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ffc0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ffc4:	b9 0f 00 00 00       	mov    ecx,0xf
c001ffc9:	b8 00 00 00 00       	mov    eax,0x0
c001ffce:	fc                   	cld    
c001ffcf:	89 d7                	mov    edi,edx
c001ffd1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ffd3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffd7:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c001ffde:	83 f8 ff             	cmp    eax,0xffffffff
c001ffe1:	75 34                	jne    c0020017 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ffe3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffe7:	88 c2                	mov    dl,al
c001ffe9:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001ffee:	01 d0                	add    eax,edx
c001fff0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fff4:	8b 15 20 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031020
c001fffa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fffe:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c0020005:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c002000a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002000e:	89 14 85 c0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef40],edx
c0020015:	eb 17                	jmp    c002002e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020017:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002001b:	88 c2                	mov    dl,al
c002001d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020021:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c0020028:	01 d0                	add    eax,edx
c002002a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002002e:	83 ec 08             	sub    esp,0x8
c0020031:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020035:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020039:	50                   	push   eax
c002003a:	e8 0d 09 fe ff       	call   c000094c <strcat>
c002003f:	83 c4 10             	add    esp,0x10
c0020042:	83 ec 0c             	sub    esp,0xc
c0020045:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020049:	50                   	push   eax
c002004a:	e8 9d 6e fe ff       	call   c0006eec <f_setlabel>
c002004f:	83 c4 10             	add    esp,0x10
c0020052:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020056:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002005b:	75 07                	jne    c0020064 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002005d:	b8 00 00 00 00       	mov    eax,0x0
c0020062:	eb 05                	jmp    c0020069 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020064:	b8 01 00 00 00       	mov    eax,0x1
c0020069:	83 c4 58             	add    esp,0x58
c002006c:	5f                   	pop    edi
c002006d:	c3                   	ret    

c002006e <FAT::format(LogicalDisk*, int, char const*, int)>:
c002006e:	83 ec 2c             	sub    esp,0x2c
c0020071:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020079:	83 ec 08             	sub    esp,0x8
c002007c:	68 d4 be 02 c0       	push   0xc002bed4
c0020081:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020085:	e8 0e 08 fe ff       	call   c0000898 <strcmp>
c002008a:	83 c4 10             	add    esp,0x10
c002008d:	85 c0                	test   eax,eax
c002008f:	0f 94 c0             	sete   al
c0020092:	84 c0                	test   al,al
c0020094:	74 0d                	je     c00200a3 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020096:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002009e:	e9 a6 00 00 00       	jmp    c0020149 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200a3:	83 ec 08             	sub    esp,0x8
c00200a6:	68 c6 be 02 c0       	push   0xc002bec6
c00200ab:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200af:	e8 e4 07 fe ff       	call   c0000898 <strcmp>
c00200b4:	83 c4 10             	add    esp,0x10
c00200b7:	85 c0                	test   eax,eax
c00200b9:	0f 94 c0             	sete   al
c00200bc:	84 c0                	test   al,al
c00200be:	74 0a                	je     c00200ca <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00200c0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200c8:	eb 7f                	jmp    c0020149 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200ca:	83 ec 08             	sub    esp,0x8
c00200cd:	68 cc be 02 c0       	push   0xc002becc
c00200d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200d6:	e8 bd 07 fe ff       	call   c0000898 <strcmp>
c00200db:	83 c4 10             	add    esp,0x10
c00200de:	85 c0                	test   eax,eax
c00200e0:	0f 94 c0             	sete   al
c00200e3:	84 c0                	test   al,al
c00200e5:	74 0a                	je     c00200f1 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00200e7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200ef:	eb 58                	jmp    c0020149 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200f1:	83 ec 08             	sub    esp,0x8
c00200f4:	68 ac 92 02 c0       	push   0xc00292ac
c00200f9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200fd:	e8 96 07 fe ff       	call   c0000898 <strcmp>
c0020102:	83 c4 10             	add    esp,0x10
c0020105:	85 c0                	test   eax,eax
c0020107:	0f 94 c0             	sete   al
c002010a:	84 c0                	test   al,al
c002010c:	74 0a                	je     c0020118 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002010e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020116:	eb 31                	jmp    c0020149 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020118:	83 ec 08             	sub    esp,0x8
c002011b:	68 d2 be 02 c0       	push   0xc002bed2
c0020120:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020124:	e8 6f 07 fe ff       	call   c0000898 <strcmp>
c0020129:	83 c4 10             	add    esp,0x10
c002012c:	85 c0                	test   eax,eax
c002012e:	0f 94 c0             	sete   al
c0020131:	84 c0                	test   al,al
c0020133:	74 0a                	je     c002013f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020135:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002013d:	eb 0a                	jmp    c0020149 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002013f:	b8 08 00 00 00       	mov    eax,0x8
c0020144:	e9 df 00 00 00       	jmp    c0020228 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020149:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020150:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020155:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020159:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c0020160:	83 f8 ff             	cmp    eax,0xffffffff
c0020163:	75 34                	jne    c0020199 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020165:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020169:	88 c2                	mov    dl,al
c002016b:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c0020170:	01 d0                	add    eax,edx
c0020172:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020176:	8b 15 20 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031020
c002017c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020180:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c0020187:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c002018c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020190:	89 14 85 c0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef40],edx
c0020197:	eb 17                	jmp    c00201b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020199:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002019d:	88 c2                	mov    dl,al
c002019f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201a3:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c00201aa:	01 d0                	add    eax,edx
c00201ac:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00201b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00201b4:	88 04 24             	mov    BYTE PTR [esp],al
c00201b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00201bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00201c7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00201cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00201d4:	83 ec 0c             	sub    esp,0xc
c00201d7:	68 00 20 00 00       	push   0x2000
c00201dc:	e8 b8 f3 fe ff       	call   c000f599 <malloc>
c00201e1:	83 c4 10             	add    esp,0x10
c00201e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201e8:	68 00 20 00 00       	push   0x2000
c00201ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00201f5:	50                   	push   eax
c00201f6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00201fa:	50                   	push   eax
c00201fb:	e8 37 71 fe ff       	call   c0007337 <f_mkfs>
c0020200:	83 c4 10             	add    esp,0x10
c0020203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020207:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002020c:	75 07                	jne    c0020215 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002020e:	b8 00 00 00 00       	mov    eax,0x0
c0020213:	eb 13                	jmp    c0020228 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020215:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002021a:	75 07                	jne    c0020223 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c002021c:	b8 09 00 00 00       	mov    eax,0x9
c0020221:	eb 05                	jmp    c0020228 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020223:	b8 01 00 00 00       	mov    eax,0x1
c0020228:	83 c4 2c             	add    esp,0x2c
c002022b:	c3                   	ret    

c002022c <FAT::tryMount(LogicalDisk*, int)>:
c002022c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020232:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c0020237:	83 f8 14             	cmp    eax,0x14
c002023a:	75 17                	jne    c0020253 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002023c:	83 ec 0c             	sub    esp,0xc
c002023f:	68 d8 be 02 c0       	push   0xc002bed8
c0020244:	e8 18 9c ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0020249:	83 c4 10             	add    esp,0x10
c002024c:	b0 00                	mov    al,0x0
c002024e:	e9 d7 01 00 00       	jmp    c002042a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020253:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002025a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020260:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020266:	3d 00 02 00 00       	cmp    eax,0x200
c002026b:	74 07                	je     c0020274 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002026d:	b0 00                	mov    al,0x0
c002026f:	e9 b6 01 00 00       	jmp    c002042a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020274:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002027c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020283:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c002028a:	83 f8 ff             	cmp    eax,0xffffffff
c002028d:	74 07                	je     c0020296 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002028f:	b0 01                	mov    al,0x1
c0020291:	e9 94 01 00 00       	jmp    c002042a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020296:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00202a0:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00202a8:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00202af:	88 c2                	mov    dl,al
c00202b1:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c00202b6:	01 d0                	add    eax,edx
c00202b8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00202bf:	8b 15 20 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031020
c00202c5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00202cc:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c00202d3:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c00202d8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00202df:	89 14 85 c0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef40],edx
c00202e6:	83 ec 0c             	sub    esp,0xc
c00202e9:	68 54 02 00 00       	push   0x254
c00202ee:	e8 a6 f2 fe ff       	call   c000f599 <malloc>
c00202f3:	83 c4 10             	add    esp,0x10
c00202f6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00202fd:	83 ec 04             	sub    esp,0x4
c0020300:	6a 00                	push   0x0
c0020302:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020309:	50                   	push   eax
c002030a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020311:	e8 df 4b fe ff       	call   c0004ef5 <f_mount>
c0020316:	83 c4 10             	add    esp,0x10
c0020319:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020320:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020328:	74 19                	je     c0020343 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002032a:	83 ec 0c             	sub    esp,0xc
c002032d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020334:	e8 80 f2 fe ff       	call   c000f5b9 <rfree>
c0020339:	83 c4 10             	add    esp,0x10
c002033c:	b0 00                	mov    al,0x0
c002033e:	e9 e7 00 00 00       	jmp    c002042a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020343:	83 ec 04             	sub    esp,0x4
c0020346:	68 00 01 00 00       	push   0x100
c002034b:	6a 00                	push   0x0
c002034d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020354:	50                   	push   eax
c0020355:	e8 f6 03 fe ff       	call   c0000750 <memset>
c002035a:	83 c4 10             	add    esp,0x10
c002035d:	83 ec 08             	sub    esp,0x8
c0020360:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020367:	50                   	push   eax
c0020368:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002036f:	50                   	push   eax
c0020370:	e8 d7 05 fe ff       	call   c000094c <strcat>
c0020375:	83 c4 10             	add    esp,0x10
c0020378:	83 ec 08             	sub    esp,0x8
c002037b:	68 e6 be 02 c0       	push   0xc002bee6
c0020380:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020387:	50                   	push   eax
c0020388:	e8 bf 05 fe ff       	call   c000094c <strcat>
c002038d:	83 c4 10             	add    esp,0x10
c0020390:	83 ec 04             	sub    esp,0x4
c0020393:	6a 01                	push   0x1
c0020395:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002039c:	50                   	push   eax
c002039d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00203a1:	50                   	push   eax
c00203a2:	e8 b0 4b fe ff       	call   c0004f57 <f_open>
c00203a7:	83 c4 10             	add    esp,0x10
c00203aa:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00203b1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00203b8:	85 c0                	test   eax,eax
c00203ba:	74 0a                	je     c00203c6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00203bc:	78 2d                	js     c00203eb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00203be:	83 e8 04             	sub    eax,0x4
c00203c1:	83 f8 01             	cmp    eax,0x1
c00203c4:	77 25                	ja     c00203eb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00203c6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00203ce:	83 ec 0c             	sub    esp,0xc
c00203d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00203d5:	50                   	push   eax
c00203d6:	e8 ce 56 fe ff       	call   c0005aa9 <f_close>
c00203db:	83 c4 10             	add    esp,0x10
c00203de:	90                   	nop
c00203df:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00203e7:	74 3a                	je     c0020423 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00203e9:	eb 2d                	jmp    c0020418 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00203eb:	83 ec 0c             	sub    esp,0xc
c00203ee:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203f5:	e8 bf f1 fe ff       	call   c000f5b9 <rfree>
c00203fa:	83 c4 10             	add    esp,0x10
c00203fd:	83 ec 04             	sub    esp,0x4
c0020400:	6a 00                	push   0x0
c0020402:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020409:	50                   	push   eax
c002040a:	6a 00                	push   0x0
c002040c:	e8 e4 4a fe ff       	call   c0004ef5 <f_mount>
c0020411:	83 c4 10             	add    esp,0x10
c0020414:	b0 00                	mov    al,0x0
c0020416:	eb 12                	jmp    c002042a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020418:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c002041d:	40                   	inc    eax
c002041e:	a3 20 10 03 c0       	mov    ds:0xc0031020,eax
c0020423:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002042a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020430:	c3                   	ret    
c0020431:	90                   	nop

c0020432 <FAT::getFileFirstSector(char const*)>:
c0020432:	53                   	push   ebx
c0020433:	83 ec 28             	sub    esp,0x28
c0020436:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002043e:	83 ec 0c             	sub    esp,0xc
c0020441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020445:	e8 4f f1 fe ff       	call   c000f599 <malloc>
c002044a:	83 c4 10             	add    esp,0x10
c002044d:	89 c3                	mov    ebx,eax
c002044f:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c0020454:	83 ec 04             	sub    esp,0x4
c0020457:	50                   	push   eax
c0020458:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002045c:	53                   	push   ebx
c002045d:	e8 f2 27 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c0020462:	83 c4 10             	add    esp,0x10
c0020465:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020469:	83 ec 08             	sub    esp,0x8
c002046c:	6a 01                	push   0x1
c002046e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020472:	e8 41 28 ff ff       	call   c0012cb8 <File::open(FileOpenMode)>
c0020477:	83 c4 10             	add    esp,0x10
c002047a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002047e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020480:	83 c0 0c             	add    eax,0xc
c0020483:	8b 00                	mov    eax,DWORD PTR [eax]
c0020485:	83 ec 0c             	sub    esp,0xc
c0020488:	8d 54 24 14          	lea    edx,[esp+0x14]
c002048c:	52                   	push   edx
c002048d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020491:	52                   	push   edx
c0020492:	6a 00                	push   0x0
c0020494:	6a 04                	push   0x4
c0020496:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002049a:	ff d0                	call   eax
c002049c:	83 c4 20             	add    esp,0x20
c002049f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204a3:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00204a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00204ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00204b1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00204b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00204b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00204bb:	83 ec 0c             	sub    esp,0xc
c00204be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00204c2:	e8 4f 28 ff ff       	call   c0012d16 <File::close()>
c00204c7:	83 c4 10             	add    esp,0x10
c00204ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00204ce:	ba 00 00 00 00       	mov    edx,0x0
c00204d3:	83 c4 28             	add    esp,0x28
c00204d6:	5b                   	pop    ebx
c00204d7:	c3                   	ret    

c00204d8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00204d8:	57                   	push   edi
c00204d9:	56                   	push   esi
c00204da:	53                   	push   ebx
c00204db:	81 ec 50 02 00 00    	sub    esp,0x250
c00204e1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00204e9:	74 0a                	je     c00204f5 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00204eb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00204f3:	75 0a                	jne    c00204ff <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00204f5:	b8 04 00 00 00       	mov    eax,0x4
c00204fa:	e9 29 01 00 00       	jmp    c0020628 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204ff:	83 ec 08             	sub    esp,0x8
c0020502:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020509:	50                   	push   eax
c002050a:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020511:	e8 9d 5b fe ff       	call   c00060b3 <f_readdir>
c0020516:	83 c4 10             	add    esp,0x10
c0020519:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020520:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020527:	83 ec 0c             	sub    esp,0xc
c002052a:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020531:	83 c0 1a             	add    eax,0x1a
c0020534:	50                   	push   eax
c0020535:	e8 32 02 fe ff       	call   c000076c <strlen>
c002053a:	83 c4 10             	add    esp,0x10
c002053d:	ba 00 00 00 00       	mov    edx,0x0
c0020542:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020546:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002054a:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020551:	0f b6 c0             	movzx  eax,al
c0020554:	83 e0 10             	and    eax,0x10
c0020557:	74 07                	je     c0020560 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020559:	b8 02 00 00 00       	mov    eax,0x2
c002055e:	eb 05                	jmp    c0020565 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020560:	b8 01 00 00 00       	mov    eax,0x1
c0020565:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020569:	83 ec 08             	sub    esp,0x8
c002056c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020573:	83 c0 1a             	add    eax,0x1a
c0020576:	50                   	push   eax
c0020577:	8d 44 24 10          	lea    eax,[esp+0x10]
c002057b:	83 c0 10             	add    eax,0x10
c002057e:	50                   	push   eax
c002057f:	e8 88 02 fe ff       	call   c000080c <strcpy>
c0020584:	83 c4 10             	add    esp,0x10
c0020587:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002058e:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020595:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020599:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00205a0:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00205a7:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00205ae:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00205b5:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00205bc:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00205c3:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00205ca:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00205d1:	89 c6                	mov    esi,eax
c00205d3:	89 d7                	mov    edi,edx
c00205d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00205d7:	89 c8                	mov    eax,ecx
c00205d9:	89 fa                	mov    edx,edi
c00205db:	89 f3                	mov    ebx,esi
c00205dd:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00205e4:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00205eb:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00205f2:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00205f9:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00205ff:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020606:	84 c0                	test   al,al
c0020608:	75 07                	jne    c0020611 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c002060a:	b8 07 00 00 00       	mov    eax,0x7
c002060f:	eb 17                	jmp    c0020628 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020611:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020618:	85 c0                	test   eax,eax
c002061a:	75 07                	jne    c0020623 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c002061c:	b8 00 00 00 00       	mov    eax,0x0
c0020621:	eb 05                	jmp    c0020628 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020623:	b8 01 00 00 00       	mov    eax,0x1
c0020628:	81 c4 50 02 00 00    	add    esp,0x250
c002062e:	5b                   	pop    ebx
c002062f:	5e                   	pop    esi
c0020630:	5f                   	pop    edi
c0020631:	c3                   	ret    

c0020632 <FAT::read(void*, unsigned long, void*, int*)>:
c0020632:	83 ec 1c             	sub    esp,0x1c
c0020635:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002063a:	74 07                	je     c0020643 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002063c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020641:	75 07                	jne    c002064a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020643:	b8 04 00 00 00       	mov    eax,0x4
c0020648:	eb 3d                	jmp    c0020687 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002064a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002064e:	50                   	push   eax
c002064f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020657:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002065b:	e8 33 4d fe ff       	call   c0005393 <f_read>
c0020660:	83 c4 10             	add    esp,0x10
c0020663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020667:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002066b:	89 c2                	mov    edx,eax
c002066d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020671:	89 10                	mov    DWORD PTR [eax],edx
c0020673:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020677:	85 c0                	test   eax,eax
c0020679:	75 07                	jne    c0020682 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002067b:	b8 00 00 00 00       	mov    eax,0x0
c0020680:	eb 05                	jmp    c0020687 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020682:	b8 01 00 00 00       	mov    eax,0x1
c0020687:	83 c4 1c             	add    esp,0x1c
c002068a:	c3                   	ret    
c002068b:	90                   	nop

c002068c <FAT::write(void*, unsigned long, void*, int*)>:
c002068c:	83 ec 1c             	sub    esp,0x1c
c002068f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020694:	74 07                	je     c002069d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020696:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002069b:	75 07                	jne    c00206a4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002069d:	b8 04 00 00 00       	mov    eax,0x4
c00206a2:	eb 3d                	jmp    c00206e1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00206a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00206a8:	50                   	push   eax
c00206a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00206ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206b5:	e8 59 4f fe ff       	call   c0005613 <f_write>
c00206ba:	83 c4 10             	add    esp,0x10
c00206bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206c5:	89 c2                	mov    edx,eax
c00206c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00206cb:	89 10                	mov    DWORD PTR [eax],edx
c00206cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206d1:	85 c0                	test   eax,eax
c00206d3:	75 07                	jne    c00206dc <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00206d5:	b8 00 00 00 00       	mov    eax,0x0
c00206da:	eb 05                	jmp    c00206e1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00206dc:	b8 01 00 00 00       	mov    eax,0x1
c00206e1:	83 c4 1c             	add    esp,0x1c
c00206e4:	c3                   	ret    
c00206e5:	90                   	nop

c00206e6 <FAT::close(void*)>:
c00206e6:	83 ec 1c             	sub    esp,0x1c
c00206e9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206ee:	75 07                	jne    c00206f7 <FAT::close(void*)+0x11>
c00206f0:	b8 04 00 00 00       	mov    eax,0x4
c00206f5:	eb 36                	jmp    c002072d <FAT::close(void*)+0x47>
c00206f7:	83 ec 0c             	sub    esp,0xc
c00206fa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206fe:	e8 a6 53 fe ff       	call   c0005aa9 <f_close>
c0020703:	83 c4 10             	add    esp,0x10
c0020706:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002070a:	83 ec 0c             	sub    esp,0xc
c002070d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020711:	e8 93 ee fe ff       	call   c000f5a9 <free>
c0020716:	83 c4 10             	add    esp,0x10
c0020719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002071d:	85 c0                	test   eax,eax
c002071f:	75 07                	jne    c0020728 <FAT::close(void*)+0x42>
c0020721:	b8 00 00 00 00       	mov    eax,0x0
c0020726:	eb 05                	jmp    c002072d <FAT::close(void*)+0x47>
c0020728:	b8 01 00 00 00       	mov    eax,0x1
c002072d:	83 c4 1c             	add    esp,0x1c
c0020730:	c3                   	ret    
c0020731:	90                   	nop

c0020732 <FAT::closeDir(void*)>:
c0020732:	83 ec 1c             	sub    esp,0x1c
c0020735:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002073a:	75 07                	jne    c0020743 <FAT::closeDir(void*)+0x11>
c002073c:	b8 04 00 00 00       	mov    eax,0x4
c0020741:	eb 36                	jmp    c0020779 <FAT::closeDir(void*)+0x47>
c0020743:	83 ec 0c             	sub    esp,0xc
c0020746:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002074a:	e8 42 59 fe ff       	call   c0006091 <f_closedir>
c002074f:	83 c4 10             	add    esp,0x10
c0020752:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020756:	83 ec 0c             	sub    esp,0xc
c0020759:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002075d:	e8 47 ee fe ff       	call   c000f5a9 <free>
c0020762:	83 c4 10             	add    esp,0x10
c0020765:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020769:	85 c0                	test   eax,eax
c002076b:	75 07                	jne    c0020774 <FAT::closeDir(void*)+0x42>
c002076d:	b8 00 00 00 00       	mov    eax,0x0
c0020772:	eb 05                	jmp    c0020779 <FAT::closeDir(void*)+0x47>
c0020774:	b8 01 00 00 00       	mov    eax,0x1
c0020779:	83 c4 1c             	add    esp,0x1c
c002077c:	c3                   	ret    
c002077d:	90                   	nop

c002077e <FAT::seek(void*, unsigned long long)>:
c002077e:	83 ec 2c             	sub    esp,0x2c
c0020781:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020785:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020789:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002078d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020791:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020796:	75 07                	jne    c002079f <FAT::seek(void*, unsigned long long)+0x21>
c0020798:	b8 04 00 00 00       	mov    eax,0x4
c002079d:	eb 2f                	jmp    c00207ce <FAT::seek(void*, unsigned long long)+0x50>
c002079f:	83 ec 04             	sub    esp,0x4
c00207a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00207a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00207aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00207ae:	e8 25 53 fe ff       	call   c0005ad8 <f_lseek>
c00207b3:	83 c4 10             	add    esp,0x10
c00207b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00207ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207be:	85 c0                	test   eax,eax
c00207c0:	75 07                	jne    c00207c9 <FAT::seek(void*, unsigned long long)+0x4b>
c00207c2:	b8 00 00 00 00       	mov    eax,0x0
c00207c7:	eb 05                	jmp    c00207ce <FAT::seek(void*, unsigned long long)+0x50>
c00207c9:	b8 01 00 00 00       	mov    eax,0x1
c00207ce:	83 c4 2c             	add    esp,0x2c
c00207d1:	c3                   	ret    

c00207d2 <fatWrapperReadDisk>:
c00207d2:	83 ec 1c             	sub    esp,0x1c
c00207d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207d9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00207e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207f1:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c00207f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207fc:	83 ec 0c             	sub    esp,0xc
c00207ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020803:	52                   	push   edx
c0020804:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002080c:	50                   	push   eax
c002080d:	e8 38 58 ff ff       	call   c001604a <LogicalDisk::read(unsigned long long, int, void*)>
c0020812:	83 c4 20             	add    esp,0x20
c0020815:	83 c4 1c             	add    esp,0x1c
c0020818:	c3                   	ret    

c0020819 <fatWrapperWriteDisk>:
c0020819:	83 ec 1c             	sub    esp,0x1c
c002081c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020820:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020824:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020828:	89 04 24             	mov    DWORD PTR [esp],eax
c002082b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002082f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020833:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020838:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c002083f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020843:	83 ec 0c             	sub    esp,0xc
c0020846:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002084a:	52                   	push   edx
c002084b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002084f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020853:	50                   	push   eax
c0020854:	e8 5d 58 ff ff       	call   c00160b6 <LogicalDisk::write(unsigned long long, int, void*)>
c0020859:	83 c4 20             	add    esp,0x20
c002085c:	83 c4 1c             	add    esp,0x1c
c002085f:	c3                   	ret    

c0020860 <fatWrapperIoctl>:
c0020860:	53                   	push   ebx
c0020861:	83 ec 28             	sub    esp,0x28
c0020864:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020868:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002086c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020870:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020874:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020879:	75 31                	jne    c00208ac <fatWrapperIoctl+0x4c>
c002087b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002087f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020883:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020888:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c002088f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020895:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002089b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002089f:	66 89 02             	mov    WORD PTR [edx],ax
c00208a2:	b8 00 00 00 00       	mov    eax,0x0
c00208a7:	e9 b2 00 00 00       	jmp    c002095e <fatWrapperIoctl+0xfe>
c00208ac:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00208b1:	75 6a                	jne    c002091d <fatWrapperIoctl+0xbd>
c00208b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208bb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208c0:	8b 04 85 00 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2000]
c00208c7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208cd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00208d3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00208d9:	89 c8                	mov    eax,ecx
c00208db:	89 da                	mov    edx,ebx
c00208dd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00208e1:	c1 e0 0a             	shl    eax,0xa
c00208e4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00208e9:	8b 0c 8d 00 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2000]
c00208f0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00208f6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00208fc:	89 cb                	mov    ebx,ecx
c00208fe:	c1 fb 1f             	sar    ebx,0x1f
c0020901:	53                   	push   ebx
c0020902:	51                   	push   ecx
c0020903:	52                   	push   edx
c0020904:	50                   	push   eax
c0020905:	e8 2a 5e 00 00       	call   c0026734 <__udivdi3>
c002090a:	83 c4 10             	add    esp,0x10
c002090d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020911:	89 01                	mov    DWORD PTR [ecx],eax
c0020913:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020916:	b8 00 00 00 00       	mov    eax,0x0
c002091b:	eb 41                	jmp    c002095e <fatWrapperIoctl+0xfe>
c002091d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020922:	75 07                	jne    c002092b <fatWrapperIoctl+0xcb>
c0020924:	b8 00 00 00 00       	mov    eax,0x0
c0020929:	eb 33                	jmp    c002095e <fatWrapperIoctl+0xfe>
c002092b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020930:	75 19                	jne    c002094b <fatWrapperIoctl+0xeb>
c0020932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020936:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002093a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002093e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020944:	b8 00 00 00 00       	mov    eax,0x0
c0020949:	eb 13                	jmp    c002095e <fatWrapperIoctl+0xfe>
c002094b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020950:	75 07                	jne    c0020959 <fatWrapperIoctl+0xf9>
c0020952:	b8 00 00 00 00       	mov    eax,0x0
c0020957:	eb 05                	jmp    c002095e <fatWrapperIoctl+0xfe>
c0020959:	b8 04 00 00 00       	mov    eax,0x4
c002095e:	83 c4 28             	add    esp,0x28
c0020961:	5b                   	pop    ebx
c0020962:	c3                   	ret    
c0020963:	90                   	nop

c0020964 <FAT::FAT()>:
c0020964:	83 ec 1c             	sub    esp,0x1c
c0020967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002096b:	83 ec 0c             	sub    esp,0xc
c002096e:	50                   	push   eax
c002096f:	e8 8c 20 ff ff       	call   c0012a00 <Filesystem::Filesystem()>
c0020974:	83 c4 10             	add    esp,0x10
c0020977:	ba fc be 02 c0       	mov    edx,0xc002befc
c002097c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020980:	89 10                	mov    DWORD PTR [eax],edx
c0020982:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c002098c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020994:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020999:	7f 15                	jg     c00209b0 <FAT::FAT()+0x4c>
c002099b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002099f:	c7 04 85 40 10 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcefc0],0xffffffff
c00209aa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00209ae:	eb e4                	jmp    c0020994 <FAT::FAT()+0x30>
c00209b0:	90                   	nop
c00209b1:	83 c4 1c             	add    esp,0x1c
c00209b4:	c3                   	ret    
c00209b5:	90                   	nop

c00209b6 <FAT::fixFilepath(char*)>:
c00209b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209ba:	8a 00                	mov    al,BYTE PTR [eax]
c00209bc:	3c 40                	cmp    al,0x40
c00209be:	7e 2c                	jle    c00209ec <FAT::fixFilepath(char*)+0x36>
c00209c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209c4:	8a 00                	mov    al,BYTE PTR [eax]
c00209c6:	83 e8 41             	sub    eax,0x41
c00209c9:	88 c2                	mov    dl,al
c00209cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209cf:	88 10                	mov    BYTE PTR [eax],dl
c00209d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209d5:	8a 00                	mov    al,BYTE PTR [eax]
c00209d7:	0f be c0             	movsx  eax,al
c00209da:	8b 04 85 40 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefc0]
c00209e1:	83 c0 30             	add    eax,0x30
c00209e4:	88 c2                	mov    dl,al
c00209e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209ea:	88 10                	mov    BYTE PTR [eax],dl
c00209ec:	90                   	nop
c00209ed:	c3                   	ret    

c00209ee <FAT::open(char const*, void**, FileOpenMode)>:
c00209ee:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209f4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209fc:	74 0a                	je     c0020a08 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00209fe:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020a06:	75 0a                	jne    c0020a12 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020a08:	b8 04 00 00 00       	mov    eax,0x4
c0020a0d:	e9 fd 00 00 00       	jmp    c0020b0f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020a12:	83 ec 08             	sub    esp,0x8
c0020a15:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a20:	50                   	push   eax
c0020a21:	e8 e6 fd fd ff       	call   c000080c <strcpy>
c0020a26:	83 c4 10             	add    esp,0x10
c0020a29:	83 ec 08             	sub    esp,0x8
c0020a2c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020a30:	50                   	push   eax
c0020a31:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a38:	e8 79 ff ff ff       	call   c00209b6 <FAT::fixFilepath(char*)>
c0020a3d:	83 c4 10             	add    esp,0x10
c0020a40:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020a48:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a4f:	83 e0 01             	and    eax,0x1
c0020a52:	74 08                	je     c0020a5c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020a54:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a5c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a63:	83 e0 04             	and    eax,0x4
c0020a66:	74 10                	je     c0020a78 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020a68:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020a70:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a7f:	83 e0 02             	and    eax,0x2
c0020a82:	74 08                	je     c0020a8c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020a84:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a8c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a93:	83 e0 08             	and    eax,0x8
c0020a96:	74 08                	je     c0020aa0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020a98:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020aa0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020aa7:	83 e0 10             	and    eax,0x10
c0020aaa:	74 08                	je     c0020ab4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020aac:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020ab4:	83 ec 0c             	sub    esp,0xc
c0020ab7:	68 50 02 00 00       	push   0x250
c0020abc:	e8 d8 ea fe ff       	call   c000f599 <malloc>
c0020ac1:	83 c4 10             	add    esp,0x10
c0020ac4:	89 c2                	mov    edx,eax
c0020ac6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020acd:	89 10                	mov    DWORD PTR [eax],edx
c0020acf:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020ad7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ade:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ae0:	83 ec 04             	sub    esp,0x4
c0020ae3:	52                   	push   edx
c0020ae4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020ae8:	52                   	push   edx
c0020ae9:	50                   	push   eax
c0020aea:	e8 68 44 fe ff       	call   c0004f57 <f_open>
c0020aef:	83 c4 10             	add    esp,0x10
c0020af2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020af9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020b01:	74 07                	je     c0020b0a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020b03:	b8 01 00 00 00       	mov    eax,0x1
c0020b08:	eb 05                	jmp    c0020b0f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020b0a:	b8 00 00 00 00       	mov    eax,0x0
c0020b0f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b15:	c3                   	ret    

c0020b16 <FAT::openDir(char const*, void**)>:
c0020b16:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b1c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b24:	74 0a                	je     c0020b30 <FAT::openDir(char const*, void**)+0x1a>
c0020b26:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b2e:	75 07                	jne    c0020b37 <FAT::openDir(char const*, void**)+0x21>
c0020b30:	b8 04 00 00 00       	mov    eax,0x4
c0020b35:	eb 7d                	jmp    c0020bb4 <FAT::openDir(char const*, void**)+0x9e>
c0020b37:	83 ec 08             	sub    esp,0x8
c0020b3a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b41:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b45:	50                   	push   eax
c0020b46:	e8 c1 fc fd ff       	call   c000080c <strcpy>
c0020b4b:	83 c4 10             	add    esp,0x10
c0020b4e:	83 ec 08             	sub    esp,0x8
c0020b51:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b55:	50                   	push   eax
c0020b56:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b5d:	e8 54 fe ff ff       	call   c00209b6 <FAT::fixFilepath(char*)>
c0020b62:	83 c4 10             	add    esp,0x10
c0020b65:	83 ec 0c             	sub    esp,0xc
c0020b68:	6a 4c                	push   0x4c
c0020b6a:	e8 2a ea fe ff       	call   c000f599 <malloc>
c0020b6f:	83 c4 10             	add    esp,0x10
c0020b72:	89 c2                	mov    edx,eax
c0020b74:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b7b:	89 10                	mov    DWORD PTR [eax],edx
c0020b7d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b86:	83 ec 08             	sub    esp,0x8
c0020b89:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020b8d:	52                   	push   edx
c0020b8e:	50                   	push   eax
c0020b8f:	e8 fb 53 fe ff       	call   c0005f8f <f_opendir>
c0020b94:	83 c4 10             	add    esp,0x10
c0020b97:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b9e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020ba6:	74 07                	je     c0020baf <FAT::openDir(char const*, void**)+0x99>
c0020ba8:	b8 01 00 00 00       	mov    eax,0x1
c0020bad:	eb 05                	jmp    c0020bb4 <FAT::openDir(char const*, void**)+0x9e>
c0020baf:	b8 00 00 00 00       	mov    eax,0x0
c0020bb4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020bba:	c3                   	ret    
c0020bbb:	90                   	nop

c0020bbc <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020bbc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020bc2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020bca:	75 0a                	jne    c0020bd6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020bcc:	b8 04 00 00 00       	mov    eax,0x4
c0020bd1:	e9 c9 00 00 00       	jmp    c0020c9f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bd6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020bde:	75 0a                	jne    c0020bea <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020be0:	b8 04 00 00 00       	mov    eax,0x4
c0020be5:	e9 b5 00 00 00       	jmp    c0020c9f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bea:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020bf2:	75 0a                	jne    c0020bfe <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020bf4:	b8 04 00 00 00       	mov    eax,0x4
c0020bf9:	e9 a1 00 00 00       	jmp    c0020c9f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bfe:	83 ec 08             	sub    esp,0x8
c0020c01:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c08:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c0f:	50                   	push   eax
c0020c10:	e8 f7 fb fd ff       	call   c000080c <strcpy>
c0020c15:	83 c4 10             	add    esp,0x10
c0020c18:	83 ec 08             	sub    esp,0x8
c0020c1b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020c22:	50                   	push   eax
c0020c23:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c2a:	e8 87 fd ff ff       	call   c00209b6 <FAT::fixFilepath(char*)>
c0020c2f:	83 c4 10             	add    esp,0x10
c0020c32:	83 ec 08             	sub    esp,0x8
c0020c35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c39:	50                   	push   eax
c0020c3a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c41:	50                   	push   eax
c0020c42:	e8 07 55 fe ff       	call   c000614e <f_stat>
c0020c47:	83 c4 10             	add    esp,0x10
c0020c4a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020c51:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020c58:	85 c0                	test   eax,eax
c0020c5a:	74 07                	je     c0020c63 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c5c:	83 f8 04             	cmp    eax,0x4
c0020c5f:	74 32                	je     c0020c93 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c61:	eb 37                	jmp    c0020c9a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020c63:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c67:	0f b6 c0             	movzx  eax,al
c0020c6a:	83 e0 10             	and    eax,0x10
c0020c6d:	0f 95 c2             	setne  dl
c0020c70:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020c77:	88 10                	mov    BYTE PTR [eax],dl
c0020c79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c80:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020c87:	89 01                	mov    DWORD PTR [ecx],eax
c0020c89:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c8c:	b8 00 00 00 00       	mov    eax,0x0
c0020c91:	eb 0c                	jmp    c0020c9f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c93:	b8 02 00 00 00       	mov    eax,0x2
c0020c98:	eb 05                	jmp    c0020c9f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c9a:	b8 01 00 00 00       	mov    eax,0x1
c0020c9f:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ca5:	c3                   	ret    

c0020ca6 <FAT::unlink(char const*)>:
c0020ca6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020cac:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020cb4:	75 07                	jne    c0020cbd <FAT::unlink(char const*)+0x17>
c0020cb6:	b8 04 00 00 00       	mov    eax,0x4
c0020cbb:	eb 5c                	jmp    c0020d19 <FAT::unlink(char const*)+0x73>
c0020cbd:	83 ec 08             	sub    esp,0x8
c0020cc0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020cc7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ccb:	50                   	push   eax
c0020ccc:	e8 3b fb fd ff       	call   c000080c <strcpy>
c0020cd1:	83 c4 10             	add    esp,0x10
c0020cd4:	83 ec 08             	sub    esp,0x8
c0020cd7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020cdb:	50                   	push   eax
c0020cdc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ce3:	e8 ce fc ff ff       	call   c00209b6 <FAT::fixFilepath(char*)>
c0020ce8:	83 c4 10             	add    esp,0x10
c0020ceb:	83 ec 0c             	sub    esp,0xc
c0020cee:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cf2:	50                   	push   eax
c0020cf3:	e8 a8 57 fe ff       	call   c00064a0 <f_unlink>
c0020cf8:	83 c4 10             	add    esp,0x10
c0020cfb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020d02:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020d09:	85 c0                	test   eax,eax
c0020d0b:	75 07                	jne    c0020d14 <FAT::unlink(char const*)+0x6e>
c0020d0d:	b8 00 00 00 00       	mov    eax,0x0
c0020d12:	eb 05                	jmp    c0020d19 <FAT::unlink(char const*)+0x73>
c0020d14:	b8 01 00 00 00       	mov    eax,0x1
c0020d19:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d1f:	c3                   	ret    

c0020d20 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020d20:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020d26:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020d2d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020d34:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d38:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d3c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020d44:	75 0a                	jne    c0020d50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020d46:	b8 04 00 00 00       	mov    eax,0x4
c0020d4b:	e9 1c 01 00 00       	jmp    c0020e6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d50:	83 ec 08             	sub    esp,0x8
c0020d53:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d5a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d5e:	50                   	push   eax
c0020d5f:	e8 a8 fa fd ff       	call   c000080c <strcpy>
c0020d64:	83 c4 10             	add    esp,0x10
c0020d67:	83 ec 08             	sub    esp,0x8
c0020d6a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020d6e:	50                   	push   eax
c0020d6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d76:	e8 3b fc ff ff       	call   c00209b6 <FAT::fixFilepath(char*)>
c0020d7b:	83 c4 10             	add    esp,0x10
c0020d7e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020d86:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020d8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d93:	83 e0 01             	and    eax,0x1
c0020d96:	74 08                	je     c0020da0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020d98:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020da0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020da5:	83 e0 02             	and    eax,0x2
c0020da8:	74 08                	je     c0020db2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020daa:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020db2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020db7:	83 e0 04             	and    eax,0x4
c0020dba:	74 08                	je     c0020dc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020dbc:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020dc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020dc9:	83 e0 08             	and    eax,0x8
c0020dcc:	74 08                	je     c0020dd6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020dce:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020dd6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ddb:	83 e0 01             	and    eax,0x1
c0020dde:	74 08                	je     c0020de8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020de0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020de8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ded:	83 e0 02             	and    eax,0x2
c0020df0:	74 08                	je     c0020dfa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020df2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020dfa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dff:	83 e0 04             	and    eax,0x4
c0020e02:	74 08                	je     c0020e0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020e04:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020e0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e11:	83 e0 08             	and    eax,0x8
c0020e14:	74 08                	je     c0020e1e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020e16:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020e1e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020e25:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020e2c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020e34:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020e3c:	83 ec 04             	sub    esp,0x4
c0020e3f:	52                   	push   edx
c0020e40:	50                   	push   eax
c0020e41:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e45:	50                   	push   eax
c0020e46:	e8 f7 5c fe ff       	call   c0006b42 <f_chmod>
c0020e4b:	83 c4 10             	add    esp,0x10
c0020e4e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020e55:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e5c:	85 c0                	test   eax,eax
c0020e5e:	75 07                	jne    c0020e67 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e60:	b8 00 00 00 00       	mov    eax,0x0
c0020e65:	eb 05                	jmp    c0020e6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e67:	b8 01 00 00 00       	mov    eax,0x1
c0020e6c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020e72:	c3                   	ret    
c0020e73:	90                   	nop

c0020e74 <FAT::rename(char const*, char const*)>:
c0020e74:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020e7a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020e82:	74 0a                	je     c0020e8e <FAT::rename(char const*, char const*)+0x1a>
c0020e84:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020e8c:	75 0a                	jne    c0020e98 <FAT::rename(char const*, char const*)+0x24>
c0020e8e:	b8 04 00 00 00       	mov    eax,0x4
c0020e93:	e9 98 00 00 00       	jmp    c0020f30 <FAT::rename(char const*, char const*)+0xbc>
c0020e98:	83 ec 08             	sub    esp,0x8
c0020e9b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ea2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ea9:	50                   	push   eax
c0020eaa:	e8 5d f9 fd ff       	call   c000080c <strcpy>
c0020eaf:	83 c4 10             	add    esp,0x10
c0020eb2:	83 ec 08             	sub    esp,0x8
c0020eb5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020ebc:	50                   	push   eax
c0020ebd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ec4:	e8 ed fa ff ff       	call   c00209b6 <FAT::fixFilepath(char*)>
c0020ec9:	83 c4 10             	add    esp,0x10
c0020ecc:	83 ec 08             	sub    esp,0x8
c0020ecf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020ed6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020eda:	50                   	push   eax
c0020edb:	e8 2c f9 fd ff       	call   c000080c <strcpy>
c0020ee0:	83 c4 10             	add    esp,0x10
c0020ee3:	83 ec 08             	sub    esp,0x8
c0020ee6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020eea:	50                   	push   eax
c0020eeb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ef2:	e8 bf fa ff ff       	call   c00209b6 <FAT::fixFilepath(char*)>
c0020ef7:	83 c4 10             	add    esp,0x10
c0020efa:	83 ec 08             	sub    esp,0x8
c0020efd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f01:	50                   	push   eax
c0020f02:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020f09:	50                   	push   eax
c0020f0a:	e8 40 59 fe ff       	call   c000684f <f_rename>
c0020f0f:	83 c4 10             	add    esp,0x10
c0020f12:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020f19:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020f20:	85 c0                	test   eax,eax
c0020f22:	75 07                	jne    c0020f2b <FAT::rename(char const*, char const*)+0xb7>
c0020f24:	b8 00 00 00 00       	mov    eax,0x0
c0020f29:	eb 05                	jmp    c0020f30 <FAT::rename(char const*, char const*)+0xbc>
c0020f2b:	b8 01 00 00 00       	mov    eax,0x1
c0020f30:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020f36:	c3                   	ret    
c0020f37:	90                   	nop

c0020f38 <FAT::mkdir(char const*)>:
c0020f38:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f3e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f46:	75 07                	jne    c0020f4f <FAT::mkdir(char const*)+0x17>
c0020f48:	b8 04 00 00 00       	mov    eax,0x4
c0020f4d:	eb 5c                	jmp    c0020fab <FAT::mkdir(char const*)+0x73>
c0020f4f:	83 ec 08             	sub    esp,0x8
c0020f52:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f5d:	50                   	push   eax
c0020f5e:	e8 a9 f8 fd ff       	call   c000080c <strcpy>
c0020f63:	83 c4 10             	add    esp,0x10
c0020f66:	83 ec 08             	sub    esp,0x8
c0020f69:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f6d:	50                   	push   eax
c0020f6e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f75:	e8 3c fa ff ff       	call   c00209b6 <FAT::fixFilepath(char*)>
c0020f7a:	83 c4 10             	add    esp,0x10
c0020f7d:	83 ec 0c             	sub    esp,0xc
c0020f80:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f84:	50                   	push   eax
c0020f85:	e8 99 56 fe ff       	call   c0006623 <f_mkdir>
c0020f8a:	83 c4 10             	add    esp,0x10
c0020f8d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f94:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f9b:	85 c0                	test   eax,eax
c0020f9d:	75 07                	jne    c0020fa6 <FAT::mkdir(char const*)+0x6e>
c0020f9f:	b8 00 00 00 00       	mov    eax,0x0
c0020fa4:	eb 05                	jmp    c0020fab <FAT::mkdir(char const*)+0x73>
c0020fa6:	b8 01 00 00 00       	mov    eax,0x1
c0020fab:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020fb1:	c3                   	ret    

c0020fb2 <FAT::exists(char const*)>:
c0020fb2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020fb8:	83 ec 08             	sub    esp,0x8
c0020fbb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020fc2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fc6:	50                   	push   eax
c0020fc7:	e8 40 f8 fd ff       	call   c000080c <strcpy>
c0020fcc:	83 c4 10             	add    esp,0x10
c0020fcf:	83 ec 08             	sub    esp,0x8
c0020fd2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fd6:	50                   	push   eax
c0020fd7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020fde:	e8 d3 f9 ff ff       	call   c00209b6 <FAT::fixFilepath(char*)>
c0020fe3:	83 c4 10             	add    esp,0x10
c0020fe6:	83 ec 08             	sub    esp,0x8
c0020fe9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020ff0:	50                   	push   eax
c0020ff1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ff5:	50                   	push   eax
c0020ff6:	e8 53 51 fe ff       	call   c000614e <f_stat>
c0020ffb:	83 c4 10             	add    esp,0x10
c0020ffe:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021005:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002100c:	85 c0                	test   eax,eax
c002100e:	75 04                	jne    c0021014 <FAT::exists(char const*)+0x62>
c0021010:	b0 01                	mov    al,0x1
c0021012:	eb 02                	jmp    c0021016 <FAT::exists(char const*)+0x64>
c0021014:	b0 00                	mov    al,0x0
c0021016:	81 c4 2c 02 00 00    	add    esp,0x22c
c002101c:	c3                   	ret    
c002101d:	90                   	nop

c002101e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002101e:	b8 08 00 00 00       	mov    eax,0x8
c0021023:	c3                   	ret    

c0021024 <ISO9660::seek(void*, unsigned long long)>:
c0021024:	53                   	push   ebx
c0021025:	b8 04 00 00 00       	mov    eax,0x4
c002102a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002102e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021032:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021036:	85 d2                	test   edx,edx
c0021038:	74 17                	je     c0021051 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002103a:	89 c8                	mov    eax,ecx
c002103c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002103f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021042:	b8 01 00 00 00       	mov    eax,0x1
c0021047:	73 08                	jae    c0021051 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021049:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002104c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002104f:	31 c0                	xor    eax,eax
c0021051:	5b                   	pop    ebx
c0021052:	c3                   	ret    
c0021053:	90                   	nop

c0021054 <ISO9660::tell(void*, unsigned long long*)>:
c0021054:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021058:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002105c:	85 d2                	test   edx,edx
c002105e:	74 12                	je     c0021072 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021060:	85 c0                	test   eax,eax
c0021062:	74 0e                	je     c0021072 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021064:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021067:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002106a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002106d:	89 10                	mov    DWORD PTR [eax],edx
c002106f:	31 c0                	xor    eax,eax
c0021071:	c3                   	ret    
c0021072:	b8 04 00 00 00       	mov    eax,0x4
c0021077:	c3                   	ret    

c0021078 <ISO9660::getName()>:
c0021078:	b8 5c bf 02 c0       	mov    eax,0xc002bf5c
c002107d:	c3                   	ret    

c002107e <ISO9660::stat(void*, unsigned long long*)>:
c002107e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021082:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021086:	85 d2                	test   edx,edx
c0021088:	74 12                	je     c002109c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002108a:	85 c0                	test   eax,eax
c002108c:	74 0e                	je     c002109c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002108e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021091:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021094:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021097:	89 10                	mov    DWORD PTR [eax],edx
c0021099:	31 c0                	xor    eax,eax
c002109b:	c3                   	ret    
c002109c:	b8 04 00 00 00       	mov    eax,0x4
c00210a1:	c3                   	ret    

c00210a2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00210a2:	b8 01 00 00 00       	mov    eax,0x1
c00210a7:	c3                   	ret    

c00210a8 <ISO9660::unlink(char const*)>:
c00210a8:	b8 01 00 00 00       	mov    eax,0x1
c00210ad:	c3                   	ret    

c00210ae <ISO9660::write(void*, unsigned long, void*, int*)>:
c00210ae:	b8 01 00 00 00       	mov    eax,0x1
c00210b3:	c3                   	ret    

c00210b4 <ISO9660::rename(char const*, char const*)>:
c00210b4:	b8 01 00 00 00       	mov    eax,0x1
c00210b9:	c3                   	ret    

c00210ba <ISO9660::mkdir(char const*)>:
c00210ba:	b8 01 00 00 00       	mov    eax,0x1
c00210bf:	c3                   	ret    

c00210c0 <ISO9660::close(void*)>:
c00210c0:	83 ec 0c             	sub    esp,0xc
c00210c3:	b8 04 00 00 00       	mov    eax,0x4
c00210c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210cc:	85 d2                	test   edx,edx
c00210ce:	74 0e                	je     c00210de <ISO9660::close(void*)+0x1e>
c00210d0:	83 ec 0c             	sub    esp,0xc
c00210d3:	52                   	push   edx
c00210d4:	e8 d0 e4 fe ff       	call   c000f5a9 <free>
c00210d9:	83 c4 10             	add    esp,0x10
c00210dc:	31 c0                	xor    eax,eax
c00210de:	83 c4 0c             	add    esp,0xc
c00210e1:	c3                   	ret    

c00210e2 <ISO9660::closeDir(void*)>:
c00210e2:	83 ec 0c             	sub    esp,0xc
c00210e5:	b8 04 00 00 00       	mov    eax,0x4
c00210ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210ee:	85 d2                	test   edx,edx
c00210f0:	74 0e                	je     c0021100 <ISO9660::closeDir(void*)+0x1e>
c00210f2:	83 ec 0c             	sub    esp,0xc
c00210f5:	52                   	push   edx
c00210f6:	e8 ae e4 fe ff       	call   c000f5a9 <free>
c00210fb:	83 c4 10             	add    esp,0x10
c00210fe:	31 c0                	xor    eax,eax
c0021100:	83 c4 0c             	add    esp,0xc
c0021103:	c3                   	ret    

c0021104 <ISO9660::~ISO9660()>:
c0021104:	83 ec 0c             	sub    esp,0xc
c0021107:	ba 80 bf 02 c0       	mov    edx,0xc002bf80
c002110c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021110:	89 10                	mov    DWORD PTR [eax],edx
c0021112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021116:	83 ec 0c             	sub    esp,0xc
c0021119:	50                   	push   eax
c002111a:	e8 05 19 ff ff       	call   c0012a24 <Filesystem::~Filesystem()>
c002111f:	83 c4 10             	add    esp,0x10
c0021122:	90                   	nop
c0021123:	83 c4 0c             	add    esp,0xc
c0021126:	c3                   	ret    
c0021127:	90                   	nop

c0021128 <ISO9660::~ISO9660()>:
c0021128:	83 ec 0c             	sub    esp,0xc
c002112b:	83 ec 0c             	sub    esp,0xc
c002112e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021132:	e8 cd ff ff ff       	call   c0021104 <ISO9660::~ISO9660()>
c0021137:	83 c4 10             	add    esp,0x10
c002113a:	83 ec 08             	sub    esp,0x8
c002113d:	6a 08                	push   0x8
c002113f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021143:	e8 d5 14 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0021148:	83 c4 10             	add    esp,0x10
c002114b:	83 c4 0c             	add    esp,0xc
c002114e:	c3                   	ret    

c002114f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002114f:	55                   	push   ebp
c0021150:	31 c9                	xor    ecx,ecx
c0021152:	57                   	push   edi
c0021153:	56                   	push   esi
c0021154:	53                   	push   ebx
c0021155:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021159:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002115d:	89 eb                	mov    ebx,ebp
c002115f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021163:	39 ce                	cmp    esi,ecx
c0021165:	7e 17                	jle    c002117e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021167:	31 d2                	xor    edx,edx
c0021169:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002116d:	7d 13                	jge    c0021182 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002116f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021173:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021176:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021179:	75 0d                	jne    c0021188 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002117b:	42                   	inc    edx
c002117c:	eb eb                	jmp    c0021169 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002117e:	31 c0                	xor    eax,eax
c0021180:	eb 0a                	jmp    c002118c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021182:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021186:	eb 04                	jmp    c002118c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021188:	41                   	inc    ecx
c0021189:	43                   	inc    ebx
c002118a:	eb d7                	jmp    c0021163 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002118c:	5b                   	pop    ebx
c002118d:	5e                   	pop    esi
c002118e:	5f                   	pop    edi
c002118f:	5d                   	pop    ebp
c0021190:	c3                   	ret    

c0021191 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021191:	57                   	push   edi
c0021192:	56                   	push   esi
c0021193:	53                   	push   ebx
c0021194:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021198:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002119c:	39 0d 20 11 03 c0    	cmp    DWORD PTR ds:0xc0031120,ecx
c00211a2:	75 08                	jne    c00211ac <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00211a4:	38 05 94 cf 02 c0    	cmp    BYTE PTR ds:0xc002cf94,al
c00211aa:	74 2b                	je     c00211d7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00211ac:	83 ec 0c             	sub    esp,0xc
c00211af:	a2 94 cf 02 c0       	mov    ds:0xc002cf94,al
c00211b4:	68 40 11 03 c0       	push   0xc0031140
c00211b9:	0f be c0             	movsx  eax,al
c00211bc:	6a 01                	push   0x1
c00211be:	89 0d 20 11 03 c0    	mov    DWORD PTR ds:0xc0031120,ecx
c00211c4:	31 db                	xor    ebx,ebx
c00211c6:	53                   	push   ebx
c00211c7:	51                   	push   ecx
c00211c8:	ff 34 85 fc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2104]
c00211cf:	e8 76 4e ff ff       	call   c001604a <LogicalDisk::read(unsigned long long, int, void*)>
c00211d4:	83 c4 20             	add    esp,0x20
c00211d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00211db:	be 40 11 03 c0       	mov    esi,0xc0031140
c00211e0:	b9 00 08 00 00       	mov    ecx,0x800
c00211e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211e7:	5b                   	pop    ebx
c00211e8:	5e                   	pop    esi
c00211e9:	5f                   	pop    edi
c00211ea:	c3                   	ret    
c00211eb:	90                   	nop

c00211ec <ISO9660::tryMount(LogicalDisk*, int)>:
c00211ec:	81 ec 10 08 00 00    	sub    esp,0x810
c00211f2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00211f9:	83 c0 41             	add    eax,0x41
c00211fc:	0f be c0             	movsx  eax,al
c00211ff:	50                   	push   eax
c0021200:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021204:	50                   	push   eax
c0021205:	6a 10                	push   0x10
c0021207:	e8 85 ff ff ff       	call   c0021191 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002120c:	83 c4 10             	add    esp,0x10
c002120f:	31 c0                	xor    eax,eax
c0021211:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021216:	75 1d                	jne    c0021235 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021218:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002121d:	75 16                	jne    c0021235 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002121f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021224:	75 0f                	jne    c0021235 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021226:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002122b:	75 08                	jne    c0021235 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002122d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021232:	0f 94 c0             	sete   al
c0021235:	81 c4 0c 08 00 00    	add    esp,0x80c
c002123b:	c3                   	ret    

c002123c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002123c:	55                   	push   ebp
c002123d:	57                   	push   edi
c002123e:	56                   	push   esi
c002123f:	53                   	push   ebx
c0021240:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021246:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002124d:	85 ed                	test   ebp,ebp
c002124f:	0f 84 da 01 00 00    	je     c002142f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021255:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002125d:	0f 84 cc 01 00 00    	je     c002142f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021263:	b8 01 00 00 00       	mov    eax,0x1
c0021268:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002126c:	0f 85 c2 01 00 00    	jne    c0021434 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021272:	31 d2                	xor    edx,edx
c0021274:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002127b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002127e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021281:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021284:	89 04 24             	mov    DWORD PTR [esp],eax
c0021287:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002128b:	01 c8                	add    eax,ecx
c002128d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021290:	11 da                	adc    edx,ebx
c0021292:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021296:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002129a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002129e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00212a2:	19 d7                	sbb    edi,edx
c00212a4:	72 11                	jb     c00212b7 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00212a6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00212a9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00212ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00212b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00212b5:	eb 0c                	jmp    c00212c3 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00212b7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00212bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00212bf:	29 ce                	sub    esi,ecx
c00212c1:	19 df                	sbb    edi,ebx
c00212c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00212c6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00212c9:	0f a4 c2 0b          	shld   edx,eax,0xb
c00212cd:	c1 e0 0b             	shl    eax,0xb
c00212d0:	01 c8                	add    eax,ecx
c00212d2:	11 da                	adc    edx,ebx
c00212d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00212d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212db:	51                   	push   ecx
c00212dc:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212e0:	50                   	push   eax
c00212e1:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00212e5:	53                   	push   ebx
c00212e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00212ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212ee:	0f ac d0 0b          	shrd   eax,edx,0xb
c00212f2:	50                   	push   eax
c00212f3:	e8 99 fe ff ff       	call   c0021191 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212f8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00212fb:	b8 00 08 00 00       	mov    eax,0x800
c0021300:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021306:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c002130a:	29 d0                	sub    eax,edx
c002130c:	83 c4 10             	add    esp,0x10
c002130f:	89 f9                	mov    ecx,edi
c0021311:	39 c6                	cmp    esi,eax
c0021313:	83 d9 00             	sbb    ecx,0x0
c0021316:	7d 1b                	jge    c0021333 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021318:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002131d:	75 12                	jne    c0021331 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002131f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021326:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002132c:	e9 fa 00 00 00       	jmp    c002142b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021331:	89 f0                	mov    eax,esi
c0021333:	01 d3                	add    ebx,edx
c0021335:	31 d2                	xor    edx,edx
c0021337:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002133b:	39 c2                	cmp    edx,eax
c002133d:	7d 14                	jge    c0021353 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002133f:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021346:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002134a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002134d:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021350:	42                   	inc    edx
c0021351:	eb e8                	jmp    c002133b <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021353:	89 c2                	mov    edx,eax
c0021355:	85 c0                	test   eax,eax
c0021357:	79 02                	jns    c002135b <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021359:	31 d2                	xor    edx,edx
c002135b:	01 c2                	add    edx,eax
c002135d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021360:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021367:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002136b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002136f:	99                   	cdq    
c0021370:	01 c1                	add    ecx,eax
c0021372:	11 d3                	adc    ebx,edx
c0021374:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021378:	29 c6                	sub    esi,eax
c002137a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002137e:	19 d7                	sbb    edi,edx
c0021380:	89 34 24             	mov    DWORD PTR [esp],esi
c0021383:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021387:	b8 ff 07 00 00       	mov    eax,0x7ff
c002138c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002138f:	b8 00 00 00 00       	mov    eax,0x0
c0021394:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021398:	7d 43                	jge    c00213dd <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002139a:	52                   	push   edx
c002139b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002139f:	50                   	push   eax
c00213a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00213a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00213a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00213ac:	0f ac d0 0b          	shrd   eax,edx,0xb
c00213b0:	50                   	push   eax
c00213b1:	e8 db fd ff ff       	call   c0021191 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213b6:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00213be:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00213c3:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00213cb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00213d3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00213d8:	83 c4 10             	add    esp,0x10
c00213db:	eb aa                	jmp    c0021387 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00213dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213e1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00213e4:	74 2a                	je     c0021410 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00213e6:	50                   	push   eax
c00213e7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213eb:	50                   	push   eax
c00213ec:	8d 74 24 28          	lea    esi,[esp+0x28]
c00213f0:	56                   	push   esi
c00213f1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00213f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00213f9:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00213fd:	51                   	push   ecx
c00213fe:	e8 8e fd ff ff       	call   c0021191 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021403:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021407:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002140b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002140d:	83 c4 10             	add    esp,0x10
c0021410:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021417:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002141b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002141f:	89 18                	mov    DWORD PTR [eax],ebx
c0021421:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021425:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021428:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002142b:	31 c0                	xor    eax,eax
c002142d:	eb 05                	jmp    c0021434 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002142f:	b8 04 00 00 00       	mov    eax,0x4
c0021434:	81 c4 2c 08 00 00    	add    esp,0x82c
c002143a:	5b                   	pop    ebx
c002143b:	5e                   	pop    esi
c002143c:	5f                   	pop    edi
c002143d:	5d                   	pop    ebp
c002143e:	c3                   	ret    
c002143f:	90                   	nop

c0021440 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021440:	55                   	push   ebp
c0021441:	57                   	push   edi
c0021442:	56                   	push   esi
c0021443:	53                   	push   ebx
c0021444:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002144a:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021451:	85 ed                	test   ebp,ebp
c0021453:	0f 84 51 02 00 00    	je     c00216aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021459:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021461:	0f 84 43 02 00 00    	je     c00216aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021467:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002146a:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002146d:	75 0a                	jne    c0021479 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002146f:	b8 07 00 00 00       	mov    eax,0x7
c0021474:	e9 36 02 00 00       	jmp    c00216af <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021479:	50                   	push   eax
c002147a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002147e:	50                   	push   eax
c002147f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021486:	53                   	push   ebx
c0021487:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002148a:	c1 e0 0b             	shl    eax,0xb
c002148d:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021490:	c1 e8 0b             	shr    eax,0xb
c0021493:	50                   	push   eax
c0021494:	e8 f8 fc ff ff       	call   c0021191 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021499:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002149c:	83 c4 10             	add    esp,0x10
c002149f:	89 c1                	mov    ecx,eax
c00214a1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00214a4:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00214aa:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00214ad:	84 db                	test   bl,bl
c00214af:	0f 85 8b 00 00 00    	jne    c0021540 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00214b5:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00214bb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00214be:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00214c4:	29 c6                	sub    esi,eax
c00214c6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00214ca:	89 f3                	mov    ebx,esi
c00214cc:	89 f1                	mov    ecx,esi
c00214ce:	c1 fb 1f             	sar    ebx,0x1f
c00214d1:	01 f0                	add    eax,esi
c00214d3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00214d6:	11 da                	adc    edx,ebx
c00214d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00214db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214df:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00214e2:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00214e5:	89 d8                	mov    eax,ebx
c00214e7:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00214eb:	ba 00 00 00 00       	mov    edx,0x0
c00214f0:	19 f8                	sbb    eax,edi
c00214f2:	b8 00 00 00 00       	mov    eax,0x0
c00214f7:	73 08                	jae    c0021501 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00214f9:	89 f0                	mov    eax,esi
c00214fb:	89 fa                	mov    edx,edi
c00214fd:	29 c8                	sub    eax,ecx
c00214ff:	19 da                	sbb    edx,ebx
c0021501:	89 d7                	mov    edi,edx
c0021503:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021506:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021509:	09 c7                	or     edi,eax
c002150b:	0f 84 5e ff ff ff    	je     c002146f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021511:	57                   	push   edi
c0021512:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021516:	50                   	push   eax
c0021517:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002151e:	53                   	push   ebx
c002151f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021522:	c1 e0 0b             	shl    eax,0xb
c0021525:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021529:	c1 e8 0b             	shr    eax,0xb
c002152c:	50                   	push   eax
c002152d:	e8 5f fc ff ff       	call   c0021191 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021532:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021535:	83 c4 10             	add    esp,0x10
c0021538:	25 ff 07 00 00       	and    eax,0x7ff
c002153d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021540:	31 ff                	xor    edi,edi
c0021542:	56                   	push   esi
c0021543:	6a 28                	push   0x28
c0021545:	6a 00                	push   0x0
c0021547:	8d 44 24 24          	lea    eax,[esp+0x24]
c002154b:	50                   	push   eax
c002154c:	e8 ff f1 fd ff       	call   c0000750 <memset>
c0021551:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021554:	25 ff 07 00 00       	and    eax,0x7ff
c0021559:	89 c6                	mov    esi,eax
c002155b:	83 c6 21             	add    esi,0x21
c002155e:	83 d7 00             	adc    edi,0x0
c0021561:	83 c4 10             	add    esp,0x10
c0021564:	31 c9                	xor    ecx,ecx
c0021566:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002156d:	83 f9 28             	cmp    ecx,0x28
c0021570:	88 04 24             	mov    BYTE PTR [esp],al
c0021573:	0f 94 c2             	sete   dl
c0021576:	88 d0                	mov    al,dl
c0021578:	ba ff 07 00 00       	mov    edx,0x7ff
c002157d:	39 f2                	cmp    edx,esi
c002157f:	ba 00 00 00 00       	mov    edx,0x0
c0021584:	19 fa                	sbb    edx,edi
c0021586:	0f 92 c2             	setb   dl
c0021589:	09 c2                	or     edx,eax
c002158b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002158f:	0f 94 c0             	sete   al
c0021592:	08 d0                	or     al,dl
c0021594:	75 16                	jne    c00215ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021596:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002159a:	74 10                	je     c00215ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002159c:	8a 04 24             	mov    al,BYTE PTR [esp]
c002159f:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00215a3:	41                   	inc    ecx
c00215a4:	83 c6 01             	add    esi,0x1
c00215a7:	83 d7 00             	adc    edi,0x0
c00215aa:	eb ba                	jmp    c0021566 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00215ac:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00215b3:	83 ec 0c             	sub    esp,0xc
c00215b6:	8d 74 24 24          	lea    esi,[esp+0x24]
c00215ba:	56                   	push   esi
c00215bb:	e8 ac f1 fd ff       	call   c000076c <strlen>
c00215c0:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00215c7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215cb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00215d3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215d6:	5a                   	pop    edx
c00215d7:	25 ff 07 00 00       	and    eax,0x7ff
c00215dc:	59                   	pop    ecx
c00215dd:	01 f8                	add    eax,edi
c00215df:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00215e5:	83 e0 02             	and    eax,0x2
c00215e8:	3c 01                	cmp    al,0x1
c00215ea:	19 c0                	sbb    eax,eax
c00215ec:	83 c0 02             	add    eax,0x2
c00215ef:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215f3:	56                   	push   esi
c00215f4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00215f8:	50                   	push   eax
c00215f9:	e8 0e f2 fd ff       	call   c000080c <strcpy>
c00215fe:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021602:	83 c4 10             	add    esp,0x10
c0021605:	84 c0                	test   al,al
c0021607:	75 21                	jne    c002162a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021609:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021611:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021619:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021621:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021628:	eb 28                	jmp    c0021652 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002162a:	fe c8                	dec    al
c002162c:	75 24                	jne    c0021652 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002162e:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021636:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002163e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021646:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002164d:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021652:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021656:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002165d:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021664:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021666:	0f b6 f3             	movzx  esi,bl
c0021669:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021670:	31 db                	xor    ebx,ebx
c0021672:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021678:	89 df                	mov    edi,ebx
c002167a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002167d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021680:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021683:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021686:	39 c6                	cmp    esi,eax
c0021688:	19 d7                	sbb    edi,edx
c002168a:	72 10                	jb     c002169c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002168c:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021693:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002169a:	eb 0a                	jmp    c00216a6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002169c:	29 f0                	sub    eax,esi
c002169e:	19 da                	sbb    edx,ebx
c00216a0:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00216a3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00216a6:	31 c0                	xor    eax,eax
c00216a8:	eb 05                	jmp    c00216af <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00216aa:	b8 04 00 00 00       	mov    eax,0x4
c00216af:	81 c4 5c 09 00 00    	add    esp,0x95c
c00216b5:	5b                   	pop    ebx
c00216b6:	5e                   	pop    esi
c00216b7:	5f                   	pop    edi
c00216b8:	5d                   	pop    ebp
c00216b9:	c3                   	ret    

c00216ba <readRoot(unsigned int*, unsigned int*, char)>:
c00216ba:	57                   	push   edi
c00216bb:	56                   	push   esi
c00216bc:	81 ec 38 08 00 00    	sub    esp,0x838
c00216c2:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00216ca:	50                   	push   eax
c00216cb:	8d 44 24 38          	lea    eax,[esp+0x38]
c00216cf:	50                   	push   eax
c00216d0:	6a 10                	push   0x10
c00216d2:	e8 ba fa ff ff       	call   c0021191 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216d7:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00216de:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00216e2:	b9 22 00 00 00       	mov    ecx,0x22
c00216e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00216e9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00216f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00216f4:	89 10                	mov    DWORD PTR [eax],edx
c00216f6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00216fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021701:	89 10                	mov    DWORD PTR [eax],edx
c0021703:	81 c4 44 08 00 00    	add    esp,0x844
c0021709:	b0 01                	mov    al,0x1
c002170b:	5e                   	pop    esi
c002170c:	5f                   	pop    edi
c002170d:	c3                   	ret    

c002170e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002170e:	55                   	push   ebp
c002170f:	57                   	push   edi
c0021710:	56                   	push   esi
c0021711:	53                   	push   ebx
c0021712:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021718:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002171f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021726:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002172a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002172e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021732:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021736:	75 03                	jne    c002173b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021738:	83 c3 02             	add    ebx,0x2
c002173b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002173e:	75 03                	jne    c0021743 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021740:	43                   	inc    ebx
c0021741:	eb f8                	jmp    c002173b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021743:	51                   	push   ecx
c0021744:	68 00 01 00 00       	push   0x100
c0021749:	6a 00                	push   0x0
c002174b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002174f:	50                   	push   eax
c0021750:	e8 fb ef fd ff       	call   c0000750 <memset>
c0021755:	83 c4 10             	add    esp,0x10
c0021758:	31 d2                	xor    edx,edx
c002175a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002175d:	84 c0                	test   al,al
c002175f:	74 21                	je     c0021782 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021761:	3c 2f                	cmp    al,0x2f
c0021763:	75 0b                	jne    c0021770 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021765:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021769:	bd 01 00 00 00       	mov    ebp,0x1
c002176e:	eb 14                	jmp    c0021784 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021770:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021773:	80 f9 19             	cmp    cl,0x19
c0021776:	77 03                	ja     c002177b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021778:	83 e8 20             	sub    eax,0x20
c002177b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002177f:	42                   	inc    edx
c0021780:	eb d8                	jmp    c002175a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021782:	31 ed                	xor    ebp,ebp
c0021784:	83 ec 0c             	sub    esp,0xc
c0021787:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002178e:	e8 06 de fe ff       	call   c000f599 <malloc>
c0021793:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002179a:	89 c6                	mov    esi,eax
c002179c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00217a2:	c1 ef 0b             	shr    edi,0xb
c00217a5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00217ac:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00217b0:	83 c4 10             	add    esp,0x10
c00217b3:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00217b8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00217bc:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00217c3:	74 28                	je     c00217ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00217c5:	52                   	push   edx
c00217c6:	57                   	push   edi
c00217c7:	50                   	push   eax
c00217c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00217cc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00217d3:	e8 b9 f9 ff ff       	call   c0021191 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00217dc:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00217e3:	05 00 08 00 00       	add    eax,0x800
c00217e8:	83 c4 10             	add    esp,0x10
c00217eb:	eb cb                	jmp    c00217b8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00217ed:	83 ec 0c             	sub    esp,0xc
c00217f0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00217f4:	57                   	push   edi
c00217f5:	e8 72 ef fd ff       	call   c000076c <strlen>
c00217fa:	50                   	push   eax
c00217fb:	57                   	push   edi
c00217fc:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021803:	56                   	push   esi
c0021804:	e8 46 f9 ff ff       	call   c002114f <__memmem(unsigned char*, int, unsigned char*, int)>
c0021809:	83 c4 20             	add    esp,0x20
c002180c:	85 c0                	test   eax,eax
c002180e:	75 13                	jne    c0021823 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021810:	83 ec 0c             	sub    esp,0xc
c0021813:	56                   	push   esi
c0021814:	e8 90 dd fe ff       	call   c000f5a9 <free>
c0021819:	83 c4 10             	add    esp,0x10
c002181c:	31 c0                	xor    eax,eax
c002181e:	e9 b3 00 00 00       	jmp    c00218d6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021823:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021827:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002182b:	c1 e7 08             	shl    edi,0x8
c002182e:	c1 e2 10             	shl    edx,0x10
c0021831:	09 d7                	or     edi,edx
c0021833:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021837:	09 d7                	or     edi,edx
c0021839:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002183d:	c1 e2 18             	shl    edx,0x18
c0021840:	09 d7                	or     edi,edx
c0021842:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021846:	89 d1                	mov    ecx,edx
c0021848:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002184c:	c1 e1 08             	shl    ecx,0x8
c002184f:	c1 e2 10             	shl    edx,0x10
c0021852:	09 ca                	or     edx,ecx
c0021854:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021858:	09 ca                	or     edx,ecx
c002185a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002185e:	c1 e1 18             	shl    ecx,0x18
c0021861:	09 ca                	or     edx,ecx
c0021863:	89 e9                	mov    ecx,ebp
c0021865:	84 c9                	test   cl,cl
c0021867:	74 3c                	je     c00218a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021869:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002186d:	83 ec 0c             	sub    esp,0xc
c0021870:	56                   	push   esi
c0021871:	e8 33 dd fe ff       	call   c000f5a9 <free>
c0021876:	83 c4 0c             	add    esp,0xc
c0021879:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021880:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021885:	50                   	push   eax
c0021886:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002188d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021894:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021898:	52                   	push   edx
c0021899:	57                   	push   edi
c002189a:	53                   	push   ebx
c002189b:	e8 6e fe ff ff       	call   c002170e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00218a0:	83 c4 20             	add    esp,0x20
c00218a3:	eb 31                	jmp    c00218d6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00218a5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00218a8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00218af:	d0 e8                	shr    al,1
c00218b1:	89 3b                	mov    DWORD PTR [ebx],edi
c00218b3:	83 e0 01             	and    eax,0x1
c00218b6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00218bd:	83 ec 0c             	sub    esp,0xc
c00218c0:	89 13                	mov    DWORD PTR [ebx],edx
c00218c2:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00218c9:	89 03                	mov    DWORD PTR [ebx],eax
c00218cb:	56                   	push   esi
c00218cc:	e8 d8 dc fe ff       	call   c000f5a9 <free>
c00218d1:	83 c4 10             	add    esp,0x10
c00218d4:	b0 01                	mov    al,0x1
c00218d6:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218dc:	5b                   	pop    ebx
c00218dd:	5e                   	pop    esi
c00218de:	5f                   	pop    edi
c00218df:	5d                   	pop    ebp
c00218e0:	c3                   	ret    

c00218e1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00218e1:	55                   	push   ebp
c00218e2:	57                   	push   edi
c00218e3:	56                   	push   esi
c00218e4:	53                   	push   ebx
c00218e5:	83 ec 20             	sub    esp,0x20
c00218e8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00218ec:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00218f0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00218f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218fc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021904:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021909:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002190f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021915:	57                   	push   edi
c0021916:	8d 44 24 14          	lea    eax,[esp+0x14]
c002191a:	50                   	push   eax
c002191b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002191f:	50                   	push   eax
c0021920:	e8 95 fd ff ff       	call   c00216ba <readRoot(unsigned int*, unsigned int*, char)>
c0021925:	5a                   	pop    edx
c0021926:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002192a:	e8 3d ee fd ff       	call   c000076c <strlen>
c002192f:	83 c4 10             	add    esp,0x10
c0021932:	83 f8 03             	cmp    eax,0x3
c0021935:	77 17                	ja     c002194e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021937:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002193b:	89 03                	mov    DWORD PTR [ebx],eax
c002193d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021941:	89 06                	mov    DWORD PTR [esi],eax
c0021943:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002194a:	b0 01                	mov    al,0x1
c002194c:	eb 19                	jmp    c0021967 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002194e:	50                   	push   eax
c002194f:	55                   	push   ebp
c0021950:	57                   	push   edi
c0021951:	56                   	push   esi
c0021952:	53                   	push   ebx
c0021953:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021957:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002195b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002195f:	e8 aa fd ff ff       	call   c002170e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021964:	83 c4 20             	add    esp,0x20
c0021967:	83 c4 1c             	add    esp,0x1c
c002196a:	5b                   	pop    ebx
c002196b:	5e                   	pop    esi
c002196c:	5f                   	pop    edi
c002196d:	5d                   	pop    ebp
c002196e:	c3                   	ret    
c002196f:	90                   	nop

c0021970 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021970:	57                   	push   edi
c0021971:	56                   	push   esi
c0021972:	53                   	push   ebx
c0021973:	83 ec 10             	sub    esp,0x10
c0021976:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002197a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002197e:	85 ff                	test   edi,edi
c0021980:	0f 84 8b 00 00 00    	je     c0021a11 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021986:	85 f6                	test   esi,esi
c0021988:	0f 84 83 00 00 00    	je     c0021a11 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002198e:	b8 03 00 00 00       	mov    eax,0x3
c0021993:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021998:	75 7c                	jne    c0021a16 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002199a:	83 ec 0c             	sub    esp,0xc
c002199d:	6a 1c                	push   0x1c
c002199f:	e8 f5 db fe ff       	call   c000f599 <malloc>
c00219a4:	89 07                	mov    DWORD PTR [edi],eax
c00219a6:	89 c3                	mov    ebx,eax
c00219a8:	58                   	pop    eax
c00219a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219ad:	50                   	push   eax
c00219ae:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00219b1:	50                   	push   eax
c00219b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219b6:	50                   	push   eax
c00219b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219bb:	50                   	push   eax
c00219bc:	56                   	push   esi
c00219bd:	e8 1f ff ff ff       	call   c00218e1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219c2:	83 c4 20             	add    esp,0x20
c00219c5:	84 c0                	test   al,al
c00219c7:	74 07                	je     c00219d0 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00219c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00219ce:	74 0b                	je     c00219db <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00219d0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00219d4:	b8 01 00 00 00       	mov    eax,0x1
c00219d9:	eb 3b                	jmp    c0021a16 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219df:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00219e3:	89 03                	mov    DWORD PTR [ebx],eax
c00219e5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00219ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219f0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00219f7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219fe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a01:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a08:	8a 06                	mov    al,BYTE PTR [esi]
c0021a0a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a0d:	31 c0                	xor    eax,eax
c0021a0f:	eb 05                	jmp    c0021a16 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a11:	b8 04 00 00 00       	mov    eax,0x4
c0021a16:	83 c4 10             	add    esp,0x10
c0021a19:	5b                   	pop    ebx
c0021a1a:	5e                   	pop    esi
c0021a1b:	5f                   	pop    edi
c0021a1c:	c3                   	ret    
c0021a1d:	90                   	nop

c0021a1e <ISO9660::exists(char const*)>:
c0021a1e:	83 ec 28             	sub    esp,0x28
c0021a21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021a25:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021a29:	52                   	push   edx
c0021a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021a2d:	52                   	push   edx
c0021a2e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a32:	52                   	push   edx
c0021a33:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a37:	52                   	push   edx
c0021a38:	50                   	push   eax
c0021a39:	e8 a3 fe ff ff       	call   c00218e1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a3e:	83 c4 3c             	add    esp,0x3c
c0021a41:	c3                   	ret    

c0021a42 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021a42:	56                   	push   esi
c0021a43:	53                   	push   ebx
c0021a44:	83 ec 14             	sub    esp,0x14
c0021a47:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021a4b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a4f:	85 db                	test   ebx,ebx
c0021a51:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021a55:	0f 94 c2             	sete   dl
c0021a58:	85 f6                	test   esi,esi
c0021a5a:	0f 94 c0             	sete   al
c0021a5d:	08 c2                	or     dl,al
c0021a5f:	75 68                	jne    c0021ac9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a61:	85 c9                	test   ecx,ecx
c0021a63:	74 64                	je     c0021ac9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a65:	83 ec 0c             	sub    esp,0xc
c0021a68:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a6b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a75:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a7c:	50                   	push   eax
c0021a7d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021a80:	50                   	push   eax
c0021a81:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a85:	50                   	push   eax
c0021a86:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a8a:	50                   	push   eax
c0021a8b:	51                   	push   ecx
c0021a8c:	e8 50 fe ff ff       	call   c00218e1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a91:	83 c4 20             	add    esp,0x20
c0021a94:	ba 01 00 00 00       	mov    edx,0x1
c0021a99:	84 c0                	test   al,al
c0021a9b:	74 31                	je     c0021ace <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021aa1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021aa8:	89 03                	mov    DWORD PTR [ebx],eax
c0021aaa:	ba 00 00 00 00       	mov    edx,0x0
c0021aaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ab3:	85 c0                	test   eax,eax
c0021ab5:	0f 95 06             	setne  BYTE PTR [esi]
c0021ab8:	74 14                	je     c0021ace <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021aba:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021ac0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ac7:	eb 05                	jmp    c0021ace <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021ac9:	ba 04 00 00 00       	mov    edx,0x4
c0021ace:	83 c4 14             	add    esp,0x14
c0021ad1:	89 d0                	mov    eax,edx
c0021ad3:	5b                   	pop    ebx
c0021ad4:	5e                   	pop    esi
c0021ad5:	c3                   	ret    

c0021ad6 <ISO9660::openDir(char const*, void**)>:
c0021ad6:	57                   	push   edi
c0021ad7:	56                   	push   esi
c0021ad8:	53                   	push   ebx
c0021ad9:	83 ec 10             	sub    esp,0x10
c0021adc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021ae0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021ae4:	85 ff                	test   edi,edi
c0021ae6:	74 7b                	je     c0021b63 <ISO9660::openDir(char const*, void**)+0x8d>
c0021ae8:	85 f6                	test   esi,esi
c0021aea:	74 77                	je     c0021b63 <ISO9660::openDir(char const*, void**)+0x8d>
c0021aec:	83 ec 0c             	sub    esp,0xc
c0021aef:	6a 1c                	push   0x1c
c0021af1:	e8 a3 da fe ff       	call   c000f599 <malloc>
c0021af6:	89 07                	mov    DWORD PTR [edi],eax
c0021af8:	89 c3                	mov    ebx,eax
c0021afa:	58                   	pop    eax
c0021afb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021aff:	50                   	push   eax
c0021b00:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021b03:	50                   	push   eax
c0021b04:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b08:	50                   	push   eax
c0021b09:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b0d:	50                   	push   eax
c0021b0e:	56                   	push   esi
c0021b0f:	e8 cd fd ff ff       	call   c00218e1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b14:	83 c4 20             	add    esp,0x20
c0021b17:	84 c0                	test   al,al
c0021b19:	74 07                	je     c0021b22 <ISO9660::openDir(char const*, void**)+0x4c>
c0021b1b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021b20:	75 0b                	jne    c0021b2d <ISO9660::openDir(char const*, void**)+0x57>
c0021b22:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021b26:	b8 01 00 00 00       	mov    eax,0x1
c0021b2b:	eb 3b                	jmp    c0021b68 <ISO9660::openDir(char const*, void**)+0x92>
c0021b2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b31:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b35:	89 03                	mov    DWORD PTR [ebx],eax
c0021b37:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b42:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b49:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b50:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b53:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b5a:	8a 06                	mov    al,BYTE PTR [esi]
c0021b5c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b5f:	31 c0                	xor    eax,eax
c0021b61:	eb 05                	jmp    c0021b68 <ISO9660::openDir(char const*, void**)+0x92>
c0021b63:	b8 04 00 00 00       	mov    eax,0x4
c0021b68:	83 c4 10             	add    esp,0x10
c0021b6b:	5b                   	pop    ebx
c0021b6c:	5e                   	pop    esi
c0021b6d:	5f                   	pop    edi
c0021b6e:	c3                   	ret    
c0021b6f:	90                   	nop

c0021b70 <ISO9660::ISO9660()>:
c0021b70:	83 ec 0c             	sub    esp,0xc
c0021b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b77:	83 ec 0c             	sub    esp,0xc
c0021b7a:	50                   	push   eax
c0021b7b:	e8 80 0e ff ff       	call   c0012a00 <Filesystem::Filesystem()>
c0021b80:	83 c4 10             	add    esp,0x10
c0021b83:	ba 80 bf 02 c0       	mov    edx,0xc002bf80
c0021b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8c:	89 10                	mov    DWORD PTR [eax],edx
c0021b8e:	90                   	nop
c0021b8f:	83 c4 0c             	add    esp,0xc
c0021b92:	c3                   	ret    
c0021b93:	90                   	nop

c0021b94 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b94:	83 ec 1c             	sub    esp,0x1c
c0021b97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b9f:	89 10                	mov    DWORD PTR [eax],edx
c0021ba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ba5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021ba9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021bac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bb0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021bb4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021bb7:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021bbc:	75 23                	jne    c0021be1 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bc2:	8b 10                	mov    edx,DWORD PTR [eax]
c0021bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bcb:	0f af c2             	imul   eax,edx
c0021bce:	85 c0                	test   eax,eax
c0021bd0:	79 03                	jns    c0021bd5 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021bd2:	83 c0 03             	add    eax,0x3
c0021bd5:	c1 f8 02             	sar    eax,0x2
c0021bd8:	05 a0 0f 00 00       	add    eax,0xfa0
c0021bdd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021be1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021be5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021be9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021bec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021bf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bfb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021c02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c06:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021c09:	c1 e0 02             	shl    eax,0x2
c0021c0c:	83 ec 0c             	sub    esp,0xc
c0021c0f:	50                   	push   eax
c0021c10:	e8 84 d9 fe ff       	call   c000f599 <malloc>
c0021c15:	83 c4 10             	add    esp,0x10
c0021c18:	89 c2                	mov    edx,eax
c0021c1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c1e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021c21:	83 ec 04             	sub    esp,0x4
c0021c24:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021c28:	50                   	push   eax
c0021c29:	6a 01                	push   0x1
c0021c2b:	6a 04                	push   0x4
c0021c2d:	e8 33 6f fe ff       	call   c0008b65 <src_new>
c0021c32:	83 c4 10             	add    esp,0x10
c0021c35:	89 c2                	mov    edx,eax
c0021c37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c3b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021c3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c42:	85 c0                	test   eax,eax
c0021c44:	74 10                	je     c0021c56 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021c46:	83 ec 0c             	sub    esp,0xc
c0021c49:	68 e0 bf 02 c0       	push   0xc002bfe0
c0021c4e:	e8 0e 82 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0021c53:	83 c4 10             	add    esp,0x10
c0021c56:	a0 40 1d 03 c0       	mov    al,ds:0xc0031d40
c0021c5b:	83 f0 01             	xor    eax,0x1
c0021c5e:	84 c0                	test   al,al
c0021c60:	74 57                	je     c0021cb9 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021c62:	a1 fc bf 02 c0       	mov    eax,ds:0xc002bffc
c0021c67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c6b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c73:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c7b:	7f 35                	jg     c0021cb2 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021c7d:	83 ec 0c             	sub    esp,0xc
c0021c80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c84:	e8 d6 53 00 00       	call   c002705f <__floatsisf>
c0021c89:	83 c4 10             	add    esp,0x10
c0021c8c:	8b 15 fc bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bffc
c0021c92:	83 ec 08             	sub    esp,0x8
c0021c95:	52                   	push   edx
c0021c96:	50                   	push   eax
c0021c97:	e8 d5 4f 00 00       	call   c0026c71 <__mulsf3>
c0021c9c:	83 c4 10             	add    esp,0x10
c0021c9f:	89 c2                	mov    edx,eax
c0021ca1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ca5:	89 14 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],edx
c0021cac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021cb0:	eb c1                	jmp    c0021c73 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021cb2:	c6 05 40 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d40,0x1
c0021cb9:	90                   	nop
c0021cba:	83 c4 1c             	add    esp,0x1c
c0021cbd:	c3                   	ret    

c0021cbe <SoundChannel::~SoundChannel()>:
c0021cbe:	83 ec 0c             	sub    esp,0xc
c0021cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021cc8:	83 ec 0c             	sub    esp,0xc
c0021ccb:	50                   	push   eax
c0021ccc:	e8 d8 d8 fe ff       	call   c000f5a9 <free>
c0021cd1:	83 c4 10             	add    esp,0x10
c0021cd4:	90                   	nop
c0021cd5:	83 c4 0c             	add    esp,0xc
c0021cd8:	c3                   	ret    
c0021cd9:	90                   	nop

c0021cda <SoundChannel::getSampleRate()>:
c0021cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ce0:	c3                   	ret    
c0021ce1:	90                   	nop

c0021ce2 <SoundChannel::getBits()>:
c0021ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ce6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ce9:	c3                   	ret    

c0021cea <SoundChannel::getBufferUsed()>:
c0021cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cee:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021cf1:	c3                   	ret    

c0021cf2 <SoundChannel::getBufferSize()>:
c0021cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cf6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021cf9:	c3                   	ret    

c0021cfa <SoundChannel::unbuffer(float*, int, int)>:
c0021cfa:	56                   	push   esi
c0021cfb:	53                   	push   ebx
c0021cfc:	83 ec 40             	sub    esp,0x40
c0021cff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021d03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021d06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d0a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021d0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021d11:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021d15:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021d19:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021d1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021d21:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021d25:	e8 35 53 00 00       	call   c002705f <__floatsisf>
c0021d2a:	5a                   	pop    edx
c0021d2b:	89 c6                	mov    esi,eax
c0021d2d:	ff 33                	push   DWORD PTR [ebx]
c0021d2f:	e8 2b 53 00 00       	call   c002705f <__floatsisf>
c0021d34:	59                   	pop    ecx
c0021d35:	5a                   	pop    edx
c0021d36:	50                   	push   eax
c0021d37:	56                   	push   esi
c0021d38:	e8 f7 50 00 00       	call   c0026e34 <__divsf3>
c0021d3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d40:	e8 ea 65 00 00       	call   c002832f <__extendsfdf2>
c0021d45:	59                   	pop    ecx
c0021d46:	5e                   	pop    esi
c0021d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d4b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021d4f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d5b:	50                   	push   eax
c0021d5c:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d5f:	e8 f6 69 fe ff       	call   c000875a <src_process>
c0021d64:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d68:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d6b:	83 c4 0c             	add    esp,0xc
c0021d6e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d71:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d74:	29 d0                	sub    eax,edx
c0021d76:	c1 e0 02             	shl    eax,0x2
c0021d79:	50                   	push   eax
c0021d7a:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d7d:	50                   	push   eax
c0021d7e:	51                   	push   ecx
c0021d7f:	e8 04 e9 fd ff       	call   c0000688 <memmove>
c0021d84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d88:	83 c4 44             	add    esp,0x44
c0021d8b:	5b                   	pop    ebx
c0021d8c:	5e                   	pop    esi
c0021d8d:	c3                   	ret    

c0021d8e <SoundChannel::buffer16(short*, int)>:
c0021d8e:	55                   	push   ebp
c0021d8f:	57                   	push   edi
c0021d90:	56                   	push   esi
c0021d91:	53                   	push   ebx
c0021d92:	83 ec 1c             	sub    esp,0x1c
c0021d95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021d99:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d9c:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d9f:	0f 84 d2 00 00 00    	je     c0021e77 <SoundChannel::buffer16(short*, int)+0xe9>
c0021da5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021da9:	85 ed                	test   ebp,ebp
c0021dab:	0f 8e c6 00 00 00    	jle    c0021e77 <SoundChannel::buffer16(short*, int)+0xe9>
c0021db1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021db5:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021dba:	83 ec 0c             	sub    esp,0xc
c0021dbd:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021dc0:	50                   	push   eax
c0021dc1:	e8 99 52 00 00       	call   c002705f <__floatsisf>
c0021dc6:	59                   	pop    ecx
c0021dc7:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021dca:	5f                   	pop    edi
c0021dcb:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021dce:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021dd1:	55                   	push   ebp
c0021dd2:	50                   	push   eax
c0021dd3:	e8 99 4e 00 00       	call   c0026c71 <__mulsf3>
c0021dd8:	83 c4 10             	add    esp,0x10
c0021ddb:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021dde:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021de1:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021de4:	0f 84 99 00 00 00    	je     c0021e83 <SoundChannel::buffer16(short*, int)+0xf5>
c0021dea:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021def:	74 78                	je     c0021e69 <SoundChannel::buffer16(short*, int)+0xdb>
c0021df1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021df5:	83 ec 0c             	sub    esp,0xc
c0021df8:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021dfc:	50                   	push   eax
c0021dfd:	e8 5d 52 00 00       	call   c002705f <__floatsisf>
c0021e02:	5f                   	pop    edi
c0021e03:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021e06:	5a                   	pop    edx
c0021e07:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021e0a:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e0d:	55                   	push   ebp
c0021e0e:	50                   	push   eax
c0021e0f:	e8 5d 4e 00 00       	call   c0026c71 <__mulsf3>
c0021e14:	83 c4 10             	add    esp,0x10
c0021e17:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021e1a:	be 02 00 00 00       	mov    esi,0x2
c0021e1f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e22:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e25:	74 46                	je     c0021e6d <SoundChannel::buffer16(short*, int)+0xdf>
c0021e27:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021e2b:	eb 36                	jmp    c0021e63 <SoundChannel::buffer16(short*, int)+0xd5>
c0021e2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e31:	83 ec 0c             	sub    esp,0xc
c0021e34:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021e38:	46                   	inc    esi
c0021e39:	50                   	push   eax
c0021e3a:	e8 20 52 00 00       	call   c002705f <__floatsisf>
c0021e3f:	5a                   	pop    edx
c0021e40:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021e43:	59                   	pop    ecx
c0021e44:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021e47:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e4e:	50                   	push   eax
c0021e4f:	e8 1d 4e 00 00       	call   c0026c71 <__mulsf3>
c0021e54:	83 c4 10             	add    esp,0x10
c0021e57:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021e5b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e5e:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e61:	74 0a                	je     c0021e6d <SoundChannel::buffer16(short*, int)+0xdf>
c0021e63:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021e67:	75 c4                	jne    c0021e2d <SoundChannel::buffer16(short*, int)+0x9f>
c0021e69:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021e6d:	83 c4 1c             	add    esp,0x1c
c0021e70:	89 f0                	mov    eax,esi
c0021e72:	5b                   	pop    ebx
c0021e73:	5e                   	pop    esi
c0021e74:	5f                   	pop    edi
c0021e75:	5d                   	pop    ebp
c0021e76:	c3                   	ret    
c0021e77:	83 c4 1c             	add    esp,0x1c
c0021e7a:	31 f6                	xor    esi,esi
c0021e7c:	5b                   	pop    ebx
c0021e7d:	89 f0                	mov    eax,esi
c0021e7f:	5e                   	pop    esi
c0021e80:	5f                   	pop    edi
c0021e81:	5d                   	pop    ebp
c0021e82:	c3                   	ret    
c0021e83:	be 01 00 00 00       	mov    esi,0x1
c0021e88:	eb e3                	jmp    c0021e6d <SoundChannel::buffer16(short*, int)+0xdf>

c0021e8a <SoundChannel::buffer8(unsigned char*, int)>:
c0021e8a:	55                   	push   ebp
c0021e8b:	57                   	push   edi
c0021e8c:	56                   	push   esi
c0021e8d:	53                   	push   ebx
c0021e8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e92:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021e96:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e9d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021ea0:	74 7a                	je     c0021f1c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021ea2:	85 ff                	test   edi,edi
c0021ea4:	7e 76                	jle    c0021f1c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021ea6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021eaa:	8d 70 01             	lea    esi,[eax+0x1]
c0021ead:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021eb0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021eb3:	8b 1c 9d 40 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce6c0]
c0021eba:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ebd:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021ec0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021ec3:	74 5e                	je     c0021f23 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021ec5:	83 ff 01             	cmp    edi,0x1
c0021ec8:	74 4b                	je     c0021f15 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021eca:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021ece:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021ed1:	8d 70 01             	lea    esi,[eax+0x1]
c0021ed4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ed7:	8b 1c 9d 40 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce6c0]
c0021ede:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ee1:	b8 02 00 00 00       	mov    eax,0x2
c0021ee6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ee9:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021eec:	75 23                	jne    c0021f11 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021eee:	eb 27                	jmp    c0021f17 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ef0:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021ef5:	8d 71 01             	lea    esi,[ecx+0x1]
c0021ef8:	40                   	inc    eax
c0021ef9:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021efc:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021eff:	8b 1c 9d 40 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce6c0]
c0021f06:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021f09:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021f0c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021f0f:	74 06                	je     c0021f17 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021f11:	39 c7                	cmp    edi,eax
c0021f13:	75 db                	jne    c0021ef0 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021f15:	89 f8                	mov    eax,edi
c0021f17:	5b                   	pop    ebx
c0021f18:	5e                   	pop    esi
c0021f19:	5f                   	pop    edi
c0021f1a:	5d                   	pop    ebp
c0021f1b:	c3                   	ret    
c0021f1c:	5b                   	pop    ebx
c0021f1d:	31 c0                	xor    eax,eax
c0021f1f:	5e                   	pop    esi
c0021f20:	5f                   	pop    edi
c0021f21:	5d                   	pop    ebp
c0021f22:	c3                   	ret    
c0021f23:	b8 01 00 00 00       	mov    eax,0x1
c0021f28:	eb ed                	jmp    c0021f17 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021f2a <SoundDevice::SoundDevice(char const*)>:
c0021f2a:	83 ec 1c             	sub    esp,0x1c
c0021f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f31:	83 ec 08             	sub    esp,0x8
c0021f34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f38:	50                   	push   eax
c0021f39:	e8 f4 1d ff ff       	call   c0013d32 <Device::Device(char const*)>
c0021f3e:	83 c4 10             	add    esp,0x10
c0021f41:	ba 08 c0 02 c0       	mov    edx,0xc002c008
c0021f46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f4a:	89 10                	mov    DWORD PTR [eax],edx
c0021f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f50:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f5e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f70:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f75:	7f 19                	jg     c0021f90 <SoundDevice::SoundDevice(char const*)+0x66>
c0021f77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f7f:	83 c2 54             	add    edx,0x54
c0021f82:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021f8a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f8e:	eb e0                	jmp    c0021f70 <SoundDevice::SoundDevice(char const*)+0x46>
c0021f90:	90                   	nop
c0021f91:	83 c4 1c             	add    esp,0x1c
c0021f94:	c3                   	ret    
c0021f95:	90                   	nop

c0021f96 <SoundDevice::~SoundDevice()>:
c0021f96:	53                   	push   ebx
c0021f97:	83 ec 18             	sub    esp,0x18
c0021f9a:	ba 08 c0 02 c0       	mov    edx,0xc002c008
c0021f9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fa3:	89 10                	mov    DWORD PTR [eax],edx
c0021fa5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fad:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021fb2:	7f 46                	jg     c0021ffa <SoundDevice::~SoundDevice()+0x64>
c0021fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fbc:	83 c2 54             	add    edx,0x54
c0021fbf:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021fc3:	85 c0                	test   eax,eax
c0021fc5:	74 2d                	je     c0021ff4 <SoundDevice::~SoundDevice()+0x5e>
c0021fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fcb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fcf:	83 c2 54             	add    edx,0x54
c0021fd2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021fd6:	85 db                	test   ebx,ebx
c0021fd8:	74 1a                	je     c0021ff4 <SoundDevice::~SoundDevice()+0x5e>
c0021fda:	83 ec 0c             	sub    esp,0xc
c0021fdd:	53                   	push   ebx
c0021fde:	e8 db fc ff ff       	call   c0021cbe <SoundChannel::~SoundChannel()>
c0021fe3:	83 c4 10             	add    esp,0x10
c0021fe6:	83 ec 08             	sub    esp,0x8
c0021fe9:	6a 2c                	push   0x2c
c0021feb:	53                   	push   ebx
c0021fec:	e8 2c 06 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0021ff1:	83 c4 10             	add    esp,0x10
c0021ff4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021ff8:	eb b3                	jmp    c0021fad <SoundDevice::~SoundDevice()+0x17>
c0021ffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ffe:	83 ec 0c             	sub    esp,0xc
c0022001:	50                   	push   eax
c0022002:	e8 f5 19 ff ff       	call   c00139fc <Device::~Device()>
c0022007:	83 c4 10             	add    esp,0x10
c002200a:	90                   	nop
c002200b:	83 c4 18             	add    esp,0x18
c002200e:	5b                   	pop    ebx
c002200f:	c3                   	ret    

c0022010 <SoundDevice::~SoundDevice()>:
c0022010:	83 ec 0c             	sub    esp,0xc
c0022013:	83 ec 0c             	sub    esp,0xc
c0022016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002201a:	e8 77 ff ff ff       	call   c0021f96 <SoundDevice::~SoundDevice()>
c002201f:	83 c4 10             	add    esp,0x10
c0022022:	83 ec 08             	sub    esp,0x8
c0022025:	68 e4 01 00 00       	push   0x1e4
c002202a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002202e:	e8 ea 05 ff ff       	call   c001261d <operator delete(void*, unsigned long)>
c0022033:	83 c4 10             	add    esp,0x10
c0022036:	83 c4 0c             	add    esp,0xc
c0022039:	c3                   	ret    

c002203a <SoundDevice::getFreeChannelNum()>:
c002203a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002203e:	31 c0                	xor    eax,eax
c0022040:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022048:	74 09                	je     c0022053 <SoundDevice::getFreeChannelNum()+0x19>
c002204a:	40                   	inc    eax
c002204b:	83 f8 20             	cmp    eax,0x20
c002204e:	75 f0                	jne    c0022040 <SoundDevice::getFreeChannelNum()+0x6>
c0022050:	83 c8 ff             	or     eax,0xffffffff
c0022053:	c3                   	ret    

c0022054 <SoundDevice::addChannel(SoundChannel*)>:
c0022054:	56                   	push   esi
c0022055:	53                   	push   ebx
c0022056:	51                   	push   ecx
c0022057:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002205b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002205f:	53                   	push   ebx
c0022060:	e8 d5 ff ff ff       	call   c002203a <SoundDevice::getFreeChannelNum()>
c0022065:	5a                   	pop    edx
c0022066:	83 f8 ff             	cmp    eax,0xffffffff
c0022069:	74 51                	je     c00220bc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002206b:	85 f6                	test   esi,esi
c002206d:	74 4d                	je     c00220bc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002206f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022076:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002207d:	75 30                	jne    c00220af <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002207f:	83 ec 0c             	sub    esp,0xc
c0022082:	56                   	push   esi
c0022083:	e8 52 fc ff ff       	call   c0021cda <SoundChannel::getSampleRate()>
c0022088:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002208e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022091:	e8 4c fc ff ff       	call   c0021ce2 <SoundChannel::getBits()>
c0022096:	83 c4 0c             	add    esp,0xc
c0022099:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002209f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00220a1:	50                   	push   eax
c00220a2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00220a8:	53                   	push   ebx
c00220a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00220ac:	83 c4 10             	add    esp,0x10
c00220af:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00220b5:	b8 01 00 00 00       	mov    eax,0x1
c00220ba:	eb 03                	jmp    c00220bf <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00220bc:	83 c8 ff             	or     eax,0xffffffff
c00220bf:	5a                   	pop    edx
c00220c0:	5b                   	pop    ebx
c00220c1:	5e                   	pop    esi
c00220c2:	c3                   	ret    
c00220c3:	90                   	nop

c00220c4 <SoundDevice::removeChannel(int)>:
c00220c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220cc:	83 fa 1f             	cmp    edx,0x1f
c00220cf:	77 23                	ja     c00220f4 <SoundDevice::removeChannel(int)+0x30>
c00220d1:	8d 14 90             	lea    edx,[eax+edx*4]
c00220d4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00220db:	74 17                	je     c00220f4 <SoundDevice::removeChannel(int)+0x30>
c00220dd:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00220e7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00220ed:	75 05                	jne    c00220f4 <SoundDevice::removeChannel(int)+0x30>
c00220ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00220f1:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00220f4:	c3                   	ret    
c00220f5:	90                   	nop

c00220f6 <SoundDevice::floatTo16(float*, short*, int)>:
c00220f6:	57                   	push   edi
c00220f7:	56                   	push   esi
c00220f8:	53                   	push   ebx
c00220f9:	31 db                	xor    ebx,ebx
c00220fb:	83 ec 10             	sub    esp,0x10
c00220fe:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022102:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022106:	0f 8d d0 00 00 00    	jge    c00221dc <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c002210c:	83 ec 0c             	sub    esp,0xc
c002210f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022113:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022116:	e8 14 62 00 00       	call   c002832f <__extendsfdf2>
c002211b:	83 c4 10             	add    esp,0x10
c002211e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022122:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022126:	68 00 00 f0 3f       	push   0x3ff00000
c002212b:	6a 00                	push   0x0
c002212d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022131:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022135:	e8 81 51 00 00       	call   c00272bb <__adddf3>
c002213a:	83 c4 10             	add    esp,0x10
c002213d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022141:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022145:	68 00 00 e0 3f       	push   0x3fe00000
c002214a:	6a 00                	push   0x0
c002214c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022150:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022154:	e8 df 57 00 00       	call   c0027938 <__muldf3>
c0022159:	83 c4 10             	add    esp,0x10
c002215c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022160:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022164:	68 c0 ff df 40       	push   0x40dfffc0
c0022169:	6a 00                	push   0x0
c002216b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002216f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022173:	e8 c0 57 00 00       	call   c0027938 <__muldf3>
c0022178:	59                   	pop    ecx
c0022179:	5f                   	pop    edi
c002217a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002217e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022182:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022186:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002218a:	e8 7c 60 00 00       	call   c002820b <__truncdfsf2>
c002218f:	5a                   	pop    edx
c0022190:	89 c7                	mov    edi,eax
c0022192:	59                   	pop    ecx
c0022193:	68 00 fe ff 46       	push   0x46fffe00
c0022198:	50                   	push   eax
c0022199:	e8 17 51 00 00       	call   c00272b5 <__gesf2>
c002219e:	83 c4 10             	add    esp,0x10
c00221a1:	85 c0                	test   eax,eax
c00221a3:	78 08                	js     c00221ad <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00221a5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00221ab:	eb 29                	jmp    c00221d6 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00221ad:	50                   	push   eax
c00221ae:	50                   	push   eax
c00221af:	6a 00                	push   0x0
c00221b1:	57                   	push   edi
c00221b2:	e8 02 51 00 00       	call   c00272b9 <__lesf2>
c00221b7:	83 c4 10             	add    esp,0x10
c00221ba:	85 c0                	test   eax,eax
c00221bc:	7f 08                	jg     c00221c6 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00221be:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00221c4:	eb 10                	jmp    c00221d6 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00221c6:	83 ec 0c             	sub    esp,0xc
c00221c9:	57                   	push   edi
c00221ca:	e8 fd 61 00 00       	call   c00283cc <lrintf>
c00221cf:	83 c4 10             	add    esp,0x10
c00221d2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00221d6:	43                   	inc    ebx
c00221d7:	e9 26 ff ff ff       	jmp    c0022102 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00221dc:	83 c4 10             	add    esp,0x10
c00221df:	5b                   	pop    ebx
c00221e0:	5e                   	pop    esi
c00221e1:	5f                   	pop    edi
c00221e2:	c3                   	ret    
c00221e3:	90                   	nop

c00221e4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00221e4:	57                   	push   edi
c00221e5:	56                   	push   esi
c00221e6:	53                   	push   ebx
c00221e7:	31 db                	xor    ebx,ebx
c00221e9:	83 ec 10             	sub    esp,0x10
c00221ec:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00221f0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00221f4:	0f 8d cb 00 00 00    	jge    c00222c5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00221fa:	83 ec 0c             	sub    esp,0xc
c00221fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022201:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022204:	e8 26 61 00 00       	call   c002832f <__extendsfdf2>
c0022209:	83 c4 10             	add    esp,0x10
c002220c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022210:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022214:	68 00 00 f0 3f       	push   0x3ff00000
c0022219:	6a 00                	push   0x0
c002221b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002221f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022223:	e8 93 50 00 00       	call   c00272bb <__adddf3>
c0022228:	83 c4 10             	add    esp,0x10
c002222b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002222f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022233:	68 00 00 e0 3f       	push   0x3fe00000
c0022238:	6a 00                	push   0x0
c002223a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002223e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022242:	e8 f1 56 00 00       	call   c0027938 <__muldf3>
c0022247:	83 c4 10             	add    esp,0x10
c002224a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002224e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022252:	68 00 00 60 40       	push   0x40600000
c0022257:	6a 00                	push   0x0
c0022259:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002225d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022261:	e8 d2 56 00 00       	call   c0027938 <__muldf3>
c0022266:	59                   	pop    ecx
c0022267:	5f                   	pop    edi
c0022268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002226c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022270:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022274:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022278:	e8 8e 5f 00 00       	call   c002820b <__truncdfsf2>
c002227d:	5a                   	pop    edx
c002227e:	89 c7                	mov    edi,eax
c0022280:	59                   	pop    ecx
c0022281:	68 00 00 fe 42       	push   0x42fe0000
c0022286:	50                   	push   eax
c0022287:	e8 29 50 00 00       	call   c00272b5 <__gesf2>
c002228c:	83 c4 10             	add    esp,0x10
c002228f:	85 c0                	test   eax,eax
c0022291:	78 06                	js     c0022299 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022293:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022297:	eb 26                	jmp    c00222bf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022299:	50                   	push   eax
c002229a:	50                   	push   eax
c002229b:	6a 00                	push   0x0
c002229d:	57                   	push   edi
c002229e:	e8 16 50 00 00       	call   c00272b9 <__lesf2>
c00222a3:	83 c4 10             	add    esp,0x10
c00222a6:	85 c0                	test   eax,eax
c00222a8:	7f 06                	jg     c00222b0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00222aa:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00222ae:	eb 0f                	jmp    c00222bf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00222b0:	83 ec 0c             	sub    esp,0xc
c00222b3:	57                   	push   edi
c00222b4:	e8 13 61 00 00       	call   c00283cc <lrintf>
c00222b9:	83 c4 10             	add    esp,0x10
c00222bc:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00222bf:	43                   	inc    ebx
c00222c0:	e9 2b ff ff ff       	jmp    c00221f0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00222c5:	83 c4 10             	add    esp,0x10
c00222c8:	5b                   	pop    ebx
c00222c9:	5e                   	pop    esi
c00222ca:	5f                   	pop    edi
c00222cb:	c3                   	ret    

c00222cc <SoundDevice::getAudio(int, float*, float*)>:
c00222cc:	55                   	push   ebp
c00222cd:	31 ed                	xor    ebp,ebp
c00222cf:	57                   	push   edi
c00222d0:	56                   	push   esi
c00222d1:	31 f6                	xor    esi,esi
c00222d3:	53                   	push   ebx
c00222d4:	83 ec 20             	sub    esp,0x20
c00222d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00222db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00222df:	c1 e0 02             	shl    eax,0x2
c00222e2:	50                   	push   eax
c00222e3:	6a 00                	push   0x0
c00222e5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00222e9:	e8 62 e4 fd ff       	call   c0000750 <memset>
c00222ee:	83 c4 10             	add    esp,0x10
c00222f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222f9:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c0022300:	85 c9                	test   ecx,ecx
c0022302:	74 52                	je     c0022356 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c0022304:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022308:	99                   	cdq    
c0022309:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c002230f:	50                   	push   eax
c0022310:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022316:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002231a:	51                   	push   ecx
c002231b:	e8 da f9 ff ff       	call   c0021cfa <SoundChannel::unbuffer(float*, int, int)>
c0022320:	31 d2                	xor    edx,edx
c0022322:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022326:	83 c4 10             	add    esp,0x10
c0022329:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002232d:	7d 1e                	jge    c002234d <SoundDevice::getAudio(int, float*, float*)+0x81>
c002232f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022333:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022337:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c002233a:	89 cf                	mov    edi,ecx
c002233c:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022342:	0f af ca             	imul   ecx,edx
c0022345:	42                   	inc    edx
c0022346:	01 e9                	add    ecx,ebp
c0022348:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c002234b:	eb dc                	jmp    c0022329 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c002234d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022351:	45                   	inc    ebp
c0022352:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022356:	46                   	inc    esi
c0022357:	83 fe 20             	cmp    esi,0x20
c002235a:	75 9d                	jne    c00222f9 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c002235c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022360:	83 c4 1c             	add    esp,0x1c
c0022363:	5b                   	pop    ebx
c0022364:	5e                   	pop    esi
c0022365:	5f                   	pop    edi
c0022366:	5d                   	pop    ebp
c0022367:	c3                   	ret    

c0022368 <PCI::open(int, int, void*)>:
c0022368:	83 ec 18             	sub    esp,0x18
c002236b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002236f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022373:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022379:	8b 10                	mov    edx,DWORD PTR [eax]
c002237b:	50                   	push   eax
c002237c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002237f:	31 c0                	xor    eax,eax
c0022381:	83 c4 1c             	add    esp,0x1c
c0022384:	c3                   	ret    
c0022385:	90                   	nop

c0022386 <PCI::close(int, int, void*)>:
c0022386:	31 c0                	xor    eax,eax
c0022388:	c3                   	ret    
c0022389:	90                   	nop

c002238a <PCI::PCI()>:
c002238a:	83 ec 0c             	sub    esp,0xc
c002238d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022391:	83 ec 08             	sub    esp,0x8
c0022394:	68 38 c0 02 c0       	push   0xc002c038
c0022399:	50                   	push   eax
c002239a:	e8 f7 0f ff ff       	call   c0013396 <Bus::Bus(char const*)>
c002239f:	83 c4 10             	add    esp,0x10
c00223a2:	ba 24 c1 02 c0       	mov    edx,0xc002c124
c00223a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ab:	89 10                	mov    DWORD PTR [eax],edx
c00223ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00223bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223bf:	a3 44 1d 03 c0       	mov    ds:0xc0031d44,eax
c00223c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223ce:	0f b6 d0             	movzx  edx,al
c00223d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00223dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223e6:	0f b6 d0             	movzx  edx,al
c00223e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ed:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00223f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223fc:	8d 50 01             	lea    edx,[eax+0x1]
c00223ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022403:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022409:	0f b6 d0             	movzx  edx,al
c002240c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022410:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022414:	83 c9 c0             	or     ecx,0xffffffc0
c0022417:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002241b:	90                   	nop
c002241c:	83 c4 0c             	add    esp,0xc
c002241f:	c3                   	ret    

c0022420 <PCI::readBAR8(unsigned int, int)>:
c0022420:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022424:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022428:	f6 c2 01             	test   dl,0x1
c002242b:	74 07                	je     c0022434 <PCI::readBAR8(unsigned int, int)+0x14>
c002242d:	83 e2 fc             	and    edx,0xfffffffc
c0022430:	01 c2                	add    edx,eax
c0022432:	ec                   	in     al,dx
c0022433:	c3                   	ret    
c0022434:	83 e2 f0             	and    edx,0xfffffff0
c0022437:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002243a:	c3                   	ret    
c002243b:	90                   	nop

c002243c <PCI::readBAR16(unsigned int, int)>:
c002243c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022440:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022444:	f6 c2 01             	test   dl,0x1
c0022447:	74 08                	je     c0022451 <PCI::readBAR16(unsigned int, int)+0x15>
c0022449:	83 e2 fc             	and    edx,0xfffffffc
c002244c:	01 c2                	add    edx,eax
c002244e:	66 ed                	in     ax,dx
c0022450:	c3                   	ret    
c0022451:	83 e2 f0             	and    edx,0xfffffff0
c0022454:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022458:	c3                   	ret    
c0022459:	90                   	nop

c002245a <PCI::readBAR32(unsigned int, int)>:
c002245a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002245e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022462:	f6 c2 01             	test   dl,0x1
c0022465:	74 07                	je     c002246e <PCI::readBAR32(unsigned int, int)+0x14>
c0022467:	83 e2 fc             	and    edx,0xfffffffc
c002246a:	01 c2                	add    edx,eax
c002246c:	ed                   	in     eax,dx
c002246d:	c3                   	ret    
c002246e:	83 e2 f0             	and    edx,0xfffffff0
c0022471:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022474:	c3                   	ret    
c0022475:	90                   	nop

c0022476 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022476:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002247a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002247e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022482:	f6 c2 01             	test   dl,0x1
c0022485:	74 07                	je     c002248e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022487:	83 e2 fc             	and    edx,0xfffffffc
c002248a:	01 ca                	add    edx,ecx
c002248c:	ee                   	out    dx,al
c002248d:	c3                   	ret    
c002248e:	83 e2 f0             	and    edx,0xfffffff0
c0022491:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022494:	c3                   	ret    
c0022495:	90                   	nop

c0022496 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022496:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002249a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002249e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224a2:	f6 c2 01             	test   dl,0x1
c00224a5:	74 08                	je     c00224af <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00224a7:	83 e2 fc             	and    edx,0xfffffffc
c00224aa:	01 ca                	add    edx,ecx
c00224ac:	66 ef                	out    dx,ax
c00224ae:	c3                   	ret    
c00224af:	83 e2 f0             	and    edx,0xfffffff0
c00224b2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00224b6:	c3                   	ret    
c00224b7:	90                   	nop

c00224b8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00224b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224c4:	f6 c2 01             	test   dl,0x1
c00224c7:	74 07                	je     c00224d0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00224c9:	83 e2 fc             	and    edx,0xfffffffc
c00224cc:	01 ca                	add    edx,ecx
c00224ce:	ef                   	out    dx,eax
c00224cf:	c3                   	ret    
c00224d0:	83 e2 f0             	and    edx,0xfffffff0
c00224d3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00224d6:	c3                   	ret    
c00224d7:	90                   	nop

c00224d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224d8:	55                   	push   ebp
c00224d9:	57                   	push   edi
c00224da:	56                   	push   esi
c00224db:	53                   	push   ebx
c00224dc:	83 ec 0c             	sub    esp,0xc
c00224df:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00224e3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00224e7:	89 f0                	mov    eax,esi
c00224e9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00224ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00224f1:	3c 07                	cmp    al,0x7
c00224f3:	76 10                	jbe    c0022505 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00224f5:	83 ec 0c             	sub    esp,0xc
c00224f8:	68 40 c0 02 c0       	push   0xc002c040
c00224fd:	e8 5f 79 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0022502:	83 c4 10             	add    esp,0x10
c0022505:	80 fb 0f             	cmp    bl,0xf
c0022508:	76 10                	jbe    c002251a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c002250a:	83 ec 0c             	sub    esp,0xc
c002250d:	68 70 c0 02 c0       	push   0xc002c070
c0022512:	e8 4a 79 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0022517:	83 c4 10             	add    esp,0x10
c002251a:	8d 04 36             	lea    eax,[esi+esi*1]
c002251d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022522:	83 c8 f0             	or     eax,0xfffffff0
c0022525:	ee                   	out    dx,al
c0022526:	ba fa 0c 00 00       	mov    edx,0xcfa
c002252b:	89 e8                	mov    eax,ebp
c002252d:	ee                   	out    dx,al
c002252e:	83 c4 0c             	add    esp,0xc
c0022531:	89 d8                	mov    eax,ebx
c0022533:	66 81 e7 fc 00       	and    di,0xfc
c0022538:	5b                   	pop    ebx
c0022539:	c1 e0 08             	shl    eax,0x8
c002253c:	5e                   	pop    esi
c002253d:	09 f8                	or     eax,edi
c002253f:	5f                   	pop    edi
c0022540:	66 0d 00 c0          	or     ax,0xc000
c0022544:	5d                   	pop    ebp
c0022545:	c3                   	ret    

c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022546:	57                   	push   edi
c0022547:	56                   	push   esi
c0022548:	53                   	push   ebx
c0022549:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002254d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022551:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022557:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002255b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002255f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022563:	83 ff 01             	cmp    edi,0x1
c0022566:	75 3e                	jne    c00225a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022568:	89 de                	mov    esi,ebx
c002256a:	0f b6 c0             	movzx  eax,al
c002256d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022573:	c1 e0 10             	shl    eax,0x10
c0022576:	0f b6 c9             	movzx  ecx,cl
c0022579:	09 f0                	or     eax,esi
c002257b:	c1 e1 08             	shl    ecx,0x8
c002257e:	0f b6 d2             	movzx  edx,dl
c0022581:	09 c8                	or     eax,ecx
c0022583:	c1 e2 0b             	shl    edx,0xb
c0022586:	09 d0                	or     eax,edx
c0022588:	ba f8 0c 00 00       	mov    edx,0xcf8
c002258d:	0d 00 00 00 80       	or     eax,0x80000000
c0022592:	ef                   	out    dx,eax
c0022593:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022598:	ed                   	in     eax,dx
c0022599:	83 e3 02             	and    ebx,0x2
c002259c:	0f b6 cb             	movzx  ecx,bl
c002259f:	c1 e1 03             	shl    ecx,0x3
c00225a2:	d3 e8                	shr    eax,cl
c00225a4:	eb 43                	jmp    c00225e9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00225a6:	83 ff 02             	cmp    edi,0x2
c00225a9:	75 2c                	jne    c00225d7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00225ab:	83 ec 0c             	sub    esp,0xc
c00225ae:	0f b6 c9             	movzx  ecx,cl
c00225b1:	0f b6 d2             	movzx  edx,dl
c00225b4:	0f b6 fb             	movzx  edi,bl
c00225b7:	0f b6 c0             	movzx  eax,al
c00225ba:	57                   	push   edi
c00225bb:	51                   	push   ecx
c00225bc:	52                   	push   edx
c00225bd:	50                   	push   eax
c00225be:	56                   	push   esi
c00225bf:	e8 14 ff ff ff       	call   c00224d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225c4:	89 c2                	mov    edx,eax
c00225c6:	ed                   	in     eax,dx
c00225c7:	83 e3 02             	and    ebx,0x2
c00225ca:	83 c4 20             	add    esp,0x20
c00225cd:	0f b6 cb             	movzx  ecx,bl
c00225d0:	c1 e1 03             	shl    ecx,0x3
c00225d3:	d3 e8                	shr    eax,cl
c00225d5:	eb 12                	jmp    c00225e9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00225d7:	83 ec 0c             	sub    esp,0xc
c00225da:	68 a0 c0 02 c0       	push   0xc002c0a0
c00225df:	e8 7d 78 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c00225e4:	83 c4 10             	add    esp,0x10
c00225e7:	31 c0                	xor    eax,eax
c00225e9:	5b                   	pop    ebx
c00225ea:	5e                   	pop    esi
c00225eb:	5f                   	pop    edi
c00225ec:	c3                   	ret    
c00225ed:	90                   	nop

c00225ee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00225ee:	83 ec 18             	sub    esp,0x18
c00225f1:	6a 00                	push   0x0
c00225f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225f8:	50                   	push   eax
c00225f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225fe:	50                   	push   eax
c00225ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022604:	50                   	push   eax
c0022605:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022609:	e8 38 ff ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002260e:	83 c4 2c             	add    esp,0x2c
c0022611:	c3                   	ret    

c0022612 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022612:	83 ec 18             	sub    esp,0x18
c0022615:	6a 0e                	push   0xe
c0022617:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002261c:	50                   	push   eax
c002261d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022622:	50                   	push   eax
c0022623:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022628:	50                   	push   eax
c0022629:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002262d:	e8 14 ff ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022632:	83 c4 2c             	add    esp,0x2c
c0022635:	0f b6 c0             	movzx  eax,al
c0022638:	c3                   	ret    
c0022639:	90                   	nop

c002263a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002263a:	55                   	push   ebp
c002263b:	57                   	push   edi
c002263c:	56                   	push   esi
c002263d:	53                   	push   ebx
c002263e:	83 ec 18             	sub    esp,0x18
c0022641:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022646:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002264b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022650:	6a 0a                	push   0xa
c0022652:	56                   	push   esi
c0022653:	55                   	push   ebp
c0022654:	57                   	push   edi
c0022655:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022659:	e8 e8 fe ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002265e:	83 c4 14             	add    esp,0x14
c0022661:	89 c3                	mov    ebx,eax
c0022663:	6a 0a                	push   0xa
c0022665:	0f b6 db             	movzx  ebx,bl
c0022668:	56                   	push   esi
c0022669:	55                   	push   ebp
c002266a:	57                   	push   edi
c002266b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002266f:	e8 d2 fe ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022674:	83 c4 2c             	add    esp,0x2c
c0022677:	25 00 ff 00 00       	and    eax,0xff00
c002267c:	09 d8                	or     eax,ebx
c002267e:	5b                   	pop    ebx
c002267f:	5e                   	pop    esi
c0022680:	5f                   	pop    edi
c0022681:	5d                   	pop    ebp
c0022682:	c3                   	ret    
c0022683:	90                   	nop

c0022684 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022684:	83 ec 18             	sub    esp,0x18
c0022687:	6a 08                	push   0x8
c0022689:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002268e:	50                   	push   eax
c002268f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022694:	50                   	push   eax
c0022695:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002269a:	50                   	push   eax
c002269b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002269f:	e8 a2 fe ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226a4:	83 c4 2c             	add    esp,0x2c
c00226a7:	0f b6 c4             	movzx  eax,ah
c00226aa:	c3                   	ret    
c00226ab:	90                   	nop

c00226ac <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00226ac:	83 ec 18             	sub    esp,0x18
c00226af:	6a 08                	push   0x8
c00226b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226b6:	50                   	push   eax
c00226b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226bc:	50                   	push   eax
c00226bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226c2:	50                   	push   eax
c00226c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226c7:	e8 7a fe ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226cc:	83 c4 2c             	add    esp,0x2c
c00226cf:	c3                   	ret    

c00226d0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00226d0:	83 ec 18             	sub    esp,0x18
c00226d3:	6a 3c                	push   0x3c
c00226d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226da:	50                   	push   eax
c00226db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226e0:	50                   	push   eax
c00226e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226e6:	50                   	push   eax
c00226e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226eb:	e8 56 fe ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226f0:	83 c4 2c             	add    esp,0x2c
c00226f3:	c3                   	ret    

c00226f4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00226f4:	83 ec 18             	sub    esp,0x18
c00226f7:	6a 18                	push   0x18
c00226f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226fe:	50                   	push   eax
c00226ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022704:	50                   	push   eax
c0022705:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002270a:	50                   	push   eax
c002270b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002270f:	e8 32 fe ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022714:	83 c4 2c             	add    esp,0x2c
c0022717:	0f b6 c4             	movzx  eax,ah
c002271a:	c3                   	ret    
c002271b:	90                   	nop

c002271c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002271c:	55                   	push   ebp
c002271d:	57                   	push   edi
c002271e:	56                   	push   esi
c002271f:	53                   	push   ebx
c0022720:	83 ec 28             	sub    esp,0x28
c0022723:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022727:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002272c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022731:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022736:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002273d:	8d 43 12             	lea    eax,[ebx+0x12]
c0022740:	83 c3 10             	add    ebx,0x10
c0022743:	0f b6 c0             	movzx  eax,al
c0022746:	0f b6 db             	movzx  ebx,bl
c0022749:	50                   	push   eax
c002274a:	51                   	push   ecx
c002274b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002274f:	57                   	push   edi
c0022750:	55                   	push   ebp
c0022751:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022755:	e8 ec fd ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002275a:	83 c4 14             	add    esp,0x14
c002275d:	89 c6                	mov    esi,eax
c002275f:	53                   	push   ebx
c0022760:	c1 e6 10             	shl    esi,0x10
c0022763:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022767:	51                   	push   ecx
c0022768:	57                   	push   edi
c0022769:	55                   	push   ebp
c002276a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002276e:	e8 d3 fd ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022773:	83 c4 3c             	add    esp,0x3c
c0022776:	0f b7 c0             	movzx  eax,ax
c0022779:	5b                   	pop    ebx
c002277a:	09 f0                	or     eax,esi
c002277c:	5e                   	pop    esi
c002277d:	5f                   	pop    edi
c002277e:	5d                   	pop    ebp
c002277f:	c3                   	ret    

c0022780 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022780:	55                   	push   ebp
c0022781:	57                   	push   edi
c0022782:	56                   	push   esi
c0022783:	53                   	push   ebx
c0022784:	83 ec 0c             	sub    esp,0xc
c0022787:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002278b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002278f:	89 f5                	mov    ebp,esi
c0022791:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022797:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002279b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002279f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00227a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00227a7:	83 f9 01             	cmp    ecx,0x1
c00227aa:	75 5d                	jne    c0022809 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00227ac:	0f b6 c8             	movzx  ecx,al
c00227af:	0f b6 d2             	movzx  edx,dl
c00227b2:	c1 e1 10             	shl    ecx,0x10
c00227b5:	c1 e2 0b             	shl    edx,0xb
c00227b8:	89 f0                	mov    eax,esi
c00227ba:	25 fc 00 00 00       	and    eax,0xfc
c00227bf:	09 c1                	or     ecx,eax
c00227c1:	89 e8                	mov    eax,ebp
c00227c3:	0f b6 c0             	movzx  eax,al
c00227c6:	c1 e0 08             	shl    eax,0x8
c00227c9:	09 c1                	or     ecx,eax
c00227cb:	09 d1                	or     ecx,edx
c00227cd:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227d2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00227d8:	89 c8                	mov    eax,ecx
c00227da:	ef                   	out    dx,eax
c00227db:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227e0:	ed                   	in     eax,dx
c00227e1:	0f b7 db             	movzx  ebx,bx
c00227e4:	83 e6 02             	and    esi,0x2
c00227e7:	74 0a                	je     c00227f3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00227e9:	0f b7 d0             	movzx  edx,ax
c00227ec:	c1 e3 10             	shl    ebx,0x10
c00227ef:	09 d3                	or     ebx,edx
c00227f1:	eb 05                	jmp    c00227f8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00227f3:	66 31 c0             	xor    ax,ax
c00227f6:	09 c3                	or     ebx,eax
c00227f8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227fd:	89 c8                	mov    eax,ecx
c00227ff:	ef                   	out    dx,eax
c0022800:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022805:	89 d8                	mov    eax,ebx
c0022807:	eb 41                	jmp    c002284a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022809:	83 f9 02             	cmp    ecx,0x2
c002280c:	75 45                	jne    c0022853 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002280e:	83 ec 0c             	sub    esp,0xc
c0022811:	0f b6 d2             	movzx  edx,dl
c0022814:	89 f1                	mov    ecx,esi
c0022816:	0f b6 c0             	movzx  eax,al
c0022819:	0f b6 f1             	movzx  esi,cl
c002281c:	89 e9                	mov    ecx,ebp
c002281e:	56                   	push   esi
c002281f:	0f b6 c9             	movzx  ecx,cl
c0022822:	51                   	push   ecx
c0022823:	52                   	push   edx
c0022824:	50                   	push   eax
c0022825:	57                   	push   edi
c0022826:	e8 ad fc ff ff       	call   c00224d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002282b:	89 c2                	mov    edx,eax
c002282d:	ed                   	in     eax,dx
c002282e:	83 c4 20             	add    esp,0x20
c0022831:	0f b7 db             	movzx  ebx,bx
c0022834:	f6 c2 02             	test   dl,0x2
c0022837:	74 0c                	je     c0022845 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022839:	0f b7 c8             	movzx  ecx,ax
c002283c:	89 d8                	mov    eax,ebx
c002283e:	c1 e0 10             	shl    eax,0x10
c0022841:	09 c8                	or     eax,ecx
c0022843:	eb 05                	jmp    c002284a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022845:	66 31 c0             	xor    ax,ax
c0022848:	09 d8                	or     eax,ebx
c002284a:	ef                   	out    dx,eax
c002284b:	83 c4 0c             	add    esp,0xc
c002284e:	5b                   	pop    ebx
c002284f:	5e                   	pop    esi
c0022850:	5f                   	pop    edi
c0022851:	5d                   	pop    ebp
c0022852:	c3                   	ret    
c0022853:	c7 44 24 20 a0 c0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c0a0
c002285b:	83 c4 0c             	add    esp,0xc
c002285e:	5b                   	pop    ebx
c002285f:	5e                   	pop    esi
c0022860:	5f                   	pop    edi
c0022861:	5d                   	pop    ebp
c0022862:	e9 fa 75 ff ff       	jmp    c0019e61 <Krnl::panic(char const*)>
c0022867:	90                   	nop

c0022868 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022868:	55                   	push   ebp
c0022869:	57                   	push   edi
c002286a:	56                   	push   esi
c002286b:	53                   	push   ebx
c002286c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022872:	80 3d 50 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031d50,0x0
c0022879:	0f 85 84 00 00 00    	jne    c0022903 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c002287f:	83 ec 0c             	sub    esp,0xc
c0022882:	68 14 01 00 00       	push   0x114
c0022887:	e8 0d cd fe ff       	call   c000f599 <malloc>
c002288c:	83 c4 0c             	add    esp,0xc
c002288f:	89 c3                	mov    ebx,eax
c0022891:	ff 35 50 0f 03 c0    	push   DWORD PTR ds:0xc0030f50
c0022897:	68 a6 c0 02 c0       	push   0xc002c0a6
c002289c:	50                   	push   eax
c002289d:	e8 b2 03 ff ff       	call   c0012c54 <File::File(char const*, Process*)>
c00228a2:	5a                   	pop    edx
c00228a3:	59                   	pop    ecx
c00228a4:	6a 01                	push   0x1
c00228a6:	53                   	push   ebx
c00228a7:	e8 0c 04 ff ff       	call   c0012cb8 <File::open(FileOpenMode)>
c00228ac:	83 c4 0c             	add    esp,0xc
c00228af:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00228b3:	50                   	push   eax
c00228b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00228b8:	50                   	push   eax
c00228b9:	53                   	push   ebx
c00228ba:	e8 a5 06 ff ff       	call   c0012f64 <File::stat(unsigned long long*, bool*)>
c00228bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228c3:	40                   	inc    eax
c00228c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00228c7:	e8 cd cc fe ff       	call   c000f599 <malloc>
c00228cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00228d0:	a3 4c 1d 03 c0       	mov    ds:0xc0031d4c,eax
c00228d5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00228d9:	5e                   	pop    esi
c00228da:	8b 13                	mov    edx,DWORD PTR [ebx]
c00228dc:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00228e0:	51                   	push   ecx
c00228e1:	50                   	push   eax
c00228e2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228e6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228ea:	53                   	push   ebx
c00228eb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00228ee:	83 c4 14             	add    esp,0x14
c00228f1:	53                   	push   ebx
c00228f2:	e8 1f 04 ff ff       	call   c0012d16 <File::close()>
c00228f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228fb:	83 c4 10             	add    esp,0x10
c00228fe:	a3 48 1d 03 c0       	mov    ds:0xc0031d48,eax
c0022903:	a1 48 1d 03 c0       	mov    eax,ds:0xc0031d48
c0022908:	8b 15 4c 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d4c
c002290e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022911:	31 ff                	xor    edi,edi
c0022913:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c002291b:	31 f6                	xor    esi,esi
c002291d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022922:	31 db                	xor    ebx,ebx
c0022924:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002292c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022931:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022938:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002293c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022943:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022947:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002294a:	0f 8e 6b 01 00 00    	jle    c0022abb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022950:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022953:	d4 40                	aam    0x40
c0022955:	d5 39                	aad    0x39
c0022957:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002295b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c002295f:	d4 40                	aam    0x40
c0022961:	d5 39                	aad    0x39
c0022963:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022967:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c002296b:	d4 40                	aam    0x40
c002296d:	d5 39                	aad    0x39
c002296f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022973:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022977:	d4 40                	aam    0x40
c0022979:	d5 39                	aad    0x39
c002297b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002297f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022983:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022987:	3c 56                	cmp    al,0x56
c0022989:	74 45                	je     c00229d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c002298b:	d4 40                	aam    0x40
c002298d:	d5 39                	aad    0x39
c002298f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022992:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022996:	0f b6 c9             	movzx  ecx,cl
c0022999:	c1 e1 04             	shl    ecx,0x4
c002299c:	d4 40                	aam    0x40
c002299e:	d5 39                	aad    0x39
c00229a0:	8d 58 d0             	lea    ebx,[eax-0x30]
c00229a3:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00229a7:	0f b6 db             	movzx  ebx,bl
c00229aa:	09 cb                	or     ebx,ecx
c00229ac:	c1 e3 04             	shl    ebx,0x4
c00229af:	d4 40                	aam    0x40
c00229b1:	d5 39                	aad    0x39
c00229b3:	8d 48 d0             	lea    ecx,[eax-0x30]
c00229b6:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00229ba:	0f b6 c9             	movzx  ecx,cl
c00229bd:	09 cb                	or     ebx,ecx
c00229bf:	c1 e3 04             	shl    ebx,0x4
c00229c2:	89 d9                	mov    ecx,ebx
c00229c4:	d4 40                	aam    0x40
c00229c6:	d5 39                	aad    0x39
c00229c8:	8d 58 d0             	lea    ebx,[eax-0x30]
c00229cb:	0f b6 db             	movzx  ebx,bl
c00229ce:	09 cb                	or     ebx,ecx
c00229d0:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00229d4:	80 f9 44             	cmp    cl,0x44
c00229d7:	74 47                	je     c0022a20 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00229d9:	88 c8                	mov    al,cl
c00229db:	d4 40                	aam    0x40
c00229dd:	d5 39                	aad    0x39
c00229df:	83 e8 30             	sub    eax,0x30
c00229e2:	0f b6 e8             	movzx  ebp,al
c00229e5:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00229e9:	c1 e5 04             	shl    ebp,0x4
c00229ec:	d4 40                	aam    0x40
c00229ee:	d5 39                	aad    0x39
c00229f0:	83 e8 30             	sub    eax,0x30
c00229f3:	0f b6 f0             	movzx  esi,al
c00229f6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00229fa:	09 ee                	or     esi,ebp
c00229fc:	c1 e6 04             	shl    esi,0x4
c00229ff:	d4 40                	aam    0x40
c0022a01:	d5 39                	aad    0x39
c0022a03:	83 e8 30             	sub    eax,0x30
c0022a06:	0f b6 e8             	movzx  ebp,al
c0022a09:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022a0d:	09 ee                	or     esi,ebp
c0022a0f:	c1 e6 04             	shl    esi,0x4
c0022a12:	89 f5                	mov    ebp,esi
c0022a14:	d4 40                	aam    0x40
c0022a16:	d5 39                	aad    0x39
c0022a18:	83 e8 30             	sub    eax,0x30
c0022a1b:	0f b6 f0             	movzx  esi,al
c0022a1e:	09 ee                	or     esi,ebp
c0022a20:	83 c7 10             	add    edi,0x10
c0022a23:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022a27:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022a2a:	3c 0a                	cmp    al,0xa
c0022a2c:	74 09                	je     c0022a37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022a2e:	45                   	inc    ebp
c0022a2f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022a32:	75 16                	jne    c0022a4a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022a37:	3c 0a                	cmp    al,0xa
c0022a39:	0f 94 c0             	sete   al
c0022a3c:	0f b6 c0             	movzx  eax,al
c0022a3f:	01 c7                	add    edi,eax
c0022a41:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022a46:	75 0c                	jne    c0022a54 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022a48:	eb 15                	jmp    c0022a5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022a4a:	47                   	inc    edi
c0022a4b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022a4e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022a52:	eb d3                	jmp    c0022a27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022a54:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022a59:	0f 85 e8 fe ff ff    	jne    c0022947 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a5f:	80 f9 44             	cmp    cl,0x44
c0022a62:	74 0b                	je     c0022a6f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022a64:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022a69:	0f 85 d8 fe ff ff    	jne    c0022947 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a6f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022a73:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022a77:	c1 e1 04             	shl    ecx,0x4
c0022a7a:	83 e8 30             	sub    eax,0x30
c0022a7d:	09 c8                	or     eax,ecx
c0022a7f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022a83:	0f 85 be fe ff ff    	jne    c0022947 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a89:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022a8d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022a91:	c1 e1 04             	shl    ecx,0x4
c0022a94:	83 e8 30             	sub    eax,0x30
c0022a97:	09 c8                	or     eax,ecx
c0022a99:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022a9d:	0f 85 a4 fe ff ff    	jne    c0022947 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022aa3:	50                   	push   eax
c0022aa4:	50                   	push   eax
c0022aa5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022aa9:	50                   	push   eax
c0022aaa:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022ab1:	e8 56 dd fd ff       	call   c000080c <strcpy>
c0022ab6:	83 c4 10             	add    esp,0x10
c0022ab9:	eb 15                	jmp    c0022ad0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022abb:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022ac2:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022acd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022ad0:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022ad7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022add:	5b                   	pop    ebx
c0022ade:	5e                   	pop    esi
c0022adf:	5f                   	pop    edi
c0022ae0:	5d                   	pop    ebp
c0022ae1:	c3                   	ret    

c0022ae2 <PCI::checkBus(unsigned char)>:
c0022ae2:	56                   	push   esi
c0022ae3:	53                   	push   ebx
c0022ae4:	31 db                	xor    ebx,ebx
c0022ae6:	51                   	push   ecx
c0022ae7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022aec:	52                   	push   edx
c0022aed:	53                   	push   ebx
c0022aee:	43                   	inc    ebx
c0022aef:	56                   	push   esi
c0022af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022af4:	e8 37 03 00 00       	call   c0022e30 <PCI::checkDevice(unsigned char, unsigned char)>
c0022af9:	83 c4 10             	add    esp,0x10
c0022afc:	83 fb 20             	cmp    ebx,0x20
c0022aff:	75 eb                	jne    c0022aec <PCI::checkBus(unsigned char)+0xa>
c0022b01:	58                   	pop    eax
c0022b02:	5b                   	pop    ebx
c0022b03:	5e                   	pop    esi
c0022b04:	c3                   	ret    
c0022b05:	90                   	nop

c0022b06 <PCI::foundDevice(PCIDeviceInfo)>:
c0022b06:	55                   	push   ebp
c0022b07:	57                   	push   edi
c0022b08:	56                   	push   esi
c0022b09:	53                   	push   ebx
c0022b0a:	83 ec 1c             	sub    esp,0x1c
c0022b0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b11:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b17:	0f 84 52 01 00 00    	je     c0022c6f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b1d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b21:	66 81 f9 06 04       	cmp    cx,0x406
c0022b26:	75 2c                	jne    c0022b54 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b28:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b2d:	50                   	push   eax
c0022b2e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b33:	50                   	push   eax
c0022b34:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b39:	50                   	push   eax
c0022b3a:	56                   	push   esi
c0022b3b:	e8 b4 fb ff ff       	call   c00226f4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b40:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b44:	0f b6 c0             	movzx  eax,al
c0022b47:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b4b:	83 c4 2c             	add    esp,0x2c
c0022b4e:	5b                   	pop    ebx
c0022b4f:	5e                   	pop    esi
c0022b50:	5f                   	pop    edi
c0022b51:	5d                   	pop    ebp
c0022b52:	eb 8e                	jmp    c0022ae2 <PCI::checkBus(unsigned char)>
c0022b54:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b58:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b62:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b66:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b6a:	88 d3                	mov    bl,dl
c0022b6c:	85 c0                	test   eax,eax
c0022b6e:	74 33                	je     c0022ba3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b70:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b73:	85 d2                	test   edx,edx
c0022b75:	74 28                	je     c0022b9f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b77:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b7d:	31 ef                	xor    edi,ebp
c0022b7f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b85:	75 18                	jne    c0022b9f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b8b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b91:	75 0c                	jne    c0022b9f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b93:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b99:	0f 84 d0 00 00 00    	je     c0022c6f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ba1:	eb c9                	jmp    c0022b6c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022ba3:	66 81 f9 01 06       	cmp    cx,0x601
c0022ba8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022bac:	75 19                	jne    c0022bc7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022bae:	83 ec 0c             	sub    esp,0xc
c0022bb1:	68 64 01 00 00       	push   0x164
c0022bb6:	e8 de c9 fe ff       	call   c000f599 <malloc>
c0022bbb:	89 c5                	mov    ebp,eax
c0022bbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bc0:	e8 85 0e 00 00       	call   c0023a4a <SATABus::SATABus()>
c0022bc5:	eb 1e                	jmp    c0022be5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022bc7:	66 81 f9 01 01       	cmp    cx,0x101
c0022bcc:	75 60                	jne    c0022c2e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022bce:	83 ec 0c             	sub    esp,0xc
c0022bd1:	68 70 02 00 00       	push   0x270
c0022bd6:	e8 be c9 fe ff       	call   c000f599 <malloc>
c0022bdb:	89 c5                	mov    ebp,eax
c0022bdd:	89 04 24             	mov    DWORD PTR [esp],eax
c0022be0:	e8 0f 03 00 00       	call   c0022ef4 <IDE::IDE()>
c0022be5:	58                   	pop    eax
c0022be6:	5a                   	pop    edx
c0022be7:	55                   	push   ebp
c0022be8:	56                   	push   esi
c0022be9:	e8 40 0f ff ff       	call   c0013b2e <Device::addChild(Device*)>
c0022bee:	83 ec 1c             	sub    esp,0x1c
c0022bf1:	b9 09 00 00 00       	mov    ecx,0x9
c0022bf6:	fc                   	cld    
c0022bf7:	89 e7                	mov    edi,esp
c0022bf9:	89 de                	mov    esi,ebx
c0022bfb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bfd:	55                   	push   ebp
c0022bfe:	e8 3d 0e ff ff       	call   c0013a40 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c06:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c0a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c12:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c1a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c22:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c25:	83 c4 4c             	add    esp,0x4c
c0022c28:	5b                   	pop    ebx
c0022c29:	5e                   	pop    esi
c0022c2a:	5f                   	pop    edi
c0022c2b:	5d                   	pop    ebp
c0022c2c:	ff e0                	jmp    eax
c0022c2e:	83 ec 0c             	sub    esp,0xc
c0022c31:	68 58 01 00 00       	push   0x158
c0022c36:	e8 5e c9 fe ff       	call   c000f599 <malloc>
c0022c3b:	89 c5                	mov    ebp,eax
c0022c3d:	58                   	pop    eax
c0022c3e:	5a                   	pop    edx
c0022c3f:	68 bf c0 02 c0       	push   0xc002c0bf
c0022c44:	55                   	push   ebp
c0022c45:	e8 ee 11 ff ff       	call   c0013e38 <DriverlessDevice::DriverlessDevice(char const*)>
c0022c4a:	59                   	pop    ecx
c0022c4b:	5f                   	pop    edi
c0022c4c:	55                   	push   ebp
c0022c4d:	56                   	push   esi
c0022c4e:	e8 db 0e ff ff       	call   c0013b2e <Device::addChild(Device*)>
c0022c53:	b9 09 00 00 00       	mov    ecx,0x9
c0022c58:	fc                   	cld    
c0022c59:	89 df                	mov    edi,ebx
c0022c5b:	89 de                	mov    esi,ebx
c0022c5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c5f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c63:	83 c4 2c             	add    esp,0x2c
c0022c66:	5b                   	pop    ebx
c0022c67:	5e                   	pop    esi
c0022c68:	5f                   	pop    edi
c0022c69:	5d                   	pop    ebp
c0022c6a:	e9 d1 0d ff ff       	jmp    c0013a40 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c6f:	83 c4 1c             	add    esp,0x1c
c0022c72:	5b                   	pop    ebx
c0022c73:	5e                   	pop    esi
c0022c74:	5f                   	pop    edi
c0022c75:	5d                   	pop    ebp
c0022c76:	c3                   	ret    
c0022c77:	90                   	nop

c0022c78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c78:	55                   	push   ebp
c0022c79:	57                   	push   edi
c0022c7a:	56                   	push   esi
c0022c7b:	53                   	push   ebx
c0022c7c:	83 ec 68             	sub    esp,0x68
c0022c7f:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022c83:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022c8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c8e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022c95:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022c9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c9e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022ca5:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022caa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022cae:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022cb3:	6a 0c                	push   0xc
c0022cb5:	57                   	push   edi
c0022cb6:	53                   	push   ebx
c0022cb7:	56                   	push   esi
c0022cb8:	55                   	push   ebp
c0022cb9:	e8 88 f8 ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cbe:	83 c4 20             	add    esp,0x20
c0022cc1:	57                   	push   edi
c0022cc2:	53                   	push   ebx
c0022cc3:	56                   	push   esi
c0022cc4:	55                   	push   ebp
c0022cc5:	e8 70 f9 ff ff       	call   c002263a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022cca:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022ccf:	57                   	push   edi
c0022cd0:	53                   	push   ebx
c0022cd1:	56                   	push   esi
c0022cd2:	55                   	push   ebp
c0022cd3:	e8 f8 f9 ff ff       	call   c00226d0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022cd8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022cdc:	83 c4 14             	add    esp,0x14
c0022cdf:	6a 3c                	push   0x3c
c0022ce1:	57                   	push   edi
c0022ce2:	53                   	push   ebx
c0022ce3:	56                   	push   esi
c0022ce4:	55                   	push   ebp
c0022ce5:	e8 5c f8 ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cea:	0f b6 c4             	movzx  eax,ah
c0022ced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022cf1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022cf5:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022cf9:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0022cfe:	83 c4 20             	add    esp,0x20
c0022d01:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d07:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022d0e:	74 7c                	je     c0022d8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022d10:	31 c0                	xor    eax,eax
c0022d12:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c0022d18:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d1e:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022d24:	7e 66                	jle    c0022d8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022d26:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022d29:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d30:	39 cb                	cmp    ebx,ecx
c0022d32:	75 55                	jne    c0022d89 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d34:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d3b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022d3f:	75 48                	jne    c0022d89 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022d45:	83 ec 0c             	sub    esp,0xc
c0022d48:	68 d9 c0 02 c0       	push   0xc002c0d9
c0022d4d:	e8 a3 f9 fe ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0022d52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d56:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c0022d5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022d60:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d66:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022d6e:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022d72:	52                   	push   edx
c0022d73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d77:	53                   	push   ebx
c0022d78:	68 fe c0 02 c0       	push   0xc002c0fe
c0022d7d:	e8 73 f9 fe ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0022d82:	83 c4 20             	add    esp,0x20
c0022d85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d89:	40                   	inc    eax
c0022d8a:	eb 86                	jmp    c0022d12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022d8c:	31 d2                	xor    edx,edx
c0022d8e:	83 ec 0c             	sub    esp,0xc
c0022d91:	57                   	push   edi
c0022d92:	53                   	push   ebx
c0022d93:	56                   	push   esi
c0022d94:	52                   	push   edx
c0022d95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022d99:	55                   	push   ebp
c0022d9a:	e8 7d f9 ff ff       	call   c002271c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022da3:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022da7:	42                   	inc    edx
c0022da8:	83 c4 20             	add    esp,0x20
c0022dab:	83 fa 06             	cmp    edx,0x6
c0022dae:	75 de                	jne    c0022d8e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022db0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022db5:	83 ec 0c             	sub    esp,0xc
c0022db8:	86 e0                	xchg   al,ah
c0022dba:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022dbf:	6a 02                	push   0x2
c0022dc1:	57                   	push   edi
c0022dc2:	53                   	push   ebx
c0022dc3:	56                   	push   esi
c0022dc4:	55                   	push   ebp
c0022dc5:	e8 7c f7 ff ff       	call   c0022546 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dca:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022dcf:	83 c4 20             	add    esp,0x20
c0022dd2:	57                   	push   edi
c0022dd3:	53                   	push   ebx
c0022dd4:	56                   	push   esi
c0022dd5:	55                   	push   ebp
c0022dd6:	e8 a9 f8 ff ff       	call   c0022684 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022ddb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ddf:	57                   	push   edi
c0022de0:	53                   	push   ebx
c0022de1:	56                   	push   esi
c0022de2:	55                   	push   ebp
c0022de3:	e8 06 f8 ff ff       	call   c00225ee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022de8:	b9 09 00 00 00       	mov    ecx,0x9
c0022ded:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022df2:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022df6:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022dfa:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022dfe:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022e02:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e06:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022e0a:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022e0e:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022e12:	83 ec 0c             	sub    esp,0xc
c0022e15:	fc                   	cld    
c0022e16:	89 e7                	mov    edi,esp
c0022e18:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022e1c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e1e:	55                   	push   ebp
c0022e1f:	e8 e2 fc ff ff       	call   c0022b06 <PCI::foundDevice(PCIDeviceInfo)>
c0022e24:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e2a:	5b                   	pop    ebx
c0022e2b:	5e                   	pop    esi
c0022e2c:	5f                   	pop    edi
c0022e2d:	5d                   	pop    ebp
c0022e2e:	c3                   	ret    
c0022e2f:	90                   	nop

c0022e30 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e30:	55                   	push   ebp
c0022e31:	57                   	push   edi
c0022e32:	56                   	push   esi
c0022e33:	53                   	push   ebx
c0022e34:	83 ec 0c             	sub    esp,0xc
c0022e37:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e3b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e40:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e45:	6a 00                	push   0x0
c0022e47:	56                   	push   esi
c0022e48:	57                   	push   edi
c0022e49:	55                   	push   ebp
c0022e4a:	e8 9f f7 ff ff       	call   c00225ee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e4f:	6a 00                	push   0x0
c0022e51:	56                   	push   esi
c0022e52:	57                   	push   edi
c0022e53:	55                   	push   ebp
c0022e54:	e8 1f fe ff ff       	call   c0022c78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e59:	83 c4 20             	add    esp,0x20
c0022e5c:	6a 00                	push   0x0
c0022e5e:	56                   	push   esi
c0022e5f:	57                   	push   edi
c0022e60:	55                   	push   ebp
c0022e61:	e8 ac f7 ff ff       	call   c0022612 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e66:	83 c4 10             	add    esp,0x10
c0022e69:	84 c0                	test   al,al
c0022e6b:	79 27                	jns    c0022e94 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e6d:	bb 01 00 00 00       	mov    ebx,0x1
c0022e72:	53                   	push   ebx
c0022e73:	56                   	push   esi
c0022e74:	57                   	push   edi
c0022e75:	55                   	push   ebp
c0022e76:	e8 73 f7 ff ff       	call   c00225ee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e7b:	83 c4 10             	add    esp,0x10
c0022e7e:	66 40                	inc    ax
c0022e80:	74 0c                	je     c0022e8e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e82:	53                   	push   ebx
c0022e83:	56                   	push   esi
c0022e84:	57                   	push   edi
c0022e85:	55                   	push   ebp
c0022e86:	e8 ed fd ff ff       	call   c0022c78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e8b:	83 c4 10             	add    esp,0x10
c0022e8e:	43                   	inc    ebx
c0022e8f:	83 fb 08             	cmp    ebx,0x8
c0022e92:	75 de                	jne    c0022e72 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e94:	83 c4 0c             	add    esp,0xc
c0022e97:	5b                   	pop    ebx
c0022e98:	5e                   	pop    esi
c0022e99:	5f                   	pop    edi
c0022e9a:	5d                   	pop    ebp
c0022e9b:	c3                   	ret    

c0022e9c <PCI::detect()>:
c0022e9c:	56                   	push   esi
c0022e9d:	53                   	push   ebx
c0022e9e:	53                   	push   ebx
c0022e9f:	31 db                	xor    ebx,ebx
c0022ea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ea5:	6a 00                	push   0x0
c0022ea7:	6a 00                	push   0x0
c0022ea9:	6a 00                	push   0x0
c0022eab:	56                   	push   esi
c0022eac:	e8 61 f7 ff ff       	call   c0022612 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022eb1:	83 c4 10             	add    esp,0x10
c0022eb4:	a8 80                	test   al,0x80
c0022eb6:	75 21                	jne    c0022ed9 <PCI::detect()+0x3d>
c0022eb8:	51                   	push   ecx
c0022eb9:	51                   	push   ecx
c0022eba:	6a 00                	push   0x0
c0022ebc:	56                   	push   esi
c0022ebd:	e8 20 fc ff ff       	call   c0022ae2 <PCI::checkBus(unsigned char)>
c0022ec2:	83 c4 10             	add    esp,0x10
c0022ec5:	eb 24                	jmp    c0022eeb <PCI::detect()+0x4f>
c0022ec7:	52                   	push   edx
c0022ec8:	52                   	push   edx
c0022ec9:	53                   	push   ebx
c0022eca:	43                   	inc    ebx
c0022ecb:	56                   	push   esi
c0022ecc:	e8 11 fc ff ff       	call   c0022ae2 <PCI::checkBus(unsigned char)>
c0022ed1:	83 c4 10             	add    esp,0x10
c0022ed4:	83 fb 08             	cmp    ebx,0x8
c0022ed7:	74 12                	je     c0022eeb <PCI::detect()+0x4f>
c0022ed9:	53                   	push   ebx
c0022eda:	6a 00                	push   0x0
c0022edc:	6a 00                	push   0x0
c0022ede:	56                   	push   esi
c0022edf:	e8 0a f7 ff ff       	call   c00225ee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ee4:	83 c4 10             	add    esp,0x10
c0022ee7:	66 40                	inc    ax
c0022ee9:	74 dc                	je     c0022ec7 <PCI::detect()+0x2b>
c0022eeb:	58                   	pop    eax
c0022eec:	5b                   	pop    ebx
c0022eed:	5e                   	pop    esi
c0022eee:	c3                   	ret    
c0022eef:	90                   	nop

c0022ef0 <IDE::close(int, int, void*)>:
c0022ef0:	83 c8 ff             	or     eax,0xffffffff
c0022ef3:	c3                   	ret    

c0022ef4 <IDE::IDE()>:
c0022ef4:	83 ec 0c             	sub    esp,0xc
c0022ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022efb:	83 ec 08             	sub    esp,0x8
c0022efe:	68 48 c1 02 c0       	push   0xc002c148
c0022f03:	50                   	push   eax
c0022f04:	e8 d3 0f ff ff       	call   c0013edc <HardDiskController::HardDiskController(char const*)>
c0022f09:	83 c4 10             	add    esp,0x10
c0022f0c:	ba d8 c1 02 c0       	mov    edx,0xc002c1d8
c0022f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f15:	89 10                	mov    DWORD PTR [eax],edx
c0022f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f1b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f22:	90                   	nop
c0022f23:	83 c4 0c             	add    esp,0xc
c0022f26:	c3                   	ret    
c0022f27:	90                   	nop

c0022f28 <IDE::prepareInterrupt(unsigned char)>:
c0022f28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f31:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f39:	c3                   	ret    

c0022f3a <selectDrive(unsigned char, unsigned char)>:
c0022f3a:	c3                   	ret    
c0022f3b:	90                   	nop

c0022f3c <IDE::getBase(unsigned char)>:
c0022f3c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f45:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f4d:	c3                   	ret    

c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f4e:	55                   	push   ebp
c0022f4f:	57                   	push   edi
c0022f50:	56                   	push   esi
c0022f51:	53                   	push   ebx
c0022f52:	83 ec 1c             	sub    esp,0x1c
c0022f55:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f59:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f5d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f60:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f68:	80 f9 03             	cmp    cl,0x3
c0022f6b:	77 51                	ja     c0022fbe <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f71:	0f b6 f2             	movzx  esi,dl
c0022f74:	0f b6 db             	movzx  ebx,bl
c0022f77:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f7a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f7e:	83 ca 80             	or     edx,0xffffff80
c0022f81:	0f b6 d2             	movzx  edx,dl
c0022f84:	52                   	push   edx
c0022f85:	6a 0c                	push   0xc
c0022f87:	56                   	push   esi
c0022f88:	57                   	push   edi
c0022f89:	e8 c0 ff ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f8e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f97:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f9b:	ee                   	out    dx,al
c0022f9c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022fa1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022fa5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022fa9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022fad:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022fb5:	83 c4 2c             	add    esp,0x2c
c0022fb8:	5b                   	pop    ebx
c0022fb9:	5e                   	pop    esi
c0022fba:	5f                   	pop    edi
c0022fbb:	5d                   	pop    ebp
c0022fbc:	eb 90                	jmp    c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fbe:	80 fb 07             	cmp    bl,0x7
c0022fc1:	77 12                	ja     c0022fd5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022fc3:	0f b6 d2             	movzx  edx,dl
c0022fc6:	0f b6 db             	movzx  ebx,bl
c0022fc9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022fd1:	89 da                	mov    edx,ebx
c0022fd3:	eb 2f                	jmp    c0023004 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fd5:	80 fb 0d             	cmp    bl,0xd
c0022fd8:	77 13                	ja     c0022fed <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022fda:	0f b6 d2             	movzx  edx,dl
c0022fdd:	0f b6 db             	movzx  ebx,bl
c0022fe0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022fe7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022feb:	eb 17                	jmp    c0023004 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fed:	80 fb 15             	cmp    bl,0x15
c0022ff0:	77 13                	ja     c0023005 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022ff2:	0f b6 d2             	movzx  edx,dl
c0022ff5:	0f b6 db             	movzx  ebx,bl
c0022ff8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023000:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023004:	ee                   	out    dx,al
c0023005:	83 c4 1c             	add    esp,0x1c
c0023008:	5b                   	pop    ebx
c0023009:	5e                   	pop    esi
c002300a:	5f                   	pop    edi
c002300b:	5d                   	pop    ebp
c002300c:	c3                   	ret    
c002300d:	90                   	nop

c002300e <IDE::read(unsigned char, unsigned char)>:
c002300e:	55                   	push   ebp
c002300f:	57                   	push   edi
c0023010:	56                   	push   esi
c0023011:	53                   	push   ebx
c0023012:	83 ec 1c             	sub    esp,0x1c
c0023015:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023019:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002301d:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023020:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023024:	3c 03                	cmp    al,0x3
c0023026:	77 43                	ja     c002306b <IDE::read(unsigned char, unsigned char)+0x5d>
c0023028:	0f b6 f2             	movzx  esi,dl
c002302b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002302e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023032:	83 c8 80             	or     eax,0xffffff80
c0023035:	0f b6 c0             	movzx  eax,al
c0023038:	50                   	push   eax
c0023039:	6a 0c                	push   0xc
c002303b:	56                   	push   esi
c002303c:	57                   	push   edi
c002303d:	e8 0c ff ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023042:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023047:	0f b6 c3             	movzx  eax,bl
c002304a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002304e:	ec                   	in     al,dx
c002304f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023053:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023058:	52                   	push   edx
c0023059:	6a 0c                	push   0xc
c002305b:	56                   	push   esi
c002305c:	57                   	push   edi
c002305d:	e8 ec fe ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023062:	83 c4 20             	add    esp,0x20
c0023065:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023069:	eb 49                	jmp    c00230b4 <IDE::read(unsigned char, unsigned char)+0xa6>
c002306b:	80 fb 07             	cmp    bl,0x7
c002306e:	77 12                	ja     c0023082 <IDE::read(unsigned char, unsigned char)+0x74>
c0023070:	0f b6 d2             	movzx  edx,dl
c0023073:	0f b6 c3             	movzx  eax,bl
c0023076:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002307e:	89 c2                	mov    edx,eax
c0023080:	eb 31                	jmp    c00230b3 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023082:	80 fb 0d             	cmp    bl,0xd
c0023085:	77 13                	ja     c002309a <IDE::read(unsigned char, unsigned char)+0x8c>
c0023087:	0f b6 d2             	movzx  edx,dl
c002308a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023091:	0f b6 d3             	movzx  edx,bl
c0023094:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023098:	eb 19                	jmp    c00230b3 <IDE::read(unsigned char, unsigned char)+0xa5>
c002309a:	31 c0                	xor    eax,eax
c002309c:	80 fb 15             	cmp    bl,0x15
c002309f:	77 13                	ja     c00230b4 <IDE::read(unsigned char, unsigned char)+0xa6>
c00230a1:	0f b6 d2             	movzx  edx,dl
c00230a4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00230ac:	0f b6 d3             	movzx  edx,bl
c00230af:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00230b3:	ec                   	in     al,dx
c00230b4:	83 c4 1c             	add    esp,0x1c
c00230b7:	5b                   	pop    ebx
c00230b8:	5e                   	pop    esi
c00230b9:	5f                   	pop    edi
c00230ba:	5d                   	pop    ebp
c00230bb:	c3                   	ret    

c00230bc <IDE::waitInterrupt(unsigned char)>:
c00230bc:	55                   	push   ebp
c00230bd:	57                   	push   edi
c00230be:	56                   	push   esi
c00230bf:	53                   	push   ebx
c00230c0:	31 db                	xor    ebx,ebx
c00230c2:	83 ec 0c             	sub    esp,0xc
c00230c5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230c9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00230ce:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00230d6:	89 e8                	mov    eax,ebp
c00230d8:	84 c0                	test   al,al
c00230da:	75 34                	jne    c0023110 <IDE::waitInterrupt(unsigned char)+0x54>
c00230dc:	52                   	push   edx
c00230dd:	6a 0c                	push   0xc
c00230df:	56                   	push   esi
c00230e0:	57                   	push   edi
c00230e1:	e8 28 ff ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c00230e6:	83 c4 10             	add    esp,0x10
c00230e9:	a8 01                	test   al,0x1
c00230eb:	75 2b                	jne    c0023118 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230ed:	f6 c3 04             	test   bl,0x4
c00230f0:	75 16                	jne    c0023108 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230f2:	83 fb 32             	cmp    ebx,0x32
c00230f5:	7e 11                	jle    c0023108 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230f7:	50                   	push   eax
c00230f8:	50                   	push   eax
c00230f9:	6a 00                	push   0x0
c00230fb:	68 80 96 98 00       	push   0x989680
c0023100:	e8 c6 ab ff ff       	call   c001dccb <nanoSleep(unsigned long long)>
c0023105:	83 c4 10             	add    esp,0x10
c0023108:	83 fb 3c             	cmp    ebx,0x3c
c002310b:	74 0b                	je     c0023118 <IDE::waitInterrupt(unsigned char)+0x5c>
c002310d:	43                   	inc    ebx
c002310e:	eb be                	jmp    c00230ce <IDE::waitInterrupt(unsigned char)+0x12>
c0023110:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023118:	83 c4 0c             	add    esp,0xc
c002311b:	89 e8                	mov    eax,ebp
c002311d:	5b                   	pop    ebx
c002311e:	5e                   	pop    esi
c002311f:	5f                   	pop    edi
c0023120:	5d                   	pop    ebp
c0023121:	c3                   	ret    

c0023122 <ideChannel0IRQHandler(regs*, void*)>:
c0023122:	83 ec 10             	sub    esp,0x10
c0023125:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023129:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023130:	6a 07                	push   0x7
c0023132:	6a 00                	push   0x0
c0023134:	50                   	push   eax
c0023135:	e8 d4 fe ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c002313a:	83 c4 1c             	add    esp,0x1c
c002313d:	c3                   	ret    

c002313e <ideChannel1IRQHandler(regs*, void*)>:
c002313e:	83 ec 10             	sub    esp,0x10
c0023141:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023145:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002314c:	6a 07                	push   0x7
c002314e:	6a 01                	push   0x1
c0023150:	50                   	push   eax
c0023151:	e8 b8 fe ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c0023156:	83 c4 1c             	add    esp,0x1c
c0023159:	c3                   	ret    

c002315a <IDE::enableIRQs(unsigned char, bool)>:
c002315a:	57                   	push   edi
c002315b:	56                   	push   esi
c002315c:	be 04 00 00 00       	mov    esi,0x4
c0023161:	53                   	push   ebx
c0023162:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023167:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002316b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023170:	0f 94 c0             	sete   al
c0023173:	d1 e0                	shl    eax,1
c0023175:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002317c:	0f b6 c0             	movzx  eax,al
c002317f:	50                   	push   eax
c0023180:	6a 0c                	push   0xc
c0023182:	57                   	push   edi
c0023183:	53                   	push   ebx
c0023184:	e8 c5 fd ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023189:	83 c4 10             	add    esp,0x10
c002318c:	50                   	push   eax
c002318d:	6a 0c                	push   0xc
c002318f:	57                   	push   edi
c0023190:	53                   	push   ebx
c0023191:	e8 78 fe ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c0023196:	83 c4 10             	add    esp,0x10
c0023199:	4e                   	dec    esi
c002319a:	75 f0                	jne    c002318c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002319c:	5b                   	pop    ebx
c002319d:	5e                   	pop    esi
c002319e:	5f                   	pop    edi
c002319f:	c3                   	ret    

c00231a0 <IDE::open(int, int, void*)>:
c00231a0:	55                   	push   ebp
c00231a1:	57                   	push   edi
c00231a2:	56                   	push   esi
c00231a3:	53                   	push   ebx
c00231a4:	83 ec 1c             	sub    esp,0x1c
c00231a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00231ab:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00231b4:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00231bd:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00231c4:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00231cb:	0f 85 b0 02 00 00    	jne    c0023481 <IDE::open(int, int, void*)+0x2e1>
c00231d1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00231d7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00231db:	83 e0 7f             	and    eax,0x7f
c00231de:	3c 05                	cmp    al,0x5
c00231e0:	74 04                	je     c00231e6 <IDE::open(int, int, void*)+0x46>
c00231e2:	3c 0f                	cmp    al,0xf
c00231e4:	75 32                	jne    c0023218 <IDE::open(int, int, void*)+0x78>
c00231e6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00231ec:	83 e0 fc             	and    eax,0xfffffffc
c00231ef:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00231f6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00231fc:	83 e0 fc             	and    eax,0xfffffffc
c00231ff:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023206:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002320c:	83 e0 fc             	and    eax,0xfffffffc
c002320f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023216:	eb 14                	jmp    c002322c <IDE::open(int, int, void*)+0x8c>
c0023218:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023222:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002322c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023233:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002323a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002323e:	89 c6                	mov    esi,eax
c0023240:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023245:	c1 e6 10             	shl    esi,0x10
c0023248:	89 e8                	mov    eax,ebp
c002324a:	89 fa                	mov    edx,edi
c002324c:	c1 e0 0b             	shl    eax,0xb
c002324f:	09 f0                	or     eax,esi
c0023251:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023258:	c1 e6 08             	shl    esi,0x8
c002325b:	09 c6                	or     esi,eax
c002325d:	89 f0                	mov    eax,esi
c002325f:	0d 08 00 00 80       	or     eax,0x80000008
c0023264:	ef                   	out    dx,eax
c0023265:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002326a:	89 ca                	mov    edx,ecx
c002326c:	ed                   	in     eax,dx
c002326d:	c1 e8 10             	shr    eax,0x10
c0023270:	3d ff ff 00 00       	cmp    eax,0xffff
c0023275:	0f 84 f5 00 00 00    	je     c0023370 <IDE::open(int, int, void*)+0x1d0>
c002327b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023281:	89 fa                	mov    edx,edi
c0023283:	89 f0                	mov    eax,esi
c0023285:	ef                   	out    dx,eax
c0023286:	b0 fe                	mov    al,0xfe
c0023288:	89 ca                	mov    edx,ecx
c002328a:	ee                   	out    dx,al
c002328b:	89 f0                	mov    eax,esi
c002328d:	89 fa                	mov    edx,edi
c002328f:	ef                   	out    dx,eax
c0023290:	89 ca                	mov    edx,ecx
c0023292:	ed                   	in     eax,dx
c0023293:	3c fe                	cmp    al,0xfe
c0023295:	0f 85 a9 00 00 00    	jne    c0023344 <IDE::open(int, int, void*)+0x1a4>
c002329b:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c00232a1:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00232a8:	74 33                	je     c00232dd <IDE::open(int, int, void*)+0x13d>
c00232aa:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00232b0:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00232b4:	40                   	inc    eax
c00232b5:	83 ec 0c             	sub    esp,0xc
c00232b8:	0f b6 c0             	movzx  eax,al
c00232bb:	50                   	push   eax
c00232bc:	55                   	push   ebp
c00232bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00232c1:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00232c7:	51                   	push   ecx
c00232c8:	e8 4d 48 ff ff       	call   c0017b1a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00232cd:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00232d2:	83 c4 1c             	add    esp,0x1c
c00232d5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00232db:	eb 0a                	jmp    c00232e7 <IDE::open(int, int, void*)+0x147>
c00232dd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00232e7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00232ee:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00232f5:	c1 e1 10             	shl    ecx,0x10
c00232f8:	c1 e0 08             	shl    eax,0x8
c00232fb:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023300:	09 c1                	or     ecx,eax
c0023302:	89 fa                	mov    edx,edi
c0023304:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002330b:	c1 e0 0b             	shl    eax,0xb
c002330e:	09 c1                	or     ecx,eax
c0023310:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023316:	89 c8                	mov    eax,ecx
c0023318:	ef                   	out    dx,eax
c0023319:	be fc 0c 00 00       	mov    esi,0xcfc
c002331e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023324:	89 f2                	mov    edx,esi
c0023326:	ee                   	out    dx,al
c0023327:	89 c8                	mov    eax,ecx
c0023329:	89 fa                	mov    edx,edi
c002332b:	ef                   	out    dx,eax
c002332c:	89 f2                	mov    edx,esi
c002332e:	ed                   	in     eax,dx
c002332f:	0f b6 c0             	movzx  eax,al
c0023332:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023338:	74 46                	je     c0023380 <IDE::open(int, int, void*)+0x1e0>
c002333a:	83 ec 0c             	sub    esp,0xc
c002333d:	68 60 c1 02 c0       	push   0xc002c160
c0023342:	eb 34                	jmp    c0023378 <IDE::open(int, int, void*)+0x1d8>
c0023344:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002334d:	75 17                	jne    c0023366 <IDE::open(int, int, void*)+0x1c6>
c002334f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023354:	74 07                	je     c002335d <IDE::open(int, int, void*)+0x1bd>
c0023356:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002335b:	75 09                	jne    c0023366 <IDE::open(int, int, void*)+0x1c6>
c002335d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023364:	eb 1a                	jmp    c0023380 <IDE::open(int, int, void*)+0x1e0>
c0023366:	83 ec 0c             	sub    esp,0xc
c0023369:	68 68 c1 02 c0       	push   0xc002c168
c002336e:	eb 08                	jmp    c0023378 <IDE::open(int, int, void*)+0x1d8>
c0023370:	83 ec 0c             	sub    esp,0xc
c0023373:	68 99 c1 02 c0       	push   0xc002c199
c0023378:	e8 e4 6a ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c002337d:	83 c4 10             	add    esp,0x10
c0023380:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023387:	79 1a                	jns    c00233a3 <IDE::open(int, int, void*)+0x203>
c0023389:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002338f:	83 e0 fc             	and    eax,0xfffffffc
c0023392:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023399:	83 c0 08             	add    eax,0x8
c002339c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00233a3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00233a9:	89 c2                	mov    edx,eax
c00233ab:	83 e2 0f             	and    edx,0xf
c00233ae:	66 83 fa 08          	cmp    dx,0x8
c00233b2:	75 0a                	jne    c00233be <IDE::open(int, int, void*)+0x21e>
c00233b4:	83 e8 02             	sub    eax,0x2
c00233b7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00233be:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00233c4:	89 c2                	mov    edx,eax
c00233c6:	83 e2 0f             	and    edx,0xf
c00233c9:	66 83 fa 08          	cmp    dx,0x8
c00233cd:	75 0a                	jne    c00233d9 <IDE::open(int, int, void*)+0x239>
c00233cf:	83 e8 02             	sub    eax,0x2
c00233d2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00233d9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00233e0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00233e7:	89 d0                	mov    eax,edx
c00233e9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233ec:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233f0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00233f4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00233f7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233fc:	0f b6 c9             	movzx  ecx,cl
c00233ff:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023406:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023409:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002340d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023411:	8d 50 02             	lea    edx,[eax+0x2]
c0023414:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023419:	0f b6 d2             	movzx  edx,dl
c002341c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023422:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023425:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023429:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002342d:	8d 48 03             	lea    ecx,[eax+0x3]
c0023430:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023435:	0f b6 c9             	movzx  ecx,cl
c0023438:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002343e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023441:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023445:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023449:	8d 50 04             	lea    edx,[eax+0x4]
c002344c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023452:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023457:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002345e:	66 85 f6             	test   si,si
c0023461:	74 5b                	je     c00234be <IDE::open(int, int, void*)+0x31e>
c0023463:	0f b6 d2             	movzx  edx,dl
c0023466:	83 c0 05             	add    eax,0x5
c0023469:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002346c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023470:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023474:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002347a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002347f:	eb 3d                	jmp    c00234be <IDE::open(int, int, void*)+0x31e>
c0023481:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023487:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002348e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023495:	66 05 06 02          	add    ax,0x206
c0023499:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00234a0:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00234a7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00234ae:	66 05 06 02          	add    ax,0x206
c00234b2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234b9:	e9 e5 fe ff ff       	jmp    c00233a3 <IDE::open(int, int, void*)+0x203>
c00234be:	50                   	push   eax
c00234bf:	50                   	push   eax
c00234c0:	6a 00                	push   0x0
c00234c2:	53                   	push   ebx
c00234c3:	e8 60 fa ff ff       	call   c0022f28 <IDE::prepareInterrupt(unsigned char)>
c00234c8:	5a                   	pop    edx
c00234c9:	59                   	pop    ecx
c00234ca:	6a 01                	push   0x1
c00234cc:	53                   	push   ebx
c00234cd:	e8 56 fa ff ff       	call   c0022f28 <IDE::prepareInterrupt(unsigned char)>
c00234d2:	83 c4 0c             	add    esp,0xc
c00234d5:	6a 00                	push   0x0
c00234d7:	6a 00                	push   0x0
c00234d9:	53                   	push   ebx
c00234da:	e8 7b fc ff ff       	call   c002315a <IDE::enableIRQs(unsigned char, bool)>
c00234df:	83 c4 0c             	add    esp,0xc
c00234e2:	6a 00                	push   0x0
c00234e4:	6a 01                	push   0x1
c00234e6:	53                   	push   ebx
c00234e7:	e8 6e fc ff ff       	call   c002315a <IDE::enableIRQs(unsigned char, bool)>
c00234ec:	83 c4 10             	add    esp,0x10
c00234ef:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00234f6:	74 34                	je     c002352c <IDE::open(int, int, void*)+0x38c>
c00234f8:	83 ec 0c             	sub    esp,0xc
c00234fb:	53                   	push   ebx
c00234fc:	6a 01                	push   0x1
c00234fe:	68 22 31 02 c0       	push   0xc0023122
c0023503:	6a 0e                	push   0xe
c0023505:	53                   	push   ebx
c0023506:	e8 9b 05 ff ff       	call   c0013aa6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002350b:	83 c4 14             	add    esp,0x14
c002350e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023514:	53                   	push   ebx
c0023515:	6a 01                	push   0x1
c0023517:	68 3e 31 02 c0       	push   0xc002313e
c002351c:	6a 0f                	push   0xf
c002351e:	53                   	push   ebx
c002351f:	e8 82 05 ff ff       	call   c0013aa6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023524:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002352a:	eb 38                	jmp    c0023564 <IDE::open(int, int, void*)+0x3c4>
c002352c:	83 ec 0c             	sub    esp,0xc
c002352f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023539:	53                   	push   ebx
c002353a:	6a 00                	push   0x0
c002353c:	68 22 31 02 c0       	push   0xc0023122
c0023541:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023547:	53                   	push   ebx
c0023548:	e8 59 05 ff ff       	call   c0013aa6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002354d:	83 c4 14             	add    esp,0x14
c0023550:	53                   	push   ebx
c0023551:	6a 00                	push   0x0
c0023553:	68 3e 31 02 c0       	push   0xc002313e
c0023558:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002355e:	53                   	push   ebx
c002355f:	e8 42 05 ff ff       	call   c0013aa6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023564:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023566:	83 c4 20             	add    esp,0x20
c0023569:	83 ec 0c             	sub    esp,0xc
c002356c:	53                   	push   ebx
c002356d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023570:	83 c4 0c             	add    esp,0xc
c0023573:	6a 07                	push   0x7
c0023575:	6a 00                	push   0x0
c0023577:	53                   	push   ebx
c0023578:	e8 91 fa ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c002357d:	83 c4 0c             	add    esp,0xc
c0023580:	6a 07                	push   0x7
c0023582:	6a 01                	push   0x1
c0023584:	53                   	push   ebx
c0023585:	e8 84 fa ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c002358a:	83 c4 0c             	add    esp,0xc
c002358d:	6a 01                	push   0x1
c002358f:	6a 00                	push   0x0
c0023591:	53                   	push   ebx
c0023592:	e8 c3 fb ff ff       	call   c002315a <IDE::enableIRQs(unsigned char, bool)>
c0023597:	83 c4 0c             	add    esp,0xc
c002359a:	6a 01                	push   0x1
c002359c:	6a 01                	push   0x1
c002359e:	53                   	push   ebx
c002359f:	e8 b6 fb ff ff       	call   c002315a <IDE::enableIRQs(unsigned char, bool)>
c00235a4:	83 c4 2c             	add    esp,0x2c
c00235a7:	31 c0                	xor    eax,eax
c00235a9:	5b                   	pop    ebx
c00235aa:	5e                   	pop    esi
c00235ab:	5f                   	pop    edi
c00235ac:	5d                   	pop    ebp
c00235ad:	c3                   	ret    

c00235ae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00235ae:	55                   	push   ebp
c00235af:	57                   	push   edi
c00235b0:	56                   	push   esi
c00235b1:	53                   	push   ebx
c00235b2:	83 ec 1c             	sub    esp,0x1c
c00235b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00235b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00235bd:	8d 50 f8             	lea    edx,[eax-0x8]
c00235c0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00235c4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00235c8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00235cc:	80 fa 03             	cmp    dl,0x3
c00235cf:	77 5d                	ja     c002362e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00235d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00235d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00235d9:	0f b6 db             	movzx  ebx,bl
c00235dc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00235df:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00235e3:	83 ca 80             	or     edx,0xffffff80
c00235e6:	0f b6 d2             	movzx  edx,dl
c00235e9:	52                   	push   edx
c00235ea:	6a 0c                	push   0xc
c00235ec:	53                   	push   ebx
c00235ed:	56                   	push   esi
c00235ee:	e8 5b f9 ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235f3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00235f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023600:	0f b6 c0             	movzx  eax,al
c0023603:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023607:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023609:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002360e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023612:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023616:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002361a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023622:	83 c4 2c             	add    esp,0x2c
c0023625:	5b                   	pop    ebx
c0023626:	5e                   	pop    esi
c0023627:	5f                   	pop    edi
c0023628:	5d                   	pop    ebp
c0023629:	e9 20 f9 ff ff       	jmp    c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002362e:	3c 07                	cmp    al,0x7
c0023630:	77 10                	ja     c0023642 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023632:	0f b6 db             	movzx  ebx,bl
c0023635:	0f b6 d0             	movzx  edx,al
c0023638:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023640:	eb 2d                	jmp    c002366f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023642:	3c 0d                	cmp    al,0xd
c0023644:	77 13                	ja     c0023659 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023646:	0f b6 db             	movzx  ebx,bl
c0023649:	0f b6 c0             	movzx  eax,al
c002364c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023653:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023657:	eb 16                	jmp    c002366f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023659:	3c 15                	cmp    al,0x15
c002365b:	77 14                	ja     c0023671 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002365d:	0f b6 db             	movzx  ebx,bl
c0023660:	0f b6 c0             	movzx  eax,al
c0023663:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002366b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002366f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023671:	83 c4 1c             	add    esp,0x1c
c0023674:	5b                   	pop    ebx
c0023675:	5e                   	pop    esi
c0023676:	5f                   	pop    edi
c0023677:	5d                   	pop    ebp
c0023678:	c3                   	ret    
c0023679:	90                   	nop

c002367a <IDE::detect()>:
c002367a:	55                   	push   ebp
c002367b:	57                   	push   edi
c002367c:	56                   	push   esi
c002367d:	53                   	push   ebx
c002367e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023684:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002368b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023692:	0f 85 9d 02 00 00    	jne    c0023935 <IDE::detect()+0x2bb>
c0023698:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002369f:	31 f6                	xor    esi,esi
c00236a1:	31 ed                	xor    ebp,ebp
c00236a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00236ab:	89 e8                	mov    eax,ebp
c00236ad:	c1 e0 06             	shl    eax,0x6
c00236b0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00236b8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00236bc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00236c0:	c1 e0 04             	shl    eax,0x4
c00236c3:	83 c8 a0             	or     eax,0xffffffa0
c00236c6:	0f b6 c0             	movzx  eax,al
c00236c9:	50                   	push   eax
c00236ca:	6a 06                	push   0x6
c00236cc:	56                   	push   esi
c00236cd:	53                   	push   ebx
c00236ce:	e8 7b f8 ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236d3:	83 c4 0c             	add    esp,0xc
c00236d6:	6a 0c                	push   0xc
c00236d8:	56                   	push   esi
c00236d9:	53                   	push   ebx
c00236da:	e8 2f f9 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c00236df:	83 c4 0c             	add    esp,0xc
c00236e2:	6a 0c                	push   0xc
c00236e4:	56                   	push   esi
c00236e5:	53                   	push   ebx
c00236e6:	e8 23 f9 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c00236eb:	83 c4 0c             	add    esp,0xc
c00236ee:	6a 0c                	push   0xc
c00236f0:	56                   	push   esi
c00236f1:	53                   	push   ebx
c00236f2:	e8 17 f9 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c00236f7:	83 c4 0c             	add    esp,0xc
c00236fa:	6a 0c                	push   0xc
c00236fc:	56                   	push   esi
c00236fd:	53                   	push   ebx
c00236fe:	e8 0b f9 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c0023703:	68 ec 00 00 00       	push   0xec
c0023708:	6a 07                	push   0x7
c002370a:	56                   	push   esi
c002370b:	53                   	push   ebx
c002370c:	e8 3d f8 ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023711:	83 c4 1c             	add    esp,0x1c
c0023714:	6a 0c                	push   0xc
c0023716:	56                   	push   esi
c0023717:	53                   	push   ebx
c0023718:	e8 f1 f8 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c002371d:	83 c4 0c             	add    esp,0xc
c0023720:	6a 0c                	push   0xc
c0023722:	56                   	push   esi
c0023723:	53                   	push   ebx
c0023724:	e8 e5 f8 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c0023729:	83 c4 0c             	add    esp,0xc
c002372c:	6a 0c                	push   0xc
c002372e:	56                   	push   esi
c002372f:	53                   	push   ebx
c0023730:	e8 d9 f8 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c0023735:	83 c4 0c             	add    esp,0xc
c0023738:	6a 0c                	push   0xc
c002373a:	56                   	push   esi
c002373b:	53                   	push   ebx
c002373c:	e8 cd f8 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c0023741:	83 c4 0c             	add    esp,0xc
c0023744:	6a 0c                	push   0xc
c0023746:	56                   	push   esi
c0023747:	53                   	push   ebx
c0023748:	e8 c1 f8 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c002374d:	83 c4 10             	add    esp,0x10
c0023750:	84 c0                	test   al,al
c0023752:	0f 84 63 01 00 00    	je     c00238bb <IDE::detect()+0x241>
c0023758:	31 ff                	xor    edi,edi
c002375a:	50                   	push   eax
c002375b:	6a 0c                	push   0xc
c002375d:	56                   	push   esi
c002375e:	53                   	push   ebx
c002375f:	e8 aa f8 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c0023764:	83 c4 10             	add    esp,0x10
c0023767:	a8 01                	test   al,0x1
c0023769:	0f 85 6d 01 00 00    	jne    c00238dc <IDE::detect()+0x262>
c002376f:	84 c0                	test   al,al
c0023771:	78 04                	js     c0023777 <IDE::detect()+0xfd>
c0023773:	a8 08                	test   al,0x8
c0023775:	75 27                	jne    c002379e <IDE::detect()+0x124>
c0023777:	47                   	inc    edi
c0023778:	81 ff 17 01 00 00    	cmp    edi,0x117
c002377e:	7e da                	jle    c002375a <IDE::detect()+0xe0>
c0023780:	50                   	push   eax
c0023781:	50                   	push   eax
c0023782:	6a 00                	push   0x0
c0023784:	68 40 4b 4c 00       	push   0x4c4b40
c0023789:	e8 3d a5 ff ff       	call   c001dccb <nanoSleep(unsigned long long)>
c002378e:	83 c4 10             	add    esp,0x10
c0023791:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023797:	75 c1                	jne    c002375a <IDE::detect()+0xe0>
c0023799:	e9 3e 01 00 00       	jmp    c00238dc <IDE::detect()+0x262>
c002379e:	31 c9                	xor    ecx,ecx
c00237a0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00237a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00237a8:	83 ec 0c             	sub    esp,0xc
c00237ab:	68 80 00 00 00       	push   0x80
c00237b0:	57                   	push   edi
c00237b1:	6a 00                	push   0x0
c00237b3:	56                   	push   esi
c00237b4:	53                   	push   ebx
c00237b5:	e8 f4 fd ff ff       	call   c00235ae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00237ba:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00237bf:	89 e8                	mov    eax,ebp
c00237c1:	89 d1                	mov    ecx,edx
c00237c3:	c1 e0 06             	shl    eax,0x6
c00237c6:	01 d8                	add    eax,ebx
c00237c8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00237cf:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00237d6:	89 f2                	mov    edx,esi
c00237d8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00237de:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00237e2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00237e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237ec:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00237f3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00237fb:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023802:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002380a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023810:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023817:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002381d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023821:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023825:	83 c4 20             	add    esp,0x20
c0023828:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002382b:	83 c0 02             	add    eax,0x2
c002382e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023834:	83 c7 02             	add    edi,0x2
c0023837:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002383a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023840:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023844:	75 e2                	jne    c0023828 <IDE::detect()+0x1ae>
c0023846:	89 e8                	mov    eax,ebp
c0023848:	c1 e0 06             	shl    eax,0x6
c002384b:	01 d8                	add    eax,ebx
c002384d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023853:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002385a:	66 c1 ea 09          	shr    dx,0x9
c002385e:	83 e2 01             	and    edx,0x1
c0023861:	84 c9                	test   cl,cl
c0023863:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023869:	75 22                	jne    c002388d <IDE::detect()+0x213>
c002386b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023872:	74 46                	je     c00238ba <IDE::detect()+0x240>
c0023874:	83 ec 0c             	sub    esp,0xc
c0023877:	68 7c 01 00 00       	push   0x17c
c002387c:	e8 18 bd fe ff       	call   c000f599 <malloc>
c0023881:	89 c7                	mov    edi,eax
c0023883:	89 04 24             	mov    DWORD PTR [esp],eax
c0023886:	e8 15 05 00 00       	call   c0023da0 <ATA::ATA()>
c002388b:	eb 17                	jmp    c00238a4 <IDE::detect()+0x22a>
c002388d:	83 ec 0c             	sub    esp,0xc
c0023890:	68 80 01 00 00       	push   0x180
c0023895:	e8 ff bc fe ff       	call   c000f599 <malloc>
c002389a:	89 c7                	mov    edi,eax
c002389c:	89 04 24             	mov    DWORD PTR [esp],eax
c002389f:	e8 04 0b 00 00       	call   c00243a8 <ATAPI::ATAPI()>
c00238a4:	5a                   	pop    edx
c00238a5:	59                   	pop    ecx
c00238a6:	57                   	push   edi
c00238a7:	53                   	push   ebx
c00238a8:	e8 81 02 ff ff       	call   c0013b2e <Device::addChild(Device*)>
c00238ad:	8b 07                	mov    eax,DWORD PTR [edi]
c00238af:	53                   	push   ebx
c00238b0:	55                   	push   ebp
c00238b1:	6a 00                	push   0x0
c00238b3:	57                   	push   edi
c00238b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00238b7:	83 c4 20             	add    esp,0x20
c00238ba:	45                   	inc    ebp
c00238bb:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00238c0:	74 0d                	je     c00238cf <IDE::detect()+0x255>
c00238c2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00238ca:	e9 dc fd ff ff       	jmp    c00236ab <IDE::detect()+0x31>
c00238cf:	4e                   	dec    esi
c00238d0:	74 63                	je     c0023935 <IDE::detect()+0x2bb>
c00238d2:	be 01 00 00 00       	mov    esi,0x1
c00238d7:	e9 c7 fd ff ff       	jmp    c00236a3 <IDE::detect()+0x29>
c00238dc:	50                   	push   eax
c00238dd:	6a 04                	push   0x4
c00238df:	56                   	push   esi
c00238e0:	53                   	push   ebx
c00238e1:	e8 28 f7 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c00238e6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238ea:	83 c4 0c             	add    esp,0xc
c00238ed:	6a 05                	push   0x5
c00238ef:	56                   	push   esi
c00238f0:	53                   	push   ebx
c00238f1:	e8 18 f7 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c00238f6:	83 c4 10             	add    esp,0x10
c00238f9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00238fd:	80 fa 14             	cmp    dl,0x14
c0023900:	75 04                	jne    c0023906 <IDE::detect()+0x28c>
c0023902:	3c eb                	cmp    al,0xeb
c0023904:	eb 07                	jmp    c002390d <IDE::detect()+0x293>
c0023906:	3c 96                	cmp    al,0x96
c0023908:	75 b1                	jne    c00238bb <IDE::detect()+0x241>
c002390a:	80 fa 69             	cmp    dl,0x69
c002390d:	75 ac                	jne    c00238bb <IDE::detect()+0x241>
c002390f:	68 a1 00 00 00       	push   0xa1
c0023914:	6a 07                	push   0x7
c0023916:	56                   	push   esi
c0023917:	53                   	push   ebx
c0023918:	e8 31 f6 ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002391d:	5f                   	pop    edi
c002391e:	58                   	pop    eax
c002391f:	6a 00                	push   0x0
c0023921:	68 40 42 0f 00       	push   0xf4240
c0023926:	e8 a0 a3 ff ff       	call   c001dccb <nanoSleep(unsigned long long)>
c002392b:	83 c4 10             	add    esp,0x10
c002392e:	b1 01                	mov    cl,0x1
c0023930:	e9 6b fe ff ff       	jmp    c00237a0 <IDE::detect()+0x126>
c0023935:	81 c4 1c 02 00 00    	add    esp,0x21c
c002393b:	5b                   	pop    ebx
c002393c:	5e                   	pop    esi
c002393d:	5f                   	pop    edi
c002393e:	5d                   	pop    ebp
c002393f:	c3                   	ret    

c0023940 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023940:	55                   	push   ebp
c0023941:	57                   	push   edi
c0023942:	56                   	push   esi
c0023943:	53                   	push   ebx
c0023944:	83 ec 1c             	sub    esp,0x1c
c0023947:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002394b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002394f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023953:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023957:	88 c3                	mov    bl,al
c0023959:	84 c0                	test   al,al
c002395b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002395f:	0f 84 81 00 00 00    	je     c00239e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023965:	83 ec 0c             	sub    esp,0xc
c0023968:	68 c3 c1 02 c0       	push   0xc002c1c3
c002396d:	e8 83 ed fe ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0023972:	83 c4 10             	add    esp,0x10
c0023975:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023979:	3c 01                	cmp    al,0x1
c002397b:	74 63                	je     c00239e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c002397d:	3c 02                	cmp    al,0x2
c002397f:	75 53                	jne    c00239d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023981:	d1 e6                	shl    esi,1
c0023983:	09 ee                	or     esi,ebp
c0023985:	50                   	push   eax
c0023986:	89 f0                	mov    eax,esi
c0023988:	6a 01                	push   0x1
c002398a:	0f b6 f0             	movzx  esi,al
c002398d:	c1 e6 06             	shl    esi,0x6
c0023990:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023998:	50                   	push   eax
c0023999:	57                   	push   edi
c002399a:	e8 6f f6 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c002399f:	83 c4 10             	add    esp,0x10
c00239a2:	a8 01                	test   al,0x1
c00239a4:	74 02                	je     c00239a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c00239a6:	b3 07                	mov    bl,0x7
c00239a8:	a8 02                	test   al,0x2
c00239aa:	74 02                	je     c00239ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00239ac:	b3 03                	mov    bl,0x3
c00239ae:	a8 04                	test   al,0x4
c00239b0:	74 02                	je     c00239b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00239b2:	b3 14                	mov    bl,0x14
c00239b4:	a8 08                	test   al,0x8
c00239b6:	74 02                	je     c00239ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00239b8:	b3 03                	mov    bl,0x3
c00239ba:	a8 10                	test   al,0x10
c00239bc:	74 02                	je     c00239c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00239be:	b3 15                	mov    bl,0x15
c00239c0:	a8 20                	test   al,0x20
c00239c2:	74 02                	je     c00239c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00239c4:	b3 03                	mov    bl,0x3
c00239c6:	a8 40                	test   al,0x40
c00239c8:	74 02                	je     c00239cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00239ca:	b3 16                	mov    bl,0x16
c00239cc:	84 c0                	test   al,al
c00239ce:	79 16                	jns    c00239e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239d0:	b3 0d                	mov    bl,0xd
c00239d2:	eb 12                	jmp    c00239e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239d4:	3c 03                	cmp    al,0x3
c00239d6:	74 0c                	je     c00239e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00239d8:	3c 04                	cmp    al,0x4
c00239da:	75 0a                	jne    c00239e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239dc:	b3 08                	mov    bl,0x8
c00239de:	eb 06                	jmp    c00239e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239e0:	b3 13                	mov    bl,0x13
c00239e2:	eb 02                	jmp    c00239e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239e4:	b3 17                	mov    bl,0x17
c00239e6:	83 c4 1c             	add    esp,0x1c
c00239e9:	88 d8                	mov    al,bl
c00239eb:	5b                   	pop    ebx
c00239ec:	5e                   	pop    esi
c00239ed:	5f                   	pop    edi
c00239ee:	5d                   	pop    ebp
c00239ef:	c3                   	ret    

c00239f0 <IDE::polling(unsigned char, unsigned int)>:
c00239f0:	57                   	push   edi
c00239f1:	56                   	push   esi
c00239f2:	53                   	push   ebx
c00239f3:	bb 04 00 00 00       	mov    ebx,0x4
c00239f8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00239fc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a01:	52                   	push   edx
c0023a02:	6a 0c                	push   0xc
c0023a04:	56                   	push   esi
c0023a05:	57                   	push   edi
c0023a06:	e8 03 f6 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c0023a0b:	83 c4 10             	add    esp,0x10
c0023a0e:	4b                   	dec    ebx
c0023a0f:	75 f0                	jne    c0023a01 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023a11:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a16:	50                   	push   eax
c0023a17:	6a 0c                	push   0xc
c0023a19:	56                   	push   esi
c0023a1a:	57                   	push   edi
c0023a1b:	e8 ee f5 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c0023a20:	83 c4 10             	add    esp,0x10
c0023a23:	a8 01                	test   al,0x1
c0023a25:	75 17                	jne    c0023a3e <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a27:	a8 20                	test   al,0x20
c0023a29:	75 0f                	jne    c0023a3a <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023a2b:	4b                   	dec    ebx
c0023a2c:	74 10                	je     c0023a3e <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a2e:	84 c0                	test   al,al
c0023a30:	78 e4                	js     c0023a16 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a32:	a8 08                	test   al,0x8
c0023a34:	74 e0                	je     c0023a16 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a36:	31 c0                	xor    eax,eax
c0023a38:	eb 06                	jmp    c0023a40 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a3a:	b0 01                	mov    al,0x1
c0023a3c:	eb 02                	jmp    c0023a40 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a3e:	b0 02                	mov    al,0x2
c0023a40:	5b                   	pop    ebx
c0023a41:	5e                   	pop    esi
c0023a42:	5f                   	pop    edi
c0023a43:	c3                   	ret    

c0023a44 <SATABus::close(int, int, void*)>:
c0023a44:	31 c0                	xor    eax,eax
c0023a46:	c3                   	ret    
c0023a47:	90                   	nop

c0023a48 <SATABus::detect()>:
c0023a48:	c3                   	ret    
c0023a49:	90                   	nop

c0023a4a <SATABus::SATABus()>:
c0023a4a:	83 ec 0c             	sub    esp,0xc
c0023a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a51:	83 ec 08             	sub    esp,0x8
c0023a54:	68 fc c1 02 c0       	push   0xc002c1fc
c0023a59:	50                   	push   eax
c0023a5a:	e8 7d 04 ff ff       	call   c0013edc <HardDiskController::HardDiskController(char const*)>
c0023a5f:	83 c4 10             	add    esp,0x10
c0023a62:	ba 50 c2 02 c0       	mov    edx,0xc002c250
c0023a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a6b:	89 10                	mov    DWORD PTR [eax],edx
c0023a6d:	83 ec 0c             	sub    esp,0xc
c0023a70:	6a 50                	push   0x50
c0023a72:	e8 16 c0 fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023a77:	83 c4 10             	add    esp,0x10
c0023a7a:	89 c2                	mov    edx,eax
c0023a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023a86:	83 ec 0c             	sub    esp,0xc
c0023a89:	6a 50                	push   0x50
c0023a8b:	e8 8d d7 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0023a90:	83 c4 10             	add    esp,0x10
c0023a93:	89 c2                	mov    edx,eax
c0023a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a99:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a9f:	a1 70 db 02 c0       	mov    eax,ds:0xc002db70
c0023aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023aa8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023aae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ab2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023ab8:	83 ec 0c             	sub    esp,0xc
c0023abb:	6a 03                	push   0x3
c0023abd:	6a 50                	push   0x50
c0023abf:	51                   	push   ecx
c0023ac0:	52                   	push   edx
c0023ac1:	50                   	push   eax
c0023ac2:	e8 09 e2 fe ff       	call   c0011cd0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023ac7:	83 c4 20             	add    esp,0x20
c0023aca:	90                   	nop
c0023acb:	83 c4 0c             	add    esp,0xc
c0023ace:	c3                   	ret    
c0023acf:	90                   	nop

c0023ad0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023ad0:	83 ec 0c             	sub    esp,0xc
c0023ad3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ad7:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023ada:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023add:	09 c2                	or     edx,eax
c0023adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ae3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ae9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023aeb:	31 c0                	xor    eax,eax
c0023aed:	c1 e9 08             	shr    ecx,0x8
c0023af0:	83 e1 0f             	and    ecx,0xf
c0023af3:	39 c8                	cmp    eax,ecx
c0023af5:	74 0a                	je     c0023b01 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023af7:	f6 c2 01             	test   dl,0x1
c0023afa:	74 18                	je     c0023b14 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023afc:	d1 ea                	shr    edx,1
c0023afe:	40                   	inc    eax
c0023aff:	eb f2                	jmp    c0023af3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023b01:	83 ec 0c             	sub    esp,0xc
c0023b04:	68 20 c2 02 c0       	push   0xc002c220
c0023b09:	e8 53 63 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0023b0e:	83 c4 10             	add    esp,0x10
c0023b11:	83 c8 ff             	or     eax,0xffffffff
c0023b14:	83 c4 0c             	add    esp,0xc
c0023b17:	c3                   	ret    

c0023b18 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023b18:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023b1c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023b1f:	89 c2                	mov    edx,eax
c0023b21:	c1 ea 08             	shr    edx,0x8
c0023b24:	83 e2 0f             	and    edx,0xf
c0023b27:	fe ca                	dec    dl
c0023b29:	75 31                	jne    c0023b5c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b2b:	83 e0 0f             	and    eax,0xf
c0023b2e:	3c 03                	cmp    al,0x3
c0023b30:	75 2a                	jne    c0023b5c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b32:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023b35:	b8 02 00 00 00       	mov    eax,0x2
c0023b3a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023b40:	74 1c                	je     c0023b5e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b42:	b8 04 00 00 00       	mov    eax,0x4
c0023b47:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023b4d:	74 0f                	je     c0023b5e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b4f:	31 c0                	xor    eax,eax
c0023b51:	83 fa 03             	cmp    edx,0x3
c0023b54:	0f 94 c0             	sete   al
c0023b57:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023b5b:	c3                   	ret    
c0023b5c:	31 c0                	xor    eax,eax
c0023b5e:	c3                   	ret    
c0023b5f:	90                   	nop

c0023b60 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b64:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b67:	0f ba e2 0f          	bt     edx,0xf
c0023b6b:	72 f7                	jb     c0023b64 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023b6d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b70:	83 ca 10             	or     edx,0x10
c0023b73:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b76:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b79:	83 ca 01             	or     edx,0x1
c0023b7c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b7f:	c3                   	ret    

c0023b80 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b84:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b87:	83 e2 fe             	and    edx,0xfffffffe
c0023b8a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b8d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b90:	83 e2 ef             	and    edx,0xffffffef
c0023b93:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b96:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b99:	0f ba e2 0e          	bt     edx,0xe
c0023b9d:	72 f7                	jb     c0023b96 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b9f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ba2:	0f ba e2 0f          	bt     edx,0xf
c0023ba6:	72 ee                	jb     c0023b96 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023ba8:	c3                   	ret    
c0023ba9:	90                   	nop

c0023baa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023baa:	55                   	push   ebp
c0023bab:	57                   	push   edi
c0023bac:	56                   	push   esi
c0023bad:	53                   	push   ebx
c0023bae:	83 ec 1c             	sub    esp,0x1c
c0023bb1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023bb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023bb9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023bbd:	53                   	push   ebx
c0023bbe:	89 fd                	mov    ebp,edi
c0023bc0:	56                   	push   esi
c0023bc1:	c1 e5 0a             	shl    ebp,0xa
c0023bc4:	e8 b7 ff ff ff       	call   c0023b80 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023bc9:	83 ec 0c             	sub    esp,0xc
c0023bcc:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023bd2:	01 e8                	add    eax,ebp
c0023bd4:	89 03                	mov    DWORD PTR [ebx],eax
c0023bd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023bd8:	68 00 04 00 00       	push   0x400
c0023bdd:	6a 00                	push   0x0
c0023bdf:	50                   	push   eax
c0023be0:	e8 6b cb fd ff       	call   c0000750 <memset>
c0023be5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023beb:	89 fa                	mov    edx,edi
c0023bed:	01 e8                	add    eax,ebp
c0023bef:	c1 e7 0d             	shl    edi,0xd
c0023bf2:	89 03                	mov    DWORD PTR [ebx],eax
c0023bf4:	c1 e2 08             	shl    edx,0x8
c0023bf7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023bfe:	81 c2 00 80 00 00    	add    edx,0x8000
c0023c04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023c08:	89 d0                	mov    eax,edx
c0023c0a:	83 c4 1c             	add    esp,0x1c
c0023c0d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c13:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023c16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023c19:	68 00 01 00 00       	push   0x100
c0023c1e:	6a 00                	push   0x0
c0023c20:	50                   	push   eax
c0023c21:	e8 2a cb fd ff       	call   c0000750 <memset>
c0023c26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c2a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023c30:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023c36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c3a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023c3d:	83 c4 10             	add    esp,0x10
c0023c40:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023c47:	31 ff                	xor    edi,edi
c0023c49:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023c4f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023c55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c59:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c5f:	83 c5 20             	add    ebp,0x20
c0023c62:	01 f8                	add    eax,edi
c0023c64:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c67:	52                   	push   edx
c0023c68:	68 00 01 00 00       	push   0x100
c0023c6d:	6a 00                	push   0x0
c0023c6f:	50                   	push   eax
c0023c70:	e8 db ca fd ff       	call   c0000750 <memset>
c0023c75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c79:	83 c4 10             	add    esp,0x10
c0023c7c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023c82:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023c89:	01 f8                	add    eax,edi
c0023c8b:	81 c7 00 01 00 00    	add    edi,0x100
c0023c91:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c94:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023c9a:	75 b3                	jne    c0023c4f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023c9c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023ca0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023ca4:	83 c4 1c             	add    esp,0x1c
c0023ca7:	5b                   	pop    ebx
c0023ca8:	5e                   	pop    esi
c0023ca9:	5f                   	pop    edi
c0023caa:	5d                   	pop    ebp
c0023cab:	e9 b0 fe ff ff       	jmp    c0023b60 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023cb0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023cb0:	55                   	push   ebp
c0023cb1:	57                   	push   edi
c0023cb2:	56                   	push   esi
c0023cb3:	53                   	push   ebx
c0023cb4:	31 db                	xor    ebx,ebx
c0023cb6:	83 ec 0c             	sub    esp,0xc
c0023cb9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023cbd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023cc1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023cc4:	f7 c7 01 00 00 00    	test   edi,0x1
c0023cca:	74 7a                	je     c0023d46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023ccc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023cd0:	89 d8                	mov    eax,ebx
c0023cd2:	c1 e0 07             	shl    eax,0x7
c0023cd5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023cdc:	55                   	push   ebp
c0023cdd:	56                   	push   esi
c0023cde:	e8 35 fe ff ff       	call   c0023b18 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ce3:	5a                   	pop    edx
c0023ce4:	83 f8 01             	cmp    eax,0x1
c0023ce7:	59                   	pop    ecx
c0023ce8:	75 21                	jne    c0023d0b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023cea:	50                   	push   eax
c0023ceb:	53                   	push   ebx
c0023cec:	55                   	push   ebp
c0023ced:	56                   	push   esi
c0023cee:	e8 b7 fe ff ff       	call   c0023baa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023cf3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023cfa:	e8 9a b8 fe ff       	call   c000f599 <malloc>
c0023cff:	89 c5                	mov    ebp,eax
c0023d01:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d04:	e8 03 0d 00 00       	call   c0024a0c <SATA::SATA()>
c0023d09:	eb 24                	jmp    c0023d2f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023d0b:	83 f8 04             	cmp    eax,0x4
c0023d0e:	75 36                	jne    c0023d46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023d10:	51                   	push   ecx
c0023d11:	53                   	push   ebx
c0023d12:	55                   	push   ebp
c0023d13:	56                   	push   esi
c0023d14:	e8 91 fe ff ff       	call   c0023baa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023d19:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023d20:	e8 74 b8 fe ff       	call   c000f599 <malloc>
c0023d25:	89 c5                	mov    ebp,eax
c0023d27:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d2a:	e8 53 10 00 00       	call   c0024d82 <SATAPI::SATAPI()>
c0023d2f:	58                   	pop    eax
c0023d30:	5a                   	pop    edx
c0023d31:	55                   	push   ebp
c0023d32:	56                   	push   esi
c0023d33:	e8 f6 fd fe ff       	call   c0013b2e <Device::addChild(Device*)>
c0023d38:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023d3b:	56                   	push   esi
c0023d3c:	6a 00                	push   0x0
c0023d3e:	53                   	push   ebx
c0023d3f:	55                   	push   ebp
c0023d40:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023d43:	83 c4 20             	add    esp,0x20
c0023d46:	d1 ef                	shr    edi,1
c0023d48:	43                   	inc    ebx
c0023d49:	83 fb 20             	cmp    ebx,0x20
c0023d4c:	0f 85 72 ff ff ff    	jne    c0023cc4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023d52:	83 c4 0c             	add    esp,0xc
c0023d55:	5b                   	pop    ebx
c0023d56:	5e                   	pop    esi
c0023d57:	5f                   	pop    edi
c0023d58:	5d                   	pop    ebp
c0023d59:	c3                   	ret    

c0023d5a <SATABus::open(int, int, void*)>:
c0023d5a:	83 ec 14             	sub    esp,0x14
c0023d5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d61:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d67:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d6d:	52                   	push   edx
c0023d6e:	50                   	push   eax
c0023d6f:	e8 3c ff ff ff       	call   c0023cb0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023d74:	31 c0                	xor    eax,eax
c0023d76:	83 c4 1c             	add    esp,0x1c
c0023d79:	c3                   	ret    

c0023d7a <ATA::close(int, int, void*)>:
c0023d7a:	83 ec 0c             	sub    esp,0xc
c0023d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d81:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d87:	85 c0                	test   eax,eax
c0023d89:	74 0c                	je     c0023d97 <ATA::close(int, int, void*)+0x1d>
c0023d8b:	83 ec 0c             	sub    esp,0xc
c0023d8e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d90:	50                   	push   eax
c0023d91:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d94:	83 c4 10             	add    esp,0x10
c0023d97:	31 c0                	xor    eax,eax
c0023d99:	83 c4 0c             	add    esp,0xc
c0023d9c:	c3                   	ret    
c0023d9d:	90                   	nop

c0023d9e <ATA::powerSaving(PowerSavingLevel)>:
c0023d9e:	c3                   	ret    
c0023d9f:	90                   	nop

c0023da0 <ATA::ATA()>:
c0023da0:	83 ec 0c             	sub    esp,0xc
c0023da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023da7:	83 ec 04             	sub    esp,0x4
c0023daa:	68 00 02 00 00       	push   0x200
c0023daf:	68 19 c3 02 c0       	push   0xc002c319
c0023db4:	50                   	push   eax
c0023db5:	e8 aa 01 ff ff       	call   c0013f64 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023dba:	83 c4 10             	add    esp,0x10
c0023dbd:	ba 9c c2 02 c0       	mov    edx,0xc002c29c
c0023dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dc6:	89 10                	mov    DWORD PTR [eax],edx
c0023dc8:	90                   	nop
c0023dc9:	83 c4 0c             	add    esp,0xc
c0023dcc:	c3                   	ret    
c0023dcd:	90                   	nop

c0023dce <ATA::flush(bool)>:
c0023dce:	53                   	push   ebx
c0023dcf:	83 ec 08             	sub    esp,0x8
c0023dd2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023dd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023ddb:	19 c0                	sbb    eax,eax
c0023ddd:	83 e0 fd             	and    eax,0xfffffffd
c0023de0:	05 ea 00 00 00       	add    eax,0xea
c0023de5:	50                   	push   eax
c0023de6:	6a 07                	push   0x7
c0023de8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023def:	50                   	push   eax
c0023df0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023df6:	e8 53 f1 ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dfb:	83 c4 0c             	add    esp,0xc
c0023dfe:	6a 00                	push   0x0
c0023e00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e07:	50                   	push   eax
c0023e08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e0e:	e8 dd fb ff ff       	call   c00239f0 <IDE::polling(unsigned char, unsigned int)>
c0023e13:	83 c4 18             	add    esp,0x18
c0023e16:	5b                   	pop    ebx
c0023e17:	c3                   	ret    

c0023e18 <ATA::readyForCommand()>:
c0023e18:	56                   	push   esi
c0023e19:	53                   	push   ebx
c0023e1a:	31 db                	xor    ebx,ebx
c0023e1c:	50                   	push   eax
c0023e1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023e21:	50                   	push   eax
c0023e22:	6a 0c                	push   0xc
c0023e24:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023e2b:	50                   	push   eax
c0023e2c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023e32:	e8 d7 f1 ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c0023e37:	83 c4 10             	add    esp,0x10
c0023e3a:	a8 88                	test   al,0x88
c0023e3c:	74 23                	je     c0023e61 <ATA::readyForCommand()+0x49>
c0023e3e:	43                   	inc    ebx
c0023e3f:	83 fb 63             	cmp    ebx,0x63
c0023e42:	7e dd                	jle    c0023e21 <ATA::readyForCommand()+0x9>
c0023e44:	51                   	push   ecx
c0023e45:	51                   	push   ecx
c0023e46:	6a 00                	push   0x0
c0023e48:	68 40 42 0f 00       	push   0xf4240
c0023e4d:	e8 79 9e ff ff       	call   c001dccb <nanoSleep(unsigned long long)>
c0023e52:	83 c4 10             	add    esp,0x10
c0023e55:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023e5b:	75 c4                	jne    c0023e21 <ATA::readyForCommand()+0x9>
c0023e5d:	31 c0                	xor    eax,eax
c0023e5f:	eb 02                	jmp    c0023e63 <ATA::readyForCommand()+0x4b>
c0023e61:	b0 01                	mov    al,0x1
c0023e63:	5a                   	pop    edx
c0023e64:	5b                   	pop    ebx
c0023e65:	5e                   	pop    esi
c0023e66:	c3                   	ret    
c0023e67:	90                   	nop

c0023e68 <ATA::access(unsigned long long, int, void*, bool)>:
c0023e68:	55                   	push   ebp
c0023e69:	57                   	push   edi
c0023e6a:	56                   	push   esi
c0023e6b:	53                   	push   ebx
c0023e6c:	83 ec 2c             	sub    esp,0x2c
c0023e6f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023e73:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023e77:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023e7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e7f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023e83:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023e87:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023e8b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023e91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e95:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e9f:	c1 e0 06             	shl    eax,0x6
c0023ea2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023eaa:	74 5d                	je     c0023f09 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023eac:	89 fa                	mov    edx,edi
c0023eae:	89 f0                	mov    eax,esi
c0023eb0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023eb4:	c1 ea 1c             	shr    edx,0x1c
c0023eb7:	89 d1                	mov    ecx,edx
c0023eb9:	09 c1                	or     ecx,eax
c0023ebb:	74 25                	je     c0023ee2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023ebd:	31 ed                	xor    ebp,ebp
c0023ebf:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023ec6:	89 fa                	mov    edx,edi
c0023ec8:	89 f0                	mov    eax,esi
c0023eca:	0f ad d0             	shrd   eax,edx,cl
c0023ecd:	d3 ea                	shr    edx,cl
c0023ecf:	f6 c1 20             	test   cl,0x20
c0023ed2:	74 02                	je     c0023ed6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023ed4:	89 d0                	mov    eax,edx
c0023ed6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023eda:	45                   	inc    ebp
c0023edb:	83 fd 06             	cmp    ebp,0x6
c0023ede:	75 df                	jne    c0023ebf <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023ee0:	eb 76                	jmp    c0023f58 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023ee2:	89 f0                	mov    eax,esi
c0023ee4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023ee9:	89 fa                	mov    edx,edi
c0023eeb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023ef2:	0f ac d0 10          	shrd   eax,edx,0x10
c0023ef6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023efb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023eff:	c1 ee 18             	shr    esi,0x18
c0023f02:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023f07:	eb 56                	jmp    c0023f5f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f09:	6a 00                	push   0x0
c0023f0b:	6a 3f                	push   0x3f
c0023f0d:	57                   	push   edi
c0023f0e:	56                   	push   esi
c0023f0f:	e8 20 29 00 00       	call   c0026834 <__umoddi3>
c0023f14:	83 c4 10             	add    esp,0x10
c0023f17:	40                   	inc    eax
c0023f18:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023f1c:	6a 00                	push   0x0
c0023f1e:	68 f0 03 00 00       	push   0x3f0
c0023f23:	57                   	push   edi
c0023f24:	56                   	push   esi
c0023f25:	e8 0a 28 00 00       	call   c0026734 <__udivdi3>
c0023f2a:	83 c4 10             	add    esp,0x10
c0023f2d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023f32:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f39:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f3e:	6a 00                	push   0x0
c0023f40:	6a 3f                	push   0x3f
c0023f42:	57                   	push   edi
c0023f43:	56                   	push   esi
c0023f44:	e8 eb 27 00 00       	call   c0026734 <__udivdi3>
c0023f49:	83 c4 10             	add    esp,0x10
c0023f4c:	89 c6                	mov    esi,eax
c0023f4e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023f53:	83 e6 0f             	and    esi,0xf
c0023f56:	eb 07                	jmp    c0023f5f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f58:	31 f6                	xor    esi,esi
c0023f5a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023f5f:	bf 01 00 00 00       	mov    edi,0x1
c0023f64:	50                   	push   eax
c0023f65:	6a 00                	push   0x0
c0023f67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f6e:	50                   	push   eax
c0023f6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f73:	e8 e2 f1 ff ff       	call   c002315a <IDE::enableIRQs(unsigned char, bool)>
c0023f78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f7b:	e8 98 fe ff ff       	call   c0023e18 <ATA::readyForCommand()>
c0023f80:	83 c4 10             	add    esp,0x10
c0023f83:	84 c0                	test   al,al
c0023f85:	0f 84 5a 02 00 00    	je     c00241e5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023f8b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023f91:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023f97:	c1 e0 04             	shl    eax,0x4
c0023f9a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023fa1:	09 c6                	or     esi,eax
c0023fa3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023fa8:	75 05                	jne    c0023faf <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023faa:	83 ce a0             	or     esi,0xffffffa0
c0023fad:	eb 03                	jmp    c0023fb2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023faf:	83 ce e0             	or     esi,0xffffffe0
c0023fb2:	89 f0                	mov    eax,esi
c0023fb4:	0f b6 f0             	movzx  esi,al
c0023fb7:	56                   	push   esi
c0023fb8:	6a 06                	push   0x6
c0023fba:	51                   	push   ecx
c0023fbb:	52                   	push   edx
c0023fbc:	e8 8d ef ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fc1:	83 c4 10             	add    esp,0x10
c0023fc4:	6a 00                	push   0x0
c0023fc6:	6a 01                	push   0x1
c0023fc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fcf:	50                   	push   eax
c0023fd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fd6:	e8 73 ef ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fdb:	83 c4 10             	add    esp,0x10
c0023fde:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023fe3:	75 6e                	jne    c0024053 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023fe5:	6a 00                	push   0x0
c0023fe7:	6a 08                	push   0x8
c0023fe9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ff0:	50                   	push   eax
c0023ff1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ff7:	e8 52 ef ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ffc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024001:	50                   	push   eax
c0024002:	6a 09                	push   0x9
c0024004:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002400b:	50                   	push   eax
c002400c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024012:	e8 37 ef ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024017:	83 c4 20             	add    esp,0x20
c002401a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002401f:	50                   	push   eax
c0024020:	6a 0a                	push   0xa
c0024022:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024029:	50                   	push   eax
c002402a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024030:	e8 19 ef ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024035:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002403a:	50                   	push   eax
c002403b:	6a 0b                	push   0xb
c002403d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024044:	50                   	push   eax
c0024045:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002404b:	e8 fe ee ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024050:	83 c4 20             	add    esp,0x20
c0024053:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024058:	50                   	push   eax
c0024059:	6a 02                	push   0x2
c002405b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024062:	50                   	push   eax
c0024063:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024069:	e8 e0 ee ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002406e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024073:	50                   	push   eax
c0024074:	6a 03                	push   0x3
c0024076:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002407d:	50                   	push   eax
c002407e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024084:	e8 c5 ee ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024089:	83 c4 20             	add    esp,0x20
c002408c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024091:	50                   	push   eax
c0024092:	6a 04                	push   0x4
c0024094:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002409b:	50                   	push   eax
c002409c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240a2:	e8 a7 ee ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00240ac:	50                   	push   eax
c00240ad:	6a 05                	push   0x5
c00240af:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240b6:	50                   	push   eax
c00240b7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240bd:	e8 8c ee ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240c2:	83 c4 20             	add    esp,0x20
c00240c5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00240ca:	0f 94 c0             	sete   al
c00240cd:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00240d2:	74 09                	je     c00240dd <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00240d4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00240db:	eb 07                	jmp    c00240e4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00240dd:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00240e4:	0f b6 c0             	movzx  eax,al
c00240e7:	50                   	push   eax
c00240e8:	6a 07                	push   0x7
c00240ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240f1:	50                   	push   eax
c00240f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240f8:	e8 51 ee ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240fd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024101:	83 c4 10             	add    esp,0x10
c0024104:	85 f6                	test   esi,esi
c0024106:	0f 84 ba 00 00 00    	je     c00241c6 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002410c:	50                   	push   eax
c002410d:	6a 01                	push   0x1
c002410f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024116:	50                   	push   eax
c0024117:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002411d:	e8 ce f8 ff ff       	call   c00239f0 <IDE::polling(unsigned char, unsigned int)>
c0024122:	83 c4 10             	add    esp,0x10
c0024125:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002412b:	84 c0                	test   al,al
c002412d:	74 2c                	je     c002415b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002412f:	0f b6 f8             	movzx  edi,al
c0024132:	0f b6 d2             	movzx  edx,dl
c0024135:	57                   	push   edi
c0024136:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002413d:	50                   	push   eax
c002413e:	52                   	push   edx
c002413f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024145:	e8 f6 f7 ff ff       	call   c0023940 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002414a:	c7 04 24 74 c2 02 c0 	mov    DWORD PTR [esp],0xc002c274
c0024151:	e8 9f e5 fe ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0024156:	e9 87 00 00 00       	jmp    c00241e2 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002415b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024160:	74 33                	je     c0024195 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024162:	31 ed                	xor    ebp,ebp
c0024164:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024168:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002416c:	50                   	push   eax
c002416d:	50                   	push   eax
c002416e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024175:	50                   	push   eax
c0024176:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002417c:	e8 bb ed ff ff       	call   c0022f3c <IDE::getBase(unsigned char)>
c0024181:	89 c2                	mov    edx,eax
c0024183:	89 f8                	mov    eax,edi
c0024185:	66 ef                	out    dx,ax
c0024187:	45                   	inc    ebp
c0024188:	83 c4 10             	add    esp,0x10
c002418b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024191:	75 d1                	jne    c0024164 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024193:	eb 23                	jmp    c00241b8 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024195:	0f b6 d2             	movzx  edx,dl
c0024198:	51                   	push   ecx
c0024199:	51                   	push   ecx
c002419a:	52                   	push   edx
c002419b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241a1:	e8 96 ed ff ff       	call   c0022f3c <IDE::getBase(unsigned char)>
c00241a6:	b9 00 01 00 00       	mov    ecx,0x100
c00241ab:	89 c2                	mov    edx,eax
c00241ad:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00241b1:	fc                   	cld    
c00241b2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00241b5:	83 c4 10             	add    esp,0x10
c00241b8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00241c0:	4e                   	dec    esi
c00241c1:	e9 3e ff ff ff       	jmp    c0024104 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00241c6:	31 ff                	xor    edi,edi
c00241c8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00241cd:	74 16                	je     c00241e5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241cf:	50                   	push   eax
c00241d0:	50                   	push   eax
c00241d1:	31 c0                	xor    eax,eax
c00241d3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00241d8:	0f 94 c0             	sete   al
c00241db:	50                   	push   eax
c00241dc:	53                   	push   ebx
c00241dd:	e8 ec fb ff ff       	call   c0023dce <ATA::flush(bool)>
c00241e2:	83 c4 10             	add    esp,0x10
c00241e5:	83 c4 2c             	add    esp,0x2c
c00241e8:	89 f8                	mov    eax,edi
c00241ea:	5b                   	pop    ebx
c00241eb:	5e                   	pop    esi
c00241ec:	5f                   	pop    edi
c00241ed:	5d                   	pop    ebp
c00241ee:	c3                   	ret    
c00241ef:	90                   	nop

c00241f0 <ATA::read(unsigned long long, int, void*)>:
c00241f0:	57                   	push   edi
c00241f1:	b8 04 00 00 00       	mov    eax,0x4
c00241f6:	56                   	push   esi
c00241f7:	53                   	push   ebx
c00241f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024200:	8d 7a ff             	lea    edi,[edx-0x1]
c0024203:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024207:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002420b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024211:	77 25                	ja     c0024238 <ATA::read(unsigned long long, int, void*)+0x48>
c0024213:	b8 06 00 00 00       	mov    eax,0x6
c0024218:	85 f6                	test   esi,esi
c002421a:	74 1c                	je     c0024238 <ATA::read(unsigned long long, int, void*)+0x48>
c002421c:	50                   	push   eax
c002421d:	50                   	push   eax
c002421e:	6a 00                	push   0x0
c0024220:	56                   	push   esi
c0024221:	52                   	push   edx
c0024222:	53                   	push   ebx
c0024223:	51                   	push   ecx
c0024224:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024228:	e8 3b fc ff ff       	call   c0023e68 <ATA::access(unsigned long long, int, void*, bool)>
c002422d:	83 c4 20             	add    esp,0x20
c0024230:	85 c0                	test   eax,eax
c0024232:	0f 95 c0             	setne  al
c0024235:	0f b6 c0             	movzx  eax,al
c0024238:	5b                   	pop    ebx
c0024239:	5e                   	pop    esi
c002423a:	5f                   	pop    edi
c002423b:	c3                   	ret    

c002423c <ATA::write(unsigned long long, int, void*)>:
c002423c:	57                   	push   edi
c002423d:	b8 04 00 00 00       	mov    eax,0x4
c0024242:	56                   	push   esi
c0024243:	53                   	push   ebx
c0024244:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024248:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002424c:	8d 7a ff             	lea    edi,[edx-0x1]
c002424f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024253:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024257:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002425d:	77 25                	ja     c0024284 <ATA::write(unsigned long long, int, void*)+0x48>
c002425f:	b8 06 00 00 00       	mov    eax,0x6
c0024264:	85 f6                	test   esi,esi
c0024266:	74 1c                	je     c0024284 <ATA::write(unsigned long long, int, void*)+0x48>
c0024268:	50                   	push   eax
c0024269:	50                   	push   eax
c002426a:	6a 01                	push   0x1
c002426c:	56                   	push   esi
c002426d:	52                   	push   edx
c002426e:	53                   	push   ebx
c002426f:	51                   	push   ecx
c0024270:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024274:	e8 ef fb ff ff       	call   c0023e68 <ATA::access(unsigned long long, int, void*, bool)>
c0024279:	83 c4 20             	add    esp,0x20
c002427c:	85 c0                	test   eax,eax
c002427e:	0f 95 c0             	setne  al
c0024281:	0f b6 c0             	movzx  eax,al
c0024284:	5b                   	pop    ebx
c0024285:	5e                   	pop    esi
c0024286:	5f                   	pop    edi
c0024287:	c3                   	ret    

c0024288 <ATA::detectCHS()>:
c0024288:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002428c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024292:	c1 e0 06             	shl    eax,0x6
c0024295:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002429b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00242a5:	c7 44 24 04 7f c2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c27f
c00242ad:	e9 af 5b ff ff       	jmp    c0019e61 <Krnl::panic(char const*)>

c00242b2 <ATA::open(int, int, void*)>:
c00242b2:	53                   	push   ebx
c00242b3:	83 ec 08             	sub    esp,0x8
c00242b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00242ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00242be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00242c2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00242c8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00242ce:	c1 e0 06             	shl    eax,0x6
c00242d1:	01 d0                	add    eax,edx
c00242d3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00242da:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00242e0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00242e7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00242f1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00242f7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00242fe:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024305:	75 0c                	jne    c0024313 <ATA::open(int, int, void*)+0x61>
c0024307:	83 ec 0c             	sub    esp,0xc
c002430a:	53                   	push   ebx
c002430b:	e8 78 ff ff ff       	call   c0024288 <ATA::detectCHS()>
c0024310:	83 c4 10             	add    esp,0x10
c0024313:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024319:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002431f:	c1 e0 06             	shl    eax,0x6
c0024322:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024329:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024333:	d1 e8                	shr    eax,1
c0024335:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002433b:	6a 04                	push   0x4
c002433d:	6a 0c                	push   0xc
c002433f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024346:	50                   	push   eax
c0024347:	52                   	push   edx
c0024348:	e8 01 ec ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002434d:	90                   	nop
c002434e:	90                   	nop
c002434f:	6a 00                	push   0x0
c0024351:	6a 0c                	push   0xc
c0024353:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002435a:	50                   	push   eax
c002435b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024361:	e8 e8 eb ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024366:	83 c4 14             	add    esp,0x14
c0024369:	53                   	push   ebx
c002436a:	e8 5d fc fe ff       	call   c0013fcc <PhysicalDisk::startCache()>
c002436f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024372:	e8 d7 1e ff ff       	call   c001624e <createPartitionsForDisk(PhysicalDisk*)>
c0024377:	31 c0                	xor    eax,eax
c0024379:	83 c4 18             	add    esp,0x18
c002437c:	5b                   	pop    ebx
c002437d:	c3                   	ret    

c002437e <ATAPI::write(unsigned long long, int, void*)>:
c002437e:	b8 03 00 00 00       	mov    eax,0x3
c0024383:	c3                   	ret    

c0024384 <ATAPI::close(int, int, void*)>:
c0024384:	83 ec 0c             	sub    esp,0xc
c0024387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002438b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024391:	85 c0                	test   eax,eax
c0024393:	74 0c                	je     c00243a1 <ATAPI::close(int, int, void*)+0x1d>
c0024395:	83 ec 0c             	sub    esp,0xc
c0024398:	8b 10                	mov    edx,DWORD PTR [eax]
c002439a:	50                   	push   eax
c002439b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002439e:	83 c4 10             	add    esp,0x10
c00243a1:	31 c0                	xor    eax,eax
c00243a3:	83 c4 0c             	add    esp,0xc
c00243a6:	c3                   	ret    
c00243a7:	90                   	nop

c00243a8 <ATAPI::ATAPI()>:
c00243a8:	83 ec 0c             	sub    esp,0xc
c00243ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243af:	83 ec 04             	sub    esp,0x4
c00243b2:	68 00 08 00 00       	push   0x800
c00243b7:	68 b9 c3 02 c0       	push   0xc002c3b9
c00243bc:	50                   	push   eax
c00243bd:	e8 a2 fb fe ff       	call   c0013f64 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00243c2:	83 c4 10             	add    esp,0x10
c00243c5:	ba d4 c2 02 c0       	mov    edx,0xc002c2d4
c00243ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243ce:	89 10                	mov    DWORD PTR [eax],edx
c00243d0:	90                   	nop
c00243d1:	83 c4 0c             	add    esp,0xc
c00243d4:	c3                   	ret    
c00243d5:	90                   	nop

c00243d6 <ATAPI::readyForCommand()>:
c00243d6:	56                   	push   esi
c00243d7:	53                   	push   ebx
c00243d8:	31 db                	xor    ebx,ebx
c00243da:	50                   	push   eax
c00243db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00243df:	50                   	push   eax
c00243e0:	6a 0c                	push   0xc
c00243e2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00243e9:	50                   	push   eax
c00243ea:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00243f0:	e8 19 ec ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c00243f5:	83 c4 10             	add    esp,0x10
c00243f8:	a8 88                	test   al,0x88
c00243fa:	74 23                	je     c002441f <ATAPI::readyForCommand()+0x49>
c00243fc:	43                   	inc    ebx
c00243fd:	83 fb 63             	cmp    ebx,0x63
c0024400:	7e dd                	jle    c00243df <ATAPI::readyForCommand()+0x9>
c0024402:	51                   	push   ecx
c0024403:	51                   	push   ecx
c0024404:	6a 00                	push   0x0
c0024406:	68 40 42 0f 00       	push   0xf4240
c002440b:	e8 bb 98 ff ff       	call   c001dccb <nanoSleep(unsigned long long)>
c0024410:	83 c4 10             	add    esp,0x10
c0024413:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024419:	75 c4                	jne    c00243df <ATAPI::readyForCommand()+0x9>
c002441b:	31 c0                	xor    eax,eax
c002441d:	eb 02                	jmp    c0024421 <ATAPI::readyForCommand()+0x4b>
c002441f:	b0 01                	mov    al,0x1
c0024421:	5a                   	pop    edx
c0024422:	5b                   	pop    ebx
c0024423:	5e                   	pop    esi
c0024424:	c3                   	ret    
c0024425:	90                   	nop

c0024426 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024426:	55                   	push   ebp
c0024427:	57                   	push   edi
c0024428:	56                   	push   esi
c0024429:	53                   	push   ebx
c002442a:	83 ec 20             	sub    esp,0x20
c002442d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024431:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024435:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024439:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002443d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024441:	6a 01                	push   0x1
c0024443:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002444a:	50                   	push   eax
c002444b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024451:	e8 04 ed ff ff       	call   c002315a <IDE::enableIRQs(unsigned char, bool)>
c0024456:	5e                   	pop    esi
c0024457:	58                   	pop    eax
c0024458:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002445f:	50                   	push   eax
c0024460:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024466:	e8 bd ea ff ff       	call   c0022f28 <IDE::prepareInterrupt(unsigned char)>
c002446b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002446e:	e8 63 ff ff ff       	call   c00243d6 <ATAPI::readyForCommand()>
c0024473:	83 c4 10             	add    esp,0x10
c0024476:	84 c0                	test   al,al
c0024478:	75 0a                	jne    c0024484 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002447a:	bb 01 00 00 00       	mov    ebx,0x1
c002447f:	e9 57 02 00 00       	jmp    c00246db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024484:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002448a:	c1 e0 04             	shl    eax,0x4
c002448d:	0f b6 c0             	movzx  eax,al
c0024490:	50                   	push   eax
c0024491:	6a 06                	push   0x6
c0024493:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002449a:	50                   	push   eax
c002449b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244a1:	e8 a8 ea ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244a6:	6a 00                	push   0x0
c00244a8:	6a 01                	push   0x1
c00244aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244b1:	50                   	push   eax
c00244b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244b8:	e8 91 ea ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244bd:	83 c4 20             	add    esp,0x20
c00244c0:	0f b6 c3             	movzx  eax,bl
c00244c3:	0f b6 df             	movzx  ebx,bh
c00244c6:	50                   	push   eax
c00244c7:	6a 04                	push   0x4
c00244c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244d0:	50                   	push   eax
c00244d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244d7:	e8 72 ea ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244dc:	53                   	push   ebx
c00244dd:	6a 05                	push   0x5
c00244df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244e6:	50                   	push   eax
c00244e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244ed:	e8 5c ea ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244f2:	83 c4 20             	add    esp,0x20
c00244f5:	68 a0 00 00 00       	push   0xa0
c00244fa:	6a 07                	push   0x7
c00244fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024503:	50                   	push   eax
c0024504:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002450a:	e8 3f ea ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002450f:	83 c4 0c             	add    esp,0xc
c0024512:	6a 01                	push   0x1
c0024514:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002451b:	50                   	push   eax
c002451c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024522:	e8 c9 f4 ff ff       	call   c00239f0 <IDE::polling(unsigned char, unsigned int)>
c0024527:	83 c4 10             	add    esp,0x10
c002452a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024530:	84 c0                	test   al,al
c0024532:	74 23                	je     c0024557 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024534:	0f b6 d8             	movzx  ebx,al
c0024537:	0f b6 d2             	movzx  edx,dl
c002453a:	53                   	push   ebx
c002453b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024542:	50                   	push   eax
c0024543:	52                   	push   edx
c0024544:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002454a:	e8 f1 f3 ff ff       	call   c0023940 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002454f:	83 c4 10             	add    esp,0x10
c0024552:	e9 84 01 00 00       	jmp    c00246db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024557:	0f b6 d2             	movzx  edx,dl
c002455a:	53                   	push   ebx
c002455b:	53                   	push   ebx
c002455c:	52                   	push   edx
c002455d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024563:	e8 d4 e9 ff ff       	call   c0022f3c <IDE::getBase(unsigned char)>
c0024568:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002456c:	b9 06 00 00 00       	mov    ecx,0x6
c0024571:	89 c2                	mov    edx,eax
c0024573:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024576:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002457a:	83 c4 10             	add    esp,0x10
c002457d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024583:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002458a:	85 db                	test   ebx,ebx
c002458c:	0f 84 ec 00 00 00    	je     c002467e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024592:	51                   	push   ecx
c0024593:	51                   	push   ecx
c0024594:	52                   	push   edx
c0024595:	50                   	push   eax
c0024596:	e8 21 eb ff ff       	call   c00230bc <IDE::waitInterrupt(unsigned char)>
c002459b:	83 c4 10             	add    esp,0x10
c002459e:	84 c0                	test   al,al
c00245a0:	0f 84 d4 fe ff ff    	je     c002447a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00245a6:	56                   	push   esi
c00245a7:	56                   	push   esi
c00245a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245af:	50                   	push   eax
c00245b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245b6:	e8 6d e9 ff ff       	call   c0022f28 <IDE::prepareInterrupt(unsigned char)>
c00245bb:	83 c4 0c             	add    esp,0xc
c00245be:	6a 04                	push   0x4
c00245c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245c7:	50                   	push   eax
c00245c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245ce:	e8 3b ea ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c00245d3:	83 c4 0c             	add    esp,0xc
c00245d6:	89 c6                	mov    esi,eax
c00245d8:	6a 05                	push   0x5
c00245da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245e1:	50                   	push   eax
c00245e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245e8:	e8 21 ea ff ff       	call   c002300e <IDE::read(unsigned char, unsigned char)>
c00245ed:	89 f1                	mov    ecx,esi
c00245ef:	0f b6 c0             	movzx  eax,al
c00245f2:	0f b6 f1             	movzx  esi,cl
c00245f5:	c1 e0 08             	shl    eax,0x8
c00245f8:	09 c6                	or     esi,eax
c00245fa:	d1 fe                	sar    esi,1
c00245fc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024600:	83 c4 10             	add    esp,0x10
c0024603:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024608:	74 41                	je     c002464b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002460a:	31 c9                	xor    ecx,ecx
c002460c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024612:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024619:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002461d:	75 0a                	jne    c0024629 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002461f:	01 c9                	add    ecx,ecx
c0024621:	01 cd                	add    ebp,ecx
c0024623:	4b                   	dec    ebx
c0024624:	e9 54 ff ff ff       	jmp    c002457d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024629:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002462e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024632:	51                   	push   ecx
c0024633:	51                   	push   ecx
c0024634:	52                   	push   edx
c0024635:	50                   	push   eax
c0024636:	e8 01 e9 ff ff       	call   c0022f3c <IDE::getBase(unsigned char)>
c002463b:	89 c2                	mov    edx,eax
c002463d:	89 f0                	mov    eax,esi
c002463f:	66 ef                	out    dx,ax
c0024641:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024645:	83 c4 10             	add    esp,0x10
c0024648:	41                   	inc    ecx
c0024649:	eb c1                	jmp    c002460c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002464b:	31 f6                	xor    esi,esi
c002464d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024653:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002465a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002465e:	75 06                	jne    c0024666 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024660:	01 f6                	add    esi,esi
c0024662:	01 f5                	add    ebp,esi
c0024664:	eb bd                	jmp    c0024623 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024666:	51                   	push   ecx
c0024667:	51                   	push   ecx
c0024668:	52                   	push   edx
c0024669:	50                   	push   eax
c002466a:	e8 cd e8 ff ff       	call   c0022f3c <IDE::getBase(unsigned char)>
c002466f:	89 c2                	mov    edx,eax
c0024671:	66 ed                	in     ax,dx
c0024673:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024678:	83 c4 10             	add    esp,0x10
c002467b:	46                   	inc    esi
c002467c:	eb cf                	jmp    c002464d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002467e:	51                   	push   ecx
c002467f:	51                   	push   ecx
c0024680:	52                   	push   edx
c0024681:	50                   	push   eax
c0024682:	e8 35 ea ff ff       	call   c00230bc <IDE::waitInterrupt(unsigned char)>
c0024687:	83 c4 10             	add    esp,0x10
c002468a:	84 c0                	test   al,al
c002468c:	0f 84 e8 fd ff ff    	je     c002447a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024692:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024697:	52                   	push   edx
c0024698:	52                   	push   edx
c0024699:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a0:	50                   	push   eax
c00246a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246a7:	e8 7c e8 ff ff       	call   c0022f28 <IDE::prepareInterrupt(unsigned char)>
c00246ac:	83 c4 10             	add    esp,0x10
c00246af:	50                   	push   eax
c00246b0:	50                   	push   eax
c00246b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246b8:	50                   	push   eax
c00246b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246bf:	e8 78 e8 ff ff       	call   c0022f3c <IDE::getBase(unsigned char)>
c00246c4:	8d 50 07             	lea    edx,[eax+0x7]
c00246c7:	ec                   	in     al,dx
c00246c8:	83 c4 10             	add    esp,0x10
c00246cb:	a8 88                	test   al,0x88
c00246cd:	74 0a                	je     c00246d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00246cf:	4b                   	dec    ebx
c00246d0:	75 dd                	jne    c00246af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00246d2:	bb 02 00 00 00       	mov    ebx,0x2
c00246d7:	eb 02                	jmp    c00246db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246d9:	31 db                	xor    ebx,ebx
c00246db:	83 c4 1c             	add    esp,0x1c
c00246de:	89 d8                	mov    eax,ebx
c00246e0:	5b                   	pop    ebx
c00246e1:	5e                   	pop    esi
c00246e2:	5f                   	pop    edi
c00246e3:	5d                   	pop    ebp
c00246e4:	c3                   	ret    
c00246e5:	90                   	nop

c00246e6 <ATAPI::diskRemoved()>:
c00246e6:	83 ec 18             	sub    esp,0x18
c00246e9:	68 c5 c3 02 c0       	push   0xc002c3c5
c00246ee:	e8 02 e0 fe ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00246f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246f7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00246fe:	83 c4 1c             	add    esp,0x1c
c0024701:	c3                   	ret    

c0024702 <ATAPI::eject()>:
c0024702:	57                   	push   edi
c0024703:	b9 03 00 00 00       	mov    ecx,0x3
c0024708:	53                   	push   ebx
c0024709:	83 ec 14             	sub    esp,0x14
c002470c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024710:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024714:	fc                   	cld    
c0024715:	31 c0                	xor    eax,eax
c0024717:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024719:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002471e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024723:	50                   	push   eax
c0024724:	50                   	push   eax
c0024725:	6a 00                	push   0x0
c0024727:	6a 00                	push   0x0
c0024729:	6a 00                	push   0x0
c002472b:	6a 02                	push   0x2
c002472d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024731:	50                   	push   eax
c0024732:	53                   	push   ebx
c0024733:	e8 ee fc ff ff       	call   c0024426 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024738:	83 c4 14             	add    esp,0x14
c002473b:	53                   	push   ebx
c002473c:	e8 a5 ff ff ff       	call   c00246e6 <ATAPI::diskRemoved()>
c0024741:	83 c4 24             	add    esp,0x24
c0024744:	31 c0                	xor    eax,eax
c0024746:	5b                   	pop    ebx
c0024747:	5f                   	pop    edi
c0024748:	c3                   	ret    
c0024749:	90                   	nop

c002474a <ATAPI::diskInserted()>:
c002474a:	53                   	push   ebx
c002474b:	83 ec 14             	sub    esp,0x14
c002474e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024752:	68 dc c3 02 c0       	push   0xc002c3dc
c0024757:	e8 99 df fe ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c002475c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024763:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024766:	e8 61 f8 fe ff       	call   c0013fcc <PhysicalDisk::startCache()>
c002476b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002476f:	83 c4 18             	add    esp,0x18
c0024772:	5b                   	pop    ebx
c0024773:	e9 d6 1a ff ff       	jmp    c001624e <createPartitionsForDisk(PhysicalDisk*)>

c0024778 <ATAPI::detectMedia()>:
c0024778:	56                   	push   esi
c0024779:	53                   	push   ebx
c002477a:	83 ec 28             	sub    esp,0x28
c002477d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024781:	6a 0c                	push   0xc
c0024783:	6a 00                	push   0x0
c0024785:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024789:	56                   	push   esi
c002478a:	e8 c1 bf fd ff       	call   c0000750 <memset>
c002478f:	58                   	pop    eax
c0024790:	5a                   	pop    edx
c0024791:	6a 00                	push   0x0
c0024793:	6a 00                	push   0x0
c0024795:	6a 00                	push   0x0
c0024797:	6a 00                	push   0x0
c0024799:	56                   	push   esi
c002479a:	53                   	push   ebx
c002479b:	e8 86 fc ff ff       	call   c0024426 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247a0:	83 c4 1c             	add    esp,0x1c
c00247a3:	6a 0c                	push   0xc
c00247a5:	6a 00                	push   0x0
c00247a7:	56                   	push   esi
c00247a8:	e8 a3 bf fd ff       	call   c0000750 <memset>
c00247ad:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00247b2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00247b7:	59                   	pop    ecx
c00247b8:	58                   	pop    eax
c00247b9:	6a 01                	push   0x1
c00247bb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00247bf:	50                   	push   eax
c00247c0:	6a 00                	push   0x0
c00247c2:	6a 12                	push   0x12
c00247c4:	56                   	push   esi
c00247c5:	53                   	push   ebx
c00247c6:	e8 5b fc ff ff       	call   c0024426 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247cb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00247cf:	83 c4 20             	add    esp,0x20
c00247d2:	83 e0 7f             	and    eax,0x7f
c00247d5:	3c 70                	cmp    al,0x70
c00247d7:	74 15                	je     c00247ee <ATAPI::detectMedia()+0x76>
c00247d9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247e0:	75 0c                	jne    c00247ee <ATAPI::detectMedia()+0x76>
c00247e2:	83 ec 0c             	sub    esp,0xc
c00247e5:	53                   	push   ebx
c00247e6:	e8 5f ff ff ff       	call   c002474a <ATAPI::diskInserted()>
c00247eb:	83 c4 10             	add    esp,0x10
c00247ee:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00247f2:	83 e0 0f             	and    eax,0xf
c00247f5:	3c 02                	cmp    al,0x2
c00247f7:	75 1b                	jne    c0024814 <ATAPI::detectMedia()+0x9c>
c00247f9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00247fe:	75 2d                	jne    c002482d <ATAPI::detectMedia()+0xb5>
c0024800:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024807:	74 24                	je     c002482d <ATAPI::detectMedia()+0xb5>
c0024809:	83 ec 0c             	sub    esp,0xc
c002480c:	53                   	push   ebx
c002480d:	e8 d4 fe ff ff       	call   c00246e6 <ATAPI::diskRemoved()>
c0024812:	eb 16                	jmp    c002482a <ATAPI::detectMedia()+0xb2>
c0024814:	84 c0                	test   al,al
c0024816:	75 15                	jne    c002482d <ATAPI::detectMedia()+0xb5>
c0024818:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002481f:	75 0c                	jne    c002482d <ATAPI::detectMedia()+0xb5>
c0024821:	83 ec 0c             	sub    esp,0xc
c0024824:	53                   	push   ebx
c0024825:	e8 20 ff ff ff       	call   c002474a <ATAPI::diskInserted()>
c002482a:	83 c4 10             	add    esp,0x10
c002482d:	83 c4 24             	add    esp,0x24
c0024830:	5b                   	pop    ebx
c0024831:	5e                   	pop    esi
c0024832:	c3                   	ret    
c0024833:	90                   	nop

c0024834 <ATAPI::open(int, int, void*)>:
c0024834:	53                   	push   ebx
c0024835:	83 ec 08             	sub    esp,0x8
c0024838:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002483c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024844:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002484a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024850:	c1 e0 06             	shl    eax,0x6
c0024853:	01 d0                	add    eax,edx
c0024855:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002485c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024862:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024869:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024873:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024879:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024880:	6a 04                	push   0x4
c0024882:	6a 0c                	push   0xc
c0024884:	51                   	push   ecx
c0024885:	52                   	push   edx
c0024886:	e8 c3 e6 ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002488b:	90                   	nop
c002488c:	90                   	nop
c002488d:	6a 00                	push   0x0
c002488f:	6a 0c                	push   0xc
c0024891:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024898:	50                   	push   eax
c0024899:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002489f:	e8 aa e6 ff ff       	call   c0022f4e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248a4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00248ab:	83 c4 14             	add    esp,0x14
c00248ae:	53                   	push   ebx
c00248af:	e8 c4 fe ff ff       	call   c0024778 <ATAPI::detectMedia()>
c00248b4:	31 c0                	xor    eax,eax
c00248b6:	83 c4 18             	add    esp,0x18
c00248b9:	5b                   	pop    ebx
c00248ba:	c3                   	ret    
c00248bb:	90                   	nop

c00248bc <ATAPI::read(unsigned long long, int, void*)>:
c00248bc:	55                   	push   ebp
c00248bd:	57                   	push   edi
c00248be:	56                   	push   esi
c00248bf:	53                   	push   ebx
c00248c0:	83 ec 1c             	sub    esp,0x1c
c00248c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00248c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00248cb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00248cf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248d6:	74 41                	je     c0024919 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00248d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00248dc:	b9 03 00 00 00       	mov    ecx,0x3
c00248e1:	fc                   	cld    
c00248e2:	31 c0                	xor    eax,eax
c00248e4:	86 fb                	xchg   bl,bh
c00248e6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248e8:	c1 c3 10             	rol    ebx,0x10
c00248eb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00248f0:	89 e8                	mov    eax,ebp
c00248f2:	86 fb                	xchg   bl,bh
c00248f4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00248f8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00248fc:	50                   	push   eax
c00248fd:	50                   	push   eax
c00248fe:	55                   	push   ebp
c00248ff:	c1 e5 0b             	shl    ebp,0xb
c0024902:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024906:	6a 00                	push   0x0
c0024908:	55                   	push   ebp
c0024909:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002490d:	50                   	push   eax
c002490e:	56                   	push   esi
c002490f:	e8 12 fb ff ff       	call   c0024426 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024914:	83 c4 20             	add    esp,0x20
c0024917:	eb 1a                	jmp    c0024933 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024919:	83 ec 0c             	sub    esp,0xc
c002491c:	56                   	push   esi
c002491d:	e8 56 fe ff ff       	call   c0024778 <ATAPI::detectMedia()>
c0024922:	83 c4 10             	add    esp,0x10
c0024925:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002492c:	75 aa                	jne    c00248d8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002492e:	b8 02 00 00 00       	mov    eax,0x2
c0024933:	83 c4 1c             	add    esp,0x1c
c0024936:	5b                   	pop    ebx
c0024937:	5e                   	pop    esi
c0024938:	5f                   	pop    edi
c0024939:	5d                   	pop    ebp
c002493a:	c3                   	ret    
c002493b:	90                   	nop

c002493c <SATA::close(int, int, void*)>:
c002493c:	83 ec 0c             	sub    esp,0xc
c002493f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024943:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024949:	85 c0                	test   eax,eax
c002494b:	74 0c                	je     c0024959 <SATA::close(int, int, void*)+0x1d>
c002494d:	83 ec 0c             	sub    esp,0xc
c0024950:	8b 10                	mov    edx,DWORD PTR [eax]
c0024952:	50                   	push   eax
c0024953:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024956:	83 c4 10             	add    esp,0x10
c0024959:	31 c0                	xor    eax,eax
c002495b:	83 c4 0c             	add    esp,0xc
c002495e:	c3                   	ret    
c002495f:	90                   	nop

c0024960 <SATA::powerSaving(PowerSavingLevel)>:
c0024960:	c3                   	ret    
c0024961:	90                   	nop

c0024962 <SATA::open(int, int, void*)>:
c0024962:	56                   	push   esi
c0024963:	53                   	push   ebx
c0024964:	50                   	push   eax
c0024965:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024969:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002496d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024977:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002497d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024987:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002498b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024995:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002499b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00249a2:	e8 ee af fe ff       	call   c000f995 <Phys::allocatePage()>
c00249a7:	89 c6                	mov    esi,eax
c00249a9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00249af:	81 c6 00 10 00 00    	add    esi,0x1000
c00249b5:	e8 db af fe ff       	call   c000f995 <Phys::allocatePage()>
c00249ba:	39 c6                	cmp    esi,eax
c00249bc:	74 10                	je     c00249ce <SATA::open(int, int, void*)+0x6c>
c00249be:	83 ec 0c             	sub    esp,0xc
c00249c1:	68 04 c3 02 c0       	push   0xc002c304
c00249c6:	e8 96 54 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c00249cb:	83 c4 10             	add    esp,0x10
c00249ce:	83 ec 0c             	sub    esp,0xc
c00249d1:	6a 02                	push   0x2
c00249d3:	e8 45 c8 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c00249d8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00249de:	6a 03                	push   0x3
c00249e0:	50                   	push   eax
c00249e1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00249e7:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c00249ed:	e8 e8 cf fe ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c00249f2:	83 c4 14             	add    esp,0x14
c00249f5:	53                   	push   ebx
c00249f6:	e8 d1 f5 fe ff       	call   c0013fcc <PhysicalDisk::startCache()>
c00249fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249fe:	e8 4b 18 ff ff       	call   c001624e <createPartitionsForDisk(PhysicalDisk*)>
c0024a03:	83 c4 14             	add    esp,0x14
c0024a06:	31 c0                	xor    eax,eax
c0024a08:	5b                   	pop    ebx
c0024a09:	5e                   	pop    esi
c0024a0a:	c3                   	ret    
c0024a0b:	90                   	nop

c0024a0c <SATA::SATA()>:
c0024a0c:	83 ec 0c             	sub    esp,0xc
c0024a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a13:	83 ec 04             	sub    esp,0x4
c0024a16:	68 00 02 00 00       	push   0x200
c0024a1b:	68 18 c3 02 c0       	push   0xc002c318
c0024a20:	50                   	push   eax
c0024a21:	e8 3e f5 fe ff       	call   c0013f64 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a26:	83 c4 10             	add    esp,0x10
c0024a29:	ba 88 c3 02 c0       	mov    edx,0xc002c388
c0024a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a32:	89 10                	mov    DWORD PTR [eax],edx
c0024a34:	90                   	nop
c0024a35:	83 c4 0c             	add    esp,0xc
c0024a38:	c3                   	ret    
c0024a39:	90                   	nop

c0024a3a <SATA::access(unsigned long long, int, void*, bool)>:
c0024a3a:	55                   	push   ebp
c0024a3b:	57                   	push   edi
c0024a3c:	56                   	push   esi
c0024a3d:	53                   	push   ebx
c0024a3e:	83 ec 2c             	sub    esp,0x2c
c0024a41:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024a45:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024a4d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a51:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a55:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024a5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a5e:	7e 10                	jle    c0024a70 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024a60:	83 ec 0c             	sub    esp,0xc
c0024a63:	68 28 c3 02 c0       	push   0xc002c328
c0024a68:	e8 f4 53 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0024a6d:	83 c4 10             	add    esp,0x10
c0024a70:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a76:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024a7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024a82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a86:	89 d0                	mov    eax,edx
c0024a88:	c1 e0 07             	shl    eax,0x7
c0024a8b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a8f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024a99:	51                   	push   ecx
c0024a9a:	8d 42 02             	lea    eax,[edx+0x2]
c0024a9d:	51                   	push   ecx
c0024a9e:	c1 e0 07             	shl    eax,0x7
c0024aa1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024aa5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024aa9:	50                   	push   eax
c0024aaa:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024ab0:	e8 1b f0 ff ff       	call   c0023ad0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024ab9:	83 c4 10             	add    esp,0x10
c0024abc:	b8 01 00 00 00       	mov    eax,0x1
c0024ac1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024ac6:	0f 84 cb 01 00 00    	je     c0024c97 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024acc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ad0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ad4:	c1 e0 09             	shl    eax,0x9
c0024ad7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024adc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ae0:	74 0e                	je     c0024af0 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024ae2:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024ae8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024aec:	89 c1                	mov    ecx,eax
c0024aee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024af0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024af4:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024afa:	8d 42 02             	lea    eax,[edx+0x2]
c0024afd:	c1 e0 07             	shl    eax,0x7
c0024b00:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0024b06:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024b0c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024b12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024b16:	c1 e1 05             	shl    ecx,0x5
c0024b19:	01 c8                	add    eax,ecx
c0024b1b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024b1f:	83 e1 01             	and    ecx,0x1
c0024b22:	89 ce                	mov    esi,ecx
c0024b24:	8a 08                	mov    cl,BYTE PTR [eax]
c0024b26:	c1 e6 06             	shl    esi,0x6
c0024b29:	83 e1 bf             	and    ecx,0xffffffbf
c0024b2c:	09 f1                	or     ecx,esi
c0024b2e:	88 08                	mov    BYTE PTR [eax],cl
c0024b30:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024b32:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024b38:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024b3e:	89 08                	mov    DWORD PTR [eax],ecx
c0024b40:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b46:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024b4c:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024b52:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024b55:	50                   	push   eax
c0024b56:	68 90 00 00 00       	push   0x90
c0024b5b:	6a 00                	push   0x0
c0024b5d:	56                   	push   esi
c0024b5e:	e8 ed bb fd ff       	call   c0000750 <memset>
c0024b63:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b69:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024b6d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024b73:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024b77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024b7b:	83 c4 10             	add    esp,0x10
c0024b7e:	48                   	dec    eax
c0024b7f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024b84:	89 c1                	mov    ecx,eax
c0024b86:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024b8c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024b91:	09 c8                	or     eax,ecx
c0024b93:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024b99:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024b9c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024ba3:	66 25 00 7f          	and    ax,0x7f00
c0024ba7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024bab:	66 0d 27 80          	or     ax,0x8027
c0024baf:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024bb4:	66 89 06             	mov    WORD PTR [esi],ax
c0024bb7:	19 c0                	sbb    eax,eax
c0024bb9:	83 e0 f0             	and    eax,0xfffffff0
c0024bbc:	83 c0 35             	add    eax,0x35
c0024bbf:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024bc2:	89 e8                	mov    eax,ebp
c0024bc4:	c1 e8 10             	shr    eax,0x10
c0024bc7:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024bca:	89 e8                	mov    eax,ebp
c0024bcc:	c1 e8 18             	shr    eax,0x18
c0024bcf:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024bd2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024bd6:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024bd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024bdd:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024be0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024be4:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024be8:	89 d6                	mov    esi,edx
c0024bea:	31 c0                	xor    eax,eax
c0024bec:	c1 e6 07             	shl    esi,0x7
c0024bef:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024bf3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024bf9:	80 e1 88             	and    cl,0x88
c0024bfc:	74 0a                	je     c0024c08 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024bfe:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024c03:	74 0a                	je     c0024c0f <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024c05:	40                   	inc    eax
c0024c06:	eb eb                	jmp    c0024bf3 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024c08:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024c0d:	75 0a                	jne    c0024c19 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024c0f:	83 ec 0c             	sub    esp,0xc
c0024c12:	68 61 c3 02 c0       	push   0xc002c361
c0024c17:	eb 56                	jmp    c0024c6f <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024c19:	b8 01 00 00 00       	mov    eax,0x1
c0024c1e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024c22:	c1 e2 07             	shl    edx,0x7
c0024c25:	d3 e0                	shl    eax,cl
c0024c27:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024c2b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024c31:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024c37:	85 c8                	test   eax,ecx
c0024c39:	74 20                	je     c0024c5b <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024c3b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024c41:	0f ba e1 1e          	bt     ecx,0x1e
c0024c45:	73 ea                	jae    c0024c31 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024c47:	83 ec 0c             	sub    esp,0xc
c0024c4a:	68 6f c3 02 c0       	push   0xc002c36f
c0024c4f:	e8 0d 52 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0024c54:	83 c4 10             	add    esp,0x10
c0024c57:	31 c0                	xor    eax,eax
c0024c59:	eb 3c                	jmp    c0024c97 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c5b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024c61:	0f ba e0 1e          	bt     eax,0x1e
c0024c65:	73 17                	jae    c0024c7e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024c67:	83 ec 0c             	sub    esp,0xc
c0024c6a:	68 6f c3 02 c0       	push   0xc002c36f
c0024c6f:	e8 ed 51 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0024c74:	83 c4 10             	add    esp,0x10
c0024c77:	b8 01 00 00 00       	mov    eax,0x1
c0024c7c:	eb 19                	jmp    c0024c97 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c7e:	31 c0                	xor    eax,eax
c0024c80:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c85:	75 10                	jne    c0024c97 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c87:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024c8d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024c91:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c97:	83 c4 2c             	add    esp,0x2c
c0024c9a:	5b                   	pop    ebx
c0024c9b:	5e                   	pop    esi
c0024c9c:	5f                   	pop    edi
c0024c9d:	5d                   	pop    ebp
c0024c9e:	c3                   	ret    
c0024c9f:	90                   	nop

c0024ca0 <SATA::read(unsigned long long, int, void*)>:
c0024ca0:	57                   	push   edi
c0024ca1:	b8 04 00 00 00       	mov    eax,0x4
c0024ca6:	56                   	push   esi
c0024ca7:	53                   	push   ebx
c0024ca8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024cac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024cb0:	8d 7a ff             	lea    edi,[edx-0x1]
c0024cb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024cb7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024cbb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024cc1:	77 25                	ja     c0024ce8 <SATA::read(unsigned long long, int, void*)+0x48>
c0024cc3:	b8 06 00 00 00       	mov    eax,0x6
c0024cc8:	85 f6                	test   esi,esi
c0024cca:	74 1c                	je     c0024ce8 <SATA::read(unsigned long long, int, void*)+0x48>
c0024ccc:	50                   	push   eax
c0024ccd:	50                   	push   eax
c0024cce:	6a 00                	push   0x0
c0024cd0:	56                   	push   esi
c0024cd1:	52                   	push   edx
c0024cd2:	53                   	push   ebx
c0024cd3:	51                   	push   ecx
c0024cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cd8:	e8 5d fd ff ff       	call   c0024a3a <SATA::access(unsigned long long, int, void*, bool)>
c0024cdd:	83 c4 20             	add    esp,0x20
c0024ce0:	85 c0                	test   eax,eax
c0024ce2:	0f 95 c0             	setne  al
c0024ce5:	0f b6 c0             	movzx  eax,al
c0024ce8:	5b                   	pop    ebx
c0024ce9:	5e                   	pop    esi
c0024cea:	5f                   	pop    edi
c0024ceb:	c3                   	ret    

c0024cec <SATA::write(unsigned long long, int, void*)>:
c0024cec:	55                   	push   ebp
c0024ced:	b8 04 00 00 00       	mov    eax,0x4
c0024cf2:	57                   	push   edi
c0024cf3:	56                   	push   esi
c0024cf4:	53                   	push   ebx
c0024cf5:	83 ec 0c             	sub    esp,0xc
c0024cf8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024cfc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024d00:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024d03:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024d07:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024d0b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024d11:	77 3d                	ja     c0024d50 <SATA::write(unsigned long long, int, void*)+0x64>
c0024d13:	b8 06 00 00 00       	mov    eax,0x6
c0024d18:	85 ed                	test   ebp,ebp
c0024d1a:	74 34                	je     c0024d50 <SATA::write(unsigned long long, int, void*)+0x64>
c0024d1c:	c1 e3 09             	shl    ebx,0x9
c0024d1f:	01 eb                	add    ebx,ebp
c0024d21:	89 d6                	mov    esi,edx
c0024d23:	89 cf                	mov    edi,ecx
c0024d25:	83 c6 01             	add    esi,0x1
c0024d28:	83 d7 00             	adc    edi,0x0
c0024d2b:	50                   	push   eax
c0024d2c:	50                   	push   eax
c0024d2d:	6a 01                	push   0x1
c0024d2f:	55                   	push   ebp
c0024d30:	81 c5 00 02 00 00    	add    ebp,0x200
c0024d36:	6a 01                	push   0x1
c0024d38:	51                   	push   ecx
c0024d39:	52                   	push   edx
c0024d3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d3e:	e8 f7 fc ff ff       	call   c0024a3a <SATA::access(unsigned long long, int, void*, bool)>
c0024d43:	83 c4 20             	add    esp,0x20
c0024d46:	89 f2                	mov    edx,esi
c0024d48:	89 f9                	mov    ecx,edi
c0024d4a:	39 dd                	cmp    ebp,ebx
c0024d4c:	75 d3                	jne    c0024d21 <SATA::write(unsigned long long, int, void*)+0x35>
c0024d4e:	31 c0                	xor    eax,eax
c0024d50:	83 c4 0c             	add    esp,0xc
c0024d53:	5b                   	pop    ebx
c0024d54:	5e                   	pop    esi
c0024d55:	5f                   	pop    edi
c0024d56:	5d                   	pop    ebp
c0024d57:	c3                   	ret    

c0024d58 <SATAPI::write(unsigned long long, int, void*)>:
c0024d58:	b8 03 00 00 00       	mov    eax,0x3
c0024d5d:	c3                   	ret    

c0024d5e <SATAPI::close(int, int, void*)>:
c0024d5e:	83 ec 0c             	sub    esp,0xc
c0024d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d65:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d6b:	85 c0                	test   eax,eax
c0024d6d:	74 0c                	je     c0024d7b <SATAPI::close(int, int, void*)+0x1d>
c0024d6f:	83 ec 0c             	sub    esp,0xc
c0024d72:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d74:	50                   	push   eax
c0024d75:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d78:	83 c4 10             	add    esp,0x10
c0024d7b:	31 c0                	xor    eax,eax
c0024d7d:	83 c4 0c             	add    esp,0xc
c0024d80:	c3                   	ret    
c0024d81:	90                   	nop

c0024d82 <SATAPI::SATAPI()>:
c0024d82:	83 ec 0c             	sub    esp,0xc
c0024d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d89:	83 ec 04             	sub    esp,0x4
c0024d8c:	68 00 08 00 00       	push   0x800
c0024d91:	68 b8 c3 02 c0       	push   0xc002c3b8
c0024d96:	50                   	push   eax
c0024d97:	e8 c8 f1 fe ff       	call   c0013f64 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d9c:	83 c4 10             	add    esp,0x10
c0024d9f:	ba 64 c4 02 c0       	mov    edx,0xc002c464
c0024da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024da8:	89 10                	mov    DWORD PTR [eax],edx
c0024daa:	90                   	nop
c0024dab:	83 c4 0c             	add    esp,0xc
c0024dae:	c3                   	ret    
c0024daf:	90                   	nop

c0024db0 <SATAPI::diskRemoved()>:
c0024db0:	83 ec 18             	sub    esp,0x18
c0024db3:	68 c4 c3 02 c0       	push   0xc002c3c4
c0024db8:	e8 38 d9 fe ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0024dbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024dc1:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024dc8:	83 c4 1c             	add    esp,0x1c
c0024dcb:	c3                   	ret    

c0024dcc <SATAPI::diskInserted()>:
c0024dcc:	53                   	push   ebx
c0024dcd:	83 ec 14             	sub    esp,0x14
c0024dd0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024dd4:	68 db c3 02 c0       	push   0xc002c3db
c0024dd9:	e8 17 d9 fe ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0024dde:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024de5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024de8:	e8 df f1 fe ff       	call   c0013fcc <PhysicalDisk::startCache()>
c0024ded:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024df1:	83 c4 18             	add    esp,0x18
c0024df4:	5b                   	pop    ebx
c0024df5:	e9 54 14 ff ff       	jmp    c001624e <createPartitionsForDisk(PhysicalDisk*)>

c0024dfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024dfa:	55                   	push   ebp
c0024dfb:	57                   	push   edi
c0024dfc:	56                   	push   esi
c0024dfd:	53                   	push   ebx
c0024dfe:	83 ec 34             	sub    esp,0x34
c0024e01:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024e05:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024e09:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024e0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e11:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024e15:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024e1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024e21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024e25:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024e2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024e2f:	c1 e0 07             	shl    eax,0x7
c0024e32:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024e36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024e3a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024e44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e48:	8d 58 02             	lea    ebx,[eax+0x2]
c0024e4b:	c1 e3 07             	shl    ebx,0x7
c0024e4e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024e52:	53                   	push   ebx
c0024e53:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e59:	e8 72 ec ff ff       	call   c0023ad0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e62:	83 c4 10             	add    esp,0x10
c0024e65:	b8 01 00 00 00       	mov    eax,0x1
c0024e6a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e6f:	0f 84 85 01 00 00    	je     c0024ffa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e75:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024e7d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e83:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e8d:	c1 e1 05             	shl    ecx,0x5
c0024e90:	01 c8                	add    eax,ecx
c0024e92:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e94:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024e9a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024ea0:	89 08                	mov    DWORD PTR [eax],ecx
c0024ea2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024ea8:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024eae:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024eb4:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024eb7:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024eba:	50                   	push   eax
c0024ebb:	68 90 00 00 00       	push   0x90
c0024ec0:	6a 00                	push   0x0
c0024ec2:	53                   	push   ebx
c0024ec3:	e8 88 b8 fd ff       	call   c0000750 <memset>
c0024ec8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024ecc:	b9 0c 00 00 00       	mov    ecx,0xc
c0024ed1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ed3:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024ed9:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024edd:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024ee3:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024ee7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024eeb:	48                   	dec    eax
c0024eec:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024ef1:	89 c1                	mov    ecx,eax
c0024ef3:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024ef9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024efe:	09 c8                	or     eax,ecx
c0024f00:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024f06:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024f09:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024f10:	66 25 00 7f          	and    ax,0x7f00
c0024f14:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024f18:	66 0d 27 80          	or     ax,0x8027
c0024f1c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024f20:	66 89 03             	mov    WORD PTR [ebx],ax
c0024f23:	89 d0                	mov    eax,edx
c0024f25:	c1 ea 18             	shr    edx,0x18
c0024f28:	c1 e8 10             	shr    eax,0x10
c0024f2b:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024f2e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f31:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024f35:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024f3c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f3f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024f43:	83 c4 10             	add    esp,0x10
c0024f46:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f4a:	31 c0                	xor    eax,eax
c0024f4c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024f50:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024f56:	80 e2 88             	and    dl,0x88
c0024f59:	74 0a                	je     c0024f65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024f5b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f60:	74 0a                	je     c0024f6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024f62:	40                   	inc    eax
c0024f63:	eb eb                	jmp    c0024f50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024f65:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f6a:	75 0f                	jne    c0024f7b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024f6c:	83 ec 0c             	sub    esp,0xc
c0024f6f:	68 61 c3 02 c0       	push   0xc002c361
c0024f74:	e8 e8 4e ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0024f79:	eb 3f                	jmp    c0024fba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024f7b:	ba 01 00 00 00       	mov    edx,0x1
c0024f80:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f88:	d3 e2                	shl    edx,cl
c0024f8a:	c1 e0 07             	shl    eax,0x7
c0024f8d:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024f93:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f97:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024f9d:	85 ca                	test   edx,ecx
c0024f9f:	74 23                	je     c0024fc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024fa1:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024fa7:	0f ba e1 1e          	bt     ecx,0x1e
c0024fab:	73 ea                	jae    c0024f97 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024fad:	83 ec 0c             	sub    esp,0xc
c0024fb0:	68 f3 c3 02 c0       	push   0xc002c3f3
c0024fb5:	e8 3b d7 fe ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0024fba:	83 c4 10             	add    esp,0x10
c0024fbd:	b8 01 00 00 00       	mov    eax,0x1
c0024fc2:	eb 36                	jmp    c0024ffa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024fc4:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024fca:	0f ba e0 1e          	bt     eax,0x1e
c0024fce:	73 0a                	jae    c0024fda <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024fd0:	83 ec 0c             	sub    esp,0xc
c0024fd3:	68 06 c4 02 c0       	push   0xc002c406
c0024fd8:	eb db                	jmp    c0024fb5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024fda:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024fdf:	74 17                	je     c0024ff8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fe1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024fe6:	74 10                	je     c0024ff8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fe8:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024fee:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024ff2:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024ff6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ff8:	31 c0                	xor    eax,eax
c0024ffa:	83 c4 2c             	add    esp,0x2c
c0024ffd:	5b                   	pop    ebx
c0024ffe:	5e                   	pop    esi
c0024fff:	5f                   	pop    edi
c0025000:	5d                   	pop    ebp
c0025001:	c3                   	ret    

c0025002 <SATAPI::eject()>:
c0025002:	57                   	push   edi
c0025003:	b9 03 00 00 00       	mov    ecx,0x3
c0025008:	53                   	push   ebx
c0025009:	83 ec 14             	sub    esp,0x14
c002500c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025010:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025014:	fc                   	cld    
c0025015:	31 c0                	xor    eax,eax
c0025017:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025019:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002501e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025023:	50                   	push   eax
c0025024:	6a 00                	push   0x0
c0025026:	6a 00                	push   0x0
c0025028:	6a 00                	push   0x0
c002502a:	6a 00                	push   0x0
c002502c:	6a 02                	push   0x2
c002502e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025032:	50                   	push   eax
c0025033:	53                   	push   ebx
c0025034:	e8 c1 fd ff ff       	call   c0024dfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025039:	83 c4 14             	add    esp,0x14
c002503c:	53                   	push   ebx
c002503d:	e8 6e fd ff ff       	call   c0024db0 <SATAPI::diskRemoved()>
c0025042:	83 c4 24             	add    esp,0x24
c0025045:	31 c0                	xor    eax,eax
c0025047:	5b                   	pop    ebx
c0025048:	5f                   	pop    edi
c0025049:	c3                   	ret    

c002504a <SATAPI::detectMedia()>:
c002504a:	56                   	push   esi
c002504b:	53                   	push   ebx
c002504c:	83 ec 28             	sub    esp,0x28
c002504f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025053:	6a 0c                	push   0xc
c0025055:	6a 00                	push   0x0
c0025057:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002505b:	56                   	push   esi
c002505c:	e8 ef b6 fd ff       	call   c0000750 <memset>
c0025061:	83 c4 0c             	add    esp,0xc
c0025064:	6a 00                	push   0x0
c0025066:	6a 00                	push   0x0
c0025068:	6a 00                	push   0x0
c002506a:	6a 00                	push   0x0
c002506c:	6a 00                	push   0x0
c002506e:	56                   	push   esi
c002506f:	53                   	push   ebx
c0025070:	e8 85 fd ff ff       	call   c0024dfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025075:	83 c4 1c             	add    esp,0x1c
c0025078:	6a 0c                	push   0xc
c002507a:	6a 00                	push   0x0
c002507c:	56                   	push   esi
c002507d:	e8 ce b6 fd ff       	call   c0000750 <memset>
c0025082:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025087:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002508c:	83 c4 0c             	add    esp,0xc
c002508f:	6a 01                	push   0x1
c0025091:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025095:	50                   	push   eax
c0025096:	6a 00                	push   0x0
c0025098:	6a 00                	push   0x0
c002509a:	6a 12                	push   0x12
c002509c:	56                   	push   esi
c002509d:	53                   	push   ebx
c002509e:	e8 57 fd ff ff       	call   c0024dfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00250a3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00250a7:	83 c4 20             	add    esp,0x20
c00250aa:	83 e0 7f             	and    eax,0x7f
c00250ad:	3c 70                	cmp    al,0x70
c00250af:	74 15                	je     c00250c6 <SATAPI::detectMedia()+0x7c>
c00250b1:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250b8:	75 0c                	jne    c00250c6 <SATAPI::detectMedia()+0x7c>
c00250ba:	83 ec 0c             	sub    esp,0xc
c00250bd:	53                   	push   ebx
c00250be:	e8 09 fd ff ff       	call   c0024dcc <SATAPI::diskInserted()>
c00250c3:	83 c4 10             	add    esp,0x10
c00250c6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00250ca:	83 e0 0f             	and    eax,0xf
c00250cd:	3c 02                	cmp    al,0x2
c00250cf:	75 1b                	jne    c00250ec <SATAPI::detectMedia()+0xa2>
c00250d1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00250d6:	75 2d                	jne    c0025105 <SATAPI::detectMedia()+0xbb>
c00250d8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250df:	74 24                	je     c0025105 <SATAPI::detectMedia()+0xbb>
c00250e1:	83 ec 0c             	sub    esp,0xc
c00250e4:	53                   	push   ebx
c00250e5:	e8 c6 fc ff ff       	call   c0024db0 <SATAPI::diskRemoved()>
c00250ea:	eb 16                	jmp    c0025102 <SATAPI::detectMedia()+0xb8>
c00250ec:	84 c0                	test   al,al
c00250ee:	75 15                	jne    c0025105 <SATAPI::detectMedia()+0xbb>
c00250f0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250f7:	75 0c                	jne    c0025105 <SATAPI::detectMedia()+0xbb>
c00250f9:	83 ec 0c             	sub    esp,0xc
c00250fc:	53                   	push   ebx
c00250fd:	e8 ca fc ff ff       	call   c0024dcc <SATAPI::diskInserted()>
c0025102:	83 c4 10             	add    esp,0x10
c0025105:	83 c4 24             	add    esp,0x24
c0025108:	5b                   	pop    ebx
c0025109:	5e                   	pop    esi
c002510a:	c3                   	ret    
c002510b:	90                   	nop

c002510c <SATAPI::open(int, int, void*)>:
c002510c:	56                   	push   esi
c002510d:	53                   	push   ebx
c002510e:	50                   	push   eax
c002510f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025113:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025117:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025121:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025127:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025131:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025135:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002513f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025145:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002514c:	e8 44 a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025151:	89 c6                	mov    esi,eax
c0025153:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025159:	81 c6 00 10 00 00    	add    esi,0x1000
c002515f:	e8 31 a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025164:	39 c6                	cmp    esi,eax
c0025166:	74 10                	je     c0025178 <SATAPI::open(int, int, void*)+0x6c>
c0025168:	83 ec 0c             	sub    esp,0xc
c002516b:	68 1b c4 02 c0       	push   0xc002c41b
c0025170:	e8 ec 4c ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0025175:	83 c4 10             	add    esp,0x10
c0025178:	83 ec 0c             	sub    esp,0xc
c002517b:	6a 02                	push   0x2
c002517d:	e8 9b c0 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0025182:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025188:	6a 03                	push   0x3
c002518a:	50                   	push   eax
c002518b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025191:	ff 35 70 db 02 c0    	push   DWORD PTR ds:0xc002db70
c0025197:	e8 3e c8 fe ff       	call   c00119da <VAS::mapPage(unsigned long, unsigned long, int)>
c002519c:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00251a3:	83 c4 14             	add    esp,0x14
c00251a6:	53                   	push   ebx
c00251a7:	e8 9e fe ff ff       	call   c002504a <SATAPI::detectMedia()>
c00251ac:	83 c4 14             	add    esp,0x14
c00251af:	31 c0                	xor    eax,eax
c00251b1:	5b                   	pop    ebx
c00251b2:	5e                   	pop    esi
c00251b3:	c3                   	ret    

c00251b4 <SATAPI::read(unsigned long long, int, void*)>:
c00251b4:	55                   	push   ebp
c00251b5:	57                   	push   edi
c00251b6:	56                   	push   esi
c00251b7:	53                   	push   ebx
c00251b8:	83 ec 1c             	sub    esp,0x1c
c00251bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00251bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251c3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00251c7:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251ce:	74 19                	je     c00251e9 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00251d0:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00251d5:	7e 2e                	jle    c0025205 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251d7:	83 ec 0c             	sub    esp,0xc
c00251da:	68 31 c4 02 c0       	push   0xc002c431
c00251df:	e8 7d 4c ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c00251e4:	83 c4 10             	add    esp,0x10
c00251e7:	eb 1c                	jmp    c0025205 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251e9:	83 ec 0c             	sub    esp,0xc
c00251ec:	55                   	push   ebp
c00251ed:	e8 58 fe ff ff       	call   c002504a <SATAPI::detectMedia()>
c00251f2:	83 c4 10             	add    esp,0x10
c00251f5:	b8 02 00 00 00       	mov    eax,0x2
c00251fa:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025201:	75 cd                	jne    c00251d0 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025203:	eb 49                	jmp    c002524e <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025205:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025209:	b9 03 00 00 00       	mov    ecx,0x3
c002520e:	fc                   	cld    
c002520f:	31 c0                	xor    eax,eax
c0025211:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025213:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025218:	89 d8                	mov    eax,ebx
c002521a:	86 e0                	xchg   al,ah
c002521c:	c1 c0 10             	rol    eax,0x10
c002521f:	86 e0                	xchg   al,ah
c0025221:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025225:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025229:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002522d:	50                   	push   eax
c002522e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025232:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025236:	56                   	push   esi
c0025237:	53                   	push   ebx
c0025238:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002523c:	c1 e0 0b             	shl    eax,0xb
c002523f:	50                   	push   eax
c0025240:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025244:	50                   	push   eax
c0025245:	55                   	push   ebp
c0025246:	e8 af fb ff ff       	call   c0024dfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002524b:	83 c4 20             	add    esp,0x20
c002524e:	83 c4 1c             	add    esp,0x1c
c0025251:	5b                   	pop    ebx
c0025252:	5e                   	pop    esi
c0025253:	5f                   	pop    edi
c0025254:	5d                   	pop    ebp
c0025255:	c3                   	ret    

c0025256 <AVX::open(int, int, void*)>:
c0025256:	83 ec 0c             	sub    esp,0xc
c0025259:	e8 3a 11 00 00       	call   c0026398 <avxInit>
c002525e:	b8 00 00 00 00       	mov    eax,0x0
c0025263:	83 c4 0c             	add    esp,0xc
c0025266:	c3                   	ret    
c0025267:	90                   	nop

c0025268 <AVX::close(int, int, void*)>:
c0025268:	83 ec 0c             	sub    esp,0xc
c002526b:	e8 29 11 00 00       	call   c0026399 <avxClose>
c0025270:	b8 00 00 00 00       	mov    eax,0x0
c0025275:	83 c4 0c             	add    esp,0xc
c0025278:	c3                   	ret    
c0025279:	90                   	nop

c002527a <AVX::available()>:
c002527a:	83 ec 0c             	sub    esp,0xc
c002527d:	e8 0e 11 00 00       	call   c0026390 <avxDetect>
c0025282:	85 c0                	test   eax,eax
c0025284:	0f 95 c0             	setne  al
c0025287:	83 c4 0c             	add    esp,0xc
c002528a:	c3                   	ret    
c002528b:	90                   	nop

c002528c <AVX::save(void*)>:
c002528c:	83 ec 0c             	sub    esp,0xc
c002528f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025293:	83 ec 0c             	sub    esp,0xc
c0025296:	50                   	push   eax
c0025297:	e8 fa 10 00 00       	call   c0026396 <avxSave>
c002529c:	83 c4 10             	add    esp,0x10
c002529f:	90                   	nop
c00252a0:	83 c4 0c             	add    esp,0xc
c00252a3:	c3                   	ret    

c00252a4 <AVX::load(void*)>:
c00252a4:	83 ec 0c             	sub    esp,0xc
c00252a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252ab:	83 ec 0c             	sub    esp,0xc
c00252ae:	50                   	push   eax
c00252af:	e8 e3 10 00 00       	call   c0026397 <avxLoad>
c00252b4:	83 c4 10             	add    esp,0x10
c00252b7:	90                   	nop
c00252b8:	83 c4 0c             	add    esp,0xc
c00252bb:	c3                   	ret    

c00252bc <AVX::AVX()>:
c00252bc:	83 ec 0c             	sub    esp,0xc
c00252bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252c3:	83 ec 08             	sub    esp,0x8
c00252c6:	68 94 c4 02 c0       	push   0xc002c494
c00252cb:	50                   	push   eax
c00252cc:	e8 71 ed fe ff       	call   c0014042 <FPU::FPU(char const*)>
c00252d1:	83 c4 10             	add    esp,0x10
c00252d4:	ba a4 c4 02 c0       	mov    edx,0xc002c4a4
c00252d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252dd:	89 10                	mov    DWORD PTR [eax],edx
c00252df:	90                   	nop
c00252e0:	83 c4 0c             	add    esp,0xc
c00252e3:	c3                   	ret    

c00252e4 <MMX::available()>:
c00252e4:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00252e9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00252ef:	83 e0 20             	and    eax,0x20
c00252f2:	84 c0                	test   al,al
c00252f4:	0f 95 c0             	setne  al
c00252f7:	c3                   	ret    

c00252f8 <MMX::open(int, int, void*)>:
c00252f8:	83 ec 0c             	sub    esp,0xc
c00252fb:	e8 22 11 00 00       	call   c0026422 <x87Init>
c0025300:	b8 00 00 00 00       	mov    eax,0x0
c0025305:	83 c4 0c             	add    esp,0xc
c0025308:	c3                   	ret    
c0025309:	90                   	nop

c002530a <MMX::close(int, int, void*)>:
c002530a:	83 ec 0c             	sub    esp,0xc
c002530d:	e8 2a 11 00 00       	call   c002643c <x87Close>
c0025312:	b8 00 00 00 00       	mov    eax,0x0
c0025317:	83 c4 0c             	add    esp,0xc
c002531a:	c3                   	ret    
c002531b:	90                   	nop

c002531c <MMX::save(void*)>:
c002531c:	83 ec 0c             	sub    esp,0xc
c002531f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025323:	83 ec 0c             	sub    esp,0xc
c0025326:	50                   	push   eax
c0025327:	e8 e5 10 00 00       	call   c0026411 <x87Save>
c002532c:	83 c4 10             	add    esp,0x10
c002532f:	90                   	nop
c0025330:	83 c4 0c             	add    esp,0xc
c0025333:	c3                   	ret    

c0025334 <MMX::load(void*)>:
c0025334:	83 ec 0c             	sub    esp,0xc
c0025337:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002533b:	83 ec 0c             	sub    esp,0xc
c002533e:	50                   	push   eax
c002533f:	e8 d6 10 00 00       	call   c002641a <x87Load>
c0025344:	83 c4 10             	add    esp,0x10
c0025347:	90                   	nop
c0025348:	83 c4 0c             	add    esp,0xc
c002534b:	c3                   	ret    

c002534c <MMX::MMX()>:
c002534c:	83 ec 0c             	sub    esp,0xc
c002534f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025353:	83 ec 08             	sub    esp,0x8
c0025356:	68 d4 c4 02 c0       	push   0xc002c4d4
c002535b:	50                   	push   eax
c002535c:	e8 e1 ec fe ff       	call   c0014042 <FPU::FPU(char const*)>
c0025361:	83 c4 10             	add    esp,0x10
c0025364:	ba e4 c4 02 c0       	mov    edx,0xc002c4e4
c0025369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002536d:	89 10                	mov    DWORD PTR [eax],edx
c002536f:	90                   	nop
c0025370:	83 c4 0c             	add    esp,0xc
c0025373:	c3                   	ret    

c0025374 <SSE::open(int, int, void*)>:
c0025374:	83 ec 0c             	sub    esp,0xc
c0025377:	e8 58 10 00 00       	call   c00263d4 <sseInit>
c002537c:	b8 00 00 00 00       	mov    eax,0x0
c0025381:	83 c4 0c             	add    esp,0xc
c0025384:	c3                   	ret    
c0025385:	90                   	nop

c0025386 <SSE::close(int, int, void*)>:
c0025386:	83 ec 0c             	sub    esp,0xc
c0025389:	e8 56 10 00 00       	call   c00263e4 <sseClose>
c002538e:	b8 00 00 00 00       	mov    eax,0x0
c0025393:	83 c4 0c             	add    esp,0xc
c0025396:	c3                   	ret    
c0025397:	90                   	nop

c0025398 <SSE::available()>:
c0025398:	83 ec 1c             	sub    esp,0x1c
c002539b:	e8 10 10 00 00       	call   c00263b0 <absolutelyNoChanceInHell>
c00253a0:	85 c0                	test   eax,eax
c00253a2:	0f 95 c0             	setne  al
c00253a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00253a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00253ad:	83 c4 1c             	add    esp,0x1c
c00253b0:	c3                   	ret    
c00253b1:	90                   	nop

c00253b2 <SSE::save(void*)>:
c00253b2:	83 ec 0c             	sub    esp,0xc
c00253b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253b9:	83 ec 0c             	sub    esp,0xc
c00253bc:	50                   	push   eax
c00253bd:	e8 06 10 00 00       	call   c00263c8 <sseSave>
c00253c2:	83 c4 10             	add    esp,0x10
c00253c5:	90                   	nop
c00253c6:	83 c4 0c             	add    esp,0xc
c00253c9:	c3                   	ret    

c00253ca <SSE::load(void*)>:
c00253ca:	83 ec 0c             	sub    esp,0xc
c00253cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253d1:	83 ec 0c             	sub    esp,0xc
c00253d4:	50                   	push   eax
c00253d5:	e8 f4 0f 00 00       	call   c00263ce <sseLoad>
c00253da:	83 c4 10             	add    esp,0x10
c00253dd:	90                   	nop
c00253de:	83 c4 0c             	add    esp,0xc
c00253e1:	c3                   	ret    

c00253e2 <SSE::SSE()>:
c00253e2:	83 ec 0c             	sub    esp,0xc
c00253e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253e9:	83 ec 08             	sub    esp,0x8
c00253ec:	68 14 c5 02 c0       	push   0xc002c514
c00253f1:	50                   	push   eax
c00253f2:	e8 4b ec fe ff       	call   c0014042 <FPU::FPU(char const*)>
c00253f7:	83 c4 10             	add    esp,0x10
c00253fa:	ba 24 c5 02 c0       	mov    edx,0xc002c524
c00253ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025403:	89 10                	mov    DWORD PTR [eax],edx
c0025405:	90                   	nop
c0025406:	83 c4 0c             	add    esp,0xc
c0025409:	c3                   	ret    

c002540a <x87::open(int, int, void*)>:
c002540a:	83 ec 0c             	sub    esp,0xc
c002540d:	e8 10 10 00 00       	call   c0026422 <x87Init>
c0025412:	b8 00 00 00 00       	mov    eax,0x0
c0025417:	83 c4 0c             	add    esp,0xc
c002541a:	c3                   	ret    
c002541b:	90                   	nop

c002541c <x87::close(int, int, void*)>:
c002541c:	83 ec 0c             	sub    esp,0xc
c002541f:	e8 18 10 00 00       	call   c002643c <x87Close>
c0025424:	b8 00 00 00 00       	mov    eax,0x0
c0025429:	83 c4 0c             	add    esp,0xc
c002542c:	c3                   	ret    
c002542d:	90                   	nop

c002542e <x87::available()>:
c002542e:	83 ec 0c             	sub    esp,0xc
c0025431:	e8 c0 0f 00 00       	call   c00263f6 <x87Detect>
c0025436:	85 c0                	test   eax,eax
c0025438:	0f 95 c0             	setne  al
c002543b:	83 c4 0c             	add    esp,0xc
c002543e:	c3                   	ret    
c002543f:	90                   	nop

c0025440 <x87::save(void*)>:
c0025440:	83 ec 0c             	sub    esp,0xc
c0025443:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025447:	83 ec 0c             	sub    esp,0xc
c002544a:	50                   	push   eax
c002544b:	e8 c1 0f 00 00       	call   c0026411 <x87Save>
c0025450:	83 c4 10             	add    esp,0x10
c0025453:	90                   	nop
c0025454:	83 c4 0c             	add    esp,0xc
c0025457:	c3                   	ret    

c0025458 <x87::load(void*)>:
c0025458:	83 ec 0c             	sub    esp,0xc
c002545b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002545f:	83 ec 0c             	sub    esp,0xc
c0025462:	50                   	push   eax
c0025463:	e8 b2 0f 00 00       	call   c002641a <x87Load>
c0025468:	83 c4 10             	add    esp,0x10
c002546b:	90                   	nop
c002546c:	83 c4 0c             	add    esp,0xc
c002546f:	c3                   	ret    

c0025470 <x87::x87()>:
c0025470:	83 ec 0c             	sub    esp,0xc
c0025473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025477:	83 ec 08             	sub    esp,0x8
c002547a:	68 54 c5 02 c0       	push   0xc002c554
c002547f:	50                   	push   eax
c0025480:	e8 bd eb fe ff       	call   c0014042 <FPU::FPU(char const*)>
c0025485:	83 c4 10             	add    esp,0x10
c0025488:	ba 64 c5 02 c0       	mov    edx,0xc002c564
c002548d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025491:	89 10                	mov    DWORD PTR [eax],edx
c0025493:	90                   	nop
c0025494:	83 c4 0c             	add    esp,0xc
c0025497:	c3                   	ret    

c0025498 <APIC::disable()>:
c0025498:	90                   	nop
c0025499:	c3                   	ret    

c002549a <APIC::close(int, int, void*)>:
c002549a:	55                   	push   ebp
c002549b:	89 e5                	mov    ebp,esp
c002549d:	83 ec 08             	sub    esp,0x8
c00254a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00254a5:	83 c0 3c             	add    eax,0x3c
c00254a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00254aa:	83 ec 0c             	sub    esp,0xc
c00254ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254b0:	ff d0                	call   eax
c00254b2:	83 c4 10             	add    esp,0x10
c00254b5:	b8 00 00 00 00       	mov    eax,0x0
c00254ba:	c9                   	leave  
c00254bb:	c3                   	ret    

c00254bc <IOAPIC::close(int, int, void*)>:
c00254bc:	b8 00 00 00 00       	mov    eax,0x0
c00254c1:	c3                   	ret    

c00254c2 <APIC::io_wait()>:
c00254c2:	eb 00                	jmp    c00254c4 <APIC::io_wait()+0x2>
c00254c4:	eb 00                	jmp    c00254c6 <APIC::io_wait()+0x4>
c00254c6:	90                   	nop
c00254c7:	c3                   	ret    

c00254c8 <APIC::getBase()>:
c00254c8:	55                   	push   ebp
c00254c9:	89 e5                	mov    ebp,esp
c00254cb:	83 ec 18             	sub    esp,0x18
c00254ce:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00254d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00254d9:	83 e0 08             	and    eax,0x8
c00254dc:	84 c0                	test   al,al
c00254de:	75 07                	jne    c00254e7 <APIC::getBase()+0x1f>
c00254e0:	b8 00 00 00 00       	mov    eax,0x0
c00254e5:	eb 21                	jmp    c0025508 <APIC::getBase()+0x40>
c00254e7:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00254ec:	83 ec 08             	sub    esp,0x8
c00254ef:	6a 1b                	push   0x1b
c00254f1:	50                   	push   eax
c00254f2:	e8 49 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00254f7:	83 c4 10             	add    esp,0x10
c00254fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254fd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025500:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025503:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025508:	c9                   	leave  
c0025509:	c3                   	ret    

c002550a <APIC::eoi(unsigned char)>:
c002550a:	55                   	push   ebp
c002550b:	89 e5                	mov    ebp,esp
c002550d:	83 ec 28             	sub    esp,0x28
c0025510:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025513:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025516:	83 ec 0c             	sub    esp,0xc
c0025519:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002551c:	e8 a7 ff ff ff       	call   c00254c8 <APIC::getBase()>
c0025521:	83 c4 10             	add    esp,0x10
c0025524:	05 b0 00 00 00       	add    eax,0xb0
c0025529:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002552c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002552f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025535:	90                   	nop
c0025536:	c9                   	leave  
c0025537:	c3                   	ret    

c0025538 <APIC::open(int, int, void*)>:
c0025538:	55                   	push   ebp
c0025539:	89 e5                	mov    ebp,esp
c002553b:	57                   	push   edi
c002553c:	56                   	push   esi
c002553d:	53                   	push   ebx
c002553e:	83 ec 2c             	sub    esp,0x2c
c0025541:	83 ec 0c             	sub    esp,0xc
c0025544:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025547:	e8 7c ff ff ff       	call   c00254c8 <APIC::getBase()>
c002554c:	83 c4 10             	add    esp,0x10
c002554f:	89 c2                	mov    edx,eax
c0025551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025554:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002555a:	0f b6 f8             	movzx  edi,al
c002555d:	89 d0                	mov    eax,edx
c002555f:	ba 00 00 00 00       	mov    edx,0x0
c0025564:	89 c1                	mov    ecx,eax
c0025566:	80 e5 ff             	and    ch,0xff
c0025569:	89 cb                	mov    ebx,ecx
c002556b:	0f b6 f2             	movzx  esi,dl
c002556e:	89 d8                	mov    eax,ebx
c0025570:	89 f2                	mov    edx,esi
c0025572:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025575:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025578:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002557c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025580:	83 e0 00             	and    eax,0x0
c0025583:	09 d0                	or     eax,edx
c0025585:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002558c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025592:	8d 50 01             	lea    edx,[eax+0x1]
c0025595:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025598:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002559e:	0f b6 d0             	movzx  edx,al
c00255a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255a4:	83 c2 08             	add    edx,0x8
c00255a7:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00255ab:	0f b6 c9             	movzx  ecx,cl
c00255ae:	81 c9 00 00 01 00    	or     ecx,0x10000
c00255b4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255be:	e8 05 ff ff ff       	call   c00254c8 <APIC::getBase()>
c00255c3:	83 c4 10             	add    esp,0x10
c00255c6:	05 f0 00 00 00       	add    eax,0xf0
c00255cb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00255ce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00255d3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00255d6:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00255dd:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00255e4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255e7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00255ea:	89 10                	mov    DWORD PTR [eax],edx
c00255ec:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00255f3:	a1 d0 02 03 c0       	mov    eax,ds:0xc00302d0
c00255f8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00255fb:	7d 7c                	jge    c0025679 <APIC::open(int, int, void*)+0x141>
c00255fd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025600:	8b 04 85 e0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd20]
c0025607:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002560a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002560d:	8b 04 85 e0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd20]
c0025614:	c1 e8 08             	shr    eax,0x8
c0025617:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002561b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002561e:	8b 04 85 e0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd20]
c0025625:	c1 e8 18             	shr    eax,0x18
c0025628:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002562b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002562f:	75 40                	jne    c0025671 <APIC::open(int, int, void*)+0x139>
c0025631:	83 ec 0c             	sub    esp,0xc
c0025634:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025637:	e8 8c fe ff ff       	call   c00254c8 <APIC::getBase()>
c002563c:	83 c4 10             	add    esp,0x10
c002563f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025643:	75 07                	jne    c002564c <APIC::open(int, int, void*)+0x114>
c0025645:	ba 60 03 00 00       	mov    edx,0x360
c002564a:	eb 05                	jmp    c0025651 <APIC::open(int, int, void*)+0x119>
c002564c:	ba 50 03 00 00       	mov    edx,0x350
c0025651:	01 d0                	add    eax,edx
c0025653:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025656:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025659:	8b 00                	mov    eax,DWORD PTR [eax]
c002565b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002565e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025665:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025669:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002566c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002566f:	89 10                	mov    DWORD PTR [eax],edx
c0025671:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025674:	e9 7a ff ff ff       	jmp    c00255f3 <APIC::open(int, int, void*)+0xbb>
c0025679:	b8 00 00 00 00       	mov    eax,0x0
c002567e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025681:	5b                   	pop    ebx
c0025682:	5e                   	pop    esi
c0025683:	5f                   	pop    edi
c0025684:	5d                   	pop    ebp
c0025685:	c3                   	ret    

c0025686 <IOAPIC::IOAPIC()>:
c0025686:	83 ec 0c             	sub    esp,0xc
c0025689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002568d:	83 ec 08             	sub    esp,0x8
c0025690:	68 94 c5 02 c0       	push   0xc002c594
c0025695:	50                   	push   eax
c0025696:	e8 97 e6 fe ff       	call   c0013d32 <Device::Device(char const*)>
c002569b:	83 c4 10             	add    esp,0x10
c002569e:	ba bc c6 02 c0       	mov    edx,0xc002c6bc
c00256a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a7:	89 10                	mov    DWORD PTR [eax],edx
c00256a9:	90                   	nop
c00256aa:	83 c4 0c             	add    esp,0xc
c00256ad:	c3                   	ret    

c00256ae <APIC::APIC()>:
c00256ae:	53                   	push   ebx
c00256af:	83 ec 18             	sub    esp,0x18
c00256b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00256b6:	83 ec 08             	sub    esp,0x8
c00256b9:	68 9c c5 02 c0       	push   0xc002c59c
c00256be:	50                   	push   eax
c00256bf:	e8 d8 ed fe ff       	call   c001449c <InterruptController::InterruptController(char const*)>
c00256c4:	83 c4 10             	add    esp,0x10
c00256c7:	ba 74 c6 02 c0       	mov    edx,0xc002c674
c00256cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00256d0:	89 10                	mov    DWORD PTR [eax],edx
c00256d2:	a0 a0 1d 03 c0       	mov    al,ds:0xc0031da0
c00256d7:	83 f0 01             	xor    eax,0x1
c00256da:	84 c0                	test   al,al
c00256dc:	0f 84 a1 00 00 00    	je     c0025783 <APIC::APIC()+0xd5>
c00256e2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00256e7:	a0 80 03 03 c0       	mov    al,ds:0xc0030380
c00256ec:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00256f0:	0f 83 86 00 00 00    	jae    c002577c <APIC::APIC()+0xce>
c00256f6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00256fe:	83 ec 0c             	sub    esp,0xc
c0025701:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025705:	e8 8f 9e fe ff       	call   c000f599 <malloc>
c002570a:	83 c4 10             	add    esp,0x10
c002570d:	89 c3                	mov    ebx,eax
c002570f:	83 ec 0c             	sub    esp,0xc
c0025712:	53                   	push   ebx
c0025713:	e8 6e ff ff ff       	call   c0025686 <IOAPIC::IOAPIC()>
c0025718:	83 c4 10             	add    esp,0x10
c002571b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002571f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025724:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025728:	89 14 85 80 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce280],edx
c002572f:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0025734:	40                   	inc    eax
c0025735:	a3 60 1d 03 c0       	mov    ds:0xc0031d60,eax
c002573a:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c002573f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025745:	83 ec 08             	sub    esp,0x8
c0025748:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002574c:	50                   	push   eax
c002574d:	e8 dc e3 fe ff       	call   c0013b2e <Device::addChild(Device*)>
c0025752:	83 c4 10             	add    esp,0x10
c0025755:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025759:	8b 00                	mov    eax,DWORD PTR [eax]
c002575b:	83 c0 08             	add    eax,0x8
c002575e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025760:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025765:	6a 00                	push   0x0
c0025767:	6a 00                	push   0x0
c0025769:	52                   	push   edx
c002576a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002576e:	ff d0                	call   eax
c0025770:	83 c4 10             	add    esp,0x10
c0025773:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025777:	e9 6b ff ff ff       	jmp    c00256e7 <APIC::APIC()+0x39>
c002577c:	c6 05 a0 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031da0,0x1
c0025783:	90                   	nop
c0025784:	83 c4 18             	add    esp,0x18
c0025787:	5b                   	pop    ebx
c0025788:	c3                   	ret    
c0025789:	90                   	nop

c002578a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002578a:	55                   	push   ebp
c002578b:	89 e5                	mov    ebp,esp
c002578d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025790:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025796:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025799:	72 1d                	jb     c00257b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002579b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002579e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00257a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257a7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00257ad:	01 d0                	add    eax,edx
c00257af:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00257b2:	73 04                	jae    c00257b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00257b4:	b0 01                	mov    al,0x1
c00257b6:	eb 02                	jmp    c00257ba <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00257b8:	b0 00                	mov    al,0x0
c00257ba:	5d                   	pop    ebp
c00257bb:	c3                   	ret    

c00257bc <IOAPIC::read(int)>:
c00257bc:	55                   	push   ebp
c00257bd:	89 e5                	mov    ebp,esp
c00257bf:	83 ec 10             	sub    esp,0x10
c00257c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257d1:	0f b6 d0             	movzx  edx,al
c00257d4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257d7:	89 10                	mov    DWORD PTR [eax],edx
c00257d9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257dc:	83 c0 10             	add    eax,0x10
c00257df:	8b 00                	mov    eax,DWORD PTR [eax]
c00257e1:	c9                   	leave  
c00257e2:	c3                   	ret    
c00257e3:	90                   	nop

c00257e4 <IOAPIC::open(int, int, void*)>:
c00257e4:	55                   	push   ebp
c00257e5:	89 e5                	mov    ebp,esp
c00257e7:	57                   	push   edi
c00257e8:	56                   	push   esi
c00257e9:	53                   	push   ebx
c00257ea:	83 ec 0c             	sub    esp,0xc
c00257ed:	83 ec 0c             	sub    esp,0xc
c00257f0:	68 c7 c5 02 c0       	push   0xc002c5c7
c00257f5:	e8 fb ce fe ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c00257fa:	83 c4 10             	add    esp,0x10
c00257fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025800:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025803:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002580c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025812:	8b 14 85 c0 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfc40]
c0025819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002581c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025825:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002582b:	8b 14 85 40 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfbc0]
c0025832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025835:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002583b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002583e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025847:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002584d:	0f b6 f8             	movzx  edi,al
c0025850:	89 d0                	mov    eax,edx
c0025852:	ba 00 00 00 00       	mov    edx,0x0
c0025857:	89 c1                	mov    ecx,eax
c0025859:	80 e5 ff             	and    ch,0xff
c002585c:	89 cb                	mov    ebx,ecx
c002585e:	0f b6 f2             	movzx  esi,dl
c0025861:	89 d8                	mov    eax,ebx
c0025863:	89 f2                	mov    edx,esi
c0025865:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025868:	8d 5f 08             	lea    ebx,[edi+0x8]
c002586b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002586f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025873:	83 e0 00             	and    eax,0x0
c0025876:	09 d0                	or     eax,edx
c0025878:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002587c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002587f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025885:	8d 50 01             	lea    edx,[eax+0x1]
c0025888:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002588b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025891:	0f b6 d0             	movzx  edx,al
c0025894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025897:	83 c2 08             	add    edx,0x8
c002589a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002589e:	0f b6 c9             	movzx  ecx,cl
c00258a1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00258a7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258ab:	83 ec 08             	sub    esp,0x8
c00258ae:	6a 01                	push   0x1
c00258b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258b3:	e8 04 ff ff ff       	call   c00257bc <IOAPIC::read(int)>
c00258b8:	83 c4 10             	add    esp,0x10
c00258bb:	c1 f8 10             	sar    eax,0x10
c00258be:	0f b6 c0             	movzx  eax,al
c00258c1:	8d 50 01             	lea    edx,[eax+0x1]
c00258c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258c7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00258cd:	b8 00 00 00 00       	mov    eax,0x0
c00258d2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258d5:	5b                   	pop    ebx
c00258d6:	5e                   	pop    esi
c00258d7:	5f                   	pop    edi
c00258d8:	5d                   	pop    ebp
c00258d9:	c3                   	ret    

c00258da <IOAPIC::write(int, int)>:
c00258da:	55                   	push   ebp
c00258db:	89 e5                	mov    ebp,esp
c00258dd:	83 ec 10             	sub    esp,0x10
c00258e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00258e9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00258ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258ef:	0f b6 d0             	movzx  edx,al
c00258f2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258f5:	89 10                	mov    DWORD PTR [eax],edx
c00258f7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258fa:	8d 50 10             	lea    edx,[eax+0x10]
c00258fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025900:	89 02                	mov    DWORD PTR [edx],eax
c0025902:	90                   	nop
c0025903:	c9                   	leave  
c0025904:	c3                   	ret    
c0025905:	90                   	nop

c0025906 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025906:	55                   	push   ebp
c0025907:	89 e5                	mov    ebp,esp
c0025909:	53                   	push   ebx
c002590a:	83 ec 2c             	sub    esp,0x2c
c002590d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025910:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025913:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025916:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025919:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002591c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002591f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025922:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025925:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025928:	88 d8                	mov    al,bl
c002592a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002592d:	88 c8                	mov    al,cl
c002592f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025932:	88 d0                	mov    al,dl
c0025934:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025937:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002593b:	83 c0 08             	add    eax,0x8
c002593e:	01 c0                	add    eax,eax
c0025940:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025943:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025947:	83 c0 08             	add    eax,0x8
c002594a:	01 c0                	add    eax,eax
c002594c:	40                   	inc    eax
c002594d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025950:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025953:	50                   	push   eax
c0025954:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025957:	e8 60 fe ff ff       	call   c00257bc <IOAPIC::read(int)>
c002595c:	83 c4 08             	add    esp,0x8
c002595f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025962:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025969:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002596c:	c1 e0 18             	shl    eax,0x18
c002596f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025972:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025975:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025978:	52                   	push   edx
c0025979:	50                   	push   eax
c002597a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002597d:	e8 58 ff ff ff       	call   c00258da <IOAPIC::write(int, int)>
c0025982:	83 c4 0c             	add    esp,0xc
c0025985:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025988:	50                   	push   eax
c0025989:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002598c:	e8 2b fe ff ff       	call   c00257bc <IOAPIC::read(int)>
c0025991:	83 c4 08             	add    esp,0x8
c0025994:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025997:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002599e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00259a5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00259ac:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00259b0:	74 09                	je     c00259bb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00259b2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00259b9:	eb 07                	jmp    c00259c2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00259bb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00259c2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00259c6:	74 09                	je     c00259d1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00259c8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00259cf:	eb 07                	jmp    c00259d8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00259d1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00259d8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00259df:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00259e3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00259e6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00259e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259ec:	52                   	push   edx
c00259ed:	50                   	push   eax
c00259ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259f1:	e8 e4 fe ff ff       	call   c00258da <IOAPIC::write(int, int)>
c00259f6:	83 c4 0c             	add    esp,0xc
c00259f9:	90                   	nop
c00259fa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00259fd:	c9                   	leave  
c00259fe:	c3                   	ret    
c00259ff:	90                   	nop

c0025a00 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025a00:	55                   	push   ebp
c0025a01:	89 e5                	mov    ebp,esp
c0025a03:	57                   	push   edi
c0025a04:	56                   	push   esi
c0025a05:	53                   	push   ebx
c0025a06:	83 ec 2c             	sub    esp,0x2c
c0025a09:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025a0c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025a0f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a13:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025a17:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025a1b:	74 5a                	je     c0025a77 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a1d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025a21:	7f 44                	jg     c0025a67 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025a23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a26:	05 60 cc 02 c0       	add    eax,0xc002cc60
c0025a2b:	8a 00                	mov    al,BYTE PTR [eax]
c0025a2d:	0f b6 c0             	movzx  eax,al
c0025a30:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025a33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a36:	66 8b 84 00 60 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfca0]
c0025a3e:	0f b7 c0             	movzx  eax,ax
c0025a41:	83 e0 02             	and    eax,0x2
c0025a44:	85 c0                	test   eax,eax
c0025a46:	74 04                	je     c0025a4c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025a48:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025a4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a4f:	66 8b 84 00 60 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfca0]
c0025a57:	0f b7 c0             	movzx  eax,ax
c0025a5a:	83 e0 08             	and    eax,0x8
c0025a5d:	85 c0                	test   eax,eax
c0025a5f:	74 16                	je     c0025a77 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a61:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a65:	eb 10                	jmp    c0025a77 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a67:	83 ec 0c             	sub    esp,0xc
c0025a6a:	68 d8 c5 02 c0       	push   0xc002c5d8
c0025a6f:	e8 ed 43 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0025a74:	83 c4 10             	add    esp,0x10
c0025a77:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025a7b:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0025a80:	83 ec 08             	sub    esp,0x8
c0025a83:	50                   	push   eax
c0025a84:	68 10 c6 02 c0       	push   0xc002c610
c0025a89:	e8 67 cc fe ff       	call   c00126f5 <Dbg::kprintf(char const*, ...)>
c0025a8e:	83 c4 10             	add    esp,0x10
c0025a91:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025a98:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0025a9d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025aa0:	7d 67                	jge    c0025b09 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025aa2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025aa5:	8b 04 85 80 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce280]
c0025aac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025aaf:	83 ec 08             	sub    esp,0x8
c0025ab2:	52                   	push   edx
c0025ab3:	50                   	push   eax
c0025ab4:	e8 d1 fc ff ff       	call   c002578a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025ab9:	83 c4 10             	add    esp,0x10
c0025abc:	84 c0                	test   al,al
c0025abe:	74 44                	je     c0025b04 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025ac0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025ac3:	8b 1c 85 80 1d 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce280]
c0025aca:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025ace:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025ad1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025ad5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ad8:	83 c0 20             	add    eax,0x20
c0025adb:	0f b6 f0             	movzx  esi,al
c0025ade:	b8 00 00 00 00       	mov    eax,0x0
c0025ae3:	99                   	cdq    
c0025ae4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025ae7:	0f b6 c9             	movzx  ecx,cl
c0025aea:	83 ec 04             	sub    esp,0x4
c0025aed:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025af0:	57                   	push   edi
c0025af1:	56                   	push   esi
c0025af2:	52                   	push   edx
c0025af3:	50                   	push   eax
c0025af4:	51                   	push   ecx
c0025af5:	53                   	push   ebx
c0025af6:	e8 0b fe ff ff       	call   c0025906 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025afb:	83 c4 20             	add    esp,0x20
c0025afe:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025b02:	eb 05                	jmp    c0025b09 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025b04:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025b07:	eb 8f                	jmp    c0025a98 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025b09:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025b0c:	83 f0 01             	xor    eax,0x1
c0025b0f:	84 c0                	test   al,al
c0025b11:	74 10                	je     c0025b23 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025b13:	83 ec 0c             	sub    esp,0xc
c0025b16:	68 27 c6 02 c0       	push   0xc002c627
c0025b1b:	e8 41 43 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0025b20:	83 c4 10             	add    esp,0x10
c0025b23:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025b27:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025b2e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025b32:	7f 65                	jg     c0025b99 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b3a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b41:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b44:	01 ca                	add    edx,ecx
c0025b46:	83 c2 54             	add    edx,0x54
c0025b49:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025b4d:	85 c0                	test   eax,eax
c0025b4f:	75 43                	jne    c0025b94 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b54:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b57:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b5e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b61:	01 ca                	add    edx,ecx
c0025b63:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025b66:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025b69:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b70:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b73:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b7a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b7d:	01 ca                	add    edx,ecx
c0025b7f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025b85:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025b88:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b8f:	83 e8 20             	sub    eax,0x20
c0025b92:	eb 1a                	jmp    c0025bae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025b94:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025b97:	eb 95                	jmp    c0025b2e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025b99:	83 ec 0c             	sub    esp,0xc
c0025b9c:	68 34 c6 02 c0       	push   0xc002c634
c0025ba1:	e8 bb 42 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0025ba6:	83 c4 10             	add    esp,0x10
c0025ba9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025bae:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025bb1:	5b                   	pop    ebx
c0025bb2:	5e                   	pop    esi
c0025bb3:	5f                   	pop    edi
c0025bb4:	5d                   	pop    ebp
c0025bb5:	c3                   	ret    

c0025bb6 <PIC::disable()>:
c0025bb6:	55                   	push   ebp
c0025bb7:	89 e5                	mov    ebp,esp
c0025bb9:	83 ec 10             	sub    esp,0x10
c0025bbc:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025bc2:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025bc6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025bc9:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025bcd:	ee                   	out    dx,al
c0025bce:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025bd4:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025bd8:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025bdb:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025bdf:	ee                   	out    dx,al
c0025be0:	90                   	nop
c0025be1:	c9                   	leave  
c0025be2:	c3                   	ret    
c0025be3:	90                   	nop

c0025be4 <PIC::close(int, int, void*)>:
c0025be4:	55                   	push   ebp
c0025be5:	89 e5                	mov    ebp,esp
c0025be7:	83 ec 08             	sub    esp,0x8
c0025bea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bed:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bef:	83 c0 3c             	add    eax,0x3c
c0025bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bf4:	83 ec 0c             	sub    esp,0xc
c0025bf7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bfa:	ff d0                	call   eax
c0025bfc:	83 c4 10             	add    esp,0x10
c0025bff:	b8 00 00 00 00       	mov    eax,0x0
c0025c04:	c9                   	leave  
c0025c05:	c3                   	ret    

c0025c06 <PIC::PIC()>:
c0025c06:	83 ec 0c             	sub    esp,0xc
c0025c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c0d:	83 ec 08             	sub    esp,0x8
c0025c10:	68 e0 c6 02 c0       	push   0xc002c6e0
c0025c15:	50                   	push   eax
c0025c16:	e8 81 e8 fe ff       	call   c001449c <InterruptController::InterruptController(char const*)>
c0025c1b:	83 c4 10             	add    esp,0x10
c0025c1e:	ba 0c c7 02 c0       	mov    edx,0xc002c70c
c0025c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c27:	89 10                	mov    DWORD PTR [eax],edx
c0025c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c2d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c33:	0f b6 d0             	movzx  edx,al
c0025c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c3a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c45:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c4b:	0f b6 d0             	movzx  edx,al
c0025c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c52:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c61:	8d 50 01             	lea    edx,[eax+0x1]
c0025c64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c68:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c6e:	0f b6 d0             	movzx  edx,al
c0025c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c75:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c79:	83 e1 3f             	and    ecx,0x3f
c0025c7c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c8a:	0f b6 d0             	movzx  edx,al
c0025c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c91:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ca2:	0f b6 d0             	movzx  edx,al
c0025ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cb2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025cb8:	8d 50 01             	lea    edx,[eax+0x1]
c0025cbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025cbf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025cc5:	0f b6 d0             	movzx  edx,al
c0025cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ccc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025cd0:	83 e1 3f             	and    ecx,0x3f
c0025cd3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025cd7:	90                   	nop
c0025cd8:	83 c4 0c             	add    esp,0xc
c0025cdb:	c3                   	ret    

c0025cdc <PIC::ioWait()>:
c0025cdc:	eb 00                	jmp    c0025cde <PIC::ioWait()+0x2>
c0025cde:	eb 00                	jmp    c0025ce0 <PIC::ioWait()+0x4>
c0025ce0:	90                   	nop
c0025ce1:	c3                   	ret    

c0025ce2 <PIC::getIRQReg(int)>:
c0025ce2:	55                   	push   ebp
c0025ce3:	89 e5                	mov    ebp,esp
c0025ce5:	83 ec 10             	sub    esp,0x10
c0025ce8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ceb:	0f b6 c0             	movzx  eax,al
c0025cee:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025cf4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025cf7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025cfa:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cfe:	ee                   	out    dx,al
c0025cff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d02:	0f b6 c0             	movzx  eax,al
c0025d05:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d0b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025d0e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d11:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d15:	ee                   	out    dx,al
c0025d16:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025d1c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025d20:	89 c2                	mov    edx,eax
c0025d22:	ec                   	in     al,dx
c0025d23:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025d26:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d29:	0f b6 c0             	movzx  eax,al
c0025d2c:	c1 e0 08             	shl    eax,0x8
c0025d2f:	89 c1                	mov    ecx,eax
c0025d31:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025d37:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025d3b:	89 c2                	mov    edx,eax
c0025d3d:	ec                   	in     al,dx
c0025d3e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025d41:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d44:	0f b6 c0             	movzx  eax,al
c0025d47:	09 c8                	or     eax,ecx
c0025d49:	c9                   	leave  
c0025d4a:	c3                   	ret    
c0025d4b:	90                   	nop

c0025d4c <PIC::eoi(unsigned char)>:
c0025d4c:	55                   	push   ebp
c0025d4d:	89 e5                	mov    ebp,esp
c0025d4f:	83 ec 14             	sub    esp,0x14
c0025d52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d55:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025d58:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d5c:	75 1e                	jne    c0025d7c <PIC::eoi(unsigned char)+0x30>
c0025d5e:	6a 0b                	push   0xb
c0025d60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d63:	e8 7a ff ff ff       	call   c0025ce2 <PIC::getIRQReg(int)>
c0025d68:	83 c4 08             	add    esp,0x8
c0025d6b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025d6f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025d73:	25 80 00 00 00       	and    eax,0x80
c0025d78:	85 c0                	test   eax,eax
c0025d7a:	74 5f                	je     c0025ddb <PIC::eoi(unsigned char)+0x8f>
c0025d7c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025d80:	75 2d                	jne    c0025daf <PIC::eoi(unsigned char)+0x63>
c0025d82:	6a 0b                	push   0xb
c0025d84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d87:	e8 56 ff ff ff       	call   c0025ce2 <PIC::getIRQReg(int)>
c0025d8c:	83 c4 08             	add    esp,0x8
c0025d8f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025d93:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d96:	66 85 c0             	test   ax,ax
c0025d99:	78 14                	js     c0025daf <PIC::eoi(unsigned char)+0x63>
c0025d9b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025da1:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025da5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025da8:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025dac:	ee                   	out    dx,al
c0025dad:	eb 2d                	jmp    c0025ddc <PIC::eoi(unsigned char)+0x90>
c0025daf:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025db3:	76 12                	jbe    c0025dc7 <PIC::eoi(unsigned char)+0x7b>
c0025db5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025dbb:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025dbf:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025dc2:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025dc6:	ee                   	out    dx,al
c0025dc7:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025dcd:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025dd1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025dd4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025dd8:	ee                   	out    dx,al
c0025dd9:	eb 01                	jmp    c0025ddc <PIC::eoi(unsigned char)+0x90>
c0025ddb:	90                   	nop
c0025ddc:	c9                   	leave  
c0025ddd:	c3                   	ret    

c0025dde <PIC::remap()>:
c0025dde:	55                   	push   ebp
c0025ddf:	89 e5                	mov    ebp,esp
c0025de1:	83 ec 48             	sub    esp,0x48
c0025de4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025deb:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025df2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025df8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025dfb:	89 c2                	mov    edx,eax
c0025dfd:	ec                   	in     al,dx
c0025dfe:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025e01:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025e04:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025e07:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025e0d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025e10:	89 c2                	mov    edx,eax
c0025e12:	ec                   	in     al,dx
c0025e13:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025e16:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025e19:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025e1c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025e22:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025e26:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025e29:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025e2c:	ee                   	out    dx,al
c0025e2d:	83 ec 0c             	sub    esp,0xc
c0025e30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e33:	e8 a4 fe ff ff       	call   c0025cdc <PIC::ioWait()>
c0025e38:	83 c4 10             	add    esp,0x10
c0025e3b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025e41:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025e45:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025e48:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025e4b:	ee                   	out    dx,al
c0025e4c:	83 ec 0c             	sub    esp,0xc
c0025e4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e52:	e8 85 fe ff ff       	call   c0025cdc <PIC::ioWait()>
c0025e57:	83 c4 10             	add    esp,0x10
c0025e5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025e5d:	0f b6 c0             	movzx  eax,al
c0025e60:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025e66:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025e69:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025e6c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025e6f:	ee                   	out    dx,al
c0025e70:	83 ec 0c             	sub    esp,0xc
c0025e73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e76:	e8 61 fe ff ff       	call   c0025cdc <PIC::ioWait()>
c0025e7b:	83 c4 10             	add    esp,0x10
c0025e7e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e81:	0f b6 c0             	movzx  eax,al
c0025e84:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025e8a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025e8d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025e90:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e93:	ee                   	out    dx,al
c0025e94:	83 ec 0c             	sub    esp,0xc
c0025e97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e9a:	e8 3d fe ff ff       	call   c0025cdc <PIC::ioWait()>
c0025e9f:	83 c4 10             	add    esp,0x10
c0025ea2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025ea8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025eac:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025eaf:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025eb2:	ee                   	out    dx,al
c0025eb3:	83 ec 0c             	sub    esp,0xc
c0025eb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eb9:	e8 1e fe ff ff       	call   c0025cdc <PIC::ioWait()>
c0025ebe:	83 c4 10             	add    esp,0x10
c0025ec1:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025ec7:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025ecb:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025ece:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ed1:	ee                   	out    dx,al
c0025ed2:	83 ec 0c             	sub    esp,0xc
c0025ed5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ed8:	e8 ff fd ff ff       	call   c0025cdc <PIC::ioWait()>
c0025edd:	83 c4 10             	add    esp,0x10
c0025ee0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025ee6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025eea:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025eed:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025ef0:	ee                   	out    dx,al
c0025ef1:	83 ec 0c             	sub    esp,0xc
c0025ef4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ef7:	e8 e0 fd ff ff       	call   c0025cdc <PIC::ioWait()>
c0025efc:	83 c4 10             	add    esp,0x10
c0025eff:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025f05:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025f09:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025f0c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025f0f:	ee                   	out    dx,al
c0025f10:	83 ec 0c             	sub    esp,0xc
c0025f13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f16:	e8 c1 fd ff ff       	call   c0025cdc <PIC::ioWait()>
c0025f1b:	83 c4 10             	add    esp,0x10
c0025f1e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025f22:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025f28:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025f2b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025f2e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025f31:	ee                   	out    dx,al
c0025f32:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025f36:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025f3c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025f3f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025f42:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025f45:	ee                   	out    dx,al
c0025f46:	90                   	nop
c0025f47:	c9                   	leave  
c0025f48:	c3                   	ret    
c0025f49:	90                   	nop

c0025f4a <PIC::open(int, int, void*)>:
c0025f4a:	55                   	push   ebp
c0025f4b:	89 e5                	mov    ebp,esp
c0025f4d:	83 ec 18             	sub    esp,0x18
c0025f50:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025f56:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025f5a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f5d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f61:	ee                   	out    dx,al
c0025f62:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025f68:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025f6c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f6f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f73:	ee                   	out    dx,al
c0025f74:	83 ec 0c             	sub    esp,0xc
c0025f77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f7a:	e8 5f fe ff ff       	call   c0025dde <PIC::remap()>
c0025f7f:	83 c4 10             	add    esp,0x10
c0025f82:	b8 00 00 00 00       	mov    eax,0x0
c0025f87:	c9                   	leave  
c0025f88:	c3                   	ret    
c0025f89:	90                   	nop

c0025f8a <APICTimer::close(int, int, void*)>:
c0025f8a:	b8 00 00 00 00       	mov    eax,0x0
c0025f8f:	c3                   	ret    

c0025f90 <apicTimerHandler(regs*, void*)>:
c0025f90:	83 ec 0c             	sub    esp,0xc
c0025f93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f97:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f99:	99                   	cdq    
c0025f9a:	52                   	push   edx
c0025f9b:	50                   	push   eax
c0025f9c:	6a 00                	push   0x0
c0025f9e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025fa3:	e8 8c 07 00 00       	call   c0026734 <__udivdi3>
c0025fa8:	83 c4 10             	add    esp,0x10
c0025fab:	83 ec 08             	sub    esp,0x8
c0025fae:	52                   	push   edx
c0025faf:	50                   	push   eax
c0025fb0:	e8 3e 06 ff ff       	call   c00165f3 <timerHandler(unsigned long long)>
c0025fb5:	83 c4 10             	add    esp,0x10
c0025fb8:	90                   	nop
c0025fb9:	83 c4 0c             	add    esp,0xc
c0025fbc:	c3                   	ret    
c0025fbd:	90                   	nop

c0025fbe <APICTimer::write(int)>:
c0025fbe:	53                   	push   ebx
c0025fbf:	83 ec 28             	sub    esp,0x28
c0025fc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025fc6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025fca:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025fd0:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0025fd5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fdb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fe1:	83 ec 0c             	sub    esp,0xc
c0025fe4:	50                   	push   eax
c0025fe5:	e8 de f4 ff ff       	call   c00254c8 <APIC::getBase()>
c0025fea:	83 c4 10             	add    esp,0x10
c0025fed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025ff1:	a1 70 e0 02 c0       	mov    eax,ds:0xc002e070
c0025ff6:	8b 15 74 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e074
c0025ffc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026000:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026008:	05 e0 03 00 00       	add    eax,0x3e0
c002600d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026017:	05 80 03 00 00       	add    eax,0x380
c002601c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026022:	fb                   	sti    
c0026023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026027:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002602b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026030:	83 d2 00             	adc    edx,0x0
c0026033:	89 c1                	mov    ecx,eax
c0026035:	89 d3                	mov    ebx,edx
c0026037:	a1 70 e0 02 c0       	mov    eax,ds:0xc002e070
c002603c:	8b 15 74 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e074
c0026042:	39 c8                	cmp    eax,ecx
c0026044:	89 d0                	mov    eax,edx
c0026046:	19 d8                	sbb    eax,ebx
c0026048:	73 02                	jae    c002604c <APICTimer::write(int)+0x8e>
c002604a:	eb d7                	jmp    c0026023 <APICTimer::write(int)+0x65>
c002604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026050:	05 20 03 00 00       	add    eax,0x320
c0026055:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002605b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002605f:	05 90 03 00 00       	add    eax,0x390
c0026064:	8b 00                	mov    eax,DWORD PTR [eax]
c0026066:	f7 d0                	not    eax
c0026068:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002606c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026074:	ba 00 00 00 00       	mov    edx,0x0
c0026079:	f7 f3                	div    ebx
c002607b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002607f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026083:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026089:	0d 00 00 02 00       	or     eax,0x20000
c002608e:	89 c2                	mov    edx,eax
c0026090:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026094:	05 20 03 00 00       	add    eax,0x320
c0026099:	89 10                	mov    DWORD PTR [eax],edx
c002609b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002609f:	05 e0 03 00 00       	add    eax,0x3e0
c00260a4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00260aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260ae:	05 80 03 00 00       	add    eax,0x380
c00260b3:	89 c2                	mov    edx,eax
c00260b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00260b9:	89 02                	mov    DWORD PTR [edx],eax
c00260bb:	90                   	nop
c00260bc:	83 c4 28             	add    esp,0x28
c00260bf:	5b                   	pop    ebx
c00260c0:	c3                   	ret    
c00260c1:	90                   	nop

c00260c2 <APICTimer::open(int, int, void*)>:
c00260c2:	57                   	push   edi
c00260c3:	56                   	push   esi
c00260c4:	53                   	push   ebx
c00260c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00260cb:	83 c0 24             	add    eax,0x24
c00260ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00260d0:	83 ec 08             	sub    esp,0x8
c00260d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260db:	ff d0                	call   eax
c00260dd:	83 c4 10             	add    esp,0x10
c00260e0:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c00260e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00260eb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00260f1:	83 ec 0c             	sub    esp,0xc
c00260f4:	50                   	push   eax
c00260f5:	e8 ce f3 ff ff       	call   c00254c8 <APIC::getBase()>
c00260fa:	83 c4 10             	add    esp,0x10
c00260fd:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026107:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002610d:	0f b6 f8             	movzx  edi,al
c0026110:	89 d0                	mov    eax,edx
c0026112:	ba 00 00 00 00       	mov    edx,0x0
c0026117:	89 c1                	mov    ecx,eax
c0026119:	80 e5 ff             	and    ch,0xff
c002611c:	89 cb                	mov    ebx,ecx
c002611e:	0f b6 f2             	movzx  esi,dl
c0026121:	89 d8                	mov    eax,ebx
c0026123:	89 f2                	mov    edx,esi
c0026125:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026129:	8d 5f 08             	lea    ebx,[edi+0x8]
c002612c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026130:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026134:	83 e0 00             	and    eax,0x0
c0026137:	09 d0                	or     eax,edx
c0026139:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002613d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026141:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026147:	8d 50 01             	lea    edx,[eax+0x1]
c002614a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002614e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026154:	0f b6 d0             	movzx  edx,al
c0026157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002615b:	83 c2 08             	add    edx,0x8
c002615e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026162:	0f b6 c9             	movzx  ecx,cl
c0026165:	81 c9 00 00 01 00    	or     ecx,0x10000
c002616b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002616f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026173:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026177:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002617d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026181:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026185:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002618b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002618f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026195:	83 ec 0c             	sub    esp,0xc
c0026198:	51                   	push   ecx
c0026199:	6a 01                	push   0x1
c002619b:	68 90 5f 02 c0       	push   0xc0025f90
c00261a0:	52                   	push   edx
c00261a1:	50                   	push   eax
c00261a2:	e8 ff d8 fe ff       	call   c0013aa6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00261a7:	83 c4 20             	add    esp,0x20
c00261aa:	89 c2                	mov    edx,eax
c00261ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00261b6:	b8 00 00 00 00       	mov    eax,0x0
c00261bb:	5b                   	pop    ebx
c00261bc:	5e                   	pop    esi
c00261bd:	5f                   	pop    edi
c00261be:	c3                   	ret    
c00261bf:	90                   	nop

c00261c0 <APICTimer::APICTimer()>:
c00261c0:	83 ec 0c             	sub    esp,0xc
c00261c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c7:	83 ec 08             	sub    esp,0x8
c00261ca:	68 4c c7 02 c0       	push   0xc002c74c
c00261cf:	50                   	push   eax
c00261d0:	e8 8f 03 ff ff       	call   c0016564 <Timer::Timer(char const*)>
c00261d5:	83 c4 10             	add    esp,0x10
c00261d8:	ba 60 c7 02 c0       	mov    edx,0xc002c760
c00261dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261e1:	89 10                	mov    DWORD PTR [eax],edx
c00261e3:	90                   	nop
c00261e4:	83 c4 0c             	add    esp,0xc
c00261e7:	c3                   	ret    

c00261e8 <PIT::write(int)>:
c00261e8:	83 ec 10             	sub    esp,0x10
c00261eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00261f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00261f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00261fd:	a3 a4 1d 03 c0       	mov    ds:0xc0031da4,eax
c0026202:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026207:	99                   	cdq    
c0026208:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002620c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026210:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026217:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002621c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026220:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026225:	ee                   	out    dx,al
c0026226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002622a:	0f b6 c0             	movzx  eax,al
c002622d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026234:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026238:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002623c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026241:	ee                   	out    dx,al
c0026242:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026246:	c1 f8 08             	sar    eax,0x8
c0026249:	0f b6 c0             	movzx  eax,al
c002624c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026253:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026257:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002625b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026260:	ee                   	out    dx,al
c0026261:	90                   	nop
c0026262:	83 c4 10             	add    esp,0x10
c0026265:	c3                   	ret    

c0026266 <pitHandler(regs*, void*)>:
c0026266:	83 ec 0c             	sub    esp,0xc
c0026269:	a1 a4 1d 03 c0       	mov    eax,ds:0xc0031da4
c002626e:	99                   	cdq    
c002626f:	52                   	push   edx
c0026270:	50                   	push   eax
c0026271:	6a 00                	push   0x0
c0026273:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026278:	e8 b7 04 00 00       	call   c0026734 <__udivdi3>
c002627d:	83 c4 10             	add    esp,0x10
c0026280:	83 ec 08             	sub    esp,0x8
c0026283:	52                   	push   edx
c0026284:	50                   	push   eax
c0026285:	e8 69 03 ff ff       	call   c00165f3 <timerHandler(unsigned long long)>
c002628a:	83 c4 10             	add    esp,0x10
c002628d:	90                   	nop
c002628e:	83 c4 0c             	add    esp,0xc
c0026291:	c3                   	ret    

c0026292 <PIT::open(int, int, void*)>:
c0026292:	83 ec 0c             	sub    esp,0xc
c0026295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026299:	8b 00                	mov    eax,DWORD PTR [eax]
c002629b:	83 c0 24             	add    eax,0x24
c002629e:	8b 00                	mov    eax,DWORD PTR [eax]
c00262a0:	83 ec 08             	sub    esp,0x8
c00262a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262ab:	ff d0                	call   eax
c00262ad:	83 c4 10             	add    esp,0x10
c00262b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b4:	83 ec 0c             	sub    esp,0xc
c00262b7:	6a 00                	push   0x0
c00262b9:	6a 01                	push   0x1
c00262bb:	68 66 62 02 c0       	push   0xc0026266
c00262c0:	6a 00                	push   0x0
c00262c2:	50                   	push   eax
c00262c3:	e8 de d7 fe ff       	call   c0013aa6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00262c8:	83 c4 20             	add    esp,0x20
c00262cb:	89 c2                	mov    edx,eax
c00262cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d1:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00262d7:	b8 00 00 00 00       	mov    eax,0x0
c00262dc:	83 c4 0c             	add    esp,0xc
c00262df:	c3                   	ret    

c00262e0 <PIT::close(int, int, void*)>:
c00262e0:	83 ec 0c             	sub    esp,0xc
c00262e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00262f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f5:	6a 01                	push   0x1
c00262f7:	68 66 62 02 c0       	push   0xc0026266
c00262fc:	6a 00                	push   0x0
c00262fe:	50                   	push   eax
c00262ff:	e8 ec d7 fe ff       	call   c0013af0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026304:	83 c4 10             	add    esp,0x10
c0026307:	b8 00 00 00 00       	mov    eax,0x0
c002630c:	83 c4 0c             	add    esp,0xc
c002630f:	c3                   	ret    

c0026310 <PIT::PIT()>:
c0026310:	83 ec 0c             	sub    esp,0xc
c0026313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026317:	83 ec 08             	sub    esp,0x8
c002631a:	68 88 c7 02 c0       	push   0xc002c788
c002631f:	50                   	push   eax
c0026320:	e8 3f 02 ff ff       	call   c0016564 <Timer::Timer(char const*)>
c0026325:	83 c4 10             	add    esp,0x10
c0026328:	ba b0 c7 02 c0       	mov    edx,0xc002c7b0
c002632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026331:	89 10                	mov    DWORD PTR [eax],edx
c0026333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026337:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002633d:	0f b6 d0             	movzx  edx,al
c0026340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026344:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002634b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026355:	0f b6 d0             	movzx  edx,al
c0026358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002635c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026365:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002636b:	8d 50 01             	lea    edx,[eax+0x1]
c002636e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026372:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026378:	0f b6 d0             	movzx  edx,al
c002637b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002637f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026383:	83 e1 3f             	and    ecx,0x3f
c0026386:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002638a:	90                   	nop
c002638b:	83 c4 0c             	add    esp,0xc
c002638e:	c3                   	ret    
c002638f:	90                   	nop

c0026390 <avxDetect>:
c0026390:	b8 00 00 00 00       	mov    eax,0x0
c0026395:	c3                   	ret    

c0026396 <avxSave>:
c0026396:	c3                   	ret    

c0026397 <avxLoad>:
c0026397:	c3                   	ret    

c0026398 <avxInit>:
c0026398:	c3                   	ret    

c0026399 <avxClose>:
c0026399:	c3                   	ret    

c002639a <wouldSheSayYes>:
c002639a:	c3                   	ret    
c002639b:	49                   	dec    ecx
c002639c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00263a0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00263a4:	75 20                	jne    c00263c6 <sseDetect.noSSE+0x1>
c00263a6:	4e                   	dec    esi
c00263a7:	79 61                	jns    c002640a <x87Detect+0x14>
c00263a9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00263ae:	66 90                	xchg   ax,ax

c00263b0 <absolutelyNoChanceInHell>:
c00263b0:	b8 01 00 00 00       	mov    eax,0x1
c00263b5:	0f a2                	cpuid  
c00263b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00263bd:	74 06                	je     c00263c5 <sseDetect.noSSE>
c00263bf:	b8 01 00 00 00       	mov    eax,0x1
c00263c4:	c3                   	ret    

c00263c5 <sseDetect.noSSE>:
c00263c5:	31 c0                	xor    eax,eax
c00263c7:	c3                   	ret    

c00263c8 <sseSave>:
c00263c8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00263cd:	c3                   	ret    

c00263ce <sseLoad>:
c00263ce:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00263d3:	c3                   	ret    

c00263d4 <sseInit>:
c00263d4:	e8 49 00 00 00       	call   c0026422 <x87Init>
c00263d9:	0f 20 e0             	mov    eax,cr4
c00263dc:	66 0d 00 06          	or     ax,0x600
c00263e0:	0f 22 e0             	mov    cr4,eax
c00263e3:	c3                   	ret    

c00263e4 <sseClose>:
c00263e4:	c3                   	ret    
c00263e5:	66 90                	xchg   ax,ax
c00263e7:	66 90                	xchg   ax,ax
c00263e9:	66 90                	xchg   ax,ax
c00263eb:	66 90                	xchg   ax,ax
c00263ed:	66 90                	xchg   ax,ax
c00263ef:	90                   	nop

c00263f0 <value_37F>:
c00263f0:	7f 03                	jg     c00263f5 <value_37A+0x1>

c00263f2 <value_37E>:
c00263f2:	7e 03                	jle    c00263f7 <x87Detect+0x1>

c00263f4 <value_37A>:
c00263f4:	7a 03                	jp     c00263f9 <x87Detect+0x3>

c00263f6 <x87Detect>:
c00263f6:	b8 01 00 00 00       	mov    eax,0x1
c00263fb:	0f a2                	cpuid  
c00263fd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026403:	74 06                	je     c002640b <x87Detect.nox87>
c0026405:	b8 01 00 00 00       	mov    eax,0x1
c002640a:	c3                   	ret    

c002640b <x87Detect.nox87>:
c002640b:	b8 00 00 00 00       	mov    eax,0x0
c0026410:	c3                   	ret    

c0026411 <x87Save>:
c0026411:	55                   	push   ebp
c0026412:	89 e5                	mov    ebp,esp
c0026414:	9b dd 75 08          	fsave  [ebp+0x8]
c0026418:	c9                   	leave  
c0026419:	c3                   	ret    

c002641a <x87Load>:
c002641a:	55                   	push   ebp
c002641b:	89 e5                	mov    ebp,esp
c002641d:	dd 65 08             	frstor [ebp+0x8]
c0026420:	c9                   	leave  
c0026421:	c3                   	ret    

c0026422 <x87Init>:
c0026422:	9b db e3             	finit  
c0026425:	0f 20 c0             	mov    eax,cr0
c0026428:	66 25 fb ff          	and    ax,0xfffb
c002642c:	66 0d 22 00          	or     ax,0x22
c0026430:	0f 22 c0             	mov    cr0,eax
c0026433:	0f 06                	clts   
c0026435:	d9 2d f4 63 02 c0    	fldcw  WORD PTR ds:0xc00263f4
c002643b:	c3                   	ret    

c002643c <x87Close>:
c002643c:	c3                   	ret    
c002643d:	66 90                	xchg   ax,ax
c002643f:	90                   	nop

c0026440 <__do_global_ctors_aux>:
c0026440:	a1 34 90 02 c0       	mov    eax,ds:0xc0029034
c0026445:	83 f8 ff             	cmp    eax,0xffffffff
c0026448:	74 1a                	je     c0026464 <__do_global_ctors_aux+0x24>
c002644a:	55                   	push   ebp
c002644b:	89 e5                	mov    ebp,esp
c002644d:	53                   	push   ebx
c002644e:	52                   	push   edx
c002644f:	bb 34 90 02 c0       	mov    ebx,0xc0029034
c0026454:	ff d0                	call   eax
c0026456:	83 eb 04             	sub    ebx,0x4
c0026459:	8b 03                	mov    eax,DWORD PTR [ebx]
c002645b:	83 f8 ff             	cmp    eax,0xffffffff
c002645e:	75 f4                	jne    c0026454 <__do_global_ctors_aux+0x14>
c0026460:	58                   	pop    eax
c0026461:	5b                   	pop    ebx
c0026462:	5d                   	pop    ebp
c0026463:	c3                   	ret    
c0026464:	c3                   	ret    
c0026465:	66 90                	xchg   ax,ax
c0026467:	90                   	nop

c0026468 <__divdi3>:
c0026468:	55                   	push   ebp
c0026469:	57                   	push   edi
c002646a:	56                   	push   esi
c002646b:	53                   	push   ebx
c002646c:	83 ec 1c             	sub    esp,0x1c
c002646f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026473:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026477:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002647a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002647e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026482:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026486:	85 db                	test   ebx,ebx
c0026488:	0f 88 8e 00 00 00    	js     c002651c <__divdi3+0xb4>
c002648e:	89 dd                	mov    ebp,ebx
c0026490:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026498:	89 d3                	mov    ebx,edx
c002649a:	85 d2                	test   edx,edx
c002649c:	79 0d                	jns    c00264ab <__divdi3+0x43>
c002649e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00264a2:	f7 d8                	neg    eax
c00264a4:	83 d2 00             	adc    edx,0x0
c00264a7:	f7 da                	neg    edx
c00264a9:	89 d3                	mov    ebx,edx
c00264ab:	89 c7                	mov    edi,eax
c00264ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264b0:	85 db                	test   ebx,ebx
c00264b2:	75 48                	jne    c00264fc <__divdi3+0x94>
c00264b4:	39 ef                	cmp    edi,ebp
c00264b6:	76 24                	jbe    c00264dc <__divdi3+0x74>
c00264b8:	89 ea                	mov    edx,ebp
c00264ba:	f7 f7                	div    edi
c00264bc:	89 c1                	mov    ecx,eax
c00264be:	31 f6                	xor    esi,esi
c00264c0:	89 c8                	mov    eax,ecx
c00264c2:	89 f2                	mov    edx,esi
c00264c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00264c8:	85 c9                	test   ecx,ecx
c00264ca:	74 07                	je     c00264d3 <__divdi3+0x6b>
c00264cc:	f7 d8                	neg    eax
c00264ce:	83 d2 00             	adc    edx,0x0
c00264d1:	f7 da                	neg    edx
c00264d3:	83 c4 1c             	add    esp,0x1c
c00264d6:	5b                   	pop    ebx
c00264d7:	5e                   	pop    esi
c00264d8:	5f                   	pop    edi
c00264d9:	5d                   	pop    ebp
c00264da:	c3                   	ret    
c00264db:	90                   	nop
c00264dc:	85 ff                	test   edi,edi
c00264de:	75 0b                	jne    c00264eb <__divdi3+0x83>
c00264e0:	b8 01 00 00 00       	mov    eax,0x1
c00264e5:	31 d2                	xor    edx,edx
c00264e7:	f7 f3                	div    ebx
c00264e9:	89 c7                	mov    edi,eax
c00264eb:	31 d2                	xor    edx,edx
c00264ed:	89 e8                	mov    eax,ebp
c00264ef:	f7 f7                	div    edi
c00264f1:	89 c6                	mov    esi,eax
c00264f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264f6:	f7 f7                	div    edi
c00264f8:	89 c1                	mov    ecx,eax
c00264fa:	eb c4                	jmp    c00264c0 <__divdi3+0x58>
c00264fc:	39 eb                	cmp    ebx,ebp
c00264fe:	77 3c                	ja     c002653c <__divdi3+0xd4>
c0026500:	0f bd f3             	bsr    esi,ebx
c0026503:	83 f6 1f             	xor    esi,0x1f
c0026506:	75 40                	jne    c0026548 <__divdi3+0xe0>
c0026508:	39 eb                	cmp    ebx,ebp
c002650a:	72 09                	jb     c0026515 <__divdi3+0xad>
c002650c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002650f:	0f 87 97 00 00 00    	ja     c00265ac <__divdi3+0x144>
c0026515:	b9 01 00 00 00       	mov    ecx,0x1
c002651a:	eb a4                	jmp    c00264c0 <__divdi3+0x58>
c002651c:	f7 d9                	neg    ecx
c002651e:	83 d3 00             	adc    ebx,0x0
c0026521:	f7 db                	neg    ebx
c0026523:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026526:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002652a:	89 dd                	mov    ebp,ebx
c002652c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026534:	e9 5f ff ff ff       	jmp    c0026498 <__divdi3+0x30>
c0026539:	8d 76 00             	lea    esi,[esi+0x0]
c002653c:	31 f6                	xor    esi,esi
c002653e:	31 c9                	xor    ecx,ecx
c0026540:	e9 7b ff ff ff       	jmp    c00264c0 <__divdi3+0x58>
c0026545:	8d 76 00             	lea    esi,[esi+0x0]
c0026548:	b8 20 00 00 00       	mov    eax,0x20
c002654d:	29 f0                	sub    eax,esi
c002654f:	89 f1                	mov    ecx,esi
c0026551:	d3 e3                	shl    ebx,cl
c0026553:	89 fa                	mov    edx,edi
c0026555:	88 c1                	mov    cl,al
c0026557:	d3 ea                	shr    edx,cl
c0026559:	09 da                	or     edx,ebx
c002655b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002655f:	89 f1                	mov    ecx,esi
c0026561:	d3 e7                	shl    edi,cl
c0026563:	89 eb                	mov    ebx,ebp
c0026565:	88 c1                	mov    cl,al
c0026567:	d3 eb                	shr    ebx,cl
c0026569:	89 f1                	mov    ecx,esi
c002656b:	d3 e5                	shl    ebp,cl
c002656d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026570:	88 c1                	mov    cl,al
c0026572:	d3 ea                	shr    edx,cl
c0026574:	09 d5                	or     ebp,edx
c0026576:	89 e8                	mov    eax,ebp
c0026578:	89 da                	mov    edx,ebx
c002657a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002657e:	89 d3                	mov    ebx,edx
c0026580:	89 c5                	mov    ebp,eax
c0026582:	f7 e7                	mul    edi
c0026584:	39 d3                	cmp    ebx,edx
c0026586:	72 18                	jb     c00265a0 <__divdi3+0x138>
c0026588:	74 0a                	je     c0026594 <__divdi3+0x12c>
c002658a:	89 e9                	mov    ecx,ebp
c002658c:	31 f6                	xor    esi,esi
c002658e:	e9 2d ff ff ff       	jmp    c00264c0 <__divdi3+0x58>
c0026593:	90                   	nop
c0026594:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026597:	89 f1                	mov    ecx,esi
c0026599:	d3 e7                	shl    edi,cl
c002659b:	39 c7                	cmp    edi,eax
c002659d:	73 eb                	jae    c002658a <__divdi3+0x122>
c002659f:	90                   	nop
c00265a0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00265a3:	31 f6                	xor    esi,esi
c00265a5:	e9 16 ff ff ff       	jmp    c00264c0 <__divdi3+0x58>
c00265aa:	66 90                	xchg   ax,ax
c00265ac:	31 c9                	xor    ecx,ecx
c00265ae:	e9 0d ff ff ff       	jmp    c00264c0 <__divdi3+0x58>
c00265b3:	90                   	nop

c00265b4 <__moddi3>:
c00265b4:	55                   	push   ebp
c00265b5:	57                   	push   edi
c00265b6:	56                   	push   esi
c00265b7:	53                   	push   ebx
c00265b8:	83 ec 2c             	sub    esp,0x2c
c00265bb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00265bf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00265c3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00265c7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00265cb:	85 db                	test   ebx,ebx
c00265cd:	0f 88 85 00 00 00    	js     c0026658 <__moddi3+0xa4>
c00265d3:	89 de                	mov    esi,ebx
c00265d5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00265dd:	89 d7                	mov    edi,edx
c00265df:	85 d2                	test   edx,edx
c00265e1:	79 09                	jns    c00265ec <__moddi3+0x38>
c00265e3:	f7 d8                	neg    eax
c00265e5:	83 d2 00             	adc    edx,0x0
c00265e8:	f7 da                	neg    edx
c00265ea:	89 d7                	mov    edi,edx
c00265ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265f0:	89 cd                	mov    ebp,ecx
c00265f2:	85 ff                	test   edi,edi
c00265f4:	75 52                	jne    c0026648 <__moddi3+0x94>
c00265f6:	89 c3                	mov    ebx,eax
c00265f8:	39 f0                	cmp    eax,esi
c00265fa:	76 24                	jbe    c0026620 <__moddi3+0x6c>
c00265fc:	89 c8                	mov    eax,ecx
c00265fe:	89 f2                	mov    edx,esi
c0026600:	f7 f3                	div    ebx
c0026602:	89 d6                	mov    esi,edx
c0026604:	89 f0                	mov    eax,esi
c0026606:	31 d2                	xor    edx,edx
c0026608:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002660c:	85 c9                	test   ecx,ecx
c002660e:	74 07                	je     c0026617 <__moddi3+0x63>
c0026610:	f7 d8                	neg    eax
c0026612:	83 d2 00             	adc    edx,0x0
c0026615:	f7 da                	neg    edx
c0026617:	83 c4 2c             	add    esp,0x2c
c002661a:	5b                   	pop    ebx
c002661b:	5e                   	pop    esi
c002661c:	5f                   	pop    edi
c002661d:	5d                   	pop    ebp
c002661e:	c3                   	ret    
c002661f:	90                   	nop
c0026620:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026624:	85 db                	test   ebx,ebx
c0026626:	75 0d                	jne    c0026635 <__moddi3+0x81>
c0026628:	b8 01 00 00 00       	mov    eax,0x1
c002662d:	31 d2                	xor    edx,edx
c002662f:	f7 f7                	div    edi
c0026631:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026635:	89 f0                	mov    eax,esi
c0026637:	31 d2                	xor    edx,edx
c0026639:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002663d:	f7 f7                	div    edi
c002663f:	89 e8                	mov    eax,ebp
c0026641:	f7 f7                	div    edi
c0026643:	89 d6                	mov    esi,edx
c0026645:	eb bd                	jmp    c0026604 <__moddi3+0x50>
c0026647:	90                   	nop
c0026648:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002664c:	39 f7                	cmp    edi,esi
c002664e:	76 20                	jbe    c0026670 <__moddi3+0xbc>
c0026650:	89 c8                	mov    eax,ecx
c0026652:	89 f2                	mov    edx,esi
c0026654:	eb b2                	jmp    c0026608 <__moddi3+0x54>
c0026656:	66 90                	xchg   ax,ax
c0026658:	f7 d9                	neg    ecx
c002665a:	83 d3 00             	adc    ebx,0x0
c002665d:	f7 db                	neg    ebx
c002665f:	89 de                	mov    esi,ebx
c0026661:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026669:	e9 6f ff ff ff       	jmp    c00265dd <__moddi3+0x29>
c002666e:	66 90                	xchg   ax,ax
c0026670:	0f bd c7             	bsr    eax,edi
c0026673:	83 f0 1f             	xor    eax,0x1f
c0026676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002667a:	75 24                	jne    c00266a0 <__moddi3+0xec>
c002667c:	39 f7                	cmp    edi,esi
c002667e:	72 06                	jb     c0026686 <__moddi3+0xd2>
c0026680:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026684:	77 0c                	ja     c0026692 <__moddi3+0xde>
c0026686:	89 e9                	mov    ecx,ebp
c0026688:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002668c:	19 fe                	sbb    esi,edi
c002668e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026692:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026696:	89 f2                	mov    edx,esi
c0026698:	e9 6b ff ff ff       	jmp    c0026608 <__moddi3+0x54>
c002669d:	8d 76 00             	lea    esi,[esi+0x0]
c00266a0:	b8 20 00 00 00       	mov    eax,0x20
c00266a5:	89 c2                	mov    edx,eax
c00266a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00266ab:	29 da                	sub    edx,ebx
c00266ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00266b1:	88 d9                	mov    cl,bl
c00266b3:	d3 e7                	shl    edi,cl
c00266b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00266b9:	88 d1                	mov    cl,dl
c00266bb:	d3 e8                	shr    eax,cl
c00266bd:	09 c7                	or     edi,eax
c00266bf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00266c3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00266c7:	89 d8                	mov    eax,ebx
c00266c9:	88 d9                	mov    cl,bl
c00266cb:	d3 e7                	shl    edi,cl
c00266cd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266d1:	89 f3                	mov    ebx,esi
c00266d3:	88 d1                	mov    cl,dl
c00266d5:	d3 eb                	shr    ebx,cl
c00266d7:	89 c7                	mov    edi,eax
c00266d9:	88 c1                	mov    cl,al
c00266db:	d3 e6                	shl    esi,cl
c00266dd:	89 e8                	mov    eax,ebp
c00266df:	88 d1                	mov    cl,dl
c00266e1:	d3 e8                	shr    eax,cl
c00266e3:	09 f0                	or     eax,esi
c00266e5:	89 f9                	mov    ecx,edi
c00266e7:	d3 e5                	shl    ebp,cl
c00266e9:	89 da                	mov    edx,ebx
c00266eb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00266ef:	89 d3                	mov    ebx,edx
c00266f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266f5:	89 c6                	mov    esi,eax
c00266f7:	89 d1                	mov    ecx,edx
c00266f9:	39 d3                	cmp    ebx,edx
c00266fb:	72 27                	jb     c0026724 <__moddi3+0x170>
c00266fd:	74 21                	je     c0026720 <__moddi3+0x16c>
c00266ff:	29 f5                	sub    ebp,esi
c0026701:	19 cb                	sbb    ebx,ecx
c0026703:	89 de                	mov    esi,ebx
c0026705:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026709:	d3 e6                	shl    esi,cl
c002670b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002670f:	89 f9                	mov    ecx,edi
c0026711:	d3 ed                	shr    ebp,cl
c0026713:	09 ee                	or     esi,ebp
c0026715:	89 f0                	mov    eax,esi
c0026717:	d3 eb                	shr    ebx,cl
c0026719:	89 da                	mov    edx,ebx
c002671b:	e9 e8 fe ff ff       	jmp    c0026608 <__moddi3+0x54>
c0026720:	39 c5                	cmp    ebp,eax
c0026722:	73 db                	jae    c00266ff <__moddi3+0x14b>
c0026724:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026728:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002672c:	89 d1                	mov    ecx,edx
c002672e:	89 c6                	mov    esi,eax
c0026730:	eb cd                	jmp    c00266ff <__moddi3+0x14b>
c0026732:	66 90                	xchg   ax,ax

c0026734 <__udivdi3>:
c0026734:	55                   	push   ebp
c0026735:	57                   	push   edi
c0026736:	56                   	push   esi
c0026737:	53                   	push   ebx
c0026738:	83 ec 1c             	sub    esp,0x1c
c002673b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002673f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026743:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026747:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002674b:	85 d2                	test   edx,edx
c002674d:	75 41                	jne    c0026790 <__udivdi3+0x5c>
c002674f:	39 f7                	cmp    edi,esi
c0026751:	76 15                	jbe    c0026768 <__udivdi3+0x34>
c0026753:	89 e8                	mov    eax,ebp
c0026755:	89 f2                	mov    edx,esi
c0026757:	f7 f7                	div    edi
c0026759:	31 db                	xor    ebx,ebx
c002675b:	89 da                	mov    edx,ebx
c002675d:	83 c4 1c             	add    esp,0x1c
c0026760:	5b                   	pop    ebx
c0026761:	5e                   	pop    esi
c0026762:	5f                   	pop    edi
c0026763:	5d                   	pop    ebp
c0026764:	c3                   	ret    
c0026765:	8d 76 00             	lea    esi,[esi+0x0]
c0026768:	89 f9                	mov    ecx,edi
c002676a:	85 ff                	test   edi,edi
c002676c:	75 0b                	jne    c0026779 <__udivdi3+0x45>
c002676e:	b8 01 00 00 00       	mov    eax,0x1
c0026773:	31 d2                	xor    edx,edx
c0026775:	f7 f7                	div    edi
c0026777:	89 c1                	mov    ecx,eax
c0026779:	31 d2                	xor    edx,edx
c002677b:	89 f0                	mov    eax,esi
c002677d:	f7 f1                	div    ecx
c002677f:	89 c3                	mov    ebx,eax
c0026781:	89 e8                	mov    eax,ebp
c0026783:	f7 f1                	div    ecx
c0026785:	89 da                	mov    edx,ebx
c0026787:	83 c4 1c             	add    esp,0x1c
c002678a:	5b                   	pop    ebx
c002678b:	5e                   	pop    esi
c002678c:	5f                   	pop    edi
c002678d:	5d                   	pop    ebp
c002678e:	c3                   	ret    
c002678f:	90                   	nop
c0026790:	39 f2                	cmp    edx,esi
c0026792:	77 1c                	ja     c00267b0 <__udivdi3+0x7c>
c0026794:	0f bd da             	bsr    ebx,edx
c0026797:	83 f3 1f             	xor    ebx,0x1f
c002679a:	75 24                	jne    c00267c0 <__udivdi3+0x8c>
c002679c:	39 f2                	cmp    edx,esi
c002679e:	72 08                	jb     c00267a8 <__udivdi3+0x74>
c00267a0:	39 ef                	cmp    edi,ebp
c00267a2:	0f 87 84 00 00 00    	ja     c002682c <__udivdi3+0xf8>
c00267a8:	b8 01 00 00 00       	mov    eax,0x1
c00267ad:	eb ac                	jmp    c002675b <__udivdi3+0x27>
c00267af:	90                   	nop
c00267b0:	31 db                	xor    ebx,ebx
c00267b2:	31 c0                	xor    eax,eax
c00267b4:	89 da                	mov    edx,ebx
c00267b6:	83 c4 1c             	add    esp,0x1c
c00267b9:	5b                   	pop    ebx
c00267ba:	5e                   	pop    esi
c00267bb:	5f                   	pop    edi
c00267bc:	5d                   	pop    ebp
c00267bd:	c3                   	ret    
c00267be:	66 90                	xchg   ax,ax
c00267c0:	b8 20 00 00 00       	mov    eax,0x20
c00267c5:	29 d8                	sub    eax,ebx
c00267c7:	88 d9                	mov    cl,bl
c00267c9:	d3 e2                	shl    edx,cl
c00267cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00267cf:	89 fa                	mov    edx,edi
c00267d1:	88 c1                	mov    cl,al
c00267d3:	d3 ea                	shr    edx,cl
c00267d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267d9:	09 d1                	or     ecx,edx
c00267db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267df:	88 d9                	mov    cl,bl
c00267e1:	d3 e7                	shl    edi,cl
c00267e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267e7:	89 f7                	mov    edi,esi
c00267e9:	88 c1                	mov    cl,al
c00267eb:	d3 ef                	shr    edi,cl
c00267ed:	88 d9                	mov    cl,bl
c00267ef:	d3 e6                	shl    esi,cl
c00267f1:	89 ea                	mov    edx,ebp
c00267f3:	88 c1                	mov    cl,al
c00267f5:	d3 ea                	shr    edx,cl
c00267f7:	09 d6                	or     esi,edx
c00267f9:	89 f0                	mov    eax,esi
c00267fb:	89 fa                	mov    edx,edi
c00267fd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026801:	89 d7                	mov    edi,edx
c0026803:	89 c6                	mov    esi,eax
c0026805:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026809:	39 d7                	cmp    edi,edx
c002680b:	72 13                	jb     c0026820 <__udivdi3+0xec>
c002680d:	74 09                	je     c0026818 <__udivdi3+0xe4>
c002680f:	89 f0                	mov    eax,esi
c0026811:	31 db                	xor    ebx,ebx
c0026813:	e9 43 ff ff ff       	jmp    c002675b <__udivdi3+0x27>
c0026818:	88 d9                	mov    cl,bl
c002681a:	d3 e5                	shl    ebp,cl
c002681c:	39 c5                	cmp    ebp,eax
c002681e:	73 ef                	jae    c002680f <__udivdi3+0xdb>
c0026820:	8d 46 ff             	lea    eax,[esi-0x1]
c0026823:	31 db                	xor    ebx,ebx
c0026825:	e9 31 ff ff ff       	jmp    c002675b <__udivdi3+0x27>
c002682a:	66 90                	xchg   ax,ax
c002682c:	31 c0                	xor    eax,eax
c002682e:	e9 28 ff ff ff       	jmp    c002675b <__udivdi3+0x27>
c0026833:	90                   	nop

c0026834 <__umoddi3>:
c0026834:	55                   	push   ebp
c0026835:	57                   	push   edi
c0026836:	56                   	push   esi
c0026837:	53                   	push   ebx
c0026838:	83 ec 1c             	sub    esp,0x1c
c002683b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002683f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026843:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026847:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002684b:	89 da                	mov    edx,ebx
c002684d:	85 c0                	test   eax,eax
c002684f:	75 37                	jne    c0026888 <__umoddi3+0x54>
c0026851:	39 df                	cmp    edi,ebx
c0026853:	76 13                	jbe    c0026868 <__umoddi3+0x34>
c0026855:	89 f0                	mov    eax,esi
c0026857:	f7 f7                	div    edi
c0026859:	89 d0                	mov    eax,edx
c002685b:	31 d2                	xor    edx,edx
c002685d:	83 c4 1c             	add    esp,0x1c
c0026860:	5b                   	pop    ebx
c0026861:	5e                   	pop    esi
c0026862:	5f                   	pop    edi
c0026863:	5d                   	pop    ebp
c0026864:	c3                   	ret    
c0026865:	8d 76 00             	lea    esi,[esi+0x0]
c0026868:	89 fd                	mov    ebp,edi
c002686a:	85 ff                	test   edi,edi
c002686c:	75 0b                	jne    c0026879 <__umoddi3+0x45>
c002686e:	b8 01 00 00 00       	mov    eax,0x1
c0026873:	31 d2                	xor    edx,edx
c0026875:	f7 f7                	div    edi
c0026877:	89 c5                	mov    ebp,eax
c0026879:	89 d8                	mov    eax,ebx
c002687b:	31 d2                	xor    edx,edx
c002687d:	f7 f5                	div    ebp
c002687f:	89 f0                	mov    eax,esi
c0026881:	f7 f5                	div    ebp
c0026883:	89 d0                	mov    eax,edx
c0026885:	eb d4                	jmp    c002685b <__umoddi3+0x27>
c0026887:	90                   	nop
c0026888:	89 f1                	mov    ecx,esi
c002688a:	39 d8                	cmp    eax,ebx
c002688c:	76 0a                	jbe    c0026898 <__umoddi3+0x64>
c002688e:	89 f0                	mov    eax,esi
c0026890:	83 c4 1c             	add    esp,0x1c
c0026893:	5b                   	pop    ebx
c0026894:	5e                   	pop    esi
c0026895:	5f                   	pop    edi
c0026896:	5d                   	pop    ebp
c0026897:	c3                   	ret    
c0026898:	0f bd e8             	bsr    ebp,eax
c002689b:	83 f5 1f             	xor    ebp,0x1f
c002689e:	75 1c                	jne    c00268bc <__umoddi3+0x88>
c00268a0:	39 d8                	cmp    eax,ebx
c00268a2:	72 04                	jb     c00268a8 <__umoddi3+0x74>
c00268a4:	39 f7                	cmp    edi,esi
c00268a6:	77 08                	ja     c00268b0 <__umoddi3+0x7c>
c00268a8:	89 da                	mov    edx,ebx
c00268aa:	29 fe                	sub    esi,edi
c00268ac:	19 c2                	sbb    edx,eax
c00268ae:	89 f1                	mov    ecx,esi
c00268b0:	89 c8                	mov    eax,ecx
c00268b2:	83 c4 1c             	add    esp,0x1c
c00268b5:	5b                   	pop    ebx
c00268b6:	5e                   	pop    esi
c00268b7:	5f                   	pop    edi
c00268b8:	5d                   	pop    ebp
c00268b9:	c3                   	ret    
c00268ba:	66 90                	xchg   ax,ax
c00268bc:	ba 20 00 00 00       	mov    edx,0x20
c00268c1:	29 ea                	sub    edx,ebp
c00268c3:	89 e9                	mov    ecx,ebp
c00268c5:	d3 e0                	shl    eax,cl
c00268c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00268cb:	89 f8                	mov    eax,edi
c00268cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00268d1:	88 d1                	mov    cl,dl
c00268d3:	d3 e8                	shr    eax,cl
c00268d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00268d9:	09 c1                	or     ecx,eax
c00268db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00268df:	89 e9                	mov    ecx,ebp
c00268e1:	d3 e7                	shl    edi,cl
c00268e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268e7:	89 d8                	mov    eax,ebx
c00268e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00268ed:	88 d1                	mov    cl,dl
c00268ef:	d3 e8                	shr    eax,cl
c00268f1:	89 c7                	mov    edi,eax
c00268f3:	89 e9                	mov    ecx,ebp
c00268f5:	d3 e3                	shl    ebx,cl
c00268f7:	89 f0                	mov    eax,esi
c00268f9:	88 d1                	mov    cl,dl
c00268fb:	d3 e8                	shr    eax,cl
c00268fd:	09 d8                	or     eax,ebx
c00268ff:	89 e9                	mov    ecx,ebp
c0026901:	d3 e6                	shl    esi,cl
c0026903:	89 f3                	mov    ebx,esi
c0026905:	89 fa                	mov    edx,edi
c0026907:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002690b:	89 d1                	mov    ecx,edx
c002690d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026911:	89 c6                	mov    esi,eax
c0026913:	89 d7                	mov    edi,edx
c0026915:	39 d1                	cmp    ecx,edx
c0026917:	72 27                	jb     c0026940 <__umoddi3+0x10c>
c0026919:	74 21                	je     c002693c <__umoddi3+0x108>
c002691b:	89 ca                	mov    edx,ecx
c002691d:	29 f3                	sub    ebx,esi
c002691f:	19 fa                	sbb    edx,edi
c0026921:	89 d0                	mov    eax,edx
c0026923:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026927:	d3 e0                	shl    eax,cl
c0026929:	89 e9                	mov    ecx,ebp
c002692b:	d3 eb                	shr    ebx,cl
c002692d:	09 d8                	or     eax,ebx
c002692f:	d3 ea                	shr    edx,cl
c0026931:	83 c4 1c             	add    esp,0x1c
c0026934:	5b                   	pop    ebx
c0026935:	5e                   	pop    esi
c0026936:	5f                   	pop    edi
c0026937:	5d                   	pop    ebp
c0026938:	c3                   	ret    
c0026939:	8d 76 00             	lea    esi,[esi+0x0]
c002693c:	39 c3                	cmp    ebx,eax
c002693e:	73 db                	jae    c002691b <__umoddi3+0xe7>
c0026940:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026944:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026948:	89 d7                	mov    edi,edx
c002694a:	89 c6                	mov    esi,eax
c002694c:	eb cd                	jmp    c002691b <__umoddi3+0xe7>

c002694e <__addsf3>:
c002694e:	55                   	push   ebp
c002694f:	89 e5                	mov    ebp,esp
c0026951:	57                   	push   edi
c0026952:	56                   	push   esi
c0026953:	53                   	push   ebx
c0026954:	83 ec 08             	sub    esp,0x8
c0026957:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002695a:	89 fa                	mov    edx,edi
c002695c:	89 f8                	mov    eax,edi
c002695e:	c1 f8 17             	sar    eax,0x17
c0026961:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026964:	c1 e2 08             	shl    edx,0x8
c0026967:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002696d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026970:	89 de                	mov    esi,ebx
c0026972:	c1 fe 17             	sar    esi,0x17
c0026975:	c1 e3 08             	shl    ebx,0x8
c0026978:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002697e:	31 f0                	xor    eax,esi
c0026980:	0f 88 3b 01 00 00    	js     c0026ac1 <__addsf3+0x173>
c0026986:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026989:	29 f1                	sub    ecx,esi
c002698b:	85 c9                	test   ecx,ecx
c002698d:	7e 54                	jle    c00269e3 <__addsf3+0x95>
c002698f:	89 f0                	mov    eax,esi
c0026991:	84 c0                	test   al,al
c0026993:	75 10                	jne    c00269a5 <__addsf3+0x57>
c0026995:	85 db                	test   ebx,ebx
c0026997:	0f 84 aa 02 00 00    	je     c0026c47 <__addsf3+0x2f9>
c002699d:	49                   	dec    ecx
c002699e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269a1:	74 38                	je     c00269db <__addsf3+0x8d>
c00269a3:	eb 13                	jmp    c00269b8 <__addsf3+0x6a>
c00269a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269a8:	f7 d0                	not    eax
c00269aa:	84 c0                	test   al,al
c00269ac:	0f 84 95 02 00 00    	je     c0026c47 <__addsf3+0x2f9>
c00269b2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269b8:	83 f9 1f             	cmp    ecx,0x1f
c00269bb:	0f 8f 86 02 00 00    	jg     c0026c47 <__addsf3+0x2f9>
c00269c1:	89 de                	mov    esi,ebx
c00269c3:	d3 ee                	shr    esi,cl
c00269c5:	b8 20 00 00 00       	mov    eax,0x20
c00269ca:	29 c8                	sub    eax,ecx
c00269cc:	89 c1                	mov    ecx,eax
c00269ce:	d3 e3                	shl    ebx,cl
c00269d0:	31 c0                	xor    eax,eax
c00269d2:	85 db                	test   ebx,ebx
c00269d4:	0f 95 c0             	setne  al
c00269d7:	09 f0                	or     eax,esi
c00269d9:	01 d0                	add    eax,edx
c00269db:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269de:	e9 b6 00 00 00       	jmp    c0026a99 <__addsf3+0x14b>
c00269e3:	74 5c                	je     c0026a41 <__addsf3+0xf3>
c00269e5:	89 f1                	mov    ecx,esi
c00269e7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00269ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269ed:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00269f1:	75 14                	jne    c0026a07 <__addsf3+0xb9>
c00269f3:	85 d2                	test   edx,edx
c00269f5:	0f 84 4c 02 00 00    	je     c0026c47 <__addsf3+0x2f9>
c00269fb:	49                   	dec    ecx
c00269fc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269ff:	0f 84 94 00 00 00    	je     c0026a99 <__addsf3+0x14b>
c0026a05:	eb 12                	jmp    c0026a19 <__addsf3+0xcb>
c0026a07:	89 f0                	mov    eax,esi
c0026a09:	f7 d0                	not    eax
c0026a0b:	84 c0                	test   al,al
c0026a0d:	0f 84 34 02 00 00    	je     c0026c47 <__addsf3+0x2f9>
c0026a13:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a19:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a1c:	83 f9 1f             	cmp    ecx,0x1f
c0026a1f:	0f 8f 22 02 00 00    	jg     c0026c47 <__addsf3+0x2f9>
c0026a25:	89 d7                	mov    edi,edx
c0026a27:	d3 ef                	shr    edi,cl
c0026a29:	b8 20 00 00 00       	mov    eax,0x20
c0026a2e:	29 c8                	sub    eax,ecx
c0026a30:	89 c1                	mov    ecx,eax
c0026a32:	d3 e2                	shl    edx,cl
c0026a34:	31 c0                	xor    eax,eax
c0026a36:	85 d2                	test   edx,edx
c0026a38:	0f 95 c0             	setne  al
c0026a3b:	09 f8                	or     eax,edi
c0026a3d:	01 d8                	add    eax,ebx
c0026a3f:	eb 58                	jmp    c0026a99 <__addsf3+0x14b>
c0026a41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a44:	8d 70 01             	lea    esi,[eax+0x1]
c0026a47:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026a4d:	75 32                	jne    c0026a81 <__addsf3+0x133>
c0026a4f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a53:	75 1f                	jne    c0026a74 <__addsf3+0x126>
c0026a55:	85 d2                	test   edx,edx
c0026a57:	0f 84 e0 01 00 00    	je     c0026c3d <__addsf3+0x2ef>
c0026a5d:	85 db                	test   ebx,ebx
c0026a5f:	0f 84 e2 01 00 00    	je     c0026c47 <__addsf3+0x2f9>
c0026a65:	89 d0                	mov    eax,edx
c0026a67:	01 d8                	add    eax,ebx
c0026a69:	0f 89 a9 01 00 00    	jns    c0026c18 <__addsf3+0x2ca>
c0026a6f:	e9 9d 01 00 00       	jmp    c0026c11 <__addsf3+0x2c3>
c0026a74:	85 d2                	test   edx,edx
c0026a76:	0f 85 cb 01 00 00    	jne    c0026c47 <__addsf3+0x2f9>
c0026a7c:	e9 bc 01 00 00       	jmp    c0026c3d <__addsf3+0x2ef>
c0026a81:	31 c0                	xor    eax,eax
c0026a83:	89 f1                	mov    ecx,esi
c0026a85:	f7 d1                	not    ecx
c0026a87:	84 c9                	test   cl,cl
c0026a89:	0f 84 90 01 00 00    	je     c0026c1f <__addsf3+0x2d1>
c0026a8f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a92:	d1 e8                	shr    eax,1
c0026a94:	e9 86 01 00 00       	jmp    c0026c1f <__addsf3+0x2d1>
c0026a99:	85 c0                	test   eax,eax
c0026a9b:	0f 89 7e 01 00 00    	jns    c0026c1f <__addsf3+0x2d1>
c0026aa1:	46                   	inc    esi
c0026aa2:	89 f2                	mov    edx,esi
c0026aa4:	f7 d2                	not    edx
c0026aa6:	84 d2                	test   dl,dl
c0026aa8:	0f 84 6f 01 00 00    	je     c0026c1d <__addsf3+0x2cf>
c0026aae:	89 c2                	mov    edx,eax
c0026ab0:	83 e2 01             	and    edx,0x1
c0026ab3:	d1 e8                	shr    eax,1
c0026ab5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026aba:	09 d0                	or     eax,edx
c0026abc:	e9 5e 01 00 00       	jmp    c0026c1f <__addsf3+0x2d1>
c0026ac1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026ac5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026ac8:	89 f0                	mov    eax,esi
c0026aca:	0f b6 c0             	movzx  eax,al
c0026acd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ad0:	29 c1                	sub    ecx,eax
c0026ad2:	85 c9                	test   ecx,ecx
c0026ad4:	7e 55                	jle    c0026b2b <__addsf3+0x1dd>
c0026ad6:	85 c0                	test   eax,eax
c0026ad8:	75 11                	jne    c0026aeb <__addsf3+0x19d>
c0026ada:	85 db                	test   ebx,ebx
c0026adc:	0f 84 65 01 00 00    	je     c0026c47 <__addsf3+0x2f9>
c0026ae2:	49                   	dec    ecx
c0026ae3:	75 19                	jne    c0026afe <__addsf3+0x1b0>
c0026ae5:	89 d0                	mov    eax,edx
c0026ae7:	29 d8                	sub    eax,ebx
c0026ae9:	eb 38                	jmp    c0026b23 <__addsf3+0x1d5>
c0026aeb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026aee:	f7 d0                	not    eax
c0026af0:	84 c0                	test   al,al
c0026af2:	0f 84 4f 01 00 00    	je     c0026c47 <__addsf3+0x2f9>
c0026af8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026afe:	83 f9 1f             	cmp    ecx,0x1f
c0026b01:	0f 8f 40 01 00 00    	jg     c0026c47 <__addsf3+0x2f9>
c0026b07:	89 de                	mov    esi,ebx
c0026b09:	d3 ee                	shr    esi,cl
c0026b0b:	b8 20 00 00 00       	mov    eax,0x20
c0026b10:	29 c8                	sub    eax,ecx
c0026b12:	89 c1                	mov    ecx,eax
c0026b14:	d3 e3                	shl    ebx,cl
c0026b16:	31 c0                	xor    eax,eax
c0026b18:	85 db                	test   ebx,ebx
c0026b1a:	0f 95 c0             	setne  al
c0026b1d:	09 f0                	or     eax,esi
c0026b1f:	29 c2                	sub    edx,eax
c0026b21:	89 d0                	mov    eax,edx
c0026b23:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b26:	e9 af 00 00 00       	jmp    c0026bda <__addsf3+0x28c>
c0026b2b:	74 5c                	je     c0026b89 <__addsf3+0x23b>
c0026b2d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026b30:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b33:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b37:	75 14                	jne    c0026b4d <__addsf3+0x1ff>
c0026b39:	85 d2                	test   edx,edx
c0026b3b:	0f 84 06 01 00 00    	je     c0026c47 <__addsf3+0x2f9>
c0026b41:	48                   	dec    eax
c0026b42:	75 1b                	jne    c0026b5f <__addsf3+0x211>
c0026b44:	89 d8                	mov    eax,ebx
c0026b46:	29 d0                	sub    eax,edx
c0026b48:	e9 8d 00 00 00       	jmp    c0026bda <__addsf3+0x28c>
c0026b4d:	89 f1                	mov    ecx,esi
c0026b4f:	f7 d1                	not    ecx
c0026b51:	84 c9                	test   cl,cl
c0026b53:	0f 84 ee 00 00 00    	je     c0026c47 <__addsf3+0x2f9>
c0026b59:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b5f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b62:	83 f8 1f             	cmp    eax,0x1f
c0026b65:	0f 8f dc 00 00 00    	jg     c0026c47 <__addsf3+0x2f9>
c0026b6b:	89 d7                	mov    edi,edx
c0026b6d:	88 c1                	mov    cl,al
c0026b6f:	d3 ef                	shr    edi,cl
c0026b71:	b9 20 00 00 00       	mov    ecx,0x20
c0026b76:	29 c1                	sub    ecx,eax
c0026b78:	d3 e2                	shl    edx,cl
c0026b7a:	31 c0                	xor    eax,eax
c0026b7c:	85 d2                	test   edx,edx
c0026b7e:	0f 95 c0             	setne  al
c0026b81:	09 f8                	or     eax,edi
c0026b83:	29 c3                	sub    ebx,eax
c0026b85:	89 d8                	mov    eax,ebx
c0026b87:	eb 51                	jmp    c0026bda <__addsf3+0x28c>
c0026b89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b8c:	40                   	inc    eax
c0026b8d:	a8 fe                	test   al,0xfe
c0026b8f:	75 3d                	jne    c0026bce <__addsf3+0x280>
c0026b91:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b95:	0f 85 a7 00 00 00    	jne    c0026c42 <__addsf3+0x2f4>
c0026b9b:	85 d2                	test   edx,edx
c0026b9d:	75 12                	jne    c0026bb1 <__addsf3+0x263>
c0026b9f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ba2:	85 db                	test   ebx,ebx
c0026ba4:	0f 85 9d 00 00 00    	jne    c0026c47 <__addsf3+0x2f9>
c0026baa:	31 ff                	xor    edi,edi
c0026bac:	e9 96 00 00 00       	jmp    c0026c47 <__addsf3+0x2f9>
c0026bb1:	85 db                	test   ebx,ebx
c0026bb3:	0f 84 8e 00 00 00    	je     c0026c47 <__addsf3+0x2f9>
c0026bb9:	89 d0                	mov    eax,edx
c0026bbb:	29 d8                	sub    eax,ebx
c0026bbd:	79 06                	jns    c0026bc5 <__addsf3+0x277>
c0026bbf:	89 d8                	mov    eax,ebx
c0026bc1:	29 d0                	sub    eax,edx
c0026bc3:	eb 5a                	jmp    c0026c1f <__addsf3+0x2d1>
c0026bc5:	bf 00 00 00 00       	mov    edi,0x0
c0026bca:	74 7b                	je     c0026c47 <__addsf3+0x2f9>
c0026bcc:	eb 4a                	jmp    c0026c18 <__addsf3+0x2ca>
c0026bce:	89 d0                	mov    eax,edx
c0026bd0:	29 d8                	sub    eax,ebx
c0026bd2:	79 12                	jns    c0026be6 <__addsf3+0x298>
c0026bd4:	89 d8                	mov    eax,ebx
c0026bd6:	29 d0                	sub    eax,edx
c0026bd8:	eb 09                	jmp    c0026be3 <__addsf3+0x295>
c0026bda:	85 c0                	test   eax,eax
c0026bdc:	79 41                	jns    c0026c1f <__addsf3+0x2d1>
c0026bde:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026be3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026be6:	31 f6                	xor    esi,esi
c0026be8:	85 c0                	test   eax,eax
c0026bea:	74 33                	je     c0026c1f <__addsf3+0x2d1>
c0026bec:	0f bd c8             	bsr    ecx,eax
c0026bef:	83 f1 1f             	xor    ecx,0x1f
c0026bf2:	d3 e0                	shl    eax,cl
c0026bf4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026bf8:	39 ca                	cmp    edx,ecx
c0026bfa:	7f 10                	jg     c0026c0c <__addsf3+0x2be>
c0026bfc:	29 d1                	sub    ecx,edx
c0026bfe:	41                   	inc    ecx
c0026bff:	d3 e8                	shr    eax,cl
c0026c01:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c04:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026c0a:	eb 13                	jmp    c0026c1f <__addsf3+0x2d1>
c0026c0c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c0f:	29 ce                	sub    esi,ecx
c0026c11:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c16:	eb 07                	jmp    c0026c1f <__addsf3+0x2d1>
c0026c18:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c1b:	eb 02                	jmp    c0026c1f <__addsf3+0x2d1>
c0026c1d:	31 c0                	xor    eax,eax
c0026c1f:	89 c2                	mov    edx,eax
c0026c21:	c1 ea 08             	shr    edx,0x8
c0026c24:	a8 7f                	test   al,0x7f
c0026c26:	0f 95 c1             	setne  cl
c0026c29:	09 d1                	or     ecx,edx
c0026c2b:	83 e1 01             	and    ecx,0x1
c0026c2e:	c1 e8 07             	shr    eax,0x7
c0026c31:	21 c8                	and    eax,ecx
c0026c33:	c1 e6 17             	shl    esi,0x17
c0026c36:	09 d6                	or     esi,edx
c0026c38:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026c3b:	eb 0a                	jmp    c0026c47 <__addsf3+0x2f9>
c0026c3d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c40:	eb 05                	jmp    c0026c47 <__addsf3+0x2f9>
c0026c42:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026c47:	89 f8                	mov    eax,edi
c0026c49:	5a                   	pop    edx
c0026c4a:	59                   	pop    ecx
c0026c4b:	5b                   	pop    ebx
c0026c4c:	5e                   	pop    esi
c0026c4d:	5f                   	pop    edi
c0026c4e:	5d                   	pop    ebp
c0026c4f:	c3                   	ret    

c0026c50 <__subsf3>:
c0026c50:	55                   	push   ebp
c0026c51:	89 e5                	mov    ebp,esp
c0026c53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c56:	05 00 00 00 80       	add    eax,0x80000000
c0026c5b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026c5e:	5d                   	pop    ebp
c0026c5f:	e9 ea fc ff ff       	jmp    c002694e <__addsf3>

c0026c64 <__negsf2>:
c0026c64:	55                   	push   ebp
c0026c65:	89 e5                	mov    ebp,esp
c0026c67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c6a:	05 00 00 00 80       	add    eax,0x80000000
c0026c6f:	5d                   	pop    ebp
c0026c70:	c3                   	ret    

c0026c71 <__mulsf3>:
c0026c71:	55                   	push   ebp
c0026c72:	89 e5                	mov    ebp,esp
c0026c74:	57                   	push   edi
c0026c75:	56                   	push   esi
c0026c76:	53                   	push   ebx
c0026c77:	83 ec 1c             	sub    esp,0x1c
c0026c7a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026c7d:	89 f0                	mov    eax,esi
c0026c7f:	89 f1                	mov    ecx,esi
c0026c81:	c1 f9 17             	sar    ecx,0x17
c0026c84:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c87:	c1 e0 08             	shl    eax,0x8
c0026c8a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c8f:	89 c1                	mov    ecx,eax
c0026c91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c94:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c97:	89 c7                	mov    edi,eax
c0026c99:	c1 ff 17             	sar    edi,0x17
c0026c9c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026ca0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026ca3:	89 f8                	mov    eax,edi
c0026ca5:	0f b6 c0             	movzx  eax,al
c0026ca8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026cab:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026caf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026cb2:	42                   	inc    edx
c0026cb3:	80 e2 fe             	and    dl,0xfe
c0026cb6:	75 7b                	jne    c0026d33 <__mulsf3+0xc2>
c0026cb8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026cbc:	74 54                	je     c0026d12 <__mulsf3+0xa1>
c0026cbe:	85 c9                	test   ecx,ecx
c0026cc0:	0f 85 64 01 00 00    	jne    c0026e2a <__mulsf3+0x1b9>
c0026cc6:	8d 57 01             	lea    edx,[edi+0x1]
c0026cc9:	80 e2 fe             	and    dl,0xfe
c0026ccc:	75 1f                	jne    c0026ced <__mulsf3+0x7c>
c0026cce:	85 c0                	test   eax,eax
c0026cd0:	b8 00 00 00 00       	mov    eax,0x0
c0026cd5:	74 29                	je     c0026d00 <__mulsf3+0x8f>
c0026cd7:	53                   	push   ebx
c0026cd8:	53                   	push   ebx
c0026cd9:	50                   	push   eax
c0026cda:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cdd:	e8 96 05 00 00       	call   c0027278 <__nesf2>
c0026ce2:	83 c4 10             	add    esp,0x10
c0026ce5:	85 c0                	test   eax,eax
c0026ce7:	0f 85 3a 01 00 00    	jne    c0026e27 <__mulsf3+0x1b6>
c0026ced:	85 ff                	test   edi,edi
c0026cef:	0f 89 35 01 00 00    	jns    c0026e2a <__mulsf3+0x1b9>
c0026cf5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026cfb:	e9 2a 01 00 00       	jmp    c0026e2a <__mulsf3+0x1b9>
c0026d00:	51                   	push   ecx
c0026d01:	51                   	push   ecx
c0026d02:	50                   	push   eax
c0026d03:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d06:	e8 6d 05 00 00       	call   c0027278 <__nesf2>
c0026d0b:	83 c4 10             	add    esp,0x10
c0026d0e:	85 c0                	test   eax,eax
c0026d10:	eb 15                	jmp    c0026d27 <__mulsf3+0xb6>
c0026d12:	85 c9                	test   ecx,ecx
c0026d14:	74 0b                	je     c0026d21 <__mulsf3+0xb0>
c0026d16:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026d19:	01 c9                	add    ecx,ecx
c0026d1b:	78 16                	js     c0026d33 <__mulsf3+0xc2>
c0026d1d:	89 d3                	mov    ebx,edx
c0026d1f:	eb f5                	jmp    c0026d16 <__mulsf3+0xa5>
c0026d21:	89 f8                	mov    eax,edi
c0026d23:	f7 d0                	not    eax
c0026d25:	84 c0                	test   al,al
c0026d27:	75 c4                	jne    c0026ced <__mulsf3+0x7c>
c0026d29:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026d2e:	e9 f7 00 00 00       	jmp    c0026e2a <__mulsf3+0x1b9>
c0026d33:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d36:	c1 e6 08             	shl    esi,0x8
c0026d39:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026d3f:	8d 57 01             	lea    edx,[edi+0x1]
c0026d42:	80 e2 fe             	and    dl,0xfe
c0026d45:	75 63                	jne    c0026daa <__mulsf3+0x139>
c0026d47:	85 c0                	test   eax,eax
c0026d49:	74 2f                	je     c0026d7a <__mulsf3+0x109>
c0026d4b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d4f:	0f 89 d2 00 00 00    	jns    c0026e27 <__mulsf3+0x1b6>
c0026d55:	52                   	push   edx
c0026d56:	52                   	push   edx
c0026d57:	6a 00                	push   0x0
c0026d59:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d5c:	e8 dc 04 00 00       	call   c002723d <__eqsf2>
c0026d61:	83 c4 10             	add    esp,0x10
c0026d64:	85 c0                	test   eax,eax
c0026d66:	0f 85 bb 00 00 00    	jne    c0026e27 <__mulsf3+0x1b6>
c0026d6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d6f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026d75:	e9 b0 00 00 00       	jmp    c0026e2a <__mulsf3+0x1b9>
c0026d7a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d7d:	50                   	push   eax
c0026d7e:	50                   	push   eax
c0026d7f:	6a 00                	push   0x0
c0026d81:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d84:	e8 b4 04 00 00       	call   c002723d <__eqsf2>
c0026d89:	83 c4 10             	add    esp,0x10
c0026d8c:	85 c0                	test   eax,eax
c0026d8e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d91:	75 0c                	jne    c0026d9f <__mulsf3+0x12e>
c0026d93:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d97:	0f 89 8a 00 00 00    	jns    c0026e27 <__mulsf3+0x1b6>
c0026d9d:	eb cd                	jmp    c0026d6c <__mulsf3+0xfb>
c0026d9f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026da2:	01 f6                	add    esi,esi
c0026da4:	78 04                	js     c0026daa <__mulsf3+0x139>
c0026da6:	89 c3                	mov    ebx,eax
c0026da8:	eb f5                	jmp    c0026d9f <__mulsf3+0x12e>
c0026daa:	89 c8                	mov    eax,ecx
c0026dac:	0d 00 00 00 80       	or     eax,0x80000000
c0026db1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026db7:	f7 e6                	mul    esi
c0026db9:	85 c0                	test   eax,eax
c0026dbb:	0f 95 c0             	setne  al
c0026dbe:	0f b6 c0             	movzx  eax,al
c0026dc1:	09 c2                	or     edx,eax
c0026dc3:	78 03                	js     c0026dc8 <__mulsf3+0x157>
c0026dc5:	01 d2                	add    edx,edx
c0026dc7:	4b                   	dec    ebx
c0026dc8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026dce:	7f 22                	jg     c0026df2 <__mulsf3+0x181>
c0026dd0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026dd6:	85 db                	test   ebx,ebx
c0026dd8:	7f 23                	jg     c0026dfd <__mulsf3+0x18c>
c0026dda:	83 fb e9             	cmp    ebx,0xffffffe9
c0026ddd:	7c 1a                	jl     c0026df9 <__mulsf3+0x188>
c0026ddf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026de5:	b9 01 00 00 00       	mov    ecx,0x1
c0026dea:	29 d9                	sub    ecx,ebx
c0026dec:	d3 ea                	shr    edx,cl
c0026dee:	31 db                	xor    ebx,ebx
c0026df0:	eb 0b                	jmp    c0026dfd <__mulsf3+0x18c>
c0026df2:	bb ff 00 00 00       	mov    ebx,0xff
c0026df7:	eb 02                	jmp    c0026dfb <__mulsf3+0x18a>
c0026df9:	31 db                	xor    ebx,ebx
c0026dfb:	31 d2                	xor    edx,edx
c0026dfd:	89 d0                	mov    eax,edx
c0026dff:	c1 e8 08             	shr    eax,0x8
c0026e02:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026e05:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026e0b:	09 fb                	or     ebx,edi
c0026e0d:	c1 e3 17             	shl    ebx,0x17
c0026e10:	09 c3                	or     ebx,eax
c0026e12:	f6 c2 7f             	test   dl,0x7f
c0026e15:	0f 95 c1             	setne  cl
c0026e18:	09 c8                	or     eax,ecx
c0026e1a:	83 e0 01             	and    eax,0x1
c0026e1d:	c1 ea 07             	shr    edx,0x7
c0026e20:	21 c2                	and    edx,eax
c0026e22:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026e25:	eb 03                	jmp    c0026e2a <__mulsf3+0x1b9>
c0026e27:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026e2a:	89 f0                	mov    eax,esi
c0026e2c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e2f:	5b                   	pop    ebx
c0026e30:	5e                   	pop    esi
c0026e31:	5f                   	pop    edi
c0026e32:	5d                   	pop    ebp
c0026e33:	c3                   	ret    

c0026e34 <__divsf3>:
c0026e34:	55                   	push   ebp
c0026e35:	89 e5                	mov    ebp,esp
c0026e37:	57                   	push   edi
c0026e38:	56                   	push   esi
c0026e39:	53                   	push   ebx
c0026e3a:	83 ec 1c             	sub    esp,0x1c
c0026e3d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e40:	89 d8                	mov    eax,ebx
c0026e42:	89 d9                	mov    ecx,ebx
c0026e44:	c1 f9 17             	sar    ecx,0x17
c0026e47:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e4a:	c1 e0 08             	shl    eax,0x8
c0026e4d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e52:	89 c1                	mov    ecx,eax
c0026e54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e57:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e5a:	89 c7                	mov    edi,eax
c0026e5c:	c1 ff 17             	sar    edi,0x17
c0026e5f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e63:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e66:	89 f8                	mov    eax,edi
c0026e68:	0f b6 c0             	movzx  eax,al
c0026e6b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e6e:	29 c6                	sub    esi,eax
c0026e70:	83 c6 7f             	add    esi,0x7f
c0026e73:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e76:	42                   	inc    edx
c0026e77:	80 e2 fe             	and    dl,0xfe
c0026e7a:	0f 85 9c 00 00 00    	jne    c0026f1c <__divsf3+0xe8>
c0026e80:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e84:	74 33                	je     c0026eb9 <__divsf3+0x85>
c0026e86:	85 c9                	test   ecx,ecx
c0026e88:	0f 85 c7 01 00 00    	jne    c0027055 <__divsf3+0x221>
c0026e8e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e91:	80 e2 fe             	and    dl,0xfe
c0026e94:	75 2f                	jne    c0026ec5 <__divsf3+0x91>
c0026e96:	85 c0                	test   eax,eax
c0026e98:	74 2b                	je     c0026ec5 <__divsf3+0x91>
c0026e9a:	51                   	push   ecx
c0026e9b:	51                   	push   ecx
c0026e9c:	6a 00                	push   0x0
c0026e9e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ea1:	e8 d2 03 00 00       	call   c0027278 <__nesf2>
c0026ea6:	83 c4 10             	add    esp,0x10
c0026ea9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026eac:	85 c0                	test   eax,eax
c0026eae:	0f 85 a1 01 00 00    	jne    c0027055 <__divsf3+0x221>
c0026eb4:	e9 92 01 00 00       	jmp    c002704b <__divsf3+0x217>
c0026eb9:	85 c9                	test   ecx,ecx
c0026ebb:	75 1b                	jne    c0026ed8 <__divsf3+0xa4>
c0026ebd:	8d 57 01             	lea    edx,[edi+0x1]
c0026ec0:	80 e2 fe             	and    dl,0xfe
c0026ec3:	74 1e                	je     c0026ee3 <__divsf3+0xaf>
c0026ec5:	85 ff                	test   edi,edi
c0026ec7:	0f 89 88 01 00 00    	jns    c0027055 <__divsf3+0x221>
c0026ecd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026ed3:	e9 7d 01 00 00       	jmp    c0027055 <__divsf3+0x221>
c0026ed8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026edb:	01 c9                	add    ecx,ecx
c0026edd:	78 3d                	js     c0026f1c <__divsf3+0xe8>
c0026edf:	89 d6                	mov    esi,edx
c0026ee1:	eb f5                	jmp    c0026ed8 <__divsf3+0xa4>
c0026ee3:	85 c0                	test   eax,eax
c0026ee5:	b8 00 00 00 00       	mov    eax,0x0
c0026eea:	74 18                	je     c0026f04 <__divsf3+0xd0>
c0026eec:	52                   	push   edx
c0026eed:	52                   	push   edx
c0026eee:	50                   	push   eax
c0026eef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ef2:	e8 81 03 00 00       	call   c0027278 <__nesf2>
c0026ef7:	83 c4 10             	add    esp,0x10
c0026efa:	85 c0                	test   eax,eax
c0026efc:	0f 85 50 01 00 00    	jne    c0027052 <__divsf3+0x21e>
c0026f02:	eb c1                	jmp    c0026ec5 <__divsf3+0x91>
c0026f04:	56                   	push   esi
c0026f05:	56                   	push   esi
c0026f06:	50                   	push   eax
c0026f07:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f0a:	e8 69 03 00 00       	call   c0027278 <__nesf2>
c0026f0f:	83 c4 10             	add    esp,0x10
c0026f12:	85 c0                	test   eax,eax
c0026f14:	0f 84 31 01 00 00    	je     c002704b <__divsf3+0x217>
c0026f1a:	eb a9                	jmp    c0026ec5 <__divsf3+0x91>
c0026f1c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026f1f:	c1 e3 08             	shl    ebx,0x8
c0026f22:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026f28:	8d 57 01             	lea    edx,[edi+0x1]
c0026f2b:	80 e2 fe             	and    dl,0xfe
c0026f2e:	75 71                	jne    c0026fa1 <__divsf3+0x16d>
c0026f30:	85 c0                	test   eax,eax
c0026f32:	ba 00 00 00 00       	mov    edx,0x0
c0026f37:	74 2f                	je     c0026f68 <__divsf3+0x134>
c0026f39:	51                   	push   ecx
c0026f3a:	51                   	push   ecx
c0026f3b:	52                   	push   edx
c0026f3c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f3f:	e8 f9 02 00 00       	call   c002723d <__eqsf2>
c0026f44:	83 c4 10             	add    esp,0x10
c0026f47:	85 c0                	test   eax,eax
c0026f49:	0f 85 03 01 00 00    	jne    c0027052 <__divsf3+0x21e>
c0026f4f:	31 d2                	xor    edx,edx
c0026f51:	89 d3                	mov    ebx,edx
c0026f53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f56:	31 f8                	xor    eax,edi
c0026f58:	0f 89 f7 00 00 00    	jns    c0027055 <__divsf3+0x221>
c0026f5e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026f63:	e9 ed 00 00 00       	jmp    c0027055 <__divsf3+0x221>
c0026f68:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f6b:	50                   	push   eax
c0026f6c:	50                   	push   eax
c0026f6d:	52                   	push   edx
c0026f6e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f71:	e8 c7 02 00 00       	call   c002723d <__eqsf2>
c0026f76:	83 c4 10             	add    esp,0x10
c0026f79:	85 c0                	test   eax,eax
c0026f7b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f7e:	75 16                	jne    c0026f96 <__divsf3+0x162>
c0026f80:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f83:	31 fb                	xor    ebx,edi
c0026f85:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026f8b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026f91:	e9 bf 00 00 00       	jmp    c0027055 <__divsf3+0x221>
c0026f96:	8d 46 01             	lea    eax,[esi+0x1]
c0026f99:	01 db                	add    ebx,ebx
c0026f9b:	78 04                	js     c0026fa1 <__divsf3+0x16d>
c0026f9d:	89 c6                	mov    esi,eax
c0026f9f:	eb f5                	jmp    c0026f96 <__divsf3+0x162>
c0026fa1:	89 c8                	mov    eax,ecx
c0026fa3:	0d 00 00 00 80       	or     eax,0x80000000
c0026fa8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026fae:	31 d2                	xor    edx,edx
c0026fb0:	39 d8                	cmp    eax,ebx
c0026fb2:	72 07                	jb     c0026fbb <__divsf3+0x187>
c0026fb4:	29 d8                	sub    eax,ebx
c0026fb6:	ba 01 00 00 00       	mov    edx,0x1
c0026fbb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026fc2:	01 d2                	add    edx,edx
c0026fc4:	89 c1                	mov    ecx,eax
c0026fc6:	01 c0                	add    eax,eax
c0026fc8:	85 c9                	test   ecx,ecx
c0026fca:	78 04                	js     c0026fd0 <__divsf3+0x19c>
c0026fcc:	39 c3                	cmp    ebx,eax
c0026fce:	77 05                	ja     c0026fd5 <__divsf3+0x1a1>
c0026fd0:	29 d8                	sub    eax,ebx
c0026fd2:	83 ca 01             	or     edx,0x1
c0026fd5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026fd8:	75 e8                	jne    c0026fc2 <__divsf3+0x18e>
c0026fda:	85 c0                	test   eax,eax
c0026fdc:	0f 95 c0             	setne  al
c0026fdf:	0f b6 c0             	movzx  eax,al
c0026fe2:	c1 e2 06             	shl    edx,0x6
c0026fe5:	09 c2                	or     edx,eax
c0026fe7:	78 03                	js     c0026fec <__divsf3+0x1b8>
c0026fe9:	01 d2                	add    edx,edx
c0026feb:	4e                   	dec    esi
c0026fec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026ff2:	7f 22                	jg     c0027016 <__divsf3+0x1e2>
c0026ff4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026ffa:	85 f6                	test   esi,esi
c0026ffc:	7f 23                	jg     c0027021 <__divsf3+0x1ed>
c0026ffe:	83 fe e9             	cmp    esi,0xffffffe9
c0027001:	7c 1a                	jl     c002701d <__divsf3+0x1e9>
c0027003:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027009:	b9 01 00 00 00       	mov    ecx,0x1
c002700e:	29 f1                	sub    ecx,esi
c0027010:	d3 ea                	shr    edx,cl
c0027012:	31 f6                	xor    esi,esi
c0027014:	eb 0b                	jmp    c0027021 <__divsf3+0x1ed>
c0027016:	be ff 00 00 00       	mov    esi,0xff
c002701b:	eb 02                	jmp    c002701f <__divsf3+0x1eb>
c002701d:	31 f6                	xor    esi,esi
c002701f:	31 d2                	xor    edx,edx
c0027021:	89 d0                	mov    eax,edx
c0027023:	c1 e8 08             	shr    eax,0x8
c0027026:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027029:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002702f:	09 fe                	or     esi,edi
c0027031:	c1 e6 17             	shl    esi,0x17
c0027034:	09 c6                	or     esi,eax
c0027036:	f6 c2 7f             	test   dl,0x7f
c0027039:	0f 95 c1             	setne  cl
c002703c:	09 c8                	or     eax,ecx
c002703e:	83 e0 01             	and    eax,0x1
c0027041:	c1 ea 07             	shr    edx,0x7
c0027044:	21 c2                	and    edx,eax
c0027046:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027049:	eb 0a                	jmp    c0027055 <__divsf3+0x221>
c002704b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027050:	eb 03                	jmp    c0027055 <__divsf3+0x221>
c0027052:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027055:	89 d8                	mov    eax,ebx
c0027057:	8d 65 f4             	lea    esp,[ebp-0xc]
c002705a:	5b                   	pop    ebx
c002705b:	5e                   	pop    esi
c002705c:	5f                   	pop    edi
c002705d:	5d                   	pop    ebp
c002705e:	c3                   	ret    

c002705f <__floatsisf>:
c002705f:	55                   	push   ebp
c0027060:	89 e5                	mov    ebp,esp
c0027062:	53                   	push   ebx
c0027063:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027066:	85 d2                	test   edx,edx
c0027068:	7e 2b                	jle    c0027095 <__floatsisf+0x36>
c002706a:	0f bd ca             	bsr    ecx,edx
c002706d:	83 f1 1f             	xor    ecx,0x1f
c0027070:	d3 e2                	shl    edx,cl
c0027072:	89 d0                	mov    eax,edx
c0027074:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027079:	89 c3                	mov    ebx,eax
c002707b:	c1 eb 08             	shr    ebx,0x8
c002707e:	80 e2 7f             	and    dl,0x7f
c0027081:	0f 95 c2             	setne  dl
c0027084:	09 da                	or     edx,ebx
c0027086:	83 e2 01             	and    edx,0x1
c0027089:	c1 e8 07             	shr    eax,0x7
c002708c:	21 c2                	and    edx,eax
c002708e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027093:	eb 32                	jmp    c00270c7 <__floatsisf+0x68>
c0027095:	b8 00 00 00 00       	mov    eax,0x0
c002709a:	74 34                	je     c00270d0 <__floatsisf+0x71>
c002709c:	f7 da                	neg    edx
c002709e:	0f bd ca             	bsr    ecx,edx
c00270a1:	83 f1 1f             	xor    ecx,0x1f
c00270a4:	d3 e2                	shl    edx,cl
c00270a6:	89 d0                	mov    eax,edx
c00270a8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270ad:	89 c3                	mov    ebx,eax
c00270af:	c1 eb 08             	shr    ebx,0x8
c00270b2:	80 e2 7f             	and    dl,0x7f
c00270b5:	0f 95 c2             	setne  dl
c00270b8:	09 da                	or     edx,ebx
c00270ba:	83 e2 01             	and    edx,0x1
c00270bd:	c1 e8 07             	shr    eax,0x7
c00270c0:	21 c2                	and    edx,eax
c00270c2:	b8 9e 01 00 00       	mov    eax,0x19e
c00270c7:	29 c8                	sub    eax,ecx
c00270c9:	c1 e0 17             	shl    eax,0x17
c00270cc:	09 d8                	or     eax,ebx
c00270ce:	01 d0                	add    eax,edx
c00270d0:	5b                   	pop    ebx
c00270d1:	5d                   	pop    ebp
c00270d2:	c3                   	ret    

c00270d3 <__floatunsisf>:
c00270d3:	55                   	push   ebp
c00270d4:	89 e5                	mov    ebp,esp
c00270d6:	53                   	push   ebx
c00270d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270da:	31 c0                	xor    eax,eax
c00270dc:	85 d2                	test   edx,edx
c00270de:	74 32                	je     c0027112 <__floatunsisf+0x3f>
c00270e0:	0f bd ca             	bsr    ecx,edx
c00270e3:	83 f1 1f             	xor    ecx,0x1f
c00270e6:	d3 e2                	shl    edx,cl
c00270e8:	89 d0                	mov    eax,edx
c00270ea:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270ef:	89 c3                	mov    ebx,eax
c00270f1:	c1 eb 08             	shr    ebx,0x8
c00270f4:	80 e2 7f             	and    dl,0x7f
c00270f7:	0f 95 c2             	setne  dl
c00270fa:	09 da                	or     edx,ebx
c00270fc:	83 e2 01             	and    edx,0x1
c00270ff:	c1 e8 07             	shr    eax,0x7
c0027102:	21 c2                	and    edx,eax
c0027104:	b8 9e 00 00 00       	mov    eax,0x9e
c0027109:	29 c8                	sub    eax,ecx
c002710b:	c1 e0 17             	shl    eax,0x17
c002710e:	09 d8                	or     eax,ebx
c0027110:	01 d0                	add    eax,edx
c0027112:	5b                   	pop    ebx
c0027113:	5d                   	pop    ebp
c0027114:	c3                   	ret    

c0027115 <__fixsfsi>:
c0027115:	55                   	push   ebp
c0027116:	89 e5                	mov    ebp,esp
c0027118:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002711b:	89 d1                	mov    ecx,edx
c002711d:	c1 e1 08             	shl    ecx,0x8
c0027120:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027126:	c1 fa 17             	sar    edx,0x17
c0027129:	78 1c                	js     c0027147 <__fixsfsi+0x32>
c002712b:	83 ea 7f             	sub    edx,0x7f
c002712e:	31 c0                	xor    eax,eax
c0027130:	83 fa 1e             	cmp    edx,0x1e
c0027133:	77 40                	ja     c0027175 <__fixsfsi+0x60>
c0027135:	89 c8                	mov    eax,ecx
c0027137:	0d 00 00 00 80       	or     eax,0x80000000
c002713c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027141:	29 d1                	sub    ecx,edx
c0027143:	d3 e8                	shr    eax,cl
c0027145:	eb 2e                	jmp    c0027175 <__fixsfsi+0x60>
c0027147:	31 c0                	xor    eax,eax
c0027149:	81 c2 81 00 00 00    	add    edx,0x81
c002714f:	78 24                	js     c0027175 <__fixsfsi+0x60>
c0027151:	83 fa 1e             	cmp    edx,0x1e
c0027154:	7e 09                	jle    c002715f <__fixsfsi+0x4a>
c0027156:	83 fa 1f             	cmp    edx,0x1f
c0027159:	75 18                	jne    c0027173 <__fixsfsi+0x5e>
c002715b:	85 c9                	test   ecx,ecx
c002715d:	75 14                	jne    c0027173 <__fixsfsi+0x5e>
c002715f:	89 c8                	mov    eax,ecx
c0027161:	0d 00 00 00 80       	or     eax,0x80000000
c0027166:	b9 1f 00 00 00       	mov    ecx,0x1f
c002716b:	29 d1                	sub    ecx,edx
c002716d:	d3 e8                	shr    eax,cl
c002716f:	f7 d8                	neg    eax
c0027171:	eb 02                	jmp    c0027175 <__fixsfsi+0x60>
c0027173:	31 c0                	xor    eax,eax
c0027175:	5d                   	pop    ebp
c0027176:	c3                   	ret    

c0027177 <__fixunssfsi>:
c0027177:	55                   	push   ebp
c0027178:	89 e5                	mov    ebp,esp
c002717a:	53                   	push   ebx
c002717b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002717e:	89 d3                	mov    ebx,edx
c0027180:	c1 fb 17             	sar    ebx,0x17
c0027183:	83 eb 7f             	sub    ebx,0x7f
c0027186:	31 c0                	xor    eax,eax
c0027188:	83 fb 1f             	cmp    ebx,0x1f
c002718b:	77 18                	ja     c00271a5 <__fixunssfsi+0x2e>
c002718d:	89 d0                	mov    eax,edx
c002718f:	c1 e0 08             	shl    eax,0x8
c0027192:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027197:	0d 00 00 00 80       	or     eax,0x80000000
c002719c:	b9 1f 00 00 00       	mov    ecx,0x1f
c00271a1:	29 d9                	sub    ecx,ebx
c00271a3:	d3 e8                	shr    eax,cl
c00271a5:	5b                   	pop    ebx
c00271a6:	5d                   	pop    ebp
c00271a7:	c3                   	ret    

c00271a8 <__cmpsf2>:
c00271a8:	55                   	push   ebp
c00271a9:	89 e5                	mov    ebp,esp
c00271ab:	57                   	push   edi
c00271ac:	56                   	push   esi
c00271ad:	53                   	push   ebx
c00271ae:	83 ec 24             	sub    esp,0x24
c00271b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00271b7:	e8 4f 10 00 00       	call   c002820b <__truncdfsf2>
c00271bc:	5a                   	pop    edx
c00271bd:	59                   	pop    ecx
c00271be:	89 c3                	mov    ebx,eax
c00271c0:	c1 e8 17             	shr    eax,0x17
c00271c3:	0f b6 f0             	movzx  esi,al
c00271c6:	89 d8                	mov    eax,ebx
c00271c8:	c1 e8 1f             	shr    eax,0x1f
c00271cb:	31 c6                	xor    esi,eax
c00271cd:	c1 e3 08             	shl    ebx,0x8
c00271d0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00271d3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00271d6:	e8 30 10 00 00       	call   c002820b <__truncdfsf2>
c00271db:	83 c4 10             	add    esp,0x10
c00271de:	89 c1                	mov    ecx,eax
c00271e0:	c1 e9 17             	shr    ecx,0x17
c00271e3:	0f b6 c9             	movzx  ecx,cl
c00271e6:	89 c7                	mov    edi,eax
c00271e8:	c1 ef 1f             	shr    edi,0x1f
c00271eb:	89 ca                	mov    edx,ecx
c00271ed:	31 fa                	xor    edx,edi
c00271ef:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00271f2:	c1 e0 08             	shl    eax,0x8
c00271f5:	89 c2                	mov    edx,eax
c00271f7:	89 d8                	mov    eax,ebx
c00271f9:	09 d0                	or     eax,edx
c00271fb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027200:	09 f0                	or     eax,esi
c0027202:	75 08                	jne    c002720c <__cmpsf2+0x64>
c0027204:	31 c0                	xor    eax,eax
c0027206:	39 f9                	cmp    ecx,edi
c0027208:	75 0c                	jne    c0027216 <__cmpsf2+0x6e>
c002720a:	eb 29                	jmp    c0027235 <__cmpsf2+0x8d>
c002720c:	b8 01 00 00 00       	mov    eax,0x1
c0027211:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027214:	7f 1f                	jg     c0027235 <__cmpsf2+0x8d>
c0027216:	83 c8 ff             	or     eax,0xffffffff
c0027219:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002721c:	7c 17                	jl     c0027235 <__cmpsf2+0x8d>
c002721e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027224:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002722a:	b8 01 00 00 00       	mov    eax,0x1
c002722f:	39 d3                	cmp    ebx,edx
c0027231:	77 02                	ja     c0027235 <__cmpsf2+0x8d>
c0027233:	19 c0                	sbb    eax,eax
c0027235:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027238:	5b                   	pop    ebx
c0027239:	5e                   	pop    esi
c002723a:	5f                   	pop    edi
c002723b:	5d                   	pop    ebp
c002723c:	c3                   	ret    

c002723d <__eqsf2>:
c002723d:	55                   	push   ebp
c002723e:	89 e5                	mov    ebp,esp
c0027240:	83 ec 24             	sub    esp,0x24
c0027243:	6a 01                	push   0x1
c0027245:	83 ec 0c             	sub    esp,0xc
c0027248:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002724b:	e8 df 10 00 00       	call   c002832f <__extendsfdf2>
c0027250:	83 c4 10             	add    esp,0x10
c0027253:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027256:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027259:	52                   	push   edx
c002725a:	50                   	push   eax
c002725b:	50                   	push   eax
c002725c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002725f:	e8 cb 10 00 00       	call   c002832f <__extendsfdf2>
c0027264:	59                   	pop    ecx
c0027265:	59                   	pop    ecx
c0027266:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027269:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002726c:	52                   	push   edx
c002726d:	50                   	push   eax
c002726e:	e8 35 ff ff ff       	call   c00271a8 <__cmpsf2>
c0027273:	83 c4 20             	add    esp,0x20
c0027276:	c9                   	leave  
c0027277:	c3                   	ret    

c0027278 <__nesf2>:
c0027278:	eb c3                	jmp    c002723d <__eqsf2>

c002727a <__gtsf2>:
c002727a:	55                   	push   ebp
c002727b:	89 e5                	mov    ebp,esp
c002727d:	83 ec 24             	sub    esp,0x24
c0027280:	6a ff                	push   0xffffffff
c0027282:	83 ec 0c             	sub    esp,0xc
c0027285:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027288:	e8 a2 10 00 00       	call   c002832f <__extendsfdf2>
c002728d:	83 c4 10             	add    esp,0x10
c0027290:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027293:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027296:	52                   	push   edx
c0027297:	50                   	push   eax
c0027298:	50                   	push   eax
c0027299:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002729c:	e8 8e 10 00 00       	call   c002832f <__extendsfdf2>
c00272a1:	59                   	pop    ecx
c00272a2:	59                   	pop    ecx
c00272a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00272a6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00272a9:	52                   	push   edx
c00272aa:	50                   	push   eax
c00272ab:	e8 f8 fe ff ff       	call   c00271a8 <__cmpsf2>
c00272b0:	83 c4 20             	add    esp,0x20
c00272b3:	c9                   	leave  
c00272b4:	c3                   	ret    

c00272b5 <__gesf2>:
c00272b5:	eb c3                	jmp    c002727a <__gtsf2>

c00272b7 <__ltsf2>:
c00272b7:	eb 84                	jmp    c002723d <__eqsf2>

c00272b9 <__lesf2>:
c00272b9:	eb 82                	jmp    c002723d <__eqsf2>

c00272bb <__adddf3>:
c00272bb:	55                   	push   ebp
c00272bc:	89 e5                	mov    ebp,esp
c00272be:	57                   	push   edi
c00272bf:	56                   	push   esi
c00272c0:	53                   	push   ebx
c00272c1:	83 ec 24             	sub    esp,0x24
c00272c4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00272c7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00272ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00272cd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00272d0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00272d3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00272d6:	89 c8                	mov    eax,ecx
c00272d8:	89 ce                	mov    esi,ecx
c00272da:	c1 fe 14             	sar    esi,0x14
c00272dd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00272e0:	89 fb                	mov    ebx,edi
c00272e2:	89 fa                	mov    edx,edi
c00272e4:	c1 e2 0b             	shl    edx,0xb
c00272e7:	c1 e0 0b             	shl    eax,0xb
c00272ea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00272ef:	c1 eb 15             	shr    ebx,0x15
c00272f2:	09 d8                	or     eax,ebx
c00272f4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00272f7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00272fa:	c1 fe 14             	sar    esi,0x14
c00272fd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027300:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027303:	89 f3                	mov    ebx,esi
c0027305:	c1 e3 0b             	shl    ebx,0xb
c0027308:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002730b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002730e:	c1 e3 0b             	shl    ebx,0xb
c0027311:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027317:	c1 ee 15             	shr    esi,0x15
c002731a:	09 f3                	or     ebx,esi
c002731c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002731f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027322:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027325:	0f 88 5f 02 00 00    	js     c002758a <__adddf3+0x2cf>
c002732b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002732e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027331:	85 db                	test   ebx,ebx
c0027333:	0f 8e c7 00 00 00    	jle    c0027400 <__adddf3+0x145>
c0027339:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027340:	75 1a                	jne    c002735c <__adddf3+0xa1>
c0027342:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027345:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027348:	0f 84 b2 05 00 00    	je     c0027900 <__adddf3+0x645>
c002734e:	4b                   	dec    ebx
c002734f:	75 23                	jne    c0027374 <__adddf3+0xb9>
c0027351:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027354:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027357:	e9 99 00 00 00       	jmp    c00273f5 <__adddf3+0x13a>
c002735c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002735f:	f7 d6                	not    esi
c0027361:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027367:	0f 84 93 05 00 00    	je     c0027900 <__adddf3+0x645>
c002736d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027374:	83 fb 1f             	cmp    ebx,0x1f
c0027377:	7e 42                	jle    c00273bb <__adddf3+0x100>
c0027379:	83 fb 3f             	cmp    ebx,0x3f
c002737c:	0f 8f 7e 05 00 00    	jg     c0027900 <__adddf3+0x645>
c0027382:	83 e3 1f             	and    ebx,0x1f
c0027385:	89 d9                	mov    ecx,ebx
c0027387:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002738a:	d3 ef                	shr    edi,cl
c002738c:	31 db                	xor    ebx,ebx
c002738e:	85 c9                	test   ecx,ecx
c0027390:	74 15                	je     c00273a7 <__adddf3+0xec>
c0027392:	be 20 00 00 00       	mov    esi,0x20
c0027397:	29 ce                	sub    esi,ecx
c0027399:	89 f1                	mov    ecx,esi
c002739b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002739e:	d3 e6                	shl    esi,cl
c00273a0:	31 db                	xor    ebx,ebx
c00273a2:	85 f6                	test   esi,esi
c00273a4:	0f 95 c3             	setne  bl
c00273a7:	31 c9                	xor    ecx,ecx
c00273a9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00273ad:	0f 95 c1             	setne  cl
c00273b0:	09 cf                	or     edi,ecx
c00273b2:	09 fb                	or     ebx,edi
c00273b4:	01 da                	add    edx,ebx
c00273b6:	83 d0 00             	adc    eax,0x0
c00273b9:	eb 3a                	jmp    c00273f5 <__adddf3+0x13a>
c00273bb:	bf 20 00 00 00       	mov    edi,0x20
c00273c0:	29 df                	sub    edi,ebx
c00273c2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273c8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273cb:	d3 e6                	shl    esi,cl
c00273cd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273d0:	88 d9                	mov    cl,bl
c00273d2:	d3 ef                	shr    edi,cl
c00273d4:	09 fe                	or     esi,edi
c00273d6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273d9:	88 d9                	mov    cl,bl
c00273db:	d3 ef                	shr    edi,cl
c00273dd:	89 fb                	mov    ebx,edi
c00273df:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273e2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273e5:	d3 e7                	shl    edi,cl
c00273e7:	85 ff                	test   edi,edi
c00273e9:	0f 95 c1             	setne  cl
c00273ec:	0f b6 c9             	movzx  ecx,cl
c00273ef:	09 ce                	or     esi,ecx
c00273f1:	01 f2                	add    edx,esi
c00273f3:	11 d8                	adc    eax,ebx
c00273f5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273f8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273fb:	e9 52 01 00 00       	jmp    c0027552 <__adddf3+0x297>
c0027400:	0f 84 d5 00 00 00    	je     c00274db <__adddf3+0x220>
c0027406:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027409:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002740c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002740f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027412:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027419:	75 20                	jne    c002743b <__adddf3+0x180>
c002741b:	89 d6                	mov    esi,edx
c002741d:	09 c6                	or     esi,eax
c002741f:	0f 84 db 04 00 00    	je     c0027900 <__adddf3+0x645>
c0027425:	4b                   	dec    ebx
c0027426:	75 29                	jne    c0027451 <__adddf3+0x196>
c0027428:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002742b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002742e:	01 d1                	add    ecx,edx
c0027430:	11 c6                	adc    esi,eax
c0027432:	89 f0                	mov    eax,esi
c0027434:	89 ca                	mov    edx,ecx
c0027436:	e9 17 01 00 00       	jmp    c0027552 <__adddf3+0x297>
c002743b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002743e:	f7 d6                	not    esi
c0027440:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027446:	0f 84 b4 04 00 00    	je     c0027900 <__adddf3+0x645>
c002744c:	0d 00 00 00 80       	or     eax,0x80000000
c0027451:	83 fb 1f             	cmp    ebx,0x1f
c0027454:	7e 48                	jle    c002749e <__adddf3+0x1e3>
c0027456:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027459:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002745c:	83 fb 3f             	cmp    ebx,0x3f
c002745f:	0f 8f 9b 04 00 00    	jg     c0027900 <__adddf3+0x645>
c0027465:	83 e3 1f             	and    ebx,0x1f
c0027468:	89 d9                	mov    ecx,ebx
c002746a:	89 c7                	mov    edi,eax
c002746c:	d3 ef                	shr    edi,cl
c002746e:	31 db                	xor    ebx,ebx
c0027470:	85 c9                	test   ecx,ecx
c0027472:	74 12                	je     c0027486 <__adddf3+0x1cb>
c0027474:	be 20 00 00 00       	mov    esi,0x20
c0027479:	29 ce                	sub    esi,ecx
c002747b:	89 f1                	mov    ecx,esi
c002747d:	d3 e0                	shl    eax,cl
c002747f:	31 db                	xor    ebx,ebx
c0027481:	85 c0                	test   eax,eax
c0027483:	0f 95 c3             	setne  bl
c0027486:	31 c0                	xor    eax,eax
c0027488:	85 d2                	test   edx,edx
c002748a:	0f 95 c0             	setne  al
c002748d:	09 c7                	or     edi,eax
c002748f:	09 fb                	or     ebx,edi
c0027491:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027494:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027497:	01 da                	add    edx,ebx
c0027499:	83 d6 00             	adc    esi,0x0
c002749c:	eb 39                	jmp    c00274d7 <__adddf3+0x21c>
c002749e:	be 20 00 00 00       	mov    esi,0x20
c00274a3:	29 de                	sub    esi,ebx
c00274a5:	89 c7                	mov    edi,eax
c00274a7:	89 f1                	mov    ecx,esi
c00274a9:	d3 e7                	shl    edi,cl
c00274ab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00274ae:	89 d7                	mov    edi,edx
c00274b0:	88 d9                	mov    cl,bl
c00274b2:	d3 ef                	shr    edi,cl
c00274b4:	89 f9                	mov    ecx,edi
c00274b6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00274b9:	09 cf                	or     edi,ecx
c00274bb:	88 d9                	mov    cl,bl
c00274bd:	d3 e8                	shr    eax,cl
c00274bf:	89 f1                	mov    ecx,esi
c00274c1:	d3 e2                	shl    edx,cl
c00274c3:	85 d2                	test   edx,edx
c00274c5:	0f 95 c2             	setne  dl
c00274c8:	0f b6 d2             	movzx  edx,dl
c00274cb:	09 d7                	or     edi,edx
c00274cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274d0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274d3:	01 fa                	add    edx,edi
c00274d5:	11 c6                	adc    esi,eax
c00274d7:	89 f0                	mov    eax,esi
c00274d9:	eb 77                	jmp    c0027552 <__adddf3+0x297>
c00274db:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274de:	46                   	inc    esi
c00274df:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00274e2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00274e8:	75 41                	jne    c002752b <__adddf3+0x270>
c00274ea:	89 d3                	mov    ebx,edx
c00274ec:	09 c3                	or     ebx,eax
c00274ee:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00274f5:	75 27                	jne    c002751e <__adddf3+0x263>
c00274f7:	85 db                	test   ebx,ebx
c00274f9:	0f 84 fb 03 00 00    	je     c00278fa <__adddf3+0x63f>
c00274ff:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027502:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027505:	0f 84 f5 03 00 00    	je     c0027900 <__adddf3+0x645>
c002750b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002750e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027511:	85 c0                	test   eax,eax
c0027513:	0f 89 91 03 00 00    	jns    c00278aa <__adddf3+0x5ef>
c0027519:	e9 85 03 00 00       	jmp    c00278a3 <__adddf3+0x5e8>
c002751e:	85 db                	test   ebx,ebx
c0027520:	0f 85 da 03 00 00    	jne    c0027900 <__adddf3+0x645>
c0027526:	e9 cf 03 00 00       	jmp    c00278fa <__adddf3+0x63f>
c002752b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002752e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027531:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027534:	f7 d1                	not    ecx
c0027536:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002753c:	0f 84 70 03 00 00    	je     c00278b2 <__adddf3+0x5f7>
c0027542:	d1 ea                	shr    edx,1
c0027544:	89 c1                	mov    ecx,eax
c0027546:	c1 e1 1f             	shl    ecx,0x1f
c0027549:	09 ca                	or     edx,ecx
c002754b:	d1 e8                	shr    eax,1
c002754d:	e9 6f 03 00 00       	jmp    c00278c1 <__adddf3+0x606>
c0027552:	85 c0                	test   eax,eax
c0027554:	0f 89 67 03 00 00    	jns    c00278c1 <__adddf3+0x606>
c002755a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002755d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027560:	f7 d1                	not    ecx
c0027562:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027568:	0f 84 44 03 00 00    	je     c00278b2 <__adddf3+0x5f7>
c002756e:	89 d1                	mov    ecx,edx
c0027570:	d1 e9                	shr    ecx,1
c0027572:	83 e2 01             	and    edx,0x1
c0027575:	09 ca                	or     edx,ecx
c0027577:	89 c1                	mov    ecx,eax
c0027579:	c1 e1 1f             	shl    ecx,0x1f
c002757c:	09 ca                	or     edx,ecx
c002757e:	d1 e8                	shr    eax,1
c0027580:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027585:	e9 37 03 00 00       	jmp    c00278c1 <__adddf3+0x606>
c002758a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002758d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027593:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027596:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027599:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002759f:	29 de                	sub    esi,ebx
c00275a1:	85 f6                	test   esi,esi
c00275a3:	0f 8e bd 00 00 00    	jle    c0027666 <__adddf3+0x3ab>
c00275a9:	85 db                	test   ebx,ebx
c00275ab:	75 17                	jne    c00275c4 <__adddf3+0x309>
c00275ad:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00275b0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00275b3:	0f 84 47 03 00 00    	je     c0027900 <__adddf3+0x645>
c00275b9:	4e                   	dec    esi
c00275ba:	75 20                	jne    c00275dc <__adddf3+0x321>
c00275bc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00275bf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00275c2:	eb 5b                	jmp    c002761f <__adddf3+0x364>
c00275c4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275c7:	f7 d3                	not    ebx
c00275c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00275cf:	0f 84 2b 03 00 00    	je     c0027900 <__adddf3+0x645>
c00275d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275dc:	83 fe 1f             	cmp    esi,0x1f
c00275df:	7e 49                	jle    c002762a <__adddf3+0x36f>
c00275e1:	83 fe 3f             	cmp    esi,0x3f
c00275e4:	0f 8f 16 03 00 00    	jg     c0027900 <__adddf3+0x645>
c00275ea:	83 e6 1f             	and    esi,0x1f
c00275ed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275f0:	89 f1                	mov    ecx,esi
c00275f2:	d3 ef                	shr    edi,cl
c00275f4:	31 db                	xor    ebx,ebx
c00275f6:	85 f6                	test   esi,esi
c00275f8:	74 13                	je     c002760d <__adddf3+0x352>
c00275fa:	b9 20 00 00 00       	mov    ecx,0x20
c00275ff:	29 f1                	sub    ecx,esi
c0027601:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027604:	d3 e6                	shl    esi,cl
c0027606:	31 db                	xor    ebx,ebx
c0027608:	85 f6                	test   esi,esi
c002760a:	0f 95 c3             	setne  bl
c002760d:	31 c9                	xor    ecx,ecx
c002760f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027613:	0f 95 c1             	setne  cl
c0027616:	09 cf                	or     edi,ecx
c0027618:	09 fb                	or     ebx,edi
c002761a:	29 da                	sub    edx,ebx
c002761c:	83 d8 00             	sbb    eax,0x0
c002761f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027622:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027625:	e9 aa 01 00 00       	jmp    c00277d4 <__adddf3+0x519>
c002762a:	bf 20 00 00 00       	mov    edi,0x20
c002762f:	29 f7                	sub    edi,esi
c0027631:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027634:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027637:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002763a:	d3 e3                	shl    ebx,cl
c002763c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002763f:	89 f1                	mov    ecx,esi
c0027641:	d3 ef                	shr    edi,cl
c0027643:	09 fb                	or     ebx,edi
c0027645:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027648:	89 f1                	mov    ecx,esi
c002764a:	d3 ef                	shr    edi,cl
c002764c:	89 fe                	mov    esi,edi
c002764e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027651:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027654:	d3 e7                	shl    edi,cl
c0027656:	85 ff                	test   edi,edi
c0027658:	0f 95 c1             	setne  cl
c002765b:	0f b6 c9             	movzx  ecx,cl
c002765e:	09 cb                	or     ebx,ecx
c0027660:	29 da                	sub    edx,ebx
c0027662:	19 f0                	sbb    eax,esi
c0027664:	eb b9                	jmp    c002761f <__adddf3+0x364>
c0027666:	0f 84 cd 00 00 00    	je     c0027739 <__adddf3+0x47e>
c002766c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002766f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027672:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027675:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027679:	75 1b                	jne    c0027696 <__adddf3+0x3db>
c002767b:	89 d6                	mov    esi,edx
c002767d:	09 c6                	or     esi,eax
c002767f:	0f 84 7b 02 00 00    	je     c0027900 <__adddf3+0x645>
c0027685:	4b                   	dec    ebx
c0027686:	75 24                	jne    c00276ac <__adddf3+0x3f1>
c0027688:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002768b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002768e:	29 d1                	sub    ecx,edx
c0027690:	19 c6                	sbb    esi,eax
c0027692:	89 ca                	mov    edx,ecx
c0027694:	eb 61                	jmp    c00276f7 <__adddf3+0x43c>
c0027696:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027699:	f7 d6                	not    esi
c002769b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276a1:	0f 84 59 02 00 00    	je     c0027900 <__adddf3+0x645>
c00276a7:	0d 00 00 00 80       	or     eax,0x80000000
c00276ac:	83 fb 1f             	cmp    ebx,0x1f
c00276af:	7e 4d                	jle    c00276fe <__adddf3+0x443>
c00276b1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276b4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276b7:	83 fb 3f             	cmp    ebx,0x3f
c00276ba:	0f 8f 40 02 00 00    	jg     c0027900 <__adddf3+0x645>
c00276c0:	83 e3 1f             	and    ebx,0x1f
c00276c3:	89 d9                	mov    ecx,ebx
c00276c5:	89 c7                	mov    edi,eax
c00276c7:	d3 ef                	shr    edi,cl
c00276c9:	31 db                	xor    ebx,ebx
c00276cb:	85 c9                	test   ecx,ecx
c00276cd:	74 12                	je     c00276e1 <__adddf3+0x426>
c00276cf:	be 20 00 00 00       	mov    esi,0x20
c00276d4:	29 ce                	sub    esi,ecx
c00276d6:	89 f1                	mov    ecx,esi
c00276d8:	d3 e0                	shl    eax,cl
c00276da:	31 db                	xor    ebx,ebx
c00276dc:	85 c0                	test   eax,eax
c00276de:	0f 95 c3             	setne  bl
c00276e1:	31 c0                	xor    eax,eax
c00276e3:	85 d2                	test   edx,edx
c00276e5:	0f 95 c0             	setne  al
c00276e8:	09 c7                	or     edi,eax
c00276ea:	09 fb                	or     ebx,edi
c00276ec:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276ef:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276f2:	29 da                	sub    edx,ebx
c00276f4:	83 de 00             	sbb    esi,0x0
c00276f7:	89 f0                	mov    eax,esi
c00276f9:	e9 d6 00 00 00       	jmp    c00277d4 <__adddf3+0x519>
c00276fe:	be 20 00 00 00       	mov    esi,0x20
c0027703:	29 de                	sub    esi,ebx
c0027705:	89 c7                	mov    edi,eax
c0027707:	89 f1                	mov    ecx,esi
c0027709:	d3 e7                	shl    edi,cl
c002770b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002770e:	89 d7                	mov    edi,edx
c0027710:	88 d9                	mov    cl,bl
c0027712:	d3 ef                	shr    edi,cl
c0027714:	89 f9                	mov    ecx,edi
c0027716:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027719:	09 cf                	or     edi,ecx
c002771b:	88 d9                	mov    cl,bl
c002771d:	d3 e8                	shr    eax,cl
c002771f:	89 f1                	mov    ecx,esi
c0027721:	d3 e2                	shl    edx,cl
c0027723:	85 d2                	test   edx,edx
c0027725:	0f 95 c2             	setne  dl
c0027728:	0f b6 d2             	movzx  edx,dl
c002772b:	09 d7                	or     edi,edx
c002772d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027730:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027733:	29 fa                	sub    edx,edi
c0027735:	19 c6                	sbb    esi,eax
c0027737:	eb be                	jmp    c00276f7 <__adddf3+0x43c>
c0027739:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002773c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002773f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027745:	75 6a                	jne    c00277b1 <__adddf3+0x4f6>
c0027747:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002774b:	75 58                	jne    c00277a5 <__adddf3+0x4ea>
c002774d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027750:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027753:	89 d6                	mov    esi,edx
c0027755:	09 c6                	or     esi,eax
c0027757:	75 17                	jne    c0027770 <__adddf3+0x4b5>
c0027759:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002775c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002775f:	85 db                	test   ebx,ebx
c0027761:	0f 85 99 01 00 00    	jne    c0027900 <__adddf3+0x645>
c0027767:	31 ff                	xor    edi,edi
c0027769:	31 c9                	xor    ecx,ecx
c002776b:	e9 90 01 00 00       	jmp    c0027900 <__adddf3+0x645>
c0027770:	85 db                	test   ebx,ebx
c0027772:	0f 84 88 01 00 00    	je     c0027900 <__adddf3+0x645>
c0027778:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002777b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002777e:	85 c0                	test   eax,eax
c0027780:	79 10                	jns    c0027792 <__adddf3+0x4d7>
c0027782:	31 c9                	xor    ecx,ecx
c0027784:	f7 da                	neg    edx
c0027786:	0f 95 c1             	setne  cl
c0027789:	01 c8                	add    eax,ecx
c002778b:	f7 d8                	neg    eax
c002778d:	e9 2f 01 00 00       	jmp    c00278c1 <__adddf3+0x606>
c0027792:	31 ff                	xor    edi,edi
c0027794:	31 c9                	xor    ecx,ecx
c0027796:	89 c3                	mov    ebx,eax
c0027798:	09 d3                	or     ebx,edx
c002779a:	0f 84 60 01 00 00    	je     c0027900 <__adddf3+0x645>
c00277a0:	e9 05 01 00 00       	jmp    c00278aa <__adddf3+0x5ef>
c00277a5:	31 ff                	xor    edi,edi
c00277a7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00277ac:	e9 4f 01 00 00       	jmp    c0027900 <__adddf3+0x645>
c00277b1:	89 c1                	mov    ecx,eax
c00277b3:	89 d0                	mov    eax,edx
c00277b5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00277b8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00277bb:	89 ca                	mov    edx,ecx
c00277bd:	85 c9                	test   ecx,ecx
c00277bf:	79 2c                	jns    c00277ed <__adddf3+0x532>
c00277c1:	31 c9                	xor    ecx,ecx
c00277c3:	f7 d8                	neg    eax
c00277c5:	0f 95 c1             	setne  cl
c00277c8:	01 ca                	add    edx,ecx
c00277ca:	f7 da                	neg    edx
c00277cc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00277cf:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277d2:	eb 19                	jmp    c00277ed <__adddf3+0x532>
c00277d4:	85 c0                	test   eax,eax
c00277d6:	0f 89 e5 00 00 00    	jns    c00278c1 <__adddf3+0x606>
c00277dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277e1:	89 c1                	mov    ecx,eax
c00277e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00277e6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00277e9:	89 d0                	mov    eax,edx
c00277eb:	89 ca                	mov    edx,ecx
c00277ed:	85 d2                	test   edx,edx
c00277ef:	74 59                	je     c002784a <__adddf3+0x58f>
c00277f1:	0f bd da             	bsr    ebx,edx
c00277f4:	83 f3 1f             	xor    ebx,0x1f
c00277f7:	88 d9                	mov    cl,bl
c00277f9:	d3 e2                	shl    edx,cl
c00277fb:	bf 20 00 00 00       	mov    edi,0x20
c0027800:	89 f9                	mov    ecx,edi
c0027802:	29 d9                	sub    ecx,ebx
c0027804:	89 c6                	mov    esi,eax
c0027806:	d3 ee                	shr    esi,cl
c0027808:	09 d6                	or     esi,edx
c002780a:	88 d9                	mov    cl,bl
c002780c:	d3 e0                	shl    eax,cl
c002780e:	89 c2                	mov    edx,eax
c0027810:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027813:	25 ff 07 00 00       	and    eax,0x7ff
c0027818:	39 d8                	cmp    eax,ebx
c002781a:	7f 22                	jg     c002783e <__adddf3+0x583>
c002781c:	29 c3                	sub    ebx,eax
c002781e:	43                   	inc    ebx
c002781f:	88 d9                	mov    cl,bl
c0027821:	d3 ea                	shr    edx,cl
c0027823:	29 df                	sub    edi,ebx
c0027825:	89 f9                	mov    ecx,edi
c0027827:	89 f0                	mov    eax,esi
c0027829:	d3 e0                	shl    eax,cl
c002782b:	09 c2                	or     edx,eax
c002782d:	89 f0                	mov    eax,esi
c002782f:	88 d9                	mov    cl,bl
c0027831:	d3 e8                	shr    eax,cl
c0027833:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027836:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002783c:	eb 6f                	jmp    c00278ad <__adddf3+0x5f2>
c002783e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027841:	29 d8                	sub    eax,ebx
c0027843:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027846:	89 f0                	mov    eax,esi
c0027848:	eb 59                	jmp    c00278a3 <__adddf3+0x5e8>
c002784a:	85 c0                	test   eax,eax
c002784c:	74 6a                	je     c00278b8 <__adddf3+0x5fd>
c002784e:	0f bd c8             	bsr    ecx,eax
c0027851:	83 f1 1f             	xor    ecx,0x1f
c0027854:	d3 e0                	shl    eax,cl
c0027856:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027859:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002785f:	83 c1 20             	add    ecx,0x20
c0027862:	39 cb                	cmp    ebx,ecx
c0027864:	7f 35                	jg     c002789b <__adddf3+0x5e0>
c0027866:	29 d9                	sub    ecx,ebx
c0027868:	8d 71 01             	lea    esi,[ecx+0x1]
c002786b:	83 fe 1f             	cmp    esi,0x1f
c002786e:	7e 09                	jle    c0027879 <__adddf3+0x5be>
c0027870:	83 e9 1f             	sub    ecx,0x1f
c0027873:	d3 e8                	shr    eax,cl
c0027875:	89 c3                	mov    ebx,eax
c0027877:	eb 11                	jmp    c002788a <__adddf3+0x5cf>
c0027879:	b9 20 00 00 00       	mov    ecx,0x20
c002787e:	29 f1                	sub    ecx,esi
c0027880:	89 c3                	mov    ebx,eax
c0027882:	d3 e3                	shl    ebx,cl
c0027884:	89 f1                	mov    ecx,esi
c0027886:	d3 e8                	shr    eax,cl
c0027888:	89 c2                	mov    edx,eax
c002788a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002788d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027892:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027895:	89 d0                	mov    eax,edx
c0027897:	89 da                	mov    edx,ebx
c0027899:	eb 26                	jmp    c00278c1 <__adddf3+0x606>
c002789b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002789e:	29 cf                	sub    edi,ecx
c00278a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278a3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00278a8:	eb 17                	jmp    c00278c1 <__adddf3+0x606>
c00278aa:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278ad:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278b0:	eb 0f                	jmp    c00278c1 <__adddf3+0x606>
c00278b2:	31 d2                	xor    edx,edx
c00278b4:	31 c0                	xor    eax,eax
c00278b6:	eb 09                	jmp    c00278c1 <__adddf3+0x606>
c00278b8:	89 c2                	mov    edx,eax
c00278ba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00278c1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278c4:	c1 e1 14             	shl    ecx,0x14
c00278c7:	89 c3                	mov    ebx,eax
c00278c9:	c1 eb 0b             	shr    ebx,0xb
c00278cc:	09 d9                	or     ecx,ebx
c00278ce:	89 d3                	mov    ebx,edx
c00278d0:	c1 eb 0b             	shr    ebx,0xb
c00278d3:	c1 e0 15             	shl    eax,0x15
c00278d6:	09 d8                	or     eax,ebx
c00278d8:	89 c7                	mov    edi,eax
c00278da:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00278e0:	0f 95 c0             	setne  al
c00278e3:	89 c6                	mov    esi,eax
c00278e5:	09 f3                	or     ebx,esi
c00278e7:	83 e3 01             	and    ebx,0x1
c00278ea:	c1 ea 0a             	shr    edx,0xa
c00278ed:	21 da                	and    edx,ebx
c00278ef:	89 f8                	mov    eax,edi
c00278f1:	01 d0                	add    eax,edx
c00278f3:	83 d1 00             	adc    ecx,0x0
c00278f6:	89 c7                	mov    edi,eax
c00278f8:	eb 06                	jmp    c0027900 <__adddf3+0x645>
c00278fa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278fd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027900:	89 f8                	mov    eax,edi
c0027902:	89 ca                	mov    edx,ecx
c0027904:	83 c4 24             	add    esp,0x24
c0027907:	5b                   	pop    ebx
c0027908:	5e                   	pop    esi
c0027909:	5f                   	pop    edi
c002790a:	5d                   	pop    ebp
c002790b:	c3                   	ret    

c002790c <__subdf3>:
c002790c:	55                   	push   ebp
c002790d:	89 e5                	mov    ebp,esp
c002790f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027912:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027915:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002791b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002791e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027921:	5d                   	pop    ebp
c0027922:	e9 94 f9 ff ff       	jmp    c00272bb <__adddf3>

c0027927 <__negdf2>:
c0027927:	55                   	push   ebp
c0027928:	89 e5                	mov    ebp,esp
c002792a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002792d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027930:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027936:	5d                   	pop    ebp
c0027937:	c3                   	ret    

c0027938 <__muldf3>:
c0027938:	55                   	push   ebp
c0027939:	89 e5                	mov    ebp,esp
c002793b:	57                   	push   edi
c002793c:	56                   	push   esi
c002793d:	53                   	push   ebx
c002793e:	83 ec 24             	sub    esp,0x24
c0027941:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027944:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027947:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002794a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002794d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027950:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027953:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027956:	89 c8                	mov    eax,ecx
c0027958:	c1 f8 14             	sar    eax,0x14
c002795b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002795e:	89 f8                	mov    eax,edi
c0027960:	89 fb                	mov    ebx,edi
c0027962:	c1 e3 0b             	shl    ebx,0xb
c0027965:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027968:	c1 e1 0b             	shl    ecx,0xb
c002796b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027971:	c1 e8 15             	shr    eax,0x15
c0027974:	09 c1                	or     ecx,eax
c0027976:	89 d6                	mov    esi,edx
c0027978:	89 d0                	mov    eax,edx
c002797a:	c1 f8 14             	sar    eax,0x14
c002797d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027980:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027983:	89 c3                	mov    ebx,eax
c0027985:	c1 e3 0b             	shl    ebx,0xb
c0027988:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002798b:	c1 e6 0b             	shl    esi,0xb
c002798e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027994:	c1 e8 15             	shr    eax,0x15
c0027997:	09 c6                	or     esi,eax
c0027999:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002799c:	25 ff 07 00 00       	and    eax,0x7ff
c00279a1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00279a4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279a7:	25 ff 07 00 00       	and    eax,0x7ff
c00279ac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00279af:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00279b2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00279b5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00279bc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00279bf:	40                   	inc    eax
c00279c0:	a9 fe 07 00 00       	test   eax,0x7fe
c00279c5:	0f 85 8d 00 00 00    	jne    c0027a58 <__muldf3+0x120>
c00279cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279ce:	09 c8                	or     eax,ecx
c00279d0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00279d4:	74 44                	je     c0027a1a <__muldf3+0xe2>
c00279d6:	85 c0                	test   eax,eax
c00279d8:	0f 85 31 02 00 00    	jne    c0027c0f <__muldf3+0x2d7>
c00279de:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279e1:	40                   	inc    eax
c00279e2:	a9 fe 07 00 00       	test   eax,0x7fe
c00279e7:	75 13                	jne    c00279fc <__muldf3+0xc4>
c00279e9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279ec:	09 f1                	or     ecx,esi
c00279ee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279f2:	74 22                	je     c0027a16 <__muldf3+0xde>
c00279f4:	85 c9                	test   ecx,ecx
c00279f6:	0f 85 0d 02 00 00    	jne    c0027c09 <__muldf3+0x2d1>
c00279fc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027a00:	0f 89 09 02 00 00    	jns    c0027c0f <__muldf3+0x2d7>
c0027a06:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a09:	05 00 00 00 80       	add    eax,0x80000000
c0027a0e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a11:	e9 f9 01 00 00       	jmp    c0027c0f <__muldf3+0x2d7>
c0027a16:	85 c9                	test   ecx,ecx
c0027a18:	eb 2e                	jmp    c0027a48 <__muldf3+0x110>
c0027a1a:	85 c0                	test   eax,eax
c0027a1c:	74 20                	je     c0027a3e <__muldf3+0x106>
c0027a1e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027a21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a24:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a27:	c1 ef 1f             	shr    edi,0x1f
c0027a2a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027a2d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027a30:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a33:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a36:	09 f9                	or     ecx,edi
c0027a38:	78 1e                	js     c0027a58 <__muldf3+0x120>
c0027a3a:	89 c3                	mov    ebx,eax
c0027a3c:	eb e0                	jmp    c0027a1e <__muldf3+0xe6>
c0027a3e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a41:	f7 d0                	not    eax
c0027a43:	a9 ff 07 00 00       	test   eax,0x7ff
c0027a48:	75 b2                	jne    c00279fc <__muldf3+0xc4>
c0027a4a:	31 ff                	xor    edi,edi
c0027a4c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027a53:	e9 b7 01 00 00       	jmp    c0027c0f <__muldf3+0x2d7>
c0027a58:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a5b:	40                   	inc    eax
c0027a5c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a61:	75 57                	jne    c0027aba <__muldf3+0x182>
c0027a63:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027a66:	09 f0                	or     eax,esi
c0027a68:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a6c:	74 23                	je     c0027a91 <__muldf3+0x159>
c0027a6e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a72:	0f 89 91 01 00 00    	jns    c0027c09 <__muldf3+0x2d1>
c0027a78:	85 c0                	test   eax,eax
c0027a7a:	0f 85 89 01 00 00    	jne    c0027c09 <__muldf3+0x2d1>
c0027a80:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a83:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027a89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a8c:	e9 7e 01 00 00       	jmp    c0027c0f <__muldf3+0x2d7>
c0027a91:	85 c0                	test   eax,eax
c0027a93:	75 0c                	jne    c0027aa1 <__muldf3+0x169>
c0027a95:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a99:	0f 89 6a 01 00 00    	jns    c0027c09 <__muldf3+0x2d1>
c0027a9f:	eb df                	jmp    c0027a80 <__muldf3+0x148>
c0027aa1:	01 f6                	add    esi,esi
c0027aa3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027aa6:	c1 ea 1f             	shr    edx,0x1f
c0027aa9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027aac:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027aaf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ab2:	09 d6                	or     esi,edx
c0027ab4:	78 04                	js     c0027aba <__muldf3+0x182>
c0027ab6:	89 c3                	mov    ebx,eax
c0027ab8:	eb e7                	jmp    c0027aa1 <__muldf3+0x169>
c0027aba:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027ac0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ac6:	89 c8                	mov    eax,ecx
c0027ac8:	f7 e6                	mul    esi
c0027aca:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027acd:	89 c7                	mov    edi,eax
c0027acf:	89 c8                	mov    eax,ecx
c0027ad1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ad4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027ad7:	89 c1                	mov    ecx,eax
c0027ad9:	89 f0                	mov    eax,esi
c0027adb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027ade:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027ae1:	89 c6                	mov    esi,eax
c0027ae3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ae6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ae9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027aec:	31 c0                	xor    eax,eax
c0027aee:	01 f1                	add    ecx,esi
c0027af0:	0f 92 c0             	setb   al
c0027af3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027af6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027af9:	83 d6 00             	adc    esi,0x0
c0027afc:	01 c7                	add    edi,eax
c0027afe:	83 d6 00             	adc    esi,0x0
c0027b01:	01 ca                	add    edx,ecx
c0027b03:	0f 92 c1             	setb   cl
c0027b06:	0f b6 c9             	movzx  ecx,cl
c0027b09:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027b0c:	83 d6 00             	adc    esi,0x0
c0027b0f:	01 cf                	add    edi,ecx
c0027b11:	83 d6 00             	adc    esi,0x0
c0027b14:	31 c9                	xor    ecx,ecx
c0027b16:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027b19:	0f 95 c1             	setne  cl
c0027b1c:	09 cf                	or     edi,ecx
c0027b1e:	85 f6                	test   esi,esi
c0027b20:	78 0c                	js     c0027b2e <__muldf3+0x1f6>
c0027b22:	01 f6                	add    esi,esi
c0027b24:	89 f8                	mov    eax,edi
c0027b26:	c1 e8 1f             	shr    eax,0x1f
c0027b29:	09 c6                	or     esi,eax
c0027b2b:	01 ff                	add    edi,edi
c0027b2d:	4b                   	dec    ebx
c0027b2e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027b34:	0f 8f 85 00 00 00    	jg     c0027bbf <__muldf3+0x287>
c0027b3a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027b40:	85 db                	test   ebx,ebx
c0027b42:	0f 8f 84 00 00 00    	jg     c0027bcc <__muldf3+0x294>
c0027b48:	83 fb cc             	cmp    ebx,0xffffffcc
c0027b4b:	7c 79                	jl     c0027bc6 <__muldf3+0x28e>
c0027b4d:	ba 01 00 00 00       	mov    edx,0x1
c0027b52:	29 da                	sub    edx,ebx
c0027b54:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b5a:	83 fa 1f             	cmp    edx,0x1f
c0027b5d:	7e 30                	jle    c0027b8f <__muldf3+0x257>
c0027b5f:	83 fa 20             	cmp    edx,0x20
c0027b62:	75 0b                	jne    c0027b6f <__muldf3+0x237>
c0027b64:	31 c0                	xor    eax,eax
c0027b66:	85 ff                	test   edi,edi
c0027b68:	0f 95 c0             	setne  al
c0027b6b:	89 c7                	mov    edi,eax
c0027b6d:	eb 1a                	jmp    c0027b89 <__muldf3+0x251>
c0027b6f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027b72:	89 f0                	mov    eax,esi
c0027b74:	d3 e0                	shl    eax,cl
c0027b76:	09 f8                	or     eax,edi
c0027b78:	0f 95 c0             	setne  al
c0027b7b:	0f b6 c0             	movzx  eax,al
c0027b7e:	89 c7                	mov    edi,eax
c0027b80:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027b85:	29 d9                	sub    ecx,ebx
c0027b87:	d3 ee                	shr    esi,cl
c0027b89:	09 f7                	or     edi,esi
c0027b8b:	31 db                	xor    ebx,ebx
c0027b8d:	eb 3b                	jmp    c0027bca <__muldf3+0x292>
c0027b8f:	83 c3 1f             	add    ebx,0x1f
c0027b92:	89 f0                	mov    eax,esi
c0027b94:	88 d9                	mov    cl,bl
c0027b96:	d3 e0                	shl    eax,cl
c0027b98:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b9b:	89 f8                	mov    eax,edi
c0027b9d:	88 d1                	mov    cl,dl
c0027b9f:	d3 e8                	shr    eax,cl
c0027ba1:	89 c1                	mov    ecx,eax
c0027ba3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ba6:	09 c8                	or     eax,ecx
c0027ba8:	88 d9                	mov    cl,bl
c0027baa:	d3 e7                	shl    edi,cl
c0027bac:	31 db                	xor    ebx,ebx
c0027bae:	85 ff                	test   edi,edi
c0027bb0:	0f 95 c3             	setne  bl
c0027bb3:	89 df                	mov    edi,ebx
c0027bb5:	09 c7                	or     edi,eax
c0027bb7:	88 d1                	mov    cl,dl
c0027bb9:	d3 ee                	shr    esi,cl
c0027bbb:	31 db                	xor    ebx,ebx
c0027bbd:	eb 0d                	jmp    c0027bcc <__muldf3+0x294>
c0027bbf:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027bc4:	eb 02                	jmp    c0027bc8 <__muldf3+0x290>
c0027bc6:	31 db                	xor    ebx,ebx
c0027bc8:	31 ff                	xor    edi,edi
c0027bca:	31 f6                	xor    esi,esi
c0027bcc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bcf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027bd2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bd7:	09 c3                	or     ebx,eax
c0027bd9:	c1 e3 14             	shl    ebx,0x14
c0027bdc:	89 f0                	mov    eax,esi
c0027bde:	c1 e8 0b             	shr    eax,0xb
c0027be1:	09 c3                	or     ebx,eax
c0027be3:	89 f8                	mov    eax,edi
c0027be5:	c1 e8 0b             	shr    eax,0xb
c0027be8:	c1 e6 15             	shl    esi,0x15
c0027beb:	09 c6                	or     esi,eax
c0027bed:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027bf3:	0f 95 c1             	setne  cl
c0027bf6:	09 c8                	or     eax,ecx
c0027bf8:	83 e0 01             	and    eax,0x1
c0027bfb:	c1 ef 0a             	shr    edi,0xa
c0027bfe:	21 c7                	and    edi,eax
c0027c00:	01 f7                	add    edi,esi
c0027c02:	83 d3 00             	adc    ebx,0x0
c0027c05:	89 da                	mov    edx,ebx
c0027c07:	eb 03                	jmp    c0027c0c <__muldf3+0x2d4>
c0027c09:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027c0c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027c0f:	89 f8                	mov    eax,edi
c0027c11:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027c14:	83 c4 24             	add    esp,0x24
c0027c17:	5b                   	pop    ebx
c0027c18:	5e                   	pop    esi
c0027c19:	5f                   	pop    edi
c0027c1a:	5d                   	pop    ebp
c0027c1b:	c3                   	ret    

c0027c1c <__divdf3>:
c0027c1c:	55                   	push   ebp
c0027c1d:	89 e5                	mov    ebp,esp
c0027c1f:	57                   	push   edi
c0027c20:	56                   	push   esi
c0027c21:	53                   	push   ebx
c0027c22:	83 ec 2c             	sub    esp,0x2c
c0027c25:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c28:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c2b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c2e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c31:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027c34:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c37:	89 ce                	mov    esi,ecx
c0027c39:	89 c8                	mov    eax,ecx
c0027c3b:	c1 f8 14             	sar    eax,0x14
c0027c3e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c41:	89 f8                	mov    eax,edi
c0027c43:	89 fb                	mov    ebx,edi
c0027c45:	c1 e3 0b             	shl    ebx,0xb
c0027c48:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027c4b:	c1 e6 0b             	shl    esi,0xb
c0027c4e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c54:	c1 e8 15             	shr    eax,0x15
c0027c57:	09 c6                	or     esi,eax
c0027c59:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027c5c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c5f:	89 c2                	mov    edx,eax
c0027c61:	c1 fa 14             	sar    edx,0x14
c0027c64:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c67:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c6a:	89 de                	mov    esi,ebx
c0027c6c:	c1 e6 0b             	shl    esi,0xb
c0027c6f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027c72:	c1 e0 0b             	shl    eax,0xb
c0027c75:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c7a:	c1 eb 15             	shr    ebx,0x15
c0027c7d:	09 d8                	or     eax,ebx
c0027c7f:	89 c2                	mov    edx,eax
c0027c81:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c84:	25 ff 07 00 00       	and    eax,0x7ff
c0027c89:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027c8c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c8f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c95:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027c98:	29 d8                	sub    eax,ebx
c0027c9a:	05 ff 03 00 00       	add    eax,0x3ff
c0027c9f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027ca2:	46                   	inc    esi
c0027ca3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ca9:	0f 85 a5 00 00 00    	jne    c0027d54 <__divdf3+0x138>
c0027caf:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027cb2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027cb5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027cb9:	74 2a                	je     c0027ce5 <__divdf3+0xc9>
c0027cbb:	85 f6                	test   esi,esi
c0027cbd:	0f 85 cc 02 00 00    	jne    c0027f8f <__divdf3+0x373>
c0027cc3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cc6:	40                   	inc    eax
c0027cc7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ccc:	75 26                	jne    c0027cf4 <__divdf3+0xd8>
c0027cce:	85 db                	test   ebx,ebx
c0027cd0:	74 22                	je     c0027cf4 <__divdf3+0xd8>
c0027cd2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027cd5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027cd8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cdb:	09 d0                	or     eax,edx
c0027cdd:	0f 85 ac 02 00 00    	jne    c0027f8f <__divdf3+0x373>
c0027ce3:	eb 63                	jmp    c0027d48 <__divdf3+0x12c>
c0027ce5:	85 f6                	test   esi,esi
c0027ce7:	75 22                	jne    c0027d0b <__divdf3+0xef>
c0027ce9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cec:	40                   	inc    eax
c0027ced:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cf2:	74 36                	je     c0027d2a <__divdf3+0x10e>
c0027cf4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027cf8:	0f 89 91 02 00 00    	jns    c0027f8f <__divdf3+0x373>
c0027cfe:	89 f8                	mov    eax,edi
c0027d00:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027d06:	e9 80 02 00 00       	jmp    c0027f8b <__divdf3+0x36f>
c0027d0b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d0e:	01 f6                	add    esi,esi
c0027d10:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027d13:	c1 ef 1f             	shr    edi,0x1f
c0027d16:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d19:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027d1c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027d1f:	09 f7                	or     edi,esi
c0027d21:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027d24:	78 2e                	js     c0027d54 <__divdf3+0x138>
c0027d26:	89 c8                	mov    eax,ecx
c0027d28:	eb e1                	jmp    c0027d0b <__divdf3+0xef>
c0027d2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d2d:	09 d0                	or     eax,edx
c0027d2f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d33:	74 0f                	je     c0027d44 <__divdf3+0x128>
c0027d35:	85 c0                	test   eax,eax
c0027d37:	74 bb                	je     c0027cf4 <__divdf3+0xd8>
c0027d39:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d3c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d3f:	e9 4b 02 00 00       	jmp    c0027f8f <__divdf3+0x373>
c0027d44:	85 c0                	test   eax,eax
c0027d46:	75 ac                	jne    c0027cf4 <__divdf3+0xd8>
c0027d48:	31 ff                	xor    edi,edi
c0027d4a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027d4f:	e9 3b 02 00 00       	jmp    c0027f8f <__divdf3+0x373>
c0027d54:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d57:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027d5a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027d60:	75 6b                	jne    c0027dcd <__divdf3+0x1b1>
c0027d62:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d65:	09 d6                	or     esi,edx
c0027d67:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d6b:	74 28                	je     c0027d95 <__divdf3+0x179>
c0027d6d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d70:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d73:	85 f6                	test   esi,esi
c0027d75:	0f 85 14 02 00 00    	jne    c0027f8f <__divdf3+0x373>
c0027d7b:	31 ff                	xor    edi,edi
c0027d7d:	31 c9                	xor    ecx,ecx
c0027d7f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d82:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d85:	0f 89 04 02 00 00    	jns    c0027f8f <__divdf3+0x373>
c0027d8b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027d90:	e9 fa 01 00 00       	jmp    c0027f8f <__divdf3+0x373>
c0027d95:	85 f6                	test   esi,esi
c0027d97:	75 1b                	jne    c0027db4 <__divdf3+0x198>
c0027d99:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d9c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d9f:	25 00 00 00 80       	and    eax,0x80000000
c0027da4:	31 c9                	xor    ecx,ecx
c0027da6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027dab:	89 cf                	mov    edi,ecx
c0027dad:	89 c1                	mov    ecx,eax
c0027daf:	e9 db 01 00 00       	jmp    c0027f8f <__divdf3+0x373>
c0027db4:	01 d2                	add    edx,edx
c0027db6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027db9:	c1 eb 1f             	shr    ebx,0x1f
c0027dbc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027dbf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027dc2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027dc5:	09 da                	or     edx,ebx
c0027dc7:	78 04                	js     c0027dcd <__divdf3+0x1b1>
c0027dc9:	89 c8                	mov    eax,ecx
c0027dcb:	eb e7                	jmp    c0027db4 <__divdf3+0x198>
c0027dcd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027dd0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dd6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ddc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027ddf:	39 d6                	cmp    esi,edx
c0027de1:	77 0d                	ja     c0027df0 <__divdf3+0x1d4>
c0027de3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027de6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027de9:	72 1b                	jb     c0027e06 <__divdf3+0x1ea>
c0027deb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027dee:	75 16                	jne    c0027e06 <__divdf3+0x1ea>
c0027df0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027df3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027df6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027df9:	83 de 00             	sbb    esi,0x0
c0027dfc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027dff:	ba 01 00 00 00       	mov    edx,0x1
c0027e04:	eb 02                	jmp    c0027e08 <__divdf3+0x1ec>
c0027e06:	31 d2                	xor    edx,edx
c0027e08:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027e0f:	31 ff                	xor    edi,edi
c0027e11:	01 ff                	add    edi,edi
c0027e13:	89 d1                	mov    ecx,edx
c0027e15:	c1 e9 1f             	shr    ecx,0x1f
c0027e18:	09 cf                	or     edi,ecx
c0027e1a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027e1d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027e20:	89 da                	mov    edx,ebx
c0027e22:	89 f3                	mov    ebx,esi
c0027e24:	8d 34 36             	lea    esi,[esi+esi*1]
c0027e27:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e2a:	c1 e9 1f             	shr    ecx,0x1f
c0027e2d:	09 ce                	or     esi,ecx
c0027e2f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e32:	01 c9                	add    ecx,ecx
c0027e34:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027e37:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e3a:	85 db                	test   ebx,ebx
c0027e3c:	78 29                	js     c0027e67 <__divdf3+0x24b>
c0027e3e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027e41:	72 07                	jb     c0027e4a <__divdf3+0x22e>
c0027e43:	75 3c                	jne    c0027e81 <__divdf3+0x265>
c0027e45:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e48:	77 37                	ja     c0027e81 <__divdf3+0x265>
c0027e4a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e4d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027e50:	31 d2                	xor    edx,edx
c0027e52:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027e55:	0f 97 c2             	seta   dl
c0027e58:	29 d6                	sub    esi,edx
c0027e5a:	89 d9                	mov    ecx,ebx
c0027e5c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027e5f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e62:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027e65:	eb 17                	jmp    c0027e7e <__divdf3+0x262>
c0027e67:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e6a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e6d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e70:	0f 97 c1             	seta   cl
c0027e73:	0f b6 c9             	movzx  ecx,cl
c0027e76:	29 ce                	sub    esi,ecx
c0027e78:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027e7b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027e7e:	83 ca 01             	or     edx,0x1
c0027e81:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027e84:	75 8b                	jne    c0027e11 <__divdf3+0x1f5>
c0027e86:	c1 e7 09             	shl    edi,0x9
c0027e89:	89 d1                	mov    ecx,edx
c0027e8b:	c1 e9 17             	shr    ecx,0x17
c0027e8e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e91:	09 f3                	or     ebx,esi
c0027e93:	0f 95 c3             	setne  bl
c0027e96:	0f b6 db             	movzx  ebx,bl
c0027e99:	c1 e2 09             	shl    edx,0x9
c0027e9c:	09 d3                	or     ebx,edx
c0027e9e:	89 ca                	mov    edx,ecx
c0027ea0:	09 fa                	or     edx,edi
c0027ea2:	78 0c                	js     c0027eb0 <__divdf3+0x294>
c0027ea4:	01 d2                	add    edx,edx
c0027ea6:	89 d9                	mov    ecx,ebx
c0027ea8:	c1 e9 1f             	shr    ecx,0x1f
c0027eab:	09 ca                	or     edx,ecx
c0027ead:	01 db                	add    ebx,ebx
c0027eaf:	48                   	dec    eax
c0027eb0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027eb5:	0f 8f 83 00 00 00    	jg     c0027f3e <__divdf3+0x322>
c0027ebb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ec1:	85 c0                	test   eax,eax
c0027ec3:	0f 8f 82 00 00 00    	jg     c0027f4b <__divdf3+0x32f>
c0027ec9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027ecc:	7c 77                	jl     c0027f45 <__divdf3+0x329>
c0027ece:	be 01 00 00 00       	mov    esi,0x1
c0027ed3:	29 c6                	sub    esi,eax
c0027ed5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027edb:	83 fe 1f             	cmp    esi,0x1f
c0027ede:	7e 2f                	jle    c0027f0f <__divdf3+0x2f3>
c0027ee0:	83 fe 20             	cmp    esi,0x20
c0027ee3:	75 0a                	jne    c0027eef <__divdf3+0x2d3>
c0027ee5:	85 db                	test   ebx,ebx
c0027ee7:	0f 95 c3             	setne  bl
c0027eea:	0f b6 db             	movzx  ebx,bl
c0027eed:	eb 1a                	jmp    c0027f09 <__divdf3+0x2ed>
c0027eef:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027ef2:	89 d7                	mov    edi,edx
c0027ef4:	d3 e7                	shl    edi,cl
c0027ef6:	89 f9                	mov    ecx,edi
c0027ef8:	09 d9                	or     ecx,ebx
c0027efa:	0f 95 c3             	setne  bl
c0027efd:	0f b6 db             	movzx  ebx,bl
c0027f00:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027f05:	29 c1                	sub    ecx,eax
c0027f07:	d3 ea                	shr    edx,cl
c0027f09:	09 d3                	or     ebx,edx
c0027f0b:	31 c0                	xor    eax,eax
c0027f0d:	eb 3a                	jmp    c0027f49 <__divdf3+0x32d>
c0027f0f:	83 c0 1f             	add    eax,0x1f
c0027f12:	89 d7                	mov    edi,edx
c0027f14:	88 c1                	mov    cl,al
c0027f16:	d3 e7                	shl    edi,cl
c0027f18:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f1b:	89 df                	mov    edi,ebx
c0027f1d:	89 f1                	mov    ecx,esi
c0027f1f:	d3 ef                	shr    edi,cl
c0027f21:	89 f9                	mov    ecx,edi
c0027f23:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f26:	09 cf                	or     edi,ecx
c0027f28:	88 c1                	mov    cl,al
c0027f2a:	d3 e3                	shl    ebx,cl
c0027f2c:	85 db                	test   ebx,ebx
c0027f2e:	0f 95 c3             	setne  bl
c0027f31:	0f b6 db             	movzx  ebx,bl
c0027f34:	09 fb                	or     ebx,edi
c0027f36:	89 f1                	mov    ecx,esi
c0027f38:	d3 ea                	shr    edx,cl
c0027f3a:	31 c0                	xor    eax,eax
c0027f3c:	eb 0d                	jmp    c0027f4b <__divdf3+0x32f>
c0027f3e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027f43:	eb 02                	jmp    c0027f47 <__divdf3+0x32b>
c0027f45:	31 c0                	xor    eax,eax
c0027f47:	31 db                	xor    ebx,ebx
c0027f49:	31 d2                	xor    edx,edx
c0027f4b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027f4e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027f51:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027f57:	09 c8                	or     eax,ecx
c0027f59:	c1 e0 14             	shl    eax,0x14
c0027f5c:	89 d1                	mov    ecx,edx
c0027f5e:	c1 e9 0b             	shr    ecx,0xb
c0027f61:	09 c8                	or     eax,ecx
c0027f63:	89 c6                	mov    esi,eax
c0027f65:	89 d9                	mov    ecx,ebx
c0027f67:	c1 e9 0b             	shr    ecx,0xb
c0027f6a:	c1 e2 15             	shl    edx,0x15
c0027f6d:	09 ca                	or     edx,ecx
c0027f6f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027f75:	0f 95 c0             	setne  al
c0027f78:	09 c1                	or     ecx,eax
c0027f7a:	83 e1 01             	and    ecx,0x1
c0027f7d:	c1 eb 0a             	shr    ebx,0xa
c0027f80:	21 cb                	and    ebx,ecx
c0027f82:	01 d3                	add    ebx,edx
c0027f84:	89 d8                	mov    eax,ebx
c0027f86:	83 d6 00             	adc    esi,0x0
c0027f89:	89 f2                	mov    edx,esi
c0027f8b:	89 c7                	mov    edi,eax
c0027f8d:	89 d1                	mov    ecx,edx
c0027f8f:	89 f8                	mov    eax,edi
c0027f91:	89 ca                	mov    edx,ecx
c0027f93:	83 c4 2c             	add    esp,0x2c
c0027f96:	5b                   	pop    ebx
c0027f97:	5e                   	pop    esi
c0027f98:	5f                   	pop    edi
c0027f99:	5d                   	pop    ebp
c0027f9a:	c3                   	ret    

c0027f9b <__floatsidf>:
c0027f9b:	55                   	push   ebp
c0027f9c:	89 e5                	mov    ebp,esp
c0027f9e:	56                   	push   esi
c0027f9f:	53                   	push   ebx
c0027fa0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fa3:	85 db                	test   ebx,ebx
c0027fa5:	7e 15                	jle    c0027fbc <__floatsidf+0x21>
c0027fa7:	0f bd cb             	bsr    ecx,ebx
c0027faa:	83 f1 1f             	xor    ecx,0x1f
c0027fad:	d3 e3                	shl    ebx,cl
c0027faf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fb5:	b8 1e 04 00 00       	mov    eax,0x41e
c0027fba:	eb 21                	jmp    c0027fdd <__floatsidf+0x42>
c0027fbc:	b8 00 00 00 00       	mov    eax,0x0
c0027fc1:	ba 00 00 00 00       	mov    edx,0x0
c0027fc6:	74 2a                	je     c0027ff2 <__floatsidf+0x57>
c0027fc8:	f7 db                	neg    ebx
c0027fca:	0f bd cb             	bsr    ecx,ebx
c0027fcd:	83 f1 1f             	xor    ecx,0x1f
c0027fd0:	d3 e3                	shl    ebx,cl
c0027fd2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fd8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027fdd:	29 c8                	sub    eax,ecx
c0027fdf:	c1 e0 14             	shl    eax,0x14
c0027fe2:	89 c1                	mov    ecx,eax
c0027fe4:	89 de                	mov    esi,ebx
c0027fe6:	c1 ee 0b             	shr    esi,0xb
c0027fe9:	09 f1                	or     ecx,esi
c0027feb:	89 ca                	mov    edx,ecx
c0027fed:	c1 e3 15             	shl    ebx,0x15
c0027ff0:	89 d8                	mov    eax,ebx
c0027ff2:	5b                   	pop    ebx
c0027ff3:	5e                   	pop    esi
c0027ff4:	5d                   	pop    ebp
c0027ff5:	c3                   	ret    

c0027ff6 <__floatunsidf>:
c0027ff6:	55                   	push   ebp
c0027ff7:	89 e5                	mov    ebp,esp
c0027ff9:	56                   	push   esi
c0027ffa:	53                   	push   ebx
c0027ffb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027ffe:	85 db                	test   ebx,ebx
c0028000:	74 2a                	je     c002802c <__floatunsidf+0x36>
c0028002:	0f bd cb             	bsr    ecx,ebx
c0028005:	83 f1 1f             	xor    ecx,0x1f
c0028008:	d3 e3                	shl    ebx,cl
c002800a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028010:	b8 1e 04 00 00       	mov    eax,0x41e
c0028015:	29 c8                	sub    eax,ecx
c0028017:	c1 e0 14             	shl    eax,0x14
c002801a:	89 c1                	mov    ecx,eax
c002801c:	89 de                	mov    esi,ebx
c002801e:	c1 ee 0b             	shr    esi,0xb
c0028021:	09 f1                	or     ecx,esi
c0028023:	89 ca                	mov    edx,ecx
c0028025:	c1 e3 15             	shl    ebx,0x15
c0028028:	89 d8                	mov    eax,ebx
c002802a:	eb 04                	jmp    c0028030 <__floatunsidf+0x3a>
c002802c:	31 c0                	xor    eax,eax
c002802e:	31 d2                	xor    edx,edx
c0028030:	5b                   	pop    ebx
c0028031:	5e                   	pop    esi
c0028032:	5d                   	pop    ebp
c0028033:	c3                   	ret    

c0028034 <__fixdfsi>:
c0028034:	55                   	push   ebp
c0028035:	89 e5                	mov    ebp,esp
c0028037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002803a:	89 d1                	mov    ecx,edx
c002803c:	c1 e1 0b             	shl    ecx,0xb
c002803f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028048:	c1 e8 15             	shr    eax,0x15
c002804b:	09 c1                	or     ecx,eax
c002804d:	c1 fa 14             	sar    edx,0x14
c0028050:	78 1f                	js     c0028071 <__fixdfsi+0x3d>
c0028052:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028058:	31 c0                	xor    eax,eax
c002805a:	83 fa 1e             	cmp    edx,0x1e
c002805d:	77 40                	ja     c002809f <__fixdfsi+0x6b>
c002805f:	89 c8                	mov    eax,ecx
c0028061:	0d 00 00 00 80       	or     eax,0x80000000
c0028066:	b9 1f 00 00 00       	mov    ecx,0x1f
c002806b:	29 d1                	sub    ecx,edx
c002806d:	d3 e8                	shr    eax,cl
c002806f:	eb 2e                	jmp    c002809f <__fixdfsi+0x6b>
c0028071:	31 c0                	xor    eax,eax
c0028073:	81 c2 01 04 00 00    	add    edx,0x401
c0028079:	78 24                	js     c002809f <__fixdfsi+0x6b>
c002807b:	83 fa 1e             	cmp    edx,0x1e
c002807e:	7e 09                	jle    c0028089 <__fixdfsi+0x55>
c0028080:	83 fa 1f             	cmp    edx,0x1f
c0028083:	75 18                	jne    c002809d <__fixdfsi+0x69>
c0028085:	85 c9                	test   ecx,ecx
c0028087:	75 14                	jne    c002809d <__fixdfsi+0x69>
c0028089:	89 c8                	mov    eax,ecx
c002808b:	0d 00 00 00 80       	or     eax,0x80000000
c0028090:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028095:	29 d1                	sub    ecx,edx
c0028097:	d3 e8                	shr    eax,cl
c0028099:	f7 d8                	neg    eax
c002809b:	eb 02                	jmp    c002809f <__fixdfsi+0x6b>
c002809d:	31 c0                	xor    eax,eax
c002809f:	5d                   	pop    ebp
c00280a0:	c3                   	ret    

c00280a1 <__fixunsdfsi>:
c00280a1:	55                   	push   ebp
c00280a2:	89 e5                	mov    ebp,esp
c00280a4:	53                   	push   ebx
c00280a5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00280a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00280ab:	89 d3                	mov    ebx,edx
c00280ad:	c1 fb 14             	sar    ebx,0x14
c00280b0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00280b6:	31 c0                	xor    eax,eax
c00280b8:	83 fb 1f             	cmp    ebx,0x1f
c00280bb:	77 1d                	ja     c00280da <__fixunsdfsi+0x39>
c00280bd:	89 d0                	mov    eax,edx
c00280bf:	c1 e0 0b             	shl    eax,0xb
c00280c2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280c7:	c1 e9 15             	shr    ecx,0x15
c00280ca:	09 c8                	or     eax,ecx
c00280cc:	0d 00 00 00 80       	or     eax,0x80000000
c00280d1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00280d6:	29 d9                	sub    ecx,ebx
c00280d8:	d3 e8                	shr    eax,cl
c00280da:	5b                   	pop    ebx
c00280db:	5d                   	pop    ebp
c00280dc:	c3                   	ret    

c00280dd <__cmpdf2>:
c00280dd:	55                   	push   ebp
c00280de:	89 e5                	mov    ebp,esp
c00280e0:	57                   	push   edi
c00280e1:	56                   	push   esi
c00280e2:	53                   	push   ebx
c00280e3:	83 ec 0c             	sub    esp,0xc
c00280e6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00280e9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00280ec:	89 ca                	mov    edx,ecx
c00280ee:	c1 ea 14             	shr    edx,0x14
c00280f1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00280f7:	89 cb                	mov    ebx,ecx
c00280f9:	c1 fb 1f             	sar    ebx,0x1f
c00280fc:	31 da                	xor    edx,ebx
c00280fe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028101:	89 df                	mov    edi,ebx
c0028103:	c1 e7 0b             	shl    edi,0xb
c0028106:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028109:	c1 e1 0b             	shl    ecx,0xb
c002810c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028112:	c1 eb 15             	shr    ebx,0x15
c0028115:	09 d9                	or     ecx,ebx
c0028117:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002811a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002811d:	89 ce                	mov    esi,ecx
c002811f:	c1 ee 14             	shr    esi,0x14
c0028122:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028128:	89 cb                	mov    ebx,ecx
c002812a:	c1 fb 1f             	sar    ebx,0x1f
c002812d:	31 de                	xor    esi,ebx
c002812f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028132:	89 df                	mov    edi,ebx
c0028134:	c1 e7 0b             	shl    edi,0xb
c0028137:	c1 e1 0b             	shl    ecx,0xb
c002813a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028140:	c1 eb 15             	shr    ebx,0x15
c0028143:	09 d9                	or     ecx,ebx
c0028145:	89 d3                	mov    ebx,edx
c0028147:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002814d:	43                   	inc    ebx
c002814e:	83 fb 01             	cmp    ebx,0x1
c0028151:	77 08                	ja     c002815b <__cmpdf2+0x7e>
c0028153:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028156:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028159:	75 68                	jne    c00281c3 <__cmpdf2+0xe6>
c002815b:	89 f3                	mov    ebx,esi
c002815d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028163:	43                   	inc    ebx
c0028164:	83 fb 01             	cmp    ebx,0x1
c0028167:	77 06                	ja     c002816f <__cmpdf2+0x92>
c0028169:	89 fb                	mov    ebx,edi
c002816b:	09 cb                	or     ebx,ecx
c002816d:	75 54                	jne    c00281c3 <__cmpdf2+0xe6>
c002816f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028172:	09 f8                	or     eax,edi
c0028174:	09 c8                	or     eax,ecx
c0028176:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028179:	75 12                	jne    c002818d <__cmpdf2+0xb0>
c002817b:	8d 42 01             	lea    eax,[edx+0x1]
c002817e:	83 f8 01             	cmp    eax,0x1
c0028181:	77 0a                	ja     c002818d <__cmpdf2+0xb0>
c0028183:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028186:	31 c0                	xor    eax,eax
c0028188:	83 fb 01             	cmp    ebx,0x1
c002818b:	76 36                	jbe    c00281c3 <__cmpdf2+0xe6>
c002818d:	b8 01 00 00 00       	mov    eax,0x1
c0028192:	39 f2                	cmp    edx,esi
c0028194:	7f 2d                	jg     c00281c3 <__cmpdf2+0xe6>
c0028196:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002819b:	7c 26                	jl     c00281c3 <__cmpdf2+0xe6>
c002819d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281a0:	77 07                	ja     c00281a9 <__cmpdf2+0xcc>
c00281a2:	72 16                	jb     c00281ba <__cmpdf2+0xdd>
c00281a4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00281a7:	76 0a                	jbe    c00281b3 <__cmpdf2+0xd6>
c00281a9:	89 d0                	mov    eax,edx
c00281ab:	c1 f8 1f             	sar    eax,0x1f
c00281ae:	83 c8 01             	or     eax,0x1
c00281b1:	eb 10                	jmp    c00281c3 <__cmpdf2+0xe6>
c00281b3:	b8 00 00 00 00       	mov    eax,0x0
c00281b8:	73 09                	jae    c00281c3 <__cmpdf2+0xe6>
c00281ba:	89 d0                	mov    eax,edx
c00281bc:	c1 f8 1f             	sar    eax,0x1f
c00281bf:	83 e0 02             	and    eax,0x2
c00281c2:	48                   	dec    eax
c00281c3:	83 c4 0c             	add    esp,0xc
c00281c6:	5b                   	pop    ebx
c00281c7:	5e                   	pop    esi
c00281c8:	5f                   	pop    edi
c00281c9:	5d                   	pop    ebp
c00281ca:	c3                   	ret    

c00281cb <__eqdf2>:
c00281cb:	55                   	push   ebp
c00281cc:	89 e5                	mov    ebp,esp
c00281ce:	50                   	push   eax
c00281cf:	6a 01                	push   0x1
c00281d1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281d4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281d7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281dd:	e8 fb fe ff ff       	call   c00280dd <__cmpdf2>
c00281e2:	83 c4 18             	add    esp,0x18
c00281e5:	c9                   	leave  
c00281e6:	c3                   	ret    

c00281e7 <__nedf2>:
c00281e7:	eb e2                	jmp    c00281cb <__eqdf2>

c00281e9 <__gtdf2>:
c00281e9:	55                   	push   ebp
c00281ea:	89 e5                	mov    ebp,esp
c00281ec:	50                   	push   eax
c00281ed:	6a ff                	push   0xffffffff
c00281ef:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281f2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281fb:	e8 dd fe ff ff       	call   c00280dd <__cmpdf2>
c0028200:	83 c4 18             	add    esp,0x18
c0028203:	c9                   	leave  
c0028204:	c3                   	ret    

c0028205 <__gedf2>:
c0028205:	eb e2                	jmp    c00281e9 <__gtdf2>

c0028207 <__ltdf2>:
c0028207:	eb c2                	jmp    c00281cb <__eqdf2>

c0028209 <__ledf2>:
c0028209:	eb c0                	jmp    c00281cb <__eqdf2>

c002820b <__truncdfsf2>:
c002820b:	55                   	push   ebp
c002820c:	89 e5                	mov    ebp,esp
c002820e:	57                   	push   edi
c002820f:	56                   	push   esi
c0028210:	53                   	push   ebx
c0028211:	83 ec 0c             	sub    esp,0xc
c0028214:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028217:	89 d1                	mov    ecx,edx
c0028219:	c1 f9 14             	sar    ecx,0x14
c002821c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002821f:	89 df                	mov    edi,ebx
c0028221:	c1 e7 0b             	shl    edi,0xb
c0028224:	89 d0                	mov    eax,edx
c0028226:	c1 e0 0b             	shl    eax,0xb
c0028229:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002822e:	c1 eb 15             	shr    ebx,0x15
c0028231:	09 d8                	or     eax,ebx
c0028233:	89 cb                	mov    ebx,ecx
c0028235:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002823b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028241:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028247:	0f 86 9e 00 00 00    	jbe    c00282eb <__truncdfsf2+0xe0>
c002824d:	85 db                	test   ebx,ebx
c002824f:	75 0a                	jne    c002825b <__truncdfsf2+0x50>
c0028251:	c1 fa 17             	sar    edx,0x17
c0028254:	30 d2                	xor    dl,dl
c0028256:	e9 84 00 00 00       	jmp    c00282df <__truncdfsf2+0xd4>
c002825b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028261:	83 fe 83             	cmp    esi,0xffffff83
c0028264:	7d 4b                	jge    c00282b1 <__truncdfsf2+0xa6>
c0028266:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002826b:	29 f1                	sub    ecx,esi
c002826d:	83 f9 1f             	cmp    ecx,0x1f
c0028270:	7f 6b                	jg     c00282dd <__truncdfsf2+0xd2>
c0028272:	0d 00 00 00 80       	or     eax,0x80000000
c0028277:	89 c3                	mov    ebx,eax
c0028279:	d3 eb                	shr    ebx,cl
c002827b:	be 01 00 00 00       	mov    esi,0x1
c0028280:	d3 e6                	shl    esi,cl
c0028282:	4e                   	dec    esi
c0028283:	21 f0                	and    eax,esi
c0028285:	09 f8                	or     eax,edi
c0028287:	0f 95 c0             	setne  al
c002828a:	0f b6 c0             	movzx  eax,al
c002828d:	09 c3                	or     ebx,eax
c002828f:	89 d9                	mov    ecx,ebx
c0028291:	c1 e9 08             	shr    ecx,0x8
c0028294:	f6 c3 7f             	test   bl,0x7f
c0028297:	0f 95 c0             	setne  al
c002829a:	09 c8                	or     eax,ecx
c002829c:	83 e0 01             	and    eax,0x1
c002829f:	c1 eb 07             	shr    ebx,0x7
c00282a2:	21 c3                	and    ebx,eax
c00282a4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00282aa:	09 d1                	or     ecx,edx
c00282ac:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00282af:	eb 76                	jmp    c0028327 <__truncdfsf2+0x11c>
c00282b1:	83 c6 80             	add    esi,0xffffff80
c00282b4:	7e 1d                	jle    c00282d3 <__truncdfsf2+0xc8>
c00282b6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00282bc:	75 0b                	jne    c00282c9 <__truncdfsf2+0xbe>
c00282be:	09 f8                	or     eax,edi
c00282c0:	74 09                	je     c00282cb <__truncdfsf2+0xc0>
c00282c2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00282c7:	eb 02                	jmp    c00282cb <__truncdfsf2+0xc0>
c00282c9:	31 c0                	xor    eax,eax
c00282cb:	c1 fa 17             	sar    edx,0x17
c00282ce:	80 ca ff             	or     dl,0xff
c00282d1:	eb 0e                	jmp    c00282e1 <__truncdfsf2+0xd6>
c00282d3:	c1 fa 1f             	sar    edx,0x1f
c00282d6:	c1 e2 08             	shl    edx,0x8
c00282d9:	09 ca                	or     edx,ecx
c00282db:	eb 04                	jmp    c00282e1 <__truncdfsf2+0xd6>
c00282dd:	31 d2                	xor    edx,edx
c00282df:	31 c0                	xor    eax,eax
c00282e1:	c1 e2 17             	shl    edx,0x17
c00282e4:	c1 e8 08             	shr    eax,0x8
c00282e7:	09 d0                	or     eax,edx
c00282e9:	eb 3c                	jmp    c0028327 <__truncdfsf2+0x11c>
c00282eb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00282f1:	89 ca                	mov    edx,ecx
c00282f3:	c1 fa 0b             	sar    edx,0xb
c00282f6:	c1 e2 08             	shl    edx,0x8
c00282f9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282fc:	31 db                	xor    ebx,ebx
c00282fe:	85 ff                	test   edi,edi
c0028300:	0f 95 c3             	setne  bl
c0028303:	09 d8                	or     eax,ebx
c0028305:	89 c3                	mov    ebx,eax
c0028307:	c1 eb 08             	shr    ebx,0x8
c002830a:	a8 7f                	test   al,0x7f
c002830c:	0f 95 c2             	setne  dl
c002830f:	89 d6                	mov    esi,edx
c0028311:	09 de                	or     esi,ebx
c0028313:	83 e6 01             	and    esi,0x1
c0028316:	c1 e8 07             	shr    eax,0x7
c0028319:	21 f0                	and    eax,esi
c002831b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002831e:	09 ca                	or     edx,ecx
c0028320:	c1 e2 17             	shl    edx,0x17
c0028323:	09 da                	or     edx,ebx
c0028325:	01 d0                	add    eax,edx
c0028327:	83 c4 0c             	add    esp,0xc
c002832a:	5b                   	pop    ebx
c002832b:	5e                   	pop    esi
c002832c:	5f                   	pop    edi
c002832d:	5d                   	pop    ebp
c002832e:	c3                   	ret    

c002832f <__extendsfdf2>:
c002832f:	55                   	push   ebp
c0028330:	89 e5                	mov    ebp,esp
c0028332:	57                   	push   edi
c0028333:	56                   	push   esi
c0028334:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028337:	89 d1                	mov    ecx,edx
c0028339:	c1 f9 17             	sar    ecx,0x17
c002833c:	c1 e2 08             	shl    edx,0x8
c002833f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028345:	89 c8                	mov    eax,ecx
c0028347:	80 e4 f8             	and    ah,0xf8
c002834a:	8d 71 01             	lea    esi,[ecx+0x1]
c002834d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028353:	75 27                	jne    c002837c <__extendsfdf2+0x4d>
c0028355:	81 e1 ff 00 00 00    	and    ecx,0xff
c002835b:	75 18                	jne    c0028375 <__extendsfdf2+0x46>
c002835d:	85 d2                	test   edx,edx
c002835f:	74 20                	je     c0028381 <__extendsfdf2+0x52>
c0028361:	41                   	inc    ecx
c0028362:	01 d2                	add    edx,edx
c0028364:	79 fb                	jns    c0028361 <__extendsfdf2+0x32>
c0028366:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002836c:	29 c8                	sub    eax,ecx
c002836e:	05 81 03 00 00       	add    eax,0x381
c0028373:	eb 0c                	jmp    c0028381 <__extendsfdf2+0x52>
c0028375:	05 00 07 00 00       	add    eax,0x700
c002837a:	eb 05                	jmp    c0028381 <__extendsfdf2+0x52>
c002837c:	05 80 03 00 00       	add    eax,0x380
c0028381:	c1 e0 14             	shl    eax,0x14
c0028384:	89 c1                	mov    ecx,eax
c0028386:	89 d0                	mov    eax,edx
c0028388:	c1 e8 0b             	shr    eax,0xb
c002838b:	09 c1                	or     ecx,eax
c002838d:	c1 e2 15             	shl    edx,0x15
c0028390:	89 d0                	mov    eax,edx
c0028392:	89 ca                	mov    edx,ecx
c0028394:	5e                   	pop    esi
c0028395:	5f                   	pop    edi
c0028396:	5d                   	pop    ebp
c0028397:	c3                   	ret    
c0028398:	66 90                	xchg   ax,ax
c002839a:	66 90                	xchg   ax,ax
c002839c:	66 90                	xchg   ax,ax
c002839e:	66 90                	xchg   ax,ax

c00283a0 <fabs>:
c00283a0:	83 ec 0c             	sub    esp,0xc
c00283a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00283aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00283ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00283b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00283b7:	dd 04 24             	fld    QWORD PTR [esp]
c00283ba:	83 c4 0c             	add    esp,0xc
c00283bd:	c3                   	ret    
c00283be:	66 90                	xchg   ax,ax

c00283c0 <lrint>:
c00283c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00283c4:	83 ec 04             	sub    esp,0x4
c00283c7:	db 1c 24             	fistp  DWORD PTR [esp]
c00283ca:	58                   	pop    eax
c00283cb:	c3                   	ret    

c00283cc <lrintf>:
c00283cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00283d0:	83 ec 04             	sub    esp,0x4
c00283d3:	db 1c 24             	fistp  DWORD PTR [esp]
c00283d6:	58                   	pop    eax
c00283d7:	c3                   	ret    

Disassembly of section .init:

c00283d8 <_init>:
c00283d8:	55                   	push   ebp
c00283d9:	89 e5                	mov    ebp,esp
c00283db:	e8 38 7d fd ff       	call   c0000118 <frame_dummy>
c00283e0:	e8 5b e0 ff ff       	call   c0026440 <__do_global_ctors_aux>
c00283e5:	5d                   	pop    ebp
c00283e6:	c3                   	ret    

Disassembly of section .fini:

c00283e7 <_fini>:
c00283e7:	55                   	push   ebp
c00283e8:	89 e5                	mov    ebp,esp
c00283ea:	e8 b9 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00283ef:	5d                   	pop    ebp
c00283f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00283f2 <Computer::~Computer()>:
c00283f2:	83 ec 0c             	sub    esp,0xc
c00283f5:	ba 7c 9f 02 c0       	mov    edx,0xc0029f7c
c00283fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283fe:	89 10                	mov    DWORD PTR [eax],edx
c0028400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028404:	83 ec 0c             	sub    esp,0xc
c0028407:	50                   	push   eax
c0028408:	e8 ef b5 fe ff       	call   c00139fc <Device::~Device()>
c002840d:	83 c4 10             	add    esp,0x10
c0028410:	90                   	nop
c0028411:	83 c4 0c             	add    esp,0xc
c0028414:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028416 <Computer::~Computer()>:
c0028416:	83 ec 0c             	sub    esp,0xc
c0028419:	83 ec 0c             	sub    esp,0xc
c002841c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028420:	e8 cd ff ff ff       	call   c00283f2 <Computer::~Computer()>
c0028425:	83 c4 10             	add    esp,0x10
c0028428:	83 ec 08             	sub    esp,0x8
c002842b:	68 ec 01 00 00       	push   0x1ec
c0028430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028434:	e8 e4 a1 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028439:	83 c4 10             	add    esp,0x10
c002843c:	83 c4 0c             	add    esp,0xc
c002843f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028440 <idleCommon()>:
c0028440:	83 ec 0c             	sub    esp,0xc
c0028443:	fa                   	cli    
c0028444:	ff 05 28 0f 03 c0    	inc    DWORD PTR ds:0xc0030f28
c002844a:	e8 a2 55 ff ff       	call   c001d9f1 <schedule()>
c002844f:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0028454:	48                   	dec    eax
c0028455:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c002845a:	75 01                	jne    c002845d <idleCommon()+0x1d>
c002845c:	fb                   	sti    
c002845d:	83 c4 0c             	add    esp,0xc
c0028460:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028462 <LinkedList<UnixFile>::~LinkedList()>:
c0028462:	90                   	nop
c0028463:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028464 <LinkedList<UnixFile>::LinkedList()>:
c0028464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028468:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002846e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028472:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028479:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002847d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028488:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002848e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028492:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028499:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002849d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284a4:	90                   	nop
c00284a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00284a6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00284a6:	83 ec 0c             	sub    esp,0xc
c00284a9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00284ae:	75 10                	jne    c00284c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00284b0:	83 ec 0c             	sub    esp,0xc
c00284b3:	68 34 a2 02 c0       	push   0xc002a234
c00284b8:	e8 a4 19 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c00284bd:	83 c4 10             	add    esp,0x10
c00284c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00284c6:	85 c0                	test   eax,eax
c00284c8:	74 34                	je     c00284fe <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284d1:	85 c0                	test   eax,eax
c00284d3:	74 29                	je     c00284fe <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284fc:	eb 65                	jmp    c0028563 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028502:	8b 00                	mov    eax,DWORD PTR [eax]
c0028504:	85 c0                	test   eax,eax
c0028506:	75 4b                	jne    c0028553 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002850f:	85 c0                	test   eax,eax
c0028511:	75 40                	jne    c0028553 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028517:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002851b:	89 10                	mov    DWORD PTR [eax],edx
c002851d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028521:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028525:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002852c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002852f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002853a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002853d:	85 c0                	test   eax,eax
c002853f:	74 22                	je     c0028563 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028541:	83 ec 0c             	sub    esp,0xc
c0028544:	68 56 a2 02 c0       	push   0xc002a256
c0028549:	e8 13 19 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c002854e:	83 c4 10             	add    esp,0x10
c0028551:	eb 10                	jmp    c0028563 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028553:	83 ec 0c             	sub    esp,0xc
c0028556:	68 60 a2 02 c0       	push   0xc002a260
c002855b:	e8 01 19 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0028560:	83 c4 10             	add    esp,0x10
c0028563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028567:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002856a:	8d 50 01             	lea    edx,[eax+0x1]
c002856d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028571:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028574:	90                   	nop
c0028575:	83 c4 0c             	add    esp,0xc
c0028578:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002857a <LinkedList<UnixFile>::getFirstElement()>:
c002857a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002857e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028580:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028582 <LinkedList<UnixFile>::removeFirst()>:
c0028582:	83 ec 0c             	sub    esp,0xc
c0028585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028589:	8b 00                	mov    eax,DWORD PTR [eax]
c002858b:	85 c0                	test   eax,eax
c002858d:	75 12                	jne    c00285a1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002858f:	83 ec 0c             	sub    esp,0xc
c0028592:	68 6c a2 02 c0       	push   0xc002a26c
c0028597:	e8 c5 18 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c002859c:	83 c4 10             	add    esp,0x10
c002859f:	eb 7e                	jmp    c002861f <LinkedList<UnixFile>::removeFirst()+0x9d>
c00285a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285ab:	85 c0                	test   eax,eax
c00285ad:	74 10                	je     c00285bf <LinkedList<UnixFile>::removeFirst()+0x3d>
c00285af:	83 ec 0c             	sub    esp,0xc
c00285b2:	68 b7 a2 02 c0       	push   0xc002a2b7
c00285b7:	e8 a5 18 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c00285bc:	83 c4 10             	add    esp,0x10
c00285bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285c8:	85 c0                	test   eax,eax
c00285ca:	75 33                	jne    c00285ff <LinkedList<UnixFile>::removeFirst()+0x7d>
c00285cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285e8:	83 f8 01             	cmp    eax,0x1
c00285eb:	74 21                	je     c002860e <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285ed:	83 ec 0c             	sub    esp,0xc
c00285f0:	68 90 a2 02 c0       	push   0xc002a290
c00285f5:	e8 67 18 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c00285fa:	83 c4 10             	add    esp,0x10
c00285fd:	eb 0f                	jmp    c002860e <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028603:	8b 00                	mov    eax,DWORD PTR [eax]
c0028605:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860c:	89 10                	mov    DWORD PTR [eax],edx
c002860e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028612:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028615:	8d 50 ff             	lea    edx,[eax-0x1]
c0028618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002861f:	83 c4 0c             	add    esp,0xc
c0028622:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028624 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028628:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002862b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002862c <DriverlessDevice::~DriverlessDevice()>:
c002862c:	ba 3c ab 02 c0       	mov    edx,0xc002ab3c
c0028631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028635:	89 10                	mov    DWORD PTR [eax],edx
c0028637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002863b:	50                   	push   eax
c002863c:	e8 bb b3 fe ff       	call   c00139fc <Device::~Device()>
c0028641:	83 c4 04             	add    esp,0x4
c0028644:	90                   	nop
c0028645:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028646 <DriverlessDevice::~DriverlessDevice()>:
c0028646:	83 ec 0c             	sub    esp,0xc
c0028649:	83 ec 0c             	sub    esp,0xc
c002864c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028650:	e8 d7 ff ff ff       	call   c002862c <DriverlessDevice::~DriverlessDevice()>
c0028655:	83 c4 10             	add    esp,0x10
c0028658:	83 ec 08             	sub    esp,0x8
c002865b:	68 58 01 00 00       	push   0x158
c0028660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028664:	e8 b4 9f fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028669:	83 c4 10             	add    esp,0x10
c002866c:	83 c4 0c             	add    esp,0xc
c002866f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028670 <LinkedList<Device>::addElement(Device*)>:
c0028670:	83 ec 0c             	sub    esp,0xc
c0028673:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028678:	75 10                	jne    c002868a <LinkedList<Device>::addElement(Device*)+0x1a>
c002867a:	83 ec 0c             	sub    esp,0xc
c002867d:	68 34 a2 02 c0       	push   0xc002a234
c0028682:	e8 da 17 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0028687:	83 c4 10             	add    esp,0x10
c002868a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028690:	85 c0                	test   eax,eax
c0028692:	74 3a                	je     c00286ce <LinkedList<Device>::addElement(Device*)+0x5e>
c0028694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028698:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002869b:	85 c0                	test   eax,eax
c002869d:	74 2f                	je     c00286ce <LinkedList<Device>::addElement(Device*)+0x5e>
c002869f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286aa:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00286b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286c2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286cc:	eb 68                	jmp    c0028736 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286d4:	85 c0                	test   eax,eax
c00286d6:	75 4e                	jne    c0028726 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286df:	85 c0                	test   eax,eax
c00286e1:	75 43                	jne    c0028726 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286eb:	89 10                	mov    DWORD PTR [eax],edx
c00286ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286ff:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028710:	85 c0                	test   eax,eax
c0028712:	74 22                	je     c0028736 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028714:	83 ec 0c             	sub    esp,0xc
c0028717:	68 56 a2 02 c0       	push   0xc002a256
c002871c:	e8 40 17 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0028721:	83 c4 10             	add    esp,0x10
c0028724:	eb 10                	jmp    c0028736 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028726:	83 ec 0c             	sub    esp,0xc
c0028729:	68 60 a2 02 c0       	push   0xc002a260
c002872e:	e8 2e 17 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0028733:	83 c4 10             	add    esp,0x10
c0028736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002873d:	8d 50 01             	lea    edx,[eax+0x1]
c0028740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028744:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028747:	90                   	nop
c0028748:	83 c4 0c             	add    esp,0xc
c002874b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002874c <LinkedList<Device>::LinkedList()>:
c002874c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028750:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002875a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028765:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002876c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028770:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002877a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028785:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002878c:	90                   	nop
c002878d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002878e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002878e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028792:	8b 00                	mov    eax,DWORD PTR [eax]
c0028794:	85 c0                	test   eax,eax
c0028796:	75 0e                	jne    c00287a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002879c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002879f:	85 c0                	test   eax,eax
c00287a1:	75 03                	jne    c00287a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00287a3:	b0 01                	mov    al,0x1
c00287a5:	c3                   	ret    
c00287a6:	b0 00                	mov    al,0x0
c00287a8:	90                   	nop
c00287a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00287aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00287aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00287b0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00287b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00287b2:	83 ec 0c             	sub    esp,0xc
c00287b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00287bb:	85 c0                	test   eax,eax
c00287bd:	75 15                	jne    c00287d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00287bf:	83 ec 0c             	sub    esp,0xc
c00287c2:	68 6c a2 02 c0       	push   0xc002a26c
c00287c7:	e8 95 16 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c00287cc:	83 c4 10             	add    esp,0x10
c00287cf:	e9 88 00 00 00       	jmp    c002885c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00287d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287db:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287de:	85 c0                	test   eax,eax
c00287e0:	0f 95 c0             	setne  al
c00287e3:	84 c0                	test   al,al
c00287e5:	74 10                	je     c00287f7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00287e7:	83 ec 0c             	sub    esp,0xc
c00287ea:	68 b7 a2 02 c0       	push   0xc002a2b7
c00287ef:	e8 6d 16 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c00287f4:	83 c4 10             	add    esp,0x10
c00287f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00287fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028800:	85 c0                	test   eax,eax
c0028802:	0f 94 c0             	sete   al
c0028805:	84 c0                	test   al,al
c0028807:	74 33                	je     c002883c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028817:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002881e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028822:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028825:	83 f8 01             	cmp    eax,0x1
c0028828:	74 21                	je     c002884b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002882a:	83 ec 0c             	sub    esp,0xc
c002882d:	68 90 a2 02 c0       	push   0xc002a290
c0028832:	e8 2a 16 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0028837:	83 c4 10             	add    esp,0x10
c002883a:	eb 0f                	jmp    c002884b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002883c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028840:	8b 00                	mov    eax,DWORD PTR [eax]
c0028842:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028849:	89 10                	mov    DWORD PTR [eax],edx
c002884b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028852:	8d 50 ff             	lea    edx,[eax-0x1]
c0028855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028859:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002885c:	83 c4 0c             	add    esp,0xc
c002885f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028860:	83 ec 0c             	sub    esp,0xc
c0028863:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028868:	75 10                	jne    c002887a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002886a:	83 ec 0c             	sub    esp,0xc
c002886d:	68 34 a2 02 c0       	push   0xc002a234
c0028872:	e8 ea 15 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0028877:	83 c4 10             	add    esp,0x10
c002887a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028880:	85 c0                	test   eax,eax
c0028882:	74 34                	je     c00288b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028888:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002888b:	85 c0                	test   eax,eax
c002888d:	74 29                	je     c00288b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002888f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028893:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028896:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002889a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002889d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288af:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288b6:	eb 65                	jmp    c002891d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00288be:	85 c0                	test   eax,eax
c00288c0:	75 4b                	jne    c002890d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288c9:	85 c0                	test   eax,eax
c00288cb:	75 40                	jne    c002890d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288d5:	89 10                	mov    DWORD PTR [eax],edx
c00288d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f7:	85 c0                	test   eax,eax
c00288f9:	74 22                	je     c002891d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288fb:	83 ec 0c             	sub    esp,0xc
c00288fe:	68 56 a2 02 c0       	push   0xc002a256
c0028903:	e8 59 15 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0028908:	83 c4 10             	add    esp,0x10
c002890b:	eb 10                	jmp    c002891d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002890d:	83 ec 0c             	sub    esp,0xc
c0028910:	68 60 a2 02 c0       	push   0xc002a260
c0028915:	e8 47 15 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c002891a:	83 c4 10             	add    esp,0x10
c002891d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028921:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028924:	8d 50 01             	lea    edx,[eax+0x1]
c0028927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002892e:	90                   	nop
c002892f:	83 c4 0c             	add    esp,0xc
c0028932:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028934 <ACPI::~ACPI()>:
c0028934:	83 ec 0c             	sub    esp,0xc
c0028937:	ba a8 b3 02 c0       	mov    edx,0xc002b3a8
c002893c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028940:	89 10                	mov    DWORD PTR [eax],edx
c0028942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028946:	83 ec 0c             	sub    esp,0xc
c0028949:	50                   	push   eax
c002894a:	e8 ad b0 fe ff       	call   c00139fc <Device::~Device()>
c002894f:	83 c4 10             	add    esp,0x10
c0028952:	90                   	nop
c0028953:	83 c4 0c             	add    esp,0xc
c0028956:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028958 <ACPI::~ACPI()>:
c0028958:	83 ec 0c             	sub    esp,0xc
c002895b:	83 ec 0c             	sub    esp,0xc
c002895e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028962:	e8 cd ff ff ff       	call   c0028934 <ACPI::~ACPI()>
c0028967:	83 c4 10             	add    esp,0x10
c002896a:	83 ec 08             	sub    esp,0x8
c002896d:	68 64 12 00 00       	push   0x1264
c0028972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028976:	e8 a2 9c fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c002897b:	83 c4 10             	add    esp,0x10
c002897e:	83 c4 0c             	add    esp,0xc
c0028981:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028982 <LinkedList<Device>::~LinkedList()>:
c0028982:	90                   	nop
c0028983:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028984 <LinkedList<Device>::isEmpty()>:
c0028984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028988:	8b 00                	mov    eax,DWORD PTR [eax]
c002898a:	85 c0                	test   eax,eax
c002898c:	75 0e                	jne    c002899c <LinkedList<Device>::isEmpty()+0x18>
c002898e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028992:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028995:	85 c0                	test   eax,eax
c0028997:	75 03                	jne    c002899c <LinkedList<Device>::isEmpty()+0x18>
c0028999:	b0 01                	mov    al,0x1
c002899b:	c3                   	ret    
c002899c:	b0 00                	mov    al,0x0
c002899e:	90                   	nop
c002899f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00289a0 <LinkedList<Device>::getFirstElement()>:
c00289a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00289a6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00289a8 <LinkedList<Device>::removeFirst()>:
c00289a8:	83 ec 0c             	sub    esp,0xc
c00289ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289af:	8b 00                	mov    eax,DWORD PTR [eax]
c00289b1:	85 c0                	test   eax,eax
c00289b3:	75 15                	jne    c00289ca <LinkedList<Device>::removeFirst()+0x22>
c00289b5:	83 ec 0c             	sub    esp,0xc
c00289b8:	68 6c a2 02 c0       	push   0xc002a26c
c00289bd:	e8 9f 14 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c00289c2:	83 c4 10             	add    esp,0x10
c00289c5:	e9 87 00 00 00       	jmp    c0028a51 <LinkedList<Device>::removeFirst()+0xa9>
c00289ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289d1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289d7:	85 c0                	test   eax,eax
c00289d9:	74 10                	je     c00289eb <LinkedList<Device>::removeFirst()+0x43>
c00289db:	83 ec 0c             	sub    esp,0xc
c00289de:	68 b7 a2 02 c0       	push   0xc002a2b7
c00289e3:	e8 79 14 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c00289e8:	83 c4 10             	add    esp,0x10
c00289eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00289f1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289f7:	85 c0                	test   eax,eax
c00289f9:	75 33                	jne    c0028a2e <LinkedList<Device>::removeFirst()+0x86>
c00289fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a09:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a17:	83 f8 01             	cmp    eax,0x1
c0028a1a:	74 24                	je     c0028a40 <LinkedList<Device>::removeFirst()+0x98>
c0028a1c:	83 ec 0c             	sub    esp,0xc
c0028a1f:	68 90 a2 02 c0       	push   0xc002a290
c0028a24:	e8 38 14 ff ff       	call   c0019e61 <Krnl::panic(char const*)>
c0028a29:	83 c4 10             	add    esp,0x10
c0028a2c:	eb 12                	jmp    c0028a40 <LinkedList<Device>::removeFirst()+0x98>
c0028a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a34:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3e:	89 10                	mov    DWORD PTR [eax],edx
c0028a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a47:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a51:	83 c4 0c             	add    esp,0xc
c0028a54:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028a56 <CPU::~CPU()>:
c0028a56:	83 ec 0c             	sub    esp,0xc
c0028a59:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c0028a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a62:	89 10                	mov    DWORD PTR [eax],edx
c0028a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a68:	83 ec 0c             	sub    esp,0xc
c0028a6b:	50                   	push   eax
c0028a6c:	e8 8b af fe ff       	call   c00139fc <Device::~Device()>
c0028a71:	83 c4 10             	add    esp,0x10
c0028a74:	90                   	nop
c0028a75:	83 c4 0c             	add    esp,0xc
c0028a78:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028a7a <CPU::~CPU()>:
c0028a7a:	83 ec 0c             	sub    esp,0xc
c0028a7d:	83 ec 0c             	sub    esp,0xc
c0028a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a84:	e8 cd ff ff ff       	call   c0028a56 <CPU::~CPU()>
c0028a89:	83 c4 10             	add    esp,0x10
c0028a8c:	83 ec 08             	sub    esp,0x8
c0028a8f:	68 98 11 00 00       	push   0x1198
c0028a94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a98:	e8 80 9b fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028a9d:	83 c4 10             	add    esp,0x10
c0028aa0:	83 c4 0c             	add    esp,0xc
c0028aa3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028aa4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028aa4:	90                   	nop
c0028aa5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028aa6 <ThreadControlBlock::ThreadControlBlock()>:
c0028aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aaa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ab1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028abc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028ac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028acb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028add:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028aed:	90                   	nop
c0028aee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028af0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028afe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b09:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b1e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b29:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b30:	90                   	nop
c0028b31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028b32 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028b32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b36:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b39:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028b3a <Vm::_FPUState::_FPUState()>:
c0028b3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b3e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028b45:	90                   	nop
c0028b46:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028b48 <PCI::~PCI()>:
c0028b48:	83 ec 0c             	sub    esp,0xc
c0028b4b:	ba 24 c1 02 c0       	mov    edx,0xc002c124
c0028b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b54:	89 10                	mov    DWORD PTR [eax],edx
c0028b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5a:	83 ec 0c             	sub    esp,0xc
c0028b5d:	50                   	push   eax
c0028b5e:	e8 69 a8 fe ff       	call   c00133cc <Bus::~Bus()>
c0028b63:	83 c4 10             	add    esp,0x10
c0028b66:	90                   	nop
c0028b67:	83 c4 0c             	add    esp,0xc
c0028b6a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028b6c <PCI::~PCI()>:
c0028b6c:	83 ec 0c             	sub    esp,0xc
c0028b6f:	83 ec 0c             	sub    esp,0xc
c0028b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b76:	e8 cd ff ff ff       	call   c0028b48 <PCI::~PCI()>
c0028b7b:	83 c4 10             	add    esp,0x10
c0028b7e:	83 ec 08             	sub    esp,0x8
c0028b81:	68 5c 01 00 00       	push   0x15c
c0028b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b8a:	e8 8e 9a fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028b8f:	83 c4 10             	add    esp,0x10
c0028b92:	83 c4 0c             	add    esp,0xc
c0028b95:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028b96 <IDE::~IDE()>:
c0028b96:	83 ec 0c             	sub    esp,0xc
c0028b99:	ba d8 c1 02 c0       	mov    edx,0xc002c1d8
c0028b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba2:	89 10                	mov    DWORD PTR [eax],edx
c0028ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba8:	83 ec 0c             	sub    esp,0xc
c0028bab:	50                   	push   eax
c0028bac:	e8 61 b3 fe ff       	call   c0013f12 <HardDiskController::~HardDiskController()>
c0028bb1:	83 c4 10             	add    esp,0x10
c0028bb4:	90                   	nop
c0028bb5:	83 c4 0c             	add    esp,0xc
c0028bb8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028bba <IDE::~IDE()>:
c0028bba:	83 ec 0c             	sub    esp,0xc
c0028bbd:	83 ec 0c             	sub    esp,0xc
c0028bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bc4:	e8 cd ff ff ff       	call   c0028b96 <IDE::~IDE()>
c0028bc9:	83 c4 10             	add    esp,0x10
c0028bcc:	83 ec 08             	sub    esp,0x8
c0028bcf:	68 70 02 00 00       	push   0x270
c0028bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd8:	e8 40 9a fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028bdd:	83 c4 10             	add    esp,0x10
c0028be0:	83 c4 0c             	add    esp,0xc
c0028be3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028be4 <SATABus::~SATABus()>:
c0028be4:	83 ec 0c             	sub    esp,0xc
c0028be7:	ba 50 c2 02 c0       	mov    edx,0xc002c250
c0028bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf0:	89 10                	mov    DWORD PTR [eax],edx
c0028bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf6:	83 ec 0c             	sub    esp,0xc
c0028bf9:	50                   	push   eax
c0028bfa:	e8 13 b3 fe ff       	call   c0013f12 <HardDiskController::~HardDiskController()>
c0028bff:	83 c4 10             	add    esp,0x10
c0028c02:	90                   	nop
c0028c03:	83 c4 0c             	add    esp,0xc
c0028c06:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028c08 <SATABus::~SATABus()>:
c0028c08:	83 ec 0c             	sub    esp,0xc
c0028c0b:	83 ec 0c             	sub    esp,0xc
c0028c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c12:	e8 cd ff ff ff       	call   c0028be4 <SATABus::~SATABus()>
c0028c17:	83 c4 10             	add    esp,0x10
c0028c1a:	83 ec 08             	sub    esp,0x8
c0028c1d:	68 64 01 00 00       	push   0x164
c0028c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c26:	e8 f2 99 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028c2b:	83 c4 10             	add    esp,0x10
c0028c2e:	83 c4 0c             	add    esp,0xc
c0028c31:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028c32 <ATA::~ATA()>:
c0028c32:	83 ec 0c             	sub    esp,0xc
c0028c35:	ba 9c c2 02 c0       	mov    edx,0xc002c29c
c0028c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3e:	89 10                	mov    DWORD PTR [eax],edx
c0028c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c44:	83 ec 0c             	sub    esp,0xc
c0028c47:	50                   	push   eax
c0028c48:	e8 a7 b3 fe ff       	call   c0013ff4 <PhysicalDisk::~PhysicalDisk()>
c0028c4d:	83 c4 10             	add    esp,0x10
c0028c50:	90                   	nop
c0028c51:	83 c4 0c             	add    esp,0xc
c0028c54:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028c56 <ATA::~ATA()>:
c0028c56:	83 ec 0c             	sub    esp,0xc
c0028c59:	83 ec 0c             	sub    esp,0xc
c0028c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c60:	e8 cd ff ff ff       	call   c0028c32 <ATA::~ATA()>
c0028c65:	83 c4 10             	add    esp,0x10
c0028c68:	83 ec 08             	sub    esp,0x8
c0028c6b:	68 7c 01 00 00       	push   0x17c
c0028c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c74:	e8 a4 99 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028c79:	83 c4 10             	add    esp,0x10
c0028c7c:	83 c4 0c             	add    esp,0xc
c0028c7f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028c80 <ATAPI::~ATAPI()>:
c0028c80:	83 ec 0c             	sub    esp,0xc
c0028c83:	ba d4 c2 02 c0       	mov    edx,0xc002c2d4
c0028c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8c:	89 10                	mov    DWORD PTR [eax],edx
c0028c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c92:	83 ec 0c             	sub    esp,0xc
c0028c95:	50                   	push   eax
c0028c96:	e8 59 b3 fe ff       	call   c0013ff4 <PhysicalDisk::~PhysicalDisk()>
c0028c9b:	83 c4 10             	add    esp,0x10
c0028c9e:	90                   	nop
c0028c9f:	83 c4 0c             	add    esp,0xc
c0028ca2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028ca4 <ATAPI::~ATAPI()>:
c0028ca4:	83 ec 0c             	sub    esp,0xc
c0028ca7:	83 ec 0c             	sub    esp,0xc
c0028caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cae:	e8 cd ff ff ff       	call   c0028c80 <ATAPI::~ATAPI()>
c0028cb3:	83 c4 10             	add    esp,0x10
c0028cb6:	83 ec 08             	sub    esp,0x8
c0028cb9:	68 80 01 00 00       	push   0x180
c0028cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc2:	e8 56 99 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028cc7:	83 c4 10             	add    esp,0x10
c0028cca:	83 c4 0c             	add    esp,0xc
c0028ccd:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028cce <SATA::~SATA()>:
c0028cce:	83 ec 0c             	sub    esp,0xc
c0028cd1:	ba 88 c3 02 c0       	mov    edx,0xc002c388
c0028cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cda:	89 10                	mov    DWORD PTR [eax],edx
c0028cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce0:	83 ec 0c             	sub    esp,0xc
c0028ce3:	50                   	push   eax
c0028ce4:	e8 0b b3 fe ff       	call   c0013ff4 <PhysicalDisk::~PhysicalDisk()>
c0028ce9:	83 c4 10             	add    esp,0x10
c0028cec:	90                   	nop
c0028ced:	83 c4 0c             	add    esp,0xc
c0028cf0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028cf2 <SATA::~SATA()>:
c0028cf2:	83 ec 0c             	sub    esp,0xc
c0028cf5:	83 ec 0c             	sub    esp,0xc
c0028cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cfc:	e8 cd ff ff ff       	call   c0028cce <SATA::~SATA()>
c0028d01:	83 c4 10             	add    esp,0x10
c0028d04:	83 ec 08             	sub    esp,0x8
c0028d07:	68 7c 01 00 00       	push   0x17c
c0028d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d10:	e8 08 99 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028d15:	83 c4 10             	add    esp,0x10
c0028d18:	83 c4 0c             	add    esp,0xc
c0028d1b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028d1c <SATAPI::~SATAPI()>:
c0028d1c:	83 ec 0c             	sub    esp,0xc
c0028d1f:	ba 64 c4 02 c0       	mov    edx,0xc002c464
c0028d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d28:	89 10                	mov    DWORD PTR [eax],edx
c0028d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2e:	83 ec 0c             	sub    esp,0xc
c0028d31:	50                   	push   eax
c0028d32:	e8 bd b2 fe ff       	call   c0013ff4 <PhysicalDisk::~PhysicalDisk()>
c0028d37:	83 c4 10             	add    esp,0x10
c0028d3a:	90                   	nop
c0028d3b:	83 c4 0c             	add    esp,0xc
c0028d3e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028d40 <SATAPI::~SATAPI()>:
c0028d40:	83 ec 0c             	sub    esp,0xc
c0028d43:	83 ec 0c             	sub    esp,0xc
c0028d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4a:	e8 cd ff ff ff       	call   c0028d1c <SATAPI::~SATAPI()>
c0028d4f:	83 c4 10             	add    esp,0x10
c0028d52:	83 ec 08             	sub    esp,0x8
c0028d55:	68 80 01 00 00       	push   0x180
c0028d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d5e:	e8 ba 98 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028d63:	83 c4 10             	add    esp,0x10
c0028d66:	83 c4 0c             	add    esp,0xc
c0028d69:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028d6a <AVX::~AVX()>:
c0028d6a:	83 ec 0c             	sub    esp,0xc
c0028d6d:	ba a4 c4 02 c0       	mov    edx,0xc002c4a4
c0028d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d76:	89 10                	mov    DWORD PTR [eax],edx
c0028d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7c:	83 ec 0c             	sub    esp,0xc
c0028d7f:	50                   	push   eax
c0028d80:	e8 f3 b2 fe ff       	call   c0014078 <FPU::~FPU()>
c0028d85:	83 c4 10             	add    esp,0x10
c0028d88:	90                   	nop
c0028d89:	83 c4 0c             	add    esp,0xc
c0028d8c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028d8e <AVX::~AVX()>:
c0028d8e:	83 ec 0c             	sub    esp,0xc
c0028d91:	83 ec 0c             	sub    esp,0xc
c0028d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d98:	e8 cd ff ff ff       	call   c0028d6a <AVX::~AVX()>
c0028d9d:	83 c4 10             	add    esp,0x10
c0028da0:	83 ec 08             	sub    esp,0x8
c0028da3:	68 58 01 00 00       	push   0x158
c0028da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dac:	e8 6c 98 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028db1:	83 c4 10             	add    esp,0x10
c0028db4:	83 c4 0c             	add    esp,0xc
c0028db7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028db8 <MMX::~MMX()>:
c0028db8:	83 ec 0c             	sub    esp,0xc
c0028dbb:	ba e4 c4 02 c0       	mov    edx,0xc002c4e4
c0028dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc4:	89 10                	mov    DWORD PTR [eax],edx
c0028dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dca:	83 ec 0c             	sub    esp,0xc
c0028dcd:	50                   	push   eax
c0028dce:	e8 a5 b2 fe ff       	call   c0014078 <FPU::~FPU()>
c0028dd3:	83 c4 10             	add    esp,0x10
c0028dd6:	90                   	nop
c0028dd7:	83 c4 0c             	add    esp,0xc
c0028dda:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028ddc <MMX::~MMX()>:
c0028ddc:	83 ec 0c             	sub    esp,0xc
c0028ddf:	83 ec 0c             	sub    esp,0xc
c0028de2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de6:	e8 cd ff ff ff       	call   c0028db8 <MMX::~MMX()>
c0028deb:	83 c4 10             	add    esp,0x10
c0028dee:	83 ec 08             	sub    esp,0x8
c0028df1:	68 58 01 00 00       	push   0x158
c0028df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfa:	e8 1e 98 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028dff:	83 c4 10             	add    esp,0x10
c0028e02:	83 c4 0c             	add    esp,0xc
c0028e05:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028e06 <SSE::~SSE()>:
c0028e06:	83 ec 0c             	sub    esp,0xc
c0028e09:	ba 24 c5 02 c0       	mov    edx,0xc002c524
c0028e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e12:	89 10                	mov    DWORD PTR [eax],edx
c0028e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e18:	83 ec 0c             	sub    esp,0xc
c0028e1b:	50                   	push   eax
c0028e1c:	e8 57 b2 fe ff       	call   c0014078 <FPU::~FPU()>
c0028e21:	83 c4 10             	add    esp,0x10
c0028e24:	90                   	nop
c0028e25:	83 c4 0c             	add    esp,0xc
c0028e28:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028e2a <SSE::~SSE()>:
c0028e2a:	83 ec 0c             	sub    esp,0xc
c0028e2d:	83 ec 0c             	sub    esp,0xc
c0028e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e34:	e8 cd ff ff ff       	call   c0028e06 <SSE::~SSE()>
c0028e39:	83 c4 10             	add    esp,0x10
c0028e3c:	83 ec 08             	sub    esp,0x8
c0028e3f:	68 58 01 00 00       	push   0x158
c0028e44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e48:	e8 d0 97 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028e4d:	83 c4 10             	add    esp,0x10
c0028e50:	83 c4 0c             	add    esp,0xc
c0028e53:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028e54 <x87::~x87()>:
c0028e54:	83 ec 0c             	sub    esp,0xc
c0028e57:	ba 64 c5 02 c0       	mov    edx,0xc002c564
c0028e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e60:	89 10                	mov    DWORD PTR [eax],edx
c0028e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e66:	83 ec 0c             	sub    esp,0xc
c0028e69:	50                   	push   eax
c0028e6a:	e8 09 b2 fe ff       	call   c0014078 <FPU::~FPU()>
c0028e6f:	83 c4 10             	add    esp,0x10
c0028e72:	90                   	nop
c0028e73:	83 c4 0c             	add    esp,0xc
c0028e76:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028e78 <x87::~x87()>:
c0028e78:	83 ec 0c             	sub    esp,0xc
c0028e7b:	83 ec 0c             	sub    esp,0xc
c0028e7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e82:	e8 cd ff ff ff       	call   c0028e54 <x87::~x87()>
c0028e87:	83 c4 10             	add    esp,0x10
c0028e8a:	83 ec 08             	sub    esp,0x8
c0028e8d:	68 58 01 00 00       	push   0x158
c0028e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e96:	e8 82 97 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028e9b:	83 c4 10             	add    esp,0x10
c0028e9e:	83 c4 0c             	add    esp,0xc
c0028ea1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028ea2 <IOAPIC::~IOAPIC()>:
c0028ea2:	83 ec 0c             	sub    esp,0xc
c0028ea5:	ba bc c6 02 c0       	mov    edx,0xc002c6bc
c0028eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eae:	89 10                	mov    DWORD PTR [eax],edx
c0028eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb4:	83 ec 0c             	sub    esp,0xc
c0028eb7:	50                   	push   eax
c0028eb8:	e8 3f ab fe ff       	call   c00139fc <Device::~Device()>
c0028ebd:	83 c4 10             	add    esp,0x10
c0028ec0:	90                   	nop
c0028ec1:	83 c4 0c             	add    esp,0xc
c0028ec4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028ec6 <IOAPIC::~IOAPIC()>:
c0028ec6:	83 ec 0c             	sub    esp,0xc
c0028ec9:	83 ec 0c             	sub    esp,0xc
c0028ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed0:	e8 cd ff ff ff       	call   c0028ea2 <IOAPIC::~IOAPIC()>
c0028ed5:	83 c4 10             	add    esp,0x10
c0028ed8:	83 ec 08             	sub    esp,0x8
c0028edb:	68 68 01 00 00       	push   0x168
c0028ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee4:	e8 34 97 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028ee9:	83 c4 10             	add    esp,0x10
c0028eec:	83 c4 0c             	add    esp,0xc
c0028eef:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028ef0 <APIC::~APIC()>:
c0028ef0:	83 ec 0c             	sub    esp,0xc
c0028ef3:	ba 74 c6 02 c0       	mov    edx,0xc002c674
c0028ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efc:	89 10                	mov    DWORD PTR [eax],edx
c0028efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f02:	83 ec 0c             	sub    esp,0xc
c0028f05:	50                   	push   eax
c0028f06:	e8 37 b6 fe ff       	call   c0014542 <InterruptController::~InterruptController()>
c0028f0b:	83 c4 10             	add    esp,0x10
c0028f0e:	90                   	nop
c0028f0f:	83 c4 0c             	add    esp,0xc
c0028f12:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028f14 <APIC::~APIC()>:
c0028f14:	83 ec 0c             	sub    esp,0xc
c0028f17:	83 ec 0c             	sub    esp,0xc
c0028f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f1e:	e8 cd ff ff ff       	call   c0028ef0 <APIC::~APIC()>
c0028f23:	83 c4 10             	add    esp,0x10
c0028f26:	83 ec 08             	sub    esp,0x8
c0028f29:	68 58 21 00 00       	push   0x2158
c0028f2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f32:	e8 e6 96 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028f37:	83 c4 10             	add    esp,0x10
c0028f3a:	83 c4 0c             	add    esp,0xc
c0028f3d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028f3e <PIC::~PIC()>:
c0028f3e:	83 ec 0c             	sub    esp,0xc
c0028f41:	ba 0c c7 02 c0       	mov    edx,0xc002c70c
c0028f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4a:	89 10                	mov    DWORD PTR [eax],edx
c0028f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f50:	83 ec 0c             	sub    esp,0xc
c0028f53:	50                   	push   eax
c0028f54:	e8 e9 b5 fe ff       	call   c0014542 <InterruptController::~InterruptController()>
c0028f59:	83 c4 10             	add    esp,0x10
c0028f5c:	90                   	nop
c0028f5d:	83 c4 0c             	add    esp,0xc
c0028f60:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028f62 <PIC::~PIC()>:
c0028f62:	83 ec 0c             	sub    esp,0xc
c0028f65:	83 ec 0c             	sub    esp,0xc
c0028f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6c:	e8 cd ff ff ff       	call   c0028f3e <PIC::~PIC()>
c0028f71:	83 c4 10             	add    esp,0x10
c0028f74:	83 ec 08             	sub    esp,0x8
c0028f77:	68 58 21 00 00       	push   0x2158
c0028f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f80:	e8 98 96 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028f85:	83 c4 10             	add    esp,0x10
c0028f88:	83 c4 0c             	add    esp,0xc
c0028f8b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028f8c <APICTimer::~APICTimer()>:
c0028f8c:	83 ec 0c             	sub    esp,0xc
c0028f8f:	ba 60 c7 02 c0       	mov    edx,0xc002c760
c0028f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f98:	89 10                	mov    DWORD PTR [eax],edx
c0028f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9e:	83 ec 0c             	sub    esp,0xc
c0028fa1:	50                   	push   eax
c0028fa2:	e8 f3 d5 fe ff       	call   c001659a <Timer::~Timer()>
c0028fa7:	83 c4 10             	add    esp,0x10
c0028faa:	90                   	nop
c0028fab:	83 c4 0c             	add    esp,0xc
c0028fae:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028fb0 <APICTimer::~APICTimer()>:
c0028fb0:	83 ec 0c             	sub    esp,0xc
c0028fb3:	83 ec 0c             	sub    esp,0xc
c0028fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fba:	e8 cd ff ff ff       	call   c0028f8c <APICTimer::~APICTimer()>
c0028fbf:	83 c4 10             	add    esp,0x10
c0028fc2:	83 ec 08             	sub    esp,0x8
c0028fc5:	68 60 01 00 00       	push   0x160
c0028fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fce:	e8 4a 96 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0028fd3:	83 c4 10             	add    esp,0x10
c0028fd6:	83 c4 0c             	add    esp,0xc
c0028fd9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028fda <PIT::~PIT()>:
c0028fda:	83 ec 0c             	sub    esp,0xc
c0028fdd:	ba b0 c7 02 c0       	mov    edx,0xc002c7b0
c0028fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe6:	89 10                	mov    DWORD PTR [eax],edx
c0028fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fec:	83 ec 0c             	sub    esp,0xc
c0028fef:	50                   	push   eax
c0028ff0:	e8 a5 d5 fe ff       	call   c001659a <Timer::~Timer()>
c0028ff5:	83 c4 10             	add    esp,0x10
c0028ff8:	90                   	nop
c0028ff9:	83 c4 0c             	add    esp,0xc
c0028ffc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028ffe <PIT::~PIT()>:
c0028ffe:	83 ec 0c             	sub    esp,0xc
c0029001:	83 ec 0c             	sub    esp,0xc
c0029004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029008:	e8 cd ff ff ff       	call   c0028fda <PIT::~PIT()>
c002900d:	83 c4 10             	add    esp,0x10
c0029010:	83 ec 08             	sub    esp,0x8
c0029013:	68 5c 01 00 00       	push   0x15c
c0029018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002901c:	e8 fc 95 fe ff       	call   c001261d <operator delete(void*, unsigned long)>
c0029021:	83 c4 10             	add    esp,0x10
c0029024:	83 c4 0c             	add    esp,0xc
c0029027:	c3                   	ret    
