
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b0 f9 00 00       	call   c000f9d0 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 7d 02 00       	call   c0027de8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 92 89 02 c0       	mov    ebx,0xc0028992
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a0 89 02 c0    	cmp    ebx,0xc00289a0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 d0 02 c0       	mov    eax,0xc002d058
c0000049:	3d 58 d0 02 c0       	cmp    eax,0xc002d058
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 d0 02 c0       	push   0xc002d058
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 d0 02 c0       	mov    eax,0xc002d058
c0000075:	2d 58 d0 02 c0       	sub    eax,0xc002d058
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 d0 02 c0       	push   0xc002d058
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d688,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a8 89 02 c0       	mov    ebx,0xc00289a8
c00000bb:	81 eb a4 89 02 c0    	sub    ebx,0xc00289a4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a4 89 02 c0       	mov    esi,0xc00289a4
c00000ca:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 d0 02 c0       	push   0xc002d058
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d688,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 d6 02 c0       	push   0xc002d690
c000012c:	68 58 d0 02 c0       	push   0xc002d058
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 e1 cc 01 00       	call   c001d07c <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 12 23 01 00       	call   c00126c5 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 bf cc 01 00       	call   c001d07c <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 0d d1 01 00       	call   c001d4e9 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 bb d6 01 00       	call   c001daa0 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 d0 da 02 c0 	lgdtd  ds:0xc002dad0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 f0 3f 01 00       	call   c00145c9 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>

c000063d <memcmp>:
c000063d:	56                   	push   esi
c000063e:	53                   	push   ebx
c000063f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064b:	01 d6                	add    esi,edx
c000064d:	39 f2                	cmp    edx,esi
c000064f:	74 0e                	je     c000065f <memcmp+0x22>
c0000651:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000654:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000657:	38 c8                	cmp    al,cl
c0000659:	75 08                	jne    c0000663 <memcmp+0x26>
c000065b:	42                   	inc    edx
c000065c:	43                   	inc    ebx
c000065d:	eb ee                	jmp    c000064d <memcmp+0x10>
c000065f:	31 c0                	xor    eax,eax
c0000661:	eb 02                	jmp    c0000665 <memcmp+0x28>
c0000663:	29 c8                	sub    eax,ecx
c0000665:	5b                   	pop    ebx
c0000666:	5e                   	pop    esi
c0000667:	c3                   	ret    

c0000668 <memmove>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000676:	39 c8                	cmp    eax,ecx
c0000678:	73 12                	jae    c000068c <memmove+0x24>
c000067a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067d:	89 c3                	mov    ebx,eax
c000067f:	39 f1                	cmp    ecx,esi
c0000681:	74 1a                	je     c000069d <memmove+0x35>
c0000683:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000685:	43                   	inc    ebx
c0000686:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000689:	41                   	inc    ecx
c000068a:	eb f3                	jmp    c000067f <memmove+0x17>
c000068c:	76 0f                	jbe    c000069d <memmove+0x35>
c000068e:	85 d2                	test   edx,edx
c0000690:	74 0b                	je     c000069d <memmove+0x35>
c0000692:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000696:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069a:	4a                   	dec    edx
c000069b:	eb f1                	jmp    c000068e <memmove+0x26>
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memcpy>:
c00006a0:	57                   	push   edi
c00006a1:	56                   	push   esi
c00006a2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00006a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006ae:	fc                   	cld    
c00006af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00006b1:	89 f8                	mov    eax,edi
c00006b3:	5e                   	pop    esi
c00006b4:	29 c8                	sub    eax,ecx
c00006b6:	5f                   	pop    edi
c00006b7:	c3                   	ret    

c00006b8 <memset>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c1:	89 c2                	mov    edx,eax
c00006c3:	01 c1                	add    ecx,eax
c00006c5:	39 ca                	cmp    edx,ecx
c00006c7:	74 0a                	je     c00006d3 <memset+0x1b>
c00006c9:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006cd:	42                   	inc    edx
c00006ce:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d1:	eb f2                	jmp    c00006c5 <memset+0xd>
c00006d3:	5b                   	pop    ebx
c00006d4:	c3                   	ret    

c00006d5 <strlen>:
c00006d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006d9:	31 c0                	xor    eax,eax
c00006db:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006df:	74 03                	je     c00006e4 <strlen+0xf>
c00006e1:	40                   	inc    eax
c00006e2:	eb f7                	jmp    c00006db <strlen+0x6>
c00006e4:	c3                   	ret    

c00006e5 <strpbrk>:
c00006e5:	53                   	push   ebx
c00006e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ea:	8a 08                	mov    cl,BYTE PTR [eax]
c00006ec:	84 c9                	test   cl,cl
c00006ee:	74 14                	je     c0000704 <strpbrk+0x1f>
c00006f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006f4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006f6:	84 db                	test   bl,bl
c00006f8:	74 07                	je     c0000701 <strpbrk+0x1c>
c00006fa:	38 cb                	cmp    bl,cl
c00006fc:	74 08                	je     c0000706 <strpbrk+0x21>
c00006fe:	42                   	inc    edx
c00006ff:	eb f3                	jmp    c00006f4 <strpbrk+0xf>
c0000701:	40                   	inc    eax
c0000702:	eb e6                	jmp    c00006ea <strpbrk+0x5>
c0000704:	31 c0                	xor    eax,eax
c0000706:	5b                   	pop    ebx
c0000707:	c3                   	ret    

c0000708 <strtok>:
c0000708:	56                   	push   esi
c0000709:	53                   	push   ebx
c000070a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000070e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000712:	85 db                	test   ebx,ebx
c0000714:	75 0e                	jne    c0000724 <strtok+0x1c>
c0000716:	8b 1d a8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a8
c000071c:	85 db                	test   ebx,ebx
c000071e:	75 04                	jne    c0000724 <strtok+0x1c>
c0000720:	31 db                	xor    ebx,ebx
c0000722:	eb 2e                	jmp    c0000752 <strtok+0x4a>
c0000724:	56                   	push   esi
c0000725:	53                   	push   ebx
c0000726:	e8 ba ff ff ff       	call   c00006e5 <strpbrk>
c000072b:	5a                   	pop    edx
c000072c:	a3 a8 d6 02 c0       	mov    ds:0xc002d6a8,eax
c0000731:	59                   	pop    ecx
c0000732:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0000737:	39 d8                	cmp    eax,ebx
c0000739:	75 07                	jne    c0000742 <strtok+0x3a>
c000073b:	43                   	inc    ebx
c000073c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000740:	eb e2                	jmp    c0000724 <strtok+0x1c>
c0000742:	85 c0                	test   eax,eax
c0000744:	74 da                	je     c0000720 <strtok+0x18>
c0000746:	8d 50 01             	lea    edx,[eax+0x1]
c0000749:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000074c:	89 15 a8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a8,edx
c0000752:	89 d8                	mov    eax,ebx
c0000754:	5b                   	pop    ebx
c0000755:	5e                   	pop    esi
c0000756:	c3                   	ret    

c0000757 <strcpy>:
c0000757:	53                   	push   ebx
c0000758:	31 d2                	xor    edx,edx
c000075a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000075e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000762:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000765:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000768:	84 c9                	test   cl,cl
c000076a:	74 06                	je     c0000772 <strcpy+0x1b>
c000076c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000076f:	42                   	inc    edx
c0000770:	eb ec                	jmp    c000075e <strcpy+0x7>
c0000772:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000775:	5b                   	pop    ebx
c0000776:	c3                   	ret    

c0000777 <strncpy>:
c0000777:	56                   	push   esi
c0000778:	53                   	push   ebx
c0000779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000781:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000785:	89 c3                	mov    ebx,eax
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 1a                	je     c00007a5 <strncpy+0x2e>
c000078b:	46                   	inc    esi
c000078c:	43                   	inc    ebx
c000078d:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000790:	49                   	dec    ecx
c0000791:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000794:	84 d2                	test   dl,dl
c0000796:	75 ef                	jne    c0000787 <strncpy+0x10>
c0000798:	31 d2                	xor    edx,edx
c000079a:	39 d1                	cmp    ecx,edx
c000079c:	74 07                	je     c00007a5 <strncpy+0x2e>
c000079e:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007a2:	42                   	inc    edx
c00007a3:	eb f5                	jmp    c000079a <strncpy+0x23>
c00007a5:	5b                   	pop    ebx
c00007a6:	5e                   	pop    esi
c00007a7:	c3                   	ret    

c00007a8 <strcmp>:
c00007a8:	31 c9                	xor    ecx,ecx
c00007aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007b2:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007b6:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007ba:	38 d0                	cmp    al,dl
c00007bc:	75 08                	jne    c00007c6 <strcmp+0x1e>
c00007be:	41                   	inc    ecx
c00007bf:	84 c0                	test   al,al
c00007c1:	75 e7                	jne    c00007aa <strcmp+0x2>
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	c3                   	ret    
c00007c6:	29 d0                	sub    eax,edx
c00007c8:	c3                   	ret    

c00007c9 <strchr>:
c00007c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007cd:	8a 10                	mov    dl,BYTE PTR [eax]
c00007cf:	84 d2                	test   dl,dl
c00007d1:	74 09                	je     c00007dc <strchr+0x13>
c00007d3:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007d7:	74 05                	je     c00007de <strchr+0x15>
c00007d9:	40                   	inc    eax
c00007da:	eb f1                	jmp    c00007cd <strchr+0x4>
c00007dc:	31 c0                	xor    eax,eax
c00007de:	c3                   	ret    

c00007df <strncmp>:
c00007df:	56                   	push   esi
c00007e0:	53                   	push   ebx
c00007e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ed:	01 d6                	add    esi,edx
c00007ef:	39 f2                	cmp    edx,esi
c00007f1:	74 12                	je     c0000805 <strncmp+0x26>
c00007f3:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007f6:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007f9:	38 c8                	cmp    al,cl
c00007fb:	75 0c                	jne    c0000809 <strncmp+0x2a>
c00007fd:	42                   	inc    edx
c00007fe:	84 c0                	test   al,al
c0000800:	74 03                	je     c0000805 <strncmp+0x26>
c0000802:	43                   	inc    ebx
c0000803:	eb ea                	jmp    c00007ef <strncmp+0x10>
c0000805:	31 c0                	xor    eax,eax
c0000807:	eb 02                	jmp    c000080b <strncmp+0x2c>
c0000809:	29 c8                	sub    eax,ecx
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    

c000080e <strcat>:
c000080e:	53                   	push   ebx
c000080f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000813:	89 c1                	mov    ecx,eax
c0000815:	8d 51 01             	lea    edx,[ecx+0x1]
c0000818:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000081c:	74 04                	je     c0000822 <strcat+0x14>
c000081e:	89 d1                	mov    ecx,edx
c0000820:	eb f3                	jmp    c0000815 <strcat+0x7>
c0000822:	31 d2                	xor    edx,edx
c0000824:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000828:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000082b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000082e:	42                   	inc    edx
c000082f:	84 db                	test   bl,bl
c0000831:	75 f1                	jne    c0000824 <strcat+0x16>
c0000833:	5b                   	pop    ebx
c0000834:	c3                   	ret    

c0000835 <strncat>:
c0000835:	56                   	push   esi
c0000836:	53                   	push   ebx
c0000837:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000843:	89 c2                	mov    edx,eax
c0000845:	85 db                	test   ebx,ebx
c0000847:	74 23                	je     c000086c <strncat+0x37>
c0000849:	8d 72 01             	lea    esi,[edx+0x1]
c000084c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000850:	74 04                	je     c0000856 <strncat+0x21>
c0000852:	89 f2                	mov    edx,esi
c0000854:	eb f3                	jmp    c0000849 <strncat+0x14>
c0000856:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000859:	41                   	inc    ecx
c000085a:	42                   	inc    edx
c000085b:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000085e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000861:	84 db                	test   bl,bl
c0000863:	74 07                	je     c000086c <strncat+0x37>
c0000865:	39 f1                	cmp    ecx,esi
c0000867:	75 f0                	jne    c0000859 <strncat+0x24>
c0000869:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000086c:	5b                   	pop    ebx
c000086d:	5e                   	pop    esi
c000086e:	c3                   	ret    

c000086f <strstr>:
c000086f:	57                   	push   edi
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000876:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087a:	57                   	push   edi
c000087b:	e8 55 fe ff ff       	call   c00006d5 <strlen>
c0000880:	59                   	pop    ecx
c0000881:	89 c6                	mov    esi,eax
c0000883:	85 c0                	test   eax,eax
c0000885:	74 1f                	je     c00008a6 <strstr+0x37>
c0000887:	53                   	push   ebx
c0000888:	e8 48 fe ff ff       	call   c00006d5 <strlen>
c000088d:	5a                   	pop    edx
c000088e:	39 f0                	cmp    eax,esi
c0000890:	72 12                	jb     c00008a4 <strstr+0x35>
c0000892:	56                   	push   esi
c0000893:	57                   	push   edi
c0000894:	53                   	push   ebx
c0000895:	e8 a3 fd ff ff       	call   c000063d <memcmp>
c000089a:	83 c4 0c             	add    esp,0xc
c000089d:	85 c0                	test   eax,eax
c000089f:	74 05                	je     c00008a6 <strstr+0x37>
c00008a1:	43                   	inc    ebx
c00008a2:	eb e3                	jmp    c0000887 <strstr+0x18>
c00008a4:	31 db                	xor    ebx,ebx
c00008a6:	89 d8                	mov    eax,ebx
c00008a8:	5b                   	pop    ebx
c00008a9:	5e                   	pop    esi
c00008aa:	5f                   	pop    edi
c00008ab:	c3                   	ret    

c00008ac <toupper>:
c00008ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b0:	0f b6 d0             	movzx  edx,al
c00008b3:	f6 82 c0 89 02 c0 02 	test   BYTE PTR [edx-0x3ffd7640],0x2
c00008ba:	74 03                	je     c00008bf <toupper+0x13>
c00008bc:	83 e8 20             	sub    eax,0x20
c00008bf:	c3                   	ret    

c00008c0 <tolower>:
c00008c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c4:	0f b6 d0             	movzx  edx,al
c00008c7:	f6 82 c0 89 02 c0 01 	test   BYTE PTR [edx-0x3ffd7640],0x1
c00008ce:	74 03                	je     c00008d3 <tolower+0x13>
c00008d0:	83 c0 20             	add    eax,0x20
c00008d3:	c3                   	ret    

c00008d4 <simple_strtoul>:
c00008d4:	55                   	push   ebp
c00008d5:	57                   	push   edi
c00008d6:	56                   	push   esi
c00008d7:	53                   	push   ebx
c00008d8:	83 ec 08             	sub    esp,0x8
c00008db:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008df:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008e3:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008e6:	f6 82 c0 89 02 c0 08 	test   BYTE PTR [edx-0x3ffd7640],0x8
c00008ed:	74 03                	je     c00008f2 <simple_strtoul+0x1e>
c00008ef:	41                   	inc    ecx
c00008f0:	eb f1                	jmp    c00008e3 <simple_strtoul+0xf>
c00008f2:	80 fa 09             	cmp    dl,0x9
c00008f5:	74 f8                	je     c00008ef <simple_strtoul+0x1b>
c00008f7:	80 fa 2d             	cmp    dl,0x2d
c00008fa:	75 0b                	jne    c0000907 <simple_strtoul+0x33>
c00008fc:	41                   	inc    ecx
c00008fd:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000905:	eb 0e                	jmp    c0000915 <simple_strtoul+0x41>
c0000907:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000090f:	80 fa 2b             	cmp    dl,0x2b
c0000912:	75 01                	jne    c0000915 <simple_strtoul+0x41>
c0000914:	41                   	inc    ecx
c0000915:	85 f6                	test   esi,esi
c0000917:	75 22                	jne    c000093b <simple_strtoul+0x67>
c0000919:	be 0a 00 00 00       	mov    esi,0xa
c000091e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000921:	75 5a                	jne    c000097d <simple_strtoul+0xa9>
c0000923:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000927:	50                   	push   eax
c0000928:	e8 93 ff ff ff       	call   c00008c0 <tolower>
c000092d:	5a                   	pop    edx
c000092e:	83 f8 78             	cmp    eax,0x78
c0000931:	74 03                	je     c0000936 <simple_strtoul+0x62>
c0000933:	41                   	inc    ecx
c0000934:	eb 16                	jmp    c000094c <simple_strtoul+0x78>
c0000936:	83 c1 02             	add    ecx,0x2
c0000939:	eb 22                	jmp    c000095d <simple_strtoul+0x89>
c000093b:	8d 46 fe             	lea    eax,[esi-0x2]
c000093e:	83 f8 22             	cmp    eax,0x22
c0000941:	0f 87 b7 00 00 00    	ja     c00009fe <simple_strtoul+0x12a>
c0000947:	83 fe 08             	cmp    esi,0x8
c000094a:	75 0c                	jne    c0000958 <simple_strtoul+0x84>
c000094c:	be 08 00 00 00       	mov    esi,0x8
c0000951:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000954:	75 27                	jne    c000097d <simple_strtoul+0xa9>
c0000956:	eb 1f                	jmp    c0000977 <simple_strtoul+0xa3>
c0000958:	83 fe 10             	cmp    esi,0x10
c000095b:	75 20                	jne    c000097d <simple_strtoul+0xa9>
c000095d:	be 10 00 00 00       	mov    esi,0x10
c0000962:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000965:	75 16                	jne    c000097d <simple_strtoul+0xa9>
c0000967:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000096b:	50                   	push   eax
c000096c:	e8 4f ff ff ff       	call   c00008c0 <tolower>
c0000971:	5d                   	pop    ebp
c0000972:	83 f8 78             	cmp    eax,0x78
c0000975:	74 03                	je     c000097a <simple_strtoul+0xa6>
c0000977:	41                   	inc    ecx
c0000978:	eb 03                	jmp    c000097d <simple_strtoul+0xa9>
c000097a:	83 c1 02             	add    ecx,0x2
c000097d:	31 ed                	xor    ebp,ebp
c000097f:	31 db                	xor    ebx,ebx
c0000981:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000988:	8a 11                	mov    dl,BYTE PTR [ecx]
c000098a:	84 d2                	test   dl,dl
c000098c:	74 27                	je     c00009b5 <simple_strtoul+0xe1>
c000098e:	0f b6 fa             	movzx  edi,dl
c0000991:	f6 87 c0 89 02 c0 04 	test   BYTE PTR [edi-0x3ffd7640],0x4
c0000998:	74 05                	je     c000099f <simple_strtoul+0xcb>
c000099a:	83 ef 30             	sub    edi,0x30
c000099d:	eb 22                	jmp    c00009c1 <simple_strtoul+0xed>
c000099f:	0f be d2             	movsx  edx,dl
c00009a2:	52                   	push   edx
c00009a3:	e8 04 ff ff ff       	call   c00008ac <toupper>
c00009a8:	5f                   	pop    edi
c00009a9:	0f b6 d0             	movzx  edx,al
c00009ac:	f6 82 c0 89 02 c0 01 	test   BYTE PTR [edx-0x3ffd7640],0x1
c00009b3:	75 09                	jne    c00009be <simple_strtoul+0xea>
c00009b5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009ba:	75 2d                	jne    c00009e9 <simple_strtoul+0x115>
c00009bc:	eb 57                	jmp    c0000a15 <simple_strtoul+0x141>
c00009be:	8d 78 c9             	lea    edi,[eax-0x37]
c00009c1:	39 f7                	cmp    edi,esi
c00009c3:	73 f0                	jae    c00009b5 <simple_strtoul+0xe1>
c00009c5:	31 d2                	xor    edx,edx
c00009c7:	89 f8                	mov    eax,edi
c00009c9:	f7 d0                	not    eax
c00009cb:	f7 f6                	div    esi
c00009cd:	39 d8                	cmp    eax,ebx
c00009cf:	72 0e                	jb     c00009df <simple_strtoul+0x10b>
c00009d1:	0f af de             	imul   ebx,esi
c00009d4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009db:	01 fb                	add    ebx,edi
c00009dd:	eb 07                	jmp    c00009e6 <simple_strtoul+0x112>
c00009df:	bd 01 00 00 00       	mov    ebp,0x1
c00009e4:	31 db                	xor    ebx,ebx
c00009e6:	41                   	inc    ecx
c00009e7:	eb 9f                	jmp    c0000988 <simple_strtoul+0xb4>
c00009e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009ec:	09 d8                	or     eax,ebx
c00009ee:	75 1f                	jne    c0000a0f <simple_strtoul+0x13b>
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009f8:	31 db                	xor    ebx,ebx
c00009fa:	89 38                	mov    DWORD PTR [eax],edi
c00009fc:	eb 17                	jmp    c0000a15 <simple_strtoul+0x141>
c00009fe:	31 db                	xor    ebx,ebx
c0000a00:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a05:	74 14                	je     c0000a1b <simple_strtoul+0x147>
c0000a07:	31 ed                	xor    ebp,ebp
c0000a09:	85 c9                	test   ecx,ecx
c0000a0b:	75 e3                	jne    c00009f0 <simple_strtoul+0x11c>
c0000a0d:	31 db                	xor    ebx,ebx
c0000a0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a13:	89 08                	mov    DWORD PTR [eax],ecx
c0000a15:	4d                   	dec    ebp
c0000a16:	75 03                	jne    c0000a1b <simple_strtoul+0x147>
c0000a18:	83 cb ff             	or     ebx,0xffffffff
c0000a1b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a20:	75 02                	jne    c0000a24 <simple_strtoul+0x150>
c0000a22:	f7 db                	neg    ebx
c0000a24:	83 c4 08             	add    esp,0x8
c0000a27:	89 d8                	mov    eax,ebx
c0000a29:	5b                   	pop    ebx
c0000a2a:	5e                   	pop    esi
c0000a2b:	5f                   	pop    edi
c0000a2c:	5d                   	pop    ebp
c0000a2d:	c3                   	ret    

c0000a2e <largebin_index>:
c0000a2e:	89 c2                	mov    edx,eax
c0000a30:	c1 ea 08             	shr    edx,0x8
c0000a33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a39:	77 10                	ja     c0000a4b <largebin_index+0x1d>
c0000a3b:	0f bd d2             	bsr    edx,edx
c0000a3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a41:	d3 e8                	shr    eax,cl
c0000a43:	83 e0 03             	and    eax,0x3
c0000a46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a4a:	c3                   	ret    
c0000a4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a50:	c3                   	ret    

c0000a51 <malloc_init_state>:
c0000a51:	53                   	push   ebx
c0000a52:	8d 50 34             	lea    edx,[eax+0x34]
c0000a55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a5b:	89 d1                	mov    ecx,edx
c0000a5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a63:	83 c2 08             	add    edx,0x8
c0000a66:	39 da                	cmp    edx,ebx
c0000a68:	75 f3                	jne    c0000a5d <malloc_init_state+0xc>
c0000a6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a76:	83 e2 03             	and    edx,0x3
c0000a79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a83:	83 ca 48             	or     edx,0x48
c0000a86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aa1:	89 10                	mov    DWORD PTR [eax],edx
c0000aa3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aa6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ab0:	5b                   	pop    ebx
c0000ab1:	c3                   	ret    

c0000ab2 <malloc_consolidate>:
c0000ab2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ab4:	85 d2                	test   edx,edx
c0000ab6:	0f 84 d8 00 00 00    	je     c0000b94 <malloc_consolidate+0xe2>
c0000abc:	55                   	push   ebp
c0000abd:	83 e2 fd             	and    edx,0xfffffffd
c0000ac0:	57                   	push   edi
c0000ac1:	89 c5                	mov    ebp,eax
c0000ac3:	56                   	push   esi
c0000ac4:	8d 78 34             	lea    edi,[eax+0x34]
c0000ac7:	53                   	push   ebx
c0000ac8:	83 ec 10             	sub    esp,0x10
c0000acb:	89 10                	mov    DWORD PTR [eax],edx
c0000acd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ad1:	c1 ea 03             	shr    edx,0x3
c0000ad4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ad8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000adc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000adf:	85 d2                	test   edx,edx
c0000ae1:	0f 84 98 00 00 00    	je     c0000b7f <malloc_consolidate+0xcd>
c0000ae7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000aee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000af1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000af4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000af8:	89 f9                	mov    ecx,edi
c0000afa:	83 e1 fe             	and    ecx,0xfffffffe
c0000afd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b03:	83 e3 fc             	and    ebx,0xfffffffc
c0000b06:	83 e7 01             	and    edi,0x1
c0000b09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b0c:	75 14                	jne    c0000b22 <malloc_consolidate+0x70>
c0000b0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b10:	29 fa                	sub    edx,edi
c0000b12:	01 f9                	add    ecx,edi
c0000b14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b17:	89 fb                	mov    ebx,edi
c0000b19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b25:	74 40                	je     c0000b67 <malloc_consolidate+0xb5>
c0000b27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b34:	83 e7 01             	and    edi,0x1
c0000b37:	75 0e                	jne    c0000b47 <malloc_consolidate+0x95>
c0000b39:	01 d9                	add    ecx,ebx
c0000b3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b4a:	89 ce                	mov    esi,ecx
c0000b4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b4f:	83 ce 01             	or     esi,0x1
c0000b52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b65:	eb 0c                	jmp    c0000b73 <malloc_consolidate+0xc1>
c0000b67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b6a:	83 c9 01             	or     ecx,0x1
c0000b6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b77:	85 d2                	test   edx,edx
c0000b79:	0f 85 6f ff ff ff    	jne    c0000aee <malloc_consolidate+0x3c>
c0000b7f:	83 c5 04             	add    ebp,0x4
c0000b82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b86:	0f 85 50 ff ff ff    	jne    c0000adc <malloc_consolidate+0x2a>
c0000b8c:	83 c4 10             	add    esp,0x10
c0000b8f:	5b                   	pop    ebx
c0000b90:	5e                   	pop    esi
c0000b91:	5f                   	pop    edi
c0000b92:	5d                   	pop    ebp
c0000b93:	c3                   	ret    
c0000b94:	e9 b8 fe ff ff       	jmp    c0000a51 <malloc_init_state>

c0000b99 <dlfree>:
c0000b99:	57                   	push   edi
c0000b9a:	56                   	push   esi
c0000b9b:	53                   	push   ebx
c0000b9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ba0:	85 db                	test   ebx,ebx
c0000ba2:	0f 84 e2 00 00 00    	je     c0000c8a <dlfree+0xf1>
c0000ba8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bab:	8b 0d c0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6c0
c0000bb1:	89 f0                	mov    eax,esi
c0000bb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bb6:	83 e0 fc             	and    eax,0xfffffffc
c0000bb9:	39 c1                	cmp    ecx,eax
c0000bbb:	72 24                	jb     c0000be1 <dlfree+0x48>
c0000bbd:	83 c9 03             	or     ecx,0x3
c0000bc0:	c1 e8 03             	shr    eax,0x3
c0000bc3:	89 0d c0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c0,ecx
c0000bc9:	83 e8 02             	sub    eax,0x2
c0000bcc:	8b 0c 85 c4 d6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd293c]
c0000bd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bd5:	89 14 85 c4 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd293c],edx
c0000bdc:	e9 a9 00 00 00       	jmp    c0000c8a <dlfree+0xf1>
c0000be1:	83 e6 02             	and    esi,0x2
c0000be4:	0f 85 a0 00 00 00    	jne    c0000c8a <dlfree+0xf1>
c0000bea:	83 c9 01             	or     ecx,0x1
c0000bed:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf0:	89 0d c0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c0,ecx
c0000bf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000bfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c00:	75 13                	jne    c0000c15 <dlfree+0x7c>
c0000c02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c05:	29 da                	sub    edx,ebx
c0000c07:	01 d8                	add    eax,ebx
c0000c09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c15:	39 35 ec d6 02 c0    	cmp    DWORD PTR ds:0xc002d6ec,esi
c0000c1b:	74 40                	je     c0000c5d <dlfree+0xc4>
c0000c1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c24:	80 e3 01             	and    bl,0x1
c0000c27:	75 0e                	jne    c0000c37 <dlfree+0x9e>
c0000c29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c2f:	01 c8                	add    eax,ecx
c0000c31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c37:	8b 0d fc d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6fc
c0000c3d:	c7 42 0c f4 d6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d6f4
c0000c44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c47:	89 15 fc d6 02 c0    	mov    DWORD PTR ds:0xc002d6fc,edx
c0000c4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c50:	89 c1                	mov    ecx,eax
c0000c52:	83 c9 01             	or     ecx,0x1
c0000c55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c5b:	eb 10                	jmp    c0000c6d <dlfree+0xd4>
c0000c5d:	01 c8                	add    eax,ecx
c0000c5f:	89 c1                	mov    ecx,eax
c0000c61:	83 c9 01             	or     ecx,0x1
c0000c64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c67:	89 15 ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,edx
c0000c6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c72:	76 16                	jbe    c0000c8a <dlfree+0xf1>
c0000c74:	f6 05 c0 d6 02 c0 02 	test   BYTE PTR ds:0xc002d6c0,0x2
c0000c7b:	74 0d                	je     c0000c8a <dlfree+0xf1>
c0000c7d:	5b                   	pop    ebx
c0000c7e:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0000c83:	5e                   	pop    esi
c0000c84:	5f                   	pop    edi
c0000c85:	e9 28 fe ff ff       	jmp    c0000ab2 <malloc_consolidate>
c0000c8a:	5b                   	pop    ebx
c0000c8b:	5e                   	pop    esi
c0000c8c:	5f                   	pop    edi
c0000c8d:	c3                   	ret    

c0000c8e <sYSMALLOc>:
c0000c8e:	55                   	push   ebp
c0000c8f:	57                   	push   edi
c0000c90:	56                   	push   esi
c0000c91:	53                   	push   ebx
c0000c92:	89 d3                	mov    ebx,edx
c0000c94:	83 ec 2c             	sub    esp,0x2c
c0000c97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ca1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ca4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ca7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cab:	74 1f                	je     c0000ccc <sYSMALLOc+0x3e>
c0000cad:	89 d8                	mov    eax,ebx
c0000caf:	e8 fe fd ff ff       	call   c0000ab2 <malloc_consolidate>
c0000cb4:	83 ec 0c             	sub    esp,0xc
c0000cb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cbb:	83 e8 07             	sub    eax,0x7
c0000cbe:	50                   	push   eax
c0000cbf:	e8 30 02 00 00       	call   c0000ef4 <dlmalloc>
c0000cc4:	83 c4 10             	add    esp,0x10
c0000cc7:	e9 20 02 00 00       	jmp    c0000eec <sYSMALLOc+0x25e>
c0000ccc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ccf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000cd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cd8:	83 e0 fc             	and    eax,0xfffffffc
c0000cdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ce3:	83 c0 10             	add    eax,0x10
c0000ce6:	01 c1                	add    ecx,eax
c0000ce8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cf3:	74 04                	je     c0000cf9 <sYSMALLOc+0x6b>
c0000cf5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cf9:	f7 da                	neg    edx
c0000cfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d03:	21 d1                	and    ecx,edx
c0000d05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d09:	7f 07                	jg     c0000d12 <sYSMALLOc+0x84>
c0000d0b:	31 c0                	xor    eax,eax
c0000d0d:	e9 da 01 00 00       	jmp    c0000eec <sYSMALLOc+0x25e>
c0000d12:	83 ec 0c             	sub    esp,0xc
c0000d15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d19:	e8 51 e7 00 00       	call   c000f46f <sbrk>
c0000d1e:	83 c4 10             	add    esp,0x10
c0000d21:	89 c6                	mov    esi,eax
c0000d23:	83 f8 ff             	cmp    eax,0xffffffff
c0000d26:	74 e3                	je     c0000d0b <sYSMALLOc+0x7d>
c0000d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d39:	39 f1                	cmp    ecx,esi
c0000d3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d41:	75 13                	jne    c0000d56 <sYSMALLOc+0xc8>
c0000d43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d4b:	83 c8 01             	or     eax,0x1
c0000d4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d51:	e9 3e 01 00 00       	jmp    c0000e94 <sYSMALLOc+0x206>
c0000d56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d5c:	88 d0                	mov    al,dl
c0000d5e:	83 e0 01             	and    eax,0x1
c0000d61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d6a:	0f 95 c0             	setne  al
c0000d6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d71:	39 f1                	cmp    ecx,esi
c0000d73:	76 12                	jbe    c0000d87 <sYSMALLOc+0xf9>
c0000d75:	84 c0                	test   al,al
c0000d77:	74 0e                	je     c0000d87 <sYSMALLOc+0xf9>
c0000d79:	83 e2 fe             	and    edx,0xfffffffe
c0000d7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d82:	e9 83 00 00 00       	jmp    c0000e0a <sYSMALLOc+0x17c>
c0000d87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d8c:	74 7c                	je     c0000e0a <sYSMALLOc+0x17c>
c0000d8e:	84 c0                	test   al,al
c0000d90:	74 0c                	je     c0000d9e <sYSMALLOc+0x110>
c0000d92:	89 f0                	mov    eax,esi
c0000d94:	29 c8                	sub    eax,ecx
c0000d96:	01 e8                	add    eax,ebp
c0000d98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d9e:	89 f2                	mov    edx,esi
c0000da0:	83 e2 07             	and    edx,0x7
c0000da3:	74 0c                	je     c0000db1 <sYSMALLOc+0x123>
c0000da5:	b8 08 00 00 00       	mov    eax,0x8
c0000daa:	29 d0                	sub    eax,edx
c0000dac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000daf:	eb 04                	jmp    c0000db5 <sYSMALLOc+0x127>
c0000db1:	89 f5                	mov    ebp,esi
c0000db3:	31 c0                	xor    eax,eax
c0000db5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000db9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dc1:	01 c1                	add    ecx,eax
c0000dc3:	83 ec 0c             	sub    esp,0xc
c0000dc6:	01 f1                	add    ecx,esi
c0000dc8:	01 ca                	add    edx,ecx
c0000dca:	29 c8                	sub    eax,ecx
c0000dcc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000dd0:	01 c2                	add    edx,eax
c0000dd2:	52                   	push   edx
c0000dd3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000dd7:	e8 93 e6 00 00       	call   c000f46f <sbrk>
c0000ddc:	83 c4 10             	add    esp,0x10
c0000ddf:	83 f8 ff             	cmp    eax,0xffffffff
c0000de2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000de6:	75 0f                	jne    c0000df7 <sYSMALLOc+0x169>
c0000de8:	83 ec 0c             	sub    esp,0xc
c0000deb:	6a 00                	push   0x0
c0000ded:	e8 7d e6 00 00       	call   c000f46f <sbrk>
c0000df2:	83 c4 10             	add    esp,0x10
c0000df5:	eb 30                	jmp    c0000e27 <sYSMALLOc+0x199>
c0000df7:	39 c6                	cmp    esi,eax
c0000df9:	76 33                	jbe    c0000e2e <sYSMALLOc+0x1a0>
c0000dfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e06:	01 f0                	add    eax,esi
c0000e08:	eb 1d                	jmp    c0000e27 <sYSMALLOc+0x199>
c0000e0a:	83 ec 0c             	sub    esp,0xc
c0000e0d:	89 f5                	mov    ebp,esi
c0000e0f:	6a 00                	push   0x0
c0000e11:	e8 59 e6 00 00       	call   c000f46f <sbrk>
c0000e16:	89 c2                	mov    edx,eax
c0000e18:	29 f2                	sub    edx,esi
c0000e1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e27:	31 d2                	xor    edx,edx
c0000e29:	83 f8 ff             	cmp    eax,0xffffffff
c0000e2c:	74 66                	je     c0000e94 <sYSMALLOc+0x206>
c0000e2e:	29 e8                	sub    eax,ebp
c0000e30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e33:	01 d0                	add    eax,edx
c0000e35:	83 c8 01             	or     eax,0x1
c0000e38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e46:	74 4c                	je     c0000e94 <sYSMALLOc+0x206>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	83 e8 0c             	sub    eax,0xc
c0000e4f:	83 e0 f8             	and    eax,0xfffffff8
c0000e52:	89 c2                	mov    edx,eax
c0000e54:	83 ca 01             	or     edx,0x1
c0000e57:	83 f8 0f             	cmp    eax,0xf
c0000e5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e6d:	76 25                	jbe    c0000e94 <sYSMALLOc+0x206>
c0000e6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e75:	83 ec 0c             	sub    esp,0xc
c0000e78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e82:	83 c7 08             	add    edi,0x8
c0000e85:	57                   	push   edi
c0000e86:	e8 0e fd ff ff       	call   c0000b99 <dlfree>
c0000e8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e91:	83 c4 10             	add    esp,0x10
c0000e94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ea0:	73 06                	jae    c0000ea8 <sYSMALLOc+0x21a>
c0000ea2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000ea8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000eae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000eb4:	73 06                	jae    c0000ebc <sYSMALLOc+0x22e>
c0000eb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ebc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ebf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ec2:	83 e2 fc             	and    edx,0xfffffffc
c0000ec5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ec9:	0f 82 3c fe ff ff    	jb     c0000d0b <sYSMALLOc+0x7d>
c0000ecf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ed3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ed6:	29 fa                	sub    edx,edi
c0000ed8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000edb:	83 ca 01             	or     edx,0x1
c0000ede:	89 fb                	mov    ebx,edi
c0000ee0:	83 c0 08             	add    eax,0x8
c0000ee3:	83 cb 01             	or     ebx,0x1
c0000ee6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ee9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eec:	83 c4 2c             	add    esp,0x2c
c0000eef:	5b                   	pop    ebx
c0000ef0:	5e                   	pop    esi
c0000ef1:	5f                   	pop    edi
c0000ef2:	5d                   	pop    ebp
c0000ef3:	c3                   	ret    

c0000ef4 <dlmalloc>:
c0000ef4:	55                   	push   ebp
c0000ef5:	57                   	push   edi
c0000ef6:	56                   	push   esi
c0000ef7:	53                   	push   ebx
c0000ef8:	83 ec 1c             	sub    esp,0x1c
c0000efb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000eff:	83 f8 df             	cmp    eax,0xffffffdf
c0000f02:	0f 87 70 03 00 00    	ja     c0001278 <dlmalloc+0x384>
c0000f08:	83 c0 0b             	add    eax,0xb
c0000f0b:	be 10 00 00 00       	mov    esi,0x10
c0000f10:	83 f8 0f             	cmp    eax,0xf
c0000f13:	76 05                	jbe    c0000f1a <dlmalloc+0x26>
c0000f15:	83 e0 f8             	and    eax,0xfffffff8
c0000f18:	89 c6                	mov    esi,eax
c0000f1a:	8b 3d c0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6c0
c0000f20:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f26:	75 17                	jne    c0000f3f <dlmalloc+0x4b>
c0000f28:	85 ff                	test   edi,edi
c0000f2a:	0f 85 05 03 00 00    	jne    c0001235 <dlmalloc+0x341>
c0000f30:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0000f35:	e8 78 fb ff ff       	call   c0000ab2 <malloc_consolidate>
c0000f3a:	e9 f6 02 00 00       	jmp    c0001235 <dlmalloc+0x341>
c0000f3f:	39 f7                	cmp    edi,esi
c0000f41:	72 1f                	jb     c0000f62 <dlmalloc+0x6e>
c0000f43:	89 f2                	mov    edx,esi
c0000f45:	c1 ea 03             	shr    edx,0x3
c0000f48:	83 ea 02             	sub    edx,0x2
c0000f4b:	8b 04 95 c4 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd293c]
c0000f52:	85 c0                	test   eax,eax
c0000f54:	74 0c                	je     c0000f62 <dlmalloc+0x6e>
c0000f56:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f59:	89 0c 95 c4 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd293c],ecx
c0000f60:	eb 30                	jmp    c0000f92 <dlmalloc+0x9e>
c0000f62:	89 f0                	mov    eax,esi
c0000f64:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f6a:	77 2e                	ja     c0000f9a <dlmalloc+0xa6>
c0000f6c:	c1 e8 03             	shr    eax,0x3
c0000f6f:	8d 14 c5 f4 d6 02 c0 	lea    edx,[eax*8-0x3ffd290c]
c0000f76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f7a:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f7d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f80:	39 c3                	cmp    ebx,eax
c0000f82:	74 2e                	je     c0000fb2 <dlmalloc+0xbe>
c0000f84:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f87:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f8c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f8f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f92:	83 c0 08             	add    eax,0x8
c0000f95:	e9 e0 02 00 00       	jmp    c000127a <dlmalloc+0x386>
c0000f9a:	e8 8f fa ff ff       	call   c0000a2e <largebin_index>
c0000f9f:	83 e7 02             	and    edi,0x2
c0000fa2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fa6:	74 0a                	je     c0000fb2 <dlmalloc+0xbe>
c0000fa8:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0000fad:	e8 00 fb ff ff       	call   c0000ab2 <malloc_consolidate>
c0000fb2:	8d 46 10             	lea    eax,[esi+0x10]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 1d 00 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d700
c0000fbf:	81 fb f4 d6 02 c0    	cmp    ebx,0xc002d6f4
c0000fc5:	0f 84 13 01 00 00    	je     c00010de <dlmalloc+0x1ea>
c0000fcb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fd1:	83 e7 fc             	and    edi,0xfffffffc
c0000fd4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fda:	77 4c                	ja     c0001028 <dlmalloc+0x134>
c0000fdc:	3d f4 d6 02 c0       	cmp    eax,0xc002d6f4
c0000fe1:	75 45                	jne    c0001028 <dlmalloc+0x134>
c0000fe3:	39 1d f0 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6f0,ebx
c0000fe9:	75 3d                	jne    c0001028 <dlmalloc+0x134>
c0000feb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fef:	73 37                	jae    c0001028 <dlmalloc+0x134>
c0000ff1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ff4:	89 fa                	mov    edx,edi
c0000ff6:	a3 fc d6 02 c0       	mov    ds:0xc002d6fc,eax
c0000ffb:	a3 00 d7 02 c0       	mov    ds:0xc002d700,eax
c0001000:	a3 f0 d6 02 c0       	mov    ds:0xc002d6f0,eax
c0001005:	29 f2                	sub    edx,esi
c0001007:	c7 40 08 f4 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d6f4
c000100e:	c7 40 0c f4 d6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d6f4
c0001015:	83 ce 01             	or     esi,0x1
c0001018:	89 d1                	mov    ecx,edx
c000101a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000101d:	83 c9 01             	or     ecx,0x1
c0001020:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001023:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001026:	eb 15                	jmp    c000103d <dlmalloc+0x149>
c0001028:	a3 00 d7 02 c0       	mov    ds:0xc002d700,eax
c000102d:	39 fe                	cmp    esi,edi
c000102f:	c7 40 08 f4 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d6f4
c0001036:	75 0d                	jne    c0001045 <dlmalloc+0x151>
c0001038:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000103d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001040:	e9 35 02 00 00       	jmp    c000127a <dlmalloc+0x386>
c0001045:	89 f8                	mov    eax,edi
c0001047:	81 ff ff 00 00 00    	cmp    edi,0xff
c000104d:	77 19                	ja     c0001068 <dlmalloc+0x174>
c000104f:	c1 e8 03             	shr    eax,0x3
c0001052:	8d 14 00             	lea    edx,[eax+eax*1]
c0001055:	83 c2 0d             	add    edx,0xd
c0001058:	8d 2c 95 b8 d6 02 c0 	lea    ebp,[edx*4-0x3ffd2948]
c000105f:	8b 14 95 c0 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2940]
c0001066:	eb 46                	jmp    c00010ae <dlmalloc+0x1ba>
c0001068:	e8 c1 f9 ff ff       	call   c0000a2e <largebin_index>
c000106d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001070:	83 c2 0d             	add    edx,0xd
c0001073:	8d 0c 95 c0 d6 02 c0 	lea    ecx,[edx*4-0x3ffd2940]
c000107a:	8b 14 95 c0 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2940]
c0001081:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001084:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001088:	89 d5                	mov    ebp,edx
c000108a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000108e:	74 1e                	je     c00010ae <dlmalloc+0x1ba>
c0001090:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001093:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001096:	77 12                	ja     c00010aa <dlmalloc+0x1b6>
c0001098:	83 cf 01             	or     edi,0x1
c000109b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000109e:	76 05                	jbe    c00010a5 <dlmalloc+0x1b1>
c00010a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010a3:	eb f6                	jmp    c000109b <dlmalloc+0x1a7>
c00010a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010a8:	eb 04                	jmp    c00010ae <dlmalloc+0x1ba>
c00010aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010ae:	89 c7                	mov    edi,eax
c00010b0:	88 c1                	mov    cl,al
c00010b2:	c1 ff 05             	sar    edi,0x5
c00010b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010b9:	bf 01 00 00 00       	mov    edi,0x1
c00010be:	d3 e7                	shl    edi,cl
c00010c0:	89 f8                	mov    eax,edi
c00010c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010c6:	09 04 bd f4 d9 02 c0 	or     DWORD PTR [edi*4-0x3ffd260c],eax
c00010cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010d9:	e9 db fe ff ff       	jmp    c0000fb9 <dlmalloc+0xc5>
c00010de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010e4:	76 78                	jbe    c000115e <dlmalloc+0x26a>
c00010e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010ea:	8d 04 c5 f4 d6 02 c0 	lea    eax,[eax*8-0x3ffd290c]
c00010f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010f7:	39 ca                	cmp    edx,ecx
c00010f9:	74 63                	je     c000115e <dlmalloc+0x26a>
c00010fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001101:	83 e3 fc             	and    ebx,0xfffffffc
c0001104:	39 de                	cmp    esi,ebx
c0001106:	77 52                	ja     c000115a <dlmalloc+0x266>
c0001108:	89 df                	mov    edi,ebx
c000110a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000110d:	29 f7                	sub    edi,esi
c000110f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001112:	01 d3                	add    ebx,edx
c0001114:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001117:	83 ff 0f             	cmp    edi,0xf
c000111a:	8d 42 08             	lea    eax,[edx+0x8]
c000111d:	77 09                	ja     c0001128 <dlmalloc+0x234>
c000111f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001123:	e9 52 01 00 00       	jmp    c000127a <dlmalloc+0x386>
c0001128:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000112b:	83 ce 01             	or     esi,0x1
c000112e:	89 0d fc d6 02 c0    	mov    DWORD PTR ds:0xc002d6fc,ecx
c0001134:	89 0d 00 d7 02 c0    	mov    DWORD PTR ds:0xc002d700,ecx
c000113a:	c7 41 08 f4 d6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d6f4
c0001141:	c7 41 0c f4 d6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d6f4
c0001148:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000114b:	89 fa                	mov    edx,edi
c000114d:	83 ca 01             	or     edx,0x1
c0001150:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001153:	89 3b                	mov    DWORD PTR [ebx],edi
c0001155:	e9 20 01 00 00       	jmp    c000127a <dlmalloc+0x386>
c000115a:	89 c2                	mov    edx,eax
c000115c:	eb 99                	jmp    c00010f7 <dlmalloc+0x203>
c000115e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001162:	b8 01 00 00 00       	mov    eax,0x1
c0001167:	41                   	inc    ecx
c0001168:	89 cb                	mov    ebx,ecx
c000116a:	8d 14 cd ec d6 02 c0 	lea    edx,[ecx*8-0x3ffd2914]
c0001171:	c1 eb 05             	shr    ebx,0x5
c0001174:	d3 e0                	shl    eax,cl
c0001176:	8b 3c 9d f4 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd260c]
c000117d:	39 f8                	cmp    eax,edi
c000117f:	77 04                	ja     c0001185 <dlmalloc+0x291>
c0001181:	85 c0                	test   eax,eax
c0001183:	75 26                	jne    c00011ab <dlmalloc+0x2b7>
c0001185:	43                   	inc    ebx
c0001186:	83 fb 02             	cmp    ebx,0x2
c0001189:	0f 87 a6 00 00 00    	ja     c0001235 <dlmalloc+0x341>
c000118f:	8b 3c 9d f4 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd260c]
c0001196:	85 ff                	test   edi,edi
c0001198:	74 eb                	je     c0001185 <dlmalloc+0x291>
c000119a:	89 d8                	mov    eax,ebx
c000119c:	c1 e0 06             	shl    eax,0x6
c000119f:	8d 14 85 ec d6 02 c0 	lea    edx,[eax*4-0x3ffd2914]
c00011a6:	b8 01 00 00 00       	mov    eax,0x1
c00011ab:	85 f8                	test   eax,edi
c00011ad:	75 07                	jne    c00011b6 <dlmalloc+0x2c2>
c00011af:	83 c2 08             	add    edx,0x8
c00011b2:	01 c0                	add    eax,eax
c00011b4:	eb f5                	jmp    c00011ab <dlmalloc+0x2b7>
c00011b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011b9:	39 ca                	cmp    edx,ecx
c00011bb:	75 14                	jne    c00011d1 <dlmalloc+0x2dd>
c00011bd:	89 c1                	mov    ecx,eax
c00011bf:	83 c2 08             	add    edx,0x8
c00011c2:	f7 d1                	not    ecx
c00011c4:	01 c0                	add    eax,eax
c00011c6:	21 cf                	and    edi,ecx
c00011c8:	89 3c 9d f4 d9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd260c],edi
c00011cf:	eb ac                	jmp    c000117d <dlmalloc+0x289>
c00011d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011d7:	83 e0 fc             	and    eax,0xfffffffc
c00011da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011dd:	89 c3                	mov    ebx,eax
c00011df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011e2:	29 f3                	sub    ebx,esi
c00011e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011e7:	83 fb 0f             	cmp    ebx,0xf
c00011ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00011ed:	77 09                	ja     c00011f8 <dlmalloc+0x304>
c00011ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011f3:	e9 82 00 00 00       	jmp    c000127a <dlmalloc+0x386>
c00011f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001201:	89 3d fc d6 02 c0    	mov    DWORD PTR ds:0xc002d6fc,edi
c0001207:	89 3d 00 d7 02 c0    	mov    DWORD PTR ds:0xc002d700,edi
c000120d:	c7 47 08 f4 d6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d6f4
c0001214:	c7 47 0c f4 d6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d6f4
c000121b:	77 06                	ja     c0001223 <dlmalloc+0x32f>
c000121d:	89 3d f0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f0,edi
c0001223:	83 ce 01             	or     esi,0x1
c0001226:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001229:	89 d9                	mov    ecx,ebx
c000122b:	83 c9 01             	or     ecx,0x1
c000122e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001231:	89 1a                	mov    DWORD PTR [edx],ebx
c0001233:	eb 45                	jmp    c000127a <dlmalloc+0x386>
c0001235:	a1 ec d6 02 c0       	mov    eax,ds:0xc002d6ec
c000123a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000123d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001240:	83 e2 fc             	and    edx,0xfffffffc
c0001243:	39 d1                	cmp    ecx,edx
c0001245:	77 1e                	ja     c0001265 <dlmalloc+0x371>
c0001247:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000124a:	89 f3                	mov    ebx,esi
c000124c:	89 0d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,ecx
c0001252:	83 cb 01             	or     ebx,0x1
c0001255:	29 f2                	sub    edx,esi
c0001257:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000125a:	83 ca 01             	or     edx,0x1
c000125d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001260:	e9 2d fd ff ff       	jmp    c0000f92 <dlmalloc+0x9e>
c0001265:	83 c4 1c             	add    esp,0x1c
c0001268:	89 f0                	mov    eax,esi
c000126a:	5b                   	pop    ebx
c000126b:	ba c0 d6 02 c0       	mov    edx,0xc002d6c0
c0001270:	5e                   	pop    esi
c0001271:	5f                   	pop    edi
c0001272:	5d                   	pop    ebp
c0001273:	e9 16 fa ff ff       	jmp    c0000c8e <sYSMALLOc>
c0001278:	31 c0                	xor    eax,eax
c000127a:	83 c4 1c             	add    esp,0x1c
c000127d:	5b                   	pop    ebx
c000127e:	5e                   	pop    esi
c000127f:	5f                   	pop    edi
c0001280:	5d                   	pop    ebp
c0001281:	c3                   	ret    

c0001282 <iALLOc>:
c0001282:	55                   	push   ebp
c0001283:	89 c5                	mov    ebp,eax
c0001285:	57                   	push   edi
c0001286:	56                   	push   esi
c0001287:	53                   	push   ebx
c0001288:	83 ec 2c             	sub    esp,0x2c
c000128b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000128f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001293:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001297:	83 3d c0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c0,0x0
c000129e:	75 12                	jne    c00012b2 <iALLOc+0x30>
c00012a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012a4:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00012a9:	e8 04 f8 ff ff       	call   c0000ab2 <malloc_consolidate>
c00012ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012b7:	74 12                	je     c00012cb <iALLOc+0x49>
c00012b9:	85 ed                	test   ebp,ebp
c00012bb:	0f 84 64 01 00 00    	je     c0001425 <iALLOc+0x1a3>
c00012c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012c9:	eb 33                	jmp    c00012fe <iALLOc+0x7c>
c00012cb:	85 ed                	test   ebp,ebp
c00012cd:	75 14                	jne    c00012e3 <iALLOc+0x61>
c00012cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012d7:	83 c4 2c             	add    esp,0x2c
c00012da:	5b                   	pop    ebx
c00012db:	5e                   	pop    esi
c00012dc:	5f                   	pop    edi
c00012dd:	5d                   	pop    ebp
c00012de:	e9 11 fc ff ff       	jmp    c0000ef4 <dlmalloc>
c00012e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012f2:	83 f8 0f             	cmp    eax,0xf
c00012f5:	76 07                	jbe    c00012fe <iALLOc+0x7c>
c00012f7:	83 e0 f8             	and    eax,0xfffffff8
c00012fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001303:	75 09                	jne    c000130e <iALLOc+0x8c>
c0001305:	89 d0                	mov    eax,edx
c0001307:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000130a:	31 f6                	xor    esi,esi
c000130c:	eb 3b                	jmp    c0001349 <iALLOc+0xc7>
c000130e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001310:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001318:	83 c0 0b             	add    eax,0xb
c000131b:	83 f8 0f             	cmp    eax,0xf
c000131e:	76 07                	jbe    c0001327 <iALLOc+0xa5>
c0001320:	83 e0 f8             	and    eax,0xfffffff8
c0001323:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001327:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000132b:	0f af f5             	imul   esi,ebp
c000132e:	eb 25                	jmp    c0001355 <iALLOc+0xd3>
c0001330:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001332:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001335:	bb 10 00 00 00       	mov    ebx,0x10
c000133a:	83 f9 0f             	cmp    ecx,0xf
c000133d:	76 05                	jbe    c0001344 <iALLOc+0xc2>
c000133f:	83 e1 f8             	and    ecx,0xfffffff8
c0001342:	89 cb                	mov    ebx,ecx
c0001344:	01 de                	add    esi,ebx
c0001346:	83 c0 04             	add    eax,0x4
c0001349:	39 c7                	cmp    edi,eax
c000134b:	75 e3                	jne    c0001330 <iALLOc+0xae>
c000134d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001355:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001359:	8b 1d 14 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da14
c000135f:	83 ec 0c             	sub    esp,0xc
c0001362:	c7 05 14 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da14,0x0
c000136c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001370:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001374:	50                   	push   eax
c0001375:	e8 7a fb ff ff       	call   c0000ef4 <dlmalloc>
c000137a:	83 c4 10             	add    esp,0x10
c000137d:	89 1d 14 da 02 c0    	mov    DWORD PTR ds:0xc002da14,ebx
c0001383:	85 c0                	test   eax,eax
c0001385:	0f 84 92 00 00 00    	je     c000141d <iALLOc+0x19b>
c000138b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000138e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001391:	83 e3 fc             	and    ebx,0xfffffffc
c0001394:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001398:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000139d:	74 1e                	je     c00013bd <iALLOc+0x13b>
c000139f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013a3:	89 d9                	mov    ecx,ebx
c00013a5:	52                   	push   edx
c00013a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013aa:	83 e9 04             	sub    ecx,0x4
c00013ad:	51                   	push   ecx
c00013ae:	6a 00                	push   0x0
c00013b0:	50                   	push   eax
c00013b1:	e8 02 f3 ff ff       	call   c00006b8 <memset>
c00013b6:	83 c4 10             	add    esp,0x10
c00013b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c2:	75 14                	jne    c00013d8 <iALLOc+0x156>
c00013c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00013c7:	29 f3                	sub    ebx,esi
c00013c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00013cc:	83 cb 01             	or     ebx,0x1
c00013cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013d6:	89 f3                	mov    ebx,esi
c00013d8:	31 c0                	xor    eax,eax
c00013da:	4d                   	dec    ebp
c00013db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013e2:	39 c5                	cmp    ebp,eax
c00013e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013e7:	74 2c                	je     c0001415 <iALLOc+0x193>
c00013e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013ed:	85 c9                	test   ecx,ecx
c00013ef:	75 15                	jne    c0001406 <iALLOc+0x184>
c00013f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013f7:	b9 10 00 00 00       	mov    ecx,0x10
c00013fc:	83 fe 0f             	cmp    esi,0xf
c00013ff:	76 05                	jbe    c0001406 <iALLOc+0x184>
c0001401:	83 e6 f8             	and    esi,0xfffffff8
c0001404:	89 f1                	mov    ecx,esi
c0001406:	89 ce                	mov    esi,ecx
c0001408:	29 cb                	sub    ebx,ecx
c000140a:	83 ce 01             	or     esi,0x1
c000140d:	40                   	inc    eax
c000140e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001411:	01 cf                	add    edi,ecx
c0001413:	eb c6                	jmp    c00013db <iALLOc+0x159>
c0001415:	83 cb 01             	or     ebx,0x1
c0001418:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000141b:	eb 08                	jmp    c0001425 <iALLOc+0x1a3>
c000141d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001425:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001429:	83 c4 2c             	add    esp,0x2c
c000142c:	5b                   	pop    ebx
c000142d:	5e                   	pop    esi
c000142e:	5f                   	pop    edi
c000142f:	5d                   	pop    ebp
c0001430:	c3                   	ret    

c0001431 <dlrealloc>:
c0001431:	55                   	push   ebp
c0001432:	57                   	push   edi
c0001433:	56                   	push   esi
c0001434:	53                   	push   ebx
c0001435:	83 ec 1c             	sub    esp,0x1c
c0001438:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000143c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001440:	85 db                	test   ebx,ebx
c0001442:	75 10                	jne    c0001454 <dlrealloc+0x23>
c0001444:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001448:	83 c4 1c             	add    esp,0x1c
c000144b:	5b                   	pop    ebx
c000144c:	5e                   	pop    esi
c000144d:	5f                   	pop    edi
c000144e:	5d                   	pop    ebp
c000144f:	e9 a0 fa ff ff       	jmp    c0000ef4 <dlmalloc>
c0001454:	83 f8 df             	cmp    eax,0xffffffdf
c0001457:	76 07                	jbe    c0001460 <dlrealloc+0x2f>
c0001459:	31 db                	xor    ebx,ebx
c000145b:	e9 7c 01 00 00       	jmp    c00015dc <dlrealloc+0x1ab>
c0001460:	83 c0 0b             	add    eax,0xb
c0001463:	bf 10 00 00 00       	mov    edi,0x10
c0001468:	83 f8 0f             	cmp    eax,0xf
c000146b:	76 05                	jbe    c0001472 <dlrealloc+0x41>
c000146d:	83 e0 f8             	and    eax,0xfffffff8
c0001470:	89 c7                	mov    edi,eax
c0001472:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001475:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001478:	89 c6                	mov    esi,eax
c000147a:	83 e6 fc             	and    esi,0xfffffffc
c000147d:	a8 02                	test   al,0x2
c000147f:	75 d8                	jne    c0001459 <dlrealloc+0x28>
c0001481:	39 f7                	cmp    edi,esi
c0001483:	0f 86 15 01 00 00    	jbe    c000159e <dlrealloc+0x16d>
c0001489:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c000148d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001490:	39 15 ec d6 02 c0    	cmp    DWORD PTR ds:0xc002d6ec,edx
c0001496:	75 33                	jne    c00014cb <dlrealloc+0x9a>
c0001498:	83 e1 fc             	and    ecx,0xfffffffc
c000149b:	01 f1                	add    ecx,esi
c000149d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014a1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014a4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014a8:	77 49                	ja     c00014f3 <dlrealloc+0xc2>
c00014aa:	01 fd                	add    ebp,edi
c00014ac:	83 e0 01             	and    eax,0x1
c00014af:	09 f8                	or     eax,edi
c00014b1:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014b4:	89 2d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,ebp
c00014ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014be:	29 f8                	sub    eax,edi
c00014c0:	83 c8 01             	or     eax,0x1
c00014c3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014c6:	e9 11 01 00 00       	jmp    c00015dc <dlrealloc+0x1ab>
c00014cb:	89 c8                	mov    eax,ecx
c00014cd:	83 e0 fe             	and    eax,0xfffffffe
c00014d0:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014d5:	75 1c                	jne    c00014f3 <dlrealloc+0xc2>
c00014d7:	83 e1 fc             	and    ecx,0xfffffffc
c00014da:	01 f1                	add    ecx,esi
c00014dc:	39 cf                	cmp    edi,ecx
c00014de:	77 13                	ja     c00014f3 <dlrealloc+0xc2>
c00014e0:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014e6:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014e9:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014ec:	89 ce                	mov    esi,ecx
c00014ee:	e9 ab 00 00 00       	jmp    c000159e <dlrealloc+0x16d>
c00014f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014f7:	8d 47 f9             	lea    eax,[edi-0x7]
c00014fa:	83 ec 0c             	sub    esp,0xc
c00014fd:	50                   	push   eax
c00014fe:	e8 f1 f9 ff ff       	call   c0000ef4 <dlmalloc>
c0001503:	83 c4 10             	add    esp,0x10
c0001506:	89 c1                	mov    ecx,eax
c0001508:	85 c0                	test   eax,eax
c000150a:	0f 84 49 ff ff ff    	je     c0001459 <dlrealloc+0x28>
c0001510:	8d 40 f8             	lea    eax,[eax-0x8]
c0001513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001517:	39 c2                	cmp    edx,eax
c0001519:	75 0a                	jne    c0001525 <dlrealloc+0xf4>
c000151b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000151e:	83 e0 fc             	and    eax,0xfffffffc
c0001521:	01 c6                	add    esi,eax
c0001523:	eb 79                	jmp    c000159e <dlrealloc+0x16d>
c0001525:	83 ee 04             	sub    esi,0x4
c0001528:	83 fe 27             	cmp    esi,0x27
c000152b:	76 16                	jbe    c0001543 <dlrealloc+0x112>
c000152d:	50                   	push   eax
c000152e:	56                   	push   esi
c000152f:	53                   	push   ebx
c0001530:	51                   	push   ecx
c0001531:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001535:	e8 66 f1 ff ff       	call   c00006a0 <memcpy>
c000153a:	83 c4 10             	add    esp,0x10
c000153d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001541:	eb 43                	jmp    c0001586 <dlrealloc+0x155>
c0001543:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001545:	83 fe 13             	cmp    esi,0x13
c0001548:	89 01                	mov    DWORD PTR [ecx],eax
c000154a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000154d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001550:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001553:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001556:	76 2e                	jbe    c0001586 <dlrealloc+0x155>
c0001558:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000155b:	83 fe 1b             	cmp    esi,0x1b
c000155e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001561:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001564:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001567:	76 1d                	jbe    c0001586 <dlrealloc+0x155>
c0001569:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000156c:	83 fe 23             	cmp    esi,0x23
c000156f:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001572:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001575:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001578:	76 0c                	jbe    c0001586 <dlrealloc+0x155>
c000157a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000157d:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001580:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001583:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	83 ec 0c             	sub    esp,0xc
c000158d:	53                   	push   ebx
c000158e:	e8 06 f6 ff ff       	call   c0000b99 <dlfree>
c0001593:	83 c4 10             	add    esp,0x10
c0001596:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000159a:	89 cb                	mov    ebx,ecx
c000159c:	eb 3e                	jmp    c00015dc <dlrealloc+0x1ab>
c000159e:	89 f2                	mov    edx,esi
c00015a0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015a3:	29 fa                	sub    edx,edi
c00015a5:	83 e1 01             	and    ecx,0x1
c00015a8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015ac:	83 fa 0f             	cmp    edx,0xf
c00015af:	77 0b                	ja     c00015bc <dlrealloc+0x18b>
c00015b1:	09 ce                	or     esi,ecx
c00015b3:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015b6:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015ba:	eb 20                	jmp    c00015dc <dlrealloc+0x1ab>
c00015bc:	01 fd                	add    ebp,edi
c00015be:	83 ec 0c             	sub    esp,0xc
c00015c1:	09 cf                	or     edi,ecx
c00015c3:	83 ca 01             	or     edx,0x1
c00015c6:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015c9:	83 c5 08             	add    ebp,0x8
c00015cc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015cf:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d3:	55                   	push   ebp
c00015d4:	e8 c0 f5 ff ff       	call   c0000b99 <dlfree>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	83 c4 1c             	add    esp,0x1c
c00015df:	89 d8                	mov    eax,ebx
c00015e1:	5b                   	pop    ebx
c00015e2:	5e                   	pop    esi
c00015e3:	5f                   	pop    edi
c00015e4:	5d                   	pop    ebp
c00015e5:	c3                   	ret    

c00015e6 <dlmemalign>:
c00015e6:	55                   	push   ebp
c00015e7:	57                   	push   edi
c00015e8:	56                   	push   esi
c00015e9:	53                   	push   ebx
c00015ea:	83 ec 0c             	sub    esp,0xc
c00015ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015f5:	83 fa 08             	cmp    edx,0x8
c00015f8:	77 10                	ja     c000160a <dlmemalign+0x24>
c00015fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015fe:	83 c4 0c             	add    esp,0xc
c0001601:	5b                   	pop    ebx
c0001602:	5e                   	pop    esi
c0001603:	5f                   	pop    edi
c0001604:	5d                   	pop    ebp
c0001605:	e9 ea f8 ff ff       	jmp    c0000ef4 <dlmalloc>
c000160a:	bf 10 00 00 00       	mov    edi,0x10
c000160f:	83 fa 0f             	cmp    edx,0xf
c0001612:	76 13                	jbe    c0001627 <dlmemalign+0x41>
c0001614:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001617:	85 d1                	test   ecx,edx
c0001619:	75 04                	jne    c000161f <dlmemalign+0x39>
c000161b:	89 d7                	mov    edi,edx
c000161d:	eb 08                	jmp    c0001627 <dlmemalign+0x41>
c000161f:	39 d7                	cmp    edi,edx
c0001621:	73 04                	jae    c0001627 <dlmemalign+0x41>
c0001623:	01 ff                	add    edi,edi
c0001625:	eb f8                	jmp    c000161f <dlmemalign+0x39>
c0001627:	83 f8 df             	cmp    eax,0xffffffdf
c000162a:	76 07                	jbe    c0001633 <dlmemalign+0x4d>
c000162c:	31 c0                	xor    eax,eax
c000162e:	e9 ce 00 00 00       	jmp    c0001701 <dlmemalign+0x11b>
c0001633:	83 c0 0b             	add    eax,0xb
c0001636:	bd 10 00 00 00       	mov    ebp,0x10
c000163b:	83 f8 0f             	cmp    eax,0xf
c000163e:	76 05                	jbe    c0001645 <dlmemalign+0x5f>
c0001640:	83 e0 f8             	and    eax,0xfffffff8
c0001643:	89 c5                	mov    ebp,eax
c0001645:	83 ec 0c             	sub    esp,0xc
c0001648:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000164c:	50                   	push   eax
c000164d:	e8 a2 f8 ff ff       	call   c0000ef4 <dlmalloc>
c0001652:	83 c4 10             	add    esp,0x10
c0001655:	89 c1                	mov    ecx,eax
c0001657:	85 c0                	test   eax,eax
c0001659:	74 d1                	je     c000162c <dlmemalign+0x46>
c000165b:	31 d2                	xor    edx,edx
c000165d:	8d 70 f8             	lea    esi,[eax-0x8]
c0001660:	f7 f7                	div    edi
c0001662:	85 d2                	test   edx,edx
c0001664:	74 62                	je     c00016c8 <dlmemalign+0xe2>
c0001666:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000166a:	89 f8                	mov    eax,edi
c000166c:	f7 d8                	neg    eax
c000166e:	21 c3                	and    ebx,eax
c0001670:	83 eb 08             	sub    ebx,0x8
c0001673:	89 d8                	mov    eax,ebx
c0001675:	29 f0                	sub    eax,esi
c0001677:	83 f8 0f             	cmp    eax,0xf
c000167a:	77 02                	ja     c000167e <dlmemalign+0x98>
c000167c:	01 fb                	add    ebx,edi
c000167e:	89 d8                	mov    eax,ebx
c0001680:	29 f0                	sub    eax,esi
c0001682:	89 c6                	mov    esi,eax
c0001684:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001687:	89 c2                	mov    edx,eax
c0001689:	83 e2 fc             	and    edx,0xfffffffc
c000168c:	29 f2                	sub    edx,esi
c000168e:	a8 02                	test   al,0x2
c0001690:	74 10                	je     c00016a2 <dlmemalign+0xbc>
c0001692:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001695:	83 ca 02             	or     edx,0x2
c0001698:	8d 43 08             	lea    eax,[ebx+0x8]
c000169b:	89 33                	mov    DWORD PTR [ebx],esi
c000169d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016a0:	eb 5f                	jmp    c0001701 <dlmemalign+0x11b>
c00016a2:	83 ec 0c             	sub    esp,0xc
c00016a5:	89 d0                	mov    eax,edx
c00016a7:	83 c8 01             	or     eax,0x1
c00016aa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016ad:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016b2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016b5:	83 e0 01             	and    eax,0x1
c00016b8:	09 f0                	or     eax,esi
c00016ba:	89 de                	mov    esi,ebx
c00016bc:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016bf:	51                   	push   ecx
c00016c0:	e8 d4 f4 ff ff       	call   c0000b99 <dlfree>
c00016c5:	83 c4 10             	add    esp,0x10
c00016c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016cb:	a8 02                	test   al,0x2
c00016cd:	75 2f                	jne    c00016fe <dlmemalign+0x118>
c00016cf:	83 e0 fc             	and    eax,0xfffffffc
c00016d2:	8d 55 10             	lea    edx,[ebp+0x10]
c00016d5:	39 c2                	cmp    edx,eax
c00016d7:	73 25                	jae    c00016fe <dlmemalign+0x118>
c00016d9:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016dc:	83 ec 0c             	sub    esp,0xc
c00016df:	29 e8                	sub    eax,ebp
c00016e1:	83 c2 08             	add    edx,0x8
c00016e4:	83 c8 01             	or     eax,0x1
c00016e7:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016ed:	83 e0 01             	and    eax,0x1
c00016f0:	09 c5                	or     ebp,eax
c00016f2:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016f5:	52                   	push   edx
c00016f6:	e8 9e f4 ff ff       	call   c0000b99 <dlfree>
c00016fb:	83 c4 10             	add    esp,0x10
c00016fe:	8d 46 08             	lea    eax,[esi+0x8]
c0001701:	83 c4 0c             	add    esp,0xc
c0001704:	5b                   	pop    ebx
c0001705:	5e                   	pop    esi
c0001706:	5f                   	pop    edi
c0001707:	5d                   	pop    ebp
c0001708:	c3                   	ret    

c0001709 <dlcalloc>:
c0001709:	53                   	push   ebx
c000170a:	83 ec 14             	sub    esp,0x14
c000170d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001711:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001716:	50                   	push   eax
c0001717:	e8 d8 f7 ff ff       	call   c0000ef4 <dlmalloc>
c000171c:	83 c4 10             	add    esp,0x10
c000171f:	89 c3                	mov    ebx,eax
c0001721:	85 c0                	test   eax,eax
c0001723:	74 77                	je     c000179c <dlcalloc+0x93>
c0001725:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001728:	89 d0                	mov    eax,edx
c000172a:	83 e0 fc             	and    eax,0xfffffffc
c000172d:	80 e2 02             	and    dl,0x2
c0001730:	75 5a                	jne    c000178c <dlcalloc+0x83>
c0001732:	83 e8 04             	sub    eax,0x4
c0001735:	83 f8 27             	cmp    eax,0x27
c0001738:	76 03                	jbe    c000173d <dlcalloc+0x34>
c000173a:	51                   	push   ecx
c000173b:	eb 53                	jmp    c0001790 <dlcalloc+0x87>
c000173d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001743:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000174a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001751:	83 f8 13             	cmp    eax,0x13
c0001754:	76 46                	jbe    c000179c <dlcalloc+0x93>
c0001756:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000175d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001764:	83 f8 1b             	cmp    eax,0x1b
c0001767:	76 33                	jbe    c000179c <dlcalloc+0x93>
c0001769:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001770:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001777:	83 f8 23             	cmp    eax,0x23
c000177a:	76 20                	jbe    c000179c <dlcalloc+0x93>
c000177c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001783:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000178a:	eb 10                	jmp    c000179c <dlcalloc+0x93>
c000178c:	83 e8 08             	sub    eax,0x8
c000178f:	52                   	push   edx
c0001790:	50                   	push   eax
c0001791:	6a 00                	push   0x0
c0001793:	53                   	push   ebx
c0001794:	e8 1f ef ff ff       	call   c00006b8 <memset>
c0001799:	83 c4 10             	add    esp,0x10
c000179c:	89 d8                	mov    eax,ebx
c000179e:	83 c4 08             	add    esp,0x8
c00017a1:	5b                   	pop    ebx
c00017a2:	c3                   	ret    

c00017a3 <dlcfree>:
c00017a3:	e9 f1 f3 ff ff       	jmp    c0000b99 <dlfree>

c00017a8 <dlindependent_calloc>:
c00017a8:	83 ec 28             	sub    esp,0x28
c00017ab:	b9 03 00 00 00       	mov    ecx,0x3
c00017b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017bc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c4:	e8 b9 fa ff ff       	call   c0001282 <iALLOc>
c00017c9:	83 c4 2c             	add    esp,0x2c
c00017cc:	c3                   	ret    

c00017cd <dlindependent_comalloc>:
c00017cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017d5:	31 c9                	xor    ecx,ecx
c00017d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017df:	e9 9e fa ff ff       	jmp    c0001282 <iALLOc>

c00017e4 <dlvalloc>:
c00017e4:	83 ec 0c             	sub    esp,0xc
c00017e7:	83 3d c0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c0,0x0
c00017ee:	75 0a                	jne    c00017fa <dlvalloc+0x16>
c00017f0:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00017f5:	e8 b8 f2 ff ff       	call   c0000ab2 <malloc_consolidate>
c00017fa:	50                   	push   eax
c00017fb:	50                   	push   eax
c00017fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001800:	ff 35 1c da 02 c0    	push   DWORD PTR ds:0xc002da1c
c0001806:	e8 db fd ff ff       	call   c00015e6 <dlmemalign>
c000180b:	83 c4 1c             	add    esp,0x1c
c000180e:	c3                   	ret    

c000180f <dlpvalloc>:
c000180f:	83 ec 0c             	sub    esp,0xc
c0001812:	83 3d c0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c0,0x0
c0001819:	75 0a                	jne    c0001825 <dlpvalloc+0x16>
c000181b:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0001820:	e8 8d f2 ff ff       	call   c0000ab2 <malloc_consolidate>
c0001825:	a1 1c da 02 c0       	mov    eax,ds:0xc002da1c
c000182a:	89 c1                	mov    ecx,eax
c000182c:	52                   	push   edx
c000182d:	f7 d9                	neg    ecx
c000182f:	52                   	push   edx
c0001830:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001834:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001838:	21 ca                	and    edx,ecx
c000183a:	52                   	push   edx
c000183b:	50                   	push   eax
c000183c:	e8 a5 fd ff ff       	call   c00015e6 <dlmemalign>
c0001841:	83 c4 1c             	add    esp,0x1c
c0001844:	c3                   	ret    

c0001845 <dlmalloc_trim>:
c0001845:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c000184a:	e8 63 f2 ff ff       	call   c0000ab2 <malloc_consolidate>
c000184f:	31 c0                	xor    eax,eax
c0001851:	c3                   	ret    

c0001852 <dlmalloc_usable_size>:
c0001852:	53                   	push   ebx
c0001853:	31 c0                	xor    eax,eax
c0001855:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001859:	85 c9                	test   ecx,ecx
c000185b:	74 24                	je     c0001881 <dlmalloc_usable_size+0x2f>
c000185d:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001860:	f6 c2 02             	test   dl,0x2
c0001863:	74 08                	je     c000186d <dlmalloc_usable_size+0x1b>
c0001865:	83 e2 fc             	and    edx,0xfffffffc
c0001868:	8d 42 f8             	lea    eax,[edx-0x8]
c000186b:	eb 14                	jmp    c0001881 <dlmalloc_usable_size+0x2f>
c000186d:	89 d3                	mov    ebx,edx
c000186f:	31 c0                	xor    eax,eax
c0001871:	83 e3 fe             	and    ebx,0xfffffffe
c0001874:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001879:	74 06                	je     c0001881 <dlmalloc_usable_size+0x2f>
c000187b:	83 e2 fc             	and    edx,0xfffffffc
c000187e:	8d 42 fc             	lea    eax,[edx-0x4]
c0001881:	5b                   	pop    ebx
c0001882:	c3                   	ret    

c0001883 <dlmallinfo>:
c0001883:	55                   	push   ebp
c0001884:	57                   	push   edi
c0001885:	56                   	push   esi
c0001886:	53                   	push   ebx
c0001887:	83 ec 08             	sub    esp,0x8
c000188a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000188e:	83 3d ec d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6ec,0x0
c0001895:	75 0a                	jne    c00018a1 <dlmallinfo+0x1e>
c0001897:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c000189c:	e8 11 f2 ff ff       	call   c0000ab2 <malloc_consolidate>
c00018a1:	a1 ec d6 02 c0       	mov    eax,ds:0xc002d6ec
c00018a6:	31 ed                	xor    ebp,ebp
c00018a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018ab:	31 c9                	xor    ecx,ecx
c00018ad:	83 e0 fc             	and    eax,0xfffffffc
c00018b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018b4:	31 c0                	xor    eax,eax
c00018b6:	8b 14 85 c4 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd293c]
c00018bd:	85 d2                	test   edx,edx
c00018bf:	74 0e                	je     c00018cf <dlmallinfo+0x4c>
c00018c1:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018c4:	45                   	inc    ebp
c00018c5:	83 e6 fc             	and    esi,0xfffffffc
c00018c8:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018cb:	01 f1                	add    ecx,esi
c00018cd:	eb ee                	jmp    c00018bd <dlmallinfo+0x3a>
c00018cf:	40                   	inc    eax
c00018d0:	83 f8 0a             	cmp    eax,0xa
c00018d3:	75 e1                	jne    c00018b6 <dlmallinfo+0x33>
c00018d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018d9:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018e0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018e3:	b8 f4 d6 02 c0       	mov    eax,0xc002d6f4
c00018e8:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018eb:	39 f0                	cmp    eax,esi
c00018ed:	74 10                	je     c00018ff <dlmallinfo+0x7c>
c00018ef:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018f2:	ff 04 24             	inc    DWORD PTR [esp]
c00018f5:	83 e7 fc             	and    edi,0xfffffffc
c00018f8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018fb:	01 fa                	add    edx,edi
c00018fd:	eb ec                	jmp    c00018eb <dlmallinfo+0x68>
c00018ff:	83 c0 08             	add    eax,0x8
c0001902:	3d ec d9 02 c0       	cmp    eax,0xc002d9ec
c0001907:	75 df                	jne    c00018e8 <dlmallinfo+0x65>
c0001909:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000190c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000190f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001912:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c0001917:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000191a:	89 03                	mov    DWORD PTR [ebx],eax
c000191c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000191f:	8b 35 10 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da10
c0001925:	29 d0                	sub    eax,edx
c0001927:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000192a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000192d:	8b 35 24 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da24
c0001933:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001937:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000193a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000193d:	8b 35 34 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da34
c0001943:	89 d8                	mov    eax,ebx
c0001945:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001948:	83 c4 08             	add    esp,0x8
c000194b:	5b                   	pop    ebx
c000194c:	5e                   	pop    esi
c000194d:	5f                   	pop    edi
c000194e:	5d                   	pop    ebp
c000194f:	c2 04 00             	ret    0x4

c0001952 <dlmalloc_stats>:
c0001952:	83 ec 30             	sub    esp,0x30
c0001955:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001959:	50                   	push   eax
c000195a:	e8 24 ff ff ff       	call   c0001883 <dlmallinfo>
c000195f:	83 c4 30             	add    esp,0x30
c0001962:	c3                   	ret    

c0001963 <dlmallopt>:
c0001963:	56                   	push   esi
c0001964:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0001969:	53                   	push   ebx
c000196a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000196e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001972:	e8 3b f1 ff ff       	call   c0000ab2 <malloc_consolidate>
c0001977:	8d 46 04             	lea    eax,[esi+0x4]
c000197a:	83 f8 05             	cmp    eax,0x5
c000197d:	77 67                	ja     c00019e6 <dlmallopt+0x83>
c000197f:	ff 24 85 c4 8a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd753c]
c0001986:	83 fb 50             	cmp    ebx,0x50
c0001989:	77 5b                	ja     c00019e6 <dlmallopt+0x83>
c000198b:	ba 08 00 00 00       	mov    edx,0x8
c0001990:	85 db                	test   ebx,ebx
c0001992:	74 12                	je     c00019a6 <dlmallopt+0x43>
c0001994:	83 c3 0b             	add    ebx,0xb
c0001997:	ba 10 00 00 00       	mov    edx,0x10
c000199c:	83 fb 0f             	cmp    ebx,0xf
c000199f:	76 05                	jbe    c00019a6 <dlmallopt+0x43>
c00019a1:	89 da                	mov    edx,ebx
c00019a3:	83 e2 f8             	and    edx,0xfffffff8
c00019a6:	a1 c0 d6 02 c0       	mov    eax,ds:0xc002d6c0
c00019ab:	83 e0 03             	and    eax,0x3
c00019ae:	09 d0                	or     eax,edx
c00019b0:	a3 c0 d6 02 c0       	mov    ds:0xc002d6c0,eax
c00019b5:	eb 31                	jmp    c00019e8 <dlmallopt+0x85>
c00019b7:	89 1d 04 da 02 c0    	mov    DWORD PTR ds:0xc002da04,ebx
c00019bd:	eb 06                	jmp    c00019c5 <dlmallopt+0x62>
c00019bf:	89 1d 08 da 02 c0    	mov    DWORD PTR ds:0xc002da08,ebx
c00019c5:	be 01 00 00 00       	mov    esi,0x1
c00019ca:	eb 1c                	jmp    c00019e8 <dlmallopt+0x85>
c00019cc:	89 1d 0c da 02 c0    	mov    DWORD PTR ds:0xc002da0c,ebx
c00019d2:	eb f1                	jmp    c00019c5 <dlmallopt+0x62>
c00019d4:	31 f6                	xor    esi,esi
c00019d6:	85 db                	test   ebx,ebx
c00019d8:	75 0e                	jne    c00019e8 <dlmallopt+0x85>
c00019da:	c7 05 14 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da14,0x0
c00019e4:	eb df                	jmp    c00019c5 <dlmallopt+0x62>
c00019e6:	31 f6                	xor    esi,esi
c00019e8:	89 f0                	mov    eax,esi
c00019ea:	5b                   	pop    ebx
c00019eb:	5e                   	pop    esi
c00019ec:	c3                   	ret    

c00019ed <disk_status>:
c00019ed:	31 c0                	xor    eax,eax
c00019ef:	c3                   	ret    

c00019f0 <disk_initialize>:
c00019f0:	31 c0                	xor    eax,eax
c00019f2:	c3                   	ret    

c00019f3 <disk_read>:
c00019f3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019f8:	0f b6 04 85 a0 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee60]
c0001a00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a04:	e9 8f ea 01 00       	jmp    c0020498 <fatWrapperReadDisk>

c0001a09 <disk_write>:
c0001a09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a0e:	0f b6 04 85 a0 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee60]
c0001a16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a1a:	e9 c0 ea 01 00       	jmp    c00204df <fatWrapperWriteDisk>

c0001a1f <disk_ioctl>:
c0001a1f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a28:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a2d:	0f b6 04 85 a0 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee60]
c0001a35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a39:	e9 e8 ea 01 00       	jmp    c0020526 <fatWrapperIoctl>

c0001a3e <ld_word>:
c0001a3e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a42:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a45:	c1 e2 08             	shl    edx,0x8
c0001a48:	09 d0                	or     eax,edx
c0001a4a:	c3                   	ret    

c0001a4b <ld_dword>:
c0001a4b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a4f:	89 d1                	mov    ecx,edx
c0001a51:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a55:	c1 e1 08             	shl    ecx,0x8
c0001a58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5b:	09 ca                	or     edx,ecx
c0001a5d:	c1 e2 08             	shl    edx,0x8
c0001a60:	09 d0                	or     eax,edx
c0001a62:	c3                   	ret    

c0001a63 <ld_qword>:
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	31 db                	xor    ebx,ebx
c0001a68:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a6b:	89 df                	mov    edi,ebx
c0001a6d:	89 ce                	mov    esi,ecx
c0001a6f:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a73:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a77:	c1 e6 08             	shl    esi,0x8
c0001a7a:	09 f2                	or     edx,esi
c0001a7c:	89 d6                	mov    esi,edx
c0001a7e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a82:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a86:	c1 e6 08             	shl    esi,0x8
c0001a89:	09 f2                	or     edx,esi
c0001a8b:	89 d6                	mov    esi,edx
c0001a8d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a91:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a95:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a98:	c1 e6 08             	shl    esi,0x8
c0001a9b:	89 fb                	mov    ebx,edi
c0001a9d:	09 f2                	or     edx,esi
c0001a9f:	89 d1                	mov    ecx,edx
c0001aa1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aa5:	c1 e1 08             	shl    ecx,0x8
c0001aa8:	89 da                	mov    edx,ebx
c0001aaa:	09 c8                	or     eax,ecx
c0001aac:	5b                   	pop    ebx
c0001aad:	5e                   	pop    esi
c0001aae:	5f                   	pop    edi
c0001aaf:	c3                   	ret    

c0001ab0 <st_word>:
c0001ab0:	66 89 10             	mov    WORD PTR [eax],dx
c0001ab3:	c3                   	ret    

c0001ab4 <st_dword>:
c0001ab4:	89 10                	mov    DWORD PTR [eax],edx
c0001ab6:	c3                   	ret    

c0001ab7 <st_qword>:
c0001ab7:	89 10                	mov    DWORD PTR [eax],edx
c0001ab9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001abc:	c3                   	ret    

c0001abd <mem_cpy>:
c0001abd:	85 c9                	test   ecx,ecx
c0001abf:	74 10                	je     c0001ad1 <mem_cpy+0x14>
c0001ac1:	57                   	push   edi
c0001ac2:	01 c1                	add    ecx,eax
c0001ac4:	56                   	push   esi
c0001ac5:	89 c7                	mov    edi,eax
c0001ac7:	89 d6                	mov    esi,edx
c0001ac9:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001aca:	39 f9                	cmp    ecx,edi
c0001acc:	75 fb                	jne    c0001ac9 <mem_cpy+0xc>
c0001ace:	5e                   	pop    esi
c0001acf:	5f                   	pop    edi
c0001ad0:	c3                   	ret    
c0001ad1:	c3                   	ret    

c0001ad2 <mem_set>:
c0001ad2:	01 c1                	add    ecx,eax
c0001ad4:	40                   	inc    eax
c0001ad5:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ad8:	39 c8                	cmp    eax,ecx
c0001ada:	75 f8                	jne    c0001ad4 <mem_set+0x2>
c0001adc:	c3                   	ret    

c0001add <mem_cmp>:
c0001add:	57                   	push   edi
c0001ade:	56                   	push   esi
c0001adf:	89 c6                	mov    esi,eax
c0001ae1:	53                   	push   ebx
c0001ae2:	46                   	inc    esi
c0001ae3:	42                   	inc    edx
c0001ae4:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ae8:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001aec:	29 fb                	sub    ebx,edi
c0001aee:	89 cf                	mov    edi,ecx
c0001af0:	29 f7                	sub    edi,esi
c0001af2:	01 c7                	add    edi,eax
c0001af4:	74 04                	je     c0001afa <mem_cmp+0x1d>
c0001af6:	85 db                	test   ebx,ebx
c0001af8:	74 e8                	je     c0001ae2 <mem_cmp+0x5>
c0001afa:	89 d8                	mov    eax,ebx
c0001afc:	5b                   	pop    ebx
c0001afd:	5e                   	pop    esi
c0001afe:	5f                   	pop    edi
c0001aff:	c3                   	ret    

c0001b00 <chk_chr>:
c0001b00:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b03:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b06:	74 07                	je     c0001b0f <chk_chr+0xf>
c0001b08:	39 d1                	cmp    ecx,edx
c0001b0a:	74 03                	je     c0001b0f <chk_chr+0xf>
c0001b0c:	40                   	inc    eax
c0001b0d:	eb f1                	jmp    c0001b00 <chk_chr>
c0001b0f:	89 c8                	mov    eax,ecx
c0001b11:	c3                   	ret    

c0001b12 <dbc_1st>:
c0001b12:	31 c0                	xor    eax,eax
c0001b14:	c3                   	ret    

c0001b15 <dbc_2nd>:
c0001b15:	31 c0                	xor    eax,eax
c0001b17:	c3                   	ret    

c0001b18 <tchar2uni>:
c0001b18:	57                   	push   edi
c0001b19:	89 c7                	mov    edi,eax
c0001b1b:	56                   	push   esi
c0001b1c:	53                   	push   ebx
c0001b1d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b1f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b21:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b24:	84 c9                	test   cl,cl
c0001b26:	78 0a                	js     c0001b32 <tchar2uni+0x1a>
c0001b28:	0f b6 d1             	movzx  edx,cl
c0001b2b:	89 f3                	mov    ebx,esi
c0001b2d:	e9 9f 00 00 00       	jmp    c0001bd1 <tchar2uni+0xb9>
c0001b32:	88 ca                	mov    dl,cl
c0001b34:	83 e2 e0             	and    edx,0xffffffe0
c0001b37:	80 fa c0             	cmp    dl,0xc0
c0001b3a:	75 0c                	jne    c0001b48 <tchar2uni+0x30>
c0001b3c:	89 ca                	mov    edx,ecx
c0001b3e:	b9 01 00 00 00       	mov    ecx,0x1
c0001b43:	83 e2 1f             	and    edx,0x1f
c0001b46:	eb 2e                	jmp    c0001b76 <tchar2uni+0x5e>
c0001b48:	88 ca                	mov    dl,cl
c0001b4a:	83 e2 f0             	and    edx,0xfffffff0
c0001b4d:	80 fa e0             	cmp    dl,0xe0
c0001b50:	75 0c                	jne    c0001b5e <tchar2uni+0x46>
c0001b52:	89 ca                	mov    edx,ecx
c0001b54:	b9 02 00 00 00       	mov    ecx,0x2
c0001b59:	83 e2 0f             	and    edx,0xf
c0001b5c:	eb 18                	jmp    c0001b76 <tchar2uni+0x5e>
c0001b5e:	88 ca                	mov    dl,cl
c0001b60:	83 e2 f8             	and    edx,0xfffffff8
c0001b63:	88 d0                	mov    al,dl
c0001b65:	83 ca ff             	or     edx,0xffffffff
c0001b68:	3c f0                	cmp    al,0xf0
c0001b6a:	75 6c                	jne    c0001bd8 <tchar2uni+0xc0>
c0001b6c:	89 ca                	mov    edx,ecx
c0001b6e:	b9 03 00 00 00       	mov    ecx,0x3
c0001b73:	83 e2 07             	and    edx,0x7
c0001b76:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b7a:	46                   	inc    esi
c0001b7b:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b7e:	88 c8                	mov    al,cl
c0001b80:	83 e0 c0             	and    eax,0xffffffc0
c0001b83:	3c 80                	cmp    al,0x80
c0001b85:	75 4e                	jne    c0001bd5 <tchar2uni+0xbd>
c0001b87:	c1 e2 06             	shl    edx,0x6
c0001b8a:	83 e1 3f             	and    ecx,0x3f
c0001b8d:	09 ca                	or     edx,ecx
c0001b8f:	39 de                	cmp    esi,ebx
c0001b91:	75 e7                	jne    c0001b7a <tchar2uni+0x62>
c0001b93:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b96:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b9c:	77 37                	ja     c0001bd5 <tchar2uni+0xbd>
c0001b9e:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001baa:	76 29                	jbe    c0001bd5 <tchar2uni+0xbd>
c0001bac:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bb2:	76 1d                	jbe    c0001bd1 <tchar2uni+0xb9>
c0001bb4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bba:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bc0:	c1 e1 06             	shl    ecx,0x6
c0001bc3:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bc9:	09 ca                	or     edx,ecx
c0001bcb:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bd1:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bd3:	eb 03                	jmp    c0001bd8 <tchar2uni+0xc0>
c0001bd5:	83 ca ff             	or     edx,0xffffffff
c0001bd8:	5b                   	pop    ebx
c0001bd9:	89 d0                	mov    eax,edx
c0001bdb:	5e                   	pop    esi
c0001bdc:	5f                   	pop    edi
c0001bdd:	c3                   	ret    

c0001bde <put_utf>:
c0001bde:	53                   	push   ebx
c0001bdf:	83 f8 7f             	cmp    eax,0x7f
c0001be2:	89 c3                	mov    ebx,eax
c0001be4:	b0 00                	mov    al,0x0
c0001be6:	77 11                	ja     c0001bf9 <put_utf+0x1b>
c0001be8:	85 c9                	test   ecx,ecx
c0001bea:	0f 84 e5 00 00 00    	je     c0001cd5 <put_utf+0xf7>
c0001bf0:	88 1a                	mov    BYTE PTR [edx],bl
c0001bf2:	b0 01                	mov    al,0x1
c0001bf4:	e9 dc 00 00 00       	jmp    c0001cd5 <put_utf+0xf7>
c0001bf9:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bff:	77 23                	ja     c0001c24 <put_utf+0x46>
c0001c01:	83 f9 01             	cmp    ecx,0x1
c0001c04:	0f 86 cb 00 00 00    	jbe    c0001cd5 <put_utf+0xf7>
c0001c0a:	89 d8                	mov    eax,ebx
c0001c0c:	83 e3 3f             	and    ebx,0x3f
c0001c0f:	c1 e8 06             	shr    eax,0x6
c0001c12:	83 cb 80             	or     ebx,0xffffff80
c0001c15:	83 c8 c0             	or     eax,0xffffffc0
c0001c18:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c1b:	88 02                	mov    BYTE PTR [edx],al
c0001c1d:	b0 02                	mov    al,0x2
c0001c1f:	e9 b1 00 00 00       	jmp    c0001cd5 <put_utf+0xf7>
c0001c24:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c2a:	77 40                	ja     c0001c6c <put_utf+0x8e>
c0001c2c:	83 f9 02             	cmp    ecx,0x2
c0001c2f:	0f 86 a0 00 00 00    	jbe    c0001cd5 <put_utf+0xf7>
c0001c35:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c3b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c41:	0f 86 8e 00 00 00    	jbe    c0001cd5 <put_utf+0xf7>
c0001c47:	89 d8                	mov    eax,ebx
c0001c49:	c1 e8 0c             	shr    eax,0xc
c0001c4c:	83 c8 e0             	or     eax,0xffffffe0
c0001c4f:	88 02                	mov    BYTE PTR [edx],al
c0001c51:	89 d8                	mov    eax,ebx
c0001c53:	83 e3 3f             	and    ebx,0x3f
c0001c56:	c1 e8 06             	shr    eax,0x6
c0001c59:	83 cb 80             	or     ebx,0xffffff80
c0001c5c:	83 e0 3f             	and    eax,0x3f
c0001c5f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c62:	83 c8 80             	or     eax,0xffffff80
c0001c65:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c68:	b0 03                	mov    al,0x3
c0001c6a:	eb 69                	jmp    c0001cd5 <put_utf+0xf7>
c0001c6c:	83 f9 03             	cmp    ecx,0x3
c0001c6f:	76 64                	jbe    c0001cd5 <put_utf+0xf7>
c0001c71:	89 d9                	mov    ecx,ebx
c0001c73:	0f b7 c3             	movzx  eax,bx
c0001c76:	66 31 c9             	xor    cx,cx
c0001c79:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c7f:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c85:	c1 e9 06             	shr    ecx,0x6
c0001c88:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c8e:	77 43                	ja     c0001cd3 <put_utf+0xf5>
c0001c90:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c96:	77 3b                	ja     c0001cd3 <put_utf+0xf5>
c0001c98:	09 cb                	or     ebx,ecx
c0001c9a:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ca0:	89 d8                	mov    eax,ebx
c0001ca2:	c1 e8 12             	shr    eax,0x12
c0001ca5:	83 c8 f0             	or     eax,0xfffffff0
c0001ca8:	88 02                	mov    BYTE PTR [edx],al
c0001caa:	89 d8                	mov    eax,ebx
c0001cac:	c1 e8 0c             	shr    eax,0xc
c0001caf:	83 e0 3f             	and    eax,0x3f
c0001cb2:	83 c8 80             	or     eax,0xffffff80
c0001cb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cb8:	89 d8                	mov    eax,ebx
c0001cba:	83 e3 3f             	and    ebx,0x3f
c0001cbd:	c1 e8 06             	shr    eax,0x6
c0001cc0:	83 cb 80             	or     ebx,0xffffff80
c0001cc3:	83 e0 3f             	and    eax,0x3f
c0001cc6:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cc9:	83 c8 80             	or     eax,0xffffff80
c0001ccc:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ccf:	b0 04                	mov    al,0x4
c0001cd1:	eb 02                	jmp    c0001cd5 <put_utf+0xf7>
c0001cd3:	31 c0                	xor    eax,eax
c0001cd5:	5b                   	pop    ebx
c0001cd6:	c3                   	ret    

c0001cd7 <clst2sect>:
c0001cd7:	89 c1                	mov    ecx,eax
c0001cd9:	83 ea 02             	sub    edx,0x2
c0001cdc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cdf:	83 e8 02             	sub    eax,0x2
c0001ce2:	39 d0                	cmp    eax,edx
c0001ce4:	76 0d                	jbe    c0001cf3 <clst2sect+0x1c>
c0001ce6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cea:	f7 e2                	mul    edx
c0001cec:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cef:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cf2:	c3                   	ret    
c0001cf3:	31 c0                	xor    eax,eax
c0001cf5:	31 d2                	xor    edx,edx
c0001cf7:	c3                   	ret    

c0001cf8 <clmt_clust>:
c0001cf8:	57                   	push   edi
c0001cf9:	89 cf                	mov    edi,ecx
c0001cfb:	56                   	push   esi
c0001cfc:	89 d6                	mov    esi,edx
c0001cfe:	53                   	push   ebx
c0001cff:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d03:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d06:	89 f2                	mov    edx,esi
c0001d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d0a:	c1 ef 09             	shr    edi,0x9
c0001d0d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d11:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d14:	89 f9                	mov    ecx,edi
c0001d16:	31 ff                	xor    edi,edi
c0001d18:	57                   	push   edi
c0001d19:	56                   	push   esi
c0001d1a:	51                   	push   ecx
c0001d1b:	52                   	push   edx
c0001d1c:	e8 2b 44 02 00       	call   c002614c <__udivdi3>
c0001d21:	83 c4 10             	add    esp,0x10
c0001d24:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d26:	85 d2                	test   edx,edx
c0001d28:	74 10                	je     c0001d3a <clmt_clust+0x42>
c0001d2a:	39 d0                	cmp    eax,edx
c0001d2c:	72 07                	jb     c0001d35 <clmt_clust+0x3d>
c0001d2e:	29 d0                	sub    eax,edx
c0001d30:	83 c3 08             	add    ebx,0x8
c0001d33:	eb ef                	jmp    c0001d24 <clmt_clust+0x2c>
c0001d35:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d38:	89 c2                	mov    edx,eax
c0001d3a:	5b                   	pop    ebx
c0001d3b:	89 d0                	mov    eax,edx
c0001d3d:	5e                   	pop    esi
c0001d3e:	5f                   	pop    edi
c0001d3f:	c3                   	ret    

c0001d40 <pick_lfn>:
c0001d40:	55                   	push   ebp
c0001d41:	57                   	push   edi
c0001d42:	56                   	push   esi
c0001d43:	89 d6                	mov    esi,edx
c0001d45:	53                   	push   ebx
c0001d46:	89 c3                	mov    ebx,eax
c0001d48:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d4b:	e8 ee fc ff ff       	call   c0001a3e <ld_word>
c0001d50:	66 85 c0             	test   ax,ax
c0001d53:	74 04                	je     c0001d59 <pick_lfn+0x19>
c0001d55:	31 c0                	xor    eax,eax
c0001d57:	eb 5c                	jmp    c0001db5 <pick_lfn+0x75>
c0001d59:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d5c:	bd 01 00 00 00       	mov    ebp,0x1
c0001d61:	83 e1 bf             	and    ecx,0xffffffbf
c0001d64:	31 ff                	xor    edi,edi
c0001d66:	49                   	dec    ecx
c0001d67:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d6a:	0f b6 87 e0 8b 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7420]
c0001d71:	01 f0                	add    eax,esi
c0001d73:	e8 c6 fc ff ff       	call   c0001a3e <ld_word>
c0001d78:	66 85 ed             	test   bp,bp
c0001d7b:	74 11                	je     c0001d8e <pick_lfn+0x4e>
c0001d7d:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d83:	77 d0                	ja     c0001d55 <pick_lfn+0x15>
c0001d85:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d89:	89 c5                	mov    ebp,eax
c0001d8b:	41                   	inc    ecx
c0001d8c:	eb 04                	jmp    c0001d92 <pick_lfn+0x52>
c0001d8e:	66 40                	inc    ax
c0001d90:	75 c3                	jne    c0001d55 <pick_lfn+0x15>
c0001d92:	47                   	inc    edi
c0001d93:	83 ff 0d             	cmp    edi,0xd
c0001d96:	75 d2                	jne    c0001d6a <pick_lfn+0x2a>
c0001d98:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d9b:	74 13                	je     c0001db0 <pick_lfn+0x70>
c0001d9d:	66 85 ed             	test   bp,bp
c0001da0:	74 0e                	je     c0001db0 <pick_lfn+0x70>
c0001da2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001da8:	77 ab                	ja     c0001d55 <pick_lfn+0x15>
c0001daa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	5b                   	pop    ebx
c0001db6:	5e                   	pop    esi
c0001db7:	5f                   	pop    edi
c0001db8:	5d                   	pop    ebp
c0001db9:	c3                   	ret    

c0001dba <put_lfn>:
c0001dba:	55                   	push   ebp
c0001dbb:	31 ed                	xor    ebp,ebp
c0001dbd:	57                   	push   edi
c0001dbe:	89 d7                	mov    edi,edx
c0001dc0:	56                   	push   esi
c0001dc1:	31 f6                	xor    esi,esi
c0001dc3:	53                   	push   ebx
c0001dc4:	83 ec 08             	sub    esp,0x8
c0001dc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dca:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dd2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dd8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ddb:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dde:	31 d2                	xor    edx,edx
c0001de0:	e8 cb fc ff ff       	call   c0001ab0 <st_word>
c0001de5:	0f b6 d9             	movzx  ebx,cl
c0001de8:	4b                   	dec    ebx
c0001de9:	6b db 0d             	imul   ebx,ebx,0xd
c0001dec:	66 83 fe ff          	cmp    si,0xffff
c0001df0:	74 08                	je     c0001dfa <put_lfn+0x40>
c0001df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df5:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001df9:	43                   	inc    ebx
c0001dfa:	0f b6 85 e0 8b 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7420]
c0001e01:	0f b7 d6             	movzx  edx,si
c0001e04:	01 f8                	add    eax,edi
c0001e06:	e8 a5 fc ff ff       	call   c0001ab0 <st_word>
c0001e0b:	66 85 f6             	test   si,si
c0001e0e:	75 03                	jne    c0001e13 <put_lfn+0x59>
c0001e10:	83 ce ff             	or     esi,0xffffffff
c0001e13:	45                   	inc    ebp
c0001e14:	83 fd 0d             	cmp    ebp,0xd
c0001e17:	75 d3                	jne    c0001dec <put_lfn+0x32>
c0001e19:	66 46                	inc    si
c0001e1b:	74 0a                	je     c0001e27 <put_lfn+0x6d>
c0001e1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e20:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e25:	75 09                	jne    c0001e30 <put_lfn+0x76>
c0001e27:	88 c8                	mov    al,cl
c0001e29:	83 c8 40             	or     eax,0x40
c0001e2c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e30:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e34:	88 07                	mov    BYTE PTR [edi],al
c0001e36:	83 c4 08             	add    esp,0x8
c0001e39:	5b                   	pop    ebx
c0001e3a:	5e                   	pop    esi
c0001e3b:	5f                   	pop    edi
c0001e3c:	5d                   	pop    ebp
c0001e3d:	c3                   	ret    

c0001e3e <gen_numname>:
c0001e3e:	57                   	push   edi
c0001e3f:	89 cf                	mov    edi,ecx
c0001e41:	56                   	push   esi
c0001e42:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e47:	53                   	push   ebx
c0001e48:	89 c6                	mov    esi,eax
c0001e4a:	83 ec 10             	sub    esp,0x10
c0001e4d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e51:	e8 67 fc ff ff       	call   c0001abd <mem_cpy>
c0001e56:	83 fb 05             	cmp    ebx,0x5
c0001e59:	76 2d                	jbe    c0001e88 <gen_numname+0x4a>
c0001e5b:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e5e:	66 85 c0             	test   ax,ax
c0001e61:	74 25                	je     c0001e88 <gen_numname+0x4a>
c0001e63:	83 c7 02             	add    edi,0x2
c0001e66:	ba 10 00 00 00       	mov    edx,0x10
c0001e6b:	01 db                	add    ebx,ebx
c0001e6d:	89 c1                	mov    ecx,eax
c0001e6f:	66 d1 e8             	shr    ax,1
c0001e72:	83 e1 01             	and    ecx,0x1
c0001e75:	01 cb                	add    ebx,ecx
c0001e77:	0f ba e3 10          	bt     ebx,0x10
c0001e7b:	73 06                	jae    c0001e83 <gen_numname+0x45>
c0001e7d:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e83:	4a                   	dec    edx
c0001e84:	75 e5                	jne    c0001e6b <gen_numname+0x2d>
c0001e86:	eb d3                	jmp    c0001e5b <gen_numname+0x1d>
c0001e88:	b8 07 00 00 00       	mov    eax,0x7
c0001e8d:	88 d9                	mov    cl,bl
c0001e8f:	83 e1 0f             	and    ecx,0xf
c0001e92:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e95:	80 fa 39             	cmp    dl,0x39
c0001e98:	76 03                	jbe    c0001e9d <gen_numname+0x5f>
c0001e9a:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e9d:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ea0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ea4:	89 da                	mov    edx,ebx
c0001ea6:	c1 ea 04             	shr    edx,0x4
c0001ea9:	83 fb 0f             	cmp    ebx,0xf
c0001eac:	76 06                	jbe    c0001eb4 <gen_numname+0x76>
c0001eae:	89 c8                	mov    eax,ecx
c0001eb0:	89 d3                	mov    ebx,edx
c0001eb2:	eb d9                	jmp    c0001e8d <gen_numname+0x4f>
c0001eb4:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001eb9:	31 d2                	xor    edx,edx
c0001ebb:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ebe:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ec1:	39 ca                	cmp    edx,ecx
c0001ec3:	73 18                	jae    c0001edd <gen_numname+0x9f>
c0001ec5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ec8:	3c 20                	cmp    al,0x20
c0001eca:	74 11                	je     c0001edd <gen_numname+0x9f>
c0001ecc:	e8 41 fc ff ff       	call   c0001b12 <dbc_1st>
c0001ed1:	85 c0                	test   eax,eax
c0001ed3:	74 05                	je     c0001eda <gen_numname+0x9c>
c0001ed5:	39 d3                	cmp    ebx,edx
c0001ed7:	74 04                	je     c0001edd <gen_numname+0x9f>
c0001ed9:	42                   	inc    edx
c0001eda:	42                   	inc    edx
c0001edb:	eb e1                	jmp    c0001ebe <gen_numname+0x80>
c0001edd:	b0 20                	mov    al,0x20
c0001edf:	83 f9 07             	cmp    ecx,0x7
c0001ee2:	77 05                	ja     c0001ee9 <gen_numname+0xab>
c0001ee4:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ee8:	41                   	inc    ecx
c0001ee9:	42                   	inc    edx
c0001eea:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001eee:	83 fa 07             	cmp    edx,0x7
c0001ef1:	76 ea                	jbe    c0001edd <gen_numname+0x9f>
c0001ef3:	83 c4 10             	add    esp,0x10
c0001ef6:	5b                   	pop    ebx
c0001ef7:	5e                   	pop    esi
c0001ef8:	5f                   	pop    edi
c0001ef9:	c3                   	ret    

c0001efa <sum_sfn>:
c0001efa:	31 c9                	xor    ecx,ecx
c0001efc:	31 d2                	xor    edx,edx
c0001efe:	d0 ca                	ror    dl,1
c0001f00:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f03:	41                   	inc    ecx
c0001f04:	83 f9 0b             	cmp    ecx,0xb
c0001f07:	75 f5                	jne    c0001efe <sum_sfn+0x4>
c0001f09:	88 d0                	mov    al,dl
c0001f0b:	c3                   	ret    

c0001f0c <xdir_sum>:
c0001f0c:	56                   	push   esi
c0001f0d:	31 c9                	xor    ecx,ecx
c0001f0f:	53                   	push   ebx
c0001f10:	31 d2                	xor    edx,edx
c0001f12:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f16:	43                   	inc    ebx
c0001f17:	c1 e3 05             	shl    ebx,0x5
c0001f1a:	83 fa 02             	cmp    edx,0x2
c0001f1d:	74 0b                	je     c0001f2a <xdir_sum+0x1e>
c0001f1f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f23:	66 d1 c9             	ror    cx,1
c0001f26:	01 f1                	add    ecx,esi
c0001f28:	eb 05                	jmp    c0001f2f <xdir_sum+0x23>
c0001f2a:	ba 03 00 00 00       	mov    edx,0x3
c0001f2f:	42                   	inc    edx
c0001f30:	39 d3                	cmp    ebx,edx
c0001f32:	77 e6                	ja     c0001f1a <xdir_sum+0xe>
c0001f34:	89 c8                	mov    eax,ecx
c0001f36:	5b                   	pop    ebx
c0001f37:	5e                   	pop    esi
c0001f38:	c3                   	ret    

c0001f39 <xsum32>:
c0001f39:	d1 ca                	ror    edx,1
c0001f3b:	0f b6 c0             	movzx  eax,al
c0001f3e:	01 d0                	add    eax,edx
c0001f40:	c3                   	ret    

c0001f41 <get_xfileinfo>:
c0001f41:	55                   	push   ebp
c0001f42:	31 c9                	xor    ecx,ecx
c0001f44:	57                   	push   edi
c0001f45:	bd 40 00 00 00       	mov    ebp,0x40
c0001f4a:	56                   	push   esi
c0001f4b:	31 ff                	xor    edi,edi
c0001f4d:	53                   	push   ebx
c0001f4e:	89 c6                	mov    esi,eax
c0001f50:	83 ec 0c             	sub    esp,0xc
c0001f53:	89 d3                	mov    ebx,edx
c0001f55:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f5c:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f60:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f63:	76 6d                	jbe    c0001fd2 <get_xfileinfo+0x91>
c0001f65:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f6b:	76 0b                	jbe    c0001f78 <get_xfileinfo+0x37>
c0001f6d:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f71:	bf 01 00 00 00       	mov    edi,0x1
c0001f76:	eb 63                	jmp    c0001fdb <get_xfileinfo+0x9a>
c0001f78:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f7e:	75 03                	jne    c0001f83 <get_xfileinfo+0x42>
c0001f80:	83 c5 02             	add    ebp,0x2
c0001f83:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f86:	83 c5 02             	add    ebp,0x2
c0001f89:	e8 b0 fa ff ff       	call   c0001a3e <ld_word>
c0001f8e:	ff 04 24             	inc    DWORD PTR [esp]
c0001f91:	66 85 c9             	test   cx,cx
c0001f94:	75 0d                	jne    c0001fa3 <get_xfileinfo+0x62>
c0001f96:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f9c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fa1:	76 2b                	jbe    c0001fce <get_xfileinfo+0x8d>
c0001fa3:	c1 e1 10             	shl    ecx,0x10
c0001fa6:	ba ff 00 00 00       	mov    edx,0xff
c0001fab:	0f b7 c0             	movzx  eax,ax
c0001fae:	29 fa                	sub    edx,edi
c0001fb0:	09 c8                	or     eax,ecx
c0001fb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fb6:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fbe:	e8 1b fc ff ff       	call   c0001bde <put_utf>
c0001fc3:	84 c0                	test   al,al
c0001fc5:	74 a6                	je     c0001f6d <get_xfileinfo+0x2c>
c0001fc7:	0f b6 c0             	movzx  eax,al
c0001fca:	01 c7                	add    edi,eax
c0001fcc:	31 c0                	xor    eax,eax
c0001fce:	89 c1                	mov    ecx,eax
c0001fd0:	eb 8a                	jmp    c0001f5c <get_xfileinfo+0x1b>
c0001fd2:	85 ff                	test   edi,edi
c0001fd4:	74 97                	je     c0001f6d <get_xfileinfo+0x2c>
c0001fd6:	66 85 c9             	test   cx,cx
c0001fd9:	75 92                	jne    c0001f6d <get_xfileinfo+0x2c>
c0001fdb:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fe0:	31 c0                	xor    eax,eax
c0001fe2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fe6:	31 d2                	xor    edx,edx
c0001fe8:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001feb:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fee:	80 e1 10             	and    cl,0x10
c0001ff1:	75 08                	jne    c0001ffb <get_xfileinfo+0xba>
c0001ff3:	8d 46 38             	lea    eax,[esi+0x38]
c0001ff6:	e8 68 fa ff ff       	call   c0001a63 <ld_qword>
c0001ffb:	89 03                	mov    DWORD PTR [ebx],eax
c0001ffd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002000:	8d 46 0c             	lea    eax,[esi+0xc]
c0002003:	e8 36 fa ff ff       	call   c0001a3e <ld_word>
c0002008:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000200c:	8d 46 0e             	lea    eax,[esi+0xe]
c000200f:	e8 2a fa ff ff       	call   c0001a3e <ld_word>
c0002014:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002018:	83 c4 0c             	add    esp,0xc
c000201b:	5b                   	pop    ebx
c000201c:	5e                   	pop    esi
c000201d:	5f                   	pop    edi
c000201e:	5d                   	pop    ebp
c000201f:	c3                   	ret    

c0002020 <get_ldnumber>:
c0002020:	8b 10                	mov    edx,DWORD PTR [eax]
c0002022:	85 d2                	test   edx,edx
c0002024:	74 14                	je     c000203a <get_ldnumber+0x1a>
c0002026:	56                   	push   esi
c0002027:	53                   	push   ebx
c0002028:	89 d3                	mov    ebx,edx
c000202a:	43                   	inc    ebx
c000202b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000202e:	80 f9 1f             	cmp    cl,0x1f
c0002031:	76 0d                	jbe    c0002040 <get_ldnumber+0x20>
c0002033:	80 f9 3a             	cmp    cl,0x3a
c0002036:	75 f2                	jne    c000202a <get_ldnumber+0xa>
c0002038:	eb 0a                	jmp    c0002044 <get_ldnumber+0x24>
c000203a:	83 c9 ff             	or     ecx,0xffffffff
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    
c0002040:	31 c9                	xor    ecx,ecx
c0002042:	eb 24                	jmp    c0002068 <get_ldnumber+0x48>
c0002044:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002047:	8d 4e d0             	lea    ecx,[esi-0x30]
c000204a:	80 f9 09             	cmp    cl,0x9
c000204d:	77 16                	ja     c0002065 <get_ldnumber+0x45>
c000204f:	83 c2 02             	add    edx,0x2
c0002052:	83 c9 ff             	or     ecx,0xffffffff
c0002055:	39 d3                	cmp    ebx,edx
c0002057:	75 0f                	jne    c0002068 <get_ldnumber+0x48>
c0002059:	89 f2                	mov    edx,esi
c000205b:	89 18                	mov    DWORD PTR [eax],ebx
c000205d:	0f be ca             	movsx  ecx,dl
c0002060:	83 e9 30             	sub    ecx,0x30
c0002063:	eb 03                	jmp    c0002068 <get_ldnumber+0x48>
c0002065:	83 c9 ff             	or     ecx,0xffffffff
c0002068:	89 c8                	mov    eax,ecx
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <crc32>:
c000206d:	56                   	push   esi
c000206e:	89 d6                	mov    esi,edx
c0002070:	53                   	push   ebx
c0002071:	b2 01                	mov    dl,0x1
c0002073:	bb 08 00 00 00       	mov    ebx,0x8
c0002078:	89 f1                	mov    ecx,esi
c000207a:	84 d1                	test   cl,dl
c000207c:	0f 95 c1             	setne  cl
c000207f:	0f b6 c9             	movzx  ecx,cl
c0002082:	31 c1                	xor    ecx,eax
c0002084:	89 c8                	mov    eax,ecx
c0002086:	d1 e8                	shr    eax,1
c0002088:	80 e1 01             	and    cl,0x1
c000208b:	74 05                	je     c0002092 <crc32+0x25>
c000208d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002092:	d1 e2                	shl    edx,1
c0002094:	4b                   	dec    ebx
c0002095:	75 e1                	jne    c0002078 <crc32+0xb>
c0002097:	5b                   	pop    ebx
c0002098:	5e                   	pop    esi
c0002099:	c3                   	ret    

c000209a <test_gpt_header>:
c000209a:	55                   	push   ebp
c000209b:	b9 10 00 00 00       	mov    ecx,0x10
c00020a0:	57                   	push   edi
c00020a1:	ba e0 8a 02 c0       	mov    edx,0xc0028ae0
c00020a6:	56                   	push   esi
c00020a7:	31 ff                	xor    edi,edi
c00020a9:	53                   	push   ebx
c00020aa:	89 c3                	mov    ebx,eax
c00020ac:	e8 2c fa ff ff       	call   c0001add <mem_cmp>
c00020b1:	85 c0                	test   eax,eax
c00020b3:	75 55                	jne    c000210a <test_gpt_header+0x70>
c00020b5:	89 c7                	mov    edi,eax
c00020b7:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020bc:	83 ce ff             	or     esi,0xffffffff
c00020bf:	31 d2                	xor    edx,edx
c00020c1:	83 fd 03             	cmp    ebp,0x3
c00020c4:	76 05                	jbe    c00020cb <test_gpt_header+0x31>
c00020c6:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020cb:	89 f0                	mov    eax,esi
c00020cd:	45                   	inc    ebp
c00020ce:	e8 9a ff ff ff       	call   c000206d <crc32>
c00020d3:	83 fd 4c             	cmp    ebp,0x4c
c00020d6:	89 c6                	mov    esi,eax
c00020d8:	75 e5                	jne    c00020bf <test_gpt_header+0x25>
c00020da:	8d 43 10             	lea    eax,[ebx+0x10]
c00020dd:	f7 d6                	not    esi
c00020df:	e8 67 f9 ff ff       	call   c0001a4b <ld_dword>
c00020e4:	39 c6                	cmp    esi,eax
c00020e6:	75 22                	jne    c000210a <test_gpt_header+0x70>
c00020e8:	8d 43 54             	lea    eax,[ebx+0x54]
c00020eb:	e8 5b f9 ff ff       	call   c0001a4b <ld_dword>
c00020f0:	83 c0 80             	add    eax,0xffffff80
c00020f3:	75 15                	jne    c000210a <test_gpt_header+0x70>
c00020f5:	8d 43 50             	lea    eax,[ebx+0x50]
c00020f8:	e8 4e f9 ff ff       	call   c0001a4b <ld_dword>
c00020fd:	3d 80 00 00 00       	cmp    eax,0x80
c0002102:	0f 96 c0             	setbe  al
c0002105:	0f b6 c0             	movzx  eax,al
c0002108:	89 c7                	mov    edi,eax
c000210a:	5b                   	pop    ebx
c000210b:	89 f8                	mov    eax,edi
c000210d:	5e                   	pop    esi
c000210e:	5f                   	pop    edi
c000210f:	5d                   	pop    ebp
c0002110:	c3                   	ret    

c0002111 <make_rand>:
c0002111:	56                   	push   esi
c0002112:	85 c0                	test   eax,eax
c0002114:	53                   	push   ebx
c0002115:	75 05                	jne    c000211c <make_rand+0xb>
c0002117:	b8 01 00 00 00       	mov    eax,0x1
c000211c:	01 d1                	add    ecx,edx
c000211e:	bb 08 00 00 00       	mov    ebx,0x8
c0002123:	89 c6                	mov    esi,eax
c0002125:	d1 e8                	shr    eax,1
c0002127:	83 e6 01             	and    esi,0x1
c000212a:	85 f6                	test   esi,esi
c000212c:	74 05                	je     c0002133 <make_rand+0x22>
c000212e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002133:	4b                   	dec    ebx
c0002134:	75 ed                	jne    c0002123 <make_rand+0x12>
c0002136:	42                   	inc    edx
c0002137:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000213a:	39 ca                	cmp    edx,ecx
c000213c:	75 e0                	jne    c000211e <make_rand+0xd>
c000213e:	5b                   	pop    ebx
c000213f:	5e                   	pop    esi
c0002140:	c3                   	ret    

c0002141 <validate>:
c0002141:	56                   	push   esi
c0002142:	53                   	push   ebx
c0002143:	89 d6                	mov    esi,edx
c0002145:	51                   	push   ecx
c0002146:	85 c0                	test   eax,eax
c0002148:	75 09                	jne    c0002153 <validate+0x12>
c000214a:	b8 09 00 00 00       	mov    eax,0x9
c000214f:	31 c9                	xor    ecx,ecx
c0002151:	eb 2f                	jmp    c0002182 <validate+0x41>
c0002153:	89 c3                	mov    ebx,eax
c0002155:	8b 00                	mov    eax,DWORD PTR [eax]
c0002157:	85 c0                	test   eax,eax
c0002159:	74 ef                	je     c000214a <validate+0x9>
c000215b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000215e:	74 ea                	je     c000214a <validate+0x9>
c0002160:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002164:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002168:	75 e0                	jne    c000214a <validate+0x9>
c000216a:	83 ec 0c             	sub    esp,0xc
c000216d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002171:	50                   	push   eax
c0002172:	e8 76 f8 ff ff       	call   c00019ed <disk_status>
c0002177:	83 c4 10             	add    esp,0x10
c000217a:	a8 01                	test   al,0x1
c000217c:	75 cc                	jne    c000214a <validate+0x9>
c000217e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002180:	31 c0                	xor    eax,eax
c0002182:	89 0e                	mov    DWORD PTR [esi],ecx
c0002184:	5a                   	pop    edx
c0002185:	5b                   	pop    ebx
c0002186:	5e                   	pop    esi
c0002187:	c3                   	ret    

c0002188 <sync_window>:
c0002188:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000218c:	0f 84 85 00 00 00    	je     c0002217 <sync_window+0x8f>
c0002192:	55                   	push   ebp
c0002193:	8d 68 54             	lea    ebp,[eax+0x54]
c0002196:	57                   	push   edi
c0002197:	56                   	push   esi
c0002198:	53                   	push   ebx
c0002199:	89 c3                	mov    ebx,eax
c000219b:	83 ec 28             	sub    esp,0x28
c000219e:	6a 01                	push   0x1
c00021a0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021a3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021a6:	55                   	push   ebp
c00021a7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ab:	50                   	push   eax
c00021ac:	e8 58 f8 ff ff       	call   c0001a09 <disk_write>
c00021b1:	83 c4 20             	add    esp,0x20
c00021b4:	ba 01 00 00 00       	mov    edx,0x1
c00021b9:	85 c0                	test   eax,eax
c00021bb:	75 50                	jne    c000220d <sync_window+0x85>
c00021bd:	31 ff                	xor    edi,edi
c00021bf:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c2:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021c6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021ca:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021cd:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021d0:	89 c6                	mov    esi,eax
c00021d2:	89 d7                	mov    edi,edx
c00021d4:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021d7:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021db:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021de:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e2:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021e6:	73 23                	jae    c000220b <sync_window+0x83>
c00021e8:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021ec:	75 1d                	jne    c000220b <sync_window+0x83>
c00021ee:	83 ec 0c             	sub    esp,0xc
c00021f1:	6a 01                	push   0x1
c00021f3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021f7:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021fb:	52                   	push   edx
c00021fc:	50                   	push   eax
c00021fd:	55                   	push   ebp
c00021fe:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002202:	50                   	push   eax
c0002203:	e8 01 f8 ff ff       	call   c0001a09 <disk_write>
c0002208:	83 c4 20             	add    esp,0x20
c000220b:	31 d2                	xor    edx,edx
c000220d:	83 c4 1c             	add    esp,0x1c
c0002210:	89 d0                	mov    eax,edx
c0002212:	5b                   	pop    ebx
c0002213:	5e                   	pop    esi
c0002214:	5f                   	pop    edi
c0002215:	5d                   	pop    ebp
c0002216:	c3                   	ret    
c0002217:	31 d2                	xor    edx,edx
c0002219:	89 d0                	mov    eax,edx
c000221b:	c3                   	ret    

c000221c <move_window>:
c000221c:	56                   	push   esi
c000221d:	53                   	push   ebx
c000221e:	89 c3                	mov    ebx,eax
c0002220:	83 ec 14             	sub    esp,0x14
c0002223:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002226:	75 07                	jne    c000222f <move_window+0x13>
c0002228:	31 f6                	xor    esi,esi
c000222a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000222d:	74 59                	je     c0002288 <move_window+0x6c>
c000222f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002233:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002237:	89 d8                	mov    eax,ebx
c0002239:	e8 4a ff ff ff       	call   c0002188 <sync_window>
c000223e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002242:	89 c6                	mov    esi,eax
c0002244:	85 c0                	test   eax,eax
c0002246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000224a:	75 3c                	jne    c0002288 <move_window+0x6c>
c000224c:	83 ec 0c             	sub    esp,0xc
c000224f:	8d 43 54             	lea    eax,[ebx+0x54]
c0002252:	6a 01                	push   0x1
c0002254:	51                   	push   ecx
c0002255:	52                   	push   edx
c0002256:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000225a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000225e:	50                   	push   eax
c000225f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002263:	50                   	push   eax
c0002264:	e8 8a f7 ff ff       	call   c00019f3 <disk_read>
c0002269:	83 c4 20             	add    esp,0x20
c000226c:	85 c0                	test   eax,eax
c000226e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002272:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002276:	74 0a                	je     c0002282 <move_window+0x66>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	be 01 00 00 00       	mov    esi,0x1
c0002280:	89 d1                	mov    ecx,edx
c0002282:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002285:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002288:	89 f0                	mov    eax,esi
c000228a:	83 c4 14             	add    esp,0x14
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <check_fs>:
c0002290:	53                   	push   ebx
c0002291:	89 c3                	mov    ebx,eax
c0002293:	83 ec 08             	sub    esp,0x8
c0002296:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000229a:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022a8:	e8 6f ff ff ff       	call   c000221c <move_window>
c00022ad:	ba 04 00 00 00       	mov    edx,0x4
c00022b2:	85 c0                	test   eax,eax
c00022b4:	0f 85 89 00 00 00    	jne    c0002343 <check_fs+0xb3>
c00022ba:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c0:	e8 79 f7 ff ff       	call   c0001a3e <ld_word>
c00022c5:	ba 03 00 00 00       	mov    edx,0x3
c00022ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ce:	75 73                	jne    c0002343 <check_fs+0xb3>
c00022d0:	ba 00 8c 02 c0       	mov    edx,0xc0028c00
c00022d5:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00022dd:	e8 fb f7 ff ff       	call   c0001add <mem_cmp>
c00022e2:	ba 01 00 00 00       	mov    edx,0x1
c00022e7:	85 c0                	test   eax,eax
c00022e9:	74 58                	je     c0002343 <check_fs+0xb3>
c00022eb:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022ee:	8d 50 18             	lea    edx,[eax+0x18]
c00022f1:	80 fa 01             	cmp    dl,0x1
c00022f4:	76 09                	jbe    c00022ff <check_fs+0x6f>
c00022f6:	ba 02 00 00 00       	mov    edx,0x2
c00022fb:	3c eb                	cmp    al,0xeb
c00022fd:	75 44                	jne    c0002343 <check_fs+0xb3>
c00022ff:	ba 58 be 02 c0       	mov    edx,0xc002be58
c0002304:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000230a:	b9 03 00 00 00       	mov    ecx,0x3
c000230f:	e8 c9 f7 ff ff       	call   c0001add <mem_cmp>
c0002314:	31 d2                	xor    edx,edx
c0002316:	85 c0                	test   eax,eax
c0002318:	74 29                	je     c0002343 <check_fs+0xb3>
c000231a:	ba 0c 8c 02 c0       	mov    edx,0xc0028c0c
c000231f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002325:	b9 05 00 00 00       	mov    ecx,0x5
c000232a:	e8 ae f7 ff ff       	call   c0001add <mem_cmp>
c000232f:	31 d2                	xor    edx,edx
c0002331:	85 c0                	test   eax,eax
c0002333:	74 0e                	je     c0002343 <check_fs+0xb3>
c0002335:	31 d2                	xor    edx,edx
c0002337:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000233e:	0f 95 c2             	setne  dl
c0002341:	01 d2                	add    edx,edx
c0002343:	89 d0                	mov    eax,edx
c0002345:	83 c4 08             	add    esp,0x8
c0002348:	5b                   	pop    ebx
c0002349:	c3                   	ret    

c000234a <find_volume>:
c000234a:	55                   	push   ebp
c000234b:	31 c9                	xor    ecx,ecx
c000234d:	57                   	push   edi
c000234e:	56                   	push   esi
c000234f:	89 d6                	mov    esi,edx
c0002351:	53                   	push   ebx
c0002352:	31 d2                	xor    edx,edx
c0002354:	83 ec 3c             	sub    esp,0x3c
c0002357:	89 c3                	mov    ebx,eax
c0002359:	e8 32 ff ff ff       	call   c0002290 <check_fs>
c000235e:	83 f8 02             	cmp    eax,0x2
c0002361:	74 0e                	je     c0002371 <find_volume+0x27>
c0002363:	0f 87 5d 01 00 00    	ja     c00024c6 <find_volume+0x17c>
c0002369:	85 f6                	test   esi,esi
c000236b:	0f 84 55 01 00 00    	je     c00024c6 <find_volume+0x17c>
c0002371:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002378:	0f 85 dd 00 00 00    	jne    c000245b <find_volume+0x111>
c000237e:	31 c9                	xor    ecx,ecx
c0002380:	ba 01 00 00 00       	mov    edx,0x1
c0002385:	89 d8                	mov    eax,ebx
c0002387:	e8 90 fe ff ff       	call   c000221c <move_window>
c000238c:	85 c0                	test   eax,eax
c000238e:	74 0a                	je     c000239a <find_volume+0x50>
c0002390:	b8 04 00 00 00       	mov    eax,0x4
c0002395:	e9 2c 01 00 00       	jmp    c00024c6 <find_volume+0x17c>
c000239a:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000239d:	89 e8                	mov    eax,ebp
c000239f:	e8 f6 fc ff ff       	call   c000209a <test_gpt_header>
c00023a4:	85 c0                	test   eax,eax
c00023a6:	75 0a                	jne    c00023b2 <find_volume+0x68>
c00023a8:	b8 03 00 00 00       	mov    eax,0x3
c00023ad:	e9 14 01 00 00       	jmp    c00024c6 <find_volume+0x17c>
c00023b2:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023b8:	e8 8e f6 ff ff       	call   c0001a4b <ld_dword>
c00023bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c1:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023c7:	e8 97 f6 ff ff       	call   c0001a63 <ld_qword>
c00023cc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023ec:	74 ba                	je     c00023a8 <find_volume+0x5e>
c00023ee:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f2:	31 c9                	xor    ecx,ecx
c00023f4:	c1 e7 07             	shl    edi,0x7
c00023f7:	89 d8                	mov    eax,ebx
c00023f9:	89 fa                	mov    edx,edi
c00023fb:	c1 ea 09             	shr    edx,0x9
c00023fe:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002402:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002406:	e8 11 fe ff ff       	call   c000221c <move_window>
c000240b:	85 c0                	test   eax,eax
c000240d:	75 81                	jne    c0002390 <find_volume+0x46>
c000240f:	81 e7 80 01 00 00    	and    edi,0x180
c0002415:	b9 10 00 00 00       	mov    ecx,0x10
c000241a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000241e:	ba f0 8b 02 c0       	mov    edx,0xc0028bf0
c0002423:	e8 b5 f6 ff ff       	call   c0001add <mem_cmp>
c0002428:	85 c0                	test   eax,eax
c000242a:	75 29                	jne    c0002455 <find_volume+0x10b>
c000242c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002430:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002434:	e8 2a f6 ff ff       	call   c0001a63 <ld_qword>
c0002439:	89 d1                	mov    ecx,edx
c000243b:	89 c2                	mov    edx,eax
c000243d:	89 d8                	mov    eax,ebx
c000243f:	e8 4c fe ff ff       	call   c0002290 <check_fs>
c0002444:	85 f6                	test   esi,esi
c0002446:	75 07                	jne    c000244f <find_volume+0x105>
c0002448:	83 f8 01             	cmp    eax,0x1
c000244b:	77 08                	ja     c0002455 <find_volume+0x10b>
c000244d:	eb 77                	jmp    c00024c6 <find_volume+0x17c>
c000244f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002453:	74 71                	je     c00024c6 <find_volume+0x17c>
c0002455:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002459:	eb 89                	jmp    c00023e4 <find_volume+0x9a>
c000245b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000245f:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002465:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000246b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000246f:	89 cd                	mov    ebp,ecx
c0002471:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002475:	89 f8                	mov    eax,edi
c0002477:	83 c7 10             	add    edi,0x10
c000247a:	e8 cc f5 ff ff       	call   c0001a4b <ld_dword>
c000247f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002483:	89 01                	mov    DWORD PTR [ecx],eax
c0002485:	83 c1 04             	add    ecx,0x4
c0002488:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000248c:	75 e3                	jne    c0002471 <find_volume+0x127>
c000248e:	31 ff                	xor    edi,edi
c0002490:	85 f6                	test   esi,esi
c0002492:	74 03                	je     c0002497 <find_volume+0x14d>
c0002494:	8d 7e ff             	lea    edi,[esi-0x1]
c0002497:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000249b:	85 d2                	test   edx,edx
c000249d:	74 14                	je     c00024b3 <find_volume+0x169>
c000249f:	31 c9                	xor    ecx,ecx
c00024a1:	89 d8                	mov    eax,ebx
c00024a3:	e8 e8 fd ff ff       	call   c0002290 <check_fs>
c00024a8:	83 f8 01             	cmp    eax,0x1
c00024ab:	76 19                	jbe    c00024c6 <find_volume+0x17c>
c00024ad:	85 f6                	test   esi,esi
c00024af:	74 0f                	je     c00024c0 <find_volume+0x176>
c00024b1:	eb 13                	jmp    c00024c6 <find_volume+0x17c>
c00024b3:	85 f6                	test   esi,esi
c00024b5:	0f 85 ed fe ff ff    	jne    c00023a8 <find_volume+0x5e>
c00024bb:	b8 03 00 00 00       	mov    eax,0x3
c00024c0:	47                   	inc    edi
c00024c1:	83 ff 03             	cmp    edi,0x3
c00024c4:	76 d1                	jbe    c0002497 <find_volume+0x14d>
c00024c6:	83 c4 3c             	add    esp,0x3c
c00024c9:	5b                   	pop    ebx
c00024ca:	5e                   	pop    esi
c00024cb:	5f                   	pop    edi
c00024cc:	5d                   	pop    ebp
c00024cd:	c3                   	ret    

c00024ce <mount_volume>:
c00024ce:	55                   	push   ebp
c00024cf:	57                   	push   edi
c00024d0:	89 cf                	mov    edi,ecx
c00024d2:	56                   	push   esi
c00024d3:	53                   	push   ebx
c00024d4:	bb 0b 00 00 00       	mov    ebx,0xb
c00024d9:	83 ec 3c             	sub    esp,0x3c
c00024dc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024e6:	e8 35 fb ff ff       	call   c0002020 <get_ldnumber>
c00024eb:	85 c0                	test   eax,eax
c00024ed:	0f 88 3a 05 00 00    	js     c0002a2d <mount_volume+0x55f>
c00024f3:	8b 2c 85 60 da 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd25a0]
c00024fa:	89 c6                	mov    esi,eax
c00024fc:	bb 0c 00 00 00       	mov    ebx,0xc
c0002501:	85 ed                	test   ebp,ebp
c0002503:	0f 84 24 05 00 00    	je     c0002a2d <mount_volume+0x55f>
c0002509:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	89 2a                	mov    DWORD PTR [edx],ebp
c0002512:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002516:	74 32                	je     c000254a <mount_volume+0x7c>
c0002518:	83 ec 0c             	sub    esp,0xc
c000251b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000251f:	50                   	push   eax
c0002520:	e8 c8 f4 ff ff       	call   c00019ed <disk_status>
c0002525:	83 c4 10             	add    esp,0x10
c0002528:	a8 01                	test   al,0x1
c000252a:	75 1e                	jne    c000254a <mount_volume+0x7c>
c000252c:	31 db                	xor    ebx,ebx
c000252e:	89 f9                	mov    ecx,edi
c0002530:	84 c9                	test   cl,cl
c0002532:	0f 84 f5 04 00 00    	je     c0002a2d <mount_volume+0x55f>
c0002538:	a8 04                	test   al,0x4
c000253a:	0f 84 ed 04 00 00    	je     c0002a2d <mount_volume+0x55f>
c0002540:	bb 0a 00 00 00       	mov    ebx,0xa
c0002545:	e9 e3 04 00 00       	jmp    c0002a2d <mount_volume+0x55f>
c000254a:	83 ec 0c             	sub    esp,0xc
c000254d:	89 f0                	mov    eax,esi
c000254f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002553:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002556:	0f b6 f0             	movzx  esi,al
c0002559:	bb 03 00 00 00       	mov    ebx,0x3
c000255e:	56                   	push   esi
c000255f:	e8 8c f4 ff ff       	call   c00019f0 <disk_initialize>
c0002564:	83 c4 10             	add    esp,0x10
c0002567:	a8 01                	test   al,0x1
c0002569:	0f 85 be 04 00 00    	jne    c0002a2d <mount_volume+0x55f>
c000256f:	89 f9                	mov    ecx,edi
c0002571:	84 c9                	test   cl,cl
c0002573:	74 04                	je     c0002579 <mount_volume+0xab>
c0002575:	a8 04                	test   al,0x4
c0002577:	75 c7                	jne    c0002540 <mount_volume+0x72>
c0002579:	31 d2                	xor    edx,edx
c000257b:	89 e8                	mov    eax,ebp
c000257d:	e8 c8 fd ff ff       	call   c000234a <find_volume>
c0002582:	83 f8 04             	cmp    eax,0x4
c0002585:	75 0a                	jne    c0002591 <mount_volume+0xc3>
c0002587:	bb 01 00 00 00       	mov    ebx,0x1
c000258c:	e9 9c 04 00 00       	jmp    c0002a2d <mount_volume+0x55f>
c0002591:	83 f8 01             	cmp    eax,0x1
c0002594:	76 0a                	jbe    c00025a0 <mount_volume+0xd2>
c0002596:	bb 0d 00 00 00       	mov    ebx,0xd
c000259b:	e9 8d 04 00 00       	jmp    c0002a2d <mount_volume+0x55f>
c00025a0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025a3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ae:	75 17                	jne    c00025c7 <mount_volume+0xf9>
c00025b0:	b8 0b 00 00 00       	mov    eax,0xb
c00025b5:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025ba:	75 da                	jne    c0002596 <mount_volume+0xc8>
c00025bc:	40                   	inc    eax
c00025bd:	83 f8 40             	cmp    eax,0x40
c00025c0:	75 f3                	jne    c00025b5 <mount_volume+0xe7>
c00025c2:	e9 5a 02 00 00       	jmp    c0002821 <mount_volume+0x353>
c00025c7:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025ca:	e8 6f f4 ff ff       	call   c0001a3e <ld_word>
c00025cf:	66 3d 00 02          	cmp    ax,0x200
c00025d3:	75 c1                	jne    c0002596 <mount_volume+0xc8>
c00025d5:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025d8:	e8 61 f4 ff ff       	call   c0001a3e <ld_word>
c00025dd:	0f b7 c0             	movzx  eax,ax
c00025e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025e4:	85 c0                	test   eax,eax
c00025e6:	75 0c                	jne    c00025f4 <mount_volume+0x126>
c00025e8:	8d 45 78             	lea    eax,[ebp+0x78]
c00025eb:	e8 5b f4 ff ff       	call   c0001a4b <ld_dword>
c00025f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025f8:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025fb:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025fe:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002602:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002605:	48                   	dec    eax
c0002606:	3c 01                	cmp    al,0x1
c0002608:	77 8c                	ja     c0002596 <mount_volume+0xc8>
c000260a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000260e:	89 c3                	mov    ebx,eax
c0002610:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002614:	66 85 c0             	test   ax,ax
c0002617:	0f 84 79 ff ff ff    	je     c0002596 <mount_volume+0xc8>
c000261d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002620:	85 d8                	test   eax,ebx
c0002622:	0f 85 6e ff ff ff    	jne    c0002596 <mount_volume+0xc8>
c0002628:	8d 45 65             	lea    eax,[ebp+0x65]
c000262b:	e8 0e f4 ff ff       	call   c0001a3e <ld_word>
c0002630:	89 c7                	mov    edi,eax
c0002632:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002636:	a8 0f                	test   al,0xf
c0002638:	0f 85 58 ff ff ff    	jne    c0002596 <mount_volume+0xc8>
c000263e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002641:	e8 f8 f3 ff ff       	call   c0001a3e <ld_word>
c0002646:	0f b7 f0             	movzx  esi,ax
c0002649:	85 f6                	test   esi,esi
c000264b:	75 0a                	jne    c0002657 <mount_volume+0x189>
c000264d:	8d 45 74             	lea    eax,[ebp+0x74]
c0002650:	e8 f6 f3 ff ff       	call   c0001a4b <ld_dword>
c0002655:	89 c6                	mov    esi,eax
c0002657:	8d 45 62             	lea    eax,[ebp+0x62]
c000265a:	e8 df f3 ff ff       	call   c0001a3e <ld_word>
c000265f:	66 85 c0             	test   ax,ax
c0002662:	0f 84 2e ff ff ff    	je     c0002596 <mount_volume+0xc8>
c0002668:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000266d:	0f b7 c8             	movzx  ecx,ax
c0002670:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002675:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002679:	89 fa                	mov    edx,edi
c000267b:	66 c1 ea 04          	shr    dx,0x4
c000267f:	0f b7 d2             	movzx  edx,dx
c0002682:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002686:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002689:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000268d:	39 c6                	cmp    esi,eax
c000268f:	0f 82 01 ff ff ff    	jb     c0002596 <mount_volume+0xc8>
c0002695:	29 c6                	sub    esi,eax
c0002697:	31 d2                	xor    edx,edx
c0002699:	89 f0                	mov    eax,esi
c000269b:	f7 f3                	div    ebx
c000269d:	39 de                	cmp    esi,ebx
c000269f:	0f 82 f1 fe ff ff    	jb     c0002596 <mount_volume+0xc8>
c00026a5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026aa:	0f 87 e6 fe ff ff    	ja     c0002596 <mount_volume+0xc8>
c00026b0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026b5:	0f 86 63 03 00 00    	jbe    c0002a1e <mount_volume+0x550>
c00026bb:	bb 03 00 00 00       	mov    ebx,0x3
c00026c0:	8d 70 02             	lea    esi,[eax+0x2]
c00026c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026cb:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026ce:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026d1:	31 d2                	xor    edx,edx
c00026d3:	89 c8                	mov    eax,ecx
c00026d5:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026d8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026dc:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026e4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026e8:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026eb:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026f2:	31 d2                	xor    edx,edx
c00026f4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026f8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026fc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026ff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002702:	83 fb 03             	cmp    ebx,0x3
c0002705:	75 2b                	jne    c0002732 <mount_volume+0x264>
c0002707:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000270a:	e8 2f f3 ff ff       	call   c0001a3e <ld_word>
c000270f:	66 09 c7             	or     di,ax
c0002712:	0f 85 7e fe ff ff    	jne    c0002596 <mount_volume+0xc8>
c0002718:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000271e:	c1 e6 02             	shl    esi,0x2
c0002721:	e8 25 f3 ff ff       	call   c0001a4b <ld_dword>
c0002726:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000272d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002730:	eb 30                	jmp    c0002762 <mount_volume+0x294>
c0002732:	66 85 ff             	test   di,di
c0002735:	0f 84 5b fe ff ff    	je     c0002596 <mount_volume+0xc8>
c000273b:	31 d2                	xor    edx,edx
c000273d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002741:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002745:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002749:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000274c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000274f:	83 fb 02             	cmp    ebx,0x2
c0002752:	75 04                	jne    c0002758 <mount_volume+0x28a>
c0002754:	01 f6                	add    esi,esi
c0002756:	eb 0a                	jmp    c0002762 <mount_volume+0x294>
c0002758:	8d 04 76             	lea    eax,[esi+esi*2]
c000275b:	83 e6 01             	and    esi,0x1
c000275e:	d1 e8                	shr    eax,1
c0002760:	01 c6                	add    esi,eax
c0002762:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002768:	c1 ee 09             	shr    esi,0x9
c000276b:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000276f:	0f 87 21 fe ff ff    	ja     c0002596 <mount_volume+0xc8>
c0002775:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000277c:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002783:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002787:	83 fb 03             	cmp    ebx,0x3
c000278a:	75 7a                	jne    c0002806 <mount_volume+0x338>
c000278c:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002792:	e8 a7 f2 ff ff       	call   c0001a3e <ld_word>
c0002797:	66 48                	dec    ax
c0002799:	75 6b                	jne    c0002806 <mount_volume+0x338>
c000279b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000279f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027a3:	83 c2 01             	add    edx,0x1
c00027a6:	89 e8                	mov    eax,ebp
c00027a8:	83 d1 00             	adc    ecx,0x0
c00027ab:	e8 6c fa ff ff       	call   c000221c <move_window>
c00027b0:	85 c0                	test   eax,eax
c00027b2:	75 52                	jne    c0002806 <mount_volume+0x338>
c00027b4:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027b8:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027be:	e8 7b f2 ff ff       	call   c0001a3e <ld_word>
c00027c3:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c7:	75 3d                	jne    c0002806 <mount_volume+0x338>
c00027c9:	8d 45 54             	lea    eax,[ebp+0x54]
c00027cc:	e8 7a f2 ff ff       	call   c0001a4b <ld_dword>
c00027d1:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d6:	75 2e                	jne    c0002806 <mount_volume+0x338>
c00027d8:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027de:	e8 68 f2 ff ff       	call   c0001a4b <ld_dword>
c00027e3:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e8:	75 1c                	jne    c0002806 <mount_volume+0x338>
c00027ea:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027f0:	e8 56 f2 ff ff       	call   c0001a4b <ld_dword>
c00027f5:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027f8:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027fe:	e8 48 f2 ff ff       	call   c0001a4b <ld_dword>
c0002803:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002806:	66 a1 40 da 02 c0    	mov    ax,ds:0xc002da40
c000280c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000280f:	40                   	inc    eax
c0002810:	31 db                	xor    ebx,ebx
c0002812:	66 a3 40 da 02 c0    	mov    ds:0xc002da40,ax
c0002818:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000281c:	e9 0c 02 00 00       	jmp    c0002a2d <mount_volume+0x55f>
c0002821:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002827:	e8 12 f2 ff ff       	call   c0001a3e <ld_word>
c000282c:	66 3d 00 01          	cmp    ax,0x100
c0002830:	0f 85 60 fd ff ff    	jne    c0002596 <mount_volume+0xc8>
c0002836:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000283d:	0f 85 53 fd ff ff    	jne    c0002596 <mount_volume+0xc8>
c0002843:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002849:	e8 15 f2 ff ff       	call   c0001a63 <ld_qword>
c000284e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002852:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002856:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000285c:	e8 ea f1 ff ff       	call   c0001a4b <ld_dword>
c0002861:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002864:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000286a:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000286d:	fe c8                	dec    al
c000286f:	0f 85 21 fd ff ff    	jne    c0002596 <mount_volume+0xc8>
c0002875:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000287c:	bb 01 00 00 00       	mov    ebx,0x1
c0002881:	d3 e3                	shl    ebx,cl
c0002883:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002887:	66 85 db             	test   bx,bx
c000288a:	0f 84 06 fd ff ff    	je     c0002596 <mount_volume+0xc8>
c0002890:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002896:	e8 b0 f1 ff ff       	call   c0001a4b <ld_dword>
c000289b:	89 c6                	mov    esi,eax
c000289d:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028a2:	0f 87 ee fc ff ff    	ja     c0002596 <mount_volume+0xc8>
c00028a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ac:	8d 40 02             	lea    eax,[eax+0x2]
c00028af:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b2:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028bc:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028c2:	e8 84 f1 ff ff       	call   c0001a4b <ld_dword>
c00028c7:	31 d2                	xor    edx,edx
c00028c9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028cd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028d9:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028dc:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028df:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028e5:	e8 61 f1 ff ff       	call   c0001a4b <ld_dword>
c00028ea:	31 d2                	xor    edx,edx
c00028ec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028f0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028f4:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028f8:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028fb:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028fe:	0f b7 c3             	movzx  eax,bx
c0002901:	31 d2                	xor    edx,edx
c0002903:	0f af f0             	imul   esi,eax
c0002906:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000290a:	89 f0                	mov    eax,esi
c000290c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002910:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002914:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002918:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000291c:	39 c1                	cmp    ecx,eax
c000291e:	89 df                	mov    edi,ebx
c0002920:	19 d7                	sbb    edi,edx
c0002922:	0f 82 6e fc ff ff    	jb     c0002596 <mount_volume+0xc8>
c0002928:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000292e:	31 db                	xor    ebx,ebx
c0002930:	e8 16 f1 ff ff       	call   c0001a4b <ld_dword>
c0002935:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000293c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000293f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002947:	85 db                	test   ebx,ebx
c0002949:	75 39                	jne    c0002984 <mount_volume+0x4b6>
c000294b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000294f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002953:	0f 86 3d fc ff ff    	jbe    c0002596 <mount_volume+0xc8>
c0002959:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000295c:	31 ff                	xor    edi,edi
c000295e:	89 e8                	mov    eax,ebp
c0002960:	e8 72 f3 ff ff       	call   c0001cd7 <clst2sect>
c0002965:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002969:	01 c6                	add    esi,eax
c000296b:	89 e8                	mov    eax,ebp
c000296d:	11 d7                	adc    edi,edx
c000296f:	89 f2                	mov    edx,esi
c0002971:	89 f9                	mov    ecx,edi
c0002973:	e8 a4 f8 ff ff       	call   c000221c <move_window>
c0002978:	85 c0                	test   eax,eax
c000297a:	0f 85 07 fc ff ff    	jne    c0002587 <mount_volume+0xb9>
c0002980:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002984:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002989:	74 0b                	je     c0002996 <mount_volume+0x4c8>
c000298b:	83 c3 20             	add    ebx,0x20
c000298e:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002994:	eb b1                	jmp    c0002947 <mount_volume+0x479>
c0002996:	8d 75 54             	lea    esi,[ebp+0x54]
c0002999:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c000299d:	e8 a9 f0 ff ff       	call   c0001a4b <ld_dword>
c00029a2:	89 c3                	mov    ebx,eax
c00029a4:	83 f8 01             	cmp    eax,0x1
c00029a7:	0f 86 e9 fb ff ff    	jbe    c0002596 <mount_volume+0xc8>
c00029ad:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029b0:	0f 86 e0 fb ff ff    	jbe    c0002596 <mount_volume+0xc8>
c00029b6:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029b9:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029bd:	0f af c2             	imul   eax,edx
c00029c0:	31 d2                	xor    edx,edx
c00029c2:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029c5:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029c8:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029cb:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029ce:	31 c9                	xor    ecx,ecx
c00029d0:	89 da                	mov    edx,ebx
c00029d2:	89 e8                	mov    eax,ebp
c00029d4:	c1 ea 07             	shr    edx,0x7
c00029d7:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029da:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029dd:	e8 3a f8 ff ff       	call   c000221c <move_window>
c00029e2:	85 c0                	test   eax,eax
c00029e4:	0f 85 9d fb ff ff    	jne    c0002587 <mount_volume+0xb9>
c00029ea:	89 d8                	mov    eax,ebx
c00029ec:	83 e0 7f             	and    eax,0x7f
c00029ef:	8d 04 86             	lea    eax,[esi+eax*4]
c00029f2:	e8 54 f0 ff ff       	call   c0001a4b <ld_dword>
c00029f7:	83 f8 ff             	cmp    eax,0xffffffff
c00029fa:	74 0a                	je     c0002a06 <mount_volume+0x538>
c00029fc:	43                   	inc    ebx
c00029fd:	39 d8                	cmp    eax,ebx
c00029ff:	74 cd                	je     c00029ce <mount_volume+0x500>
c0002a01:	e9 90 fb ff ff       	jmp    c0002596 <mount_volume+0xc8>
c0002a06:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a0d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a14:	bb 04 00 00 00       	mov    ebx,0x4
c0002a19:	e9 e8 fd ff ff       	jmp    c0002806 <mount_volume+0x338>
c0002a1e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a23:	19 db                	sbb    ebx,ebx
c0002a25:	83 c3 02             	add    ebx,0x2
c0002a28:	e9 93 fc ff ff       	jmp    c00026c0 <mount_volume+0x1f2>
c0002a2d:	83 c4 3c             	add    esp,0x3c
c0002a30:	89 d8                	mov    eax,ebx
c0002a32:	5b                   	pop    ebx
c0002a33:	5e                   	pop    esi
c0002a34:	5f                   	pop    edi
c0002a35:	5d                   	pop    ebp
c0002a36:	c3                   	ret    

c0002a37 <find_bitmap>:
c0002a37:	55                   	push   ebp
c0002a38:	57                   	push   edi
c0002a39:	89 c7                	mov    edi,eax
c0002a3b:	56                   	push   esi
c0002a3c:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a3f:	53                   	push   ebx
c0002a40:	83 ec 1c             	sub    esp,0x1c
c0002a43:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a46:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a4a:	83 e8 02             	sub    eax,0x2
c0002a4d:	39 f0                	cmp    eax,esi
c0002a4f:	77 02                	ja     c0002a53 <find_bitmap+0x1c>
c0002a51:	31 f6                	xor    esi,esi
c0002a53:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a57:	89 f3                	mov    ebx,esi
c0002a59:	31 ed                	xor    ebp,ebp
c0002a5b:	31 c9                	xor    ecx,ecx
c0002a5d:	89 da                	mov    edx,ebx
c0002a5f:	89 f8                	mov    eax,edi
c0002a61:	c1 ea 0c             	shr    edx,0xc
c0002a64:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a67:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a6a:	e8 ad f7 ff ff       	call   c000221c <move_window>
c0002a6f:	85 c0                	test   eax,eax
c0002a71:	75 68                	jne    c0002adb <find_bitmap+0xa4>
c0002a73:	89 da                	mov    edx,ebx
c0002a75:	89 d9                	mov    ecx,ebx
c0002a77:	c1 ea 03             	shr    edx,0x3
c0002a7a:	83 e1 07             	and    ecx,0x7
c0002a7d:	b8 01 00 00 00       	mov    eax,0x1
c0002a82:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a88:	d3 e0                	shl    eax,cl
c0002a8a:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a8d:	83 e9 02             	sub    ecx,0x2
c0002a90:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a94:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a98:	43                   	inc    ebx
c0002a99:	21 c1                	and    ecx,eax
c0002a9b:	d1 e0                	shl    eax,1
c0002a9d:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aa1:	77 09                	ja     c0002aac <find_bitmap+0x75>
c0002aa3:	31 db                	xor    ebx,ebx
c0002aa5:	ba 00 02 00 00       	mov    edx,0x200
c0002aaa:	31 c0                	xor    eax,eax
c0002aac:	84 c9                	test   cl,cl
c0002aae:	75 10                	jne    c0002ac0 <find_bitmap+0x89>
c0002ab0:	45                   	inc    ebp
c0002ab1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ab5:	75 0f                	jne    c0002ac6 <find_bitmap+0x8f>
c0002ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002abb:	83 c0 02             	add    eax,0x2
c0002abe:	eb 22                	jmp    c0002ae2 <find_bitmap+0xab>
c0002ac0:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ac4:	31 ed                	xor    ebp,ebp
c0002ac6:	39 de                	cmp    esi,ebx
c0002ac8:	74 16                	je     c0002ae0 <find_bitmap+0xa9>
c0002aca:	84 c0                	test   al,al
c0002acc:	75 c6                	jne    c0002a94 <find_bitmap+0x5d>
c0002ace:	42                   	inc    edx
c0002acf:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ad5:	77 84                	ja     c0002a5b <find_bitmap+0x24>
c0002ad7:	b0 01                	mov    al,0x1
c0002ad9:	eb b9                	jmp    c0002a94 <find_bitmap+0x5d>
c0002adb:	83 c8 ff             	or     eax,0xffffffff
c0002ade:	eb 02                	jmp    c0002ae2 <find_bitmap+0xab>
c0002ae0:	31 c0                	xor    eax,eax
c0002ae2:	83 c4 1c             	add    esp,0x1c
c0002ae5:	5b                   	pop    ebx
c0002ae6:	5e                   	pop    esi
c0002ae7:	5f                   	pop    edi
c0002ae8:	5d                   	pop    ebp
c0002ae9:	c3                   	ret    

c0002aea <change_bitmap>:
c0002aea:	55                   	push   ebp
c0002aeb:	89 cd                	mov    ebp,ecx
c0002aed:	57                   	push   edi
c0002aee:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002af1:	56                   	push   esi
c0002af2:	89 c7                	mov    edi,eax
c0002af4:	53                   	push   ebx
c0002af5:	89 c8                	mov    eax,ecx
c0002af7:	83 ec 1c             	sub    esp,0x1c
c0002afa:	31 d2                	xor    edx,edx
c0002afc:	89 ce                	mov    esi,ecx
c0002afe:	c1 e8 0c             	shr    eax,0xc
c0002b01:	bb 01 00 00 00       	mov    ebx,0x1
c0002b06:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b09:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b0c:	c1 ee 03             	shr    esi,0x3
c0002b0f:	83 e1 07             	and    ecx,0x7
c0002b12:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b18:	d3 e3                	shl    ebx,cl
c0002b1a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b1e:	89 c1                	mov    ecx,eax
c0002b20:	89 d3                	mov    ebx,edx
c0002b22:	83 c1 01             	add    ecx,0x1
c0002b25:	83 d3 00             	adc    ebx,0x0
c0002b28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b2c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b30:	89 d1                	mov    ecx,edx
c0002b32:	89 c2                	mov    edx,eax
c0002b34:	89 f8                	mov    eax,edi
c0002b36:	e8 e1 f6 ff ff       	call   c000221c <move_window>
c0002b3b:	89 c1                	mov    ecx,eax
c0002b3d:	85 c0                	test   eax,eax
c0002b3f:	75 48                	jne    c0002b89 <change_bitmap+0x9f>
c0002b41:	31 d2                	xor    edx,edx
c0002b43:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b47:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b4b:	0f 95 c2             	setne  dl
c0002b4e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b52:	74 3c                	je     c0002b90 <change_bitmap+0xa6>
c0002b54:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b58:	4d                   	dec    ebp
c0002b59:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b5d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b61:	74 32                	je     c0002b95 <change_bitmap+0xab>
c0002b63:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b67:	75 d8                	jne    c0002b41 <change_bitmap+0x57>
c0002b69:	8d 46 01             	lea    eax,[esi+0x1]
c0002b6c:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b71:	89 c3                	mov    ebx,eax
c0002b73:	31 f6                	xor    esi,esi
c0002b75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b7d:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b83:	74 99                	je     c0002b1e <change_bitmap+0x34>
c0002b85:	89 de                	mov    esi,ebx
c0002b87:	eb b8                	jmp    c0002b41 <change_bitmap+0x57>
c0002b89:	b9 01 00 00 00       	mov    ecx,0x1
c0002b8e:	eb 05                	jmp    c0002b95 <change_bitmap+0xab>
c0002b90:	b9 02 00 00 00       	mov    ecx,0x2
c0002b95:	83 c4 1c             	add    esp,0x1c
c0002b98:	89 c8                	mov    eax,ecx
c0002b9a:	5b                   	pop    ebx
c0002b9b:	5e                   	pop    esi
c0002b9c:	5f                   	pop    edi
c0002b9d:	5d                   	pop    ebp
c0002b9e:	c3                   	ret    

c0002b9f <put_fat>:
c0002b9f:	83 fa 01             	cmp    edx,0x1
c0002ba2:	0f 86 7b 01 00 00    	jbe    c0002d23 <put_fat+0x184>
c0002ba8:	55                   	push   ebp
c0002ba9:	57                   	push   edi
c0002baa:	89 cf                	mov    edi,ecx
c0002bac:	56                   	push   esi
c0002bad:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb2:	53                   	push   ebx
c0002bb3:	89 c6                	mov    esi,eax
c0002bb5:	83 ec 1c             	sub    esp,0x1c
c0002bb8:	89 d3                	mov    ebx,edx
c0002bba:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bbd:	0f 86 68 01 00 00    	jbe    c0002d2b <put_fat+0x18c>
c0002bc3:	8a 00                	mov    al,BYTE PTR [eax]
c0002bc5:	3c 02                	cmp    al,0x2
c0002bc7:	0f 84 c7 00 00 00    	je     c0002c94 <put_fat+0xf5>
c0002bcd:	77 09                	ja     c0002bd8 <put_fat+0x39>
c0002bcf:	fe c8                	dec    al
c0002bd1:	74 17                	je     c0002bea <put_fat+0x4b>
c0002bd3:	e9 53 01 00 00       	jmp    c0002d2b <put_fat+0x18c>
c0002bd8:	b9 02 00 00 00       	mov    ecx,0x2
c0002bdd:	3c 04                	cmp    al,0x4
c0002bdf:	0f 86 e1 00 00 00    	jbe    c0002cc6 <put_fat+0x127>
c0002be5:	e9 41 01 00 00       	jmp    c0002d2b <put_fat+0x18c>
c0002bea:	89 d5                	mov    ebp,edx
c0002bec:	31 c9                	xor    ecx,ecx
c0002bee:	d1 ed                	shr    ebp,1
c0002bf0:	89 f0                	mov    eax,esi
c0002bf2:	01 d5                	add    ebp,edx
c0002bf4:	89 ea                	mov    edx,ebp
c0002bf6:	c1 ea 09             	shr    edx,0x9
c0002bf9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bfc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bff:	e8 18 f6 ff ff       	call   c000221c <move_window>
c0002c04:	89 c1                	mov    ecx,eax
c0002c06:	85 c0                	test   eax,eax
c0002c08:	0f 85 1d 01 00 00    	jne    c0002d2b <put_fat+0x18c>
c0002c0e:	8d 46 54             	lea    eax,[esi+0x54]
c0002c11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c15:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c18:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c22:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c26:	89 f8                	mov    eax,edi
c0002c28:	83 e3 01             	and    ebx,0x1
c0002c2b:	74 0d                	je     c0002c3a <put_fat+0x9b>
c0002c2d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c30:	89 fa                	mov    edx,edi
c0002c32:	83 e0 0f             	and    eax,0xf
c0002c35:	c1 e2 04             	shl    edx,0x4
c0002c38:	09 d0                	or     eax,edx
c0002c3a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c41:	31 c9                	xor    ecx,ecx
c0002c43:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c47:	c1 ea 09             	shr    edx,0x9
c0002c4a:	89 f0                	mov    eax,esi
c0002c4c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c4f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c52:	e8 c5 f5 ff ff       	call   c000221c <move_window>
c0002c57:	89 c1                	mov    ecx,eax
c0002c59:	85 c0                	test   eax,eax
c0002c5b:	0f 85 ca 00 00 00    	jne    c0002d2b <put_fat+0x18c>
c0002c61:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c65:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c6b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c6f:	85 db                	test   ebx,ebx
c0002c71:	74 07                	je     c0002c7a <put_fat+0xdb>
c0002c73:	c1 ef 04             	shr    edi,0x4
c0002c76:	89 fa                	mov    edx,edi
c0002c78:	eb 0e                	jmp    c0002c88 <put_fat+0xe9>
c0002c7a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c7d:	c1 ef 08             	shr    edi,0x8
c0002c80:	83 e2 f0             	and    edx,0xfffffff0
c0002c83:	83 e7 0f             	and    edi,0xf
c0002c86:	09 fa                	or     edx,edi
c0002c88:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c8b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c8f:	e9 97 00 00 00       	jmp    c0002d2b <put_fat+0x18c>
c0002c94:	31 c9                	xor    ecx,ecx
c0002c96:	c1 ea 08             	shr    edx,0x8
c0002c99:	89 f0                	mov    eax,esi
c0002c9b:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c9e:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca1:	e8 76 f5 ff ff       	call   c000221c <move_window>
c0002ca6:	89 c1                	mov    ecx,eax
c0002ca8:	85 c0                	test   eax,eax
c0002caa:	75 7f                	jne    c0002d2b <put_fat+0x18c>
c0002cac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb0:	01 db                	add    ebx,ebx
c0002cb2:	0f b7 d7             	movzx  edx,di
c0002cb5:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cbb:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cbf:	e8 ec ed ff ff       	call   c0001ab0 <st_word>
c0002cc4:	eb 53                	jmp    c0002d19 <put_fat+0x17a>
c0002cc6:	31 c9                	xor    ecx,ecx
c0002cc8:	c1 ea 07             	shr    edx,0x7
c0002ccb:	89 f0                	mov    eax,esi
c0002ccd:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cd0:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cd3:	e8 44 f5 ff ff       	call   c000221c <move_window>
c0002cd8:	89 c1                	mov    ecx,eax
c0002cda:	85 c0                	test   eax,eax
c0002cdc:	75 4d                	jne    c0002d2b <put_fat+0x18c>
c0002cde:	c1 e3 02             	shl    ebx,0x2
c0002ce1:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ce7:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cea:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cee:	74 1c                	je     c0002d0c <put_fat+0x16d>
c0002cf0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cf4:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cfa:	89 d8                	mov    eax,ebx
c0002cfc:	e8 4a ed ff ff       	call   c0001a4b <ld_dword>
c0002d01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d05:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d0a:	09 c7                	or     edi,eax
c0002d0c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d10:	89 fa                	mov    edx,edi
c0002d12:	89 d8                	mov    eax,ebx
c0002d14:	e8 9b ed ff ff       	call   c0001ab4 <st_dword>
c0002d19:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d21:	eb 08                	jmp    c0002d2b <put_fat+0x18c>
c0002d23:	b9 02 00 00 00       	mov    ecx,0x2
c0002d28:	89 c8                	mov    eax,ecx
c0002d2a:	c3                   	ret    
c0002d2b:	83 c4 1c             	add    esp,0x1c
c0002d2e:	89 c8                	mov    eax,ecx
c0002d30:	5b                   	pop    ebx
c0002d31:	5e                   	pop    esi
c0002d32:	5f                   	pop    edi
c0002d33:	5d                   	pop    ebp
c0002d34:	c3                   	ret    

c0002d35 <fill_last_frag>:
c0002d35:	57                   	push   edi
c0002d36:	89 cf                	mov    edi,ecx
c0002d38:	56                   	push   esi
c0002d39:	89 d6                	mov    esi,edx
c0002d3b:	53                   	push   ebx
c0002d3c:	89 c3                	mov    ebx,eax
c0002d3e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d41:	85 c0                	test   eax,eax
c0002d43:	74 21                	je     c0002d66 <fill_last_frag+0x31>
c0002d45:	89 f9                	mov    ecx,edi
c0002d47:	83 f8 01             	cmp    eax,0x1
c0002d4a:	76 05                	jbe    c0002d51 <fill_last_frag+0x1c>
c0002d4c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d4f:	29 c1                	sub    ecx,eax
c0002d51:	8d 56 01             	lea    edx,[esi+0x1]
c0002d54:	29 c2                	sub    edx,eax
c0002d56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d58:	e8 42 fe ff ff       	call   c0002b9f <put_fat>
c0002d5d:	85 c0                	test   eax,eax
c0002d5f:	75 05                	jne    c0002d66 <fill_last_frag+0x31>
c0002d61:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d64:	eb d8                	jmp    c0002d3e <fill_last_frag+0x9>
c0002d66:	5b                   	pop    ebx
c0002d67:	5e                   	pop    esi
c0002d68:	5f                   	pop    edi
c0002d69:	c3                   	ret    

c0002d6a <fill_first_frag>:
c0002d6a:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d6e:	75 2d                	jne    c0002d9d <fill_first_frag+0x33>
c0002d70:	57                   	push   edi
c0002d71:	56                   	push   esi
c0002d72:	53                   	push   ebx
c0002d73:	89 c3                	mov    ebx,eax
c0002d75:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d78:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d7b:	01 d7                	add    edi,edx
c0002d7d:	39 fa                	cmp    edx,edi
c0002d7f:	74 14                	je     c0002d95 <fill_first_frag+0x2b>
c0002d81:	8d 72 01             	lea    esi,[edx+0x1]
c0002d84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d86:	89 f1                	mov    ecx,esi
c0002d88:	e8 12 fe ff ff       	call   c0002b9f <put_fat>
c0002d8d:	89 f2                	mov    edx,esi
c0002d8f:	85 c0                	test   eax,eax
c0002d91:	74 ea                	je     c0002d7d <fill_first_frag+0x13>
c0002d93:	eb 0b                	jmp    c0002da0 <fill_first_frag+0x36>
c0002d95:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d99:	31 c0                	xor    eax,eax
c0002d9b:	eb 03                	jmp    c0002da0 <fill_first_frag+0x36>
c0002d9d:	31 c0                	xor    eax,eax
c0002d9f:	c3                   	ret    
c0002da0:	5b                   	pop    ebx
c0002da1:	5e                   	pop    esi
c0002da2:	5f                   	pop    edi
c0002da3:	c3                   	ret    

c0002da4 <get_fat>:
c0002da4:	83 fa 01             	cmp    edx,0x1
c0002da7:	0f 86 db 01 00 00    	jbe    c0002f88 <get_fat+0x1e4>
c0002dad:	55                   	push   ebp
c0002dae:	b9 01 00 00 00       	mov    ecx,0x1
c0002db3:	57                   	push   edi
c0002db4:	56                   	push   esi
c0002db5:	53                   	push   ebx
c0002db6:	83 ec 1c             	sub    esp,0x1c
c0002db9:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dbb:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dbe:	0f 86 cc 01 00 00    	jbe    c0002f90 <get_fat+0x1ec>
c0002dc4:	89 c3                	mov    ebx,eax
c0002dc6:	89 d6                	mov    esi,edx
c0002dc8:	8a 07                	mov    al,BYTE PTR [edi]
c0002dca:	3c 02                	cmp    al,0x2
c0002dcc:	0f 84 99 00 00 00    	je     c0002e6b <get_fat+0xc7>
c0002dd2:	77 09                	ja     c0002ddd <get_fat+0x39>
c0002dd4:	fe c8                	dec    al
c0002dd6:	74 1a                	je     c0002df2 <get_fat+0x4e>
c0002dd8:	e9 b3 01 00 00       	jmp    c0002f90 <get_fat+0x1ec>
c0002ddd:	3c 03                	cmp    al,0x3
c0002ddf:	0f 84 b5 00 00 00    	je     c0002e9a <get_fat+0xf6>
c0002de5:	3c 04                	cmp    al,0x4
c0002de7:	0f 84 e3 00 00 00    	je     c0002ed0 <get_fat+0x12c>
c0002ded:	e9 9e 01 00 00       	jmp    c0002f90 <get_fat+0x1ec>
c0002df2:	89 d3                	mov    ebx,edx
c0002df4:	31 c9                	xor    ecx,ecx
c0002df6:	d1 eb                	shr    ebx,1
c0002df8:	89 f8                	mov    eax,edi
c0002dfa:	01 d3                	add    ebx,edx
c0002dfc:	89 da                	mov    edx,ebx
c0002dfe:	c1 ea 09             	shr    edx,0x9
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 10 f4 ff ff       	call   c000221c <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	74 08                	je     c0002e18 <get_fat+0x74>
c0002e10:	83 c9 ff             	or     ecx,0xffffffff
c0002e13:	e9 78 01 00 00       	jmp    c0002f90 <get_fat+0x1ec>
c0002e18:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e1b:	31 c9                	xor    ecx,ecx
c0002e1d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e23:	89 ea                	mov    edx,ebp
c0002e25:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e29:	c1 ea 09             	shr    edx,0x9
c0002e2c:	89 f8                	mov    eax,edi
c0002e2e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e31:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e34:	e8 e3 f3 ff ff       	call   c000221c <move_window>
c0002e39:	85 c0                	test   eax,eax
c0002e3b:	75 d3                	jne    c0002e10 <get_fat+0x6c>
c0002e3d:	0f b6 c3             	movzx  eax,bl
c0002e40:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e46:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e4b:	c1 e3 08             	shl    ebx,0x8
c0002e4e:	09 c3                	or     ebx,eax
c0002e50:	89 d9                	mov    ecx,ebx
c0002e52:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e58:	83 e6 01             	and    esi,0x1
c0002e5b:	0f 84 2f 01 00 00    	je     c0002f90 <get_fat+0x1ec>
c0002e61:	89 d9                	mov    ecx,ebx
c0002e63:	c1 e9 04             	shr    ecx,0x4
c0002e66:	e9 25 01 00 00       	jmp    c0002f90 <get_fat+0x1ec>
c0002e6b:	31 c9                	xor    ecx,ecx
c0002e6d:	c1 ea 08             	shr    edx,0x8
c0002e70:	89 f8                	mov    eax,edi
c0002e72:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e75:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e78:	e8 9f f3 ff ff       	call   c000221c <move_window>
c0002e7d:	85 c0                	test   eax,eax
c0002e7f:	75 8f                	jne    c0002e10 <get_fat+0x6c>
c0002e81:	01 f6                	add    esi,esi
c0002e83:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e89:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e8d:	e8 ac eb ff ff       	call   c0001a3e <ld_word>
c0002e92:	0f b7 c8             	movzx  ecx,ax
c0002e95:	e9 f6 00 00 00       	jmp    c0002f90 <get_fat+0x1ec>
c0002e9a:	31 c9                	xor    ecx,ecx
c0002e9c:	c1 ea 07             	shr    edx,0x7
c0002e9f:	89 f8                	mov    eax,edi
c0002ea1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea7:	e8 70 f3 ff ff       	call   c000221c <move_window>
c0002eac:	85 c0                	test   eax,eax
c0002eae:	0f 85 5c ff ff ff    	jne    c0002e10 <get_fat+0x6c>
c0002eb4:	c1 e6 02             	shl    esi,0x2
c0002eb7:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ebd:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec1:	e8 85 eb ff ff       	call   c0001a4b <ld_dword>
c0002ec6:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ecb:	e9 b4 00 00 00       	jmp    c0002f84 <get_fat+0x1e0>
c0002ed0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ed6:	89 d1                	mov    ecx,edx
c0002ed8:	09 c1                	or     ecx,eax
c0002eda:	74 06                	je     c0002ee2 <get_fat+0x13e>
c0002edc:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ee0:	75 0f                	jne    c0002ef1 <get_fat+0x14d>
c0002ee2:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee7:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eeb:	0f 85 9f 00 00 00    	jne    c0002f90 <get_fat+0x1ec>
c0002ef1:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ef5:	89 f5                	mov    ebp,esi
c0002ef7:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002efc:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002eff:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f02:	80 f9 02             	cmp    cl,0x2
c0002f05:	75 35                	jne    c0002f3c <get_fat+0x198>
c0002f07:	83 c0 ff             	add    eax,0xffffffff
c0002f0a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f0f:	83 d2 ff             	adc    edx,0xffffffff
c0002f12:	31 db                	xor    ebx,ebx
c0002f14:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f18:	53                   	push   ebx
c0002f19:	c1 ea 09             	shr    edx,0x9
c0002f1c:	51                   	push   ecx
c0002f1d:	52                   	push   edx
c0002f1e:	50                   	push   eax
c0002f1f:	e8 28 32 02 00       	call   c002614c <__udivdi3>
c0002f24:	83 c4 10             	add    esp,0x10
c0002f27:	b9 01 00 00 00       	mov    ecx,0x1
c0002f2c:	39 c5                	cmp    ebp,eax
c0002f2e:	77 60                	ja     c0002f90 <get_fat+0x1ec>
c0002f30:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f35:	74 59                	je     c0002f90 <get_fat+0x1ec>
c0002f37:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f3a:	eb 54                	jmp    c0002f90 <get_fat+0x1ec>
c0002f3c:	80 f9 03             	cmp    cl,0x3
c0002f3f:	75 05                	jne    c0002f46 <get_fat+0x1a2>
c0002f41:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f44:	77 f1                	ja     c0002f37 <get_fat+0x193>
c0002f46:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f4b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f4f:	75 3f                	jne    c0002f90 <get_fat+0x1ec>
c0002f51:	31 c9                	xor    ecx,ecx
c0002f53:	89 f2                	mov    edx,esi
c0002f55:	89 f8                	mov    eax,edi
c0002f57:	c1 ea 07             	shr    edx,0x7
c0002f5a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f5d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f60:	e8 b7 f2 ff ff       	call   c000221c <move_window>
c0002f65:	85 c0                	test   eax,eax
c0002f67:	0f 85 a3 fe ff ff    	jne    c0002e10 <get_fat+0x6c>
c0002f6d:	c1 e6 02             	shl    esi,0x2
c0002f70:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f76:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f7a:	e8 cc ea ff ff       	call   c0001a4b <ld_dword>
c0002f7f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f84:	89 c1                	mov    ecx,eax
c0002f86:	eb 08                	jmp    c0002f90 <get_fat+0x1ec>
c0002f88:	b9 01 00 00 00       	mov    ecx,0x1
c0002f8d:	89 c8                	mov    eax,ecx
c0002f8f:	c3                   	ret    
c0002f90:	83 c4 1c             	add    esp,0x1c
c0002f93:	89 c8                	mov    eax,ecx
c0002f95:	5b                   	pop    ebx
c0002f96:	5e                   	pop    esi
c0002f97:	5f                   	pop    edi
c0002f98:	5d                   	pop    ebp
c0002f99:	c3                   	ret    

c0002f9a <dir_sdi>:
c0002f9a:	55                   	push   ebp
c0002f9b:	57                   	push   edi
c0002f9c:	56                   	push   esi
c0002f9d:	53                   	push   ebx
c0002f9e:	89 c3                	mov    ebx,eax
c0002fa0:	83 ec 1c             	sub    esp,0x1c
c0002fa3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa5:	31 c0                	xor    eax,eax
c0002fa7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002faa:	0f 94 c0             	sete   al
c0002fad:	48                   	dec    eax
c0002fae:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fb3:	05 00 00 00 10       	add    eax,0x10000000
c0002fb8:	39 d0                	cmp    eax,edx
c0002fba:	77 0a                	ja     c0002fc6 <dir_sdi+0x2c>
c0002fbc:	b8 02 00 00 00       	mov    eax,0x2
c0002fc1:	e9 c4 00 00 00       	jmp    c000308a <dir_sdi+0xf0>
c0002fc6:	89 d6                	mov    esi,edx
c0002fc8:	f6 c2 1f             	test   dl,0x1f
c0002fcb:	75 ef                	jne    c0002fbc <dir_sdi+0x22>
c0002fcd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fd0:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fd3:	85 c9                	test   ecx,ecx
c0002fd5:	75 2d                	jne    c0003004 <dir_sdi+0x6a>
c0002fd7:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fda:	77 1b                	ja     c0002ff7 <dir_sdi+0x5d>
c0002fdc:	89 f2                	mov    edx,esi
c0002fde:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fe2:	c1 ea 05             	shr    edx,0x5
c0002fe5:	39 c2                	cmp    edx,eax
c0002fe7:	73 d3                	jae    c0002fbc <dir_sdi+0x22>
c0002fe9:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fec:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ff2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002ff5:	eb 4b                	jmp    c0003042 <dir_sdi+0xa8>
c0002ff7:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ffa:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ffe:	85 c0                	test   eax,eax
c0003000:	74 da                	je     c0002fdc <dir_sdi+0x42>
c0003002:	89 c1                	mov    ecx,eax
c0003004:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003008:	c1 e5 09             	shl    ebp,0x9
c000300b:	89 ca                	mov    edx,ecx
c000300d:	39 ee                	cmp    esi,ebp
c000300f:	72 1c                	jb     c000302d <dir_sdi+0x93>
c0003011:	89 d8                	mov    eax,ebx
c0003013:	e8 8c fd ff ff       	call   c0002da4 <get_fat>
c0003018:	89 c1                	mov    ecx,eax
c000301a:	83 f8 ff             	cmp    eax,0xffffffff
c000301d:	74 66                	je     c0003085 <dir_sdi+0xeb>
c000301f:	83 f8 01             	cmp    eax,0x1
c0003022:	76 98                	jbe    c0002fbc <dir_sdi+0x22>
c0003024:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003027:	76 93                	jbe    c0002fbc <dir_sdi+0x22>
c0003029:	29 ee                	sub    esi,ebp
c000302b:	eb de                	jmp    c000300b <dir_sdi+0x71>
c000302d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003031:	89 f8                	mov    eax,edi
c0003033:	e8 9f ec ff ff       	call   c0001cd7 <clst2sect>
c0003038:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000303f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003042:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003045:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003048:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000304b:	89 d1                	mov    ecx,edx
c000304d:	09 c1                	or     ecx,eax
c000304f:	0f 84 67 ff ff ff    	je     c0002fbc <dir_sdi+0x22>
c0003055:	89 f1                	mov    ecx,esi
c0003057:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000305f:	c1 e9 09             	shr    ecx,0x9
c0003062:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003066:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000306a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000306e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003071:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003077:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000307a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000307e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003081:	31 c0                	xor    eax,eax
c0003083:	eb 05                	jmp    c000308a <dir_sdi+0xf0>
c0003085:	b8 01 00 00 00       	mov    eax,0x1
c000308a:	83 c4 1c             	add    esp,0x1c
c000308d:	5b                   	pop    ebx
c000308e:	5e                   	pop    esi
c000308f:	5f                   	pop    edi
c0003090:	5d                   	pop    ebp
c0003091:	c3                   	ret    

c0003092 <create_chain>:
c0003092:	55                   	push   ebp
c0003093:	89 c5                	mov    ebp,eax
c0003095:	57                   	push   edi
c0003096:	56                   	push   esi
c0003097:	53                   	push   ebx
c0003098:	83 ec 1c             	sub    esp,0x1c
c000309b:	85 d2                	test   edx,edx
c000309d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030a1:	8b 30                	mov    esi,DWORD PTR [eax]
c00030a3:	75 0e                	jne    c00030b3 <create_chain+0x21>
c00030a5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030a8:	85 ff                	test   edi,edi
c00030aa:	74 39                	je     c00030e5 <create_chain+0x53>
c00030ac:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030af:	77 39                	ja     c00030ea <create_chain+0x58>
c00030b1:	eb 32                	jmp    c00030e5 <create_chain+0x53>
c00030b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030b7:	e8 e8 fc ff ff       	call   c0002da4 <get_fat>
c00030bc:	89 c3                	mov    ebx,eax
c00030be:	83 f8 01             	cmp    eax,0x1
c00030c1:	77 0a                	ja     c00030cd <create_chain+0x3b>
c00030c3:	bb 01 00 00 00       	mov    ebx,0x1
c00030c8:	e9 ba 01 00 00       	jmp    c0003287 <create_chain+0x1f5>
c00030cd:	83 f8 ff             	cmp    eax,0xffffffff
c00030d0:	0f 84 62 01 00 00    	je     c0003238 <create_chain+0x1a6>
c00030d6:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030d9:	0f 87 a8 01 00 00    	ja     c0003287 <create_chain+0x1f5>
c00030df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030e3:	eb 05                	jmp    c00030ea <create_chain+0x58>
c00030e5:	bf 01 00 00 00       	mov    edi,0x1
c00030ea:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030ee:	75 07                	jne    c00030f7 <create_chain+0x65>
c00030f0:	31 db                	xor    ebx,ebx
c00030f2:	e9 90 01 00 00       	jmp    c0003287 <create_chain+0x1f5>
c00030f7:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030fa:	75 74                	jne    c0003170 <create_chain+0xde>
c00030fc:	b9 01 00 00 00       	mov    ecx,0x1
c0003101:	89 fa                	mov    edx,edi
c0003103:	89 f0                	mov    eax,esi
c0003105:	e8 2d f9 ff ff       	call   c0002a37 <find_bitmap>
c000310a:	89 c3                	mov    ebx,eax
c000310c:	8d 40 ff             	lea    eax,[eax-0x1]
c000310f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003112:	0f 87 6f 01 00 00    	ja     c0003287 <create_chain+0x1f5>
c0003118:	83 ec 0c             	sub    esp,0xc
c000311b:	b9 01 00 00 00       	mov    ecx,0x1
c0003120:	6a 01                	push   0x1
c0003122:	89 da                	mov    edx,ebx
c0003124:	89 f0                	mov    eax,esi
c0003126:	e8 bf f9 ff ff       	call   c0002aea <change_bitmap>
c000312b:	83 c4 10             	add    esp,0x10
c000312e:	83 f8 02             	cmp    eax,0x2
c0003131:	74 90                	je     c00030c3 <create_chain+0x31>
c0003133:	83 f8 01             	cmp    eax,0x1
c0003136:	0f 84 fc 00 00 00    	je     c0003238 <create_chain+0x1a6>
c000313c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003141:	75 09                	jne    c000314c <create_chain+0xba>
c0003143:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003147:	e9 0c 01 00 00       	jmp    c0003258 <create_chain+0x1c6>
c000314c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003150:	0f 85 e7 00 00 00    	jne    c000323d <create_chain+0x1ab>
c0003156:	8d 57 01             	lea    edx,[edi+0x1]
c0003159:	39 da                	cmp    edx,ebx
c000315b:	0f 84 f7 00 00 00    	je     c0003258 <create_chain+0x1c6>
c0003161:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003164:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003168:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000316b:	e9 cd 00 00 00       	jmp    c000323d <create_chain+0x1ab>
c0003170:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003174:	75 41                	jne    c00031b7 <create_chain+0x125>
c0003176:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003179:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000317c:	77 05                	ja     c0003183 <create_chain+0xf1>
c000317e:	bb 02 00 00 00       	mov    ebx,0x2
c0003183:	89 da                	mov    edx,ebx
c0003185:	89 e8                	mov    eax,ebp
c0003187:	e8 18 fc ff ff       	call   c0002da4 <get_fat>
c000318c:	83 f8 01             	cmp    eax,0x1
c000318f:	0f 84 2e ff ff ff    	je     c00030c3 <create_chain+0x31>
c0003195:	83 f8 ff             	cmp    eax,0xffffffff
c0003198:	0f 84 9a 00 00 00    	je     c0003238 <create_chain+0x1a6>
c000319e:	85 c0                	test   eax,eax
c00031a0:	74 11                	je     c00031b3 <create_chain+0x121>
c00031a2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031a5:	83 f8 01             	cmp    eax,0x1
c00031a8:	76 0d                	jbe    c00031b7 <create_chain+0x125>
c00031aa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ad:	76 08                	jbe    c00031b7 <create_chain+0x125>
c00031af:	89 c7                	mov    edi,eax
c00031b1:	eb 04                	jmp    c00031b7 <create_chain+0x125>
c00031b3:	85 db                	test   ebx,ebx
c00031b5:	75 38                	jne    c00031ef <create_chain+0x15d>
c00031b7:	89 fb                	mov    ebx,edi
c00031b9:	43                   	inc    ebx
c00031ba:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031bd:	77 0e                	ja     c00031cd <create_chain+0x13b>
c00031bf:	83 ff 01             	cmp    edi,0x1
c00031c2:	0f 86 28 ff ff ff    	jbe    c00030f0 <create_chain+0x5e>
c00031c8:	bb 02 00 00 00       	mov    ebx,0x2
c00031cd:	89 da                	mov    edx,ebx
c00031cf:	89 e8                	mov    eax,ebp
c00031d1:	e8 ce fb ff ff       	call   c0002da4 <get_fat>
c00031d6:	85 c0                	test   eax,eax
c00031d8:	74 15                	je     c00031ef <create_chain+0x15d>
c00031da:	83 f8 01             	cmp    eax,0x1
c00031dd:	0f 84 e0 fe ff ff    	je     c00030c3 <create_chain+0x31>
c00031e3:	40                   	inc    eax
c00031e4:	74 52                	je     c0003238 <create_chain+0x1a6>
c00031e6:	39 fb                	cmp    ebx,edi
c00031e8:	75 cf                	jne    c00031b9 <create_chain+0x127>
c00031ea:	e9 01 ff ff ff       	jmp    c00030f0 <create_chain+0x5e>
c00031ef:	83 c9 ff             	or     ecx,0xffffffff
c00031f2:	89 da                	mov    edx,ebx
c00031f4:	89 f0                	mov    eax,esi
c00031f6:	e8 a4 f9 ff ff       	call   c0002b9f <put_fat>
c00031fb:	85 c0                	test   eax,eax
c00031fd:	75 32                	jne    c0003231 <create_chain+0x19f>
c00031ff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003204:	74 11                	je     c0003217 <create_chain+0x185>
c0003206:	89 d9                	mov    ecx,ebx
c0003208:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000320c:	89 f0                	mov    eax,esi
c000320e:	e8 8c f9 ff ff       	call   c0002b9f <put_fat>
c0003213:	85 c0                	test   eax,eax
c0003215:	75 1a                	jne    c0003231 <create_chain+0x19f>
c0003217:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000321a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000321d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003220:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003223:	39 d0                	cmp    eax,edx
c0003225:	77 04                	ja     c000322b <create_chain+0x199>
c0003227:	48                   	dec    eax
c0003228:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000322b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000322f:	eb 56                	jmp    c0003287 <create_chain+0x1f5>
c0003231:	48                   	dec    eax
c0003232:	0f 85 8b fe ff ff    	jne    c00030c3 <create_chain+0x31>
c0003238:	83 cb ff             	or     ebx,0xffffffff
c000323b:	eb 4a                	jmp    c0003287 <create_chain+0x1f5>
c000323d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003241:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003244:	41                   	inc    ecx
c0003245:	39 d9                	cmp    ecx,ebx
c0003247:	75 19                	jne    c0003262 <create_chain+0x1d0>
c0003249:	b9 02 00 00 00       	mov    ecx,0x2
c000324e:	85 d2                	test   edx,edx
c0003250:	74 03                	je     c0003255 <create_chain+0x1c3>
c0003252:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003255:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003258:	85 c0                	test   eax,eax
c000325a:	0f 85 63 fe ff ff    	jne    c00030c3 <create_chain+0x31>
c0003260:	eb b5                	jmp    c0003217 <create_chain+0x185>
c0003262:	85 d2                	test   edx,edx
c0003264:	75 07                	jne    c000326d <create_chain+0x1db>
c0003266:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000326d:	89 d9                	mov    ecx,ebx
c000326f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003273:	89 e8                	mov    eax,ebp
c0003275:	e8 bb fa ff ff       	call   c0002d35 <fill_last_frag>
c000327a:	85 c0                	test   eax,eax
c000327c:	75 b3                	jne    c0003231 <create_chain+0x19f>
c000327e:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003285:	eb 90                	jmp    c0003217 <create_chain+0x185>
c0003287:	83 c4 1c             	add    esp,0x1c
c000328a:	89 d8                	mov    eax,ebx
c000328c:	5b                   	pop    ebx
c000328d:	5e                   	pop    esi
c000328e:	5f                   	pop    edi
c000328f:	5d                   	pop    ebp
c0003290:	c3                   	ret    

c0003291 <remove_chain>:
c0003291:	55                   	push   ebp
c0003292:	57                   	push   edi
c0003293:	56                   	push   esi
c0003294:	53                   	push   ebx
c0003295:	83 ec 1c             	sub    esp,0x1c
c0003298:	83 fa 01             	cmp    edx,0x1
c000329b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329f:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032a1:	77 0a                	ja     c00032ad <remove_chain+0x1c>
c00032a3:	b8 02 00 00 00       	mov    eax,0x2
c00032a8:	e9 24 01 00 00       	jmp    c00033d1 <remove_chain+0x140>
c00032ad:	89 d6                	mov    esi,edx
c00032af:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032b2:	76 ef                	jbe    c00032a3 <remove_chain+0x12>
c00032b4:	89 c7                	mov    edi,eax
c00032b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032bb:	75 06                	jne    c00032c3 <remove_chain+0x32>
c00032bd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032c1:	eb 54                	jmp    c0003317 <remove_chain+0x86>
c00032c3:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c6:	75 06                	jne    c00032ce <remove_chain+0x3d>
c00032c8:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032cc:	74 ef                	je     c00032bd <remove_chain+0x2c>
c00032ce:	83 c9 ff             	or     ecx,0xffffffff
c00032d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d5:	89 d8                	mov    eax,ebx
c00032d7:	e8 c3 f8 ff ff       	call   c0002b9f <put_fat>
c00032dc:	85 c0                	test   eax,eax
c00032de:	74 dd                	je     c00032bd <remove_chain+0x2c>
c00032e0:	e9 ec 00 00 00       	jmp    c00033d1 <remove_chain+0x140>
c00032e5:	83 f8 01             	cmp    eax,0x1
c00032e8:	74 b9                	je     c00032a3 <remove_chain+0x12>
c00032ea:	83 f8 ff             	cmp    eax,0xffffffff
c00032ed:	74 6d                	je     c000335c <remove_chain+0xcb>
c00032ef:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032f2:	75 6f                	jne    c0003363 <remove_chain+0xd2>
c00032f4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032f7:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032fa:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032fd:	39 d0                	cmp    eax,edx
c00032ff:	73 08                	jae    c0003309 <remove_chain+0x78>
c0003301:	40                   	inc    eax
c0003302:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003306:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003309:	8d 4e 01             	lea    ecx,[esi+0x1]
c000330c:	39 e9                	cmp    ecx,ebp
c000330e:	75 64                	jne    c0003374 <remove_chain+0xe3>
c0003310:	89 ee                	mov    esi,ebp
c0003312:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003315:	76 0f                	jbe    c0003326 <remove_chain+0x95>
c0003317:	89 f2                	mov    edx,esi
c0003319:	89 f8                	mov    eax,edi
c000331b:	e8 84 fa ff ff       	call   c0002da4 <get_fat>
c0003320:	89 c5                	mov    ebp,eax
c0003322:	85 c0                	test   eax,eax
c0003324:	75 bf                	jne    c00032e5 <remove_chain+0x54>
c0003326:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003329:	0f 85 a0 00 00 00    	jne    c00033cf <remove_chain+0x13e>
c000332f:	eb 6c                	jmp    c000339d <remove_chain+0x10c>
c0003331:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003334:	84 c0                	test   al,al
c0003336:	75 7d                	jne    c00033b5 <remove_chain+0x124>
c0003338:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000333b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000333f:	0f 84 86 00 00 00    	je     c00033cb <remove_chain+0x13a>
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f8                	mov    eax,edi
c0003349:	e8 56 fa ff ff       	call   c0002da4 <get_fat>
c000334e:	83 f8 01             	cmp    eax,0x1
c0003351:	0f 86 4c ff ff ff    	jbe    c00032a3 <remove_chain+0x12>
c0003357:	83 f8 ff             	cmp    eax,0xffffffff
c000335a:	75 4e                	jne    c00033aa <remove_chain+0x119>
c000335c:	b8 01 00 00 00       	mov    eax,0x1
c0003361:	eb 6e                	jmp    c00033d1 <remove_chain+0x140>
c0003363:	31 c9                	xor    ecx,ecx
c0003365:	89 f2                	mov    edx,esi
c0003367:	89 d8                	mov    eax,ebx
c0003369:	e8 31 f8 ff ff       	call   c0002b9f <put_fat>
c000336e:	85 c0                	test   eax,eax
c0003370:	74 82                	je     c00032f4 <remove_chain+0x63>
c0003372:	eb 5d                	jmp    c00033d1 <remove_chain+0x140>
c0003374:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003377:	75 1b                	jne    c0003394 <remove_chain+0x103>
c0003379:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000337d:	89 d8                	mov    eax,ebx
c000337f:	83 ec 0c             	sub    esp,0xc
c0003382:	6a 00                	push   0x0
c0003384:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003388:	e8 5d f7 ff ff       	call   c0002aea <change_bitmap>
c000338d:	83 c4 10             	add    esp,0x10
c0003390:	85 c0                	test   eax,eax
c0003392:	75 3d                	jne    c00033d1 <remove_chain+0x140>
c0003394:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003398:	e9 73 ff ff ff       	jmp    c0003310 <remove_chain+0x7f>
c000339d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033a2:	75 8d                	jne    c0003331 <remove_chain+0xa0>
c00033a4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033a8:	eb 25                	jmp    c00033cf <remove_chain+0x13e>
c00033aa:	8d 53 01             	lea    edx,[ebx+0x1]
c00033ad:	89 c3                	mov    ebx,eax
c00033af:	39 c2                	cmp    edx,eax
c00033b1:	74 88                	je     c000333b <remove_chain+0xaa>
c00033b3:	eb 1a                	jmp    c00033cf <remove_chain+0x13e>
c00033b5:	3c 03                	cmp    al,0x3
c00033b7:	75 16                	jne    c00033cf <remove_chain+0x13e>
c00033b9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033bc:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c0:	77 0d                	ja     c00033cf <remove_chain+0x13e>
c00033c2:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c9:	72 04                	jb     c00033cf <remove_chain+0x13e>
c00033cb:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033cf:	31 c0                	xor    eax,eax
c00033d1:	83 c4 1c             	add    esp,0x1c
c00033d4:	5b                   	pop    ebx
c00033d5:	5e                   	pop    esi
c00033d6:	5f                   	pop    edi
c00033d7:	5d                   	pop    ebp
c00033d8:	c3                   	ret    

c00033d9 <dir_clear>:
c00033d9:	55                   	push   ebp
c00033da:	57                   	push   edi
c00033db:	56                   	push   esi
c00033dc:	89 c6                	mov    esi,eax
c00033de:	53                   	push   ebx
c00033df:	83 ec 1c             	sub    esp,0x1c
c00033e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033e6:	e8 9d ed ff ff       	call   c0002188 <sync_window>
c00033eb:	85 c0                	test   eax,eax
c00033ed:	0f 85 de 00 00 00    	jne    c00034d1 <dir_clear+0xf8>
c00033f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f7:	89 f0                	mov    eax,esi
c00033f9:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033fc:	e8 d6 e8 ff ff       	call   c0001cd7 <clst2sect>
c0003401:	b9 00 02 00 00       	mov    ecx,0x200
c0003406:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000340a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000340e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003411:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003414:	89 e8                	mov    eax,ebp
c0003416:	31 d2                	xor    edx,edx
c0003418:	e8 b5 e6 ff ff       	call   c0001ad2 <mem_set>
c000341d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003421:	c1 e3 09             	shl    ebx,0x9
c0003424:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000342a:	76 1f                	jbe    c000344b <dir_clear+0x72>
c000342c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003431:	eb 18                	jmp    c000344b <dir_clear+0x72>
c0003433:	83 ec 0c             	sub    esp,0xc
c0003436:	53                   	push   ebx
c0003437:	e8 35 4e 00 00       	call   c0008271 <ff_memalloc>
c000343c:	83 c4 10             	add    esp,0x10
c000343f:	89 c7                	mov    edi,eax
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 8f 00 00 00    	jne    c00034d8 <dir_clear+0xff>
c0003449:	d1 eb                	shr    ebx,1
c000344b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003451:	77 e0                	ja     c0003433 <dir_clear+0x5a>
c0003453:	31 db                	xor    ebx,ebx
c0003455:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003459:	39 d8                	cmp    eax,ebx
c000345b:	76 66                	jbe    c00034c3 <dir_clear+0xea>
c000345d:	83 ec 0c             	sub    esp,0xc
c0003460:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003464:	6a 01                	push   0x1
c0003466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346e:	55                   	push   ebp
c000346f:	50                   	push   eax
c0003470:	e8 94 e5 ff ff       	call   c0001a09 <disk_write>
c0003475:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000347a:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000347f:	83 c4 20             	add    esp,0x20
c0003482:	85 c0                	test   eax,eax
c0003484:	75 3d                	jne    c00034c3 <dir_clear+0xea>
c0003486:	43                   	inc    ebx
c0003487:	eb cc                	jmp    c0003455 <dir_clear+0x7c>
c0003489:	83 ec 0c             	sub    esp,0xc
c000348c:	31 d2                	xor    edx,edx
c000348e:	55                   	push   ebp
c000348f:	89 d8                	mov    eax,ebx
c0003491:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003495:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003499:	52                   	push   edx
c000349a:	50                   	push   eax
c000349b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000349f:	57                   	push   edi
c00034a0:	50                   	push   eax
c00034a1:	e8 63 e5 ff ff       	call   c0001a09 <disk_write>
c00034a6:	83 c4 20             	add    esp,0x20
c00034a9:	85 c0                	test   eax,eax
c00034ab:	75 0a                	jne    c00034b7 <dir_clear+0xde>
c00034ad:	01 eb                	add    ebx,ebp
c00034af:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034b3:	39 d8                	cmp    eax,ebx
c00034b5:	77 d2                	ja     c0003489 <dir_clear+0xb0>
c00034b7:	83 ec 0c             	sub    esp,0xc
c00034ba:	57                   	push   edi
c00034bb:	e8 c7 4d 00 00       	call   c0008287 <ff_memfree>
c00034c0:	83 c4 10             	add    esp,0x10
c00034c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c7:	39 d8                	cmp    eax,ebx
c00034c9:	0f 95 c0             	setne  al
c00034cc:	0f b6 c0             	movzx  eax,al
c00034cf:	eb 19                	jmp    c00034ea <dir_clear+0x111>
c00034d1:	b8 01 00 00 00       	mov    eax,0x1
c00034d6:	eb 12                	jmp    c00034ea <dir_clear+0x111>
c00034d8:	89 d9                	mov    ecx,ebx
c00034da:	31 d2                	xor    edx,edx
c00034dc:	c1 eb 09             	shr    ebx,0x9
c00034df:	e8 ee e5 ff ff       	call   c0001ad2 <mem_set>
c00034e4:	89 dd                	mov    ebp,ebx
c00034e6:	31 db                	xor    ebx,ebx
c00034e8:	eb c5                	jmp    c00034af <dir_clear+0xd6>
c00034ea:	83 c4 1c             	add    esp,0x1c
c00034ed:	5b                   	pop    ebx
c00034ee:	5e                   	pop    esi
c00034ef:	5f                   	pop    edi
c00034f0:	5d                   	pop    ebp
c00034f1:	c3                   	ret    

c00034f2 <dir_next>:
c00034f2:	55                   	push   ebp
c00034f3:	57                   	push   edi
c00034f4:	56                   	push   esi
c00034f5:	53                   	push   ebx
c00034f6:	89 c3                	mov    ebx,eax
c00034f8:	83 ec 1c             	sub    esp,0x1c
c00034fb:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003501:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003504:	8d 78 20             	lea    edi,[eax+0x20]
c0003507:	31 c0                	xor    eax,eax
c0003509:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000350d:	0f 94 c0             	sete   al
c0003510:	48                   	dec    eax
c0003511:	25 00 00 20 f0       	and    eax,0xf0200000
c0003516:	05 00 00 00 10       	add    eax,0x10000000
c000351b:	39 f8                	cmp    eax,edi
c000351d:	77 0e                	ja     c000352d <dir_next+0x3b>
c000351f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003526:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000352d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003530:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003533:	b8 04 00 00 00       	mov    eax,0x4
c0003538:	89 ce                	mov    esi,ecx
c000353a:	09 d6                	or     esi,edx
c000353c:	0f 84 da 00 00 00    	je     c000361c <dir_next+0x12a>
c0003542:	89 f8                	mov    eax,edi
c0003544:	25 ff 01 00 00       	and    eax,0x1ff
c0003549:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000354d:	0f 85 b9 00 00 00    	jne    c000360c <dir_next+0x11a>
c0003553:	83 c2 01             	add    edx,0x1
c0003556:	83 d1 00             	adc    ecx,0x0
c0003559:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000355c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000355f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003562:	85 d2                	test   edx,edx
c0003564:	75 29                	jne    c000358f <dir_next+0x9d>
c0003566:	89 fa                	mov    edx,edi
c0003568:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000356c:	c1 ea 05             	shr    edx,0x5
c000356f:	39 c2                	cmp    edx,eax
c0003571:	0f 82 95 00 00 00    	jb     c000360c <dir_next+0x11a>
c0003577:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000357e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003585:	b8 04 00 00 00       	mov    eax,0x4
c000358a:	e9 8d 00 00 00       	jmp    c000361c <dir_next+0x12a>
c000358f:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003593:	89 f9                	mov    ecx,edi
c0003595:	48                   	dec    eax
c0003596:	c1 e9 09             	shr    ecx,0x9
c0003599:	85 c8                	test   eax,ecx
c000359b:	75 6f                	jne    c000360c <dir_next+0x11a>
c000359d:	89 d8                	mov    eax,ebx
c000359f:	e8 00 f8 ff ff       	call   c0002da4 <get_fat>
c00035a4:	89 c6                	mov    esi,eax
c00035a6:	83 f8 01             	cmp    eax,0x1
c00035a9:	77 07                	ja     c00035b2 <dir_next+0xc0>
c00035ab:	b8 02 00 00 00       	mov    eax,0x2
c00035b0:	eb 6a                	jmp    c000361c <dir_next+0x12a>
c00035b2:	83 f8 ff             	cmp    eax,0xffffffff
c00035b5:	75 07                	jne    c00035be <dir_next+0xcc>
c00035b7:	b8 01 00 00 00       	mov    eax,0x1
c00035bc:	eb 5e                	jmp    c000361c <dir_next+0x12a>
c00035be:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035c1:	77 37                	ja     c00035fa <dir_next+0x108>
c00035c3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035c8:	74 ad                	je     c0003577 <dir_next+0x85>
c00035ca:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035cd:	89 d8                	mov    eax,ebx
c00035cf:	e8 be fa ff ff       	call   c0003092 <create_chain>
c00035d4:	89 c6                	mov    esi,eax
c00035d6:	b8 07 00 00 00       	mov    eax,0x7
c00035db:	85 f6                	test   esi,esi
c00035dd:	74 3d                	je     c000361c <dir_next+0x12a>
c00035df:	83 fe 01             	cmp    esi,0x1
c00035e2:	74 c7                	je     c00035ab <dir_next+0xb9>
c00035e4:	83 fe ff             	cmp    esi,0xffffffff
c00035e7:	74 ce                	je     c00035b7 <dir_next+0xc5>
c00035e9:	89 f2                	mov    edx,esi
c00035eb:	89 e8                	mov    eax,ebp
c00035ed:	e8 e7 fd ff ff       	call   c00033d9 <dir_clear>
c00035f2:	85 c0                	test   eax,eax
c00035f4:	75 c1                	jne    c00035b7 <dir_next+0xc5>
c00035f6:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035fa:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035fd:	89 f2                	mov    edx,esi
c00035ff:	89 e8                	mov    eax,ebp
c0003601:	e8 d1 e6 ff ff       	call   c0001cd7 <clst2sect>
c0003606:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003609:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000360c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003610:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003613:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003617:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000361a:	31 c0                	xor    eax,eax
c000361c:	83 c4 1c             	add    esp,0x1c
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <load_xdir>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	56                   	push   esi
c0003627:	89 c6                	mov    esi,eax
c0003629:	53                   	push   ebx
c000362a:	83 ec 1c             	sub    esp,0x1c
c000362d:	8b 00                	mov    eax,DWORD PTR [eax]
c000362f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003632:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003635:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003638:	e8 df eb ff ff       	call   c000221c <move_window>
c000363d:	89 c3                	mov    ebx,eax
c000363f:	85 c0                	test   eax,eax
c0003641:	0f 85 0c 01 00 00    	jne    c0003753 <load_xdir+0x12f>
c0003647:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000364d:	0f 85 fb 00 00 00    	jne    c000374e <load_xdir+0x12a>
c0003653:	89 f8                	mov    eax,edi
c0003655:	b9 20 00 00 00       	mov    ecx,0x20
c000365a:	e8 5e e4 ff ff       	call   c0001abd <mem_cpy>
c000365f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003663:	40                   	inc    eax
c0003664:	c1 e0 05             	shl    eax,0x5
c0003667:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000366b:	83 e8 60             	sub    eax,0x60
c000366e:	3d 00 02 00 00       	cmp    eax,0x200
c0003673:	0f 87 d5 00 00 00    	ja     c000374e <load_xdir+0x12a>
c0003679:	31 d2                	xor    edx,edx
c000367b:	89 f0                	mov    eax,esi
c000367d:	e8 70 fe ff ff       	call   c00034f2 <dir_next>
c0003682:	89 c3                	mov    ebx,eax
c0003684:	83 f8 04             	cmp    eax,0x4
c0003687:	0f 84 c1 00 00 00    	je     c000374e <load_xdir+0x12a>
c000368d:	85 c0                	test   eax,eax
c000368f:	0f 85 be 00 00 00    	jne    c0003753 <load_xdir+0x12f>
c0003695:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003698:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000369b:	8b 06                	mov    eax,DWORD PTR [esi]
c000369d:	e8 7a eb ff ff       	call   c000221c <move_window>
c00036a2:	89 c3                	mov    ebx,eax
c00036a4:	85 c0                	test   eax,eax
c00036a6:	0f 85 a7 00 00 00    	jne    c0003753 <load_xdir+0x12f>
c00036ac:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036af:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036b2:	0f 85 96 00 00 00    	jne    c000374e <load_xdir+0x12a>
c00036b8:	8d 47 20             	lea    eax,[edi+0x20]
c00036bb:	b9 20 00 00 00       	mov    ecx,0x20
c00036c0:	e8 f8 e3 ff ff       	call   c0001abd <mem_cpy>
c00036c5:	31 d2                	xor    edx,edx
c00036c7:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036cb:	b9 0f 00 00 00       	mov    ecx,0xf
c00036d0:	83 c0 2c             	add    eax,0x2c
c00036d3:	f7 f1                	div    ecx
c00036d5:	c1 e0 05             	shl    eax,0x5
c00036d8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036dc:	77 70                	ja     c000374e <load_xdir+0x12a>
c00036de:	bd 40 00 00 00       	mov    ebp,0x40
c00036e3:	31 d2                	xor    edx,edx
c00036e5:	89 f0                	mov    eax,esi
c00036e7:	e8 06 fe ff ff       	call   c00034f2 <dir_next>
c00036ec:	89 c3                	mov    ebx,eax
c00036ee:	83 f8 04             	cmp    eax,0x4
c00036f1:	74 5b                	je     c000374e <load_xdir+0x12a>
c00036f3:	85 c0                	test   eax,eax
c00036f5:	75 5c                	jne    c0003753 <load_xdir+0x12f>
c00036f7:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036fa:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00036ff:	e8 18 eb ff ff       	call   c000221c <move_window>
c0003704:	89 c3                	mov    ebx,eax
c0003706:	85 c0                	test   eax,eax
c0003708:	75 49                	jne    c0003753 <load_xdir+0x12f>
c000370a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000370d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003710:	75 3c                	jne    c000374e <load_xdir+0x12a>
c0003712:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003718:	77 0d                	ja     c0003727 <load_xdir+0x103>
c000371a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000371d:	b9 20 00 00 00       	mov    ecx,0x20
c0003722:	e8 96 e3 ff ff       	call   c0001abd <mem_cpy>
c0003727:	83 c5 20             	add    ebp,0x20
c000372a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000372e:	77 b3                	ja     c00036e3 <load_xdir+0xbf>
c0003730:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003736:	77 1b                	ja     c0003753 <load_xdir+0x12f>
c0003738:	89 f8                	mov    eax,edi
c000373a:	e8 cd e7 ff ff       	call   c0001f0c <xdir_sum>
c000373f:	89 c1                	mov    ecx,eax
c0003741:	8d 47 02             	lea    eax,[edi+0x2]
c0003744:	e8 f5 e2 ff ff       	call   c0001a3e <ld_word>
c0003749:	66 39 c1             	cmp    cx,ax
c000374c:	74 05                	je     c0003753 <load_xdir+0x12f>
c000374e:	bb 02 00 00 00       	mov    ebx,0x2
c0003753:	83 c4 1c             	add    esp,0x1c
c0003756:	89 d8                	mov    eax,ebx
c0003758:	5b                   	pop    ebx
c0003759:	5e                   	pop    esi
c000375a:	5f                   	pop    edi
c000375b:	5d                   	pop    ebp
c000375c:	c3                   	ret    

c000375d <load_obj_xdir>:
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 08             	sub    esp,0x8
c0003763:	8b 02                	mov    eax,DWORD PTR [edx]
c0003765:	89 03                	mov    DWORD PTR [ebx],eax
c0003767:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000376a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000376d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003770:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003773:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003776:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000377d:	30 c0                	xor    al,al
c000377f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003786:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003789:	89 d8                	mov    eax,ebx
c000378b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000378e:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003791:	e8 04 f8 ff ff       	call   c0002f9a <dir_sdi>
c0003796:	85 c0                	test   eax,eax
c0003798:	75 0b                	jne    c00037a5 <load_obj_xdir+0x48>
c000379a:	89 d8                	mov    eax,ebx
c000379c:	83 c4 08             	add    esp,0x8
c000379f:	5b                   	pop    ebx
c00037a0:	e9 7f fe ff ff       	jmp    c0003624 <load_xdir>
c00037a5:	83 c4 08             	add    esp,0x8
c00037a8:	5b                   	pop    ebx
c00037a9:	c3                   	ret    

c00037aa <dir_read>:
c00037aa:	55                   	push   ebp
c00037ab:	bd 04 00 00 00       	mov    ebp,0x4
c00037b0:	57                   	push   edi
c00037b1:	56                   	push   esi
c00037b2:	be ff ff ff ff       	mov    esi,0xffffffff
c00037b7:	53                   	push   ebx
c00037b8:	89 c3                	mov    ebx,eax
c00037ba:	83 ec 1c             	sub    esp,0x1c
c00037bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037c1:	8b 38                	mov    edi,DWORD PTR [eax]
c00037c3:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037ce:	89 c8                	mov    eax,ecx
c00037d0:	09 d0                	or     eax,edx
c00037d2:	0f 84 25 01 00 00    	je     c00038fd <dir_read+0x153>
c00037d8:	89 f8                	mov    eax,edi
c00037da:	e8 3d ea ff ff       	call   c000221c <move_window>
c00037df:	89 c5                	mov    ebp,eax
c00037e1:	85 c0                	test   eax,eax
c00037e3:	0f 85 23 01 00 00    	jne    c000390c <dir_read+0x162>
c00037e9:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037ec:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037ee:	84 c9                	test   cl,cl
c00037f0:	0f 84 11 01 00 00    	je     c0003907 <dir_read+0x15d>
c00037f6:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037f9:	75 48                	jne    c0003843 <dir_read+0x99>
c00037fb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003800:	74 10                	je     c0003812 <dir_read+0x68>
c0003802:	80 f9 83             	cmp    cl,0x83
c0003805:	0f 85 dd 00 00 00    	jne    c00038e8 <dir_read+0x13e>
c000380b:	31 ed                	xor    ebp,ebp
c000380d:	e9 08 01 00 00       	jmp    c000391a <dir_read+0x170>
c0003812:	80 f9 85             	cmp    cl,0x85
c0003815:	0f 85 cd 00 00 00    	jne    c00038e8 <dir_read+0x13e>
c000381b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000381e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003821:	89 d8                	mov    eax,ebx
c0003823:	e8 fc fd ff ff       	call   c0003624 <load_xdir>
c0003828:	89 c5                	mov    ebp,eax
c000382a:	85 c0                	test   eax,eax
c000382c:	0f 85 da 00 00 00    	jne    c000390c <dir_read+0x162>
c0003832:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003835:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003838:	83 e0 3f             	and    eax,0x3f
c000383b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000383e:	e9 d7 00 00 00       	jmp    c000391a <dir_read+0x170>
c0003843:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003846:	83 e0 3f             	and    eax,0x3f
c0003849:	80 f9 2e             	cmp    cl,0x2e
c000384c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003850:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003853:	0f 84 8a 00 00 00    	je     c00038e3 <dir_read+0x139>
c0003859:	80 f9 e5             	cmp    cl,0xe5
c000385c:	0f 84 81 00 00 00    	je     c00038e3 <dir_read+0x139>
c0003862:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003866:	83 e0 1f             	and    eax,0x1f
c0003869:	83 f8 08             	cmp    eax,0x8
c000386c:	0f 94 c0             	sete   al
c000386f:	0f b6 c0             	movzx  eax,al
c0003872:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003876:	75 6b                	jne    c00038e3 <dir_read+0x139>
c0003878:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000387d:	75 44                	jne    c00038c3 <dir_read+0x119>
c000387f:	f6 c1 40             	test   cl,0x40
c0003882:	74 12                	je     c0003896 <dir_read+0xec>
c0003884:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003887:	83 e1 bf             	and    ecx,0xffffffbf
c000388a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000388e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003891:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003894:	eb 06                	jmp    c000389c <dir_read+0xf2>
c0003896:	89 f0                	mov    eax,esi
c0003898:	38 c8                	cmp    al,cl
c000389a:	75 47                	jne    c00038e3 <dir_read+0x139>
c000389c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038a0:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038a8:	75 3e                	jne    c00038e8 <dir_read+0x13e>
c00038aa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038b1:	e8 8a e4 ff ff       	call   c0001d40 <pick_lfn>
c00038b6:	85 c0                	test   eax,eax
c00038b8:	74 2e                	je     c00038e8 <dir_read+0x13e>
c00038ba:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038be:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038c1:	eb 25                	jmp    c00038e8 <dir_read+0x13e>
c00038c3:	89 f0                	mov    eax,esi
c00038c5:	84 c0                	test   al,al
c00038c7:	75 11                	jne    c00038da <dir_read+0x130>
c00038c9:	89 d0                	mov    eax,edx
c00038cb:	e8 2a e6 ff ff       	call   c0001efa <sum_sfn>
c00038d0:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d4:	0f 84 31 ff ff ff    	je     c000380b <dir_read+0x61>
c00038da:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038e1:	eb 37                	jmp    c000391a <dir_read+0x170>
c00038e3:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	89 d8                	mov    eax,ebx
c00038ec:	e8 01 fc ff ff       	call   c00034f2 <dir_next>
c00038f1:	89 c5                	mov    ebp,eax
c00038f3:	85 c0                	test   eax,eax
c00038f5:	0f 84 cd fe ff ff    	je     c00037c8 <dir_read+0x1e>
c00038fb:	eb 0f                	jmp    c000390c <dir_read+0x162>
c00038fd:	85 ed                	test   ebp,ebp
c00038ff:	0f 84 06 ff ff ff    	je     c000380b <dir_read+0x61>
c0003905:	eb 05                	jmp    c000390c <dir_read+0x162>
c0003907:	bd 04 00 00 00       	mov    ebp,0x4
c000390c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003913:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000391a:	83 c4 1c             	add    esp,0x1c
c000391d:	89 e8                	mov    eax,ebp
c000391f:	5b                   	pop    ebx
c0003920:	5e                   	pop    esi
c0003921:	5f                   	pop    edi
c0003922:	5d                   	pop    ebp
c0003923:	c3                   	ret    

c0003924 <dir_alloc>:
c0003924:	55                   	push   ebp
c0003925:	89 d5                	mov    ebp,edx
c0003927:	57                   	push   edi
c0003928:	31 d2                	xor    edx,edx
c000392a:	56                   	push   esi
c000392b:	53                   	push   ebx
c000392c:	89 c3                	mov    ebx,eax
c000392e:	83 ec 0c             	sub    esp,0xc
c0003931:	8b 38                	mov    edi,DWORD PTR [eax]
c0003933:	e8 62 f6 ff ff       	call   c0002f9a <dir_sdi>
c0003938:	85 c0                	test   eax,eax
c000393a:	75 4e                	jne    c000398a <dir_alloc+0x66>
c000393c:	31 f6                	xor    esi,esi
c000393e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003941:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003944:	89 f8                	mov    eax,edi
c0003946:	e8 d1 e8 ff ff       	call   c000221c <move_window>
c000394b:	85 c0                	test   eax,eax
c000394d:	75 3b                	jne    c000398a <dir_alloc+0x66>
c000394f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003952:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003955:	8a 12                	mov    dl,BYTE PTR [edx]
c0003957:	75 07                	jne    c0003960 <dir_alloc+0x3c>
c0003959:	f7 d2                	not    edx
c000395b:	c0 ea 07             	shr    dl,0x7
c000395e:	eb 0d                	jmp    c000396d <dir_alloc+0x49>
c0003960:	84 d2                	test   dl,dl
c0003962:	0f 94 c1             	sete   cl
c0003965:	80 fa e5             	cmp    dl,0xe5
c0003968:	0f 94 c2             	sete   dl
c000396b:	09 ca                	or     edx,ecx
c000396d:	84 d2                	test   dl,dl
c000396f:	74 07                	je     c0003978 <dir_alloc+0x54>
c0003971:	46                   	inc    esi
c0003972:	39 ee                	cmp    esi,ebp
c0003974:	75 04                	jne    c000397a <dir_alloc+0x56>
c0003976:	eb 1c                	jmp    c0003994 <dir_alloc+0x70>
c0003978:	31 f6                	xor    esi,esi
c000397a:	ba 01 00 00 00       	mov    edx,0x1
c000397f:	89 d8                	mov    eax,ebx
c0003981:	e8 6c fb ff ff       	call   c00034f2 <dir_next>
c0003986:	85 c0                	test   eax,eax
c0003988:	74 b4                	je     c000393e <dir_alloc+0x1a>
c000398a:	83 f8 04             	cmp    eax,0x4
c000398d:	75 05                	jne    c0003994 <dir_alloc+0x70>
c000398f:	b8 07 00 00 00       	mov    eax,0x7
c0003994:	83 c4 0c             	add    esp,0xc
c0003997:	5b                   	pop    ebx
c0003998:	5e                   	pop    esi
c0003999:	5f                   	pop    edi
c000399a:	5d                   	pop    ebp
c000399b:	c3                   	ret    

c000399c <store_xdir>:
c000399c:	55                   	push   ebp
c000399d:	57                   	push   edi
c000399e:	89 c7                	mov    edi,eax
c00039a0:	56                   	push   esi
c00039a1:	53                   	push   ebx
c00039a2:	83 ec 0c             	sub    esp,0xc
c00039a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00039a7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039aa:	89 e8                	mov    eax,ebp
c00039ac:	e8 5b e5 ff ff       	call   c0001f0c <xdir_sum>
c00039b1:	0f b7 d0             	movzx  edx,ax
c00039b4:	8d 45 02             	lea    eax,[ebp+0x2]
c00039b7:	e8 f4 e0 ff ff       	call   c0001ab0 <st_word>
c00039bc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c0:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 d0 f5 ff ff       	call   c0002f9a <dir_sdi>
c00039ca:	89 c6                	mov    esi,eax
c00039cc:	85 f6                	test   esi,esi
c00039ce:	75 3d                	jne    c0003a0d <store_xdir+0x71>
c00039d0:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039d3:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039d6:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d8:	e8 3f e8 ff ff       	call   c000221c <move_window>
c00039dd:	89 c6                	mov    esi,eax
c00039df:	85 c0                	test   eax,eax
c00039e1:	75 2a                	jne    c0003a0d <store_xdir+0x71>
c00039e3:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039e6:	b9 20 00 00 00       	mov    ecx,0x20
c00039eb:	89 ea                	mov    edx,ebp
c00039ed:	e8 cb e0 ff ff       	call   c0001abd <mem_cpy>
c00039f2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f4:	85 db                	test   ebx,ebx
c00039f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039fa:	74 11                	je     c0003a0d <store_xdir+0x71>
c00039fc:	31 d2                	xor    edx,edx
c00039fe:	89 f8                	mov    eax,edi
c0003a00:	83 c5 20             	add    ebp,0x20
c0003a03:	e8 ea fa ff ff       	call   c00034f2 <dir_next>
c0003a08:	4b                   	dec    ebx
c0003a09:	89 c6                	mov    esi,eax
c0003a0b:	eb bf                	jmp    c00039cc <store_xdir+0x30>
c0003a0d:	89 f0                	mov    eax,esi
c0003a0f:	83 fe 02             	cmp    esi,0x2
c0003a12:	76 05                	jbe    c0003a19 <store_xdir+0x7d>
c0003a14:	b8 02 00 00 00       	mov    eax,0x2
c0003a19:	83 c4 0c             	add    esp,0xc
c0003a1c:	5b                   	pop    ebx
c0003a1d:	5e                   	pop    esi
c0003a1e:	5f                   	pop    edi
c0003a1f:	5d                   	pop    ebp
c0003a20:	c3                   	ret    

c0003a21 <dir_remove>:
c0003a21:	57                   	push   edi
c0003a22:	56                   	push   esi
c0003a23:	53                   	push   ebx
c0003a24:	89 c3                	mov    ebx,eax
c0003a26:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a29:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a2b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a2e:	83 fa ff             	cmp    edx,0xffffffff
c0003a31:	74 09                	je     c0003a3c <dir_remove+0x1b>
c0003a33:	e8 62 f5 ff ff       	call   c0002f9a <dir_sdi>
c0003a38:	85 c0                	test   eax,eax
c0003a3a:	75 41                	jne    c0003a7d <dir_remove+0x5c>
c0003a3c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a3f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a42:	89 f0                	mov    eax,esi
c0003a44:	e8 d3 e7 ff ff       	call   c000221c <move_window>
c0003a49:	85 c0                	test   eax,eax
c0003a4b:	75 26                	jne    c0003a73 <dir_remove+0x52>
c0003a4d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a50:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a53:	75 05                	jne    c0003a5a <dir_remove+0x39>
c0003a55:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a58:	eb 03                	jmp    c0003a5d <dir_remove+0x3c>
c0003a5a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a5d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a61:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a64:	73 17                	jae    c0003a7d <dir_remove+0x5c>
c0003a66:	31 d2                	xor    edx,edx
c0003a68:	89 d8                	mov    eax,ebx
c0003a6a:	e8 83 fa ff ff       	call   c00034f2 <dir_next>
c0003a6f:	85 c0                	test   eax,eax
c0003a71:	74 c9                	je     c0003a3c <dir_remove+0x1b>
c0003a73:	83 f8 04             	cmp    eax,0x4
c0003a76:	75 05                	jne    c0003a7d <dir_remove+0x5c>
c0003a78:	b8 02 00 00 00       	mov    eax,0x2
c0003a7d:	5b                   	pop    ebx
c0003a7e:	5e                   	pop    esi
c0003a7f:	5f                   	pop    edi
c0003a80:	c3                   	ret    

c0003a81 <create_name>:
c0003a81:	55                   	push   ebp
c0003a82:	89 d5                	mov    ebp,edx
c0003a84:	57                   	push   edi
c0003a85:	89 c7                	mov    edi,eax
c0003a87:	56                   	push   esi
c0003a88:	31 f6                	xor    esi,esi
c0003a8a:	53                   	push   ebx
c0003a8b:	83 ec 3c             	sub    esp,0x3c
c0003a8e:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a90:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a94:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a9d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aa1:	e8 72 e0 ff ff       	call   c0001b18 <tchar2uni>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	83 f8 ff             	cmp    eax,0xffffffff
c0003aab:	75 0a                	jne    c0003ab7 <create_name+0x36>
c0003aad:	b8 06 00 00 00       	mov    eax,0x6
c0003ab2:	e9 9e 02 00 00       	jmp    c0003d55 <create_name+0x2d4>
c0003ab7:	3d ff ff 00 00       	cmp    eax,0xffff
c0003abc:	76 0c                	jbe    c0003aca <create_name+0x49>
c0003abe:	c1 e8 10             	shr    eax,0x10
c0003ac1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ac5:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ac9:	46                   	inc    esi
c0003aca:	66 83 fb 1f          	cmp    bx,0x1f
c0003ace:	76 4f                	jbe    c0003b1f <create_name+0x9e>
c0003ad0:	66 83 fb 5c          	cmp    bx,0x5c
c0003ad4:	74 35                	je     c0003b0b <create_name+0x8a>
c0003ad6:	66 83 fb 2f          	cmp    bx,0x2f
c0003ada:	74 2f                	je     c0003b0b <create_name+0x8a>
c0003adc:	66 83 fb 7f          	cmp    bx,0x7f
c0003ae0:	77 11                	ja     c0003af3 <create_name+0x72>
c0003ae2:	0f b7 d3             	movzx  edx,bx
c0003ae5:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c0003aea:	e8 11 e0 ff ff       	call   c0001b00 <chk_chr>
c0003aef:	85 c0                	test   eax,eax
c0003af1:	75 ba                	jne    c0003aad <create_name+0x2c>
c0003af3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003af9:	77 b2                	ja     c0003aad <create_name+0x2c>
c0003afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aff:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b03:	46                   	inc    esi
c0003b04:	eb 97                	jmp    c0003a9d <create_name+0x1c>
c0003b06:	40                   	inc    eax
c0003b07:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b0f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b11:	80 fa 2f             	cmp    dl,0x2f
c0003b14:	74 f0                	je     c0003b06 <create_name+0x85>
c0003b16:	80 fa 5c             	cmp    dl,0x5c
c0003b19:	74 eb                	je     c0003b06 <create_name+0x85>
c0003b1b:	31 db                	xor    ebx,ebx
c0003b1d:	eb 02                	jmp    c0003b21 <create_name+0xa0>
c0003b1f:	b3 04                	mov    bl,0x4
c0003b21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b25:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b28:	85 f6                	test   esi,esi
c0003b2a:	74 18                	je     c0003b44 <create_name+0xc3>
c0003b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b30:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b35:	66 83 f8 20          	cmp    ax,0x20
c0003b39:	74 06                	je     c0003b41 <create_name+0xc0>
c0003b3b:	66 83 f8 2e          	cmp    ax,0x2e
c0003b3f:	75 03                	jne    c0003b44 <create_name+0xc3>
c0003b41:	4e                   	dec    esi
c0003b42:	eb e4                	jmp    c0003b28 <create_name+0xa7>
c0003b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b48:	31 ed                	xor    ebp,ebp
c0003b4a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b50:	85 f6                	test   esi,esi
c0003b52:	0f 84 55 ff ff ff    	je     c0003aad <create_name+0x2c>
c0003b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b5c:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b5f:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b63:	66 83 f8 20          	cmp    ax,0x20
c0003b67:	75 04                	jne    c0003b6d <create_name+0xec>
c0003b69:	89 d5                	mov    ebp,edx
c0003b6b:	eb eb                	jmp    c0003b58 <create_name+0xd7>
c0003b6d:	85 ed                	test   ebp,ebp
c0003b6f:	75 06                	jne    c0003b77 <create_name+0xf6>
c0003b71:	66 83 f8 2e          	cmp    ax,0x2e
c0003b75:	75 08                	jne    c0003b7f <create_name+0xfe>
c0003b77:	83 cb 03             	or     ebx,0x3
c0003b7a:	eb 03                	jmp    c0003b7f <create_name+0xfe>
c0003b7c:	4e                   	dec    esi
c0003b7d:	74 0c                	je     c0003b8b <create_name+0x10a>
c0003b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b83:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b89:	75 f1                	jne    c0003b7c <create_name+0xfb>
c0003b8b:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b90:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b93:	ba 20 00 00 00       	mov    edx,0x20
c0003b98:	e8 35 df ff ff       	call   c0001ad2 <mem_set>
c0003b9d:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003ba5:	31 c9                	xor    ecx,ecx
c0003ba7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bac:	8d 45 01             	lea    eax,[ebp+0x1]
c0003baf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bb7:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bbb:	66 85 ed             	test   bp,bp
c0003bbe:	0f 84 30 01 00 00    	je     c0003cf4 <create_name+0x273>
c0003bc4:	66 83 fd 20          	cmp    bp,0x20
c0003bc8:	74 10                	je     c0003bda <create_name+0x159>
c0003bca:	66 83 fd 2e          	cmp    bp,0x2e
c0003bce:	75 13                	jne    c0003be3 <create_name+0x162>
c0003bd0:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd4:	0f 84 6b 01 00 00    	je     c0003d45 <create_name+0x2c4>
c0003bda:	83 cb 03             	or     ebx,0x3
c0003bdd:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003be1:	eb c9                	jmp    c0003bac <create_name+0x12b>
c0003be3:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003be7:	73 0b                	jae    c0003bf4 <create_name+0x173>
c0003be9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bed:	75 47                	jne    c0003c36 <create_name+0x1b5>
c0003bef:	e9 51 01 00 00       	jmp    c0003d45 <create_name+0x2c4>
c0003bf4:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bf9:	75 10                	jne    c0003c0b <create_name+0x18a>
c0003bfb:	83 cb 03             	or     ebx,0x3
c0003bfe:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c06:	e9 e9 00 00 00       	jmp    c0003cf4 <create_name+0x273>
c0003c0b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c0f:	74 0d                	je     c0003c1e <create_name+0x19d>
c0003c11:	83 cb 03             	or     ebx,0x3
c0003c14:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c18:	0f 87 d6 00 00 00    	ja     c0003cf4 <create_name+0x273>
c0003c1e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c23:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c27:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c2f:	b9 08 00 00 00       	mov    ecx,0x8
c0003c34:	eb a7                	jmp    c0003bdd <create_name+0x15c>
c0003c36:	66 83 fd 7f          	cmp    bp,0x7f
c0003c3a:	76 68                	jbe    c0003ca4 <create_name+0x223>
c0003c3c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c40:	88 da                	mov    dl,bl
c0003c42:	83 ca 02             	or     edx,0x2
c0003c45:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c49:	50                   	push   eax
c0003c4a:	50                   	push   eax
c0003c4b:	68 b5 01 00 00       	push   0x1b5
c0003c50:	55                   	push   ebp
c0003c51:	e8 48 46 00 00       	call   c000829e <ff_uni2oem>
c0003c56:	83 c4 10             	add    esp,0x10
c0003c59:	89 c5                	mov    ebp,eax
c0003c5b:	a8 80                	test   al,0x80
c0003c5d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c61:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c65:	74 0c                	je     c0003c73 <create_name+0x1f2>
c0003c67:	83 e5 7f             	and    ebp,0x7f
c0003c6a:	0f b6 ad 60 8b 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd74a0]
c0003c71:	eb 2a                	jmp    c0003c9d <create_name+0x21c>
c0003c73:	66 3d ff 00          	cmp    ax,0xff
c0003c77:	76 24                	jbe    c0003c9d <create_name+0x21c>
c0003c79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c7d:	48                   	dec    eax
c0003c7e:	39 c8                	cmp    eax,ecx
c0003c80:	77 0c                	ja     c0003c8e <create_name+0x20d>
c0003c82:	83 cb 03             	or     ebx,0x3
c0003c85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c89:	e9 4f ff ff ff       	jmp    c0003bdd <create_name+0x15c>
c0003c8e:	89 e8                	mov    eax,ebp
c0003c90:	88 d3                	mov    bl,dl
c0003c92:	66 c1 e8 08          	shr    ax,0x8
c0003c96:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c9a:	41                   	inc    ecx
c0003c9b:	eb 4b                	jmp    c0003ce8 <create_name+0x267>
c0003c9d:	88 d3                	mov    bl,dl
c0003c9f:	66 85 ed             	test   bp,bp
c0003ca2:	74 19                	je     c0003cbd <create_name+0x23c>
c0003ca4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ca8:	0f b7 d5             	movzx  edx,bp
c0003cab:	b8 1b 8c 02 c0       	mov    eax,0xc0028c1b
c0003cb0:	e8 4b de ff ff       	call   c0001b00 <chk_chr>
c0003cb5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cb9:	85 c0                	test   eax,eax
c0003cbb:	74 0a                	je     c0003cc7 <create_name+0x246>
c0003cbd:	83 cb 03             	or     ebx,0x3
c0003cc0:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cc5:	eb 21                	jmp    c0003ce8 <create_name+0x267>
c0003cc7:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cca:	66 83 f8 19          	cmp    ax,0x19
c0003cce:	77 07                	ja     c0003cd7 <create_name+0x256>
c0003cd0:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003cd5:	eb 11                	jmp    c0003ce8 <create_name+0x267>
c0003cd7:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cda:	66 83 f8 19          	cmp    ax,0x19
c0003cde:	77 08                	ja     c0003ce8 <create_name+0x267>
c0003ce0:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ce5:	83 ed 20             	sub    ebp,0x20
c0003ce8:	89 e8                	mov    eax,ebp
c0003cea:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cee:	41                   	inc    ecx
c0003cef:	e9 e9 fe ff ff       	jmp    c0003bdd <create_name+0x15c>
c0003cf4:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cf8:	75 04                	jne    c0003cfe <create_name+0x27d>
c0003cfa:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cfe:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d03:	75 05                	jne    c0003d0a <create_name+0x289>
c0003d05:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d0a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d0e:	83 e0 0c             	and    eax,0xc
c0003d11:	3c 0c                	cmp    al,0xc
c0003d13:	74 0b                	je     c0003d20 <create_name+0x29f>
c0003d15:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d19:	83 e0 03             	and    eax,0x3
c0003d1c:	3c 03                	cmp    al,0x3
c0003d1e:	75 05                	jne    c0003d25 <create_name+0x2a4>
c0003d20:	83 cb 02             	or     ebx,0x2
c0003d23:	eb 19                	jmp    c0003d3e <create_name+0x2bd>
c0003d25:	f6 c3 02             	test   bl,0x2
c0003d28:	75 14                	jne    c0003d3e <create_name+0x2bd>
c0003d2a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d2f:	74 03                	je     c0003d34 <create_name+0x2b3>
c0003d31:	83 cb 10             	or     ebx,0x10
c0003d34:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d39:	74 03                	je     c0003d3e <create_name+0x2bd>
c0003d3b:	83 cb 08             	or     ebx,0x8
c0003d3e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d41:	31 c0                	xor    eax,eax
c0003d43:	eb 10                	jmp    c0003d55 <create_name+0x2d4>
c0003d45:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d4a:	0f 85 ce fe ff ff    	jne    c0003c1e <create_name+0x19d>
c0003d50:	e9 a6 fe ff ff       	jmp    c0003bfb <create_name+0x17a>
c0003d55:	83 c4 3c             	add    esp,0x3c
c0003d58:	5b                   	pop    ebx
c0003d59:	5e                   	pop    esi
c0003d5a:	5f                   	pop    edi
c0003d5b:	5d                   	pop    ebp
c0003d5c:	c3                   	ret    

c0003d5d <xname_sum>:
c0003d5d:	56                   	push   esi
c0003d5e:	53                   	push   ebx
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	51                   	push   ecx
c0003d62:	31 db                	xor    ebx,ebx
c0003d64:	83 c6 02             	add    esi,0x2
c0003d67:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d6b:	66 85 c0             	test   ax,ax
c0003d6e:	74 1f                	je     c0003d8f <xname_sum+0x32>
c0003d70:	83 ec 0c             	sub    esp,0xc
c0003d73:	66 d1 cb             	ror    bx,1
c0003d76:	50                   	push   eax
c0003d77:	e8 1e 46 00 00       	call   c000839a <ff_wtoupper>
c0003d7c:	83 c4 10             	add    esp,0x10
c0003d7f:	0f b6 d0             	movzx  edx,al
c0003d82:	66 c1 e8 08          	shr    ax,0x8
c0003d86:	01 d3                	add    ebx,edx
c0003d88:	66 d1 cb             	ror    bx,1
c0003d8b:	01 c3                	add    ebx,eax
c0003d8d:	eb d5                	jmp    c0003d64 <xname_sum+0x7>
c0003d8f:	89 d8                	mov    eax,ebx
c0003d91:	5a                   	pop    edx
c0003d92:	5b                   	pop    ebx
c0003d93:	5e                   	pop    esi
c0003d94:	c3                   	ret    

c0003d95 <create_xdir>:
c0003d95:	55                   	push   ebp
c0003d96:	b9 40 00 00 00       	mov    ecx,0x40
c0003d9b:	57                   	push   edi
c0003d9c:	bd 01 00 00 00       	mov    ebp,0x1
c0003da1:	56                   	push   esi
c0003da2:	31 ff                	xor    edi,edi
c0003da4:	53                   	push   ebx
c0003da5:	be 40 00 00 00       	mov    esi,0x40
c0003daa:	89 c3                	mov    ebx,eax
c0003dac:	83 ec 1c             	sub    esp,0x1c
c0003daf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003db3:	31 d2                	xor    edx,edx
c0003db5:	e8 18 dd ff ff       	call   c0001ad2 <mem_set>
c0003dba:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dbd:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dc1:	31 c9                	xor    ecx,ecx
c0003dc3:	8d 46 01             	lea    eax,[esi+0x1]
c0003dc6:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dca:	83 c6 02             	add    esi,0x2
c0003dcd:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dd1:	66 85 ed             	test   bp,bp
c0003dd4:	74 12                	je     c0003de8 <create_xdir+0x53>
c0003dd6:	0f b6 c1             	movzx  eax,cl
c0003dd9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ddd:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003de1:	66 83 fd 01          	cmp    bp,0x1
c0003de5:	80 d9 ff             	sbb    cl,0xff
c0003de8:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003deb:	0f b7 d5             	movzx  edx,bp
c0003dee:	83 c6 02             	add    esi,0x2
c0003df1:	e8 ba dc ff ff       	call   c0001ab0 <st_word>
c0003df6:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dfc:	75 d3                	jne    c0003dd1 <create_xdir+0x3c>
c0003dfe:	8d 47 01             	lea    eax,[edi+0x1]
c0003e01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e05:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e09:	0f b6 c1             	movzx  eax,cl
c0003e0c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e11:	74 07                	je     c0003e1a <create_xdir+0x85>
c0003e13:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e18:	eb a9                	jmp    c0003dc3 <create_xdir+0x2e>
c0003e1a:	8d 47 02             	lea    eax,[edi+0x2]
c0003e1d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e20:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e23:	89 d0                	mov    eax,edx
c0003e25:	e8 33 ff ff ff       	call   c0003d5d <xname_sum>
c0003e2a:	83 c4 1c             	add    esp,0x1c
c0003e2d:	0f b7 d0             	movzx  edx,ax
c0003e30:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e33:	5b                   	pop    ebx
c0003e34:	5e                   	pop    esi
c0003e35:	5f                   	pop    edi
c0003e36:	5d                   	pop    ebp
c0003e37:	e9 74 dc ff ff       	jmp    c0001ab0 <st_word>

c0003e3c <cmp_lfn>:
c0003e3c:	55                   	push   ebp
c0003e3d:	57                   	push   edi
c0003e3e:	89 d7                	mov    edi,edx
c0003e40:	56                   	push   esi
c0003e41:	53                   	push   ebx
c0003e42:	83 ec 1c             	sub    esp,0x1c
c0003e45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e49:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e4c:	e8 ed db ff ff       	call   c0001a3e <ld_word>
c0003e51:	66 85 c0             	test   ax,ax
c0003e54:	74 07                	je     c0003e5d <cmp_lfn+0x21>
c0003e56:	31 c0                	xor    eax,eax
c0003e58:	e9 9a 00 00 00       	jmp    c0003ef7 <cmp_lfn+0xbb>
c0003e5d:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e5f:	bd 01 00 00 00       	mov    ebp,0x1
c0003e64:	83 e3 3f             	and    ebx,0x3f
c0003e67:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e6f:	4b                   	dec    ebx
c0003e70:	6b db 0d             	imul   ebx,ebx,0xd
c0003e73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e77:	0f b6 80 e0 8b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7420]
c0003e7e:	01 f8                	add    eax,edi
c0003e80:	e8 b9 db ff ff       	call   c0001a3e <ld_word>
c0003e85:	66 85 ed             	test   bp,bp
c0003e88:	89 c6                	mov    esi,eax
c0003e8a:	74 3c                	je     c0003ec8 <cmp_lfn+0x8c>
c0003e8c:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e92:	77 c2                	ja     c0003e56 <cmp_lfn+0x1a>
c0003e94:	83 ec 0c             	sub    esp,0xc
c0003e97:	0f b7 c0             	movzx  eax,ax
c0003e9a:	50                   	push   eax
c0003e9b:	e8 fa 44 00 00       	call   c000839a <ff_wtoupper>
c0003ea0:	89 c5                	mov    ebp,eax
c0003ea2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ea5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ea9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ead:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003eb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eb4:	e8 e1 44 00 00       	call   c000839a <ff_wtoupper>
c0003eb9:	83 c4 10             	add    esp,0x10
c0003ebc:	39 c5                	cmp    ebp,eax
c0003ebe:	75 96                	jne    c0003e56 <cmp_lfn+0x1a>
c0003ec0:	89 f5                	mov    ebp,esi
c0003ec2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ec6:	eb 04                	jmp    c0003ecc <cmp_lfn+0x90>
c0003ec8:	66 46                	inc    si
c0003eca:	75 8a                	jne    c0003e56 <cmp_lfn+0x1a>
c0003ecc:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ed0:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ed5:	75 9c                	jne    c0003e73 <cmp_lfn+0x37>
c0003ed7:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003eda:	74 16                	je     c0003ef2 <cmp_lfn+0xb6>
c0003edc:	66 85 ed             	test   bp,bp
c0003edf:	74 11                	je     c0003ef2 <cmp_lfn+0xb6>
c0003ee1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ee5:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003eea:	0f 94 c0             	sete   al
c0003eed:	0f b6 c0             	movzx  eax,al
c0003ef0:	eb 05                	jmp    c0003ef7 <cmp_lfn+0xbb>
c0003ef2:	b8 01 00 00 00       	mov    eax,0x1
c0003ef7:	83 c4 1c             	add    esp,0x1c
c0003efa:	5b                   	pop    ebx
c0003efb:	5e                   	pop    esi
c0003efc:	5f                   	pop    edi
c0003efd:	5d                   	pop    ebp
c0003efe:	c3                   	ret    

c0003eff <dir_find>:
c0003eff:	55                   	push   ebp
c0003f00:	31 d2                	xor    edx,edx
c0003f02:	57                   	push   edi
c0003f03:	56                   	push   esi
c0003f04:	53                   	push   ebx
c0003f05:	89 c3                	mov    ebx,eax
c0003f07:	83 ec 1c             	sub    esp,0x1c
c0003f0a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f0c:	e8 89 f0 ff ff       	call   c0002f9a <dir_sdi>
c0003f11:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f14:	85 c0                	test   eax,eax
c0003f16:	0f 85 9e 01 00 00    	jne    c00040ba <dir_find+0x1bb>
c0003f1c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f1f:	0f 85 8d 00 00 00    	jne    c0003fb2 <dir_find+0xb3>
c0003f25:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f28:	e8 30 fe ff ff       	call   c0003d5d <xname_sum>
c0003f2d:	89 c7                	mov    edi,eax
c0003f2f:	31 d2                	xor    edx,edx
c0003f31:	89 d8                	mov    eax,ebx
c0003f33:	e8 72 f8 ff ff       	call   c00037aa <dir_read>
c0003f38:	85 c0                	test   eax,eax
c0003f3a:	0f 85 5e 01 00 00    	jne    c000409e <dir_find+0x19f>
c0003f40:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f43:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f46:	e8 f3 da ff ff       	call   c0001a3e <ld_word>
c0003f4b:	66 39 f8             	cmp    ax,di
c0003f4e:	75 df                	jne    c0003f2f <dir_find+0x30>
c0003f50:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f53:	31 ed                	xor    ebp,ebp
c0003f55:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f59:	ba 40 00 00 00       	mov    edx,0x40
c0003f5e:	89 e9                	mov    ecx,ebp
c0003f60:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f64:	0f 84 42 01 00 00    	je     c00040ac <dir_find+0x1ad>
c0003f6a:	f6 c2 1f             	test   dl,0x1f
c0003f6d:	75 03                	jne    c0003f72 <dir_find+0x73>
c0003f6f:	83 c2 02             	add    edx,0x2
c0003f72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f76:	89 d0                	mov    eax,edx
c0003f78:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f7b:	e8 be da ff ff       	call   c0001a3e <ld_word>
c0003f80:	83 ec 0c             	sub    esp,0xc
c0003f83:	0f b7 c0             	movzx  eax,ax
c0003f86:	50                   	push   eax
c0003f87:	e8 0e 44 00 00       	call   c000839a <ff_wtoupper>
c0003f8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f90:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f93:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f9a:	e8 fb 43 00 00       	call   c000839a <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fa6:	75 87                	jne    c0003f2f <dir_find+0x30>
c0003fa8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fac:	45                   	inc    ebp
c0003fad:	83 c2 02             	add    edx,0x2
c0003fb0:	eb ac                	jmp    c0003f5e <dir_find+0x5f>
c0003fb2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fb9:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fbe:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fc3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fc6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fc9:	89 f0                	mov    eax,esi
c0003fcb:	e8 4c e2 ff ff       	call   c000221c <move_window>
c0003fd0:	85 c0                	test   eax,eax
c0003fd2:	0f 85 c6 00 00 00    	jne    c000409e <dir_find+0x19f>
c0003fd8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fdb:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fde:	84 c9                	test   cl,cl
c0003fe0:	0f 84 bd 00 00 00    	je     c00040a3 <dir_find+0x1a4>
c0003fe6:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fe9:	88 d0                	mov    al,dl
c0003feb:	83 e0 3f             	and    eax,0x3f
c0003fee:	80 f9 e5             	cmp    cl,0xe5
c0003ff1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ff4:	0f 84 87 00 00 00    	je     c0004081 <dir_find+0x182>
c0003ffa:	80 e2 08             	and    dl,0x8
c0003ffd:	74 06                	je     c0004005 <dir_find+0x106>
c0003fff:	3c 0f                	cmp    al,0xf
c0004001:	75 7e                	jne    c0004081 <dir_find+0x182>
c0004003:	eb 04                	jmp    c0004009 <dir_find+0x10a>
c0004005:	3c 0f                	cmp    al,0xf
c0004007:	75 4c                	jne    c0004055 <dir_find+0x156>
c0004009:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000400d:	75 7e                	jne    c000408d <dir_find+0x18e>
c000400f:	f6 c1 40             	test   cl,0x40
c0004012:	74 12                	je     c0004026 <dir_find+0x127>
c0004014:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004017:	83 e1 bf             	and    ecx,0xffffffbf
c000401a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000401e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004021:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004024:	eb 06                	jmp    c000402c <dir_find+0x12d>
c0004026:	89 f8                	mov    eax,edi
c0004028:	38 c8                	cmp    al,cl
c000402a:	75 5c                	jne    c0004088 <dir_find+0x189>
c000402c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004030:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004035:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004038:	75 53                	jne    c000408d <dir_find+0x18e>
c000403a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000403e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004041:	89 ea                	mov    edx,ebp
c0004043:	e8 f4 fd ff ff       	call   c0003e3c <cmp_lfn>
c0004048:	85 c0                	test   eax,eax
c000404a:	74 41                	je     c000408d <dir_find+0x18e>
c000404c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004050:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004053:	eb 38                	jmp    c000408d <dir_find+0x18e>
c0004055:	89 f8                	mov    eax,edi
c0004057:	84 c0                	test   al,al
c0004059:	75 0d                	jne    c0004068 <dir_find+0x169>
c000405b:	89 e8                	mov    eax,ebp
c000405d:	e8 98 de ff ff       	call   c0001efa <sum_sfn>
c0004062:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004066:	74 52                	je     c00040ba <dir_find+0x1bb>
c0004068:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000406c:	75 13                	jne    c0004081 <dir_find+0x182>
c000406e:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004071:	b9 0b 00 00 00       	mov    ecx,0xb
c0004076:	89 e8                	mov    eax,ebp
c0004078:	e8 60 da ff ff       	call   c0001add <mem_cmp>
c000407d:	85 c0                	test   eax,eax
c000407f:	74 39                	je     c00040ba <dir_find+0x1bb>
c0004081:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004088:	bf ff ff ff ff       	mov    edi,0xffffffff
c000408d:	31 d2                	xor    edx,edx
c000408f:	89 d8                	mov    eax,ebx
c0004091:	e8 5c f4 ff ff       	call   c00034f2 <dir_next>
c0004096:	85 c0                	test   eax,eax
c0004098:	0f 84 25 ff ff ff    	je     c0003fc3 <dir_find+0xc4>
c000409e:	89 04 24             	mov    DWORD PTR [esp],eax
c00040a1:	eb 17                	jmp    c00040ba <dir_find+0x1bb>
c00040a3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040aa:	eb 0e                	jmp    c00040ba <dir_find+0x1bb>
c00040ac:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040af:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040b4:	0f 85 75 fe ff ff    	jne    c0003f2f <dir_find+0x30>
c00040ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040bd:	83 c4 1c             	add    esp,0x1c
c00040c0:	5b                   	pop    ebx
c00040c1:	5e                   	pop    esi
c00040c2:	5f                   	pop    edi
c00040c3:	5d                   	pop    ebp
c00040c4:	c3                   	ret    

c00040c5 <dir_register>:
c00040c5:	55                   	push   ebp
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	be 06 00 00 00       	mov    esi,0x6
c00040cd:	53                   	push   ebx
c00040ce:	83 ec 6c             	sub    esp,0x6c
c00040d1:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040d5:	0f 85 62 02 00 00    	jne    c000433d <dir_register+0x278>
c00040db:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040dd:	31 ff                	xor    edi,edi
c00040df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040e2:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040e7:	74 03                	je     c00040ec <dir_register+0x27>
c00040e9:	47                   	inc    edi
c00040ea:	eb f6                	jmp    c00040e2 <dir_register+0x1d>
c00040ec:	89 c3                	mov    ebx,eax
c00040ee:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040f2:	0f 85 e1 00 00 00    	jne    c00041d9 <dir_register+0x114>
c00040f8:	83 c7 0e             	add    edi,0xe
c00040fb:	b9 0f 00 00 00       	mov    ecx,0xf
c0004100:	89 f8                	mov    eax,edi
c0004102:	31 d2                	xor    edx,edx
c0004104:	f7 f1                	div    ecx
c0004106:	8d 50 02             	lea    edx,[eax+0x2]
c0004109:	89 c7                	mov    edi,eax
c000410b:	89 d8                	mov    eax,ebx
c000410d:	e8 12 f8 ff ff       	call   c0003924 <dir_alloc>
c0004112:	89 c6                	mov    esi,eax
c0004114:	85 c0                	test   eax,eax
c0004116:	0f 85 21 02 00 00    	jne    c000433d <dir_register+0x278>
c000411c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004122:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004125:	c1 e7 05             	shl    edi,0x5
c0004128:	29 f8                	sub    eax,edi
c000412a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000412d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004130:	a8 04                	test   al,0x4
c0004132:	0f 84 91 00 00 00    	je     c00041c9 <dir_register+0x104>
c0004138:	83 e0 fb             	and    eax,0xfffffffb
c000413b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000413e:	89 d8                	mov    eax,ebx
c0004140:	e8 25 ec ff ff       	call   c0002d6a <fill_first_frag>
c0004145:	85 c0                	test   eax,eax
c0004147:	0f 85 ee 01 00 00    	jne    c000433b <dir_register+0x276>
c000414d:	83 c9 ff             	or     ecx,0xffffffff
c0004150:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004153:	89 d8                	mov    eax,ebx
c0004155:	e8 db eb ff ff       	call   c0002d35 <fill_last_frag>
c000415a:	85 c0                	test   eax,eax
c000415c:	0f 85 d9 01 00 00    	jne    c000433b <dir_register+0x276>
c0004162:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004166:	74 61                	je     c00041c9 <dir_register+0x104>
c0004168:	89 da                	mov    edx,ebx
c000416a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000416e:	e8 ea f5 ff ff       	call   c000375d <load_obj_xdir>
c0004173:	85 c0                	test   eax,eax
c0004175:	0f 85 c0 01 00 00    	jne    c000433b <dir_register+0x276>
c000417b:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000417f:	31 c9                	xor    ecx,ecx
c0004181:	c1 e2 09             	shl    edx,0x9
c0004184:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004187:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000418a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000418d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004190:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004193:	83 c0 38             	add    eax,0x38
c0004196:	e8 1c d9 ff ff       	call   c0001ab7 <st_qword>
c000419b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000419e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041a1:	83 c0 28             	add    eax,0x28
c00041a4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041a7:	e8 0b d9 ff ff       	call   c0001ab7 <st_qword>
c00041ac:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041af:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041b2:	83 c8 01             	or     eax,0x1
c00041b5:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041b8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041bc:	e8 db f7 ff ff       	call   c000399c <store_xdir>
c00041c1:	85 c0                	test   eax,eax
c00041c3:	0f 85 72 01 00 00    	jne    c000433b <dir_register+0x276>
c00041c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041cf:	e8 c1 fb ff ff       	call   c0003d95 <create_xdir>
c00041d4:	e9 64 01 00 00       	jmp    c000433d <dir_register+0x278>
c00041d9:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041dc:	b9 0c 00 00 00       	mov    ecx,0xc
c00041e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041e5:	89 c2                	mov    edx,eax
c00041e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041eb:	e8 cd d8 ff ff       	call   c0001abd <mem_cpy>
c00041f0:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041f5:	74 58                	je     c000424f <dir_register+0x18a>
c00041f7:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041fb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004203:	83 ec 0c             	sub    esp,0xc
c0004206:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004209:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000420d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004211:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004215:	e8 24 dc ff ff       	call   c0001e3e <gen_numname>
c000421a:	89 d8                	mov    eax,ebx
c000421c:	e8 de fc ff ff       	call   c0003eff <dir_find>
c0004221:	83 c4 10             	add    esp,0x10
c0004224:	89 c6                	mov    esi,eax
c0004226:	85 c0                	test   eax,eax
c0004228:	75 15                	jne    c000423f <dir_register+0x17a>
c000422a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000422e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004233:	75 ce                	jne    c0004203 <dir_register+0x13e>
c0004235:	be 07 00 00 00       	mov    esi,0x7
c000423a:	e9 fe 00 00 00       	jmp    c000433d <dir_register+0x278>
c000423f:	83 f8 04             	cmp    eax,0x4
c0004242:	0f 85 f5 00 00 00    	jne    c000433d <dir_register+0x278>
c0004248:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000424c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000424f:	b9 01 00 00 00       	mov    ecx,0x1
c0004254:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004259:	74 0f                	je     c000426a <dir_register+0x1a5>
c000425b:	b9 0d 00 00 00       	mov    ecx,0xd
c0004260:	8d 47 0c             	lea    eax,[edi+0xc]
c0004263:	31 d2                	xor    edx,edx
c0004265:	f7 f1                	div    ecx
c0004267:	8d 48 01             	lea    ecx,[eax+0x1]
c000426a:	89 ca                	mov    edx,ecx
c000426c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 ad f6 ff ff       	call   c0003924 <dir_alloc>
c0004277:	89 c6                	mov    esi,eax
c0004279:	85 c0                	test   eax,eax
c000427b:	0f 85 bc 00 00 00    	jne    c000433d <dir_register+0x278>
c0004281:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004285:	49                   	dec    ecx
c0004286:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000428a:	74 6a                	je     c00042f6 <dir_register+0x231>
c000428c:	89 c8                	mov    eax,ecx
c000428e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004291:	c1 e0 05             	shl    eax,0x5
c0004294:	29 c2                	sub    edx,eax
c0004296:	89 d8                	mov    eax,ebx
c0004298:	e8 fd ec ff ff       	call   c0002f9a <dir_sdi>
c000429d:	89 c6                	mov    esi,eax
c000429f:	85 c0                	test   eax,eax
c00042a1:	0f 85 96 00 00 00    	jne    c000433d <dir_register+0x278>
c00042a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042ab:	e8 4a dc ff ff       	call   c0001efa <sum_sfn>
c00042b0:	0f b6 f8             	movzx  edi,al
c00042b3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042b6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042b9:	89 e8                	mov    eax,ebp
c00042bb:	e8 5c df ff ff       	call   c000221c <move_window>
c00042c0:	89 c6                	mov    esi,eax
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 77                	jne    c000433d <dir_register+0x278>
c00042c6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042cb:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042ce:	83 ec 0c             	sub    esp,0xc
c00042d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042d4:	57                   	push   edi
c00042d5:	e8 e0 da ff ff       	call   c0001dba <put_lfn>
c00042da:	31 d2                	xor    edx,edx
c00042dc:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042e0:	89 d8                	mov    eax,ebx
c00042e2:	e8 0b f2 ff ff       	call   c00034f2 <dir_next>
c00042e7:	83 c4 10             	add    esp,0x10
c00042ea:	89 c6                	mov    esi,eax
c00042ec:	85 c0                	test   eax,eax
c00042ee:	75 4d                	jne    c000433d <dir_register+0x278>
c00042f0:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042f4:	75 bd                	jne    c00042b3 <dir_register+0x1ee>
c00042f6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042f9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042fc:	89 e8                	mov    eax,ebp
c00042fe:	e8 19 df ff ff       	call   c000221c <move_window>
c0004303:	89 c6                	mov    esi,eax
c0004305:	85 c0                	test   eax,eax
c0004307:	75 34                	jne    c000433d <dir_register+0x278>
c0004309:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000430c:	b9 20 00 00 00       	mov    ecx,0x20
c0004311:	31 d2                	xor    edx,edx
c0004313:	e8 ba d7 ff ff       	call   c0001ad2 <mem_set>
c0004318:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000431b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000431f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004324:	e8 94 d7 ff ff       	call   c0001abd <mem_cpy>
c0004329:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000432c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000432f:	83 e0 18             	and    eax,0x18
c0004332:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004335:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004339:	eb 02                	jmp    c000433d <dir_register+0x278>
c000433b:	89 c6                	mov    esi,eax
c000433d:	83 c4 6c             	add    esp,0x6c
c0004340:	89 f0                	mov    eax,esi
c0004342:	5b                   	pop    ebx
c0004343:	5e                   	pop    esi
c0004344:	5f                   	pop    edi
c0004345:	5d                   	pop    ebp
c0004346:	c3                   	ret    

c0004347 <sync_fs>:
c0004347:	56                   	push   esi
c0004348:	53                   	push   ebx
c0004349:	53                   	push   ebx
c000434a:	89 c3                	mov    ebx,eax
c000434c:	e8 37 de ff ff       	call   c0002188 <sync_window>
c0004351:	85 c0                	test   eax,eax
c0004353:	0f 85 b1 00 00 00    	jne    c000440a <sync_fs+0xc3>
c0004359:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000435c:	0f 85 8e 00 00 00    	jne    c00043f0 <sync_fs+0xa9>
c0004362:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004366:	0f 85 84 00 00 00    	jne    c00043f0 <sync_fs+0xa9>
c000436c:	b9 00 02 00 00       	mov    ecx,0x200
c0004371:	8d 73 54             	lea    esi,[ebx+0x54]
c0004374:	31 d2                	xor    edx,edx
c0004376:	89 f0                	mov    eax,esi
c0004378:	e8 55 d7 ff ff       	call   c0001ad2 <mem_set>
c000437d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004383:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004388:	e8 23 d7 ff ff       	call   c0001ab0 <st_word>
c000438d:	ba 52 52 61 41       	mov    edx,0x41615252
c0004392:	89 f0                	mov    eax,esi
c0004394:	e8 1b d7 ff ff       	call   c0001ab4 <st_dword>
c0004399:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c000439f:	ba 72 72 41 61       	mov    edx,0x61417272
c00043a4:	e8 0b d7 ff ff       	call   c0001ab4 <st_dword>
c00043a9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043ac:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043b2:	e8 fd d6 ff ff       	call   c0001ab4 <st_dword>
c00043b7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ba:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043c0:	e8 ef d6 ff ff       	call   c0001ab4 <st_dword>
c00043c5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043c8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043cb:	83 c0 01             	add    eax,0x1
c00043ce:	83 d2 00             	adc    edx,0x0
c00043d1:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043d4:	83 ec 0c             	sub    esp,0xc
c00043d7:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043da:	6a 01                	push   0x1
c00043dc:	52                   	push   edx
c00043dd:	50                   	push   eax
c00043de:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043e2:	56                   	push   esi
c00043e3:	50                   	push   eax
c00043e4:	e8 20 d6 ff ff       	call   c0001a09 <disk_write>
c00043e9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043ed:	83 c4 20             	add    esp,0x20
c00043f0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043f4:	51                   	push   ecx
c00043f5:	6a 00                	push   0x0
c00043f7:	6a 00                	push   0x0
c00043f9:	50                   	push   eax
c00043fa:	e8 20 d6 ff ff       	call   c0001a1f <disk_ioctl>
c00043ff:	83 c4 10             	add    esp,0x10
c0004402:	85 c0                	test   eax,eax
c0004404:	0f 95 c0             	setne  al
c0004407:	0f b6 c0             	movzx  eax,al
c000440a:	5a                   	pop    edx
c000440b:	5b                   	pop    ebx
c000440c:	5e                   	pop    esi
c000440d:	c3                   	ret    

c000440e <create_partition>:
c000440e:	55                   	push   ebp
c000440f:	0f b6 c0             	movzx  eax,al
c0004412:	57                   	push   edi
c0004413:	56                   	push   esi
c0004414:	53                   	push   ebx
c0004415:	83 ec 60             	sub    esp,0x60
c0004418:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000441c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004420:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004424:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004428:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000442c:	50                   	push   eax
c000442d:	6a 01                	push   0x1
c000442f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004433:	e8 e7 d5 ff ff       	call   c0001a1f <disk_ioctl>
c0004438:	83 c4 10             	add    esp,0x10
c000443b:	85 c0                	test   eax,eax
c000443d:	74 0a                	je     c0004449 <create_partition+0x3b>
c000443f:	b8 01 00 00 00       	mov    eax,0x1
c0004444:	e9 67 05 00 00       	jmp    c00049b0 <create_partition+0x5a2>
c0004449:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000444d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004451:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004459:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000445e:	0f 86 ed 03 00 00    	jbe    c0004851 <create_partition+0x443>
c0004464:	83 c0 df             	add    eax,0xffffffdf
c0004467:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000446f:	83 d2 ff             	adc    edx,0xffffffff
c0004472:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000447a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000447e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004482:	83 c0 bd             	add    eax,0xffffffbd
c0004485:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000448c:	83 d2 ff             	adc    edx,0xffffffff
c000448f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004497:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000449f:	be 22 00 00 00       	mov    esi,0x22
c00044a4:	31 ff                	xor    edi,edi
c00044a6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044ae:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044b6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044be:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044c2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044c8:	75 0e                	jne    c00044d8 <create_partition+0xca>
c00044ca:	b9 00 02 00 00       	mov    ecx,0x200
c00044cf:	31 d2                	xor    edx,edx
c00044d1:	89 d8                	mov    eax,ebx
c00044d3:	e8 fa d5 ff ff       	call   c0001ad2 <mem_set>
c00044d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044dc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044e4:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044e7:	0f 84 23 01 00 00    	je     c0004610 <create_partition+0x202>
c00044ed:	89 f0                	mov    eax,esi
c00044ef:	89 fa                	mov    edx,edi
c00044f1:	05 ff 07 00 00       	add    eax,0x7ff
c00044f6:	83 d2 00             	adc    edx,0x0
c00044f9:	89 c1                	mov    ecx,eax
c00044fb:	89 d7                	mov    edi,edx
c00044fd:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004503:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004507:	89 ce                	mov    esi,ecx
c0004509:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000450d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004511:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004515:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004518:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000451c:	89 04 24             	mov    DWORD PTR [esp],eax
c000451f:	b8 64 00 00 00       	mov    eax,0x64
c0004524:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004527:	b8 00 00 00 00       	mov    eax,0x0
c000452c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004530:	72 41                	jb     c0004573 <create_partition+0x165>
c0004532:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000453a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000453e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004543:	01 c1                	add    ecx,eax
c0004545:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004549:	f7 24 24             	mul    DWORD PTR [esp]
c000454c:	6a 00                	push   0x0
c000454e:	01 ca                	add    edx,ecx
c0004550:	6a 64                	push   0x64
c0004552:	52                   	push   edx
c0004553:	50                   	push   eax
c0004554:	e8 f3 1b 02 00       	call   c002614c <__udivdi3>
c0004559:	83 c4 10             	add    esp,0x10
c000455c:	05 ff 07 00 00       	add    eax,0x7ff
c0004561:	83 d2 00             	adc    edx,0x0
c0004564:	89 c1                	mov    ecx,eax
c0004566:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000456a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004570:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004573:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004576:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000457a:	01 f0                	add    eax,esi
c000457c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004580:	11 fa                	adc    edx,edi
c0004582:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004586:	19 d1                	sbb    ecx,edx
c0004588:	73 2e                	jae    c00045b8 <create_partition+0x1aa>
c000458a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000458e:	89 f8                	mov    eax,edi
c0004590:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004597:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000459b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045a3:	73 6b                	jae    c0004610 <create_partition+0x202>
c00045a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045ad:	29 f0                	sub    eax,esi
c00045af:	19 fa                	sbb    edx,edi
c00045b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00045b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045bc:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045bf:	74 4f                	je     c0004610 <create_partition+0x202>
c00045c1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045c4:	b9 10 00 00 00       	mov    ecx,0x10
c00045c9:	ba f0 8b 02 c0       	mov    edx,0xc0028bf0
c00045ce:	e8 ea d4 ff ff       	call   c0001abd <mem_cpy>
c00045d3:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045d7:	b9 10 00 00 00       	mov    ecx,0x10
c00045dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045e0:	e8 2c db ff ff       	call   c0002111 <make_rand>
c00045e5:	89 f2                	mov    edx,esi
c00045e7:	89 f9                	mov    ecx,edi
c00045e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045ed:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045f1:	e8 c1 d4 ff ff       	call   c0001ab7 <st_qword>
c00045f6:	03 34 24             	add    esi,DWORD PTR [esp]
c00045f9:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045fd:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004601:	89 f2                	mov    edx,esi
c0004603:	89 f9                	mov    ecx,edi
c0004605:	83 c2 ff             	add    edx,0xffffffff
c0004608:	83 d1 ff             	adc    ecx,0xffffffff
c000460b:	e8 a7 d4 ff ff       	call   c0001ab7 <st_qword>
c0004610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004614:	83 e8 80             	sub    eax,0xffffff80
c0004617:	89 c5                	mov    ebp,eax
c0004619:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000461d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004623:	75 6b                	jne    c0004690 <create_partition+0x282>
c0004625:	45                   	inc    ebp
c0004626:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000462a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000462f:	e8 39 da ff ff       	call   c000206d <crc32>
c0004634:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000463a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000463e:	75 e5                	jne    c0004625 <create_partition+0x217>
c0004640:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004644:	31 d2                	xor    edx,edx
c0004646:	83 ec 0c             	sub    esp,0xc
c0004649:	c1 ed 09             	shr    ebp,0x9
c000464c:	6a 01                	push   0x1
c000464e:	8d 45 02             	lea    eax,[ebp+0x2]
c0004651:	52                   	push   edx
c0004652:	50                   	push   eax
c0004653:	53                   	push   ebx
c0004654:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004658:	e8 ac d3 ff ff       	call   c0001a09 <disk_write>
c000465d:	83 c4 20             	add    esp,0x20
c0004660:	85 c0                	test   eax,eax
c0004662:	0f 85 d7 fd ff ff    	jne    c000443f <create_partition+0x31>
c0004668:	83 ec 0c             	sub    esp,0xc
c000466b:	31 d2                	xor    edx,edx
c000466d:	6a 01                	push   0x1
c000466f:	89 e8                	mov    eax,ebp
c0004671:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004675:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004679:	52                   	push   edx
c000467a:	50                   	push   eax
c000467b:	53                   	push   ebx
c000467c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004680:	e8 84 d3 ff ff       	call   c0001a09 <disk_write>
c0004685:	83 c4 20             	add    esp,0x20
c0004688:	85 c0                	test   eax,eax
c000468a:	0f 85 af fd ff ff    	jne    c000443f <create_partition+0x31>
c0004690:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004694:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004698:	3d 00 40 00 00       	cmp    eax,0x4000
c000469d:	74 0d                	je     c00046ac <create_partition+0x29e>
c000469f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046a3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046a7:	e9 12 fe ff ff       	jmp    c00044be <create_partition+0xb0>
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	b9 00 02 00 00       	mov    ecx,0x200
c00046b3:	89 d8                	mov    eax,ebx
c00046b5:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046b8:	e8 15 d4 ff ff       	call   c0001ad2 <mem_set>
c00046bd:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046c0:	b9 10 00 00 00       	mov    ecx,0x10
c00046c5:	ba e0 8a 02 c0       	mov    edx,0xc0028ae0
c00046ca:	89 d8                	mov    eax,ebx
c00046cc:	e8 ec d3 ff ff       	call   c0001abd <mem_cpy>
c00046d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046d5:	8d 43 58             	lea    eax,[ebx+0x58]
c00046d8:	f7 d2                	not    edx
c00046da:	e8 d5 d3 ff ff       	call   c0001ab4 <st_dword>
c00046df:	8d 43 18             	lea    eax,[ebx+0x18]
c00046e2:	31 c9                	xor    ecx,ecx
c00046e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00046e7:	ba 01 00 00 00       	mov    edx,0x1
c00046ec:	e8 c6 d3 ff ff       	call   c0001ab7 <st_qword>
c00046f1:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046f9:	83 c2 ff             	add    edx,0xffffffff
c00046fc:	89 e8                	mov    eax,ebp
c00046fe:	83 d1 ff             	adc    ecx,0xffffffff
c0004701:	e8 b1 d3 ff ff       	call   c0001ab7 <st_qword>
c0004706:	31 c9                	xor    ecx,ecx
c0004708:	8d 43 28             	lea    eax,[ebx+0x28]
c000470b:	ba 22 00 00 00       	mov    edx,0x22
c0004710:	e8 a2 d3 ff ff       	call   c0001ab7 <st_qword>
c0004715:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004719:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000471d:	83 c2 de             	add    edx,0xffffffde
c0004720:	8d 43 30             	lea    eax,[ebx+0x30]
c0004723:	83 d1 ff             	adc    ecx,0xffffffff
c0004726:	31 f6                	xor    esi,esi
c0004728:	e8 8a d3 ff ff       	call   c0001ab7 <st_qword>
c000472d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004730:	ba 80 00 00 00       	mov    edx,0x80
c0004735:	e8 7a d3 ff ff       	call   c0001ab4 <st_dword>
c000473a:	8d 43 50             	lea    eax,[ebx+0x50]
c000473d:	ba 80 00 00 00       	mov    edx,0x80
c0004742:	e8 6d d3 ff ff       	call   c0001ab4 <st_dword>
c0004747:	ba 02 00 00 00       	mov    edx,0x2
c000474c:	89 f8                	mov    eax,edi
c000474e:	e8 61 d3 ff ff       	call   c0001ab4 <st_dword>
c0004753:	8d 53 38             	lea    edx,[ebx+0x38]
c0004756:	b9 10 00 00 00       	mov    ecx,0x10
c000475b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000475f:	e8 ad d9 ff ff       	call   c0002111 <make_rand>
c0004764:	83 c8 ff             	or     eax,0xffffffff
c0004767:	46                   	inc    esi
c0004768:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000476d:	e8 fb d8 ff ff       	call   c000206d <crc32>
c0004772:	83 fe 5c             	cmp    esi,0x5c
c0004775:	75 f0                	jne    c0004767 <create_partition+0x359>
c0004777:	f7 d0                	not    eax
c0004779:	8d 73 10             	lea    esi,[ebx+0x10]
c000477c:	89 c2                	mov    edx,eax
c000477e:	89 f0                	mov    eax,esi
c0004780:	e8 2f d3 ff ff       	call   c0001ab4 <st_dword>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	6a 01                	push   0x1
c000478a:	6a 00                	push   0x0
c000478c:	6a 01                	push   0x1
c000478e:	53                   	push   ebx
c000478f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004793:	e8 71 d2 ff ff       	call   c0001a09 <disk_write>
c0004798:	83 c4 20             	add    esp,0x20
c000479b:	85 c0                	test   eax,eax
c000479d:	0f 85 9c fc ff ff    	jne    c000443f <create_partition+0x31>
c00047a3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047a7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047ab:	83 c2 ff             	add    edx,0xffffffff
c00047ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047b1:	83 d1 ff             	adc    ecx,0xffffffff
c00047b4:	e8 fe d2 ff ff       	call   c0001ab7 <st_qword>
c00047b9:	ba 01 00 00 00       	mov    edx,0x1
c00047be:	31 c9                	xor    ecx,ecx
c00047c0:	89 e8                	mov    eax,ebp
c00047c2:	e8 f0 d2 ff ff       	call   c0001ab7 <st_qword>
c00047c7:	89 f8                	mov    eax,edi
c00047c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047d1:	31 ff                	xor    edi,edi
c00047d3:	e8 df d2 ff ff       	call   c0001ab7 <st_qword>
c00047d8:	89 f0                	mov    eax,esi
c00047da:	31 d2                	xor    edx,edx
c00047dc:	e8 d3 d2 ff ff       	call   c0001ab4 <st_dword>
c00047e1:	83 c8 ff             	or     eax,0xffffffff
c00047e4:	47                   	inc    edi
c00047e5:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047ea:	e8 7e d8 ff ff       	call   c000206d <crc32>
c00047ef:	83 ff 5c             	cmp    edi,0x5c
c00047f2:	75 f0                	jne    c00047e4 <create_partition+0x3d6>
c00047f4:	f7 d0                	not    eax
c00047f6:	89 c2                	mov    edx,eax
c00047f8:	89 f0                	mov    eax,esi
c00047fa:	e8 b5 d2 ff ff       	call   c0001ab4 <st_dword>
c00047ff:	83 ec 0c             	sub    esp,0xc
c0004802:	6a 01                	push   0x1
c0004804:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004808:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000480c:	83 c0 ff             	add    eax,0xffffffff
c000480f:	83 d2 ff             	adc    edx,0xffffffff
c0004812:	52                   	push   edx
c0004813:	50                   	push   eax
c0004814:	53                   	push   ebx
c0004815:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004819:	e8 eb d1 ff ff       	call   c0001a09 <disk_write>
c000481e:	83 c4 20             	add    esp,0x20
c0004821:	85 c0                	test   eax,eax
c0004823:	0f 85 16 fc ff ff    	jne    c000443f <create_partition+0x31>
c0004829:	31 d2                	xor    edx,edx
c000482b:	89 d8                	mov    eax,ebx
c000482d:	b9 00 02 00 00       	mov    ecx,0x200
c0004832:	e8 9b d2 ff ff       	call   c0001ad2 <mem_set>
c0004837:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000483d:	b9 10 00 00 00       	mov    ecx,0x10
c0004842:	ba f0 8a 02 c0       	mov    edx,0xc0028af0
c0004847:	e8 71 d2 ff ff       	call   c0001abd <mem_cpy>
c000484c:	e9 21 01 00 00       	jmp    c0004972 <create_partition+0x564>
c0004851:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004855:	b9 05 00 00 00       	mov    ecx,0x5
c000485a:	89 04 24             	mov    DWORD PTR [esp],eax
c000485d:	bf 08 00 00 00       	mov    edi,0x8
c0004862:	89 f8                	mov    eax,edi
c0004864:	31 d2                	xor    edx,edx
c0004866:	0f b6 f0             	movzx  esi,al
c0004869:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486c:	f7 f6                	div    esi
c000486e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004873:	76 0a                	jbe    c000487f <create_partition+0x471>
c0004875:	d1 e7                	shl    edi,1
c0004877:	49                   	dec    ecx
c0004878:	75 e8                	jne    c0004862 <create_partition+0x454>
c000487a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000487f:	b9 00 02 00 00       	mov    ecx,0x200
c0004884:	31 d2                	xor    edx,edx
c0004886:	89 d8                	mov    eax,ebx
c0004888:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c000488e:	e8 3f d2 ff ff       	call   c0001ad2 <mem_set>
c0004893:	b9 64 00 00 00       	mov    ecx,0x64
c0004898:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000489b:	31 d2                	xor    edx,edx
c000489d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048a5:	f7 f1                	div    ecx
c00048a7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048ac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048b0:	89 f8                	mov    eax,edi
c00048b2:	0f b6 c0             	movzx  eax,al
c00048b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048b9:	e9 80 00 00 00       	jmp    c000493e <create_partition+0x530>
c00048be:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048c1:	29 cf                	sub    edi,ecx
c00048c3:	89 ca                	mov    edx,ecx
c00048c5:	89 f0                	mov    eax,esi
c00048c7:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048cc:	e8 e3 d1 ff ff       	call   c0001ab4 <st_dword>
c00048d1:	8d 46 04             	lea    eax,[esi+0x4]
c00048d4:	89 fa                	mov    edx,edi
c00048d6:	83 c6 10             	add    esi,0x10
c00048d9:	e8 d6 d1 ff ff       	call   c0001ab4 <st_dword>
c00048de:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048e2:	31 d2                	xor    edx,edx
c00048e4:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048e7:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048eb:	89 c8                	mov    eax,ecx
c00048ed:	01 f9                	add    ecx,edi
c00048ef:	f7 f5                	div    ebp
c00048f1:	89 d5                	mov    ebp,edx
c00048f3:	31 d2                	xor    edx,edx
c00048f5:	45                   	inc    ebp
c00048f6:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048fa:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048fd:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004900:	89 c2                	mov    edx,eax
c0004902:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004905:	c1 ea 02             	shr    edx,0x2
c0004908:	83 e2 c0             	and    edx,0xffffffc0
c000490b:	09 ea                	or     edx,ebp
c000490d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004912:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004915:	31 d2                	xor    edx,edx
c0004917:	f7 f5                	div    ebp
c0004919:	89 d7                	mov    edi,edx
c000491b:	31 d2                	xor    edx,edx
c000491d:	47                   	inc    edi
c000491e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004922:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004925:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004928:	89 c5                	mov    ebp,eax
c000492a:	c1 ed 02             	shr    ebp,0x2
c000492d:	83 e5 c0             	and    ebp,0xffffffc0
c0004930:	09 ef                	or     edi,ebp
c0004932:	89 fa                	mov    edx,edi
c0004934:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004937:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000493c:	74 34                	je     c0004972 <create_partition+0x564>
c000493e:	85 c9                	test   ecx,ecx
c0004940:	74 30                	je     c0004972 <create_partition+0x564>
c0004942:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004945:	76 2b                	jbe    c0004972 <create_partition+0x564>
c0004947:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000494b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000494f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004952:	83 ff 64             	cmp    edi,0x64
c0004955:	76 4b                	jbe    c00049a2 <create_partition+0x594>
c0004957:	89 f8                	mov    eax,edi
c0004959:	01 c8                	add    eax,ecx
c000495b:	0f 82 5d ff ff ff    	jb     c00048be <create_partition+0x4b0>
c0004961:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004964:	0f 87 54 ff ff ff    	ja     c00048be <create_partition+0x4b0>
c000496a:	85 ff                	test   edi,edi
c000496c:	0f 85 51 ff ff ff    	jne    c00048c3 <create_partition+0x4b5>
c0004972:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004978:	ba 55 aa 00 00       	mov    edx,0xaa55
c000497d:	e8 2e d1 ff ff       	call   c0001ab0 <st_word>
c0004982:	83 ec 0c             	sub    esp,0xc
c0004985:	6a 01                	push   0x1
c0004987:	6a 00                	push   0x0
c0004989:	6a 00                	push   0x0
c000498b:	53                   	push   ebx
c000498c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004990:	e8 74 d0 ff ff       	call   c0001a09 <disk_write>
c0004995:	83 c4 20             	add    esp,0x20
c0004998:	85 c0                	test   eax,eax
c000499a:	0f 95 c0             	setne  al
c000499d:	0f b6 c0             	movzx  eax,al
c00049a0:	eb 0e                	jmp    c00049b0 <create_partition+0x5a2>
c00049a2:	74 07                	je     c00049ab <create_partition+0x59d>
c00049a4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049a9:	eb ac                	jmp    c0004957 <create_partition+0x549>
c00049ab:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ae:	eb a7                	jmp    c0004957 <create_partition+0x549>
c00049b0:	83 c4 5c             	add    esp,0x5c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	c3                   	ret    

c00049b8 <get_fileinfo>:
c00049b8:	55                   	push   ebp
c00049b9:	57                   	push   edi
c00049ba:	56                   	push   esi
c00049bb:	53                   	push   ebx
c00049bc:	83 ec 1c             	sub    esp,0x1c
c00049bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00049c1:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049c5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049c9:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049cc:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049cf:	0f 84 dc 01 00 00    	je     c0004bb1 <get_fileinfo+0x1f9>
c00049d5:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049d8:	75 0f                	jne    c00049e9 <get_fileinfo+0x31>
c00049da:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049dd:	83 c4 1c             	add    esp,0x1c
c00049e0:	5b                   	pop    ebx
c00049e1:	5e                   	pop    esi
c00049e2:	5f                   	pop    edi
c00049e3:	5d                   	pop    ebp
c00049e4:	e9 58 d5 ff ff       	jmp    c0001f41 <get_xfileinfo>
c00049e9:	89 d3                	mov    ebx,edx
c00049eb:	89 c6                	mov    esi,eax
c00049ed:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049f1:	74 6a                	je     c0004a5d <get_fileinfo+0xa5>
c00049f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049fb:	31 ed                	xor    ebp,ebp
c00049fd:	31 ff                	xor    edi,edi
c00049ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a03:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a0a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a0e:	66 85 d2             	test   dx,dx
c0004a11:	74 3e                	je     c0004a51 <get_fileinfo+0x99>
c0004a13:	66 85 ed             	test   bp,bp
c0004a16:	75 0c                	jne    c0004a24 <get_fileinfo+0x6c>
c0004a18:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a1e:	66 3d ff 07          	cmp    ax,0x7ff
c0004a22:	76 22                	jbe    c0004a46 <get_fileinfo+0x8e>
c0004a24:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a29:	89 e8                	mov    eax,ebp
c0004a2b:	29 f9                	sub    ecx,edi
c0004a2d:	c1 e0 10             	shl    eax,0x10
c0004a30:	09 d0                	or     eax,edx
c0004a32:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a36:	e8 a3 d1 ff ff       	call   c0001bde <put_utf>
c0004a3b:	84 c0                	test   al,al
c0004a3d:	74 10                	je     c0004a4f <get_fileinfo+0x97>
c0004a3f:	0f b6 c0             	movzx  eax,al
c0004a42:	31 d2                	xor    edx,edx
c0004a44:	01 c7                	add    edi,eax
c0004a46:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a4b:	89 d5                	mov    ebp,edx
c0004a4d:	eb b0                	jmp    c00049ff <get_fileinfo+0x47>
c0004a4f:	31 ff                	xor    edi,edi
c0004a51:	66 85 ed             	test   bp,bp
c0004a54:	74 02                	je     c0004a58 <get_fileinfo+0xa0>
c0004a56:	31 ff                	xor    edi,edi
c0004a58:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a5d:	31 ff                	xor    edi,edi
c0004a5f:	31 c9                	xor    ecx,ecx
c0004a61:	83 f9 0a             	cmp    ecx,0xa
c0004a64:	0f 87 ad 00 00 00    	ja     c0004b17 <get_fileinfo+0x15f>
c0004a6a:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a6d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a70:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a74:	66 83 fa 20          	cmp    dx,0x20
c0004a78:	0f 84 92 00 00 00    	je     c0004b10 <get_fileinfo+0x158>
c0004a7e:	66 83 fa 05          	cmp    dx,0x5
c0004a82:	75 05                	jne    c0004a89 <get_fileinfo+0xd1>
c0004a84:	ba e5 00 00 00       	mov    edx,0xe5
c0004a89:	83 ff 0b             	cmp    edi,0xb
c0004a8c:	77 0b                	ja     c0004a99 <get_fileinfo+0xe1>
c0004a8e:	83 fd 09             	cmp    ebp,0x9
c0004a91:	75 06                	jne    c0004a99 <get_fileinfo+0xe1>
c0004a93:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a98:	47                   	inc    edi
c0004a99:	0f b7 c2             	movzx  eax,dx
c0004a9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aa0:	e8 6d d0 ff ff       	call   c0001b12 <dbc_1st>
c0004aa5:	85 c0                	test   eax,eax
c0004aa7:	74 2f                	je     c0004ad8 <get_fileinfo+0x120>
c0004aa9:	83 fd 08             	cmp    ebp,0x8
c0004aac:	74 2a                	je     c0004ad8 <get_fileinfo+0x120>
c0004aae:	83 fd 0b             	cmp    ebp,0xb
c0004ab1:	74 25                	je     c0004ad8 <get_fileinfo+0x120>
c0004ab3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ab6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004aba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004abe:	e8 52 d0 ff ff       	call   c0001b15 <dbc_2nd>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	74 11                	je     c0004ad8 <get_fileinfo+0x120>
c0004ac7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004acb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ad0:	c1 e2 08             	shl    edx,0x8
c0004ad3:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ad6:	09 c2                	or     edx,eax
c0004ad8:	0f b7 d2             	movzx  edx,dx
c0004adb:	50                   	push   eax
c0004adc:	50                   	push   eax
c0004add:	68 b5 01 00 00       	push   0x1b5
c0004ae2:	52                   	push   edx
c0004ae3:	e8 46 38 00 00       	call   c000832e <ff_oem2uni>
c0004ae8:	83 c4 10             	add    esp,0x10
c0004aeb:	66 85 c0             	test   ax,ax
c0004aee:	75 04                	jne    c0004af4 <get_fileinfo+0x13c>
c0004af0:	31 ff                	xor    edi,edi
c0004af2:	eb 23                	jmp    c0004b17 <get_fileinfo+0x15f>
c0004af4:	b9 0c 00 00 00       	mov    ecx,0xc
c0004af9:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004afd:	29 f9                	sub    ecx,edi
c0004aff:	0f b7 c0             	movzx  eax,ax
c0004b02:	e8 d7 d0 ff ff       	call   c0001bde <put_utf>
c0004b07:	84 c0                	test   al,al
c0004b09:	74 e5                	je     c0004af0 <get_fileinfo+0x138>
c0004b0b:	0f b6 c0             	movzx  eax,al
c0004b0e:	01 c7                	add    edi,eax
c0004b10:	89 e9                	mov    ecx,ebp
c0004b12:	e9 4a ff ff ff       	jmp    c0004a61 <get_fileinfo+0xa9>
c0004b17:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b1c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b20:	75 54                	jne    c0004b76 <get_fileinfo+0x1be>
c0004b22:	85 ff                	test   edi,edi
c0004b24:	75 0b                	jne    c0004b31 <get_fileinfo+0x179>
c0004b26:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b2a:	ba 01 00 00 00       	mov    edx,0x1
c0004b2f:	eb 33                	jmp    c0004b64 <get_fileinfo+0x1ac>
c0004b31:	b1 08                	mov    cl,0x8
c0004b33:	31 d2                	xor    edx,edx
c0004b35:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b3b:	84 c0                	test   al,al
c0004b3d:	74 25                	je     c0004b64 <get_fileinfo+0x1ac>
c0004b3f:	66 83 f8 2e          	cmp    ax,0x2e
c0004b43:	74 16                	je     c0004b5b <get_fileinfo+0x1a3>
c0004b45:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b48:	66 83 ff 19          	cmp    di,0x19
c0004b4c:	77 0f                	ja     c0004b5d <get_fileinfo+0x1a5>
c0004b4e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b51:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b54:	74 07                	je     c0004b5d <get_fileinfo+0x1a5>
c0004b56:	83 c0 20             	add    eax,0x20
c0004b59:	eb 02                	jmp    c0004b5d <get_fileinfo+0x1a5>
c0004b5b:	b1 10                	mov    cl,0x10
c0004b5d:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b61:	42                   	inc    edx
c0004b62:	eb d1                	jmp    c0004b35 <get_fileinfo+0x17d>
c0004b64:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b69:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6c:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b70:	75 04                	jne    c0004b76 <get_fileinfo+0x1be>
c0004b72:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b79:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b7c:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b7f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b82:	83 c0 1c             	add    eax,0x1c
c0004b85:	e8 c1 ce ff ff       	call   c0001a4b <ld_dword>
c0004b8a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b91:	89 03                	mov    DWORD PTR [ebx],eax
c0004b93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b96:	83 c0 16             	add    eax,0x16
c0004b99:	e8 a0 ce ff ff       	call   c0001a3e <ld_word>
c0004b9e:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ba2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba5:	83 c0 18             	add    eax,0x18
c0004ba8:	e8 91 ce ff ff       	call   c0001a3e <ld_word>
c0004bad:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bb1:	83 c4 1c             	add    esp,0x1c
c0004bb4:	5b                   	pop    ebx
c0004bb5:	5e                   	pop    esi
c0004bb6:	5f                   	pop    edi
c0004bb7:	5d                   	pop    ebp
c0004bb8:	c3                   	ret    

c0004bb9 <ld_clust.isra.0>:
c0004bb9:	56                   	push   esi
c0004bba:	89 c6                	mov    esi,eax
c0004bbc:	53                   	push   ebx
c0004bbd:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bc0:	89 d3                	mov    ebx,edx
c0004bc2:	e8 77 ce ff ff       	call   c0001a3e <ld_word>
c0004bc7:	0f b7 c8             	movzx  ecx,ax
c0004bca:	89 f0                	mov    eax,esi
c0004bcc:	3c 03                	cmp    al,0x3
c0004bce:	75 0d                	jne    c0004bdd <ld_clust.isra.0+0x24>
c0004bd0:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd3:	e8 66 ce ff ff       	call   c0001a3e <ld_word>
c0004bd8:	c1 e0 10             	shl    eax,0x10
c0004bdb:	09 c1                	or     ecx,eax
c0004bdd:	89 c8                	mov    eax,ecx
c0004bdf:	5b                   	pop    ebx
c0004be0:	5e                   	pop    esi
c0004be1:	c3                   	ret    

c0004be2 <st_clust.isra.1>:
c0004be2:	56                   	push   esi
c0004be3:	89 c6                	mov    esi,eax
c0004be5:	53                   	push   ebx
c0004be6:	89 d3                	mov    ebx,edx
c0004be8:	0f b7 d1             	movzx  edx,cx
c0004beb:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bee:	e8 bd ce ff ff       	call   c0001ab0 <st_word>
c0004bf3:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bf6:	75 0f                	jne    c0004c07 <st_clust.isra.1+0x25>
c0004bf8:	c1 e9 10             	shr    ecx,0x10
c0004bfb:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bfe:	89 ca                	mov    edx,ecx
c0004c00:	5b                   	pop    ebx
c0004c01:	5e                   	pop    esi
c0004c02:	e9 a9 ce ff ff       	jmp    c0001ab0 <st_word>
c0004c07:	5b                   	pop    ebx
c0004c08:	5e                   	pop    esi
c0004c09:	c3                   	ret    

c0004c0a <init_alloc_info.isra.2>:
c0004c0a:	56                   	push   esi
c0004c0b:	53                   	push   ebx
c0004c0c:	89 c6                	mov    esi,eax
c0004c0e:	89 d3                	mov    ebx,edx
c0004c10:	51                   	push   ecx
c0004c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c13:	83 c0 34             	add    eax,0x34
c0004c16:	e8 30 ce ff ff       	call   c0001a4b <ld_dword>
c0004c1b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c1e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c20:	83 c0 38             	add    eax,0x38
c0004c23:	e8 3b ce ff ff       	call   c0001a63 <ld_qword>
c0004c28:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c2b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c2e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c30:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c33:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3a:	83 e0 02             	and    eax,0x2
c0004c3d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c40:	5b                   	pop    ebx
c0004c41:	5b                   	pop    ebx
c0004c42:	5e                   	pop    esi
c0004c43:	c3                   	ret    

c0004c44 <follow_path>:
c0004c44:	56                   	push   esi
c0004c45:	53                   	push   ebx
c0004c46:	89 c3                	mov    ebx,eax
c0004c48:	83 ec 14             	sub    esp,0x14
c0004c4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c4f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c55:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c57:	80 fa 5c             	cmp    dl,0x5c
c0004c5a:	75 07                	jne    c0004c63 <follow_path+0x1f>
c0004c5c:	40                   	inc    eax
c0004c5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c61:	eb ee                	jmp    c0004c51 <follow_path+0xd>
c0004c63:	80 fa 2f             	cmp    dl,0x2f
c0004c66:	74 f4                	je     c0004c5c <follow_path+0x18>
c0004c68:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c6f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c76:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c79:	77 52                	ja     c0004ccd <follow_path+0x89>
c0004c7b:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c7f:	31 d2                	xor    edx,edx
c0004c81:	89 d8                	mov    eax,ebx
c0004c83:	e8 12 e3 ff ff       	call   c0002f9a <dir_sdi>
c0004c88:	eb 7c                	jmp    c0004d06 <follow_path+0xc2>
c0004c8a:	89 d8                	mov    eax,ebx
c0004c8c:	e8 6e f2 ff ff       	call   c0003eff <dir_find>
c0004c91:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c94:	85 c0                	test   eax,eax
c0004c96:	75 46                	jne    c0004cde <follow_path+0x9a>
c0004c98:	80 e2 04             	and    dl,0x4
c0004c9b:	75 69                	jne    c0004d06 <follow_path+0xc2>
c0004c9d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ca1:	74 5e                	je     c0004d01 <follow_path+0xbd>
c0004ca3:	8a 06                	mov    al,BYTE PTR [esi]
c0004ca5:	3c 04                	cmp    al,0x4
c0004ca7:	75 41                	jne    c0004cea <follow_path+0xa6>
c0004ca9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cac:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cb0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cb3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cb6:	30 c0                	xor    al,al
c0004cb8:	09 d0                	or     eax,edx
c0004cba:	89 da                	mov    edx,ebx
c0004cbc:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cbf:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cc2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cc5:	8d 46 10             	lea    eax,[esi+0x10]
c0004cc8:	e8 3d ff ff ff       	call   c0004c0a <init_alloc_info.isra.2>
c0004ccd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cd1:	89 d8                	mov    eax,ebx
c0004cd3:	e8 a9 ed ff ff       	call   c0003a81 <create_name>
c0004cd8:	85 c0                	test   eax,eax
c0004cda:	74 ae                	je     c0004c8a <follow_path+0x46>
c0004cdc:	eb 28                	jmp    c0004d06 <follow_path+0xc2>
c0004cde:	83 f8 04             	cmp    eax,0x4
c0004ce1:	75 23                	jne    c0004d06 <follow_path+0xc2>
c0004ce3:	80 e2 04             	and    dl,0x4
c0004ce6:	74 19                	je     c0004d01 <follow_path+0xbd>
c0004ce8:	eb 1c                	jmp    c0004d06 <follow_path+0xc2>
c0004cea:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ced:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cf3:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cf7:	e8 bd fe ff ff       	call   c0004bb9 <ld_clust.isra.0>
c0004cfc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cff:	eb cc                	jmp    c0004ccd <follow_path+0x89>
c0004d01:	b8 05 00 00 00       	mov    eax,0x5
c0004d06:	83 c4 14             	add    esp,0x14
c0004d09:	5b                   	pop    ebx
c0004d0a:	5e                   	pop    esi
c0004d0b:	c3                   	ret    

c0004d0c <f_mount>:
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 18             	sub    esp,0x18
c0004d10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d14:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d20:	e8 fb d2 ff ff       	call   c0002020 <get_ldnumber>
c0004d25:	89 c2                	mov    edx,eax
c0004d27:	b8 0b 00 00 00       	mov    eax,0xb
c0004d2c:	85 d2                	test   edx,edx
c0004d2e:	78 39                	js     c0004d69 <f_mount+0x5d>
c0004d30:	8b 04 95 60 da 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd25a0]
c0004d37:	85 c0                	test   eax,eax
c0004d39:	74 03                	je     c0004d3e <f_mount+0x32>
c0004d3b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d42:	85 c0                	test   eax,eax
c0004d44:	74 03                	je     c0004d49 <f_mount+0x3d>
c0004d46:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4d:	89 04 95 60 da 02 c0 	mov    DWORD PTR [edx*4-0x3ffd25a0],eax
c0004d54:	31 c0                	xor    eax,eax
c0004d56:	84 db                	test   bl,bl
c0004d58:	74 0f                	je     c0004d69 <f_mount+0x5d>
c0004d5a:	31 c9                	xor    ecx,ecx
c0004d5c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d60:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d64:	e8 65 d7 ff ff       	call   c00024ce <mount_volume>
c0004d69:	83 c4 18             	add    esp,0x18
c0004d6c:	5b                   	pop    ebx
c0004d6d:	c3                   	ret    

c0004d6e <f_open>:
c0004d6e:	55                   	push   ebp
c0004d6f:	bd 09 00 00 00       	mov    ebp,0x9
c0004d74:	57                   	push   edi
c0004d75:	56                   	push   esi
c0004d76:	53                   	push   ebx
c0004d77:	83 ec 7c             	sub    esp,0x7c
c0004d7a:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d81:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d88:	85 db                	test   ebx,ebx
c0004d8a:	0f 84 10 04 00 00    	je     c00051a0 <f_open+0x432>
c0004d90:	89 fe                	mov    esi,edi
c0004d92:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d96:	83 e6 3f             	and    esi,0x3f
c0004d99:	89 f0                	mov    eax,esi
c0004d9b:	0f b6 c8             	movzx  ecx,al
c0004d9e:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004da5:	e8 24 d7 ff ff       	call   c00024ce <mount_volume>
c0004daa:	89 c5                	mov    ebp,eax
c0004dac:	85 c0                	test   eax,eax
c0004dae:	0f 85 e6 03 00 00    	jne    c000519a <f_open+0x42c>
c0004db4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db8:	bd 11 00 00 00       	mov    ebp,0x11
c0004dbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc1:	83 ec 0c             	sub    esp,0xc
c0004dc4:	68 60 04 00 00       	push   0x460
c0004dc9:	e8 a3 34 00 00       	call   c0008271 <ff_memalloc>
c0004dce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dd2:	83 c4 10             	add    esp,0x10
c0004dd5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dda:	0f 84 c0 03 00 00    	je     c00051a0 <f_open+0x432>
c0004de0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004de8:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dee:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004df1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004df4:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dfb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dff:	e8 40 fe ff ff       	call   c0004c44 <follow_path>
c0004e04:	89 c5                	mov    ebp,eax
c0004e06:	85 c0                	test   eax,eax
c0004e08:	75 0c                	jne    c0004e16 <f_open+0xa8>
c0004e0a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e0f:	79 05                	jns    c0004e16 <f_open+0xa8>
c0004e11:	bd 06 00 00 00       	mov    ebp,0x6
c0004e16:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e1c:	0f 84 84 01 00 00    	je     c0004fa6 <f_open+0x238>
c0004e22:	85 ed                	test   ebp,ebp
c0004e24:	74 20                	je     c0004e46 <f_open+0xd8>
c0004e26:	83 fd 04             	cmp    ebp,0x4
c0004e29:	0f 85 58 03 00 00    	jne    c0005187 <f_open+0x419>
c0004e2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e33:	83 ce 08             	or     esi,0x8
c0004e36:	e8 8a f2 ff ff       	call   c00040c5 <dir_register>
c0004e3b:	89 c5                	mov    ebp,eax
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	74 2f                	je     c0004e70 <f_open+0x102>
c0004e41:	e9 41 03 00 00       	jmp    c0005187 <f_open+0x419>
c0004e46:	bd 07 00 00 00       	mov    ebp,0x7
c0004e4b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e50:	0f 85 31 03 00 00    	jne    c0005187 <f_open+0x419>
c0004e56:	bd 08 00 00 00       	mov    ebp,0x8
c0004e5b:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e61:	0f 85 20 03 00 00    	jne    c0005187 <f_open+0x419>
c0004e67:	83 e7 08             	and    edi,0x8
c0004e6a:	0f 84 65 01 00 00    	je     c0004fd5 <f_open+0x267>
c0004e70:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e74:	8a 02                	mov    al,BYTE PTR [edx]
c0004e76:	3c 04                	cmp    al,0x4
c0004e78:	0f 85 97 00 00 00    	jne    c0004f15 <f_open+0x1a7>
c0004e7e:	8d 42 10             	lea    eax,[edx+0x10]
c0004e81:	89 13                	mov    DWORD PTR [ebx],edx
c0004e83:	89 da                	mov    edx,ebx
c0004e85:	e8 80 fd ff ff       	call   c0004c0a <init_alloc_info.isra.2>
c0004e8a:	31 d2                	xor    edx,edx
c0004e8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e90:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e95:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e98:	83 c0 02             	add    eax,0x2
c0004e9b:	e8 32 cc ff ff       	call   c0001ad2 <mem_set>
c0004ea0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ea5:	31 d2                	xor    edx,edx
c0004ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eae:	83 c0 26             	add    eax,0x26
c0004eb1:	e8 1c cc ff ff       	call   c0001ad2 <mem_set>
c0004eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eba:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ebd:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ec1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ec6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec9:	83 c0 08             	add    eax,0x8
c0004ecc:	e8 e3 cb ff ff       	call   c0001ab4 <st_dword>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed8:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004edc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ee0:	e8 b7 ea ff ff       	call   c000399c <store_xdir>
c0004ee5:	89 c5                	mov    ebp,eax
c0004ee7:	85 c0                	test   eax,eax
c0004ee9:	0f 85 98 02 00 00    	jne    c0005187 <f_open+0x419>
c0004eef:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ef2:	85 d2                	test   edx,edx
c0004ef4:	0f 84 db 00 00 00    	je     c0004fd5 <f_open+0x267>
c0004efa:	31 c9                	xor    ecx,ecx
c0004efc:	89 d8                	mov    eax,ebx
c0004efe:	e8 8e e3 ff ff       	call   c0003291 <remove_chain>
c0004f03:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f07:	89 c5                	mov    ebp,eax
c0004f09:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f0c:	48                   	dec    eax
c0004f0d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f10:	e9 b8 00 00 00       	jmp    c0004fcd <f_open+0x25f>
c0004f15:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f19:	89 ea                	mov    edx,ebp
c0004f1b:	e8 99 fc ff ff       	call   c0004bb9 <ld_clust.isra.0>
c0004f20:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f25:	89 c7                	mov    edi,eax
c0004f27:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f2a:	e8 85 cb ff ff       	call   c0001ab4 <st_dword>
c0004f2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f33:	31 c9                	xor    ecx,ecx
c0004f35:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f3d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f41:	e8 9c fc ff ff       	call   c0004be2 <st_clust.isra.1>
c0004f46:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f4a:	31 d2                	xor    edx,edx
c0004f4c:	83 c0 1c             	add    eax,0x1c
c0004f4f:	e8 60 cb ff ff       	call   c0001ab4 <st_dword>
c0004f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f58:	85 ff                	test   edi,edi
c0004f5a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f5e:	74 75                	je     c0004fd5 <f_open+0x267>
c0004f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f64:	31 c9                	xor    ecx,ecx
c0004f66:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f69:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f74:	89 fa                	mov    edx,edi
c0004f76:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f7a:	e8 12 e3 ff ff       	call   c0003291 <remove_chain>
c0004f7f:	89 c5                	mov    ebp,eax
c0004f81:	85 c0                	test   eax,eax
c0004f83:	0f 85 fe 01 00 00    	jne    c0005187 <f_open+0x419>
c0004f89:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f95:	4f                   	dec    edi
c0004f96:	e8 81 d2 ff ff       	call   c000221c <move_window>
c0004f9b:	89 c5                	mov    ebp,eax
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fa4:	eb 27                	jmp    c0004fcd <f_open+0x25f>
c0004fa6:	85 ed                	test   ebp,ebp
c0004fa8:	0f 85 d9 01 00 00    	jne    c0005187 <f_open+0x419>
c0004fae:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fb2:	bd 04 00 00 00       	mov    ebp,0x4
c0004fb7:	a8 10                	test   al,0x10
c0004fb9:	0f 85 c8 01 00 00    	jne    c0005187 <f_open+0x419>
c0004fbf:	83 e7 02             	and    edi,0x2
c0004fc2:	74 11                	je     c0004fd5 <f_open+0x267>
c0004fc4:	bd 07 00 00 00       	mov    ebp,0x7
c0004fc9:	a8 01                	test   al,0x1
c0004fcb:	eb 02                	jmp    c0004fcf <f_open+0x261>
c0004fcd:	85 ed                	test   ebp,ebp
c0004fcf:	0f 85 b2 01 00 00    	jne    c0005187 <f_open+0x419>
c0004fd5:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fdb:	74 03                	je     c0004fe0 <f_open+0x272>
c0004fdd:	83 ce 40             	or     esi,0x40
c0004fe0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fe4:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fe7:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fea:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fed:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ff0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004ff4:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004ff7:	8a 02                	mov    al,BYTE PTR [edx]
c0004ff9:	3c 04                	cmp    al,0x4
c0004ffb:	75 2a                	jne    c0005027 <f_open+0x2b9>
c0004ffd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005001:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005006:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005009:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000500d:	30 c0                	xor    al,al
c000500f:	09 c8                	or     eax,ecx
c0005011:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005014:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005018:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000501b:	8d 42 10             	lea    eax,[edx+0x10]
c000501e:	89 da                	mov    edx,ebx
c0005020:	e8 e5 fb ff ff       	call   c0004c0a <init_alloc_info.isra.2>
c0005025:	eb 1c                	jmp    c0005043 <f_open+0x2d5>
c0005027:	89 fa                	mov    edx,edi
c0005029:	e8 8b fb ff ff       	call   c0004bb9 <ld_clust.isra.0>
c000502e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005031:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005034:	e8 12 ca ff ff       	call   c0001a4b <ld_dword>
c0005039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005040:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005043:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005047:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000504e:	89 03                	mov    DWORD PTR [ebx],eax
c0005050:	31 d2                	xor    edx,edx
c0005052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005056:	b9 00 02 00 00       	mov    ecx,0x200
c000505b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000505f:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005063:	89 f0                	mov    eax,esi
c0005065:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000506c:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000506f:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005076:	8d 43 50             	lea    eax,[ebx+0x50]
c0005079:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005080:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005087:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000508b:	e8 42 ca ff ff       	call   c0001ad2 <mem_set>
c0005090:	83 e6 20             	and    esi,0x20
c0005093:	75 07                	jne    c000509c <f_open+0x32e>
c0005095:	31 ed                	xor    ebp,ebp
c0005097:	e9 eb 00 00 00       	jmp    c0005187 <f_open+0x419>
c000509c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000509f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050ae:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050b2:	74 e1                	je     c0005095 <f_open+0x327>
c00050b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050bc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050bf:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050c9:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050cd:	31 ff                	xor    edi,edi
c00050cf:	c1 e5 09             	shl    ebp,0x9
c00050d2:	89 ee                	mov    esi,ebp
c00050d4:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050d8:	89 f8                	mov    eax,edi
c00050da:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050de:	73 22                	jae    c0005102 <f_open+0x394>
c00050e0:	89 d8                	mov    eax,ebx
c00050e2:	e8 bd dc ff ff       	call   c0002da4 <get_fat>
c00050e7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050eb:	89 c2                	mov    edx,eax
c00050ed:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050f1:	83 f8 01             	cmp    eax,0x1
c00050f4:	76 10                	jbe    c0005106 <f_open+0x398>
c00050f6:	83 f8 ff             	cmp    eax,0xffffffff
c00050f9:	75 d9                	jne    c00050d4 <f_open+0x366>
c00050fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005100:	eb 09                	jmp    c000510b <f_open+0x39d>
c0005102:	31 ed                	xor    ebp,ebp
c0005104:	eb 05                	jmp    c000510b <f_open+0x39d>
c0005106:	bd 02 00 00 00       	mov    ebp,0x2
c000510b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000510e:	85 ed                	test   ebp,ebp
c0005110:	75 75                	jne    c0005187 <f_open+0x419>
c0005112:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005116:	25 ff 01 00 00       	and    eax,0x1ff
c000511b:	0f 84 74 ff ff ff    	je     c0005095 <f_open+0x327>
c0005121:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005125:	bd 02 00 00 00       	mov    ebp,0x2
c000512a:	89 c8                	mov    eax,ecx
c000512c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005130:	e8 a2 cb ff ff       	call   c0001cd7 <clst2sect>
c0005135:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005139:	89 d7                	mov    edi,edx
c000513b:	09 c7                	or     edi,eax
c000513d:	74 48                	je     c0005187 <f_open+0x419>
c000513f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005143:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005147:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000514f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005153:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005157:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000515b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000515e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005162:	83 ec 0c             	sub    esp,0xc
c0005165:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005168:	6a 01                	push   0x1
c000516a:	52                   	push   edx
c000516b:	50                   	push   eax
c000516c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005170:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005174:	50                   	push   eax
c0005175:	e8 79 c8 ff ff       	call   c00019f3 <disk_read>
c000517a:	83 c4 20             	add    esp,0x20
c000517d:	85 c0                	test   eax,eax
c000517f:	0f 95 c0             	setne  al
c0005182:	0f b6 c0             	movzx  eax,al
c0005185:	89 c5                	mov    ebp,eax
c0005187:	83 ec 0c             	sub    esp,0xc
c000518a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000518e:	e8 f4 30 00 00       	call   c0008287 <ff_memfree>
c0005193:	83 c4 10             	add    esp,0x10
c0005196:	85 ed                	test   ebp,ebp
c0005198:	74 06                	je     c00051a0 <f_open+0x432>
c000519a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051a0:	83 c4 7c             	add    esp,0x7c
c00051a3:	89 e8                	mov    eax,ebp
c00051a5:	5b                   	pop    ebx
c00051a6:	5e                   	pop    esi
c00051a7:	5f                   	pop    edi
c00051a8:	5d                   	pop    ebp
c00051a9:	c3                   	ret    

c00051aa <f_read>:
c00051aa:	55                   	push   ebp
c00051ab:	57                   	push   edi
c00051ac:	56                   	push   esi
c00051ad:	53                   	push   ebx
c00051ae:	83 ec 2c             	sub    esp,0x2c
c00051b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051b5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051bf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c3:	89 d8                	mov    eax,ebx
c00051c5:	e8 77 cf ff ff       	call   c0002141 <validate>
c00051ca:	89 c5                	mov    ebp,eax
c00051cc:	85 c0                	test   eax,eax
c00051ce:	0f 85 4c 02 00 00    	jne    c0005420 <f_read+0x276>
c00051d4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051d8:	85 ed                	test   ebp,ebp
c00051da:	0f 85 40 02 00 00    	jne    c0005420 <f_read+0x276>
c00051e0:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051e4:	0f 84 31 02 00 00    	je     c000541b <f_read+0x271>
c00051ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051ed:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051f0:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051f3:	bf 00 00 00 00       	mov    edi,0x0
c00051f8:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051fb:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051ff:	89 d1                	mov    ecx,edx
c0005201:	19 f9                	sbb    ecx,edi
c0005203:	0f 83 cf 00 00 00    	jae    c00052d8 <f_read+0x12e>
c0005209:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000520d:	e9 c6 00 00 00       	jmp    c00052d8 <f_read+0x12e>
c0005212:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005215:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005218:	89 d0                	mov    eax,edx
c000521a:	25 ff 01 00 00       	and    eax,0x1ff
c000521f:	0f 85 c9 01 00 00    	jne    c00053ee <f_read+0x244>
c0005225:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005229:	89 d6                	mov    esi,edx
c000522b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000522f:	89 cf                	mov    edi,ecx
c0005231:	48                   	dec    eax
c0005232:	0f ac fe 09          	shrd   esi,edi,0x9
c0005236:	21 f0                	and    eax,esi
c0005238:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000523c:	0f 84 a6 00 00 00    	je     c00052e8 <f_read+0x13e>
c0005242:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005246:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005249:	89 c8                	mov    eax,ecx
c000524b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000524e:	e8 84 ca ff ff       	call   c0001cd7 <clst2sect>
c0005253:	89 d7                	mov    edi,edx
c0005255:	09 c7                	or     edi,eax
c0005257:	0f 84 b4 00 00 00    	je     c0005311 <f_read+0x167>
c000525d:	31 ff                	xor    edi,edi
c000525f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005263:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005266:	01 c6                	add    esi,eax
c0005268:	11 d7                	adc    edi,edx
c000526a:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005272:	0f 86 fd 00 00 00    	jbe    c0005375 <f_read+0x1cb>
c0005278:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000527c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005280:	c1 e8 09             	shr    eax,0x9
c0005283:	89 04 24             	mov    DWORD PTR [esp],eax
c0005286:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000528a:	03 14 24             	add    edx,DWORD PTR [esp]
c000528d:	39 c2                	cmp    edx,eax
c000528f:	76 07                	jbe    c0005298 <f_read+0xee>
c0005291:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005295:	89 04 24             	mov    DWORD PTR [esp],eax
c0005298:	83 ec 0c             	sub    esp,0xc
c000529b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000529f:	57                   	push   edi
c00052a0:	56                   	push   esi
c00052a1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052a5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052a9:	50                   	push   eax
c00052aa:	e8 44 c7 ff ff       	call   c00019f3 <disk_read>
c00052af:	83 c4 20             	add    esp,0x20
c00052b2:	85 c0                	test   eax,eax
c00052b4:	75 6e                	jne    c0005324 <f_read+0x17a>
c00052b6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052ba:	78 7e                	js     c000533a <f_read+0x190>
c00052bc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052bf:	c1 e6 09             	shl    esi,0x9
c00052c2:	31 ff                	xor    edi,edi
c00052c4:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052cc:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052d0:	01 30                	add    DWORD PTR [eax],esi
c00052d2:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052d5:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052d8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052dd:	0f 85 2f ff ff ff    	jne    c0005212 <f_read+0x68>
c00052e3:	e9 38 01 00 00       	jmp    c0005420 <f_read+0x276>
c00052e8:	89 c8                	mov    eax,ecx
c00052ea:	09 d0                	or     eax,edx
c00052ec:	75 05                	jne    c00052f3 <f_read+0x149>
c00052ee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052f1:	eb 19                	jmp    c000530c <f_read+0x162>
c00052f3:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052f7:	74 09                	je     c0005302 <f_read+0x158>
c00052f9:	89 d8                	mov    eax,ebx
c00052fb:	e8 f8 c9 ff ff       	call   c0001cf8 <clmt_clust>
c0005300:	eb 0a                	jmp    c000530c <f_read+0x162>
c0005302:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005305:	89 d8                	mov    eax,ebx
c0005307:	e8 98 da ff ff       	call   c0002da4 <get_fat>
c000530c:	83 f8 01             	cmp    eax,0x1
c000530f:	77 0e                	ja     c000531f <f_read+0x175>
c0005311:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005315:	bd 02 00 00 00       	mov    ebp,0x2
c000531a:	e9 01 01 00 00       	jmp    c0005420 <f_read+0x276>
c000531f:	83 f8 ff             	cmp    eax,0xffffffff
c0005322:	75 0e                	jne    c0005332 <f_read+0x188>
c0005324:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005328:	bd 01 00 00 00       	mov    ebp,0x1
c000532d:	e9 ee 00 00 00       	jmp    c0005420 <f_read+0x276>
c0005332:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005335:	e9 08 ff ff ff       	jmp    c0005242 <f_read+0x98>
c000533a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005340:	29 f0                	sub    eax,esi
c0005342:	19 fa                	sbb    edx,edi
c0005344:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005347:	89 d7                	mov    edi,edx
c0005349:	ba 00 00 00 00       	mov    edx,0x0
c000534e:	89 f9                	mov    ecx,edi
c0005350:	19 d1                	sbb    ecx,edx
c0005352:	0f 83 64 ff ff ff    	jae    c00052bc <f_read+0x112>
c0005358:	89 c7                	mov    edi,eax
c000535a:	8d 53 50             	lea    edx,[ebx+0x50]
c000535d:	c1 e7 09             	shl    edi,0x9
c0005360:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005364:	b9 00 02 00 00       	mov    ecx,0x200
c0005369:	01 f8                	add    eax,edi
c000536b:	e8 4d c7 ff ff       	call   c0001abd <mem_cpy>
c0005370:	e9 47 ff ff ff       	jmp    c00052bc <f_read+0x112>
c0005375:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005378:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000537b:	89 04 24             	mov    DWORD PTR [esp],eax
c000537e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005382:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005386:	75 05                	jne    c000538d <f_read+0x1e3>
c0005388:	39 34 24             	cmp    DWORD PTR [esp],esi
c000538b:	74 5b                	je     c00053e8 <f_read+0x23e>
c000538d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005390:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005398:	79 2a                	jns    c00053c4 <f_read+0x21a>
c000539a:	83 ec 0c             	sub    esp,0xc
c000539d:	6a 01                	push   0x1
c000539f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053ab:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053af:	50                   	push   eax
c00053b0:	e8 54 c6 ff ff       	call   c0001a09 <disk_write>
c00053b5:	83 c4 20             	add    esp,0x20
c00053b8:	85 c0                	test   eax,eax
c00053ba:	0f 85 64 ff ff ff    	jne    c0005324 <f_read+0x17a>
c00053c0:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053c4:	83 ec 0c             	sub    esp,0xc
c00053c7:	6a 01                	push   0x1
c00053c9:	57                   	push   edi
c00053ca:	56                   	push   esi
c00053cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053d3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053d7:	50                   	push   eax
c00053d8:	e8 16 c6 ff ff       	call   c00019f3 <disk_read>
c00053dd:	83 c4 20             	add    esp,0x20
c00053e0:	85 c0                	test   eax,eax
c00053e2:	0f 85 3c ff ff ff    	jne    c0005324 <f_read+0x17a>
c00053e8:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053eb:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053ee:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053f1:	ba 00 02 00 00       	mov    edx,0x200
c00053f6:	25 ff 01 00 00       	and    eax,0x1ff
c00053fb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053ff:	29 c2                	sub    edx,eax
c0005401:	39 d6                	cmp    esi,edx
c0005403:	76 02                	jbe    c0005407 <f_read+0x25d>
c0005405:	89 d6                	mov    esi,edx
c0005407:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000540b:	89 f1                	mov    ecx,esi
c000540d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005411:	e8 a7 c6 ff ff       	call   c0001abd <mem_cpy>
c0005416:	e9 a7 fe ff ff       	jmp    c00052c2 <f_read+0x118>
c000541b:	bd 07 00 00 00       	mov    ebp,0x7
c0005420:	83 c4 2c             	add    esp,0x2c
c0005423:	89 e8                	mov    eax,ebp
c0005425:	5b                   	pop    ebx
c0005426:	5e                   	pop    esi
c0005427:	5f                   	pop    edi
c0005428:	5d                   	pop    ebp
c0005429:	c3                   	ret    

c000542a <f_write>:
c000542a:	55                   	push   ebp
c000542b:	57                   	push   edi
c000542c:	56                   	push   esi
c000542d:	53                   	push   ebx
c000542e:	83 ec 2c             	sub    esp,0x2c
c0005431:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005435:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005439:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000543f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005443:	89 d8                	mov    eax,ebx
c0005445:	e8 f7 cc ff ff       	call   c0002141 <validate>
c000544a:	89 c5                	mov    ebp,eax
c000544c:	85 c0                	test   eax,eax
c000544e:	0f 85 86 02 00 00    	jne    c00056da <f_write+0x2b0>
c0005454:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005458:	85 ed                	test   ebp,ebp
c000545a:	0f 85 7a 02 00 00    	jne    c00056da <f_write+0x2b0>
c0005460:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005464:	0f 84 6b 02 00 00    	je     c00056d5 <f_write+0x2ab>
c000546a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000546e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005471:	0f 84 43 01 00 00    	je     c00055ba <f_write+0x190>
c0005477:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000547a:	89 c1                	mov    ecx,eax
c000547c:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005480:	0f 83 34 01 00 00    	jae    c00055ba <f_write+0x190>
c0005486:	f7 d0                	not    eax
c0005488:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000548c:	e9 29 01 00 00       	jmp    c00055ba <f_write+0x190>
c0005491:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005494:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005497:	89 d0                	mov    eax,edx
c0005499:	25 ff 01 00 00       	and    eax,0x1ff
c000549e:	0f 85 00 02 00 00    	jne    c00056a4 <f_write+0x27a>
c00054a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054a8:	89 d6                	mov    esi,edx
c00054aa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054ae:	89 cf                	mov    edi,ecx
c00054b0:	48                   	dec    eax
c00054b1:	0f ac fe 09          	shrd   esi,edi,0x9
c00054b5:	21 f0                	and    eax,esi
c00054b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054bb:	0f 84 06 01 00 00    	je     c00055c7 <f_write+0x19d>
c00054c1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c5:	0f 88 6e 01 00 00    	js     c0005639 <f_write+0x20f>
c00054cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054cf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054d2:	89 c8                	mov    eax,ecx
c00054d4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054d8:	e8 fa c7 ff ff       	call   c0001cd7 <clst2sect>
c00054dd:	89 d1                	mov    ecx,edx
c00054df:	09 c1                	or     ecx,eax
c00054e1:	0f 84 1c 01 00 00    	je     c0005603 <f_write+0x1d9>
c00054e7:	31 ff                	xor    edi,edi
c00054e9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054f1:	01 c6                	add    esi,eax
c00054f3:	11 d7                	adc    edi,edx
c00054f5:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054fd:	0f 86 63 01 00 00    	jbe    c0005666 <f_write+0x23c>
c0005503:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005507:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000550b:	c1 e8 09             	shr    eax,0x9
c000550e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005512:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005516:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000551a:	39 c2                	cmp    edx,eax
c000551c:	76 08                	jbe    c0005526 <f_write+0xfc>
c000551e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005522:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005526:	83 ec 0c             	sub    esp,0xc
c0005529:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000552d:	57                   	push   edi
c000552e:	56                   	push   esi
c000552f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005533:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005537:	50                   	push   eax
c0005538:	e8 cc c4 ff ff       	call   c0001a09 <disk_write>
c000553d:	83 c4 20             	add    esp,0x20
c0005540:	85 c0                	test   eax,eax
c0005542:	0f 85 ce 00 00 00    	jne    c0005616 <f_write+0x1ec>
c0005548:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000554b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000554e:	29 f0                	sub    eax,esi
c0005550:	19 fa                	sbb    edx,edi
c0005552:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005556:	89 d7                	mov    edi,edx
c0005558:	ba 00 00 00 00       	mov    edx,0x0
c000555d:	89 f9                	mov    ecx,edi
c000555f:	19 d1                	sbb    ecx,edx
c0005561:	73 1c                	jae    c000557f <f_write+0x155>
c0005563:	89 c7                	mov    edi,eax
c0005565:	b9 00 02 00 00       	mov    ecx,0x200
c000556a:	c1 e7 09             	shl    edi,0x9
c000556d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005570:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005574:	89 fa                	mov    edx,edi
c0005576:	e8 42 c5 ff ff       	call   c0001abd <mem_cpy>
c000557b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000557f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005583:	c1 e6 09             	shl    esi,0x9
c0005586:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000558a:	31 ff                	xor    edi,edi
c000558c:	01 30                	add    DWORD PTR [eax],esi
c000558e:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005592:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005596:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005599:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000559c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000559f:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055a2:	89 c1                	mov    ecx,eax
c00055a4:	39 f2                	cmp    edx,esi
c00055a6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055a9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055ac:	19 f9                	sbb    ecx,edi
c00055ae:	73 04                	jae    c00055b4 <f_write+0x18a>
c00055b0:	89 f2                	mov    edx,esi
c00055b2:	89 f8                	mov    eax,edi
c00055b4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055b7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055ba:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055bf:	0f 85 cc fe ff ff    	jne    c0005491 <f_write+0x67>
c00055c5:	eb 2e                	jmp    c00055f5 <f_write+0x1cb>
c00055c7:	89 c8                	mov    eax,ecx
c00055c9:	09 d0                	or     eax,edx
c00055cb:	75 0b                	jne    c00055d8 <f_write+0x1ae>
c00055cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055d0:	31 d2                	xor    edx,edx
c00055d2:	85 c0                	test   eax,eax
c00055d4:	75 28                	jne    c00055fe <f_write+0x1d4>
c00055d6:	eb 12                	jmp    c00055ea <f_write+0x1c0>
c00055d8:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055dc:	74 09                	je     c00055e7 <f_write+0x1bd>
c00055de:	89 d8                	mov    eax,ebx
c00055e0:	e8 13 c7 ff ff       	call   c0001cf8 <clmt_clust>
c00055e5:	eb 0a                	jmp    c00055f1 <f_write+0x1c7>
c00055e7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ea:	89 d8                	mov    eax,ebx
c00055ec:	e8 a1 da ff ff       	call   c0003092 <create_chain>
c00055f1:	85 c0                	test   eax,eax
c00055f3:	75 09                	jne    c00055fe <f_write+0x1d4>
c00055f5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055f9:	e9 dc 00 00 00       	jmp    c00056da <f_write+0x2b0>
c00055fe:	83 f8 01             	cmp    eax,0x1
c0005601:	75 0e                	jne    c0005611 <f_write+0x1e7>
c0005603:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005607:	bd 02 00 00 00       	mov    ebp,0x2
c000560c:	e9 c9 00 00 00       	jmp    c00056da <f_write+0x2b0>
c0005611:	83 f8 ff             	cmp    eax,0xffffffff
c0005614:	75 0e                	jne    c0005624 <f_write+0x1fa>
c0005616:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000561a:	bd 01 00 00 00       	mov    ebp,0x1
c000561f:	e9 b6 00 00 00       	jmp    c00056da <f_write+0x2b0>
c0005624:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005627:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000562b:	0f 85 90 fe ff ff    	jne    c00054c1 <f_write+0x97>
c0005631:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005634:	e9 88 fe ff ff       	jmp    c00054c1 <f_write+0x97>
c0005639:	83 ec 0c             	sub    esp,0xc
c000563c:	8d 43 50             	lea    eax,[ebx+0x50]
c000563f:	6a 01                	push   0x1
c0005641:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005644:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005647:	50                   	push   eax
c0005648:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000564c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005650:	50                   	push   eax
c0005651:	e8 b3 c3 ff ff       	call   c0001a09 <disk_write>
c0005656:	83 c4 20             	add    esp,0x20
c0005659:	85 c0                	test   eax,eax
c000565b:	75 b9                	jne    c0005616 <f_write+0x1ec>
c000565d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005661:	e9 65 fe ff ff       	jmp    c00054cb <f_write+0xa1>
c0005666:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005669:	75 05                	jne    c0005670 <f_write+0x246>
c000566b:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000566e:	74 2e                	je     c000569e <f_write+0x274>
c0005670:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005673:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005676:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005679:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000567c:	73 20                	jae    c000569e <f_write+0x274>
c000567e:	83 ec 0c             	sub    esp,0xc
c0005681:	8d 43 50             	lea    eax,[ebx+0x50]
c0005684:	6a 01                	push   0x1
c0005686:	57                   	push   edi
c0005687:	56                   	push   esi
c0005688:	50                   	push   eax
c0005689:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000568d:	50                   	push   eax
c000568e:	e8 60 c3 ff ff       	call   c00019f3 <disk_read>
c0005693:	83 c4 20             	add    esp,0x20
c0005696:	85 c0                	test   eax,eax
c0005698:	0f 85 78 ff ff ff    	jne    c0005616 <f_write+0x1ec>
c000569e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056a1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a7:	ba 00 02 00 00       	mov    edx,0x200
c00056ac:	25 ff 01 00 00       	and    eax,0x1ff
c00056b1:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056b5:	29 c2                	sub    edx,eax
c00056b7:	39 d6                	cmp    esi,edx
c00056b9:	76 02                	jbe    c00056bd <f_write+0x293>
c00056bb:	89 d6                	mov    esi,edx
c00056bd:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056c1:	89 f1                	mov    ecx,esi
c00056c3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056c7:	e8 f1 c3 ff ff       	call   c0001abd <mem_cpy>
c00056cc:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056d0:	e9 b1 fe ff ff       	jmp    c0005586 <f_write+0x15c>
c00056d5:	bd 07 00 00 00       	mov    ebp,0x7
c00056da:	83 c4 2c             	add    esp,0x2c
c00056dd:	89 e8                	mov    eax,ebp
c00056df:	5b                   	pop    ebx
c00056e0:	5e                   	pop    esi
c00056e1:	5f                   	pop    edi
c00056e2:	5d                   	pop    ebp
c00056e3:	c3                   	ret    

c00056e4 <f_sync>:
c00056e4:	56                   	push   esi
c00056e5:	53                   	push   ebx
c00056e6:	83 ec 64             	sub    esp,0x64
c00056e9:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056ed:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056f1:	89 d8                	mov    eax,ebx
c00056f3:	e8 49 ca ff ff       	call   c0002141 <validate>
c00056f8:	85 c0                	test   eax,eax
c00056fa:	0f 85 ba 01 00 00    	jne    c00058ba <f_sync+0x1d6>
c0005700:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005703:	f6 c2 40             	test   dl,0x40
c0005706:	0f 84 ae 01 00 00    	je     c00058ba <f_sync+0x1d6>
c000570c:	84 d2                	test   dl,dl
c000570e:	79 33                	jns    c0005743 <f_sync+0x5f>
c0005710:	83 ec 0c             	sub    esp,0xc
c0005713:	8d 43 50             	lea    eax,[ebx+0x50]
c0005716:	6a 01                	push   0x1
c0005718:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000571b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000571e:	50                   	push   eax
c000571f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005723:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005727:	50                   	push   eax
c0005728:	e8 dc c2 ff ff       	call   c0001a09 <disk_write>
c000572d:	83 c4 20             	add    esp,0x20
c0005730:	89 c2                	mov    edx,eax
c0005732:	b8 01 00 00 00       	mov    eax,0x1
c0005737:	85 d2                	test   edx,edx
c0005739:	0f 85 7b 01 00 00    	jne    c00058ba <f_sync+0x1d6>
c000573f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000574a:	0f 85 11 01 00 00    	jne    c0005861 <f_sync+0x17d>
c0005750:	89 d8                	mov    eax,ebx
c0005752:	e8 13 d6 ff ff       	call   c0002d6a <fill_first_frag>
c0005757:	85 c0                	test   eax,eax
c0005759:	0f 85 5b 01 00 00    	jne    c00058ba <f_sync+0x1d6>
c000575f:	83 c9 ff             	or     ecx,0xffffffff
c0005762:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005765:	89 d8                	mov    eax,ebx
c0005767:	e8 c9 d5 ff ff       	call   c0002d35 <fill_last_frag>
c000576c:	85 c0                	test   eax,eax
c000576e:	0f 85 46 01 00 00    	jne    c00058ba <f_sync+0x1d6>
c0005774:	83 ec 0c             	sub    esp,0xc
c0005777:	68 60 04 00 00       	push   0x460
c000577c:	e8 f0 2a 00 00       	call   c0008271 <ff_memalloc>
c0005781:	83 c4 10             	add    esp,0x10
c0005784:	89 c6                	mov    esi,eax
c0005786:	b8 11 00 00 00       	mov    eax,0x11
c000578b:	85 f6                	test   esi,esi
c000578d:	0f 84 27 01 00 00    	je     c00058ba <f_sync+0x1d6>
c0005793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005797:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000579d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057a3:	89 da                	mov    edx,ebx
c00057a5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057a9:	e8 af df ff ff       	call   c000375d <load_obj_xdir>
c00057ae:	85 c0                	test   eax,eax
c00057b0:	0f 85 95 00 00 00    	jne    c000584b <f_sync+0x167>
c00057b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ba:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057bd:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057c1:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057c4:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057c7:	83 ca 01             	or     edx,0x1
c00057ca:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057cd:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057d0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d3:	83 c0 34             	add    eax,0x34
c00057d6:	e8 d9 c2 ff ff       	call   c0001ab4 <st_dword>
c00057db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057df:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057e8:	83 c0 38             	add    eax,0x38
c00057eb:	e8 c7 c2 ff ff       	call   c0001ab7 <st_qword>
c00057f0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fd:	83 c0 28             	add    eax,0x28
c0005800:	e8 b2 c2 ff ff       	call   c0001ab7 <st_qword>
c0005805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005809:	ba 00 00 21 50       	mov    edx,0x50210000
c000580e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005811:	83 c0 0c             	add    eax,0xc
c0005814:	e8 9b c2 ff ff       	call   c0001ab4 <st_dword>
c0005819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000581d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005820:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005824:	31 d2                	xor    edx,edx
c0005826:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005829:	83 c0 10             	add    eax,0x10
c000582c:	e8 83 c2 ff ff       	call   c0001ab4 <st_dword>
c0005831:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005835:	e8 62 e1 ff ff       	call   c000399c <store_xdir>
c000583a:	85 c0                	test   eax,eax
c000583c:	75 0d                	jne    c000584b <f_sync+0x167>
c000583e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005842:	e8 00 eb ff ff       	call   c0004347 <sync_fs>
c0005847:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000584b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000584f:	83 ec 0c             	sub    esp,0xc
c0005852:	56                   	push   esi
c0005853:	e8 2f 2a 00 00       	call   c0008287 <ff_memfree>
c0005858:	83 c4 10             	add    esp,0x10
c000585b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000585f:	eb 59                	jmp    c00058ba <f_sync+0x1d6>
c0005861:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005864:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005867:	e8 b0 c9 ff ff       	call   c000221c <move_window>
c000586c:	85 c0                	test   eax,eax
c000586e:	75 4a                	jne    c00058ba <f_sync+0x1d6>
c0005870:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005873:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005877:	89 f2                	mov    edx,esi
c0005879:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000587c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000587e:	e8 5f f3 ff ff       	call   c0004be2 <st_clust.isra.1>
c0005883:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005886:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005889:	e8 26 c2 ff ff       	call   c0001ab4 <st_dword>
c000588e:	8d 46 16             	lea    eax,[esi+0x16]
c0005891:	ba 00 00 21 50       	mov    edx,0x50210000
c0005896:	e8 19 c2 ff ff       	call   c0001ab4 <st_dword>
c000589b:	8d 46 12             	lea    eax,[esi+0x12]
c000589e:	31 d2                	xor    edx,edx
c00058a0:	e8 0b c2 ff ff       	call   c0001ab0 <st_word>
c00058a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b1:	e8 91 ea ff ff       	call   c0004347 <sync_fs>
c00058b6:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058ba:	83 c4 64             	add    esp,0x64
c00058bd:	5b                   	pop    ebx
c00058be:	5e                   	pop    esi
c00058bf:	c3                   	ret    

c00058c0 <f_close>:
c00058c0:	53                   	push   ebx
c00058c1:	83 ec 24             	sub    esp,0x24
c00058c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058c8:	53                   	push   ebx
c00058c9:	e8 16 fe ff ff       	call   c00056e4 <f_sync>
c00058ce:	83 c4 10             	add    esp,0x10
c00058d1:	85 c0                	test   eax,eax
c00058d3:	75 15                	jne    c00058ea <f_close+0x2a>
c00058d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058d9:	89 d8                	mov    eax,ebx
c00058db:	e8 61 c8 ff ff       	call   c0002141 <validate>
c00058e0:	85 c0                	test   eax,eax
c00058e2:	75 06                	jne    c00058ea <f_close+0x2a>
c00058e4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058ea:	83 c4 18             	add    esp,0x18
c00058ed:	5b                   	pop    ebx
c00058ee:	c3                   	ret    

c00058ef <f_lseek>:
c00058ef:	55                   	push   ebp
c00058f0:	57                   	push   edi
c00058f1:	56                   	push   esi
c00058f2:	53                   	push   ebx
c00058f3:	83 ec 3c             	sub    esp,0x3c
c00058f6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058fa:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058fe:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005902:	89 04 24             	mov    DWORD PTR [esp],eax
c0005905:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005909:	89 d8                	mov    eax,ebx
c000590b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000590f:	e8 2d c8 ff ff       	call   c0002141 <validate>
c0005914:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005918:	85 c0                	test   eax,eax
c000591a:	0f 85 7a 04 00 00    	jne    c0005d9a <f_lseek+0x4ab>
c0005920:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005924:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005928:	85 c0                	test   eax,eax
c000592a:	0f 85 6a 04 00 00    	jne    c0005d9a <f_lseek+0x4ab>
c0005930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005934:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005937:	74 0c                	je     c0005945 <f_lseek+0x56>
c0005939:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000593c:	85 c0                	test   eax,eax
c000593e:	75 1f                	jne    c000595f <f_lseek+0x70>
c0005940:	e9 b5 01 00 00       	jmp    c0005afa <f_lseek+0x20b>
c0005945:	83 c9 ff             	or     ecx,0xffffffff
c0005948:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594b:	89 d8                	mov    eax,ebx
c000594d:	e8 e3 d3 ff ff       	call   c0002d35 <fill_last_frag>
c0005952:	85 c0                	test   eax,eax
c0005954:	74 e3                	je     c0005939 <f_lseek+0x4a>
c0005956:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000595a:	e9 3b 04 00 00       	jmp    c0005d9a <f_lseek+0x4ab>
c000595f:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005964:	0f 85 ac 00 00 00    	jne    c0005a16 <f_lseek+0x127>
c000596a:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000596e:	0f 85 a2 00 00 00    	jne    c0005a16 <f_lseek+0x127>
c0005974:	8d 78 04             	lea    edi,[eax+0x4]
c0005977:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000597a:	8b 00                	mov    eax,DWORD PTR [eax]
c000597c:	be 02 00 00 00       	mov    esi,0x2
c0005981:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005985:	85 ed                	test   ebp,ebp
c0005987:	74 73                	je     c00059fc <f_lseek+0x10d>
c0005989:	89 e9                	mov    ecx,ebp
c000598b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005992:	ff 04 24             	inc    DWORD PTR [esp]
c0005995:	89 ca                	mov    edx,ecx
c0005997:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000599b:	89 d8                	mov    eax,ebx
c000599d:	e8 02 d4 ff ff       	call   c0002da4 <get_fat>
c00059a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059a6:	83 f8 01             	cmp    eax,0x1
c00059a9:	77 11                	ja     c00059bc <f_lseek+0xcd>
c00059ab:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059af:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059b7:	e9 de 03 00 00       	jmp    c0005d9a <f_lseek+0x4ab>
c00059bc:	83 f8 ff             	cmp    eax,0xffffffff
c00059bf:	75 11                	jne    c00059d2 <f_lseek+0xe3>
c00059c1:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059c5:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059cd:	e9 c8 03 00 00       	jmp    c0005d9a <f_lseek+0x4ab>
c00059d2:	8d 51 01             	lea    edx,[ecx+0x1]
c00059d5:	89 c1                	mov    ecx,eax
c00059d7:	39 c2                	cmp    edx,eax
c00059d9:	74 b7                	je     c0005992 <f_lseek+0xa3>
c00059db:	83 c6 02             	add    esi,0x2
c00059de:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059e2:	72 0b                	jb     c00059ef <f_lseek+0x100>
c00059e4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059e7:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059ea:	89 0f                	mov    DWORD PTR [edi],ecx
c00059ec:	83 c7 08             	add    edi,0x8
c00059ef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059f3:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059f6:	76 04                	jbe    c00059fc <f_lseek+0x10d>
c00059f8:	89 c5                	mov    ebp,eax
c00059fa:	eb 8d                	jmp    c0005989 <f_lseek+0x9a>
c00059fc:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059ff:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a03:	89 30                	mov    DWORD PTR [eax],esi
c0005a05:	0f 87 87 03 00 00    	ja     c0005d92 <f_lseek+0x4a3>
c0005a0b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a11:	e9 84 03 00 00       	jmp    c0005d9a <f_lseek+0x4ab>
c0005a16:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a19:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a28:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a2f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a33:	73 0f                	jae    c0005a44 <f_lseek+0x155>
c0005a35:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a40:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a4c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a4f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a56:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a5a:	0f 84 3a 03 00 00    	je     c0005d9a <f_lseek+0x4ab>
c0005a60:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a64:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a68:	83 c6 ff             	add    esi,0xffffffff
c0005a6b:	89 d8                	mov    eax,ebx
c0005a6d:	83 d7 ff             	adc    edi,0xffffffff
c0005a70:	89 f2                	mov    edx,esi
c0005a72:	89 f9                	mov    ecx,edi
c0005a74:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a78:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a7b:	e8 78 c2 ff ff       	call   c0001cf8 <clmt_clust>
c0005a80:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a84:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a87:	89 c2                	mov    edx,eax
c0005a89:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a8d:	89 c8                	mov    eax,ecx
c0005a8f:	e8 43 c2 ff ff       	call   c0001cd7 <clst2sect>
c0005a94:	89 d7                	mov    edi,edx
c0005a96:	09 c7                	or     edi,eax
c0005a98:	0f 84 0d ff ff ff    	je     c00059ab <f_lseek+0xbc>
c0005a9e:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aa2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005aa8:	0f 84 ec 02 00 00    	je     c0005d9a <f_lseek+0x4ab>
c0005aae:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ab2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ab6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ab9:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005abd:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ac1:	4d                   	dec    ebp
c0005ac2:	31 ff                	xor    edi,edi
c0005ac4:	21 ee                	and    esi,ebp
c0005ac6:	01 c6                	add    esi,eax
c0005ac8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005acb:	11 d7                	adc    edi,edx
c0005acd:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ad0:	39 fa                	cmp    edx,edi
c0005ad2:	75 08                	jne    c0005adc <f_lseek+0x1ed>
c0005ad4:	39 f0                	cmp    eax,esi
c0005ad6:	0f 84 be 02 00 00    	je     c0005d9a <f_lseek+0x4ab>
c0005adc:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005adf:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ae3:	0f 89 80 02 00 00    	jns    c0005d69 <f_lseek+0x47a>
c0005ae9:	83 ec 0c             	sub    esp,0xc
c0005aec:	6a 01                	push   0x1
c0005aee:	52                   	push   edx
c0005aef:	50                   	push   eax
c0005af0:	55                   	push   ebp
c0005af1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005af5:	e9 5a 02 00 00       	jmp    c0005d54 <f_lseek+0x465>
c0005afa:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005afe:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b01:	74 16                	je     c0005b19 <f_lseek+0x22a>
c0005b03:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b08:	76 0f                	jbe    c0005b19 <f_lseek+0x22a>
c0005b0a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b19:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b1c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b1f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b22:	89 c7                	mov    edi,eax
c0005b24:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b28:	73 0d                	jae    c0005b37 <f_lseek+0x248>
c0005b2a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b2e:	75 07                	jne    c0005b37 <f_lseek+0x248>
c0005b30:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b3a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b3d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b41:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b48:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b4f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b52:	75 09                	jne    c0005b5d <f_lseek+0x26e>
c0005b54:	31 f6                	xor    esi,esi
c0005b56:	31 ff                	xor    edi,edi
c0005b58:	e9 af 01 00 00       	jmp    c0005d0c <f_lseek+0x41d>
c0005b5d:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b61:	89 d7                	mov    edi,edx
c0005b63:	c1 e1 09             	shl    ecx,0x9
c0005b66:	09 c7                	or     edi,eax
c0005b68:	89 cd                	mov    ebp,ecx
c0005b6a:	74 6d                	je     c0005bd9 <f_lseek+0x2ea>
c0005b6c:	83 c0 ff             	add    eax,0xffffffff
c0005b6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b73:	83 d2 ff             	adc    edx,0xffffffff
c0005b76:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b7d:	83 c0 ff             	add    eax,0xffffffff
c0005b80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b84:	83 d2 ff             	adc    edx,0xffffffff
c0005b87:	31 ff                	xor    edi,edi
c0005b89:	57                   	push   edi
c0005b8a:	51                   	push   ecx
c0005b8b:	52                   	push   edx
c0005b8c:	50                   	push   eax
c0005b8d:	e8 ba 05 02 00       	call   c002614c <__udivdi3>
c0005b92:	83 c4 10             	add    esp,0x10
c0005b95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b9d:	57                   	push   edi
c0005b9e:	55                   	push   ebp
c0005b9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ba3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ba7:	e8 a0 05 02 00       	call   c002614c <__udivdi3>
c0005bac:	83 c4 10             	add    esp,0x10
c0005baf:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bb3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bb7:	19 d1                	sbb    ecx,edx
c0005bb9:	72 1e                	jb     c0005bd9 <f_lseek+0x2ea>
c0005bbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bbf:	89 e9                	mov    ecx,ebp
c0005bc1:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bc4:	f7 d9                	neg    ecx
c0005bc6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bc9:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bcd:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bd0:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bd3:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005bd7:	eb 28                	jmp    c0005c01 <f_lseek+0x312>
c0005bd9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005bdc:	85 c0                	test   eax,eax
c0005bde:	75 1e                	jne    c0005bfe <f_lseek+0x30f>
c0005be0:	31 d2                	xor    edx,edx
c0005be2:	89 d8                	mov    eax,ebx
c0005be4:	e8 a9 d4 ff ff       	call   c0003092 <create_chain>
c0005be9:	83 f8 01             	cmp    eax,0x1
c0005bec:	0f 84 b9 fd ff ff    	je     c00059ab <f_lseek+0xbc>
c0005bf2:	83 f8 ff             	cmp    eax,0xffffffff
c0005bf5:	0f 84 c6 fd ff ff    	je     c00059c1 <f_lseek+0xd2>
c0005bfb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bfe:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c01:	85 c0                	test   eax,eax
c0005c03:	0f 84 4b ff ff ff    	je     c0005b54 <f_lseek+0x265>
c0005c09:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c0d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c15:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c18:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c1c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c1f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c22:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c26:	0f 83 9d 00 00 00    	jae    c0005cc9 <f_lseek+0x3da>
c0005c2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c30:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c34:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c37:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c3b:	01 f2                	add    edx,esi
c0005c3d:	11 f9                	adc    ecx,edi
c0005c3f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c47:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c4a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c4d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c50:	f6 c1 02             	test   cl,0x2
c0005c53:	74 35                	je     c0005c8a <f_lseek+0x39b>
c0005c55:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c59:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c5c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c5f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c63:	73 16                	jae    c0005c7b <f_lseek+0x38c>
c0005c65:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c6d:	88 ca                	mov    dl,cl
c0005c6f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c72:	83 ca 40             	or     edx,0x40
c0005c75:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c78:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c7b:	89 c2                	mov    edx,eax
c0005c7d:	89 d8                	mov    eax,ebx
c0005c7f:	e8 0e d4 ff ff       	call   c0003092 <create_chain>
c0005c84:	85 c0                	test   eax,eax
c0005c86:	75 0b                	jne    c0005c93 <f_lseek+0x3a4>
c0005c88:	eb 30                	jmp    c0005cba <f_lseek+0x3cb>
c0005c8a:	89 c2                	mov    edx,eax
c0005c8c:	89 d8                	mov    eax,ebx
c0005c8e:	e8 11 d1 ff ff       	call   c0002da4 <get_fat>
c0005c93:	83 f8 ff             	cmp    eax,0xffffffff
c0005c96:	0f 84 25 fd ff ff    	je     c00059c1 <f_lseek+0xd2>
c0005c9c:	83 f8 01             	cmp    eax,0x1
c0005c9f:	0f 86 06 fd ff ff    	jbe    c00059ab <f_lseek+0xbc>
c0005ca5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ca9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cac:	0f 86 f9 fc ff ff    	jbe    c00059ab <f_lseek+0xbc>
c0005cb2:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb5:	e9 5b ff ff ff       	jmp    c0005c15 <f_lseek+0x326>
c0005cba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cc1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cc9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ccc:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cd0:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cd3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005cd6:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cd9:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cdf:	0f 84 6f fe ff ff    	je     c0005b54 <f_lseek+0x265>
c0005ce5:	89 c2                	mov    edx,eax
c0005ce7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ceb:	e8 e7 bf ff ff       	call   c0001cd7 <clst2sect>
c0005cf0:	89 d7                	mov    edi,edx
c0005cf2:	09 c7                	or     edi,eax
c0005cf4:	0f 84 b1 fc ff ff    	je     c00059ab <f_lseek+0xbc>
c0005cfa:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cfe:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d01:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d05:	c1 ef 09             	shr    edi,0x9
c0005d08:	01 c6                	add    esi,eax
c0005d0a:	11 d7                	adc    edi,edx
c0005d0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d12:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d15:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d18:	19 d1                	sbb    ecx,edx
c0005d1a:	73 0a                	jae    c0005d26 <f_lseek+0x437>
c0005d1c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d1f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d22:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d26:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d2b:	74 6d                	je     c0005d9a <f_lseek+0x4ab>
c0005d2d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d30:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d33:	39 fa                	cmp    edx,edi
c0005d35:	75 04                	jne    c0005d3b <f_lseek+0x44c>
c0005d37:	39 f0                	cmp    eax,esi
c0005d39:	74 5f                	je     c0005d9a <f_lseek+0x4ab>
c0005d3b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d3e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d42:	79 25                	jns    c0005d69 <f_lseek+0x47a>
c0005d44:	83 ec 0c             	sub    esp,0xc
c0005d47:	6a 01                	push   0x1
c0005d49:	52                   	push   edx
c0005d4a:	50                   	push   eax
c0005d4b:	55                   	push   ebp
c0005d4c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d50:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d54:	50                   	push   eax
c0005d55:	e8 af bc ff ff       	call   c0001a09 <disk_write>
c0005d5a:	83 c4 20             	add    esp,0x20
c0005d5d:	85 c0                	test   eax,eax
c0005d5f:	0f 85 5c fc ff ff    	jne    c00059c1 <f_lseek+0xd2>
c0005d65:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d69:	83 ec 0c             	sub    esp,0xc
c0005d6c:	6a 01                	push   0x1
c0005d6e:	57                   	push   edi
c0005d6f:	56                   	push   esi
c0005d70:	55                   	push   ebp
c0005d71:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d75:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d79:	50                   	push   eax
c0005d7a:	e8 74 bc ff ff       	call   c00019f3 <disk_read>
c0005d7f:	83 c4 20             	add    esp,0x20
c0005d82:	85 c0                	test   eax,eax
c0005d84:	0f 85 37 fc ff ff    	jne    c00059c1 <f_lseek+0xd2>
c0005d8a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d8d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d90:	eb 08                	jmp    c0005d9a <f_lseek+0x4ab>
c0005d92:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d9e:	83 c4 3c             	add    esp,0x3c
c0005da1:	5b                   	pop    ebx
c0005da2:	5e                   	pop    esi
c0005da3:	5f                   	pop    edi
c0005da4:	5d                   	pop    ebp
c0005da5:	c3                   	ret    

c0005da6 <f_opendir>:
c0005da6:	56                   	push   esi
c0005da7:	b8 09 00 00 00       	mov    eax,0x9
c0005dac:	53                   	push   ebx
c0005dad:	83 ec 24             	sub    esp,0x24
c0005db0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005db4:	85 db                	test   ebx,ebx
c0005db6:	0f 84 e6 00 00 00    	je     c0005ea2 <f_opendir+0xfc>
c0005dbc:	31 c9                	xor    ecx,ecx
c0005dbe:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dc2:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dc6:	e8 03 c7 ff ff       	call   c00024ce <mount_volume>
c0005dcb:	85 c0                	test   eax,eax
c0005dcd:	0f 85 c9 00 00 00    	jne    c0005e9c <f_opendir+0xf6>
c0005dd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	89 03                	mov    DWORD PTR [ebx],eax
c0005ddc:	68 60 04 00 00       	push   0x460
c0005de1:	e8 8b 24 00 00       	call   c0008271 <ff_memalloc>
c0005de6:	83 c4 10             	add    esp,0x10
c0005de9:	89 c6                	mov    esi,eax
c0005deb:	b8 11 00 00 00       	mov    eax,0x11
c0005df0:	85 f6                	test   esi,esi
c0005df2:	0f 84 aa 00 00 00    	je     c0005ea2 <f_opendir+0xfc>
c0005df8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dfc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e02:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e05:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e08:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e0c:	89 d8                	mov    eax,ebx
c0005e0e:	e8 31 ee ff ff       	call   c0004c44 <follow_path>
c0005e13:	85 c0                	test   eax,eax
c0005e15:	75 61                	jne    c0005e78 <f_opendir+0xd2>
c0005e17:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e1b:	78 46                	js     c0005e63 <f_opendir+0xbd>
c0005e1d:	b8 05 00 00 00       	mov    eax,0x5
c0005e22:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e26:	74 50                	je     c0005e78 <f_opendir+0xd2>
c0005e28:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e2c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e2e:	3c 04                	cmp    al,0x4
c0005e30:	75 26                	jne    c0005e58 <f_opendir+0xb2>
c0005e32:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e35:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e3b:	30 d2                	xor    dl,dl
c0005e3d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e41:	09 c2                	or     edx,eax
c0005e43:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e46:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e49:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e4c:	89 da                	mov    edx,ebx
c0005e4e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e51:	e8 b4 ed ff ff       	call   c0004c0a <init_alloc_info.isra.2>
c0005e56:	eb 0b                	jmp    c0005e63 <f_opendir+0xbd>
c0005e58:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e5b:	e8 59 ed ff ff       	call   c0004bb9 <ld_clust.isra.0>
c0005e60:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e67:	31 d2                	xor    edx,edx
c0005e69:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e6d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e71:	89 d8                	mov    eax,ebx
c0005e73:	e8 22 d1 ff ff       	call   c0002f9a <dir_sdi>
c0005e78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e7c:	83 ec 0c             	sub    esp,0xc
c0005e7f:	56                   	push   esi
c0005e80:	e8 02 24 00 00       	call   c0008287 <ff_memfree>
c0005e85:	83 c4 10             	add    esp,0x10
c0005e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e8c:	83 f8 04             	cmp    eax,0x4
c0005e8f:	74 06                	je     c0005e97 <f_opendir+0xf1>
c0005e91:	85 c0                	test   eax,eax
c0005e93:	74 0d                	je     c0005ea2 <f_opendir+0xfc>
c0005e95:	eb 05                	jmp    c0005e9c <f_opendir+0xf6>
c0005e97:	b8 05 00 00 00       	mov    eax,0x5
c0005e9c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ea2:	83 c4 24             	add    esp,0x24
c0005ea5:	5b                   	pop    ebx
c0005ea6:	5e                   	pop    esi
c0005ea7:	c3                   	ret    

c0005ea8 <f_closedir>:
c0005ea8:	53                   	push   ebx
c0005ea9:	83 ec 18             	sub    esp,0x18
c0005eac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005eb0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005eb4:	89 d8                	mov    eax,ebx
c0005eb6:	e8 86 c2 ff ff       	call   c0002141 <validate>
c0005ebb:	85 c0                	test   eax,eax
c0005ebd:	75 06                	jne    c0005ec5 <f_closedir+0x1d>
c0005ebf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ec5:	83 c4 18             	add    esp,0x18
c0005ec8:	5b                   	pop    ebx
c0005ec9:	c3                   	ret    

c0005eca <f_readdir>:
c0005eca:	57                   	push   edi
c0005ecb:	56                   	push   esi
c0005ecc:	53                   	push   ebx
c0005ecd:	83 ec 20             	sub    esp,0x20
c0005ed0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ed8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edc:	89 d8                	mov    eax,ebx
c0005ede:	e8 5e c2 ff ff       	call   c0002141 <validate>
c0005ee3:	85 c0                	test   eax,eax
c0005ee5:	75 77                	jne    c0005f5e <f_readdir+0x94>
c0005ee7:	85 ff                	test   edi,edi
c0005ee9:	75 0b                	jne    c0005ef6 <f_readdir+0x2c>
c0005eeb:	31 d2                	xor    edx,edx
c0005eed:	89 d8                	mov    eax,ebx
c0005eef:	e8 a6 d0 ff ff       	call   c0002f9a <dir_sdi>
c0005ef4:	eb 68                	jmp    c0005f5e <f_readdir+0x94>
c0005ef6:	83 ec 0c             	sub    esp,0xc
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 6e 23 00 00       	call   c0008271 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	74 4d                	je     c0005f5e <f_readdir+0x94>
c0005f11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f15:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f1e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f21:	31 d2                	xor    edx,edx
c0005f23:	89 d8                	mov    eax,ebx
c0005f25:	e8 80 d8 ff ff       	call   c00037aa <dir_read>
c0005f2a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f2f:	75 19                	jne    c0005f4a <f_readdir+0x80>
c0005f31:	89 fa                	mov    edx,edi
c0005f33:	89 d8                	mov    eax,ebx
c0005f35:	e8 7e ea ff ff       	call   c00049b8 <get_fileinfo>
c0005f3a:	31 d2                	xor    edx,edx
c0005f3c:	89 d8                	mov    eax,ebx
c0005f3e:	e8 af d5 ff ff       	call   c00034f2 <dir_next>
c0005f43:	83 f8 04             	cmp    eax,0x4
c0005f46:	75 02                	jne    c0005f4a <f_readdir+0x80>
c0005f48:	31 c0                	xor    eax,eax
c0005f4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f4e:	83 ec 0c             	sub    esp,0xc
c0005f51:	56                   	push   esi
c0005f52:	e8 30 23 00 00       	call   c0008287 <ff_memfree>
c0005f57:	83 c4 10             	add    esp,0x10
c0005f5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f5e:	83 c4 20             	add    esp,0x20
c0005f61:	5b                   	pop    ebx
c0005f62:	5e                   	pop    esi
c0005f63:	5f                   	pop    edi
c0005f64:	c3                   	ret    

c0005f65 <f_stat>:
c0005f65:	57                   	push   edi
c0005f66:	31 c9                	xor    ecx,ecx
c0005f68:	56                   	push   esi
c0005f69:	53                   	push   ebx
c0005f6a:	83 ec 50             	sub    esp,0x50
c0005f6d:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f71:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f75:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f79:	e8 50 c5 ff ff       	call   c00024ce <mount_volume>
c0005f7e:	89 c3                	mov    ebx,eax
c0005f80:	85 c0                	test   eax,eax
c0005f82:	75 67                	jne    c0005feb <f_stat+0x86>
c0005f84:	83 ec 0c             	sub    esp,0xc
c0005f87:	bb 11 00 00 00       	mov    ebx,0x11
c0005f8c:	68 60 04 00 00       	push   0x460
c0005f91:	e8 db 22 00 00       	call   c0008271 <ff_memalloc>
c0005f96:	83 c4 10             	add    esp,0x10
c0005f99:	89 c6                	mov    esi,eax
c0005f9b:	85 c0                	test   eax,eax
c0005f9d:	74 4c                	je     c0005feb <f_stat+0x86>
c0005f9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fa3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fa9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005faf:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fb3:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fb7:	e8 88 ec ff ff       	call   c0004c44 <follow_path>
c0005fbc:	89 c3                	mov    ebx,eax
c0005fbe:	85 c0                	test   eax,eax
c0005fc0:	75 1d                	jne    c0005fdf <f_stat+0x7a>
c0005fc2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fc7:	78 11                	js     c0005fda <f_stat+0x75>
c0005fc9:	85 ff                	test   edi,edi
c0005fcb:	74 12                	je     c0005fdf <f_stat+0x7a>
c0005fcd:	89 fa                	mov    edx,edi
c0005fcf:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fd3:	e8 e0 e9 ff ff       	call   c00049b8 <get_fileinfo>
c0005fd8:	eb 05                	jmp    c0005fdf <f_stat+0x7a>
c0005fda:	bb 06 00 00 00       	mov    ebx,0x6
c0005fdf:	83 ec 0c             	sub    esp,0xc
c0005fe2:	56                   	push   esi
c0005fe3:	e8 9f 22 00 00       	call   c0008287 <ff_memfree>
c0005fe8:	83 c4 10             	add    esp,0x10
c0005feb:	83 c4 50             	add    esp,0x50
c0005fee:	89 d8                	mov    eax,ebx
c0005ff0:	5b                   	pop    ebx
c0005ff1:	5e                   	pop    esi
c0005ff2:	5f                   	pop    edi
c0005ff3:	c3                   	ret    

c0005ff4 <f_getfree>:
c0005ff4:	55                   	push   ebp
c0005ff5:	31 c9                	xor    ecx,ecx
c0005ff7:	57                   	push   edi
c0005ff8:	56                   	push   esi
c0005ff9:	53                   	push   ebx
c0005ffa:	83 ec 5c             	sub    esp,0x5c
c0005ffd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006001:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006005:	e8 c4 c4 ff ff       	call   c00024ce <mount_volume>
c000600a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000600e:	85 c0                	test   eax,eax
c0006010:	0f 85 9d 01 00 00    	jne    c00061b3 <f_getfree+0x1bf>
c0006016:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000601a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000601e:	89 02                	mov    DWORD PTR [edx],eax
c0006020:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006023:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006026:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006029:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000602d:	39 f2                	cmp    edx,esi
c000602f:	77 0b                	ja     c000603c <f_getfree+0x48>
c0006031:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006035:	89 10                	mov    DWORD PTR [eax],edx
c0006037:	e9 77 01 00 00       	jmp    c00061b3 <f_getfree+0x1bf>
c000603c:	8a 10                	mov    dl,BYTE PTR [eax]
c000603e:	80 fa 01             	cmp    dl,0x1
c0006041:	75 3a                	jne    c000607d <f_getfree+0x89>
c0006043:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006047:	be 02 00 00 00       	mov    esi,0x2
c000604c:	31 db                	xor    ebx,ebx
c000604e:	89 f2                	mov    edx,esi
c0006050:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006054:	e8 4b cd ff ff       	call   c0002da4 <get_fat>
c0006059:	83 f8 ff             	cmp    eax,0xffffffff
c000605c:	0f 84 28 01 00 00    	je     c000618a <f_getfree+0x196>
c0006062:	83 f8 01             	cmp    eax,0x1
c0006065:	0f 84 29 01 00 00    	je     c0006194 <f_getfree+0x1a0>
c000606b:	83 d3 00             	adc    ebx,0x0
c000606e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006072:	46                   	inc    esi
c0006073:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006076:	77 d6                	ja     c000604e <f_getfree+0x5a>
c0006078:	e9 25 01 00 00       	jmp    c00061a2 <f_getfree+0x1ae>
c000607d:	80 fa 04             	cmp    dl,0x4
c0006080:	0f 85 88 00 00 00    	jne    c000610e <f_getfree+0x11a>
c0006086:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006089:	31 ed                	xor    ebp,ebp
c000608b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000608e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006096:	31 db                	xor    ebx,ebx
c0006098:	85 ed                	test   ebp,ebp
c000609a:	75 3f                	jne    c00060db <f_getfree+0xe7>
c000609c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060a4:	83 c0 01             	add    eax,0x1
c00060a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060ab:	83 d2 00             	adc    edx,0x0
c00060ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060be:	e8 59 c1 ff ff       	call   c000221c <move_window>
c00060c3:	85 c0                	test   eax,eax
c00060c5:	0f 85 d3 00 00 00    	jne    c000619e <f_getfree+0x1aa>
c00060cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060df:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060e2:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060e6:	89 cf                	mov    edi,ecx
c00060e8:	85 f6                	test   esi,esi
c00060ea:	74 12                	je     c00060fe <f_getfree+0x10a>
c00060ec:	88 c1                	mov    cl,al
c00060ee:	83 e1 01             	and    ecx,0x1
c00060f1:	80 f9 01             	cmp    cl,0x1
c00060f4:	83 d3 00             	adc    ebx,0x0
c00060f7:	d0 e8                	shr    al,1
c00060f9:	4e                   	dec    esi
c00060fa:	39 fe                	cmp    esi,edi
c00060fc:	75 ea                	jne    c00060e8 <f_getfree+0xf4>
c00060fe:	45                   	inc    ebp
c00060ff:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006105:	85 f6                	test   esi,esi
c0006107:	75 8f                	jne    c0006098 <f_getfree+0xa4>
c0006109:	e9 94 00 00 00       	jmp    c00061a2 <f_getfree+0x1ae>
c000610e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006111:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006114:	31 f6                	xor    esi,esi
c0006116:	31 db                	xor    ebx,ebx
c0006118:	85 f6                	test   esi,esi
c000611a:	75 1b                	jne    c0006137 <f_getfree+0x143>
c000611c:	89 d7                	mov    edi,edx
c000611e:	89 cd                	mov    ebp,ecx
c0006120:	83 c7 01             	add    edi,0x1
c0006123:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006127:	83 d5 00             	adc    ebp,0x0
c000612a:	e8 ed c0 ff ff       	call   c000221c <move_window>
c000612f:	85 c0                	test   eax,eax
c0006131:	75 6b                	jne    c000619e <f_getfree+0x1aa>
c0006133:	89 fa                	mov    edx,edi
c0006135:	89 e9                	mov    ecx,ebp
c0006137:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000613b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000613f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006143:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006146:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000614a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000614e:	75 11                	jne    c0006161 <f_getfree+0x16d>
c0006150:	e8 e9 b8 ff ff       	call   c0001a3e <ld_word>
c0006155:	66 83 f8 01          	cmp    ax,0x1
c0006159:	83 d3 00             	adc    ebx,0x0
c000615c:	83 c6 02             	add    esi,0x2
c000615f:	eb 13                	jmp    c0006174 <f_getfree+0x180>
c0006161:	e8 e5 b8 ff ff       	call   c0001a4b <ld_dword>
c0006166:	25 ff ff ff 0f       	and    eax,0xfffffff
c000616b:	83 f8 01             	cmp    eax,0x1
c000616e:	83 d3 00             	adc    ebx,0x0
c0006171:	83 c6 04             	add    esi,0x4
c0006174:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000617a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000617e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006182:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006186:	75 90                	jne    c0006118 <f_getfree+0x124>
c0006188:	eb 18                	jmp    c00061a2 <f_getfree+0x1ae>
c000618a:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006192:	eb 0e                	jmp    c00061a2 <f_getfree+0x1ae>
c0006194:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000619c:	eb 04                	jmp    c00061a2 <f_getfree+0x1ae>
c000619e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061a2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061a6:	89 18                	mov    DWORD PTR [eax],ebx
c00061a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061ac:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061af:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061b7:	83 c4 5c             	add    esp,0x5c
c00061ba:	5b                   	pop    ebx
c00061bb:	5e                   	pop    esi
c00061bc:	5f                   	pop    edi
c00061bd:	5d                   	pop    ebp
c00061be:	c3                   	ret    

c00061bf <f_truncate>:
c00061bf:	56                   	push   esi
c00061c0:	53                   	push   ebx
c00061c1:	83 ec 14             	sub    esp,0x14
c00061c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061c8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061cc:	89 d8                	mov    eax,ebx
c00061ce:	e8 6e bf ff ff       	call   c0002141 <validate>
c00061d3:	89 c6                	mov    esi,eax
c00061d5:	85 c0                	test   eax,eax
c00061d7:	0f 85 d2 00 00 00    	jne    c00062af <f_truncate+0xf0>
c00061dd:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061e1:	85 f6                	test   esi,esi
c00061e3:	0f 85 c6 00 00 00    	jne    c00062af <f_truncate+0xf0>
c00061e9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061ed:	0f 84 b7 00 00 00    	je     c00062aa <f_truncate+0xeb>
c00061f3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061f6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061f9:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061fc:	89 d1                	mov    ecx,edx
c00061fe:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006201:	0f 83 a8 00 00 00    	jae    c00062af <f_truncate+0xf0>
c0006207:	09 c2                	or     edx,eax
c0006209:	75 15                	jne    c0006220 <f_truncate+0x61>
c000620b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000620e:	31 c9                	xor    ecx,ecx
c0006210:	89 d8                	mov    eax,ebx
c0006212:	e8 7a d0 ff ff       	call   c0003291 <remove_chain>
c0006217:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000621e:	eb 35                	jmp    c0006255 <f_truncate+0x96>
c0006220:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006223:	89 d8                	mov    eax,ebx
c0006225:	e8 7a cb ff ff       	call   c0002da4 <get_fat>
c000622a:	89 c2                	mov    edx,eax
c000622c:	b8 01 00 00 00       	mov    eax,0x1
c0006231:	83 fa ff             	cmp    edx,0xffffffff
c0006234:	74 1f                	je     c0006255 <f_truncate+0x96>
c0006236:	b8 02 00 00 00       	mov    eax,0x2
c000623b:	83 fa 01             	cmp    edx,0x1
c000623e:	74 15                	je     c0006255 <f_truncate+0x96>
c0006240:	31 c0                	xor    eax,eax
c0006242:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006246:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006249:	76 0a                	jbe    c0006255 <f_truncate+0x96>
c000624b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000624e:	89 d8                	mov    eax,ebx
c0006250:	e8 3c d0 ff ff       	call   c0003291 <remove_chain>
c0006255:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006258:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000625b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000625e:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006261:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006264:	83 ca 40             	or     edx,0x40
c0006267:	85 c0                	test   eax,eax
c0006269:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000626c:	75 35                	jne    c00062a3 <f_truncate+0xe4>
c000626e:	84 d2                	test   dl,dl
c0006270:	79 3d                	jns    c00062af <f_truncate+0xf0>
c0006272:	83 ec 0c             	sub    esp,0xc
c0006275:	8d 43 50             	lea    eax,[ebx+0x50]
c0006278:	6a 01                	push   0x1
c000627a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000627d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006280:	50                   	push   eax
c0006281:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006285:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006289:	50                   	push   eax
c000628a:	e8 7a b7 ff ff       	call   c0001a09 <disk_write>
c000628f:	83 c4 20             	add    esp,0x20
c0006292:	85 c0                	test   eax,eax
c0006294:	75 08                	jne    c000629e <f_truncate+0xdf>
c0006296:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000629a:	31 f6                	xor    esi,esi
c000629c:	eb 11                	jmp    c00062af <f_truncate+0xf0>
c000629e:	b8 01 00 00 00       	mov    eax,0x1
c00062a3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062a6:	89 c6                	mov    esi,eax
c00062a8:	eb 05                	jmp    c00062af <f_truncate+0xf0>
c00062aa:	be 07 00 00 00       	mov    esi,0x7
c00062af:	89 f0                	mov    eax,esi
c00062b1:	83 c4 14             	add    esp,0x14
c00062b4:	5b                   	pop    ebx
c00062b5:	5e                   	pop    esi
c00062b6:	c3                   	ret    

c00062b7 <f_unlink>:
c00062b7:	56                   	push   esi
c00062b8:	b9 02 00 00 00       	mov    ecx,0x2
c00062bd:	53                   	push   ebx
c00062be:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062c4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062c8:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062cf:	e8 fa c1 ff ff       	call   c00024ce <mount_volume>
c00062d4:	85 c0                	test   eax,eax
c00062d6:	0f 85 55 01 00 00    	jne    c0006431 <f_unlink+0x17a>
c00062dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062e0:	83 ec 0c             	sub    esp,0xc
c00062e3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062e7:	68 60 04 00 00       	push   0x460
c00062ec:	e8 80 1f 00 00       	call   c0008271 <ff_memalloc>
c00062f1:	83 c4 10             	add    esp,0x10
c00062f4:	89 c3                	mov    ebx,eax
c00062f6:	b8 11 00 00 00       	mov    eax,0x11
c00062fb:	85 db                	test   ebx,ebx
c00062fd:	0f 84 2e 01 00 00    	je     c0006431 <f_unlink+0x17a>
c0006303:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006307:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000630d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006310:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006313:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000631a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000631e:	e8 21 e9 ff ff       	call   c0004c44 <follow_path>
c0006323:	85 c0                	test   eax,eax
c0006325:	0f 85 f2 00 00 00    	jne    c000641d <f_unlink+0x166>
c000632b:	b8 06 00 00 00       	mov    eax,0x6
c0006330:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006338:	0f 88 df 00 00 00    	js     c000641d <f_unlink+0x166>
c000633e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006343:	74 0a                	je     c000634f <f_unlink+0x98>
c0006345:	b8 07 00 00 00       	mov    eax,0x7
c000634a:	e9 ce 00 00 00       	jmp    c000641d <f_unlink+0x166>
c000634f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006353:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006357:	8a 02                	mov    al,BYTE PTR [edx]
c0006359:	3c 04                	cmp    al,0x4
c000635b:	75 12                	jne    c000636f <f_unlink+0xb8>
c000635d:	8d 42 10             	lea    eax,[edx+0x10]
c0006360:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006364:	e8 a1 e8 ff ff       	call   c0004c0a <init_alloc_info.isra.2>
c0006369:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000636d:	eb 0e                	jmp    c000637d <f_unlink+0xc6>
c000636f:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006376:	e8 3e e8 ff ff       	call   c0004bb9 <ld_clust.isra.0>
c000637b:	89 c6                	mov    esi,eax
c000637d:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006382:	75 12                	jne    c0006396 <f_unlink+0xdf>
c0006384:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006388:	e8 94 d6 ff ff       	call   c0003a21 <dir_remove>
c000638d:	85 c0                	test   eax,eax
c000638f:	74 6c                	je     c00063fd <f_unlink+0x146>
c0006391:	e9 87 00 00 00       	jmp    c000641d <f_unlink+0x166>
c0006396:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000639a:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063a1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063a8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063ab:	75 21                	jne    c00063ce <f_unlink+0x117>
c00063ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063b5:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063bc:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063c3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063c7:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063ce:	31 d2                	xor    edx,edx
c00063d0:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063d7:	e8 be cb ff ff       	call   c0002f9a <dir_sdi>
c00063dc:	85 c0                	test   eax,eax
c00063de:	75 3d                	jne    c000641d <f_unlink+0x166>
c00063e0:	31 d2                	xor    edx,edx
c00063e2:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063e9:	e8 bc d3 ff ff       	call   c00037aa <dir_read>
c00063ee:	85 c0                	test   eax,eax
c00063f0:	0f 84 4f ff ff ff    	je     c0006345 <f_unlink+0x8e>
c00063f6:	83 f8 04             	cmp    eax,0x4
c00063f9:	75 22                	jne    c000641d <f_unlink+0x166>
c00063fb:	eb 87                	jmp    c0006384 <f_unlink+0xcd>
c00063fd:	85 f6                	test   esi,esi
c00063ff:	75 0b                	jne    c000640c <f_unlink+0x155>
c0006401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006405:	e8 3d df ff ff       	call   c0004347 <sync_fs>
c000640a:	eb 11                	jmp    c000641d <f_unlink+0x166>
c000640c:	31 c9                	xor    ecx,ecx
c000640e:	89 f2                	mov    edx,esi
c0006410:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006414:	e8 78 ce ff ff       	call   c0003291 <remove_chain>
c0006419:	85 c0                	test   eax,eax
c000641b:	74 e4                	je     c0006401 <f_unlink+0x14a>
c000641d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006421:	83 ec 0c             	sub    esp,0xc
c0006424:	53                   	push   ebx
c0006425:	e8 5d 1e 00 00       	call   c0008287 <ff_memfree>
c000642a:	83 c4 10             	add    esp,0x10
c000642d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006431:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006437:	5b                   	pop    ebx
c0006438:	5e                   	pop    esi
c0006439:	c3                   	ret    

c000643a <f_mkdir>:
c000643a:	57                   	push   edi
c000643b:	b9 02 00 00 00       	mov    ecx,0x2
c0006440:	56                   	push   esi
c0006441:	53                   	push   ebx
c0006442:	83 c4 80             	add    esp,0xffffff80
c0006445:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006449:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006450:	e8 79 c0 ff ff       	call   c00024ce <mount_volume>
c0006455:	89 c3                	mov    ebx,eax
c0006457:	85 c0                	test   eax,eax
c0006459:	0f 85 fe 01 00 00    	jne    c000665d <f_mkdir+0x223>
c000645f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006463:	bb 11 00 00 00       	mov    ebx,0x11
c0006468:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000646c:	83 ec 0c             	sub    esp,0xc
c000646f:	68 60 04 00 00       	push   0x460
c0006474:	e8 f8 1d 00 00       	call   c0008271 <ff_memalloc>
c0006479:	83 c4 10             	add    esp,0x10
c000647c:	89 c7                	mov    edi,eax
c000647e:	85 c0                	test   eax,eax
c0006480:	0f 84 d7 01 00 00    	je     c000665d <f_mkdir+0x223>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006490:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006493:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006496:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000649d:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064a1:	e8 9e e7 ff ff       	call   c0004c44 <follow_path>
c00064a6:	89 c3                	mov    ebx,eax
c00064a8:	85 c0                	test   eax,eax
c00064aa:	74 3e                	je     c00064ea <f_mkdir+0xb0>
c00064ac:	83 f8 04             	cmp    eax,0x4
c00064af:	75 3e                	jne    c00064ef <f_mkdir+0xb5>
c00064b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b5:	31 d2                	xor    edx,edx
c00064b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064bf:	e8 ce cb ff ff       	call   c0003092 <create_chain>
c00064c4:	89 c6                	mov    esi,eax
c00064c6:	85 c0                	test   eax,eax
c00064c8:	74 0c                	je     c00064d6 <f_mkdir+0x9c>
c00064ca:	bb 02 00 00 00       	mov    ebx,0x2
c00064cf:	83 f8 01             	cmp    eax,0x1
c00064d2:	74 07                	je     c00064db <f_mkdir+0xa1>
c00064d4:	eb 2a                	jmp    c0006500 <f_mkdir+0xc6>
c00064d6:	bb 07 00 00 00       	mov    ebx,0x7
c00064db:	31 c9                	xor    ecx,ecx
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064e3:	e8 a9 cd ff ff       	call   c0003291 <remove_chain>
c00064e8:	eb 05                	jmp    c00064ef <f_mkdir+0xb5>
c00064ea:	bb 08 00 00 00       	mov    ebx,0x8
c00064ef:	83 ec 0c             	sub    esp,0xc
c00064f2:	57                   	push   edi
c00064f3:	e8 8f 1d 00 00       	call   c0008287 <ff_memfree>
c00064f8:	83 c4 10             	add    esp,0x10
c00064fb:	e9 5d 01 00 00       	jmp    c000665d <f_mkdir+0x223>
c0006500:	bb 01 00 00 00       	mov    ebx,0x1
c0006505:	83 f8 ff             	cmp    eax,0xffffffff
c0006508:	74 d1                	je     c00064db <f_mkdir+0xa1>
c000650a:	89 f2                	mov    edx,esi
c000650c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006510:	e8 c4 ce ff ff       	call   c00033d9 <dir_clear>
c0006515:	89 c3                	mov    ebx,eax
c0006517:	85 c0                	test   eax,eax
c0006519:	75 c0                	jne    c00064db <f_mkdir+0xa1>
c000651b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006522:	74 69                	je     c000658d <f_mkdir+0x153>
c0006524:	b9 0b 00 00 00       	mov    ecx,0xb
c0006529:	83 c0 54             	add    eax,0x54
c000652c:	ba 20 00 00 00       	mov    edx,0x20
c0006531:	e8 9c b5 ff ff       	call   c0001ad2 <mem_set>
c0006536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653a:	ba 00 00 21 50       	mov    edx,0x50210000
c000653f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006543:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006547:	83 c0 6a             	add    eax,0x6a
c000654a:	e8 65 b5 ff ff       	call   c0001ab4 <st_dword>
c000654f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006553:	89 f1                	mov    ecx,esi
c0006555:	8d 50 54             	lea    edx,[eax+0x54]
c0006558:	e8 85 e6 ff ff       	call   c0004be2 <st_clust.isra.1>
c000655d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006561:	b9 20 00 00 00       	mov    ecx,0x20
c0006566:	8d 50 54             	lea    edx,[eax+0x54]
c0006569:	83 c0 74             	add    eax,0x74
c000656c:	e8 4c b5 ff ff       	call   c0001abd <mem_cpy>
c0006571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006575:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006579:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000657d:	8d 50 74             	lea    edx,[eax+0x74]
c0006580:	e8 5d e6 ff ff       	call   c0004be2 <st_clust.isra.1>
c0006585:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006589:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000658d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006591:	e8 2f db ff ff       	call   c00040c5 <dir_register>
c0006596:	89 c3                	mov    ebx,eax
c0006598:	85 c0                	test   eax,eax
c000659a:	0f 85 3b ff ff ff    	jne    c00064db <f_mkdir+0xa1>
c00065a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065a7:	75 74                	jne    c000661d <f_mkdir+0x1e3>
c00065a9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ac:	ba 00 00 21 50       	mov    edx,0x50210000
c00065b1:	83 c0 0c             	add    eax,0xc
c00065b4:	e8 fb b4 ff ff       	call   c0001ab4 <st_dword>
c00065b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bd:	89 f2                	mov    edx,esi
c00065bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c2:	83 c0 34             	add    eax,0x34
c00065c5:	e8 ea b4 ff ff       	call   c0001ab4 <st_dword>
c00065ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ce:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d5:	c1 e2 09             	shl    edx,0x9
c00065d8:	83 c0 38             	add    eax,0x38
c00065db:	e8 d4 b4 ff ff       	call   c0001ab4 <st_dword>
c00065e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e4:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065eb:	c1 e2 09             	shl    edx,0x9
c00065ee:	83 c0 28             	add    eax,0x28
c00065f1:	e8 be b4 ff ff       	call   c0001ab4 <st_dword>
c00065f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065fa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065fd:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006601:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006604:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006608:	8d 44 24 34          	lea    eax,[esp+0x34]
c000660c:	e8 8b d3 ff ff       	call   c000399c <store_xdir>
c0006611:	89 c3                	mov    ebx,eax
c0006613:	85 c0                	test   eax,eax
c0006615:	0f 85 d4 fe ff ff    	jne    c00064ef <f_mkdir+0xb5>
c000661b:	eb 30                	jmp    c000664d <f_mkdir+0x213>
c000661d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006621:	ba 00 00 21 50       	mov    edx,0x50210000
c0006626:	83 c0 16             	add    eax,0x16
c0006629:	e8 86 b4 ff ff       	call   c0001ab4 <st_dword>
c000662e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006632:	89 f1                	mov    ecx,esi
c0006634:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006638:	e8 a5 e5 ff ff       	call   c0004be2 <st_clust.isra.1>
c000663d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006641:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006649:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000664d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006651:	e8 f1 dc ff ff       	call   c0004347 <sync_fs>
c0006656:	89 c3                	mov    ebx,eax
c0006658:	e9 92 fe ff ff       	jmp    c00064ef <f_mkdir+0xb5>
c000665d:	83 ec 80             	sub    esp,0xffffff80
c0006660:	89 d8                	mov    eax,ebx
c0006662:	5b                   	pop    ebx
c0006663:	5e                   	pop    esi
c0006664:	5f                   	pop    edi
c0006665:	c3                   	ret    

c0006666 <f_rename>:
c0006666:	55                   	push   ebp
c0006667:	57                   	push   edi
c0006668:	56                   	push   esi
c0006669:	53                   	push   ebx
c000666a:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006670:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006677:	e8 a4 b9 ff ff       	call   c0002020 <get_ldnumber>
c000667c:	b9 02 00 00 00       	mov    ecx,0x2
c0006681:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006685:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000668c:	e8 3d be ff ff       	call   c00024ce <mount_volume>
c0006691:	85 c0                	test   eax,eax
c0006693:	0f 85 b5 02 00 00    	jne    c000694e <f_rename+0x2e8>
c0006699:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000669d:	83 ec 0c             	sub    esp,0xc
c00066a0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066a4:	68 60 04 00 00       	push   0x460
c00066a9:	e8 c3 1b 00 00       	call   c0008271 <ff_memalloc>
c00066ae:	83 c4 10             	add    esp,0x10
c00066b1:	89 c3                	mov    ebx,eax
c00066b3:	b8 11 00 00 00       	mov    eax,0x11
c00066b8:	85 db                	test   ebx,ebx
c00066ba:	0f 84 8e 02 00 00    	je     c000694e <f_rename+0x2e8>
c00066c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c4:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066ca:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066cd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066d0:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066d7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066db:	e8 64 e5 ff ff       	call   c0004c44 <follow_path>
c00066e0:	85 c0                	test   eax,eax
c00066e2:	0f 85 52 02 00 00    	jne    c000693a <f_rename+0x2d4>
c00066e8:	b8 06 00 00 00       	mov    eax,0x6
c00066ed:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066f5:	0f 85 3f 02 00 00    	jne    c000693a <f_rename+0x2d4>
c00066fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066ff:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006702:	0f 85 05 01 00 00    	jne    c000680d <f_rename+0x1a7>
c0006708:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000670b:	b9 40 00 00 00       	mov    ecx,0x40
c0006710:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006714:	e8 a4 b3 ff ff       	call   c0001abd <mem_cpy>
c0006719:	b9 4c 00 00 00       	mov    ecx,0x4c
c000671e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006722:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006729:	e8 8f b3 ff ff       	call   c0001abd <mem_cpy>
c000672e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006735:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673c:	e8 03 e5 ff ff       	call   c0004c44 <follow_path>
c0006741:	85 c0                	test   eax,eax
c0006743:	75 29                	jne    c000676e <f_rename+0x108>
c0006745:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006749:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006750:	74 0a                	je     c000675c <f_rename+0xf6>
c0006752:	b8 08 00 00 00       	mov    eax,0x8
c0006757:	e9 de 01 00 00       	jmp    c000693a <f_rename+0x2d4>
c000675c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006763:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000676a:	75 e6                	jne    c0006752 <f_rename+0xec>
c000676c:	eb 09                	jmp    c0006777 <f_rename+0x111>
c000676e:	83 f8 04             	cmp    eax,0x4
c0006771:	0f 85 c3 01 00 00    	jne    c000693a <f_rename+0x2d4>
c0006777:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000677e:	e8 42 d9 ff ff       	call   c00040c5 <dir_register>
c0006783:	85 c0                	test   eax,eax
c0006785:	0f 85 af 01 00 00    	jne    c000693a <f_rename+0x2d4>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006792:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006795:	89 c5                	mov    ebp,eax
c0006797:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000679a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000679e:	8d 46 24             	lea    eax,[esi+0x24]
c00067a1:	e8 98 b2 ff ff       	call   c0001a3e <ld_word>
c00067a6:	b9 40 00 00 00       	mov    ecx,0x40
c00067ab:	89 c7                	mov    edi,eax
c00067ad:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067b1:	89 f0                	mov    eax,esi
c00067b3:	e8 05 b3 ff ff       	call   c0001abd <mem_cpy>
c00067b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067bc:	89 e9                	mov    ecx,ebp
c00067be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067c1:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067c4:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067cc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067cf:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067d2:	0f b7 d7             	movzx  edx,di
c00067d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d8:	83 c0 24             	add    eax,0x24
c00067db:	e8 d0 b2 ff ff       	call   c0001ab0 <st_word>
c00067e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e7:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067ea:	a8 10                	test   al,0x10
c00067ec:	75 06                	jne    c00067f4 <f_rename+0x18e>
c00067ee:	83 c8 20             	or     eax,0x20
c00067f1:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067f4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067fb:	e8 9c d1 ff ff       	call   c000399c <store_xdir>
c0006800:	85 c0                	test   eax,eax
c0006802:	0f 84 1c 01 00 00    	je     c0006924 <f_rename+0x2be>
c0006808:	e9 2d 01 00 00       	jmp    c000693a <f_rename+0x2d4>
c000680d:	b9 20 00 00 00       	mov    ecx,0x20
c0006812:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006819:	8d 44 24 18          	lea    eax,[esp+0x18]
c000681d:	e8 9b b2 ff ff       	call   c0001abd <mem_cpy>
c0006822:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006827:	8d 54 24 58          	lea    edx,[esp+0x58]
c000682b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006832:	e8 86 b2 ff ff       	call   c0001abd <mem_cpy>
c0006837:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000683e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006845:	e8 fa e3 ff ff       	call   c0004c44 <follow_path>
c000684a:	85 c0                	test   eax,eax
c000684c:	75 27                	jne    c0006875 <f_rename+0x20f>
c000684e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006852:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006859:	0f 85 f3 fe ff ff    	jne    c0006752 <f_rename+0xec>
c000685f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006866:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000686d:	0f 85 df fe ff ff    	jne    c0006752 <f_rename+0xec>
c0006873:	eb 09                	jmp    c000687e <f_rename+0x218>
c0006875:	83 f8 04             	cmp    eax,0x4
c0006878:	0f 85 bc 00 00 00    	jne    c000693a <f_rename+0x2d4>
c000687e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006885:	e8 3b d8 ff ff       	call   c00040c5 <dir_register>
c000688a:	85 c0                	test   eax,eax
c000688c:	0f 85 a8 00 00 00    	jne    c000693a <f_rename+0x2d4>
c0006892:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006899:	b9 13 00 00 00       	mov    ecx,0x13
c000689e:	8d 46 0d             	lea    eax,[esi+0xd]
c00068a1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068a5:	e8 13 b2 ff ff       	call   c0001abd <mem_cpy>
c00068aa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068ae:	a8 10                	test   al,0x10
c00068b0:	75 03                	jne    c00068b5 <f_rename+0x24f>
c00068b2:	83 c8 20             	or     eax,0x20
c00068b5:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068c0:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068c4:	74 5e                	je     c0006924 <f_rename+0x2be>
c00068c6:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068cd:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068d1:	74 51                	je     c0006924 <f_rename+0x2be>
c00068d3:	89 f2                	mov    edx,esi
c00068d5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068d9:	8a 07                	mov    al,BYTE PTR [edi]
c00068db:	e8 d9 e2 ff ff       	call   c0004bb9 <ld_clust.isra.0>
c00068e0:	89 c2                	mov    edx,eax
c00068e2:	89 f8                	mov    eax,edi
c00068e4:	e8 ee b3 ff ff       	call   c0001cd7 <clst2sect>
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	89 d1                	mov    ecx,edx
c00068ed:	b8 02 00 00 00       	mov    eax,0x2
c00068f2:	09 f2                	or     edx,esi
c00068f4:	74 44                	je     c000693a <f_rename+0x2d4>
c00068f6:	89 f2                	mov    edx,esi
c00068f8:	89 f8                	mov    eax,edi
c00068fa:	e8 1d b9 ff ff       	call   c000221c <move_window>
c00068ff:	85 c0                	test   eax,eax
c0006901:	75 37                	jne    c000693a <f_rename+0x2d4>
c0006903:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006907:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000690b:	75 17                	jne    c0006924 <f_rename+0x2be>
c000690d:	8d 50 74             	lea    edx,[eax+0x74]
c0006910:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006917:	e8 c6 e2 ff ff       	call   c0004be2 <st_clust.isra.1>
c000691c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006920:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006924:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006928:	e8 f4 d0 ff ff       	call   c0003a21 <dir_remove>
c000692d:	85 c0                	test   eax,eax
c000692f:	75 09                	jne    c000693a <f_rename+0x2d4>
c0006931:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006935:	e8 0d da ff ff       	call   c0004347 <sync_fs>
c000693a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000693e:	83 ec 0c             	sub    esp,0xc
c0006941:	53                   	push   ebx
c0006942:	e8 40 19 00 00       	call   c0008287 <ff_memfree>
c0006947:	83 c4 10             	add    esp,0x10
c000694a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000694e:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006954:	5b                   	pop    ebx
c0006955:	5e                   	pop    esi
c0006956:	5f                   	pop    edi
c0006957:	5d                   	pop    ebp
c0006958:	c3                   	ret    

c0006959 <f_chmod>:
c0006959:	57                   	push   edi
c000695a:	b9 02 00 00 00       	mov    ecx,0x2
c000695f:	56                   	push   esi
c0006960:	53                   	push   ebx
c0006961:	83 ec 60             	sub    esp,0x60
c0006964:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006968:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000696c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006970:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006974:	e8 55 bb ff ff       	call   c00024ce <mount_volume>
c0006979:	85 c0                	test   eax,eax
c000697b:	0f 85 af 00 00 00    	jne    c0006a30 <f_chmod+0xd7>
c0006981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006985:	83 ec 0c             	sub    esp,0xc
c0006988:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000698c:	68 60 04 00 00       	push   0x460
c0006991:	e8 db 18 00 00       	call   c0008271 <ff_memalloc>
c0006996:	83 c4 10             	add    esp,0x10
c0006999:	89 c6                	mov    esi,eax
c000699b:	b8 11 00 00 00       	mov    eax,0x11
c00069a0:	85 f6                	test   esi,esi
c00069a2:	0f 84 88 00 00 00    	je     c0006a30 <f_chmod+0xd7>
c00069a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ac:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069b2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069b5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069b8:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c0:	e8 7f e2 ff ff       	call   c0004c44 <follow_path>
c00069c5:	85 c0                	test   eax,eax
c00069c7:	75 53                	jne    c0006a1c <f_chmod+0xc3>
c00069c9:	b8 06 00 00 00       	mov    eax,0x6
c00069ce:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069d3:	75 47                	jne    c0006a1c <f_chmod+0xc3>
c00069d5:	89 f9                	mov    ecx,edi
c00069d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069db:	83 e1 27             	and    ecx,0x27
c00069de:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069e1:	75 1d                	jne    c0006a00 <f_chmod+0xa7>
c00069e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e6:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069e9:	21 cb                	and    ebx,ecx
c00069eb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ee:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069f1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069f5:	e8 a2 cf ff ff       	call   c000399c <store_xdir>
c00069fa:	85 c0                	test   eax,eax
c00069fc:	75 1e                	jne    c0006a1c <f_chmod+0xc3>
c00069fe:	eb 13                	jmp    c0006a13 <f_chmod+0xba>
c0006a00:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a04:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a07:	21 cb                	and    ebx,ecx
c0006a09:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a0c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a0f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a17:	e8 2b d9 ff ff       	call   c0004347 <sync_fs>
c0006a1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a20:	83 ec 0c             	sub    esp,0xc
c0006a23:	56                   	push   esi
c0006a24:	e8 5e 18 00 00       	call   c0008287 <ff_memfree>
c0006a29:	83 c4 10             	add    esp,0x10
c0006a2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a30:	83 c4 60             	add    esp,0x60
c0006a33:	5b                   	pop    ebx
c0006a34:	5e                   	pop    esi
c0006a35:	5f                   	pop    edi
c0006a36:	c3                   	ret    

c0006a37 <f_utime>:
c0006a37:	56                   	push   esi
c0006a38:	b9 02 00 00 00       	mov    ecx,0x2
c0006a3d:	53                   	push   ebx
c0006a3e:	83 ec 64             	sub    esp,0x64
c0006a41:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a45:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a49:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a4d:	e8 7c ba ff ff       	call   c00024ce <mount_volume>
c0006a52:	85 c0                	test   eax,eax
c0006a54:	0f 85 b5 00 00 00    	jne    c0006b0f <f_utime+0xd8>
c0006a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a5e:	83 ec 0c             	sub    esp,0xc
c0006a61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a65:	68 60 04 00 00       	push   0x460
c0006a6a:	e8 02 18 00 00       	call   c0008271 <ff_memalloc>
c0006a6f:	83 c4 10             	add    esp,0x10
c0006a72:	89 c3                	mov    ebx,eax
c0006a74:	b8 11 00 00 00       	mov    eax,0x11
c0006a79:	85 db                	test   ebx,ebx
c0006a7b:	0f 84 8e 00 00 00    	je     c0006b0f <f_utime+0xd8>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a8b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a8e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a91:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a95:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a99:	e8 a6 e1 ff ff       	call   c0004c44 <follow_path>
c0006a9e:	85 c0                	test   eax,eax
c0006aa0:	75 59                	jne    c0006afb <f_utime+0xc4>
c0006aa2:	b8 06 00 00 00       	mov    eax,0x6
c0006aa7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006aac:	75 4d                	jne    c0006afb <f_utime+0xc4>
c0006aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab2:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ab6:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006aba:	c1 e2 10             	shl    edx,0x10
c0006abd:	09 ca                	or     edx,ecx
c0006abf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ac2:	75 1a                	jne    c0006ade <f_utime+0xa7>
c0006ac4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ac7:	83 c0 0c             	add    eax,0xc
c0006aca:	e8 e5 af ff ff       	call   c0001ab4 <st_dword>
c0006acf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad3:	e8 c4 ce ff ff       	call   c000399c <store_xdir>
c0006ad8:	85 c0                	test   eax,eax
c0006ada:	75 1f                	jne    c0006afb <f_utime+0xc4>
c0006adc:	eb 14                	jmp    c0006af2 <f_utime+0xbb>
c0006ade:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ae2:	83 c0 16             	add    eax,0x16
c0006ae5:	e8 ca af ff ff       	call   c0001ab4 <st_dword>
c0006aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aee:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af6:	e8 4c d8 ff ff       	call   c0004347 <sync_fs>
c0006afb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006aff:	83 ec 0c             	sub    esp,0xc
c0006b02:	53                   	push   ebx
c0006b03:	e8 7f 17 00 00       	call   c0008287 <ff_memfree>
c0006b08:	83 c4 10             	add    esp,0x10
c0006b0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b0f:	83 c4 64             	add    esp,0x64
c0006b12:	5b                   	pop    ebx
c0006b13:	5e                   	pop    esi
c0006b14:	c3                   	ret    

c0006b15 <f_getlabel>:
c0006b15:	55                   	push   ebp
c0006b16:	31 c9                	xor    ecx,ecx
c0006b18:	57                   	push   edi
c0006b19:	56                   	push   esi
c0006b1a:	53                   	push   ebx
c0006b1b:	83 ec 6c             	sub    esp,0x6c
c0006b1e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b22:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b29:	e8 a0 b9 ff ff       	call   c00024ce <mount_volume>
c0006b2e:	89 c6                	mov    esi,eax
c0006b30:	85 c0                	test   eax,eax
c0006b32:	0f 85 c1 01 00 00    	jne    c0006cf9 <f_getlabel+0x1e4>
c0006b38:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b40:	0f 84 5f 01 00 00    	je     c0006ca5 <f_getlabel+0x190>
c0006b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b4a:	31 d2                	xor    edx,edx
c0006b4c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b50:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b58:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b5c:	e8 39 c4 ff ff       	call   c0002f9a <dir_sdi>
c0006b61:	85 c0                	test   eax,eax
c0006b63:	0f 85 2d 01 00 00    	jne    c0006c96 <f_getlabel+0x181>
c0006b69:	ba 01 00 00 00       	mov    edx,0x1
c0006b6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b72:	e8 33 cc ff ff       	call   c00037aa <dir_read>
c0006b77:	85 c0                	test   eax,eax
c0006b79:	0f 85 17 01 00 00    	jne    c0006c96 <f_getlabel+0x181>
c0006b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b83:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b86:	74 09                	je     c0006b91 <f_getlabel+0x7c>
c0006b88:	31 db                	xor    ebx,ebx
c0006b8a:	31 c9                	xor    ecx,ecx
c0006b8c:	e9 c8 00 00 00       	jmp    c0006c59 <f_getlabel+0x144>
c0006b91:	31 ed                	xor    ebp,ebp
c0006b93:	31 db                	xor    ebx,ebx
c0006b95:	31 ff                	xor    edi,edi
c0006b97:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b9b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b9f:	39 fa                	cmp    edx,edi
c0006ba1:	76 4b                	jbe    c0006bee <f_getlabel+0xd9>
c0006ba3:	47                   	inc    edi
c0006ba4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006ba7:	01 d0                	add    eax,edx
c0006ba9:	e8 90 ae ff ff       	call   c0001a3e <ld_word>
c0006bae:	66 85 ed             	test   bp,bp
c0006bb1:	75 0d                	jne    c0006bc0 <f_getlabel+0xab>
c0006bb3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bb9:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bbe:	76 28                	jbe    c0006be8 <f_getlabel+0xd3>
c0006bc0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bc7:	89 e9                	mov    ecx,ebp
c0006bc9:	01 da                	add    edx,ebx
c0006bcb:	c1 e1 10             	shl    ecx,0x10
c0006bce:	0f b7 c0             	movzx  eax,ax
c0006bd1:	09 c8                	or     eax,ecx
c0006bd3:	b9 04 00 00 00       	mov    ecx,0x4
c0006bd8:	e8 01 b0 ff ff       	call   c0001bde <put_utf>
c0006bdd:	84 c0                	test   al,al
c0006bdf:	74 0b                	je     c0006bec <f_getlabel+0xd7>
c0006be1:	0f b6 c0             	movzx  eax,al
c0006be4:	01 c3                	add    ebx,eax
c0006be6:	31 c0                	xor    eax,eax
c0006be8:	89 c5                	mov    ebp,eax
c0006bea:	eb ab                	jmp    c0006b97 <f_getlabel+0x82>
c0006bec:	31 db                	xor    ebx,ebx
c0006bee:	66 85 ed             	test   bp,bp
c0006bf1:	74 02                	je     c0006bf5 <f_getlabel+0xe0>
c0006bf3:	31 db                	xor    ebx,ebx
c0006bf5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bfc:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c00:	e9 a0 00 00 00       	jmp    c0006ca5 <f_getlabel+0x190>
c0006c05:	83 ff 0b             	cmp    edi,0xb
c0006c08:	74 11                	je     c0006c1b <f_getlabel+0x106>
c0006c0a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c13:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c16:	c1 e0 08             	shl    eax,0x8
c0006c19:	09 c2                	or     edx,eax
c0006c1b:	0f b7 d2             	movzx  edx,dx
c0006c1e:	50                   	push   eax
c0006c1f:	50                   	push   eax
c0006c20:	68 b5 01 00 00       	push   0x1b5
c0006c25:	52                   	push   edx
c0006c26:	e8 03 17 00 00       	call   c000832e <ff_oem2uni>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	66 85 c0             	test   ax,ax
c0006c31:	74 46                	je     c0006c79 <f_getlabel+0x164>
c0006c33:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c3a:	0f b7 c0             	movzx  eax,ax
c0006c3d:	01 da                	add    edx,ebx
c0006c3f:	b9 04 00 00 00       	mov    ecx,0x4
c0006c44:	e8 95 af ff ff       	call   c0001bde <put_utf>
c0006c49:	84 c0                	test   al,al
c0006c4b:	74 2c                	je     c0006c79 <f_getlabel+0x164>
c0006c4d:	0f b6 c0             	movzx  eax,al
c0006c50:	01 c3                	add    ebx,eax
c0006c52:	83 ff 0b             	cmp    edi,0xb
c0006c55:	74 24                	je     c0006c7b <f_getlabel+0x166>
c0006c57:	89 f9                	mov    ecx,edi
c0006c59:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c5d:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c60:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c65:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c6e:	e8 9f ae ff ff       	call   c0001b12 <dbc_1st>
c0006c73:	85 c0                	test   eax,eax
c0006c75:	74 a4                	je     c0006c1b <f_getlabel+0x106>
c0006c77:	eb 8c                	jmp    c0006c05 <f_getlabel+0xf0>
c0006c79:	31 db                	xor    ebx,ebx
c0006c7b:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c82:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c85:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c8c:	74 17                	je     c0006ca5 <f_getlabel+0x190>
c0006c8e:	4b                   	dec    ebx
c0006c8f:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c92:	74 ee                	je     c0006c82 <f_getlabel+0x16d>
c0006c94:	eb 0f                	jmp    c0006ca5 <f_getlabel+0x190>
c0006c96:	83 f8 04             	cmp    eax,0x4
c0006c99:	75 5c                	jne    c0006cf7 <f_getlabel+0x1e2>
c0006c9b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ca2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ca5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cad:	74 4a                	je     c0006cf9 <f_getlabel+0x1e4>
c0006caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb3:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cb6:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cb9:	e8 5e b5 ff ff       	call   c000221c <move_window>
c0006cbe:	89 c6                	mov    esi,eax
c0006cc0:	85 c0                	test   eax,eax
c0006cc2:	75 35                	jne    c0006cf9 <f_getlabel+0x1e4>
c0006cc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cc8:	b8 43 00 00 00       	mov    eax,0x43
c0006ccd:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ccf:	80 f9 03             	cmp    cl,0x3
c0006cd2:	74 0f                	je     c0006ce3 <f_getlabel+0x1ce>
c0006cd4:	31 c0                	xor    eax,eax
c0006cd6:	80 f9 04             	cmp    cl,0x4
c0006cd9:	0f 94 c0             	sete   al
c0006cdc:	48                   	dec    eax
c0006cdd:	83 e0 c3             	and    eax,0xffffffc3
c0006ce0:	83 c0 64             	add    eax,0x64
c0006ce3:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ce7:	e8 5f ad ff ff       	call   c0001a4b <ld_dword>
c0006cec:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cf3:	89 07                	mov    DWORD PTR [edi],eax
c0006cf5:	eb 02                	jmp    c0006cf9 <f_getlabel+0x1e4>
c0006cf7:	89 c6                	mov    esi,eax
c0006cf9:	83 c4 6c             	add    esp,0x6c
c0006cfc:	89 f0                	mov    eax,esi
c0006cfe:	5b                   	pop    ebx
c0006cff:	5e                   	pop    esi
c0006d00:	5f                   	pop    edi
c0006d01:	5d                   	pop    ebp
c0006d02:	c3                   	ret    

c0006d03 <f_setlabel>:
c0006d03:	56                   	push   esi
c0006d04:	b9 02 00 00 00       	mov    ecx,0x2
c0006d09:	53                   	push   ebx
c0006d0a:	83 ec 74             	sub    esp,0x74
c0006d0d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d11:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d18:	e8 b1 b7 ff ff       	call   c00024ce <mount_volume>
c0006d1d:	89 c6                	mov    esi,eax
c0006d1f:	85 c0                	test   eax,eax
c0006d21:	0f 85 41 02 00 00    	jne    c0006f68 <f_setlabel+0x265>
c0006d27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d2b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d2e:	0f 85 8e 00 00 00    	jne    c0006dc2 <f_setlabel+0xbf>
c0006d34:	b9 16 00 00 00       	mov    ecx,0x16
c0006d39:	31 d2                	xor    edx,edx
c0006d3b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d3f:	31 db                	xor    ebx,ebx
c0006d41:	e8 8c ad ff ff       	call   c0001ad2 <mem_set>
c0006d46:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d4d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d50:	0f 86 0a 01 00 00    	jbe    c0006e60 <f_setlabel+0x15d>
c0006d56:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d5d:	e8 b6 ad ff ff       	call   c0001b18 <tchar2uni>
c0006d62:	89 c6                	mov    esi,eax
c0006d64:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d69:	76 2a                	jbe    c0006d95 <f_setlabel+0x92>
c0006d6b:	83 f8 ff             	cmp    eax,0xffffffff
c0006d6e:	74 05                	je     c0006d75 <f_setlabel+0x72>
c0006d70:	83 fb 09             	cmp    ebx,0x9
c0006d73:	76 0a                	jbe    c0006d7f <f_setlabel+0x7c>
c0006d75:	be 06 00 00 00       	mov    esi,0x6
c0006d7a:	e9 e9 01 00 00       	jmp    c0006f68 <f_setlabel+0x265>
c0006d7f:	89 c2                	mov    edx,eax
c0006d81:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d85:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d88:	c1 ea 10             	shr    edx,0x10
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 1d ad ff ff       	call   c0001ab0 <st_word>
c0006d93:	eb 04                	jmp    c0006d99 <f_setlabel+0x96>
c0006d95:	85 c0                	test   eax,eax
c0006d97:	74 dc                	je     c0006d75 <f_setlabel+0x72>
c0006d99:	89 f2                	mov    edx,esi
c0006d9b:	b8 37 8b 02 c0       	mov    eax,0xc0028b37
c0006da0:	e8 5b ad ff ff       	call   c0001b00 <chk_chr>
c0006da5:	85 c0                	test   eax,eax
c0006da7:	75 cc                	jne    c0006d75 <f_setlabel+0x72>
c0006da9:	83 fb 0a             	cmp    ebx,0xa
c0006dac:	77 c7                	ja     c0006d75 <f_setlabel+0x72>
c0006dae:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006db1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006db5:	0f b7 d6             	movzx  edx,si
c0006db8:	01 c8                	add    eax,ecx
c0006dba:	43                   	inc    ebx
c0006dbb:	e8 f0 ac ff ff       	call   c0001ab0 <st_word>
c0006dc0:	eb 84                	jmp    c0006d46 <f_setlabel+0x43>
c0006dc2:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dc7:	ba 20 00 00 00       	mov    edx,0x20
c0006dcc:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006dd0:	31 db                	xor    ebx,ebx
c0006dd2:	e8 fb ac ff ff       	call   c0001ad2 <mem_set>
c0006dd7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006dde:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006de1:	76 60                	jbe    c0006e43 <f_setlabel+0x140>
c0006de3:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dea:	e8 29 ad ff ff       	call   c0001b18 <tchar2uni>
c0006def:	3d ff ff 00 00       	cmp    eax,0xffff
c0006df4:	0f 87 7b ff ff ff    	ja     c0006d75 <f_setlabel+0x72>
c0006dfa:	83 ec 0c             	sub    esp,0xc
c0006dfd:	50                   	push   eax
c0006dfe:	e8 97 15 00 00       	call   c000839a <ff_wtoupper>
c0006e03:	5a                   	pop    edx
c0006e04:	59                   	pop    ecx
c0006e05:	68 b5 01 00 00       	push   0x1b5
c0006e0a:	50                   	push   eax
c0006e0b:	e8 8e 14 00 00       	call   c000829e <ff_uni2oem>
c0006e10:	83 c4 10             	add    esp,0x10
c0006e13:	89 c6                	mov    esi,eax
c0006e15:	66 85 c0             	test   ax,ax
c0006e18:	0f 84 57 ff ff ff    	je     c0006d75 <f_setlabel+0x72>
c0006e1e:	0f b7 d0             	movzx  edx,ax
c0006e21:	b8 30 8b 02 c0       	mov    eax,0xc0028b30
c0006e26:	e8 d5 ac ff ff       	call   c0001b00 <chk_chr>
c0006e2b:	85 c0                	test   eax,eax
c0006e2d:	0f 85 42 ff ff ff    	jne    c0006d75 <f_setlabel+0x72>
c0006e33:	66 81 fe ff 00       	cmp    si,0xff
c0006e38:	0f 87 14 01 00 00    	ja     c0006f52 <f_setlabel+0x24f>
c0006e3e:	e9 fa 00 00 00       	jmp    c0006f3d <f_setlabel+0x23a>
c0006e43:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e48:	0f 84 27 ff ff ff    	je     c0006d75 <f_setlabel+0x72>
c0006e4e:	85 db                	test   ebx,ebx
c0006e50:	74 0e                	je     c0006e60 <f_setlabel+0x15d>
c0006e52:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e55:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e5a:	75 04                	jne    c0006e60 <f_setlabel+0x15d>
c0006e5c:	89 c3                	mov    ebx,eax
c0006e5e:	eb ee                	jmp    c0006e4e <f_setlabel+0x14b>
c0006e60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e64:	31 d2                	xor    edx,edx
c0006e66:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e6a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e72:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e76:	e8 1f c1 ff ff       	call   c0002f9a <dir_sdi>
c0006e7b:	89 c6                	mov    esi,eax
c0006e7d:	85 c0                	test   eax,eax
c0006e7f:	0f 85 e3 00 00 00    	jne    c0006f68 <f_setlabel+0x265>
c0006e85:	ba 01 00 00 00       	mov    edx,0x1
c0006e8a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e8e:	e8 17 c9 ff ff       	call   c00037aa <dir_read>
c0006e93:	85 c0                	test   eax,eax
c0006e95:	75 21                	jne    c0006eb8 <f_setlabel+0x1b5>
c0006e97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e9b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e9f:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006ea2:	74 5d                	je     c0006f01 <f_setlabel+0x1fe>
c0006ea4:	85 db                	test   ebx,ebx
c0006ea6:	74 0b                	je     c0006eb3 <f_setlabel+0x1b0>
c0006ea8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ead:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006eb1:	eb 70                	jmp    c0006f23 <f_setlabel+0x220>
c0006eb3:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006eb6:	eb 70                	jmp    c0006f28 <f_setlabel+0x225>
c0006eb8:	83 f8 04             	cmp    eax,0x4
c0006ebb:	75 7c                	jne    c0006f39 <f_setlabel+0x236>
c0006ebd:	85 db                	test   ebx,ebx
c0006ebf:	0f 84 a3 00 00 00    	je     c0006f68 <f_setlabel+0x265>
c0006ec5:	ba 01 00 00 00       	mov    edx,0x1
c0006eca:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ece:	e8 51 ca ff ff       	call   c0003924 <dir_alloc>
c0006ed3:	89 c6                	mov    esi,eax
c0006ed5:	85 c0                	test   eax,eax
c0006ed7:	0f 85 8b 00 00 00    	jne    c0006f68 <f_setlabel+0x265>
c0006edd:	31 d2                	xor    edx,edx
c0006edf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee3:	b9 20 00 00 00       	mov    ecx,0x20
c0006ee8:	e8 e5 ab ff ff       	call   c0001ad2 <mem_set>
c0006eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ef4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef8:	75 18                	jne    c0006f12 <f_setlabel+0x20f>
c0006efa:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006efd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f01:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f04:	b9 16 00 00 00       	mov    ecx,0x16
c0006f09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0d:	83 c0 02             	add    eax,0x2
c0006f10:	eb 9b                	jmp    c0006ead <f_setlabel+0x1aa>
c0006f12:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f16:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f1b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f1f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f23:	e8 95 ab ff ff       	call   c0001abd <mem_cpy>
c0006f28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f34:	e8 0e d4 ff ff       	call   c0004347 <sync_fs>
c0006f39:	89 c6                	mov    esi,eax
c0006f3b:	eb 2b                	jmp    c0006f68 <f_setlabel+0x265>
c0006f3d:	83 fb 0a             	cmp    ebx,0xa
c0006f40:	0f 87 2f fe ff ff    	ja     c0006d75 <f_setlabel+0x72>
c0006f46:	89 f0                	mov    eax,esi
c0006f48:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f4c:	43                   	inc    ebx
c0006f4d:	e9 85 fe ff ff       	jmp    c0006dd7 <f_setlabel+0xd4>
c0006f52:	83 fb 09             	cmp    ebx,0x9
c0006f55:	0f 87 1a fe ff ff    	ja     c0006d75 <f_setlabel+0x72>
c0006f5b:	89 f0                	mov    eax,esi
c0006f5d:	66 c1 e8 08          	shr    ax,0x8
c0006f61:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f65:	43                   	inc    ebx
c0006f66:	eb de                	jmp    c0006f46 <f_setlabel+0x243>
c0006f68:	89 f0                	mov    eax,esi
c0006f6a:	83 c4 74             	add    esp,0x74
c0006f6d:	5b                   	pop    ebx
c0006f6e:	5e                   	pop    esi
c0006f6f:	c3                   	ret    

c0006f70 <f_forward>:
c0006f70:	55                   	push   ebp
c0006f71:	57                   	push   edi
c0006f72:	56                   	push   esi
c0006f73:	53                   	push   ebx
c0006f74:	83 ec 2c             	sub    esp,0x2c
c0006f77:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f7b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f85:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f89:	89 d8                	mov    eax,ebx
c0006f8b:	e8 b1 b1 ff ff       	call   c0002141 <validate>
c0006f90:	89 c5                	mov    ebp,eax
c0006f92:	85 c0                	test   eax,eax
c0006f94:	0f 85 aa 01 00 00    	jne    c0007144 <f_forward+0x1d4>
c0006f9a:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f9e:	85 ed                	test   ebp,ebp
c0006fa0:	0f 85 9e 01 00 00    	jne    c0007144 <f_forward+0x1d4>
c0006fa6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006faa:	0f 84 8f 01 00 00    	je     c000713f <f_forward+0x1cf>
c0006fb0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fb3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fb6:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fb9:	bf 00 00 00 00       	mov    edi,0x0
c0006fbe:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fc1:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fc5:	89 d1                	mov    ecx,edx
c0006fc7:	19 f9                	sbb    ecx,edi
c0006fc9:	0f 83 cf 00 00 00    	jae    c000709e <f_forward+0x12e>
c0006fcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fd3:	e9 c6 00 00 00       	jmp    c000709e <f_forward+0x12e>
c0006fd8:	50                   	push   eax
c0006fd9:	50                   	push   eax
c0006fda:	6a 00                	push   0x0
c0006fdc:	6a 00                	push   0x0
c0006fde:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fe2:	83 c4 10             	add    esp,0x10
c0006fe5:	85 c0                	test   eax,eax
c0006fe7:	0f 84 57 01 00 00    	je     c0007144 <f_forward+0x1d4>
c0006fed:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ff0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006ff4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006ff7:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007000:	89 c6                	mov    esi,eax
c0007002:	0f ac fe 09          	shrd   esi,edi,0x9
c0007006:	21 ce                	and    esi,ecx
c0007008:	89 c1                	mov    ecx,eax
c000700a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007010:	0f 84 98 00 00 00    	je     c00070ae <f_forward+0x13e>
c0007016:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000701a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000701d:	89 c8                	mov    eax,ecx
c000701f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007023:	e8 af ac ff ff       	call   c0001cd7 <clst2sect>
c0007028:	89 d7                	mov    edi,edx
c000702a:	09 c7                	or     edi,eax
c000702c:	0f 84 9e 00 00 00    	je     c00070d0 <f_forward+0x160>
c0007032:	31 ff                	xor    edi,edi
c0007034:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007037:	01 c6                	add    esi,eax
c0007039:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000703d:	11 d7                	adc    edi,edx
c000703f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007042:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007045:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007049:	39 fa                	cmp    edx,edi
c000704b:	0f 85 a2 00 00 00    	jne    c00070f3 <f_forward+0x183>
c0007051:	39 f0                	cmp    eax,esi
c0007053:	0f 85 9a 00 00 00    	jne    c00070f3 <f_forward+0x183>
c0007059:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000705c:	ba 00 02 00 00       	mov    edx,0x200
c0007061:	25 ff 01 00 00       	and    eax,0x1ff
c0007066:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000706a:	29 c2                	sub    edx,eax
c000706c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000706f:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007072:	39 d1                	cmp    ecx,edx
c0007074:	76 02                	jbe    c0007078 <f_forward+0x108>
c0007076:	89 d1                	mov    ecx,edx
c0007078:	8d 73 50             	lea    esi,[ebx+0x50]
c000707b:	52                   	push   edx
c000707c:	01 c6                	add    esi,eax
c000707e:	52                   	push   edx
c000707f:	51                   	push   ecx
c0007080:	56                   	push   esi
c0007081:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007085:	83 c4 10             	add    esp,0x10
c0007088:	85 c0                	test   eax,eax
c000708a:	74 44                	je     c00070d0 <f_forward+0x160>
c000708c:	31 ff                	xor    edi,edi
c000708e:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007091:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007094:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007098:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000709c:	01 07                	add    DWORD PTR [edi],eax
c000709e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070a3:	0f 85 2f ff ff ff    	jne    c0006fd8 <f_forward+0x68>
c00070a9:	e9 96 00 00 00       	jmp    c0007144 <f_forward+0x1d4>
c00070ae:	85 f6                	test   esi,esi
c00070b0:	0f 85 60 ff ff ff    	jne    c0007016 <f_forward+0xa6>
c00070b6:	89 d7                	mov    edi,edx
c00070b8:	09 c7                	or     edi,eax
c00070ba:	75 05                	jne    c00070c1 <f_forward+0x151>
c00070bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070bf:	eb 0a                	jmp    c00070cb <f_forward+0x15b>
c00070c1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070c4:	89 d8                	mov    eax,ebx
c00070c6:	e8 d9 bc ff ff       	call   c0002da4 <get_fat>
c00070cb:	83 f8 01             	cmp    eax,0x1
c00070ce:	77 0b                	ja     c00070db <f_forward+0x16b>
c00070d0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070d4:	bd 02 00 00 00       	mov    ebp,0x2
c00070d9:	eb 69                	jmp    c0007144 <f_forward+0x1d4>
c00070db:	83 f8 ff             	cmp    eax,0xffffffff
c00070de:	75 0b                	jne    c00070eb <f_forward+0x17b>
c00070e0:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070e4:	bd 01 00 00 00       	mov    ebp,0x1
c00070e9:	eb 59                	jmp    c0007144 <f_forward+0x1d4>
c00070eb:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070ee:	e9 23 ff ff ff       	jmp    c0007016 <f_forward+0xa6>
c00070f3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070f7:	79 20                	jns    c0007119 <f_forward+0x1a9>
c00070f9:	83 ec 0c             	sub    esp,0xc
c00070fc:	6a 01                	push   0x1
c00070fe:	52                   	push   edx
c00070ff:	50                   	push   eax
c0007100:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007104:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007108:	50                   	push   eax
c0007109:	e8 fb a8 ff ff       	call   c0001a09 <disk_write>
c000710e:	83 c4 20             	add    esp,0x20
c0007111:	85 c0                	test   eax,eax
c0007113:	75 cb                	jne    c00070e0 <f_forward+0x170>
c0007115:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007119:	83 ec 0c             	sub    esp,0xc
c000711c:	6a 01                	push   0x1
c000711e:	57                   	push   edi
c000711f:	56                   	push   esi
c0007120:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007124:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007128:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000712c:	50                   	push   eax
c000712d:	e8 c1 a8 ff ff       	call   c00019f3 <disk_read>
c0007132:	83 c4 20             	add    esp,0x20
c0007135:	85 c0                	test   eax,eax
c0007137:	0f 84 1c ff ff ff    	je     c0007059 <f_forward+0xe9>
c000713d:	eb a1                	jmp    c00070e0 <f_forward+0x170>
c000713f:	bd 07 00 00 00       	mov    ebp,0x7
c0007144:	83 c4 2c             	add    esp,0x2c
c0007147:	89 e8                	mov    eax,ebp
c0007149:	5b                   	pop    ebx
c000714a:	5e                   	pop    esi
c000714b:	5f                   	pop    edi
c000714c:	5d                   	pop    ebp
c000714d:	c3                   	ret    

c000714e <f_mkfs>:
c000714e:	55                   	push   ebp
c000714f:	57                   	push   edi
c0007150:	56                   	push   esi
c0007151:	53                   	push   ebx
c0007152:	bb 0b 00 00 00       	mov    ebx,0xb
c0007157:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000715d:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007164:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000716b:	e8 b0 ae ff ff       	call   c0002020 <get_ldnumber>
c0007170:	85 c0                	test   eax,eax
c0007172:	0f 88 ec 10 00 00    	js     c0008264 <f_mkfs+0x1116>
c0007178:	8b 14 85 60 da 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd25a0]
c000717f:	85 d2                	test   edx,edx
c0007181:	74 03                	je     c0007186 <f_mkfs+0x38>
c0007183:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007186:	85 f6                	test   esi,esi
c0007188:	75 05                	jne    c000718f <f_mkfs+0x41>
c000718a:	be 20 8b 02 c0       	mov    esi,0xc0028b20
c000718f:	83 ec 0c             	sub    esp,0xc
c0007192:	0f b6 c0             	movzx  eax,al
c0007195:	bb 03 00 00 00       	mov    ebx,0x3
c000719a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000719e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a2:	e8 49 a8 ff ff       	call   c00019f0 <disk_initialize>
c00071a7:	83 c4 10             	add    esp,0x10
c00071aa:	a8 01                	test   al,0x1
c00071ac:	0f 85 b2 10 00 00    	jne    c0008264 <f_mkfs+0x1116>
c00071b2:	bb 0a 00 00 00       	mov    ebx,0xa
c00071b7:	a8 04                	test   al,0x4
c00071b9:	0f 85 a5 10 00 00    	jne    c0008264 <f_mkfs+0x1116>
c00071bf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071c2:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071c6:	85 c0                	test   eax,eax
c00071c8:	75 20                	jne    c00071ea <f_mkfs+0x9c>
c00071ca:	51                   	push   ecx
c00071cb:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071cf:	50                   	push   eax
c00071d0:	6a 03                	push   0x3
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	e8 44 a8 ff ff       	call   c0001a1f <disk_ioctl>
c00071db:	83 c4 10             	add    esp,0x10
c00071de:	85 c0                	test   eax,eax
c00071e0:	74 08                	je     c00071ea <f_mkfs+0x9c>
c00071e2:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071ea:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071ee:	8d 42 ff             	lea    eax,[edx-0x1]
c00071f1:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f6:	77 04                	ja     c00071fc <f_mkfs+0xae>
c00071f8:	85 c2                	test   edx,eax
c00071fa:	74 08                	je     c0007204 <f_mkfs+0xb6>
c00071fc:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007204:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007207:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000720b:	48                   	dec    eax
c000720c:	3c 01                	cmp    al,0x1
c000720e:	76 05                	jbe    c0007215 <f_mkfs+0xc7>
c0007210:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007215:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007218:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000721c:	48                   	dec    eax
c000721d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007222:	77 07                	ja     c000722b <f_mkfs+0xdd>
c0007224:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007229:	74 08                	je     c0007233 <f_mkfs+0xe5>
c000722b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007233:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007236:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000723c:	77 07                	ja     c0007245 <f_mkfs+0xf7>
c000723e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007241:	85 d8                	test   eax,ebx
c0007243:	74 02                	je     c0007247 <f_mkfs+0xf9>
c0007245:	31 db                	xor    ebx,ebx
c0007247:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007252:	77 0a                	ja     c000725e <f_mkfs+0x110>
c0007254:	bb 11 00 00 00       	mov    ebx,0x11
c0007259:	e9 06 10 00 00       	jmp    c0008264 <f_mkfs+0x1116>
c000725e:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007265:	8b 36                	mov    esi,DWORD PTR [esi]
c0007267:	85 ed                	test   ebp,ebp
c0007269:	75 1e                	jne    c0007289 <f_mkfs+0x13b>
c000726b:	83 ec 0c             	sub    esp,0xc
c000726e:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007275:	25 00 fe ff ff       	and    eax,0xfffffe00
c000727a:	50                   	push   eax
c000727b:	e8 f1 0f 00 00       	call   c0008271 <ff_memalloc>
c0007280:	83 c4 10             	add    esp,0x10
c0007283:	89 c5                	mov    ebp,eax
c0007285:	85 c0                	test   eax,eax
c0007287:	74 cb                	je     c0007254 <f_mkfs+0x106>
c0007289:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007291:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007299:	52                   	push   edx
c000729a:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000729e:	50                   	push   eax
c000729f:	6a 01                	push   0x1
c00072a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072a5:	e8 75 a7 ff ff       	call   c0001a1f <disk_ioctl>
c00072aa:	83 c4 10             	add    esp,0x10
c00072ad:	85 c0                	test   eax,eax
c00072af:	0f 85 4a 0f 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c00072b5:	89 f1                	mov    ecx,esi
c00072b7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072bf:	83 e1 0f             	and    ecx,0xf
c00072c2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ca:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072ce:	83 e6 08             	and    esi,0x8
c00072d1:	75 56                	jne    c0007329 <f_mkfs+0x1db>
c00072d3:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072d7:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072db:	83 ff 00             	cmp    edi,0x0
c00072de:	76 20                	jbe    c0007300 <f_mkfs+0x1b2>
c00072e0:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072e5:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072ed:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072f3:	83 d7 ff             	adc    edi,0xffffffff
c00072f6:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072fa:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072fe:	eb 21                	jmp    c0007321 <f_mkfs+0x1d3>
c0007300:	ba 3f 00 00 00       	mov    edx,0x3f
c0007305:	39 f2                	cmp    edx,esi
c0007307:	19 f8                	sbb    eax,edi
c0007309:	73 1e                	jae    c0007329 <f_mkfs+0x1db>
c000730b:	83 c6 c1             	add    esi,0xffffffc1
c000730e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007316:	83 d7 ff             	adc    edi,0xffffffff
c0007319:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000731d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007321:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007329:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000732d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007331:	89 04 24             	mov    DWORD PTR [esp],eax
c0007334:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007338:	31 c0                	xor    eax,eax
c000733a:	ba 7f 00 00 00       	mov    edx,0x7f
c000733f:	89 c7                	mov    edi,eax
c0007341:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007344:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007348:	0f 83 c5 0a 00 00    	jae    c0007e13 <f_mkfs+0xcc5>
c000734e:	89 df                	mov    edi,ebx
c0007350:	c1 ef 09             	shr    edi,0x9
c0007353:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007357:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000735e:	c1 ef 09             	shr    edi,0x9
c0007361:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007366:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000736a:	74 29                	je     c0007395 <f_mkfs+0x247>
c000736c:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007372:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007377:	0f 97 c2             	seta   dl
c000737a:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000737d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007381:	0f 92 c0             	setb   al
c0007384:	08 c2                	or     dl,al
c0007386:	75 5b                	jne    c00073e3 <f_mkfs+0x295>
c0007388:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000738c:	83 e0 07             	and    eax,0x7
c000738f:	3c 04                	cmp    al,0x4
c0007391:	74 50                	je     c00073e3 <f_mkfs+0x295>
c0007393:	eb 1b                	jmp    c00073b0 <f_mkfs+0x262>
c0007395:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000739a:	0f 87 73 0a 00 00    	ja     c0007e13 <f_mkfs+0xcc5>
c00073a0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073a6:	76 08                	jbe    c00073b0 <f_mkfs+0x262>
c00073a8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073b0:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073b4:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073b8:	83 e0 01             	and    eax,0x1
c00073bb:	80 e1 02             	and    cl,0x2
c00073be:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073c2:	74 0d                	je     c00073d1 <f_mkfs+0x283>
c00073c4:	84 c0                	test   al,al
c00073c6:	0f 84 53 09 00 00    	je     c0007d1f <f_mkfs+0xbd1>
c00073cc:	e9 12 08 00 00       	jmp    c0007be3 <f_mkfs+0xa95>
c00073d1:	bb 13 00 00 00       	mov    ebx,0x13
c00073d6:	84 c0                	test   al,al
c00073d8:	0f 85 05 08 00 00    	jne    c0007be3 <f_mkfs+0xa95>
c00073de:	e9 39 0e 00 00       	jmp    c000821c <f_mkfs+0x10ce>
c00073e3:	31 c0                	xor    eax,eax
c00073e5:	ba ff 0f 00 00       	mov    edx,0xfff
c00073ea:	89 c7                	mov    edi,eax
c00073ec:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073ef:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073f3:	0f 83 1a 0a 00 00    	jae    c0007e13 <f_mkfs+0xcc5>
c00073f9:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073ff:	77 39                	ja     c000743a <f_mkfs+0x2ec>
c0007401:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007406:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000740e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007411:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007415:	73 08                	jae    c000741f <f_mkfs+0x2d1>
c0007417:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000741f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007424:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007427:	b8 00 00 00 00       	mov    eax,0x0
c000742c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007430:	73 08                	jae    c000743a <f_mkfs+0x2ec>
c0007432:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000743a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000743e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007442:	83 c0 20             	add    eax,0x20
c0007445:	83 d2 00             	adc    edx,0x0
c0007448:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000744c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007450:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007454:	31 d2                	xor    edx,edx
c0007456:	31 ff                	xor    edi,edi
c0007458:	52                   	push   edx
c0007459:	89 fb                	mov    ebx,edi
c000745b:	50                   	push   eax
c000745c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007460:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007464:	e8 e3 ec 01 00       	call   c002614c <__udivdi3>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	c1 e0 02             	shl    eax,0x2
c000746f:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007473:	05 07 02 00 00       	add    eax,0x207
c0007478:	89 f1                	mov    ecx,esi
c000747a:	c1 e8 09             	shr    eax,0x9
c000747d:	83 c1 ff             	add    ecx,0xffffffff
c0007480:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007484:	83 d3 ff             	adc    ebx,0xffffffff
c0007487:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000748b:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c000748f:	31 d2                	xor    edx,edx
c0007491:	01 c8                	add    eax,ecx
c0007493:	11 da                	adc    edx,ebx
c0007495:	89 c1                	mov    ecx,eax
c0007497:	f7 de                	neg    esi
c0007499:	89 d0                	mov    eax,edx
c000749b:	83 d7 00             	adc    edi,0x0
c000749e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074a2:	f7 df                	neg    edi
c00074a4:	21 f1                	and    ecx,esi
c00074a6:	21 f8                	and    eax,edi
c00074a8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074b8:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bf:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074c3:	0f ac d0 01          	shrd   eax,edx,0x1
c00074c7:	89 df                	mov    edi,ebx
c00074c9:	d1 ea                	shr    edx,1
c00074cb:	39 c1                	cmp    ecx,eax
c00074cd:	19 d7                	sbb    edi,edx
c00074cf:	0f 83 3e 09 00 00    	jae    c0007e13 <f_mkfs+0xcc5>
c00074d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074d9:	31 d2                	xor    edx,edx
c00074db:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074e3:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074ea:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074ee:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074f2:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074f6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074fa:	83 f8 0f             	cmp    eax,0xf
c00074fd:	0f 86 10 09 00 00    	jbe    c0007e13 <f_mkfs+0xcc5>
c0007503:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000750b:	0f 87 02 09 00 00    	ja     c0007e13 <f_mkfs+0xcc5>
c0007511:	31 d2                	xor    edx,edx
c0007513:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007517:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000751f:	83 c0 07             	add    eax,0x7
c0007522:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000752a:	c1 e8 03             	shr    eax,0x3
c000752d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007534:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000753c:	c1 e0 09             	shl    eax,0x9
c000753f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007543:	48                   	dec    eax
c0007544:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007548:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000754c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007550:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007554:	31 d2                	xor    edx,edx
c0007556:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000755a:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007561:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007565:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000756a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000756e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007572:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007576:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000757a:	31 ff                	xor    edi,edi
c000757c:	31 f6                	xor    esi,esi
c000757e:	31 db                	xor    ebx,ebx
c0007580:	85 ff                	test   edi,edi
c0007582:	74 05                	je     c0007589 <f_mkfs+0x43b>
c0007584:	4f                   	dec    edi
c0007585:	74 44                	je     c00075cb <f_mkfs+0x47d>
c0007587:	eb 4f                	jmp    c00075d8 <f_mkfs+0x48a>
c0007589:	83 ec 0c             	sub    esp,0xc
c000758c:	0f b7 c3             	movzx  eax,bx
c000758f:	50                   	push   eax
c0007590:	e8 05 0e 00 00       	call   c000839a <ff_wtoupper>
c0007595:	83 c4 10             	add    esp,0x10
c0007598:	89 c1                	mov    ecx,eax
c000759a:	8d 53 01             	lea    edx,[ebx+0x1]
c000759d:	66 39 c3             	cmp    bx,ax
c00075a0:	75 3e                	jne    c00075e0 <f_mkfs+0x492>
c00075a2:	be 01 00 00 00       	mov    esi,0x1
c00075a7:	89 df                	mov    edi,ebx
c00075a9:	66 01 f7             	add    di,si
c00075ac:	75 07                	jne    c00075b5 <f_mkfs+0x467>
c00075ae:	83 fe 7f             	cmp    esi,0x7f
c00075b1:	77 31                	ja     c00075e4 <f_mkfs+0x496>
c00075b3:	eb 16                	jmp    c00075cb <f_mkfs+0x47d>
c00075b5:	83 ec 0c             	sub    esp,0xc
c00075b8:	0f b7 ff             	movzx  edi,di
c00075bb:	57                   	push   edi
c00075bc:	e8 d9 0d 00 00       	call   c000839a <ff_wtoupper>
c00075c1:	83 c4 10             	add    esp,0x10
c00075c4:	39 c7                	cmp    edi,eax
c00075c6:	75 e6                	jne    c00075ae <f_mkfs+0x460>
c00075c8:	46                   	inc    esi
c00075c9:	eb dc                	jmp    c00075a7 <f_mkfs+0x459>
c00075cb:	31 c0                	xor    eax,eax
c00075cd:	89 d9                	mov    ecx,ebx
c00075cf:	4e                   	dec    esi
c00075d0:	0f 95 c0             	setne  al
c00075d3:	43                   	inc    ebx
c00075d4:	89 c7                	mov    edi,eax
c00075d6:	eb 14                	jmp    c00075ec <f_mkfs+0x49e>
c00075d8:	89 f1                	mov    ecx,esi
c00075da:	01 f3                	add    ebx,esi
c00075dc:	31 ff                	xor    edi,edi
c00075de:	eb 0c                	jmp    c00075ec <f_mkfs+0x49e>
c00075e0:	89 d3                	mov    ebx,edx
c00075e2:	eb 08                	jmp    c00075ec <f_mkfs+0x49e>
c00075e4:	bf 02 00 00 00       	mov    edi,0x2
c00075e9:	83 c9 ff             	or     ecx,0xffffffff
c00075ec:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075f0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f3:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075f7:	0f b6 c1             	movzx  eax,cl
c00075fa:	e8 3a a9 ff ff       	call   c0001f39 <xsum32>
c00075ff:	66 c1 e9 08          	shr    cx,0x8
c0007603:	89 c2                	mov    edx,eax
c0007605:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007608:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000760c:	0f b7 c1             	movzx  eax,cx
c000760f:	e8 25 a9 ff ff       	call   c0001f39 <xsum32>
c0007614:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007619:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000761d:	66 85 db             	test   bx,bx
c0007620:	74 1f                	je     c0007641 <f_mkfs+0x4f3>
c0007622:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007625:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000762c:	83 c0 02             	add    eax,0x2
c000762f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007635:	39 c2                	cmp    edx,eax
c0007637:	74 08                	je     c0007641 <f_mkfs+0x4f3>
c0007639:	89 04 24             	mov    DWORD PTR [esp],eax
c000763c:	e9 3f ff ff ff       	jmp    c0007580 <f_mkfs+0x432>
c0007641:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007644:	83 ec 0c             	sub    esp,0xc
c0007647:	05 01 02 00 00       	add    eax,0x201
c000764c:	c1 e8 09             	shr    eax,0x9
c000764f:	50                   	push   eax
c0007650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007654:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007658:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000765c:	55                   	push   ebp
c000765d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007661:	e8 a3 a3 ff ff       	call   c0001a09 <disk_write>
c0007666:	83 c4 20             	add    esp,0x20
c0007669:	85 c0                	test   eax,eax
c000766b:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000766e:	0f 85 8b 0b 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c0007674:	89 d0                	mov    eax,edx
c0007676:	31 d2                	xor    edx,edx
c0007678:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000767c:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007680:	66 85 db             	test   bx,bx
c0007683:	74 04                	je     c0007689 <f_mkfs+0x53b>
c0007685:	31 c0                	xor    eax,eax
c0007687:	eb b0                	jmp    c0007639 <f_mkfs+0x4eb>
c0007689:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000768d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007691:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007695:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000769b:	31 d2                	xor    edx,edx
c000769d:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076a8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076ac:	c1 eb 09             	shr    ebx,0x9
c00076af:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076ba:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076c2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076c6:	8d 70 01             	lea    esi,[eax+0x1]
c00076c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076d1:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076d8:	31 d2                	xor    edx,edx
c00076da:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076df:	89 04 24             	mov    DWORD PTR [esp],eax
c00076e2:	89 c1                	mov    ecx,eax
c00076e4:	89 e8                	mov    eax,ebp
c00076e6:	e8 e7 a3 ff ff       	call   c0001ad2 <mem_set>
c00076eb:	31 c0                	xor    eax,eax
c00076ed:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076f0:	76 10                	jbe    c0007702 <f_mkfs+0x5b4>
c00076f2:	83 fe 07             	cmp    esi,0x7
c00076f5:	76 0b                	jbe    c0007702 <f_mkfs+0x5b4>
c00076f7:	40                   	inc    eax
c00076f8:	83 ee 08             	sub    esi,0x8
c00076fb:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007700:	eb eb                	jmp    c00076ed <f_mkfs+0x59f>
c0007702:	b2 01                	mov    dl,0x1
c0007704:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007708:	85 f6                	test   esi,esi
c000770a:	74 0c                	je     c0007718 <f_mkfs+0x5ca>
c000770c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000770f:	76 07                	jbe    c0007718 <f_mkfs+0x5ca>
c0007711:	08 11                	or     BYTE PTR [ecx],dl
c0007713:	4e                   	dec    esi
c0007714:	d1 e2                	shl    edx,1
c0007716:	eb f0                	jmp    c0007708 <f_mkfs+0x5ba>
c0007718:	89 df                	mov    edi,ebx
c000771a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000771e:	76 04                	jbe    c0007724 <f_mkfs+0x5d6>
c0007720:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007724:	83 ec 0c             	sub    esp,0xc
c0007727:	57                   	push   edi
c0007728:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000772c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007730:	55                   	push   ebp
c0007731:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007735:	e8 cf a2 ff ff       	call   c0001a09 <disk_write>
c000773a:	83 c4 20             	add    esp,0x20
c000773d:	85 c0                	test   eax,eax
c000773f:	0f 85 ba 0a 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c0007745:	31 d2                	xor    edx,edx
c0007747:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000774b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000774f:	29 fb                	sub    ebx,edi
c0007751:	0f 85 7a ff ff ff    	jne    c00076d1 <f_mkfs+0x583>
c0007757:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000775b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007763:	31 f6                	xor    esi,esi
c0007765:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007769:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000776c:	31 d2                	xor    edx,edx
c000776e:	89 e8                	mov    eax,ebp
c0007770:	e8 5d a3 ff ff       	call   c0001ad2 <mem_set>
c0007775:	31 c9                	xor    ecx,ecx
c0007777:	85 db                	test   ebx,ebx
c0007779:	75 40                	jne    c00077bb <f_mkfs+0x66d>
c000777b:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007780:	89 e8                	mov    eax,ebp
c0007782:	bb 02 00 00 00       	mov    ebx,0x2
c0007787:	e8 28 a3 ff ff       	call   c0001ab4 <st_dword>
c000778c:	8d 45 04             	lea    eax,[ebp+0x4]
c000778f:	83 ca ff             	or     edx,0xffffffff
c0007792:	e8 1d a3 ff ff       	call   c0001ab4 <st_dword>
c0007797:	b9 08 00 00 00       	mov    ecx,0x8
c000779c:	eb 1d                	jmp    c00077bb <f_mkfs+0x66d>
c000779e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a1:	76 3b                	jbe    c00077de <f_mkfs+0x690>
c00077a3:	43                   	inc    ebx
c00077a4:	83 fe 01             	cmp    esi,0x1
c00077a7:	89 da                	mov    edx,ebx
c00077a9:	77 03                	ja     c00077ae <f_mkfs+0x660>
c00077ab:	83 ca ff             	or     edx,0xffffffff
c00077ae:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077b2:	4e                   	dec    esi
c00077b3:	e8 fc a2 ff ff       	call   c0001ab4 <st_dword>
c00077b8:	83 c1 04             	add    ecx,0x4
c00077bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077bf:	85 f6                	test   esi,esi
c00077c1:	75 db                	jne    c000779e <f_mkfs+0x650>
c00077c3:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077c8:	77 14                	ja     c00077de <f_mkfs+0x690>
c00077ca:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077ce:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077d5:	85 f6                	test   esi,esi
c00077d7:	74 05                	je     c00077de <f_mkfs+0x690>
c00077d9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077dc:	77 dd                	ja     c00077bb <f_mkfs+0x66d>
c00077de:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077e2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077e6:	39 cf                	cmp    edi,ecx
c00077e8:	76 02                	jbe    c00077ec <f_mkfs+0x69e>
c00077ea:	89 cf                	mov    edi,ecx
c00077ec:	83 ec 0c             	sub    esp,0xc
c00077ef:	57                   	push   edi
c00077f0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077f8:	55                   	push   ebp
c00077f9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077fd:	e8 07 a2 ff ff       	call   c0001a09 <disk_write>
c0007802:	83 c4 20             	add    esp,0x20
c0007805:	85 c0                	test   eax,eax
c0007807:	0f 85 f2 09 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c000780d:	31 d2                	xor    edx,edx
c000780f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007813:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007817:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000781b:	0f 85 48 ff ff ff    	jne    c0007769 <f_mkfs+0x61b>
c0007821:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007824:	31 d2                	xor    edx,edx
c0007826:	89 e8                	mov    eax,ebp
c0007828:	31 ff                	xor    edi,edi
c000782a:	e8 a3 a2 ff ff       	call   c0001ad2 <mem_set>
c000782f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007832:	ba 02 00 00 00       	mov    edx,0x2
c0007837:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000783b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000783f:	e8 70 a2 ff ff       	call   c0001ab4 <st_dword>
c0007844:	8d 45 38             	lea    eax,[ebp+0x38]
c0007847:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000784b:	e8 64 a2 ff ff       	call   c0001ab4 <st_dword>
c0007850:	8d 45 44             	lea    eax,[ebp+0x44]
c0007853:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007857:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000785b:	e8 54 a2 ff ff       	call   c0001ab4 <st_dword>
c0007860:	8d 45 54             	lea    eax,[ebp+0x54]
c0007863:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007867:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000786b:	83 c2 02             	add    edx,0x2
c000786e:	e8 41 a2 ff ff       	call   c0001ab4 <st_dword>
c0007873:	8d 45 58             	lea    eax,[ebp+0x58]
c0007876:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000787a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000787e:	e8 31 a2 ff ff       	call   c0001ab4 <st_dword>
c0007883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007887:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000788c:	89 c6                	mov    esi,eax
c000788e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007892:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007896:	89 04 24             	mov    DWORD PTR [esp],eax
c0007899:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c000789d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078a4:	39 cb                	cmp    ebx,ecx
c00078a6:	76 02                	jbe    c00078aa <f_mkfs+0x75c>
c00078a8:	89 cb                	mov    ebx,ecx
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	53                   	push   ebx
c00078ae:	57                   	push   edi
c00078af:	56                   	push   esi
c00078b0:	55                   	push   ebp
c00078b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078b5:	e8 4f a1 ff ff       	call   c0001a09 <disk_write>
c00078ba:	83 c4 20             	add    esp,0x20
c00078bd:	85 c0                	test   eax,eax
c00078bf:	0f 85 3a 09 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c00078c5:	31 d2                	xor    edx,edx
c00078c7:	b9 00 02 00 00       	mov    ecx,0x200
c00078cc:	89 e8                	mov    eax,ebp
c00078ce:	e8 ff a1 ff ff       	call   c0001ad2 <mem_set>
c00078d3:	31 d2                	xor    edx,edx
c00078d5:	01 de                	add    esi,ebx
c00078d7:	11 d7                	adc    edi,edx
c00078d9:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078dc:	75 bf                	jne    c000789d <f_mkfs+0x74f>
c00078de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078e2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078e6:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078ee:	b9 00 02 00 00       	mov    ecx,0x200
c00078f3:	31 d2                	xor    edx,edx
c00078f5:	89 e8                	mov    eax,ebp
c00078f7:	e8 d6 a1 ff ff       	call   c0001ad2 <mem_set>
c00078fc:	b9 0b 00 00 00       	mov    ecx,0xb
c0007901:	ba 00 8c 02 c0       	mov    edx,0xc0028c00
c0007906:	89 e8                	mov    eax,ebp
c0007908:	e8 b0 a1 ff ff       	call   c0001abd <mem_cpy>
c000790d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007910:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007914:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007918:	e8 9a a1 ff ff       	call   c0001ab7 <st_qword>
c000791d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007921:	8d 45 48             	lea    eax,[ebp+0x48]
c0007924:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007928:	e8 8a a1 ff ff       	call   c0001ab7 <st_qword>
c000792d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007930:	ba 20 00 00 00       	mov    edx,0x20
c0007935:	e8 7a a1 ff ff       	call   c0001ab4 <st_dword>
c000793a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000793e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007942:	e8 6d a1 ff ff       	call   c0001ab4 <st_dword>
c0007947:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000794b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000794f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007953:	e8 5c a1 ff ff       	call   c0001ab4 <st_dword>
c0007958:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000795b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000795f:	e8 50 a1 ff ff       	call   c0001ab4 <st_dword>
c0007964:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007968:	8d 50 02             	lea    edx,[eax+0x2]
c000796b:	8d 45 60             	lea    eax,[ebp+0x60]
c000796e:	e8 41 a1 ff ff       	call   c0001ab4 <st_dword>
c0007973:	8d 45 64             	lea    eax,[ebp+0x64]
c0007976:	ba 00 00 21 50       	mov    edx,0x50210000
c000797b:	e8 34 a1 ff ff       	call   c0001ab4 <st_dword>
c0007980:	8d 45 68             	lea    eax,[ebp+0x68]
c0007983:	ba 00 01 00 00       	mov    edx,0x100
c0007988:	e8 23 a1 ff ff       	call   c0001ab0 <st_word>
c000798d:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007991:	b8 0a 00 00 00       	mov    eax,0xa
c0007996:	48                   	dec    eax
c0007997:	74 05                	je     c000799e <f_mkfs+0x850>
c0007999:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000799c:	eb f8                	jmp    c0007996 <f_mkfs+0x848>
c000799e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079a2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079aa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079ae:	74 05                	je     c00079b5 <f_mkfs+0x867>
c00079b0:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079b3:	eb f5                	jmp    c00079aa <f_mkfs+0x85c>
c00079b5:	8d 45 78             	lea    eax,[ebp+0x78]
c00079b8:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079bd:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079c3:	31 db                	xor    ebx,ebx
c00079c5:	e8 e6 a0 ff ff       	call   c0001ab0 <st_word>
c00079ca:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079d0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00079d8:	e8 d3 a0 ff ff       	call   c0001ab0 <st_word>
c00079dd:	31 c9                	xor    ecx,ecx
c00079df:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079e2:	83 f8 01             	cmp    eax,0x1
c00079e5:	76 13                	jbe    c00079fa <f_mkfs+0x8ac>
c00079e7:	83 f9 70             	cmp    ecx,0x70
c00079ea:	74 0e                	je     c00079fa <f_mkfs+0x8ac>
c00079ec:	89 da                	mov    edx,ebx
c00079ee:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079f3:	e8 41 a5 ff ff       	call   c0001f39 <xsum32>
c00079f8:	89 c3                	mov    ebx,eax
c00079fa:	41                   	inc    ecx
c00079fb:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a01:	75 dc                	jne    c00079df <f_mkfs+0x891>
c0007a03:	89 f0                	mov    eax,esi
c0007a05:	89 fa                	mov    edx,edi
c0007a07:	83 c0 01             	add    eax,0x1
c0007a0a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a0e:	83 d2 00             	adc    edx,0x0
c0007a11:	83 ec 0c             	sub    esp,0xc
c0007a14:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a18:	6a 01                	push   0x1
c0007a1a:	57                   	push   edi
c0007a1b:	56                   	push   esi
c0007a1c:	55                   	push   ebp
c0007a1d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a21:	e8 e3 9f ff ff       	call   c0001a09 <disk_write>
c0007a26:	83 c4 20             	add    esp,0x20
c0007a29:	85 c0                	test   eax,eax
c0007a2b:	0f 85 ce 07 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c0007a31:	31 d2                	xor    edx,edx
c0007a33:	b9 00 02 00 00       	mov    ecx,0x200
c0007a38:	89 e8                	mov    eax,ebp
c0007a3a:	e8 93 a0 ff ff       	call   c0001ad2 <mem_set>
c0007a3f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a44:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a47:	e8 64 a0 ff ff       	call   c0001ab0 <st_word>
c0007a4c:	89 f0                	mov    eax,esi
c0007a4e:	89 fa                	mov    edx,edi
c0007a50:	83 c0 09             	add    eax,0x9
c0007a53:	83 d2 00             	adc    edx,0x0
c0007a56:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a59:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a5d:	31 c9                	xor    ecx,ecx
c0007a5f:	41                   	inc    ecx
c0007a60:	89 da                	mov    edx,ebx
c0007a62:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a67:	e8 cd a4 ff ff       	call   c0001f39 <xsum32>
c0007a6c:	89 c3                	mov    ebx,eax
c0007a6e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a74:	75 e9                	jne    c0007a5f <f_mkfs+0x911>
c0007a76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a7a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a7e:	83 c0 01             	add    eax,0x1
c0007a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a85:	83 d2 00             	adc    edx,0x0
c0007a88:	83 ec 0c             	sub    esp,0xc
c0007a8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 66 9f ff ff       	call   c0001a09 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 51 07 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c0007aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ab2:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ab6:	75 09                	jne    c0007ac1 <f_mkfs+0x973>
c0007ab8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007abb:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007abf:	74 12                	je     c0007ad3 <f_mkfs+0x985>
c0007ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ac5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ac9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007acd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ad1:	eb 8a                	jmp    c0007a5d <f_mkfs+0x90f>
c0007ad3:	31 d2                	xor    edx,edx
c0007ad5:	b9 00 02 00 00       	mov    ecx,0x200
c0007ada:	89 e8                	mov    eax,ebp
c0007adc:	e8 f1 9f ff ff       	call   c0001ad2 <mem_set>
c0007ae1:	83 c6 0b             	add    esi,0xb
c0007ae4:	83 d7 00             	adc    edi,0x0
c0007ae7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aeb:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007aef:	31 c9                	xor    ecx,ecx
c0007af1:	41                   	inc    ecx
c0007af2:	89 da                	mov    edx,ebx
c0007af4:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007af9:	e8 3b a4 ff ff       	call   c0001f39 <xsum32>
c0007afe:	89 c3                	mov    ebx,eax
c0007b00:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b06:	75 e9                	jne    c0007af1 <f_mkfs+0x9a3>
c0007b08:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b0b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b0f:	83 c6 01             	add    esi,0x1
c0007b12:	83 d7 00             	adc    edi,0x0
c0007b15:	83 ec 0c             	sub    esp,0xc
c0007b18:	6a 01                	push   0x1
c0007b1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b22:	55                   	push   ebp
c0007b23:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b27:	e8 dd 9e ff ff       	call   c0001a09 <disk_write>
c0007b2c:	83 c4 20             	add    esp,0x20
c0007b2f:	85 c0                	test   eax,eax
c0007b31:	0f 85 c8 06 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c0007b37:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b3b:	75 06                	jne    c0007b43 <f_mkfs+0x9f5>
c0007b3d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b41:	74 09                	je     c0007b4c <f_mkfs+0x9fe>
c0007b43:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b46:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b4a:	eb a3                	jmp    c0007aef <f_mkfs+0x9a1>
c0007b4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	01 e8                	add    eax,ebp
c0007b54:	e8 5b 9f ff ff       	call   c0001ab4 <st_dword>
c0007b59:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b5e:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b66:	75 e4                	jne    c0007b4c <f_mkfs+0x9fe>
c0007b68:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b6b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b6f:	83 c6 02             	add    esi,0x2
c0007b72:	83 d7 00             	adc    edi,0x0
c0007b75:	83 ec 0c             	sub    esp,0xc
c0007b78:	6a 01                	push   0x1
c0007b7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b82:	55                   	push   ebp
c0007b83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b87:	e8 7d 9e ff ff       	call   c0001a09 <disk_write>
c0007b8c:	83 c4 20             	add    esp,0x20
c0007b8f:	85 c0                	test   eax,eax
c0007b91:	0f 85 68 06 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c0007b97:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b9c:	74 0d                	je     c0007bab <f_mkfs+0xa5d>
c0007b9e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ba6:	e9 43 fd ff ff       	jmp    c00078ee <f_mkfs+0x7a0>
c0007bab:	b1 07                	mov    cl,0x7
c0007bad:	e9 e3 05 00 00       	jmp    c0008195 <f_mkfs+0x1047>
c0007bb2:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bb7:	0f 85 4f 02 00 00    	jne    c0007e0c <f_mkfs+0xcbe>
c0007bbd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bc2:	0f 86 22 02 00 00    	jbe    c0007dea <f_mkfs+0xc9c>
c0007bc8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bcd:	0f 85 81 06 00 00    	jne    c0008254 <f_mkfs+0x1106>
c0007bd3:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007bd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bda:	83 f8 40             	cmp    eax,0x40
c0007bdd:	0f 87 51 06 00 00    	ja     c0008234 <f_mkfs+0x10e6>
c0007be3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007be7:	85 ff                	test   edi,edi
c0007be9:	75 1c                	jne    c0007c07 <f_mkfs+0xab9>
c0007beb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bee:	ba 00 8b 02 c0       	mov    edx,0xc0028b00
c0007bf3:	c1 e9 0c             	shr    ecx,0xc
c0007bf6:	bf 01 00 00 00       	mov    edi,0x1
c0007bfb:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bfe:	66 85 c0             	test   ax,ax
c0007c01:	0f 85 95 01 00 00    	jne    c0007d9c <f_mkfs+0xc4e>
c0007c07:	31 d2                	xor    edx,edx
c0007c09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c0c:	f7 f7                	div    edi
c0007c0e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c13:	0f 86 95 01 00 00    	jbe    c0007dae <f_mkfs+0xc60>
c0007c19:	83 c0 02             	add    eax,0x2
c0007c1c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c21:	01 c0                	add    eax,eax
c0007c23:	05 ff 01 00 00       	add    eax,0x1ff
c0007c28:	be 01 00 00 00       	mov    esi,0x1
c0007c2d:	c1 e8 09             	shr    eax,0x9
c0007c30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c38:	c1 e0 05             	shl    eax,0x5
c0007c3b:	c1 e8 09             	shr    eax,0x9
c0007c3e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c42:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c47:	31 d2                	xor    edx,edx
c0007c49:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c4d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c51:	89 f0                	mov    eax,esi
c0007c53:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c57:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c67:	31 d2                	xor    edx,edx
c0007c69:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c6e:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c72:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c76:	31 db                	xor    ebx,ebx
c0007c78:	01 c8                	add    eax,ecx
c0007c7a:	11 da                	adc    edx,ebx
c0007c7c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c80:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c84:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c88:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c8c:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c90:	f7 da                	neg    edx
c0007c92:	21 d1                	and    ecx,edx
c0007c94:	29 d9                	sub    ecx,ebx
c0007c96:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c9b:	0f 85 20 01 00 00    	jne    c0007dc1 <f_mkfs+0xc73>
c0007ca1:	31 db                	xor    ebx,ebx
c0007ca3:	01 ce                	add    esi,ecx
c0007ca5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ca9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cad:	31 d2                	xor    edx,edx
c0007caf:	89 f8                	mov    eax,edi
c0007cb1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cb5:	c1 e0 04             	shl    eax,0x4
c0007cb8:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cbc:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cc0:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cc4:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cc8:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ccb:	19 d3                	sbb    ebx,edx
c0007ccd:	0f 82 40 01 00 00    	jb     c0007e13 <f_mkfs+0xcc5>
c0007cd3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cd6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cda:	89 c8                	mov    eax,ecx
c0007cdc:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ce1:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ce5:	29 f0                	sub    eax,esi
c0007ce7:	29 d0                	sub    eax,edx
c0007ce9:	31 d2                	xor    edx,edx
c0007ceb:	f7 f7                	div    edi
c0007ced:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cf2:	89 c3                	mov    ebx,eax
c0007cf4:	0f 85 b8 fe ff ff    	jne    c0007bb2 <f_mkfs+0xa64>
c0007cfa:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cff:	0f 87 1d 01 00 00    	ja     c0007e22 <f_mkfs+0xcd4>
c0007d05:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d0a:	0f 85 03 01 00 00    	jne    c0007e13 <f_mkfs+0xcc5>
c0007d10:	83 ff 01             	cmp    edi,0x1
c0007d13:	0f 86 fa 00 00 00    	jbe    c0007e13 <f_mkfs+0xcc5>
c0007d19:	d1 ef                	shr    edi,1
c0007d1b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d1f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d26:	85 db                	test   ebx,ebx
c0007d28:	75 2d                	jne    c0007d57 <f_mkfs+0xc09>
c0007d2a:	89 cb                	mov    ebx,ecx
c0007d2c:	ba 10 8b 02 c0       	mov    edx,0xc0028b10
c0007d31:	c1 eb 11             	shr    ebx,0x11
c0007d34:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d3c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d3f:	66 85 c0             	test   ax,ax
c0007d42:	74 11                	je     c0007d55 <f_mkfs+0xc07>
c0007d44:	83 c2 02             	add    edx,0x2
c0007d47:	39 d8                	cmp    eax,ebx
c0007d49:	77 0a                	ja     c0007d55 <f_mkfs+0xc07>
c0007d4b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d4f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d53:	eb e7                	jmp    c0007d3c <f_mkfs+0xbee>
c0007d55:	31 db                	xor    ebx,ebx
c0007d57:	31 d2                	xor    edx,edx
c0007d59:	89 c8                	mov    eax,ecx
c0007d5b:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d5f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d66:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d6b:	c1 ea 09             	shr    edx,0x9
c0007d6e:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d73:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d77:	0f 87 96 00 00 00    	ja     c0007e13 <f_mkfs+0xcc5>
c0007d7d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d81:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d89:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d8d:	be 20 00 00 00       	mov    esi,0x20
c0007d92:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d97:	e9 a6 fe ff ff       	jmp    c0007c42 <f_mkfs+0xaf4>
c0007d9c:	83 c2 02             	add    edx,0x2
c0007d9f:	39 c8                	cmp    eax,ecx
c0007da1:	0f 87 60 fe ff ff    	ja     c0007c07 <f_mkfs+0xab9>
c0007da7:	01 ff                	add    edi,edi
c0007da9:	e9 4d fe ff ff       	jmp    c0007bfb <f_mkfs+0xaad>
c0007dae:	8d 04 40             	lea    eax,[eax+eax*2]
c0007db1:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007db6:	40                   	inc    eax
c0007db7:	d1 e8                	shr    eax,1
c0007db9:	83 c0 03             	add    eax,0x3
c0007dbc:	e9 62 fe ff ff       	jmp    c0007c23 <f_mkfs+0xad5>
c0007dc1:	31 d2                	xor    edx,edx
c0007dc3:	89 c8                	mov    eax,ecx
c0007dc5:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dc9:	85 d2                	test   edx,edx
c0007dcb:	74 0c                	je     c0007dd9 <f_mkfs+0xc8b>
c0007dcd:	49                   	dec    ecx
c0007dce:	46                   	inc    esi
c0007dcf:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007dd4:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dd9:	89 c8                	mov    eax,ecx
c0007ddb:	31 d2                	xor    edx,edx
c0007ddd:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007de1:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007de5:	e9 c3 fe ff ff       	jmp    c0007cad <f_mkfs+0xb5f>
c0007dea:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007def:	77 31                	ja     c0007e22 <f_mkfs+0xcd4>
c0007df1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df6:	75 1b                	jne    c0007e13 <f_mkfs+0xcc5>
c0007df8:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dff:	3d 80 00 00 00       	cmp    eax,0x80
c0007e04:	0f 86 d9 fd ff ff    	jbe    c0007be3 <f_mkfs+0xa95>
c0007e0a:	eb 07                	jmp    c0007e13 <f_mkfs+0xcc5>
c0007e0c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e11:	76 0a                	jbe    c0007e1d <f_mkfs+0xccf>
c0007e13:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e18:	e9 ff 03 00 00       	jmp    c000821c <f_mkfs+0x10ce>
c0007e1d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e22:	31 d2                	xor    edx,edx
c0007e24:	b9 00 02 00 00       	mov    ecx,0x200
c0007e29:	89 e8                	mov    eax,ebp
c0007e2b:	e8 a2 9c ff ff       	call   c0001ad2 <mem_set>
c0007e30:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e35:	ba 22 8c 02 c0       	mov    edx,0xc0028c22
c0007e3a:	89 e8                	mov    eax,ebp
c0007e3c:	e8 7c 9c ff ff       	call   c0001abd <mem_cpy>
c0007e41:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e44:	ba 00 02 00 00       	mov    edx,0x200
c0007e49:	e8 62 9c ff ff       	call   c0001ab0 <st_word>
c0007e4e:	89 f8                	mov    eax,edi
c0007e50:	0f b7 d6             	movzx  edx,si
c0007e53:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e56:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e59:	e8 52 9c ff ff       	call   c0001ab0 <st_word>
c0007e5e:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e62:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e67:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e6a:	75 08                	jne    c0007e74 <f_mkfs+0xd26>
c0007e6c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e74:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e7b:	e8 30 9c ff ff       	call   c0001ab0 <st_word>
c0007e80:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e85:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e89:	39 d0                	cmp    eax,edx
c0007e8b:	b8 00 00 00 00       	mov    eax,0x0
c0007e90:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e94:	72 0a                	jb     c0007ea0 <f_mkfs+0xd52>
c0007e96:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e99:	e8 12 9c ff ff       	call   c0001ab0 <st_word>
c0007e9e:	eb 08                	jmp    c0007ea8 <f_mkfs+0xd5a>
c0007ea0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ea3:	e8 0c 9c ff ff       	call   c0001ab4 <st_dword>
c0007ea8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eab:	ba 3f 00 00 00       	mov    edx,0x3f
c0007eb0:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007eb4:	e8 f7 9b ff ff       	call   c0001ab0 <st_word>
c0007eb9:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ebc:	ba ff 00 00 00       	mov    edx,0xff
c0007ec1:	e8 ea 9b ff ff       	call   c0001ab0 <st_word>
c0007ec6:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ec9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ecd:	e8 e2 9b ff ff       	call   c0001ab4 <st_dword>
c0007ed2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ed7:	75 57                	jne    c0007f30 <f_mkfs+0xde2>
c0007ed9:	8d 45 43             	lea    eax,[ebp+0x43]
c0007edc:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ee1:	e8 ce 9b ff ff       	call   c0001ab4 <st_dword>
c0007ee6:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ee9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eed:	e8 c2 9b ff ff       	call   c0001ab4 <st_dword>
c0007ef2:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ef5:	ba 02 00 00 00       	mov    edx,0x2
c0007efa:	e8 b5 9b ff ff       	call   c0001ab4 <st_dword>
c0007eff:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f02:	ba 01 00 00 00       	mov    edx,0x1
c0007f07:	e8 a4 9b ff ff       	call   c0001ab0 <st_word>
c0007f0c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f0f:	ba 06 00 00 00       	mov    edx,0x6
c0007f14:	e8 97 9b ff ff       	call   c0001ab0 <st_word>
c0007f19:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f1d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f21:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f24:	b9 13 00 00 00       	mov    ecx,0x13
c0007f29:	ba 2e 8c 02 c0       	mov    edx,0xc0028c2e
c0007f2e:	eb 2f                	jmp    c0007f5f <f_mkfs+0xe11>
c0007f30:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f33:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f38:	e8 77 9b ff ff       	call   c0001ab4 <st_dword>
c0007f3d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f42:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f45:	e8 66 9b ff ff       	call   c0001ab0 <st_word>
c0007f4a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f4e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f52:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f55:	b9 13 00 00 00       	mov    ecx,0x13
c0007f5a:	ba 42 8c 02 c0       	mov    edx,0xc0028c42
c0007f5f:	e8 59 9b ff ff       	call   c0001abd <mem_cpy>
c0007f64:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f6f:	89 f0                	mov    eax,esi
c0007f71:	e8 3a 9b ff ff       	call   c0001ab0 <st_word>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f83:	55                   	push   ebp
c0007f84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f88:	e8 7c 9a ff ff       	call   c0001a09 <disk_write>
c0007f8d:	83 c4 20             	add    esp,0x20
c0007f90:	85 c0                	test   eax,eax
c0007f92:	0f 85 67 02 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c0007f98:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f9d:	0f 85 b7 00 00 00    	jne    c000805a <f_mkfs+0xf0c>
c0007fa3:	83 ec 0c             	sub    esp,0xc
c0007fa6:	6a 01                	push   0x1
c0007fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fb0:	83 c0 06             	add    eax,0x6
c0007fb3:	83 d2 00             	adc    edx,0x0
c0007fb6:	52                   	push   edx
c0007fb7:	50                   	push   eax
c0007fb8:	55                   	push   ebp
c0007fb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fbd:	e8 47 9a ff ff       	call   c0001a09 <disk_write>
c0007fc2:	83 c4 20             	add    esp,0x20
c0007fc5:	b9 00 02 00 00       	mov    ecx,0x200
c0007fca:	31 d2                	xor    edx,edx
c0007fcc:	89 e8                	mov    eax,ebp
c0007fce:	e8 ff 9a ff ff       	call   c0001ad2 <mem_set>
c0007fd3:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fd8:	89 e8                	mov    eax,ebp
c0007fda:	e8 d5 9a ff ff       	call   c0001ab4 <st_dword>
c0007fdf:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fe5:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fea:	e8 c5 9a ff ff       	call   c0001ab4 <st_dword>
c0007fef:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007ff2:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007ff8:	e8 b7 9a ff ff       	call   c0001ab4 <st_dword>
c0007ffd:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008003:	ba 02 00 00 00       	mov    edx,0x2
c0008008:	e8 a7 9a ff ff       	call   c0001ab4 <st_dword>
c000800d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008012:	89 f0                	mov    eax,esi
c0008014:	e8 97 9a ff ff       	call   c0001ab0 <st_word>
c0008019:	83 ec 0c             	sub    esp,0xc
c000801c:	6a 01                	push   0x1
c000801e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008022:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008026:	83 c0 07             	add    eax,0x7
c0008029:	83 d2 00             	adc    edx,0x0
c000802c:	52                   	push   edx
c000802d:	50                   	push   eax
c000802e:	55                   	push   ebp
c000802f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008033:	e8 d1 99 ff ff       	call   c0001a09 <disk_write>
c0008038:	83 c4 14             	add    esp,0x14
c000803b:	6a 01                	push   0x1
c000803d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008041:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008045:	83 c0 01             	add    eax,0x1
c0008048:	83 d2 00             	adc    edx,0x0
c000804b:	52                   	push   edx
c000804c:	50                   	push   eax
c000804d:	55                   	push   ebp
c000804e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008052:	e8 b2 99 ff ff       	call   c0001a09 <disk_write>
c0008057:	83 c4 20             	add    esp,0x20
c000805a:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008061:	31 d2                	xor    edx,edx
c0008063:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008069:	31 db                	xor    ebx,ebx
c000806b:	89 e8                	mov    eax,ebp
c000806d:	e8 60 9a ff ff       	call   c0001ad2 <mem_set>
c0008072:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008077:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000807e:	0f 94 c3             	sete   bl
c0008081:	4b                   	dec    ebx
c0008082:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008088:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000808e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008093:	75 21                	jne    c00080b6 <f_mkfs+0xf68>
c0008095:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000809a:	89 e8                	mov    eax,ebp
c000809c:	e8 13 9a ff ff       	call   c0001ab4 <st_dword>
c00080a1:	8d 45 04             	lea    eax,[ebp+0x4]
c00080a4:	83 ca ff             	or     edx,0xffffffff
c00080a7:	e8 08 9a ff ff       	call   c0001ab4 <st_dword>
c00080ac:	8d 45 08             	lea    eax,[ebp+0x8]
c00080af:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080b4:	eb 04                	jmp    c00080ba <f_mkfs+0xf6c>
c00080b6:	89 da                	mov    edx,ebx
c00080b8:	89 e8                	mov    eax,ebp
c00080ba:	e8 f5 99 ff ff       	call   c0001ab4 <st_dword>
c00080bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080c7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080cf:	39 ce                	cmp    esi,ecx
c00080d1:	76 02                	jbe    c00080d5 <f_mkfs+0xf87>
c00080d3:	89 ce                	mov    esi,ecx
c00080d5:	83 ec 0c             	sub    esp,0xc
c00080d8:	56                   	push   esi
c00080d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080dd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e1:	55                   	push   ebp
c00080e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080e6:	e8 1e 99 ff ff       	call   c0001a09 <disk_write>
c00080eb:	83 c4 20             	add    esp,0x20
c00080ee:	85 c0                	test   eax,eax
c00080f0:	0f 85 09 01 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c00080f6:	31 d2                	xor    edx,edx
c00080f8:	b9 00 02 00 00       	mov    ecx,0x200
c00080fd:	89 e8                	mov    eax,ebp
c00080ff:	e8 ce 99 ff ff       	call   c0001ad2 <mem_set>
c0008104:	31 d2                	xor    edx,edx
c0008106:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000810a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000810e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008112:	75 b3                	jne    c00080c7 <f_mkfs+0xf79>
c0008114:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008117:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000811e:	40                   	inc    eax
c000811f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008123:	0f 87 65 ff ff ff    	ja     c000808e <f_mkfs+0xf40>
c0008129:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000812e:	74 04                	je     c0008134 <f_mkfs+0xfe6>
c0008130:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008134:	89 fb                	mov    ebx,edi
c0008136:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000813a:	76 04                	jbe    c0008140 <f_mkfs+0xff2>
c000813c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008140:	83 ec 0c             	sub    esp,0xc
c0008143:	53                   	push   ebx
c0008144:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008148:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000814c:	55                   	push   ebp
c000814d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008151:	e8 b3 98 ff ff       	call   c0001a09 <disk_write>
c0008156:	83 c4 20             	add    esp,0x20
c0008159:	85 c0                	test   eax,eax
c000815b:	0f 85 9e 00 00 00    	jne    c00081ff <f_mkfs+0x10b1>
c0008161:	31 d2                	xor    edx,edx
c0008163:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008167:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000816b:	29 df                	sub    edi,ebx
c000816d:	75 c5                	jne    c0008134 <f_mkfs+0xfe6>
c000816f:	b1 0c                	mov    cl,0xc
c0008171:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008176:	74 1d                	je     c0008195 <f_mkfs+0x1047>
c0008178:	b8 ff ff 00 00       	mov    eax,0xffff
c000817d:	b1 06                	mov    cl,0x6
c000817f:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008183:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008187:	72 0c                	jb     c0008195 <f_mkfs+0x1047>
c0008189:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000818e:	0f 94 c1             	sete   cl
c0008191:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008195:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000819a:	75 4c                	jne    c00081e8 <f_mkfs+0x109a>
c000819c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081a0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081a4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081ab:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081b2:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081bd:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081c8:	0f b6 c9             	movzx  ecx,cl
c00081cb:	83 ec 0c             	sub    esp,0xc
c00081ce:	55                   	push   ebp
c00081cf:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081da:	e8 2f c2 ff ff       	call   c000440e <create_partition>
c00081df:	83 c4 10             	add    esp,0x10
c00081e2:	89 c3                	mov    ebx,eax
c00081e4:	85 c0                	test   eax,eax
c00081e6:	75 34                	jne    c000821c <f_mkfs+0x10ce>
c00081e8:	31 db                	xor    ebx,ebx
c00081ea:	50                   	push   eax
c00081eb:	6a 00                	push   0x0
c00081ed:	6a 00                	push   0x0
c00081ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081f3:	e8 27 98 ff ff       	call   c0001a1f <disk_ioctl>
c00081f8:	83 c4 10             	add    esp,0x10
c00081fb:	85 c0                	test   eax,eax
c00081fd:	74 1d                	je     c000821c <f_mkfs+0x10ce>
c00081ff:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008207:	75 0c                	jne    c0008215 <f_mkfs+0x10c7>
c0008209:	83 ec 0c             	sub    esp,0xc
c000820c:	55                   	push   ebp
c000820d:	e8 75 00 00 00       	call   c0008287 <ff_memfree>
c0008212:	83 c4 10             	add    esp,0x10
c0008215:	bb 01 00 00 00       	mov    ebx,0x1
c000821a:	eb 48                	jmp    c0008264 <f_mkfs+0x1116>
c000821c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008224:	75 3e                	jne    c0008264 <f_mkfs+0x1116>
c0008226:	83 ec 0c             	sub    esp,0xc
c0008229:	55                   	push   ebp
c000822a:	e8 58 00 00 00       	call   c0008287 <ff_memfree>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	eb 30                	jmp    c0008264 <f_mkfs+0x1116>
c0008234:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008239:	0f 85 eb fa ff ff    	jne    c0007d2a <f_mkfs+0xbdc>
c000823f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008243:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008249:	0f 86 b8 f9 ff ff    	jbe    c0007c07 <f_mkfs+0xab9>
c000824f:	e9 bf fb ff ff       	jmp    c0007e13 <f_mkfs+0xcc5>
c0008254:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008259:	0f 85 c0 fa ff ff    	jne    c0007d1f <f_mkfs+0xbd1>
c000825f:	e9 af fb ff ff       	jmp    c0007e13 <f_mkfs+0xcc5>
c0008264:	81 c4 9c 00 00 00    	add    esp,0x9c
c000826a:	89 d8                	mov    eax,ebx
c000826c:	5b                   	pop    ebx
c000826d:	5e                   	pop    esi
c000826e:	5f                   	pop    edi
c000826f:	5d                   	pop    ebp
c0008270:	c3                   	ret    

c0008271 <ff_memalloc>:
c0008271:	83 ec 0c             	sub    esp,0xc
c0008274:	83 ec 0c             	sub    esp,0xc
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 98 73 00 00       	call   c000f618 <malloc>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    

c0008287 <ff_memfree>:
c0008287:	83 ec 0c             	sub    esp,0xc
c000828a:	83 ec 0c             	sub    esp,0xc
c000828d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008291:	e8 92 73 00 00       	call   c000f628 <free>
c0008296:	83 c4 10             	add    esp,0x10
c0008299:	90                   	nop
c000829a:	83 c4 0c             	add    esp,0xc
c000829d:	c3                   	ret    

c000829e <ff_uni2oem>:
c000829e:	83 ec 14             	sub    esp,0x14
c00082a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082a5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082a9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b0:	c7 44 24 0c 60 8f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028f60
c00082b8:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082bd:	77 0b                	ja     c00082ca <ff_uni2oem+0x2c>
c00082bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082c3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c8:	eb 5b                	jmp    c0008325 <ff_uni2oem+0x87>
c00082ca:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082d2:	77 51                	ja     c0008325 <ff_uni2oem+0x87>
c00082d4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082da:	75 49                	jne    c0008325 <ff_uni2oem+0x87>
c00082dc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082e3:	eb 0b                	jmp    c00082f0 <ff_uni2oem+0x52>
c00082e5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ea:	40                   	inc    eax
c00082eb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082f6:	77 1b                	ja     c0008313 <ff_uni2oem+0x75>
c00082f8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082fd:	01 c0                	add    eax,eax
c00082ff:	89 c2                	mov    edx,eax
c0008301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008305:	01 d0                	add    eax,edx
c0008307:	66 8b 00             	mov    ax,WORD PTR [eax]
c000830a:	0f b7 c0             	movzx  eax,ax
c000830d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008311:	75 d2                	jne    c00082e5 <ff_uni2oem+0x47>
c0008313:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008318:	83 e8 80             	sub    eax,0xffffff80
c000831b:	25 ff 00 00 00       	and    eax,0xff
c0008320:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008325:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000832a:	83 c4 14             	add    esp,0x14
c000832d:	c3                   	ret    

c000832e <ff_oem2uni>:
c000832e:	83 ec 18             	sub    esp,0x18
c0008331:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008335:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008339:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000833e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008342:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008349:	c7 44 24 10 60 8f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028f60
c0008351:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008357:	77 0b                	ja     c0008364 <ff_oem2uni+0x36>
c0008359:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000835d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008362:	eb 2d                	jmp    c0008391 <ff_oem2uni+0x63>
c0008364:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000836a:	75 25                	jne    c0008391 <ff_oem2uni+0x63>
c000836c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008373:	77 1c                	ja     c0008391 <ff_oem2uni+0x63>
c0008375:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000837a:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000837f:	01 c0                	add    eax,eax
c0008381:	89 c2                	mov    edx,eax
c0008383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008387:	01 d0                	add    eax,edx
c0008389:	66 8b 00             	mov    ax,WORD PTR [eax]
c000838c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008391:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008396:	83 c4 18             	add    esp,0x18
c0008399:	c3                   	ret    

c000839a <ff_wtoupper>:
c000839a:	83 ec 10             	sub    esp,0x10
c000839d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083a5:	0f 87 3e 01 00 00    	ja     c00084e9 <ff_wtoupper+0x14f>
c00083ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083af:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083b4:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083bb:	77 07                	ja     c00083c4 <ff_wtoupper+0x2a>
c00083bd:	b8 60 8d 02 c0       	mov    eax,0xc0028d60
c00083c2:	eb 05                	jmp    c00083c9 <ff_wtoupper+0x2f>
c00083c4:	b8 a0 8c 02 c0       	mov    eax,0xc0028ca0
c00083c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d1:	8d 50 02             	lea    edx,[eax+0x2]
c00083d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083db:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083e0:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083e6:	0f 84 f4 00 00 00    	je     c00084e0 <ff_wtoupper+0x146>
c00083ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083f1:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083f6:	0f 82 e4 00 00 00    	jb     c00084e0 <ff_wtoupper+0x146>
c00083fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008400:	8d 50 02             	lea    edx,[eax+0x2]
c0008403:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008407:	66 8b 00             	mov    ax,WORD PTR [eax]
c000840a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000840f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008414:	66 c1 e8 08          	shr    ax,0x8
c0008418:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000841d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008424:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008429:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000842e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008433:	01 ca                	add    edx,ecx
c0008435:	39 d0                	cmp    eax,edx
c0008437:	0f 8d 86 00 00 00    	jge    c00084c3 <ff_wtoupper+0x129>
c000843d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008442:	83 f8 08             	cmp    eax,0x8
c0008445:	0f 87 94 00 00 00    	ja     c00084df <ff_wtoupper+0x145>
c000844b:	8b 04 85 60 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73a0]
c0008452:	ff e0                	jmp    eax
c0008454:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008459:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000845e:	29 c2                	sub    edx,eax
c0008460:	89 d0                	mov    eax,edx
c0008462:	01 c0                	add    eax,eax
c0008464:	89 c2                	mov    edx,eax
c0008466:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000846a:	01 d0                	add    eax,edx
c000846c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000846f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008474:	eb 4b                	jmp    c00084c1 <ff_wtoupper+0x127>
c0008476:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000847b:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000847f:	83 e0 01             	and    eax,0x1
c0008482:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008487:	eb 38                	jmp    c00084c1 <ff_wtoupper+0x127>
c0008489:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000848f:	eb 30                	jmp    c00084c1 <ff_wtoupper+0x127>
c0008491:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008497:	eb 28                	jmp    c00084c1 <ff_wtoupper+0x127>
c0008499:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000849f:	eb 20                	jmp    c00084c1 <ff_wtoupper+0x127>
c00084a1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084a7:	eb 18                	jmp    c00084c1 <ff_wtoupper+0x127>
c00084a9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084af:	eb 10                	jmp    c00084c1 <ff_wtoupper+0x127>
c00084b1:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084b7:	eb 08                	jmp    c00084c1 <ff_wtoupper+0x127>
c00084b9:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084c0:	90                   	nop
c00084c1:	eb 1c                	jmp    c00084df <ff_wtoupper+0x145>
c00084c3:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084c9:	0f 85 fe fe ff ff    	jne    c00083cd <ff_wtoupper+0x33>
c00084cf:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084d4:	01 c0                	add    eax,eax
c00084d6:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084da:	e9 ee fe ff ff       	jmp    c00083cd <ff_wtoupper+0x33>
c00084df:	90                   	nop
c00084e0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084ed:	83 c4 10             	add    esp,0x10
c00084f0:	c3                   	ret    

c00084f1 <psrc_set_converter>:
c00084f1:	56                   	push   esi
c00084f2:	89 d6                	mov    esi,edx
c00084f4:	53                   	push   ebx
c00084f5:	89 c3                	mov    ebx,eax
c00084f7:	83 ec 0c             	sub    esp,0xc
c00084fa:	52                   	push   edx
c00084fb:	50                   	push   eax
c00084fc:	e8 6f 55 00 00       	call   c000da70 <sinc_set_converter>
c0008501:	83 c4 10             	add    esp,0x10
c0008504:	85 c0                	test   eax,eax
c0008506:	74 25                	je     c000852d <psrc_set_converter+0x3c>
c0008508:	50                   	push   eax
c0008509:	50                   	push   eax
c000850a:	56                   	push   esi
c000850b:	53                   	push   ebx
c000850c:	e8 17 5d 00 00       	call   c000e228 <zoh_set_converter>
c0008511:	83 c4 10             	add    esp,0x10
c0008514:	85 c0                	test   eax,eax
c0008516:	74 15                	je     c000852d <psrc_set_converter+0x3c>
c0008518:	51                   	push   ecx
c0008519:	51                   	push   ecx
c000851a:	56                   	push   esi
c000851b:	53                   	push   ebx
c000851c:	e8 0f 11 00 00       	call   c0009630 <linear_set_converter>
c0008521:	83 c4 10             	add    esp,0x10
c0008524:	ba 0a 00 00 00       	mov    edx,0xa
c0008529:	85 c0                	test   eax,eax
c000852b:	75 02                	jne    c000852f <psrc_set_converter+0x3e>
c000852d:	31 d2                	xor    edx,edx
c000852f:	89 d0                	mov    eax,edx
c0008531:	5a                   	pop    edx
c0008532:	5b                   	pop    ebx
c0008533:	5e                   	pop    esi
c0008534:	c3                   	ret    

c0008535 <src_delete>:
c0008535:	53                   	push   ebx
c0008536:	83 ec 08             	sub    esp,0x8
c0008539:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000853d:	85 db                	test   ebx,ebx
c000853f:	74 29                	je     c000856a <src_delete+0x35>
c0008541:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008544:	85 c0                	test   eax,eax
c0008546:	74 0c                	je     c0008554 <src_delete+0x1f>
c0008548:	83 ec 0c             	sub    esp,0xc
c000854b:	50                   	push   eax
c000854c:	e8 d7 70 00 00       	call   c000f628 <free>
c0008551:	83 c4 10             	add    esp,0x10
c0008554:	50                   	push   eax
c0008555:	6a 3c                	push   0x3c
c0008557:	6a 00                	push   0x0
c0008559:	53                   	push   ebx
c000855a:	e8 59 81 ff ff       	call   c00006b8 <memset>
c000855f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008562:	e8 c1 70 00 00       	call   c000f628 <free>
c0008567:	83 c4 10             	add    esp,0x10
c000856a:	31 c0                	xor    eax,eax
c000856c:	83 c4 08             	add    esp,0x8
c000856f:	5b                   	pop    ebx
c0008570:	c3                   	ret    

c0008571 <src_process>:
c0008571:	55                   	push   ebp
c0008572:	57                   	push   edi
c0008573:	56                   	push   esi
c0008574:	53                   	push   ebx
c0008575:	83 ec 1c             	sub    esp,0x1c
c0008578:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000857c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008580:	85 ed                	test   ebp,ebp
c0008582:	0f 84 6f 01 00 00    	je     c00086f7 <src_process+0x186>
c0008588:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000858c:	0f 84 6c 01 00 00    	je     c00086fe <src_process+0x18d>
c0008592:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008596:	0f 84 62 01 00 00    	je     c00086fe <src_process+0x18d>
c000859c:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00085a3:	0f 85 5c 01 00 00    	jne    c0008705 <src_process+0x194>
c00085a9:	85 db                	test   ebx,ebx
c00085ab:	0f 84 5b 01 00 00    	je     c000870c <src_process+0x19b>
c00085b1:	8b 33                	mov    esi,DWORD PTR [ebx]
c00085b3:	85 f6                	test   esi,esi
c00085b5:	0f 84 58 01 00 00    	je     c0008713 <src_process+0x1a2>
c00085bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00085be:	85 ff                	test   edi,edi
c00085c0:	0f 84 4d 01 00 00    	je     c0008713 <src_process+0x1a2>
c00085c6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085c9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00085cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085d4:	68 00 00 70 3f       	push   0x3f700000
c00085d9:	6a 00                	push   0x0
c00085db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085e3:	e8 37 f6 01 00       	call   c0027c1f <__ltdf2>
c00085e8:	83 c4 10             	add    esp,0x10
c00085eb:	85 c0                	test   eax,eax
c00085ed:	0f 88 27 01 00 00    	js     c000871a <src_process+0x1a9>
c00085f3:	68 00 00 70 40       	push   0x40700000
c00085f8:	6a 00                	push   0x0
c00085fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008602:	e8 fa f5 01 00       	call   c0027c01 <__gtdf2>
c0008607:	83 c4 10             	add    esp,0x10
c000860a:	85 c0                	test   eax,eax
c000860c:	0f 8f 08 01 00 00    	jg     c000871a <src_process+0x1a9>
c0008612:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008616:	79 07                	jns    c000861f <src_process+0xae>
c0008618:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000861f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008622:	85 c0                	test   eax,eax
c0008624:	79 50                	jns    c0008676 <src_process+0x105>
c0008626:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000862d:	39 fe                	cmp    esi,edi
c000862f:	72 37                	jb     c0008668 <src_process+0xf7>
c0008631:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008638:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000863f:	68 00 00 70 3f       	push   0x3f700000
c0008644:	6a 00                	push   0x0
c0008646:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008649:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000864c:	e8 ce f5 01 00       	call   c0027c1f <__ltdf2>
c0008651:	83 c4 10             	add    esp,0x10
c0008654:	85 c0                	test   eax,eax
c0008656:	79 37                	jns    c000868f <src_process+0x11e>
c0008658:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000865c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008660:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008663:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008666:	eb 27                	jmp    c000868f <src_process+0x11e>
c0008668:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000866b:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000866f:	8d 04 86             	lea    eax,[esi+eax*4]
c0008672:	39 c7                	cmp    edi,eax
c0008674:	eb 0d                	jmp    c0008683 <src_process+0x112>
c0008676:	39 fe                	cmp    esi,edi
c0008678:	72 ee                	jb     c0008668 <src_process+0xf7>
c000867a:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000867e:	8d 04 87             	lea    eax,[edi+eax*4]
c0008681:	39 c6                	cmp    esi,eax
c0008683:	73 ac                	jae    c0008631 <src_process+0xc0>
c0008685:	b8 10 00 00 00       	mov    eax,0x10
c000868a:	e9 90 00 00 00       	jmp    c000871f <src_process+0x1ae>
c000868f:	83 ec 10             	sub    esp,0x10
c0008692:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008695:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008698:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000869b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000869e:	e8 81 ec 01 00       	call   c0027324 <__subdf3>
c00086a3:	83 c4 18             	add    esp,0x18
c00086a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086ae:	52                   	push   edx
c00086af:	50                   	push   eax
c00086b0:	e8 fb f6 01 00       	call   c0027db0 <fabs>
c00086b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086bd:	83 c4 10             	add    esp,0x10
c00086c0:	68 af 03 d2 3c       	push   0x3cd203af
c00086c5:	68 16 56 e7 9e       	push   0x9ee75616
c00086ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086d2:	e8 48 f5 01 00       	call   c0027c1f <__ltdf2>
c00086d7:	83 c4 10             	add    esp,0x10
c00086da:	85 c0                	test   eax,eax
c00086dc:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086e0:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086e4:	79 05                	jns    c00086eb <src_process+0x17a>
c00086e6:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086e9:	eb 03                	jmp    c00086ee <src_process+0x17d>
c00086eb:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086ee:	83 c4 1c             	add    esp,0x1c
c00086f1:	5b                   	pop    ebx
c00086f2:	5e                   	pop    esi
c00086f3:	5f                   	pop    edi
c00086f4:	5d                   	pop    ebp
c00086f5:	ff e0                	jmp    eax
c00086f7:	b8 02 00 00 00       	mov    eax,0x2
c00086fc:	eb 21                	jmp    c000871f <src_process+0x1ae>
c00086fe:	b8 07 00 00 00       	mov    eax,0x7
c0008703:	eb 1a                	jmp    c000871f <src_process+0x1ae>
c0008705:	b8 12 00 00 00       	mov    eax,0x12
c000870a:	eb 13                	jmp    c000871f <src_process+0x1ae>
c000870c:	b8 03 00 00 00       	mov    eax,0x3
c0008711:	eb 0c                	jmp    c000871f <src_process+0x1ae>
c0008713:	b8 04 00 00 00       	mov    eax,0x4
c0008718:	eb 05                	jmp    c000871f <src_process+0x1ae>
c000871a:	b8 06 00 00 00       	mov    eax,0x6
c000871f:	83 c4 1c             	add    esp,0x1c
c0008722:	5b                   	pop    ebx
c0008723:	5e                   	pop    esi
c0008724:	5f                   	pop    edi
c0008725:	5d                   	pop    ebp
c0008726:	c3                   	ret    

c0008727 <src_callback_read>:
c0008727:	55                   	push   ebp
c0008728:	57                   	push   edi
c0008729:	56                   	push   esi
c000872a:	53                   	push   ebx
c000872b:	83 ec 3c             	sub    esp,0x3c
c000872e:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008732:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008736:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000873a:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000873e:	85 ed                	test   ebp,ebp
c0008740:	0f 8e 52 01 00 00    	jle    c0008898 <src_callback_read+0x171>
c0008746:	85 db                	test   ebx,ebx
c0008748:	0f 84 4a 01 00 00    	je     c0008898 <src_callback_read+0x171>
c000874e:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008755:	74 0c                	je     c0008763 <src_callback_read+0x3c>
c0008757:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000875e:	e9 35 01 00 00       	jmp    c0008898 <src_callback_read+0x171>
c0008763:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008767:	75 0c                	jne    c0008775 <src_callback_read+0x4e>
c0008769:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008770:	e9 23 01 00 00       	jmp    c0008898 <src_callback_read+0x171>
c0008775:	51                   	push   ecx
c0008776:	6a 24                	push   0x24
c0008778:	6a 00                	push   0x0
c000877a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000877e:	50                   	push   eax
c000877f:	e8 34 7f ff ff       	call   c00006b8 <memset>
c0008784:	83 c4 10             	add    esp,0x10
c0008787:	68 00 00 70 3f       	push   0x3f700000
c000878c:	6a 00                	push   0x0
c000878e:	57                   	push   edi
c000878f:	56                   	push   esi
c0008790:	e8 8a f4 01 00       	call   c0027c1f <__ltdf2>
c0008795:	83 c4 10             	add    esp,0x10
c0008798:	85 c0                	test   eax,eax
c000879a:	78 3e                	js     c00087da <src_callback_read+0xb3>
c000879c:	68 00 00 70 40       	push   0x40700000
c00087a1:	6a 00                	push   0x0
c00087a3:	57                   	push   edi
c00087a4:	56                   	push   esi
c00087a5:	e8 57 f4 01 00       	call   c0027c01 <__gtdf2>
c00087aa:	83 c4 10             	add    esp,0x10
c00087ad:	85 c0                	test   eax,eax
c00087af:	7f 29                	jg     c00087da <src_callback_read+0xb3>
c00087b1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087b5:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087bd:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087c1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087c4:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087cc:	31 f6                	xor    esi,esi
c00087ce:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087d5:	e9 97 00 00 00       	jmp    c0008871 <src_callback_read+0x14a>
c00087da:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087e1:	e9 b2 00 00 00       	jmp    c0008898 <src_callback_read+0x171>
c00087e6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087ee:	52                   	push   edx
c00087ef:	52                   	push   edx
c00087f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087f4:	50                   	push   eax
c00087f5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087f8:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008803:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008807:	83 c4 10             	add    esp,0x10
c000880a:	85 c0                	test   eax,eax
c000880c:	75 08                	jne    c0008816 <src_callback_read+0xef>
c000880e:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008816:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000881d:	50                   	push   eax
c000881e:	50                   	push   eax
c000881f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008823:	50                   	push   eax
c0008824:	53                   	push   ebx
c0008825:	e8 47 fd ff ff       	call   c0008571 <src_process>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008834:	85 c0                	test   eax,eax
c0008836:	75 49                	jne    c0008881 <src_callback_read+0x15a>
c0008838:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000883c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000883f:	89 f9                	mov    ecx,edi
c0008841:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008845:	0f af ca             	imul   ecx,edx
c0008848:	c1 e1 02             	shl    ecx,0x2
c000884b:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000884f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008853:	0f af d1             	imul   edx,ecx
c0008856:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000885a:	c1 e2 02             	shl    edx,0x2
c000885d:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008861:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008864:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008869:	74 12                	je     c000887d <src_callback_read+0x156>
c000886b:	39 d5                	cmp    ebp,edx
c000886d:	7e 14                	jle    c0008883 <src_callback_read+0x15c>
c000886f:	89 d6                	mov    esi,edx
c0008871:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008876:	75 9e                	jne    c0008816 <src_callback_read+0xef>
c0008878:	e9 69 ff ff ff       	jmp    c00087e6 <src_callback_read+0xbf>
c000887d:	85 c9                	test   ecx,ecx
c000887f:	75 ea                	jne    c000886b <src_callback_read+0x144>
c0008881:	89 f2                	mov    edx,esi
c0008883:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008887:	85 c0                	test   eax,eax
c0008889:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000888c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008890:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008893:	74 05                	je     c000889a <src_callback_read+0x173>
c0008895:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008898:	31 d2                	xor    edx,edx
c000889a:	83 c4 3c             	add    esp,0x3c
c000889d:	89 d0                	mov    eax,edx
c000889f:	5b                   	pop    ebx
c00088a0:	5e                   	pop    esi
c00088a1:	5f                   	pop    edi
c00088a2:	5d                   	pop    ebp
c00088a3:	c3                   	ret    

c00088a4 <src_set_ratio>:
c00088a4:	57                   	push   edi
c00088a5:	ba 02 00 00 00       	mov    edx,0x2
c00088aa:	56                   	push   esi
c00088ab:	53                   	push   ebx
c00088ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088b0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088b4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088b8:	85 db                	test   ebx,ebx
c00088ba:	74 4c                	je     c0008908 <src_set_ratio+0x64>
c00088bc:	ba 07 00 00 00       	mov    edx,0x7
c00088c1:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088c5:	74 41                	je     c0008908 <src_set_ratio+0x64>
c00088c7:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088cb:	74 3b                	je     c0008908 <src_set_ratio+0x64>
c00088cd:	68 00 00 70 3f       	push   0x3f700000
c00088d2:	6a 00                	push   0x0
c00088d4:	57                   	push   edi
c00088d5:	56                   	push   esi
c00088d6:	e8 44 f3 01 00       	call   c0027c1f <__ltdf2>
c00088db:	83 c4 10             	add    esp,0x10
c00088de:	ba 06 00 00 00       	mov    edx,0x6
c00088e3:	85 c0                	test   eax,eax
c00088e5:	78 21                	js     c0008908 <src_set_ratio+0x64>
c00088e7:	68 00 00 70 40       	push   0x40700000
c00088ec:	6a 00                	push   0x0
c00088ee:	57                   	push   edi
c00088ef:	56                   	push   esi
c00088f0:	e8 0c f3 01 00       	call   c0027c01 <__gtdf2>
c00088f5:	83 c4 10             	add    esp,0x10
c00088f8:	ba 06 00 00 00       	mov    edx,0x6
c00088fd:	85 c0                	test   eax,eax
c00088ff:	7f 07                	jg     c0008908 <src_set_ratio+0x64>
c0008901:	89 33                	mov    DWORD PTR [ebx],esi
c0008903:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008906:	31 d2                	xor    edx,edx
c0008908:	5b                   	pop    ebx
c0008909:	89 d0                	mov    eax,edx
c000890b:	5e                   	pop    esi
c000890c:	5f                   	pop    edi
c000890d:	c3                   	ret    

c000890e <src_get_channels>:
c000890e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008912:	b8 02 00 00 00       	mov    eax,0x2
c0008917:	85 d2                	test   edx,edx
c0008919:	74 14                	je     c000892f <src_get_channels+0x21>
c000891b:	b8 07 00 00 00       	mov    eax,0x7
c0008920:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008924:	74 09                	je     c000892f <src_get_channels+0x21>
c0008926:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c000892a:	74 03                	je     c000892f <src_get_channels+0x21>
c000892c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000892f:	c3                   	ret    

c0008930 <src_reset>:
c0008930:	53                   	push   ebx
c0008931:	b8 02 00 00 00       	mov    eax,0x2
c0008936:	83 ec 08             	sub    esp,0x8
c0008939:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000893d:	85 db                	test   ebx,ebx
c000893f:	74 36                	je     c0008977 <src_reset+0x47>
c0008941:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008944:	85 c0                	test   eax,eax
c0008946:	74 09                	je     c0008951 <src_reset+0x21>
c0008948:	83 ec 0c             	sub    esp,0xc
c000894b:	53                   	push   ebx
c000894c:	ff d0                	call   eax
c000894e:	83 c4 10             	add    esp,0x10
c0008951:	31 c0                	xor    eax,eax
c0008953:	31 d2                	xor    edx,edx
c0008955:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008958:	89 03                	mov    DWORD PTR [ebx],eax
c000895a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000895d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008960:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008967:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000896e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008975:	31 c0                	xor    eax,eax
c0008977:	83 c4 08             	add    esp,0x8
c000897a:	5b                   	pop    ebx
c000897b:	c3                   	ret    

c000897c <src_new>:
c000897c:	57                   	push   edi
c000897d:	56                   	push   esi
c000897e:	53                   	push   ebx
c000897f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008983:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008987:	85 f6                	test   esi,esi
c0008989:	74 73                	je     c00089fe <src_new+0x82>
c000898b:	85 ff                	test   edi,edi
c000898d:	7f 08                	jg     c0008997 <src_new+0x1b>
c000898f:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008995:	eb 1e                	jmp    c00089b5 <src_new+0x39>
c0008997:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000899d:	50                   	push   eax
c000899e:	50                   	push   eax
c000899f:	6a 3c                	push   0x3c
c00089a1:	6a 01                	push   0x1
c00089a3:	e8 a0 6c 00 00       	call   c000f648 <calloc>
c00089a8:	83 c4 10             	add    esp,0x10
c00089ab:	89 c3                	mov    ebx,eax
c00089ad:	85 c0                	test   eax,eax
c00089af:	75 10                	jne    c00089c1 <src_new+0x45>
c00089b1:	85 f6                	test   esi,esi
c00089b3:	75 04                	jne    c00089b9 <src_new+0x3d>
c00089b5:	31 db                	xor    ebx,ebx
c00089b7:	eb 4b                	jmp    c0008a04 <src_new+0x88>
c00089b9:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089bf:	eb 43                	jmp    c0008a04 <src_new+0x88>
c00089c1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089c4:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089cf:	e8 1d fb ff ff       	call   c00084f1 <psrc_set_converter>
c00089d4:	85 c0                	test   eax,eax
c00089d6:	74 18                	je     c00089f0 <src_new+0x74>
c00089d8:	85 f6                	test   esi,esi
c00089da:	74 06                	je     c00089e2 <src_new+0x66>
c00089dc:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089e2:	83 ec 0c             	sub    esp,0xc
c00089e5:	53                   	push   ebx
c00089e6:	31 db                	xor    ebx,ebx
c00089e8:	e8 3b 6c 00 00       	call   c000f628 <free>
c00089ed:	83 c4 10             	add    esp,0x10
c00089f0:	83 ec 0c             	sub    esp,0xc
c00089f3:	53                   	push   ebx
c00089f4:	e8 37 ff ff ff       	call   c0008930 <src_reset>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	eb 06                	jmp    c0008a04 <src_new+0x88>
c00089fe:	85 ff                	test   edi,edi
c0008a00:	7f 9b                	jg     c000899d <src_new+0x21>
c0008a02:	eb b1                	jmp    c00089b5 <src_new+0x39>
c0008a04:	89 d8                	mov    eax,ebx
c0008a06:	5b                   	pop    ebx
c0008a07:	5e                   	pop    esi
c0008a08:	5f                   	pop    edi
c0008a09:	c3                   	ret    

c0008a0a <src_callback_new>:
c0008a0a:	56                   	push   esi
c0008a0b:	53                   	push   ebx
c0008a0c:	53                   	push   ebx
c0008a0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a15:	85 f6                	test   esi,esi
c0008a17:	75 0e                	jne    c0008a27 <src_callback_new+0x1d>
c0008a19:	31 db                	xor    ebx,ebx
c0008a1b:	85 c0                	test   eax,eax
c0008a1d:	74 47                	je     c0008a66 <src_callback_new+0x5c>
c0008a1f:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a25:	eb 3f                	jmp    c0008a66 <src_callback_new+0x5c>
c0008a27:	85 c0                	test   eax,eax
c0008a29:	74 06                	je     c0008a31 <src_callback_new+0x27>
c0008a2b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a31:	51                   	push   ecx
c0008a32:	50                   	push   eax
c0008a33:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a37:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a3b:	e8 3c ff ff ff       	call   c000897c <src_new>
c0008a40:	83 c4 10             	add    esp,0x10
c0008a43:	89 c3                	mov    ebx,eax
c0008a45:	85 c0                	test   eax,eax
c0008a47:	74 1d                	je     c0008a66 <src_callback_new+0x5c>
c0008a49:	83 ec 0c             	sub    esp,0xc
c0008a4c:	50                   	push   eax
c0008a4d:	e8 de fe ff ff       	call   c0008930 <src_reset>
c0008a52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a56:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a5d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a60:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a63:	83 c4 10             	add    esp,0x10
c0008a66:	89 d8                	mov    eax,ebx
c0008a68:	5a                   	pop    edx
c0008a69:	5b                   	pop    ebx
c0008a6a:	5e                   	pop    esi
c0008a6b:	c3                   	ret    

c0008a6c <src_get_name>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a74:	53                   	push   ebx
c0008a75:	e8 d0 4f 00 00       	call   c000da4a <sinc_get_name>
c0008a7a:	83 c4 10             	add    esp,0x10
c0008a7d:	85 c0                	test   eax,eax
c0008a7f:	75 1d                	jne    c0008a9e <src_get_name+0x32>
c0008a81:	83 ec 0c             	sub    esp,0xc
c0008a84:	53                   	push   ebx
c0008a85:	e8 80 57 00 00       	call   c000e20a <zoh_get_name>
c0008a8a:	83 c4 10             	add    esp,0x10
c0008a8d:	85 c0                	test   eax,eax
c0008a8f:	75 0d                	jne    c0008a9e <src_get_name+0x32>
c0008a91:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a95:	83 c4 08             	add    esp,0x8
c0008a98:	5b                   	pop    ebx
c0008a99:	e9 74 0b 00 00       	jmp    c0009612 <linear_get_name>
c0008a9e:	83 c4 08             	add    esp,0x8
c0008aa1:	5b                   	pop    ebx
c0008aa2:	c3                   	ret    

c0008aa3 <src_get_description>:
c0008aa3:	53                   	push   ebx
c0008aa4:	83 ec 14             	sub    esp,0x14
c0008aa7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008aab:	53                   	push   ebx
c0008aac:	e8 ac 4f 00 00       	call   c000da5d <sinc_get_description>
c0008ab1:	83 c4 10             	add    esp,0x10
c0008ab4:	85 c0                	test   eax,eax
c0008ab6:	75 1d                	jne    c0008ad5 <src_get_description+0x32>
c0008ab8:	83 ec 0c             	sub    esp,0xc
c0008abb:	53                   	push   ebx
c0008abc:	e8 58 57 00 00       	call   c000e219 <zoh_get_description>
c0008ac1:	83 c4 10             	add    esp,0x10
c0008ac4:	85 c0                	test   eax,eax
c0008ac6:	75 0d                	jne    c0008ad5 <src_get_description+0x32>
c0008ac8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008acc:	83 c4 08             	add    esp,0x8
c0008acf:	5b                   	pop    ebx
c0008ad0:	e9 4c 0b 00 00       	jmp    c0009621 <linear_get_description>
c0008ad5:	83 c4 08             	add    esp,0x8
c0008ad8:	5b                   	pop    ebx
c0008ad9:	c3                   	ret    

c0008ada <src_get_version>:
c0008ada:	b8 60 90 02 c0       	mov    eax,0xc0029060
c0008adf:	c3                   	ret    

c0008ae0 <src_is_valid_ratio>:
c0008ae0:	83 ec 1c             	sub    esp,0x1c
c0008ae3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008ae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008aeb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008aef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008af3:	68 00 00 70 3f       	push   0x3f700000
c0008af8:	6a 00                	push   0x0
c0008afa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008afe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b02:	e8 18 f1 01 00       	call   c0027c1f <__ltdf2>
c0008b07:	83 c4 10             	add    esp,0x10
c0008b0a:	31 d2                	xor    edx,edx
c0008b0c:	85 c0                	test   eax,eax
c0008b0e:	78 1e                	js     c0008b2e <src_is_valid_ratio+0x4e>
c0008b10:	68 00 00 70 40       	push   0x40700000
c0008b15:	6a 00                	push   0x0
c0008b17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b1f:	e8 dd f0 01 00       	call   c0027c01 <__gtdf2>
c0008b24:	31 d2                	xor    edx,edx
c0008b26:	83 c4 10             	add    esp,0x10
c0008b29:	85 c0                	test   eax,eax
c0008b2b:	0f 9e c2             	setle  dl
c0008b2e:	89 d0                	mov    eax,edx
c0008b30:	83 c4 1c             	add    esp,0x1c
c0008b33:	c3                   	ret    

c0008b34 <src_error>:
c0008b34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b38:	31 c0                	xor    eax,eax
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 03                	je     c0008b41 <src_error+0xd>
c0008b3e:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b41:	c3                   	ret    

c0008b42 <src_strerror>:
c0008b42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b46:	31 c0                	xor    eax,eax
c0008b48:	83 fa 17             	cmp    edx,0x17
c0008b4b:	77 07                	ja     c0008b54 <src_strerror+0x12>
c0008b4d:	8b 04 95 c0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b40]
c0008b54:	c3                   	ret    

c0008b55 <src_simple>:
c0008b55:	56                   	push   esi
c0008b56:	53                   	push   ebx
c0008b57:	83 ec 18             	sub    esp,0x18
c0008b5a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b5e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b62:	50                   	push   eax
c0008b63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b67:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b6b:	e8 0c fe ff ff       	call   c000897c <src_new>
c0008b70:	83 c4 10             	add    esp,0x10
c0008b73:	85 c0                	test   eax,eax
c0008b75:	75 06                	jne    c0008b7d <src_simple+0x28>
c0008b77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b7b:	eb 25                	jmp    c0008ba2 <src_simple+0x4d>
c0008b7d:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b84:	89 c3                	mov    ebx,eax
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	56                   	push   esi
c0008b89:	53                   	push   ebx
c0008b8a:	e8 e2 f9 ff ff       	call   c0008571 <src_process>
c0008b8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b96:	e8 9a f9 ff ff       	call   c0008535 <src_delete>
c0008b9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b9f:	83 c4 10             	add    esp,0x10
c0008ba2:	83 c4 14             	add    esp,0x14
c0008ba5:	5b                   	pop    ebx
c0008ba6:	5e                   	pop    esi
c0008ba7:	c3                   	ret    

c0008ba8 <src_short_to_float_array>:
c0008ba8:	53                   	push   ebx
c0008ba9:	83 ec 18             	sub    esp,0x18
c0008bac:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bb0:	85 db                	test   ebx,ebx
c0008bb2:	74 54                	je     c0008c08 <src_short_to_float_array+0x60>
c0008bb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bb8:	4b                   	dec    ebx
c0008bb9:	83 ec 0c             	sub    esp,0xc
c0008bbc:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008bc0:	50                   	push   eax
c0008bc1:	e8 ed ed 01 00       	call   c00279b3 <__floatsidf>
c0008bc6:	83 c4 10             	add    esp,0x10
c0008bc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bd1:	68 00 00 00 3f       	push   0x3f000000
c0008bd6:	6a 00                	push   0x0
c0008bd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008be0:	e8 6b e7 01 00       	call   c0027350 <__muldf3>
c0008be5:	59                   	pop    ecx
c0008be6:	59                   	pop    ecx
c0008be7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008beb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bf7:	e8 27 f0 01 00       	call   c0027c23 <__truncdfsf2>
c0008bfc:	83 c4 10             	add    esp,0x10
c0008bff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c03:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c06:	eb a8                	jmp    c0008bb0 <src_short_to_float_array+0x8>
c0008c08:	83 c4 18             	add    esp,0x18
c0008c0b:	5b                   	pop    ebx
c0008c0c:	c3                   	ret    

c0008c0d <src_float_to_short_array>:
c0008c0d:	56                   	push   esi
c0008c0e:	53                   	push   ebx
c0008c0f:	83 ec 14             	sub    esp,0x14
c0008c12:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c16:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c1a:	85 db                	test   ebx,ebx
c0008c1c:	0f 84 a4 00 00 00    	je     c0008cc6 <src_float_to_short_array+0xb9>
c0008c22:	83 ec 0c             	sub    esp,0xc
c0008c25:	4b                   	dec    ebx
c0008c26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c2a:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c2d:	e8 15 f1 01 00       	call   c0027d47 <__extendsfdf2>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c39:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c3d:	68 00 00 e0 41       	push   0x41e00000
c0008c42:	6a 00                	push   0x0
c0008c44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c4c:	e8 ff e6 01 00       	call   c0027350 <__muldf3>
c0008c51:	83 c4 10             	add    esp,0x10
c0008c54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c58:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c5c:	68 ff ff df 41       	push   0x41dfffff
c0008c61:	68 00 00 c0 ff       	push   0xffc00000
c0008c66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6e:	e8 aa ef 01 00       	call   c0027c1d <__gedf2>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	78 08                	js     c0008c82 <src_float_to_short_array+0x75>
c0008c7a:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c80:	eb 98                	jmp    c0008c1a <src_float_to_short_array+0xd>
c0008c82:	68 00 00 e0 c1       	push   0xc1e00000
c0008c87:	6a 00                	push   0x0
c0008c89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c91:	e8 8b ef 01 00       	call   c0027c21 <__ledf2>
c0008c96:	83 c4 10             	add    esp,0x10
c0008c99:	85 c0                	test   eax,eax
c0008c9b:	7f 0b                	jg     c0008ca8 <src_float_to_short_array+0x9b>
c0008c9d:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ca3:	e9 72 ff ff ff       	jmp    c0008c1a <src_float_to_short_array+0xd>
c0008ca8:	50                   	push   eax
c0008ca9:	50                   	push   eax
c0008caa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb2:	e8 19 f1 01 00       	call   c0027dd0 <lrint>
c0008cb7:	83 c4 10             	add    esp,0x10
c0008cba:	c1 f8 10             	sar    eax,0x10
c0008cbd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008cc1:	e9 54 ff ff ff       	jmp    c0008c1a <src_float_to_short_array+0xd>
c0008cc6:	83 c4 14             	add    esp,0x14
c0008cc9:	5b                   	pop    ebx
c0008cca:	5e                   	pop    esi
c0008ccb:	c3                   	ret    

c0008ccc <src_int_to_float_array>:
c0008ccc:	53                   	push   ebx
c0008ccd:	83 ec 18             	sub    esp,0x18
c0008cd0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cd4:	85 db                	test   ebx,ebx
c0008cd6:	74 52                	je     c0008d2a <src_int_to_float_array+0x5e>
c0008cd8:	83 ec 0c             	sub    esp,0xc
c0008cdb:	4b                   	dec    ebx
c0008cdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ce0:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ce3:	e8 cb ec 01 00       	call   c00279b3 <__floatsidf>
c0008ce8:	83 c4 10             	add    esp,0x10
c0008ceb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cf3:	68 00 00 00 3e       	push   0x3e000000
c0008cf8:	6a 00                	push   0x0
c0008cfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d02:	e8 49 e6 01 00       	call   c0027350 <__muldf3>
c0008d07:	59                   	pop    ecx
c0008d08:	59                   	pop    ecx
c0008d09:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008d0d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008d11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d19:	e8 05 ef 01 00       	call   c0027c23 <__truncdfsf2>
c0008d1e:	83 c4 10             	add    esp,0x10
c0008d21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d25:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d28:	eb aa                	jmp    c0008cd4 <src_int_to_float_array+0x8>
c0008d2a:	83 c4 18             	add    esp,0x18
c0008d2d:	5b                   	pop    ebx
c0008d2e:	c3                   	ret    

c0008d2f <src_float_to_int_array>:
c0008d2f:	56                   	push   esi
c0008d30:	53                   	push   ebx
c0008d31:	83 ec 14             	sub    esp,0x14
c0008d34:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d38:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d3c:	85 db                	test   ebx,ebx
c0008d3e:	0f 84 a2 00 00 00    	je     c0008de6 <src_float_to_int_array+0xb7>
c0008d44:	83 ec 0c             	sub    esp,0xc
c0008d47:	4b                   	dec    ebx
c0008d48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d4c:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d4f:	e8 f3 ef 01 00       	call   c0027d47 <__extendsfdf2>
c0008d54:	83 c4 10             	add    esp,0x10
c0008d57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d5f:	68 00 00 e0 41       	push   0x41e00000
c0008d64:	6a 00                	push   0x0
c0008d66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d6e:	e8 dd e5 01 00       	call   c0027350 <__muldf3>
c0008d73:	83 c4 10             	add    esp,0x10
c0008d76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d7e:	68 ff ff df 41       	push   0x41dfffff
c0008d83:	68 00 00 c0 ff       	push   0xffc00000
c0008d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d90:	e8 88 ee 01 00       	call   c0027c1d <__gedf2>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	85 c0                	test   eax,eax
c0008d9a:	78 09                	js     c0008da5 <src_float_to_int_array+0x76>
c0008d9c:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008da3:	eb 97                	jmp    c0008d3c <src_float_to_int_array+0xd>
c0008da5:	68 00 00 e0 c1       	push   0xc1e00000
c0008daa:	6a 00                	push   0x0
c0008dac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008db0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008db4:	e8 68 ee 01 00       	call   c0027c21 <__ledf2>
c0008db9:	83 c4 10             	add    esp,0x10
c0008dbc:	85 c0                	test   eax,eax
c0008dbe:	7f 0c                	jg     c0008dcc <src_float_to_int_array+0x9d>
c0008dc0:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008dc7:	e9 70 ff ff ff       	jmp    c0008d3c <src_float_to_int_array+0xd>
c0008dcc:	50                   	push   eax
c0008dcd:	50                   	push   eax
c0008dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dd6:	e8 f5 ef 01 00       	call   c0027dd0 <lrint>
c0008ddb:	83 c4 10             	add    esp,0x10
c0008dde:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008de1:	e9 56 ff ff ff       	jmp    c0008d3c <src_float_to_int_array+0xd>
c0008de6:	83 c4 14             	add    esp,0x14
c0008de9:	5b                   	pop    ebx
c0008dea:	5e                   	pop    esi
c0008deb:	c3                   	ret    

c0008dec <linear_vari_process>:
c0008dec:	55                   	push   ebp
c0008ded:	31 d2                	xor    edx,edx
c0008def:	57                   	push   edi
c0008df0:	56                   	push   esi
c0008df1:	53                   	push   ebx
c0008df2:	83 ec 3c             	sub    esp,0x3c
c0008df5:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008df9:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dfd:	0f 8e d3 07 00 00    	jle    c00095d6 <linear_vari_process+0x7ea>
c0008e03:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e07:	ba 05 00 00 00       	mov    edx,0x5
c0008e0c:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e0f:	85 db                	test   ebx,ebx
c0008e11:	0f 84 bf 07 00 00    	je     c00095d6 <linear_vari_process+0x7ea>
c0008e17:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e1a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e1e:	74 19                	je     c0008e39 <linear_vari_process+0x4d>
c0008e20:	31 d2                	xor    edx,edx
c0008e22:	39 c2                	cmp    edx,eax
c0008e24:	7d 0c                	jge    c0008e32 <linear_vari_process+0x46>
c0008e26:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e28:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e2b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e2f:	42                   	inc    edx
c0008e30:	eb f0                	jmp    c0008e22 <linear_vari_process+0x36>
c0008e32:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e39:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e3c:	0f af d0             	imul   edx,eax
c0008e3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e42:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e46:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e4d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e50:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e57:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e5b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e68:	68 00 00 70 3f       	push   0x3f700000
c0008e6d:	6a 00                	push   0x0
c0008e6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e77:	e8 a3 ed 01 00       	call   c0027c1f <__ltdf2>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	ba 16 00 00 00       	mov    edx,0x16
c0008e84:	85 c0                	test   eax,eax
c0008e86:	0f 88 4a 07 00 00    	js     c00095d6 <linear_vari_process+0x7ea>
c0008e8c:	68 00 00 70 40       	push   0x40700000
c0008e91:	6a 00                	push   0x0
c0008e93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e9b:	e8 61 ed 01 00       	call   c0027c01 <__gtdf2>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	ba 16 00 00 00       	mov    edx,0x16
c0008ea8:	85 c0                	test   eax,eax
c0008eaa:	0f 8f 26 07 00 00    	jg     c00095d6 <linear_vari_process+0x7ea>
c0008eb0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008eb4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008eb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008eba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ebe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ec2:	68 00 00 f0 3f       	push   0x3ff00000
c0008ec7:	6a 00                	push   0x0
c0008ec9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	e8 49 ed 01 00       	call   c0027c1f <__ltdf2>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	85 c0                	test   eax,eax
c0008edb:	0f 89 89 02 00 00    	jns    c000916a <linear_vari_process+0x37e>
c0008ee1:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ee4:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008ee7:	0f 8d 7d 02 00 00    	jge    c000916a <linear_vari_process+0x37e>
c0008eed:	83 ec 0c             	sub    esp,0xc
c0008ef0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ef3:	e8 bb ea 01 00       	call   c00279b3 <__floatsidf>
c0008ef8:	83 c4 10             	add    esp,0x10
c0008efb:	89 04 24             	mov    DWORD PTR [esp],eax
c0008efe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f02:	68 00 00 f0 3f       	push   0x3ff00000
c0008f07:	6a 00                	push   0x0
c0008f09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f11:	e8 bd dd 01 00       	call   c0026cd3 <__adddf3>
c0008f16:	83 c4 10             	add    esp,0x10
c0008f19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f21:	52                   	push   edx
c0008f22:	50                   	push   eax
c0008f23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f2b:	e8 20 e4 01 00       	call   c0027350 <__muldf3>
c0008f30:	5d                   	pop    ebp
c0008f31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f35:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f39:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f3c:	e8 72 ea 01 00       	call   c00279b3 <__floatsidf>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4c:	52                   	push   edx
c0008f4d:	50                   	push   eax
c0008f4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f56:	e8 78 dd 01 00       	call   c0026cd3 <__adddf3>
c0008f5b:	59                   	pop    ecx
c0008f5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f60:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f64:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f67:	e8 47 ea 01 00       	call   c00279b3 <__floatsidf>
c0008f6c:	83 c4 10             	add    esp,0x10
c0008f6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f77:	52                   	push   edx
c0008f78:	50                   	push   eax
c0008f79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f81:	e8 97 ec 01 00       	call   c0027c1d <__gedf2>
c0008f86:	83 c4 10             	add    esp,0x10
c0008f89:	85 c0                	test   eax,eax
c0008f8b:	0f 89 d9 01 00 00    	jns    c000916a <linear_vari_process+0x37e>
c0008f91:	85 ff                	test   edi,edi
c0008f93:	0f 8e f4 00 00 00    	jle    c000908d <linear_vari_process+0x2a1>
c0008f99:	83 ec 10             	sub    esp,0x10
c0008f9c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f9f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fa2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fa6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fa9:	ff 30                	push   DWORD PTR [eax]
c0008fab:	e8 74 e3 01 00       	call   c0027324 <__subdf3>
c0008fb0:	83 c4 18             	add    esp,0x18
c0008fb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fbb:	52                   	push   edx
c0008fbc:	50                   	push   eax
c0008fbd:	e8 ee ed 01 00       	call   c0027db0 <fabs>
c0008fc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fc6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008fca:	83 c4 10             	add    esp,0x10
c0008fcd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fd2:	68 23 42 92 0c       	push   0xc924223
c0008fd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fdb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fdf:	e8 1d ec 01 00       	call   c0027c01 <__gtdf2>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	85 c0                	test   eax,eax
c0008fe9:	0f 8e 9e 00 00 00    	jle    c000908d <linear_vari_process+0x2a1>
c0008fef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008ff6:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ff8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ffc:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fff:	52                   	push   edx
c0009000:	50                   	push   eax
c0009001:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009004:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009007:	e8 18 e3 01 00       	call   c0027324 <__subdf3>
c000900c:	59                   	pop    ecx
c000900d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009011:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009015:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009018:	e8 96 e9 01 00       	call   c00279b3 <__floatsidf>
c000901d:	83 c4 10             	add    esp,0x10
c0009020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009024:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009028:	52                   	push   edx
c0009029:	50                   	push   eax
c000902a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009032:	e8 19 e3 01 00       	call   c0027350 <__muldf3>
c0009037:	5f                   	pop    edi
c0009038:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000903c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009040:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009043:	e8 6b e9 01 00       	call   c00279b3 <__floatsidf>
c0009048:	83 c4 10             	add    esp,0x10
c000904b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000904f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009053:	52                   	push   edx
c0009054:	50                   	push   eax
c0009055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009059:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905d:	e8 d2 e5 01 00       	call   c0027634 <__divdf3>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009069:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000906d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009071:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000907d:	e8 51 dc 01 00       	call   c0026cd3 <__adddf3>
c0009082:	83 c4 10             	add    esp,0x10
c0009085:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009089:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000908d:	31 ff                	xor    edi,edi
c000908f:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009092:	0f 8e 9d 00 00 00    	jle    c0009135 <linear_vari_process+0x349>
c0009098:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000909b:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c000909f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00090a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00090ab:	52                   	push   edx
c00090ac:	52                   	push   edx
c00090ad:	55                   	push   ebp
c00090ae:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090b1:	47                   	inc    edi
c00090b2:	e8 b1 d5 01 00       	call   c0026668 <__subsf3>
c00090b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00090ba:	e8 88 ec 01 00       	call   c0027d47 <__extendsfdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090da:	e8 71 e2 01 00       	call   c0027350 <__muldf3>
c00090df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090ea:	e8 58 ec 01 00       	call   c0027d47 <__extendsfdf2>
c00090ef:	83 c4 10             	add    esp,0x10
c00090f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090f6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090fa:	52                   	push   edx
c00090fb:	50                   	push   eax
c00090fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009100:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009104:	e8 ca db 01 00       	call   c0026cd3 <__adddf3>
c0009109:	59                   	pop    ecx
c000910a:	5d                   	pop    ebp
c000910b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000910f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009113:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009117:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000911b:	e8 03 eb 01 00       	call   c0027c23 <__truncdfsf2>
c0009120:	83 c4 10             	add    esp,0x10
c0009123:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009126:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000912a:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000912d:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009130:	e9 5a ff ff ff       	jmp    c000908f <linear_vari_process+0x2a3>
c0009135:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009139:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913d:	68 00 00 f0 3f       	push   0x3ff00000
c0009142:	6a 00                	push   0x0
c0009144:	e8 eb e4 01 00       	call   c0027634 <__divdf3>
c0009149:	83 c4 10             	add    esp,0x10
c000914c:	89 04 24             	mov    DWORD PTR [esp],eax
c000914f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009153:	52                   	push   edx
c0009154:	50                   	push   eax
c0009155:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009159:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000915d:	e8 71 db 01 00       	call   c0026cd3 <__adddf3>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	e9 50 fd ff ff       	jmp    c0008eba <linear_vari_process+0xce>
c000916a:	50                   	push   eax
c000916b:	50                   	push   eax
c000916c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009170:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009174:	e8 57 ec 01 00       	call   c0027dd0 <lrint>
c0009179:	83 ec 0c             	sub    esp,0xc
c000917c:	50                   	push   eax
c000917d:	e8 31 e8 01 00       	call   c00279b3 <__floatsidf>
c0009182:	83 c4 10             	add    esp,0x10
c0009185:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009189:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000918d:	52                   	push   edx
c000918e:	50                   	push   eax
c000918f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009193:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009197:	e8 88 e1 01 00       	call   c0027324 <__subdf3>
c000919c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091a0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091a4:	83 c4 20             	add    esp,0x20
c00091a7:	6a 00                	push   0x0
c00091a9:	6a 00                	push   0x0
c00091ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091b3:	e8 67 ea 01 00       	call   c0027c1f <__ltdf2>
c00091b8:	83 c4 10             	add    esp,0x10
c00091bb:	85 c0                	test   eax,eax
c00091bd:	79 1e                	jns    c00091dd <linear_vari_process+0x3f1>
c00091bf:	68 00 00 f0 3f       	push   0x3ff00000
c00091c4:	6a 00                	push   0x0
c00091c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ce:	e8 00 db 01 00       	call   c0026cd3 <__adddf3>
c00091d3:	83 c4 10             	add    esp,0x10
c00091d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00091d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091dd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091e0:	83 ec 10             	sub    esp,0x10
c00091e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091f3:	e8 2c e1 01 00       	call   c0027324 <__subdf3>
c00091f8:	83 c4 18             	add    esp,0x18
c00091fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091ff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009203:	52                   	push   edx
c0009204:	50                   	push   eax
c0009205:	e8 c6 eb 01 00       	call   c0027dd0 <lrint>
c000920a:	83 c4 10             	add    esp,0x10
c000920d:	0f af f8             	imul   edi,eax
c0009210:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009213:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009216:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009219:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000921c:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000921f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009223:	0f 8d 13 03 00 00    	jge    c000953c <linear_vari_process+0x750>
c0009229:	83 ec 0c             	sub    esp,0xc
c000922c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000922f:	e8 7f e7 01 00       	call   c00279b3 <__floatsidf>
c0009234:	83 c4 10             	add    esp,0x10
c0009237:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000923b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000923f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009243:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009247:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924f:	e8 fc e0 01 00       	call   c0027350 <__muldf3>
c0009254:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009257:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000925b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925f:	e8 4f e7 01 00       	call   c00279b3 <__floatsidf>
c0009264:	83 c4 10             	add    esp,0x10
c0009267:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000926b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926f:	52                   	push   edx
c0009270:	50                   	push   eax
c0009271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009279:	e8 55 da 01 00       	call   c0026cd3 <__adddf3>
c000927e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009281:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009285:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009289:	e8 25 e7 01 00       	call   c00279b3 <__floatsidf>
c000928e:	83 c4 10             	add    esp,0x10
c0009291:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009295:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009299:	52                   	push   edx
c000929a:	50                   	push   eax
c000929b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000929f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a3:	e8 77 e9 01 00       	call   c0027c1f <__ltdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	85 c0                	test   eax,eax
c00092ad:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092b1:	0f 89 85 02 00 00    	jns    c000953c <linear_vari_process+0x750>
c00092b7:	85 c9                	test   ecx,ecx
c00092b9:	0f 8e f5 00 00 00    	jle    c00093b4 <linear_vari_process+0x5c8>
c00092bf:	83 ec 10             	sub    esp,0x10
c00092c2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092c5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092c8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092cc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092cf:	ff 30                	push   DWORD PTR [eax]
c00092d1:	e8 4e e0 01 00       	call   c0027324 <__subdf3>
c00092d6:	83 c4 18             	add    esp,0x18
c00092d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092e1:	52                   	push   edx
c00092e2:	50                   	push   eax
c00092e3:	e8 c8 ea 01 00       	call   c0027db0 <fabs>
c00092e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f0:	83 c4 10             	add    esp,0x10
c00092f3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092f8:	68 23 42 92 0c       	push   0xc924223
c00092fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009301:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009305:	e8 f7 e8 01 00       	call   c0027c01 <__gtdf2>
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	85 c0                	test   eax,eax
c000930f:	0f 8e 9f 00 00 00    	jle    c00093b4 <linear_vari_process+0x5c8>
c0009315:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009319:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000931c:	8b 00                	mov    eax,DWORD PTR [eax]
c000931e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009322:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009326:	52                   	push   edx
c0009327:	50                   	push   eax
c0009328:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000932b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000932e:	e8 f1 df 01 00       	call   c0027324 <__subdf3>
c0009333:	5f                   	pop    edi
c0009334:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009338:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000933f:	e8 6f e6 01 00       	call   c00279b3 <__floatsidf>
c0009344:	83 c4 10             	add    esp,0x10
c0009347:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000934b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934f:	52                   	push   edx
c0009350:	50                   	push   eax
c0009351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009359:	e8 f2 df 01 00       	call   c0027350 <__muldf3>
c000935e:	5d                   	pop    ebp
c000935f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009363:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009367:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000936a:	e8 44 e6 01 00       	call   c00279b3 <__floatsidf>
c000936f:	83 c4 10             	add    esp,0x10
c0009372:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009376:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000937a:	52                   	push   edx
c000937b:	50                   	push   eax
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009384:	e8 ab e2 01 00       	call   c0027634 <__divdf3>
c0009389:	83 c4 10             	add    esp,0x10
c000938c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009390:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a4:	e8 2a d9 01 00       	call   c0026cd3 <__adddf3>
c00093a9:	83 c4 10             	add    esp,0x10
c00093ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b4:	31 ff                	xor    edi,edi
c00093b6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093b9:	39 f8                	cmp    eax,edi
c00093bb:	0f 8e ac 00 00 00    	jle    c000946d <linear_vari_process+0x681>
c00093c1:	8b 16                	mov    edx,DWORD PTR [esi]
c00093c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093c6:	29 c1                	sub    ecx,eax
c00093c8:	89 c8                	mov    eax,ecx
c00093ca:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093cd:	01 f8                	add    eax,edi
c00093cf:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093d3:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093e0:	51                   	push   ecx
c00093e1:	01 f8                	add    eax,edi
c00093e3:	51                   	push   ecx
c00093e4:	47                   	inc    edi
c00093e5:	55                   	push   ebp
c00093e6:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093e9:	e8 7a d2 01 00       	call   c0026668 <__subsf3>
c00093ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00093f1:	e8 51 e9 01 00       	call   c0027d47 <__extendsfdf2>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009401:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009405:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009409:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009411:	e8 3a df 01 00       	call   c0027350 <__muldf3>
c0009416:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009419:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000941d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009421:	e8 21 e9 01 00       	call   c0027d47 <__extendsfdf2>
c0009426:	83 c4 10             	add    esp,0x10
c0009429:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000942d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009431:	52                   	push   edx
c0009432:	50                   	push   eax
c0009433:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009437:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000943b:	e8 93 d8 01 00       	call   c0026cd3 <__adddf3>
c0009440:	5d                   	pop    ebp
c0009441:	59                   	pop    ecx
c0009442:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009446:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000944a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000944e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009452:	e8 cc e7 01 00       	call   c0027c23 <__truncdfsf2>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000945e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009462:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009465:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009468:	e9 49 ff ff ff       	jmp    c00093b6 <linear_vari_process+0x5ca>
c000946d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009475:	68 00 00 f0 3f       	push   0x3ff00000
c000947a:	6a 00                	push   0x0
c000947c:	e8 b3 e1 01 00       	call   c0027634 <__divdf3>
c0009481:	83 c4 10             	add    esp,0x10
c0009484:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009488:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000948c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 32 d8 01 00       	call   c0026cd3 <__adddf3>
c00094a1:	59                   	pop    ecx
c00094a2:	5f                   	pop    edi
c00094a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094b3:	e8 18 e9 01 00       	call   c0027dd0 <lrint>
c00094b8:	83 ec 0c             	sub    esp,0xc
c00094bb:	50                   	push   eax
c00094bc:	e8 f2 e4 01 00       	call   c00279b3 <__floatsidf>
c00094c1:	83 c4 10             	add    esp,0x10
c00094c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094cc:	52                   	push   edx
c00094cd:	50                   	push   eax
c00094ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094d6:	e8 49 de 01 00       	call   c0027324 <__subdf3>
c00094db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094e3:	83 c4 20             	add    esp,0x20
c00094e6:	6a 00                	push   0x0
c00094e8:	6a 00                	push   0x0
c00094ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f2:	e8 28 e7 01 00       	call   c0027c1f <__ltdf2>
c00094f7:	83 c4 10             	add    esp,0x10
c00094fa:	85 c0                	test   eax,eax
c00094fc:	79 1e                	jns    c000951c <linear_vari_process+0x730>
c00094fe:	68 00 00 f0 3f       	push   0x3ff00000
c0009503:	6a 00                	push   0x0
c0009505:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009509:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000950d:	e8 c1 d7 01 00       	call   c0026cd3 <__adddf3>
c0009512:	83 c4 10             	add    esp,0x10
c0009515:	89 04 24             	mov    DWORD PTR [esp],eax
c0009518:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000951c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000951f:	83 ec 10             	sub    esp,0x10
c0009522:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000952e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009532:	e8 ed dd 01 00       	call   c0027324 <__subdf3>
c0009537:	e9 bc fc ff ff       	jmp    c00091f8 <linear_vari_process+0x40c>
c000953c:	39 fd                	cmp    ebp,edi
c000953e:	7d 38                	jge    c0009578 <linear_vari_process+0x78c>
c0009540:	83 ec 0c             	sub    esp,0xc
c0009543:	89 f8                	mov    eax,edi
c0009545:	29 e8                	sub    eax,ebp
c0009547:	99                   	cdq    
c0009548:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000954b:	50                   	push   eax
c000954c:	e8 62 e4 01 00       	call   c00279b3 <__floatsidf>
c0009551:	83 c4 10             	add    esp,0x10
c0009554:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009558:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000955c:	52                   	push   edx
c000955d:	50                   	push   eax
c000955e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009562:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009566:	e8 68 d7 01 00       	call   c0026cd3 <__adddf3>
c000956b:	83 c4 10             	add    esp,0x10
c000956e:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009571:	89 04 24             	mov    DWORD PTR [esp],eax
c0009574:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009578:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000957c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000957f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009583:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009586:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009589:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000958c:	85 c0                	test   eax,eax
c000958e:	7f 29                	jg     c00095b9 <linear_vari_process+0x7cd>
c0009590:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009598:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000959c:	89 01                	mov    DWORD PTR [ecx],eax
c000959e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00095a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095a4:	99                   	cdq    
c00095a5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095a8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095ae:	99                   	cdq    
c00095af:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095b2:	31 d2                	xor    edx,edx
c00095b4:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095b7:	eb 1d                	jmp    c00095d6 <linear_vari_process+0x7ea>
c00095b9:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095bc:	31 d2                	xor    edx,edx
c00095be:	29 c8                	sub    eax,ecx
c00095c0:	c1 e0 02             	shl    eax,0x2
c00095c3:	39 d1                	cmp    ecx,edx
c00095c5:	7e c9                	jle    c0009590 <linear_vari_process+0x7a4>
c00095c7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095c9:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095cc:	83 c0 04             	add    eax,0x4
c00095cf:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095d3:	42                   	inc    edx
c00095d4:	eb ed                	jmp    c00095c3 <linear_vari_process+0x7d7>
c00095d6:	83 c4 3c             	add    esp,0x3c
c00095d9:	89 d0                	mov    eax,edx
c00095db:	5b                   	pop    ebx
c00095dc:	5e                   	pop    esi
c00095dd:	5f                   	pop    edi
c00095de:	5d                   	pop    ebp
c00095df:	c3                   	ret    

c00095e0 <linear_reset>:
c00095e0:	83 ec 0c             	sub    esp,0xc
c00095e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095e7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095ea:	85 c0                	test   eax,eax
c00095ec:	74 20                	je     c000960e <linear_reset+0x2e>
c00095ee:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095f1:	83 c0 1c             	add    eax,0x1c
c00095f4:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095f7:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095fe:	c1 e2 02             	shl    edx,0x2
c0009601:	51                   	push   ecx
c0009602:	52                   	push   edx
c0009603:	6a 00                	push   0x0
c0009605:	50                   	push   eax
c0009606:	e8 ad 70 ff ff       	call   c00006b8 <memset>
c000960b:	83 c4 10             	add    esp,0x10
c000960e:	83 c4 0c             	add    esp,0xc
c0009611:	c3                   	ret    

c0009612 <linear_get_name>:
c0009612:	31 c0                	xor    eax,eax
c0009614:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009619:	75 05                	jne    c0009620 <linear_get_name+0xe>
c000961b:	b8 20 95 02 c0       	mov    eax,0xc0029520
c0009620:	c3                   	ret    

c0009621 <linear_get_description>:
c0009621:	31 c0                	xor    eax,eax
c0009623:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009628:	75 05                	jne    c000962f <linear_get_description+0xe>
c000962a:	b8 34 95 02 c0       	mov    eax,0xc0029534
c000962f:	c3                   	ret    

c0009630 <linear_set_converter>:
c0009630:	53                   	push   ebx
c0009631:	b8 0a 00 00 00       	mov    eax,0xa
c0009636:	83 ec 08             	sub    esp,0x8
c0009639:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000963d:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009642:	75 6e                	jne    c00096b2 <linear_set_converter+0x82>
c0009644:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009647:	85 c0                	test   eax,eax
c0009649:	74 13                	je     c000965e <linear_set_converter+0x2e>
c000964b:	83 ec 0c             	sub    esp,0xc
c000964e:	50                   	push   eax
c000964f:	e8 d4 5f 00 00       	call   c000f628 <free>
c0009654:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000965b:	83 c4 10             	add    esp,0x10
c000965e:	50                   	push   eax
c000965f:	50                   	push   eax
c0009660:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009663:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000966a:	50                   	push   eax
c000966b:	6a 01                	push   0x1
c000966d:	e8 d6 5f 00 00       	call   c000f648 <calloc>
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	89 c2                	mov    edx,eax
c0009677:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000967a:	85 d2                	test   edx,edx
c000967c:	b8 01 00 00 00       	mov    eax,0x1
c0009681:	74 2f                	je     c00096b2 <linear_set_converter+0x82>
c0009683:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009686:	83 ec 0c             	sub    esp,0xc
c0009689:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000968c:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009692:	c7 43 24 ec 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dec
c0009699:	c7 43 20 ec 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dec
c00096a0:	c7 43 28 e0 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095e0
c00096a7:	53                   	push   ebx
c00096a8:	e8 33 ff ff ff       	call   c00095e0 <linear_reset>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	31 c0                	xor    eax,eax
c00096b2:	83 c4 08             	add    esp,0x8
c00096b5:	5b                   	pop    ebx
c00096b6:	c3                   	ret    

c00096b7 <int_to_fp>:
c00096b7:	c1 e0 0c             	shl    eax,0xc
c00096ba:	c3                   	ret    

c00096bb <fp_to_int>:
c00096bb:	c1 f8 0c             	sar    eax,0xc
c00096be:	c3                   	ret    

c00096bf <fp_fraction_part>:
c00096bf:	25 ff 0f 00 00       	and    eax,0xfff
c00096c4:	c3                   	ret    

c00096c5 <fp_to_double>:
c00096c5:	83 ec 1c             	sub    esp,0x1c
c00096c8:	e8 f2 ff ff ff       	call   c00096bf <fp_fraction_part>
c00096cd:	83 ec 0c             	sub    esp,0xc
c00096d0:	50                   	push   eax
c00096d1:	e8 dd e2 01 00       	call   c00279b3 <__floatsidf>
c00096d6:	83 c4 10             	add    esp,0x10
c00096d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096e1:	68 00 00 30 3f       	push   0x3f300000
c00096e6:	6a 00                	push   0x0
c00096e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f0:	e8 5b dc 01 00       	call   c0027350 <__muldf3>
c00096f5:	83 c4 2c             	add    esp,0x2c
c00096f8:	c3                   	ret    

c00096f9 <calc_output_single>:
c00096f9:	55                   	push   ebp
c00096fa:	57                   	push   edi
c00096fb:	56                   	push   esi
c00096fc:	89 c6                	mov    esi,eax
c00096fe:	53                   	push   ebx
c00096ff:	89 d3                	mov    ebx,edx
c0009701:	83 ec 4c             	sub    esp,0x4c
c0009704:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009708:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000970b:	e8 a7 ff ff ff       	call   c00096b7 <int_to_fp>
c0009710:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009713:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009717:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000971b:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000971f:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009722:	99                   	cdq    
c0009723:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000972b:	f7 fb                	idiv   ebx
c000972d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009735:	89 da                	mov    edx,ebx
c0009737:	0f af d0             	imul   edx,eax
c000973a:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000973e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009742:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009746:	29 c2                	sub    edx,eax
c0009748:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000974b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000974f:	83 c5 04             	add    ebp,0x4
c0009752:	e8 6e ff ff ff       	call   c00096c5 <fp_to_double>
c0009757:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000975b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000975f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009763:	e8 53 ff ff ff       	call   c00096bb <fp_to_int>
c0009768:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000976b:	52                   	push   edx
c000976c:	52                   	push   edx
c000976d:	51                   	push   ecx
c000976e:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009772:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009776:	e8 ed ce 01 00       	call   c0026668 <__subsf3>
c000977b:	89 04 24             	mov    DWORD PTR [esp],eax
c000977e:	e8 c4 e5 01 00       	call   c0027d47 <__extendsfdf2>
c0009783:	83 c4 10             	add    esp,0x10
c0009786:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000978a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000978e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009792:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009796:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000979a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000979e:	e8 ad db 01 00       	call   c0027350 <__muldf3>
c00097a3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097a7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097ae:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097b2:	e8 90 e5 01 00       	call   c0027d47 <__extendsfdf2>
c00097b7:	83 c4 10             	add    esp,0x10
c00097ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c2:	52                   	push   edx
c00097c3:	50                   	push   eax
c00097c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cc:	e8 02 d5 01 00       	call   c0026cd3 <__adddf3>
c00097d1:	59                   	pop    ecx
c00097d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097da:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097e0:	e8 62 e5 01 00       	call   c0027d47 <__extendsfdf2>
c00097e5:	83 c4 10             	add    esp,0x10
c00097e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097ec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097f0:	52                   	push   edx
c00097f1:	50                   	push   eax
c00097f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097fa:	e8 51 db 01 00       	call   c0027350 <__muldf3>
c00097ff:	83 c4 10             	add    esp,0x10
c0009802:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009806:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000980a:	52                   	push   edx
c000980b:	50                   	push   eax
c000980c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009814:	e8 ba d4 01 00       	call   c0026cd3 <__adddf3>
c0009819:	83 c4 10             	add    esp,0x10
c000981c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009820:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009824:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009828:	0f 89 1d ff ff ff    	jns    c000974b <calc_output_single+0x52>
c000982e:	89 d9                	mov    ecx,ebx
c0009830:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009834:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009838:	89 dd                	mov    ebp,ebx
c000983a:	29 c8                	sub    eax,ecx
c000983c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009844:	99                   	cdq    
c0009845:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000984d:	f7 fb                	idiv   ebx
c000984f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009853:	0f af e8             	imul   ebp,eax
c0009856:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000985a:	01 cd                	add    ebp,ecx
c000985c:	8d 34 86             	lea    esi,[esi+eax*4]
c000985f:	89 e8                	mov    eax,ebp
c0009861:	83 ee 04             	sub    esi,0x4
c0009864:	e8 5c fe ff ff       	call   c00096c5 <fp_to_double>
c0009869:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000986d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009871:	89 e8                	mov    eax,ebp
c0009873:	29 dd                	sub    ebp,ebx
c0009875:	e8 41 fe ff ff       	call   c00096bb <fp_to_int>
c000987a:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000987d:	52                   	push   edx
c000987e:	52                   	push   edx
c000987f:	51                   	push   ecx
c0009880:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009884:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009888:	e8 db cd 01 00       	call   c0026668 <__subsf3>
c000988d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009890:	e8 b2 e4 01 00       	call   c0027d47 <__extendsfdf2>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000989c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098b0:	e8 9b da 01 00       	call   c0027350 <__muldf3>
c00098b5:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098bd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098c4:	e8 7e e4 01 00       	call   c0027d47 <__extendsfdf2>
c00098c9:	83 c4 10             	add    esp,0x10
c00098cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d4:	52                   	push   edx
c00098d5:	50                   	push   eax
c00098d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098de:	e8 f0 d3 01 00       	call   c0026cd3 <__adddf3>
c00098e3:	59                   	pop    ecx
c00098e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098e8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098ec:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098f2:	e8 50 e4 01 00       	call   c0027d47 <__extendsfdf2>
c00098f7:	83 c4 10             	add    esp,0x10
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	52                   	push   edx
c0009903:	50                   	push   eax
c0009904:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009908:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000990c:	e8 3f da 01 00       	call   c0027350 <__muldf3>
c0009911:	83 c4 10             	add    esp,0x10
c0009914:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009918:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000991c:	52                   	push   edx
c000991d:	50                   	push   eax
c000991e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009926:	e8 a8 d3 01 00       	call   c0026cd3 <__adddf3>
c000992b:	83 c4 10             	add    esp,0x10
c000992e:	85 ed                	test   ebp,ebp
c0009930:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009934:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009938:	0f 8f 21 ff ff ff    	jg     c000985f <calc_output_single+0x166>
c000993e:	52                   	push   edx
c000993f:	50                   	push   eax
c0009940:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009944:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009948:	e8 86 d3 01 00       	call   c0026cd3 <__adddf3>
c000994d:	83 c4 5c             	add    esp,0x5c
c0009950:	5b                   	pop    ebx
c0009951:	5e                   	pop    esi
c0009952:	5f                   	pop    edi
c0009953:	5d                   	pop    ebp
c0009954:	c3                   	ret    

c0009955 <calc_output_stereo>:
c0009955:	55                   	push   ebp
c0009956:	89 cd                	mov    ebp,ecx
c0009958:	57                   	push   edi
c0009959:	56                   	push   esi
c000995a:	53                   	push   ebx
c000995b:	89 c3                	mov    ebx,eax
c000995d:	83 ec 6c             	sub    esp,0x6c
c0009960:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009964:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000996b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009972:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009976:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000997a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000997d:	e8 35 fd ff ff       	call   c00096b7 <int_to_fp>
c0009982:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000998a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000998e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009996:	29 c8                	sub    eax,ecx
c0009998:	99                   	cdq    
c0009999:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000999d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099a1:	0f af d0             	imul   edx,eax
c00099a4:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099a7:	31 d2                	xor    edx,edx
c00099a9:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099ad:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099b1:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099b4:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099b8:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099bb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099bf:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099c3:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099c6:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099cb:	29 c1                	sub    ecx,eax
c00099cd:	31 c0                	xor    eax,eax
c00099cf:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099da:	83 c7 08             	add    edi,0x8
c00099dd:	e8 e3 fc ff ff       	call   c00096c5 <fp_to_double>
c00099e2:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099e6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ee:	e8 c8 fc ff ff       	call   c00096bb <fp_to_int>
c00099f3:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099f6:	52                   	push   edx
c00099f7:	52                   	push   edx
c00099f8:	51                   	push   ecx
c00099f9:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a01:	e8 62 cc 01 00       	call   c0026668 <__subsf3>
c0009a06:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a09:	e8 39 e3 01 00       	call   c0027d47 <__extendsfdf2>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a15:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a29:	e8 22 d9 01 00       	call   c0027350 <__muldf3>
c0009a2e:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a32:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a36:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a39:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a3d:	e8 05 e3 01 00       	call   c0027d47 <__extendsfdf2>
c0009a42:	83 c4 10             	add    esp,0x10
c0009a45:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a49:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4d:	52                   	push   edx
c0009a4e:	50                   	push   eax
c0009a4f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a53:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a57:	e8 77 d2 01 00       	call   c0026cd3 <__adddf3>
c0009a5c:	59                   	pop    ecx
c0009a5d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a61:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a65:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a6b:	e8 d7 e2 01 00       	call   c0027d47 <__extendsfdf2>
c0009a70:	83 c4 10             	add    esp,0x10
c0009a73:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a77:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a87:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a8b:	e8 c0 d8 01 00       	call   c0027350 <__muldf3>
c0009a90:	83 c4 10             	add    esp,0x10
c0009a93:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a97:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9b:	52                   	push   edx
c0009a9c:	50                   	push   eax
c0009a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aa5:	e8 29 d2 01 00       	call   c0026cd3 <__adddf3>
c0009aaa:	59                   	pop    ecx
c0009aab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aaf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ab3:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ab9:	e8 89 e2 01 00       	call   c0027d47 <__extendsfdf2>
c0009abe:	83 c4 10             	add    esp,0x10
c0009ac1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ac5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ac9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009acd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ad1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ad5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ad9:	e8 72 d8 01 00       	call   c0027350 <__muldf3>
c0009ade:	83 c4 10             	add    esp,0x10
c0009ae1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ae5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009ae9:	52                   	push   edx
c0009aea:	50                   	push   eax
c0009aeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009aef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009af3:	e8 db d1 01 00       	call   c0026cd3 <__adddf3>
c0009af8:	83 c4 10             	add    esp,0x10
c0009afb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009aff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b07:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b0b:	0f 89 c5 fe ff ff    	jns    c00099d6 <calc_output_stereo+0x81>
c0009b11:	29 e9                	sub    ecx,ebp
c0009b13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b17:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b1b:	29 c8                	sub    eax,ecx
c0009b1d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b25:	99                   	cdq    
c0009b26:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b2a:	31 d2                	xor    edx,edx
c0009b2c:	0f af f8             	imul   edi,eax
c0009b2f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b33:	40                   	inc    eax
c0009b34:	01 cf                	add    edi,ecx
c0009b36:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b3b:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b47:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b4a:	31 c0                	xor    eax,eax
c0009b4c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b50:	89 f8                	mov    eax,edi
c0009b52:	83 eb 08             	sub    ebx,0x8
c0009b55:	e8 6b fb ff ff       	call   c00096c5 <fp_to_double>
c0009b5a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b62:	89 f8                	mov    eax,edi
c0009b64:	e8 52 fb ff ff       	call   c00096bb <fp_to_int>
c0009b69:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b6c:	52                   	push   edx
c0009b6d:	52                   	push   edx
c0009b6e:	55                   	push   ebp
c0009b6f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b73:	e8 f0 ca 01 00       	call   c0026668 <__subsf3>
c0009b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7b:	e8 c7 e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009b80:	83 c4 10             	add    esp,0x10
c0009b83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b9b:	e8 b0 d7 01 00       	call   c0027350 <__muldf3>
c0009ba0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009ba3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bab:	e8 97 e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009bb0:	83 c4 10             	add    esp,0x10
c0009bb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbb:	52                   	push   edx
c0009bbc:	50                   	push   eax
c0009bbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bc5:	e8 09 d1 01 00       	call   c0026cd3 <__adddf3>
c0009bca:	59                   	pop    ecx
c0009bcb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bcf:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bd3:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bd9:	e8 69 e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009bde:	83 c4 10             	add    esp,0x10
c0009be1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009be5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009be9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bf9:	e8 52 d7 01 00       	call   c0027350 <__muldf3>
c0009bfe:	83 c4 10             	add    esp,0x10
c0009c01:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c05:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c09:	52                   	push   edx
c0009c0a:	50                   	push   eax
c0009c0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c13:	e8 bb d0 01 00       	call   c0026cd3 <__adddf3>
c0009c18:	5d                   	pop    ebp
c0009c19:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c1d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c21:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c27:	e8 1b e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009c2c:	83 c4 10             	add    esp,0x10
c0009c2f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c33:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c3f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c47:	e8 04 d7 01 00       	call   c0027350 <__muldf3>
c0009c4c:	83 c4 10             	add    esp,0x10
c0009c4f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c53:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c57:	52                   	push   edx
c0009c58:	50                   	push   eax
c0009c59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c61:	e8 6d d0 01 00       	call   c0026cd3 <__adddf3>
c0009c66:	83 c4 10             	add    esp,0x10
c0009c69:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c71:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c75:	85 ff                	test   edi,edi
c0009c77:	0f 8f d3 fe ff ff    	jg     c0009b50 <calc_output_stereo+0x1fb>
c0009c7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8d:	e8 41 d0 01 00       	call   c0026cd3 <__adddf3>
c0009c92:	83 c4 10             	add    esp,0x10
c0009c95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ca1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ca9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cad:	e8 9e d6 01 00       	call   c0027350 <__muldf3>
c0009cb2:	59                   	pop    ecx
c0009cb3:	5b                   	pop    ebx
c0009cb4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc4:	e8 5a df 01 00       	call   c0027c23 <__truncdfsf2>
c0009cc9:	83 c4 10             	add    esp,0x10
c0009ccc:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cd3:	89 03                	mov    DWORD PTR [ebx],eax
c0009cd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce5:	e8 e9 cf 01 00       	call   c0026cd3 <__adddf3>
c0009cea:	83 c4 10             	add    esp,0x10
c0009ced:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cf1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d05:	e8 46 d6 01 00       	call   c0027350 <__muldf3>
c0009d0a:	5e                   	pop    esi
c0009d0b:	5f                   	pop    edi
c0009d0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d1c:	e8 02 df 01 00       	call   c0027c23 <__truncdfsf2>
c0009d21:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d28:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d2b:	83 c4 7c             	add    esp,0x7c
c0009d2e:	5b                   	pop    ebx
c0009d2f:	5e                   	pop    esi
c0009d30:	5f                   	pop    edi
c0009d31:	5d                   	pop    ebp
c0009d32:	c3                   	ret    

c0009d33 <calc_output_quad>:
c0009d33:	55                   	push   ebp
c0009d34:	57                   	push   edi
c0009d35:	56                   	push   esi
c0009d36:	89 c6                	mov    esi,eax
c0009d38:	53                   	push   ebx
c0009d39:	83 ec 7c             	sub    esp,0x7c
c0009d3c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d40:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d4b:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d5a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d5d:	e8 55 f9 ff ff       	call   c00096b7 <int_to_fp>
c0009d62:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d65:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d68:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d6c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d70:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d74:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d78:	99                   	cdq    
c0009d79:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d81:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d84:	31 d2                	xor    edx,edx
c0009d86:	0f af d8             	imul   ebx,eax
c0009d89:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d91:	0f af c7             	imul   eax,edi
c0009d94:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d98:	29 c1                	sub    ecx,eax
c0009d9a:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009da2:	31 c0                	xor    eax,eax
c0009da4:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009da7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009dab:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009daf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009db7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dbf:	89 d8                	mov    eax,ebx
c0009dc1:	83 c7 10             	add    edi,0x10
c0009dc4:	e8 fc f8 ff ff       	call   c00096c5 <fp_to_double>
c0009dc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dcd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dd1:	89 d8                	mov    eax,ebx
c0009dd3:	e8 e3 f8 ff ff       	call   c00096bb <fp_to_int>
c0009dd8:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009ddc:	52                   	push   edx
c0009ddd:	52                   	push   edx
c0009dde:	51                   	push   ecx
c0009ddf:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009de3:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009de7:	e8 7c c8 01 00       	call   c0026668 <__subsf3>
c0009dec:	89 04 24             	mov    DWORD PTR [esp],eax
c0009def:	e8 53 df 01 00       	call   c0027d47 <__extendsfdf2>
c0009df4:	83 c4 10             	add    esp,0x10
c0009df7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dfb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e07:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e0b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e0f:	e8 3c d5 01 00       	call   c0027350 <__muldf3>
c0009e14:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e1c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e23:	e8 1f df 01 00       	call   c0027d47 <__extendsfdf2>
c0009e28:	83 c4 10             	add    esp,0x10
c0009e2b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e2f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e33:	52                   	push   edx
c0009e34:	50                   	push   eax
c0009e35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3d:	e8 91 ce 01 00       	call   c0026cd3 <__adddf3>
c0009e42:	59                   	pop    ecx
c0009e43:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e47:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4b:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e51:	e8 f1 de 01 00       	call   c0027d47 <__extendsfdf2>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e5d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e71:	e8 da d4 01 00       	call   c0027350 <__muldf3>
c0009e76:	83 c4 10             	add    esp,0x10
c0009e79:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e81:	52                   	push   edx
c0009e82:	50                   	push   eax
c0009e83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e8b:	e8 43 ce 01 00       	call   c0026cd3 <__adddf3>
c0009e90:	59                   	pop    ecx
c0009e91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e95:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e99:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e9f:	e8 a3 de 01 00       	call   c0027d47 <__extendsfdf2>
c0009ea4:	83 c4 10             	add    esp,0x10
c0009ea7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eab:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009eaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ebb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ebf:	e8 8c d4 01 00       	call   c0027350 <__muldf3>
c0009ec4:	83 c4 10             	add    esp,0x10
c0009ec7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ecf:	52                   	push   edx
c0009ed0:	50                   	push   eax
c0009ed1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed9:	e8 f5 cd 01 00       	call   c0026cd3 <__adddf3>
c0009ede:	59                   	pop    ecx
c0009edf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009ee3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009ee7:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009eed:	e8 55 de 01 00       	call   c0027d47 <__extendsfdf2>
c0009ef2:	83 c4 10             	add    esp,0x10
c0009ef5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ef9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009efd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f05:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f09:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f0d:	e8 3e d4 01 00       	call   c0027350 <__muldf3>
c0009f12:	83 c4 10             	add    esp,0x10
c0009f15:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f19:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1d:	52                   	push   edx
c0009f1e:	50                   	push   eax
c0009f1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f27:	e8 a7 cd 01 00       	call   c0026cd3 <__adddf3>
c0009f2c:	59                   	pop    ecx
c0009f2d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f31:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f35:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f3b:	e8 07 de 01 00       	call   c0027d47 <__extendsfdf2>
c0009f40:	83 c4 10             	add    esp,0x10
c0009f43:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f47:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f53:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f57:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f5b:	e8 f0 d3 01 00       	call   c0027350 <__muldf3>
c0009f60:	83 c4 10             	add    esp,0x10
c0009f63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f67:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f6b:	52                   	push   edx
c0009f6c:	50                   	push   eax
c0009f6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f75:	e8 59 cd 01 00       	call   c0026cd3 <__adddf3>
c0009f7a:	83 c4 10             	add    esp,0x10
c0009f7d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f81:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f85:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f89:	0f 89 30 fe ff ff    	jns    c0009dbf <calc_output_quad+0x8c>
c0009f8f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f9f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fa7:	29 c8                	sub    eax,ecx
c0009fa9:	99                   	cdq    
c0009faa:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fae:	31 d2                	xor    edx,edx
c0009fb0:	0f af d8             	imul   ebx,eax
c0009fb3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009fb7:	40                   	inc    eax
c0009fb8:	01 cb                	add    ebx,ecx
c0009fba:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fbf:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fc3:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fcb:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fce:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fd6:	31 c0                	xor    eax,eax
c0009fd8:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fdc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fe4:	89 d8                	mov    eax,ebx
c0009fe6:	83 ee 10             	sub    esi,0x10
c0009fe9:	e8 d7 f6 ff ff       	call   c00096c5 <fp_to_double>
c0009fee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff6:	89 d8                	mov    eax,ebx
c0009ff8:	e8 be f6 ff ff       	call   c00096bb <fp_to_int>
c0009ffd:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a001:	52                   	push   edx
c000a002:	52                   	push   edx
c000a003:	57                   	push   edi
c000a004:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a008:	e8 5b c6 01 00       	call   c0026668 <__subsf3>
c000a00d:	89 04 24             	mov    DWORD PTR [esp],eax
c000a010:	e8 32 dd 01 00       	call   c0027d47 <__extendsfdf2>
c000a015:	83 c4 10             	add    esp,0x10
c000a018:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a028:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a030:	e8 1b d3 01 00       	call   c0027350 <__muldf3>
c000a035:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a038:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a040:	e8 02 dd 01 00       	call   c0027d47 <__extendsfdf2>
c000a045:	83 c4 10             	add    esp,0x10
c000a048:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a050:	52                   	push   edx
c000a051:	50                   	push   eax
c000a052:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05a:	e8 74 cc 01 00       	call   c0026cd3 <__adddf3>
c000a05f:	59                   	pop    ecx
c000a060:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a064:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a068:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a06e:	e8 d4 dc 01 00       	call   c0027d47 <__extendsfdf2>
c000a073:	83 c4 10             	add    esp,0x10
c000a076:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a07a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a086:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a08a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a08e:	e8 bd d2 01 00       	call   c0027350 <__muldf3>
c000a093:	83 c4 10             	add    esp,0x10
c000a096:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09e:	52                   	push   edx
c000a09f:	50                   	push   eax
c000a0a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0a8:	e8 26 cc 01 00       	call   c0026cd3 <__adddf3>
c000a0ad:	5f                   	pop    edi
c000a0ae:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0b2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0b6:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0bc:	e8 86 dc 01 00       	call   c0027d47 <__extendsfdf2>
c000a0c1:	83 c4 10             	add    esp,0x10
c000a0c4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0c8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0d8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0dc:	e8 6f d2 01 00       	call   c0027350 <__muldf3>
c000a0e1:	83 c4 10             	add    esp,0x10
c000a0e4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ec:	52                   	push   edx
c000a0ed:	50                   	push   eax
c000a0ee:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0f2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0f6:	e8 d8 cb 01 00       	call   c0026cd3 <__adddf3>
c000a0fb:	59                   	pop    ecx
c000a0fc:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a100:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a104:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a10a:	e8 38 dc 01 00       	call   c0027d47 <__extendsfdf2>
c000a10f:	83 c4 10             	add    esp,0x10
c000a112:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a116:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a11a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a122:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a126:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12a:	e8 21 d2 01 00       	call   c0027350 <__muldf3>
c000a12f:	83 c4 10             	add    esp,0x10
c000a132:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a136:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13a:	52                   	push   edx
c000a13b:	50                   	push   eax
c000a13c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a140:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a144:	e8 8a cb 01 00       	call   c0026cd3 <__adddf3>
c000a149:	5f                   	pop    edi
c000a14a:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a14e:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a152:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a158:	e8 ea db 01 00       	call   c0027d47 <__extendsfdf2>
c000a15d:	83 c4 10             	add    esp,0x10
c000a160:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a164:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a16c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a170:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a174:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a178:	e8 d3 d1 01 00       	call   c0027350 <__muldf3>
c000a17d:	83 c4 10             	add    esp,0x10
c000a180:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a184:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a188:	52                   	push   edx
c000a189:	50                   	push   eax
c000a18a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a18e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a192:	e8 3c cb 01 00       	call   c0026cd3 <__adddf3>
c000a197:	83 c4 10             	add    esp,0x10
c000a19a:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a19e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1a2:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1a6:	85 db                	test   ebx,ebx
c000a1a8:	0f 8f 36 fe ff ff    	jg     c0009fe4 <calc_output_quad+0x2b1>
c000a1ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1be:	e8 10 cb 01 00       	call   c0026cd3 <__adddf3>
c000a1c3:	83 c4 10             	add    esp,0x10
c000a1c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1de:	e8 6d d1 01 00       	call   c0027350 <__muldf3>
c000a1e3:	59                   	pop    ecx
c000a1e4:	5b                   	pop    ebx
c000a1e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f5:	e8 29 da 01 00       	call   c0027c23 <__truncdfsf2>
c000a1fa:	83 c4 10             	add    esp,0x10
c000a1fd:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a204:	89 06                	mov    DWORD PTR [esi],eax
c000a206:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a20a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a20e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a212:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a216:	e8 b8 ca 01 00       	call   c0026cd3 <__adddf3>
c000a21b:	83 c4 10             	add    esp,0x10
c000a21e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a222:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a226:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a22a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a22e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a236:	e8 15 d1 01 00       	call   c0027350 <__muldf3>
c000a23b:	5e                   	pop    esi
c000a23c:	5f                   	pop    edi
c000a23d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a241:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a245:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a249:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24d:	e8 d1 d9 01 00       	call   c0027c23 <__truncdfsf2>
c000a252:	83 c4 10             	add    esp,0x10
c000a255:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a25c:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a25f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a263:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a267:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a26b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a26f:	e8 5f ca 01 00       	call   c0026cd3 <__adddf3>
c000a274:	83 c4 10             	add    esp,0x10
c000a277:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a27b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a27f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a283:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a287:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28f:	e8 bc d0 01 00       	call   c0027350 <__muldf3>
c000a294:	5d                   	pop    ebp
c000a295:	59                   	pop    ecx
c000a296:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a29a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a29e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a6:	e8 78 d9 01 00       	call   c0027c23 <__truncdfsf2>
c000a2ab:	83 c4 10             	add    esp,0x10
c000a2ae:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2b5:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c8:	e8 06 ca 01 00       	call   c0026cd3 <__adddf3>
c000a2cd:	83 c4 10             	add    esp,0x10
c000a2d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e8:	e8 63 d0 01 00       	call   c0027350 <__muldf3>
c000a2ed:	5b                   	pop    ebx
c000a2ee:	5e                   	pop    esi
c000a2ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ff:	e8 1f d9 01 00       	call   c0027c23 <__truncdfsf2>
c000a304:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a30b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a30e:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a314:	5b                   	pop    ebx
c000a315:	5e                   	pop    esi
c000a316:	5f                   	pop    edi
c000a317:	5d                   	pop    ebp
c000a318:	c3                   	ret    

c000a319 <calc_output_hex>:
c000a319:	55                   	push   ebp
c000a31a:	89 cd                	mov    ebp,ecx
c000a31c:	57                   	push   edi
c000a31d:	56                   	push   esi
c000a31e:	53                   	push   ebx
c000a31f:	89 c3                	mov    ebx,eax
c000a321:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a327:	89 14 24             	mov    DWORD PTR [esp],edx
c000a32a:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a331:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a338:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a33c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a340:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a343:	e8 6f f3 ff ff       	call   c00096b7 <int_to_fp>
c000a348:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a34b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a34f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a352:	29 c8                	sub    eax,ecx
c000a354:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a358:	99                   	cdq    
c000a359:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a361:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a364:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a36c:	0f af f8             	imul   edi,eax
c000a36f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a372:	01 cf                	add    edi,ecx
c000a374:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a378:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a37b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a37f:	0f af c2             	imul   eax,edx
c000a382:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a386:	29 c1                	sub    ecx,eax
c000a388:	31 d2                	xor    edx,edx
c000a38a:	31 c0                	xor    eax,eax
c000a38c:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a38f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a393:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a397:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a39b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a39f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3a3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3a7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3ab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3b7:	89 f8                	mov    eax,edi
c000a3b9:	e8 07 f3 ff ff       	call   c00096c5 <fp_to_double>
c000a3be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3c6:	89 f8                	mov    eax,edi
c000a3c8:	e8 ee f2 ff ff       	call   c00096bb <fp_to_int>
c000a3cd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3d1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3d4:	52                   	push   edx
c000a3d5:	52                   	push   edx
c000a3d6:	51                   	push   ecx
c000a3d7:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3db:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3e2:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3e6:	e8 7d c2 01 00       	call   c0026668 <__subsf3>
c000a3eb:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3ee:	e8 54 d9 01 00       	call   c0027d47 <__extendsfdf2>
c000a3f3:	83 c4 10             	add    esp,0x10
c000a3f6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3fa:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a402:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a406:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a40a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a40e:	e8 3d cf 01 00       	call   c0027350 <__muldf3>
c000a413:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a417:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a41b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a41e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a422:	e8 20 d9 01 00       	call   c0027d47 <__extendsfdf2>
c000a427:	83 c4 10             	add    esp,0x10
c000a42a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a432:	52                   	push   edx
c000a433:	50                   	push   eax
c000a434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a43c:	e8 92 c8 01 00       	call   c0026cd3 <__adddf3>
c000a441:	59                   	pop    ecx
c000a442:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a446:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a44a:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a450:	e8 f2 d8 01 00       	call   c0027d47 <__extendsfdf2>
c000a455:	83 c4 10             	add    esp,0x10
c000a458:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a45c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a460:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a464:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a468:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a46c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a470:	e8 db ce 01 00       	call   c0027350 <__muldf3>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a480:	52                   	push   edx
c000a481:	50                   	push   eax
c000a482:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a48a:	e8 44 c8 01 00       	call   c0026cd3 <__adddf3>
c000a48f:	59                   	pop    ecx
c000a490:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a494:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a498:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a49e:	e8 a4 d8 01 00       	call   c0027d47 <__extendsfdf2>
c000a4a3:	83 c4 10             	add    esp,0x10
c000a4a6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4aa:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ba:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4be:	e8 8d ce 01 00       	call   c0027350 <__muldf3>
c000a4c3:	83 c4 10             	add    esp,0x10
c000a4c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ce:	52                   	push   edx
c000a4cf:	50                   	push   eax
c000a4d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4d8:	e8 f6 c7 01 00       	call   c0026cd3 <__adddf3>
c000a4dd:	59                   	pop    ecx
c000a4de:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4e2:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4e6:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4ec:	e8 56 d8 01 00       	call   c0027d47 <__extendsfdf2>
c000a4f1:	83 c4 10             	add    esp,0x10
c000a4f4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4f8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a500:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a504:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a508:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a50c:	e8 3f ce 01 00       	call   c0027350 <__muldf3>
c000a511:	83 c4 10             	add    esp,0x10
c000a514:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a518:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51c:	52                   	push   edx
c000a51d:	50                   	push   eax
c000a51e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a522:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a526:	e8 a8 c7 01 00       	call   c0026cd3 <__adddf3>
c000a52b:	59                   	pop    ecx
c000a52c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a530:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a534:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a53a:	e8 08 d8 01 00       	call   c0027d47 <__extendsfdf2>
c000a53f:	83 c4 10             	add    esp,0x10
c000a542:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a546:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a54a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a54e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a552:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a556:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a55a:	e8 f1 cd 01 00       	call   c0027350 <__muldf3>
c000a55f:	83 c4 10             	add    esp,0x10
c000a562:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a566:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56a:	52                   	push   edx
c000a56b:	50                   	push   eax
c000a56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a570:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a574:	e8 5a c7 01 00       	call   c0026cd3 <__adddf3>
c000a579:	59                   	pop    ecx
c000a57a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a57e:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a582:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a588:	e8 ba d7 01 00       	call   c0027d47 <__extendsfdf2>
c000a58d:	83 c4 10             	add    esp,0x10
c000a590:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a594:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a598:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a59c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5a8:	e8 a3 cd 01 00       	call   c0027350 <__muldf3>
c000a5ad:	83 c4 10             	add    esp,0x10
c000a5b0:	83 c6 18             	add    esi,0x18
c000a5b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bb:	52                   	push   edx
c000a5bc:	50                   	push   eax
c000a5bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5c5:	e8 09 c7 01 00       	call   c0026cd3 <__adddf3>
c000a5ca:	59                   	pop    ecx
c000a5cb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5cf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5d3:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5d9:	e8 69 d7 01 00       	call   c0027d47 <__extendsfdf2>
c000a5de:	83 c4 10             	add    esp,0x10
c000a5e1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f9:	e8 52 cd 01 00       	call   c0027350 <__muldf3>
c000a5fe:	83 c4 10             	add    esp,0x10
c000a601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a605:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a609:	52                   	push   edx
c000a60a:	50                   	push   eax
c000a60b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a60f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a613:	e8 bb c6 01 00       	call   c0026cd3 <__adddf3>
c000a618:	83 c4 10             	add    esp,0x10
c000a61b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a61f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a623:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a626:	0f 89 8b fd ff ff    	jns    c000a3b7 <calc_output_hex+0x9e>
c000a62c:	31 f6                	xor    esi,esi
c000a62e:	31 ff                	xor    edi,edi
c000a630:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a634:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a637:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a63b:	29 e9                	sub    ecx,ebp
c000a63d:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a641:	29 c8                	sub    eax,ecx
c000a643:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a646:	99                   	cdq    
c000a647:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a64b:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a64e:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a652:	0f af e8             	imul   ebp,eax
c000a655:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a659:	40                   	inc    eax
c000a65a:	01 cd                	add    ebp,ecx
c000a65c:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a661:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a665:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a669:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a66d:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a670:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a674:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a678:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a67c:	89 e8                	mov    eax,ebp
c000a67e:	e8 42 f0 ff ff       	call   c00096c5 <fp_to_double>
c000a683:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a687:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a68b:	89 e8                	mov    eax,ebp
c000a68d:	e8 29 f0 ff ff       	call   c00096bb <fp_to_int>
c000a692:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a696:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a699:	52                   	push   edx
c000a69a:	52                   	push   edx
c000a69b:	51                   	push   ecx
c000a69c:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6a3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6aa:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6ae:	e8 b5 bf 01 00       	call   c0026668 <__subsf3>
c000a6b3:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6b6:	e8 8c d6 01 00       	call   c0027d47 <__extendsfdf2>
c000a6bb:	83 c4 10             	add    esp,0x10
c000a6be:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6c2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ce:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6d2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6d6:	e8 75 cc 01 00       	call   c0027350 <__muldf3>
c000a6db:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6e9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6ed:	e8 55 d6 01 00       	call   c0027d47 <__extendsfdf2>
c000a6f2:	83 c4 10             	add    esp,0x10
c000a6f5:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6f9:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fd:	52                   	push   edx
c000a6fe:	50                   	push   eax
c000a6ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a703:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a707:	e8 c7 c5 01 00       	call   c0026cd3 <__adddf3>
c000a70c:	59                   	pop    ecx
c000a70d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a711:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a715:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a71b:	e8 27 d6 01 00       	call   c0027d47 <__extendsfdf2>
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a727:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a733:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a737:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a73b:	e8 10 cc 01 00       	call   c0027350 <__muldf3>
c000a740:	83 c4 10             	add    esp,0x10
c000a743:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a747:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74b:	52                   	push   edx
c000a74c:	50                   	push   eax
c000a74d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a751:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a755:	e8 79 c5 01 00       	call   c0026cd3 <__adddf3>
c000a75a:	59                   	pop    ecx
c000a75b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a75f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a763:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a769:	e8 d9 d5 01 00       	call   c0027d47 <__extendsfdf2>
c000a76e:	83 c4 10             	add    esp,0x10
c000a771:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a775:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a781:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a785:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a789:	e8 c2 cb 01 00       	call   c0027350 <__muldf3>
c000a78e:	83 c4 10             	add    esp,0x10
c000a791:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a795:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a799:	52                   	push   edx
c000a79a:	50                   	push   eax
c000a79b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a79f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7a3:	e8 2b c5 01 00       	call   c0026cd3 <__adddf3>
c000a7a8:	59                   	pop    ecx
c000a7a9:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7ad:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7b1:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7b7:	e8 8b d5 01 00       	call   c0027d47 <__extendsfdf2>
c000a7bc:	83 c4 10             	add    esp,0x10
c000a7bf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7c3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7d3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7d7:	e8 74 cb 01 00       	call   c0027350 <__muldf3>
c000a7dc:	83 c4 10             	add    esp,0x10
c000a7df:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e7:	52                   	push   edx
c000a7e8:	50                   	push   eax
c000a7e9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f1:	e8 dd c4 01 00       	call   c0026cd3 <__adddf3>
c000a7f6:	59                   	pop    ecx
c000a7f7:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7fb:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7ff:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a805:	e8 3d d5 01 00       	call   c0027d47 <__extendsfdf2>
c000a80a:	83 c4 10             	add    esp,0x10
c000a80d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a811:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a821:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a825:	e8 26 cb 01 00       	call   c0027350 <__muldf3>
c000a82a:	83 c4 10             	add    esp,0x10
c000a82d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a831:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a835:	52                   	push   edx
c000a836:	50                   	push   eax
c000a837:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a83b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a83f:	e8 8f c4 01 00       	call   c0026cd3 <__adddf3>
c000a844:	59                   	pop    ecx
c000a845:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a849:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a84d:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a853:	e8 ef d4 01 00       	call   c0027d47 <__extendsfdf2>
c000a858:	83 c4 10             	add    esp,0x10
c000a85b:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a85f:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a867:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a86b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a86f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a873:	e8 d8 ca 01 00       	call   c0027350 <__muldf3>
c000a878:	83 c4 10             	add    esp,0x10
c000a87b:	83 eb 18             	sub    ebx,0x18
c000a87e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a882:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a886:	52                   	push   edx
c000a887:	50                   	push   eax
c000a888:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a88c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a890:	e8 3e c4 01 00       	call   c0026cd3 <__adddf3>
c000a895:	59                   	pop    ecx
c000a896:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a89a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a89e:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8a4:	e8 9e d4 01 00       	call   c0027d47 <__extendsfdf2>
c000a8a9:	83 c4 10             	add    esp,0x10
c000a8ac:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8b0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8c0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8c4:	e8 87 ca 01 00       	call   c0027350 <__muldf3>
c000a8c9:	83 c4 10             	add    esp,0x10
c000a8cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8d4:	52                   	push   edx
c000a8d5:	50                   	push   eax
c000a8d6:	57                   	push   edi
c000a8d7:	56                   	push   esi
c000a8d8:	e8 f6 c3 01 00       	call   c0026cd3 <__adddf3>
c000a8dd:	83 c4 10             	add    esp,0x10
c000a8e0:	89 c6                	mov    esi,eax
c000a8e2:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8e5:	89 d7                	mov    edi,edx
c000a8e7:	85 ed                	test   ebp,ebp
c000a8e9:	0f 8f 8d fd ff ff    	jg     c000a67c <calc_output_hex+0x363>
c000a8ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ff:	e8 cf c3 01 00       	call   c0026cd3 <__adddf3>
c000a904:	83 c4 10             	add    esp,0x10
c000a907:	89 04 24             	mov    DWORD PTR [esp],eax
c000a90a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a90e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a912:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a916:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a91a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a91e:	e8 2d ca 01 00       	call   c0027350 <__muldf3>
c000a923:	59                   	pop    ecx
c000a924:	5b                   	pop    ebx
c000a925:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a929:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a931:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a935:	e8 e9 d2 01 00       	call   c0027c23 <__truncdfsf2>
c000a93a:	83 c4 10             	add    esp,0x10
c000a93d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a944:	89 03                	mov    DWORD PTR [ebx],eax
c000a946:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a94a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a94e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a952:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a956:	e8 78 c3 01 00       	call   c0026cd3 <__adddf3>
c000a95b:	83 c4 10             	add    esp,0x10
c000a95e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a961:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a965:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a969:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a96d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a971:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a975:	e8 d6 c9 01 00       	call   c0027350 <__muldf3>
c000a97a:	5d                   	pop    ebp
c000a97b:	59                   	pop    ecx
c000a97c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a980:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a984:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a988:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98c:	e8 92 d2 01 00       	call   c0027c23 <__truncdfsf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a99b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a99e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9a2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9a6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9aa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9ae:	e8 20 c3 01 00       	call   c0026cd3 <__adddf3>
c000a9b3:	83 c4 10             	add    esp,0x10
c000a9b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cd:	e8 7e c9 01 00       	call   c0027350 <__muldf3>
c000a9d2:	5b                   	pop    ebx
c000a9d3:	5d                   	pop    ebp
c000a9d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e4:	e8 3a d2 01 00       	call   c0027c23 <__truncdfsf2>
c000a9e9:	83 c4 10             	add    esp,0x10
c000a9ec:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9f3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9f6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9fa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa06:	e8 c8 c2 01 00       	call   c0026cd3 <__adddf3>
c000aa0b:	83 c4 10             	add    esp,0x10
c000aa0e:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa11:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa25:	e8 26 c9 01 00       	call   c0027350 <__muldf3>
c000aa2a:	59                   	pop    ecx
c000aa2b:	5b                   	pop    ebx
c000aa2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3c:	e8 e2 d1 01 00       	call   c0027c23 <__truncdfsf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa5e:	e8 70 c2 01 00       	call   c0026cd3 <__adddf3>
c000aa63:	83 c4 10             	add    esp,0x10
c000aa66:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7d:	e8 ce c8 01 00       	call   c0027350 <__muldf3>
c000aa82:	5d                   	pop    ebp
c000aa83:	59                   	pop    ecx
c000aa84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa94:	e8 8a d1 01 00       	call   c0027c23 <__truncdfsf2>
c000aa99:	83 c4 10             	add    esp,0x10
c000aa9c:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaa3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aaa6:	57                   	push   edi
c000aaa7:	56                   	push   esi
c000aaa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaac:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aab0:	e8 1e c2 01 00       	call   c0026cd3 <__adddf3>
c000aab5:	83 c4 10             	add    esp,0x10
c000aab8:	89 04 24             	mov    DWORD PTR [esp],eax
c000aabb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aabf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aac3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aac7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacf:	e8 7c c8 01 00       	call   c0027350 <__muldf3>
c000aad4:	5b                   	pop    ebx
c000aad5:	5e                   	pop    esi
c000aad6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aada:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aade:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aae2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aae6:	e8 38 d1 01 00       	call   c0027c23 <__truncdfsf2>
c000aaeb:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aaf2:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aaf5:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aafb:	5b                   	pop    ebx
c000aafc:	5e                   	pop    esi
c000aafd:	5f                   	pop    edi
c000aafe:	5d                   	pop    ebp
c000aaff:	c3                   	ret    

c000ab00 <sinc_reset>:
c000ab00:	56                   	push   esi
c000ab01:	53                   	push   ebx
c000ab02:	51                   	push   ecx
c000ab03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab07:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab0a:	85 db                	test   ebx,ebx
c000ab0c:	74 59                	je     c000ab67 <sinc_reset+0x67>
c000ab0e:	31 d2                	xor    edx,edx
c000ab10:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab17:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab1a:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab1d:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab24:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab2b:	31 c0                	xor    eax,eax
c000ab2d:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab33:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab36:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab39:	52                   	push   edx
c000ab3a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab3d:	c1 e0 02             	shl    eax,0x2
c000ab40:	50                   	push   eax
c000ab41:	6a 00                	push   0x0
c000ab43:	56                   	push   esi
c000ab44:	e8 6f 5b ff ff       	call   c00006b8 <memset>
c000ab49:	83 c4 0c             	add    esp,0xc
c000ab4c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab4f:	c1 e0 02             	shl    eax,0x2
c000ab52:	50                   	push   eax
c000ab53:	68 aa 00 00 00       	push   0xaa
c000ab58:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab5b:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab5e:	50                   	push   eax
c000ab5f:	e8 54 5b ff ff       	call   c00006b8 <memset>
c000ab64:	83 c4 10             	add    esp,0x10
c000ab67:	58                   	pop    eax
c000ab68:	5b                   	pop    ebx
c000ab69:	5e                   	pop    esi
c000ab6a:	c3                   	ret    

c000ab6b <calc_output_multi>:
c000ab6b:	55                   	push   ebp
c000ab6c:	57                   	push   edi
c000ab6d:	56                   	push   esi
c000ab6e:	89 c6                	mov    esi,eax
c000ab70:	53                   	push   ebx
c000ab71:	83 ec 4c             	sub    esp,0x4c
c000ab74:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab78:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab7c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab80:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab84:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab90:	8d 46 44             	lea    eax,[esi+0x44]
c000ab93:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab96:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aba0:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000aba3:	e8 0f eb ff ff       	call   c00096b7 <int_to_fp>
c000aba8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abaf:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abb3:	99                   	cdq    
c000abb4:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abbc:	0f af d0             	imul   edx,eax
c000abbf:	0f af c3             	imul   eax,ebx
c000abc2:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abc6:	29 c1                	sub    ecx,eax
c000abc8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abcc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abd0:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abd7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abdb:	57                   	push   edi
c000abdc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abe0:	6a 00                	push   0x0
c000abe2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe6:	e8 cd 5a ff ff       	call   c00006b8 <memset>
c000abeb:	83 c4 10             	add    esp,0x10
c000abee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abf2:	89 df                	mov    edi,ebx
c000abf4:	e8 cc ea ff ff       	call   c00096c5 <fp_to_double>
c000abf9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abfd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac05:	e8 b1 ea ff ff       	call   c00096bb <fp_to_int>
c000ac0a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac0d:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac10:	51                   	push   ecx
c000ac11:	51                   	push   ecx
c000ac12:	55                   	push   ebp
c000ac13:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac17:	e8 4c ba 01 00       	call   c0026668 <__subsf3>
c000ac1c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac1f:	e8 23 d1 01 00       	call   c0027d47 <__extendsfdf2>
c000ac24:	83 c4 10             	add    esp,0x10
c000ac27:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac3f:	e8 0c c7 01 00       	call   c0027350 <__muldf3>
c000ac44:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac4b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac4f:	e8 f3 d0 01 00       	call   c0027d47 <__extendsfdf2>
c000ac54:	83 c4 10             	add    esp,0x10
c000ac57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac5b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac5f:	52                   	push   edx
c000ac60:	50                   	push   eax
c000ac61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac69:	e8 65 c0 01 00       	call   c0026cd3 <__adddf3>
c000ac6e:	83 c4 10             	add    esp,0x10
c000ac71:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac79:	89 f8                	mov    eax,edi
c000ac7b:	b9 08 00 00 00       	mov    ecx,0x8
c000ac80:	99                   	cdq    
c000ac81:	f7 f9                	idiv   ecx
c000ac83:	4a                   	dec    edx
c000ac84:	83 fa 06             	cmp    edx,0x6
c000ac87:	77 07                	ja     c000ac90 <calc_output_multi+0x125>
c000ac89:	ff 24 95 64 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6a9c]
c000ac90:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac93:	4f                   	dec    edi
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac9e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aca5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aca9:	e8 99 d0 01 00       	call   c0027d47 <__extendsfdf2>
c000acae:	83 c4 10             	add    esp,0x10
c000acb1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acb5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acc1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acc9:	e8 82 c6 01 00       	call   c0027350 <__muldf3>
c000acce:	83 c4 10             	add    esp,0x10
c000acd1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acd5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acd9:	52                   	push   edx
c000acda:	50                   	push   eax
c000acdb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acde:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ace1:	e8 ed bf 01 00       	call   c0026cd3 <__adddf3>
c000ace6:	83 c4 10             	add    esp,0x10
c000ace9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acec:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acf2:	4f                   	dec    edi
c000acf3:	83 ec 0c             	sub    esp,0xc
c000acf6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acfd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad04:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad08:	e8 3a d0 01 00       	call   c0027d47 <__extendsfdf2>
c000ad0d:	83 c4 10             	add    esp,0x10
c000ad10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad28:	e8 23 c6 01 00       	call   c0027350 <__muldf3>
c000ad2d:	83 c4 10             	add    esp,0x10
c000ad30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad38:	52                   	push   edx
c000ad39:	50                   	push   eax
c000ad3a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad3d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad40:	e8 8e bf 01 00       	call   c0026cd3 <__adddf3>
c000ad45:	83 c4 10             	add    esp,0x10
c000ad48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad4b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad4e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad51:	4f                   	dec    edi
c000ad52:	83 ec 0c             	sub    esp,0xc
c000ad55:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad5c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad63:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad67:	e8 db cf 01 00       	call   c0027d47 <__extendsfdf2>
c000ad6c:	83 c4 10             	add    esp,0x10
c000ad6f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad73:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad7f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad83:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad87:	e8 c4 c5 01 00       	call   c0027350 <__muldf3>
c000ad8c:	83 c4 10             	add    esp,0x10
c000ad8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad93:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad97:	52                   	push   edx
c000ad98:	50                   	push   eax
c000ad99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad9f:	e8 2f bf 01 00       	call   c0026cd3 <__adddf3>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adaa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adb0:	4f                   	dec    edi
c000adb1:	83 ec 0c             	sub    esp,0xc
c000adb4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adbb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adc2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adc6:	e8 7c cf 01 00       	call   c0027d47 <__extendsfdf2>
c000adcb:	83 c4 10             	add    esp,0x10
c000adce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000add2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000add6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ade2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ade6:	e8 65 c5 01 00       	call   c0027350 <__muldf3>
c000adeb:	83 c4 10             	add    esp,0x10
c000adee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adf2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adf6:	52                   	push   edx
c000adf7:	50                   	push   eax
c000adf8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adfb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adfe:	e8 d0 be 01 00       	call   c0026cd3 <__adddf3>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae09:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae0f:	4f                   	dec    edi
c000ae10:	83 ec 0c             	sub    esp,0xc
c000ae13:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae1a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae21:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae25:	e8 1d cf 01 00       	call   c0027d47 <__extendsfdf2>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae31:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae41:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae45:	e8 06 c5 01 00       	call   c0027350 <__muldf3>
c000ae4a:	83 c4 10             	add    esp,0x10
c000ae4d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae51:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae55:	52                   	push   edx
c000ae56:	50                   	push   eax
c000ae57:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae5a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae5d:	e8 71 be 01 00       	call   c0026cd3 <__adddf3>
c000ae62:	83 c4 10             	add    esp,0x10
c000ae65:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae68:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae6b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae6e:	4f                   	dec    edi
c000ae6f:	83 ec 0c             	sub    esp,0xc
c000ae72:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae79:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae80:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae84:	e8 be ce 01 00       	call   c0027d47 <__extendsfdf2>
c000ae89:	83 c4 10             	add    esp,0x10
c000ae8c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae90:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae9c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aea0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aea4:	e8 a7 c4 01 00       	call   c0027350 <__muldf3>
c000aea9:	83 c4 10             	add    esp,0x10
c000aeac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb4:	52                   	push   edx
c000aeb5:	50                   	push   eax
c000aeb6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeb9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aebc:	e8 12 be 01 00       	call   c0026cd3 <__adddf3>
c000aec1:	83 c4 10             	add    esp,0x10
c000aec4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aec7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aeca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aecd:	4f                   	dec    edi
c000aece:	83 ec 0c             	sub    esp,0xc
c000aed1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aed4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aedf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aee3:	e8 5f ce 01 00       	call   c0027d47 <__extendsfdf2>
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeef:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aef3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aef7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aefb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af03:	e8 48 c4 01 00       	call   c0027350 <__muldf3>
c000af08:	83 c4 10             	add    esp,0x10
c000af0b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af0f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af13:	52                   	push   edx
c000af14:	50                   	push   eax
c000af15:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af18:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af1b:	e8 b3 bd 01 00       	call   c0026cd3 <__adddf3>
c000af20:	83 c4 10             	add    esp,0x10
c000af23:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af26:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af2c:	4f                   	dec    edi
c000af2d:	83 ec 0c             	sub    esp,0xc
c000af30:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af37:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af3e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af42:	e8 00 ce 01 00       	call   c0027d47 <__extendsfdf2>
c000af47:	83 c4 10             	add    esp,0x10
c000af4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af62:	e8 e9 c3 01 00       	call   c0027350 <__muldf3>
c000af67:	83 c4 10             	add    esp,0x10
c000af6a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af6e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af72:	52                   	push   edx
c000af73:	50                   	push   eax
c000af74:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af77:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af7a:	e8 54 bd 01 00       	call   c0026cd3 <__adddf3>
c000af7f:	83 c4 10             	add    esp,0x10
c000af82:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af85:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af88:	85 ff                	test   edi,edi
c000af8a:	0f 8f e9 fc ff ff    	jg     c000ac79 <calc_output_multi+0x10e>
c000af90:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af94:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af98:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af9c:	0f 89 4c fc ff ff    	jns    c000abee <calc_output_multi+0x83>
c000afa2:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afa6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afaa:	29 c8                	sub    eax,ecx
c000afac:	99                   	cdq    
c000afad:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afb1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afb5:	0f af d0             	imul   edx,eax
c000afb8:	40                   	inc    eax
c000afb9:	01 d1                	add    ecx,edx
c000afbb:	0f af c3             	imul   eax,ebx
c000afbe:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afc2:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afc9:	55                   	push   ebp
c000afca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afce:	6a 00                	push   0x0
c000afd0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afd4:	e8 df 56 ff ff       	call   c00006b8 <memset>
c000afd9:	83 c4 10             	add    esp,0x10
c000afdc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afe0:	e8 e0 e6 ff ff       	call   c00096c5 <fp_to_double>
c000afe5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afe9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aff1:	e8 c5 e6 ff ff       	call   c00096bb <fp_to_int>
c000aff6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000aff9:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000affc:	57                   	push   edi
c000affd:	57                   	push   edi
c000affe:	89 df                	mov    edi,ebx
c000b000:	55                   	push   ebp
c000b001:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b005:	e8 5e b6 01 00       	call   c0026668 <__subsf3>
c000b00a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b00d:	e8 35 cd 01 00       	call   c0027d47 <__extendsfdf2>
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b019:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b01d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b021:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b025:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b029:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b02d:	e8 1e c3 01 00       	call   c0027350 <__muldf3>
c000b032:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b035:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b039:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b03d:	e8 05 cd 01 00       	call   c0027d47 <__extendsfdf2>
c000b042:	83 c4 10             	add    esp,0x10
c000b045:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b049:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b04d:	52                   	push   edx
c000b04e:	50                   	push   eax
c000b04f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b053:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b057:	e8 77 bc 01 00       	call   c0026cd3 <__adddf3>
c000b05c:	83 c4 10             	add    esp,0x10
c000b05f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b063:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b067:	89 f8                	mov    eax,edi
c000b069:	b9 08 00 00 00       	mov    ecx,0x8
c000b06e:	99                   	cdq    
c000b06f:	f7 f9                	idiv   ecx
c000b071:	4a                   	dec    edx
c000b072:	83 fa 06             	cmp    edx,0x6
c000b075:	77 07                	ja     c000b07e <calc_output_multi+0x513>
c000b077:	ff 24 95 80 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6a80]
c000b07e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b082:	4f                   	dec    edi
c000b083:	83 ec 0c             	sub    esp,0xc
c000b086:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b089:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b08d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b094:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b098:	e8 aa cc 01 00       	call   c0027d47 <__extendsfdf2>
c000b09d:	83 c4 10             	add    esp,0x10
c000b0a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0b8:	e8 93 c2 01 00       	call   c0027350 <__muldf3>
c000b0bd:	83 c4 10             	add    esp,0x10
c000b0c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0c8:	52                   	push   edx
c000b0c9:	50                   	push   eax
c000b0ca:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0cd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0d0:	e8 fe bb 01 00       	call   c0026cd3 <__adddf3>
c000b0d5:	83 c4 10             	add    esp,0x10
c000b0d8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0db:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e2:	4f                   	dec    edi
c000b0e3:	83 ec 0c             	sub    esp,0xc
c000b0e6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0ed:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0f4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0f8:	e8 4a cc 01 00       	call   c0027d47 <__extendsfdf2>
c000b0fd:	83 c4 10             	add    esp,0x10
c000b100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b110:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b118:	e8 33 c2 01 00       	call   c0027350 <__muldf3>
c000b11d:	83 c4 10             	add    esp,0x10
c000b120:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b124:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b128:	52                   	push   edx
c000b129:	50                   	push   eax
c000b12a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b12d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b130:	e8 9e bb 01 00       	call   c0026cd3 <__adddf3>
c000b135:	83 c4 10             	add    esp,0x10
c000b138:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b13b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b13e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b142:	4f                   	dec    edi
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b149:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b14d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b154:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b158:	e8 ea cb 01 00       	call   c0027d47 <__extendsfdf2>
c000b15d:	83 c4 10             	add    esp,0x10
c000b160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b164:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b168:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b16c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b170:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b178:	e8 d3 c1 01 00       	call   c0027350 <__muldf3>
c000b17d:	83 c4 10             	add    esp,0x10
c000b180:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b184:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b188:	52                   	push   edx
c000b189:	50                   	push   eax
c000b18a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b18d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b190:	e8 3e bb 01 00       	call   c0026cd3 <__adddf3>
c000b195:	83 c4 10             	add    esp,0x10
c000b198:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b19b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b19e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1a2:	4f                   	dec    edi
c000b1a3:	83 ec 0c             	sub    esp,0xc
c000b1a6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1ad:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1b4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1b8:	e8 8a cb 01 00       	call   c0027d47 <__extendsfdf2>
c000b1bd:	83 c4 10             	add    esp,0x10
c000b1c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d8:	e8 73 c1 01 00       	call   c0027350 <__muldf3>
c000b1dd:	83 c4 10             	add    esp,0x10
c000b1e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1e8:	52                   	push   edx
c000b1e9:	50                   	push   eax
c000b1ea:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1ed:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1f0:	e8 de ba 01 00       	call   c0026cd3 <__adddf3>
c000b1f5:	83 c4 10             	add    esp,0x10
c000b1f8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1fb:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b202:	4f                   	dec    edi
c000b203:	83 ec 0c             	sub    esp,0xc
c000b206:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b209:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b20d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b214:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b218:	e8 2a cb 01 00       	call   c0027d47 <__extendsfdf2>
c000b21d:	83 c4 10             	add    esp,0x10
c000b220:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b224:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b22c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b230:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b234:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b238:	e8 13 c1 01 00       	call   c0027350 <__muldf3>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b244:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b248:	52                   	push   edx
c000b249:	50                   	push   eax
c000b24a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b24d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b250:	e8 7e ba 01 00       	call   c0026cd3 <__adddf3>
c000b255:	83 c4 10             	add    esp,0x10
c000b258:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b25b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b25e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b262:	4f                   	dec    edi
c000b263:	83 ec 0c             	sub    esp,0xc
c000b266:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b269:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b26d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b274:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b278:	e8 ca ca 01 00       	call   c0027d47 <__extendsfdf2>
c000b27d:	83 c4 10             	add    esp,0x10
c000b280:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b284:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b288:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b28c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b290:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b294:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b298:	e8 b3 c0 01 00       	call   c0027350 <__muldf3>
c000b29d:	83 c4 10             	add    esp,0x10
c000b2a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2a8:	52                   	push   edx
c000b2a9:	50                   	push   eax
c000b2aa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2ad:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b0:	e8 1e ba 01 00       	call   c0026cd3 <__adddf3>
c000b2b5:	83 c4 10             	add    esp,0x10
c000b2b8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2bb:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2c2:	4f                   	dec    edi
c000b2c3:	83 ec 0c             	sub    esp,0xc
c000b2c6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2cd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2d4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2d8:	e8 6a ca 01 00       	call   c0027d47 <__extendsfdf2>
c000b2dd:	83 c4 10             	add    esp,0x10
c000b2e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2f8:	e8 53 c0 01 00       	call   c0027350 <__muldf3>
c000b2fd:	83 c4 10             	add    esp,0x10
c000b300:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b304:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b308:	52                   	push   edx
c000b309:	50                   	push   eax
c000b30a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b30d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b310:	e8 be b9 01 00       	call   c0026cd3 <__adddf3>
c000b315:	83 c4 10             	add    esp,0x10
c000b318:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b31b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b322:	4f                   	dec    edi
c000b323:	83 ec 0c             	sub    esp,0xc
c000b326:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b329:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b32d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b334:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b338:	e8 0a ca 01 00       	call   c0027d47 <__extendsfdf2>
c000b33d:	83 c4 10             	add    esp,0x10
c000b340:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b344:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b350:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b354:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b358:	e8 f3 bf 01 00       	call   c0027350 <__muldf3>
c000b35d:	83 c4 10             	add    esp,0x10
c000b360:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b364:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b368:	52                   	push   edx
c000b369:	50                   	push   eax
c000b36a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b36d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b370:	e8 5e b9 01 00       	call   c0026cd3 <__adddf3>
c000b375:	83 c4 10             	add    esp,0x10
c000b378:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b37b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b37e:	85 ff                	test   edi,edi
c000b380:	0f 8f e1 fc ff ff    	jg     c000b067 <calc_output_multi+0x4fc>
c000b386:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b38a:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b38e:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b392:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b397:	0f 8f 3f fc ff ff    	jg     c000afdc <calc_output_multi+0x471>
c000b39d:	be 08 00 00 00       	mov    esi,0x8
c000b3a2:	89 d8                	mov    eax,ebx
c000b3a4:	99                   	cdq    
c000b3a5:	f7 fe                	idiv   esi
c000b3a7:	4a                   	dec    edx
c000b3a8:	83 fa 06             	cmp    edx,0x6
c000b3ab:	77 07                	ja     c000b3b4 <calc_output_multi+0x849>
c000b3ad:	ff 24 95 9c 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6a64]
c000b3b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3b8:	4b                   	dec    ebx
c000b3b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3cb:	e8 03 b9 01 00       	call   c0026cd3 <__adddf3>
c000b3d0:	83 c4 10             	add    esp,0x10
c000b3d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3eb:	e8 60 bf 01 00       	call   c0027350 <__muldf3>
c000b3f0:	5d                   	pop    ebp
c000b3f1:	59                   	pop    ecx
c000b3f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b402:	e8 1c c8 01 00       	call   c0027c23 <__truncdfsf2>
c000b407:	83 c4 10             	add    esp,0x10
c000b40a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b40e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b415:	4b                   	dec    ebx
c000b416:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b41a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b41d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b421:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b425:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b428:	e8 a6 b8 01 00       	call   c0026cd3 <__adddf3>
c000b42d:	83 c4 10             	add    esp,0x10
c000b430:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b434:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b448:	e8 03 bf 01 00       	call   c0027350 <__muldf3>
c000b44d:	59                   	pop    ecx
c000b44e:	5f                   	pop    edi
c000b44f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b453:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45f:	e8 bf c7 01 00       	call   c0027c23 <__truncdfsf2>
c000b464:	83 c4 10             	add    esp,0x10
c000b467:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b46b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b46e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b472:	4b                   	dec    ebx
c000b473:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b477:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b47a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b47e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b482:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b485:	e8 49 b8 01 00       	call   c0026cd3 <__adddf3>
c000b48a:	83 c4 10             	add    esp,0x10
c000b48d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b491:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b495:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b499:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a5:	e8 a6 be 01 00       	call   c0027350 <__muldf3>
c000b4aa:	5f                   	pop    edi
c000b4ab:	5d                   	pop    ebp
c000b4ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bc:	e8 62 c7 01 00       	call   c0027c23 <__truncdfsf2>
c000b4c1:	83 c4 10             	add    esp,0x10
c000b4c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4cf:	4b                   	dec    ebx
c000b4d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e2:	e8 ec b7 01 00       	call   c0026cd3 <__adddf3>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b502:	e8 49 be 01 00       	call   c0027350 <__muldf3>
c000b507:	5d                   	pop    ebp
c000b508:	59                   	pop    ecx
c000b509:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b50d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b511:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b519:	e8 05 c7 01 00       	call   c0027c23 <__truncdfsf2>
c000b51e:	83 c4 10             	add    esp,0x10
c000b521:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b525:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52c:	4b                   	dec    ebx
c000b52d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b531:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b538:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b53c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b53f:	e8 8f b7 01 00       	call   c0026cd3 <__adddf3>
c000b544:	83 c4 10             	add    esp,0x10
c000b547:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b54b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b54f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b557:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55f:	e8 ec bd 01 00       	call   c0027350 <__muldf3>
c000b564:	59                   	pop    ecx
c000b565:	5f                   	pop    edi
c000b566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b56a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b56e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b572:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b576:	e8 a8 c6 01 00       	call   c0027c23 <__truncdfsf2>
c000b57b:	83 c4 10             	add    esp,0x10
c000b57e:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b582:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b585:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b589:	4b                   	dec    ebx
c000b58a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b58e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b595:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b599:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b59c:	e8 32 b7 01 00       	call   c0026cd3 <__adddf3>
c000b5a1:	83 c4 10             	add    esp,0x10
c000b5a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5bc:	e8 8f bd 01 00       	call   c0027350 <__muldf3>
c000b5c1:	5f                   	pop    edi
c000b5c2:	5d                   	pop    ebp
c000b5c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5c7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d3:	e8 4b c6 01 00       	call   c0027c23 <__truncdfsf2>
c000b5d8:	83 c4 10             	add    esp,0x10
c000b5db:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5df:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e6:	4b                   	dec    ebx
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5f2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f9:	e8 d5 b6 01 00       	call   c0026cd3 <__adddf3>
c000b5fe:	83 c4 10             	add    esp,0x10
c000b601:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b605:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b611:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b615:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b619:	e8 32 bd 01 00       	call   c0027350 <__muldf3>
c000b61e:	5d                   	pop    ebp
c000b61f:	59                   	pop    ecx
c000b620:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b624:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b628:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b630:	e8 ee c5 01 00       	call   c0027c23 <__truncdfsf2>
c000b635:	83 c4 10             	add    esp,0x10
c000b638:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b63c:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b643:	4b                   	dec    ebx
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b653:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b656:	e8 78 b6 01 00       	call   c0026cd3 <__adddf3>
c000b65b:	83 c4 10             	add    esp,0x10
c000b65e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b662:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b676:	e8 d5 bc 01 00       	call   c0027350 <__muldf3>
c000b67b:	59                   	pop    ecx
c000b67c:	5f                   	pop    edi
c000b67d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b681:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b685:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68d:	e8 91 c5 01 00       	call   c0027c23 <__truncdfsf2>
c000b692:	83 c4 10             	add    esp,0x10
c000b695:	85 db                	test   ebx,ebx
c000b697:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b69b:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b69e:	0f 8f fe fc ff ff    	jg     c000b3a2 <calc_output_multi+0x837>
c000b6a4:	83 c4 4c             	add    esp,0x4c
c000b6a7:	5b                   	pop    ebx
c000b6a8:	5e                   	pop    esi
c000b6a9:	5f                   	pop    edi
c000b6aa:	5d                   	pop    ebp
c000b6ab:	c3                   	ret    

c000b6ac <double_to_fp>:
c000b6ac:	83 ec 0c             	sub    esp,0xc
c000b6af:	68 00 00 b0 40       	push   0x40b00000
c000b6b4:	6a 00                	push   0x0
c000b6b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6be:	e8 8d bc 01 00       	call   c0027350 <__muldf3>
c000b6c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6c7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6cb:	83 c4 1c             	add    esp,0x1c
c000b6ce:	e9 fd c6 01 00       	jmp    c0027dd0 <lrint>

c000b6d3 <prepare_data>:
c000b6d3:	55                   	push   ebp
c000b6d4:	57                   	push   edi
c000b6d5:	56                   	push   esi
c000b6d6:	53                   	push   ebx
c000b6d7:	83 ec 1c             	sub    esp,0x1c
c000b6da:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6de:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6e2:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6e6:	0f 89 57 01 00 00    	jns    c000b843 <prepare_data+0x170>
c000b6ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6ef:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6f2:	85 d2                	test   edx,edx
c000b6f4:	75 0d                	jne    c000b703 <prepare_data+0x30>
c000b6f6:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6f9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6fc:	29 d0                	sub    eax,edx
c000b6fe:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b701:	eb 44                	jmp    c000b747 <prepare_data+0x74>
c000b703:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b706:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b709:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b70c:	39 c1                	cmp    ecx,eax
c000b70e:	7d 04                	jge    c000b714 <prepare_data+0x41>
c000b710:	29 d0                	sub    eax,edx
c000b712:	eb 2d                	jmp    c000b741 <prepare_data+0x6e>
c000b714:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b71a:	29 d7                	sub    edi,edx
c000b71c:	01 f7                	add    edi,esi
c000b71e:	51                   	push   ecx
c000b71f:	29 f2                	sub    edx,esi
c000b721:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b728:	8d 14 90             	lea    edx,[eax+edx*4]
c000b72b:	51                   	push   ecx
c000b72c:	52                   	push   edx
c000b72d:	50                   	push   eax
c000b72e:	e8 35 4f ff ff       	call   c0000668 <memmove>
c000b733:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b736:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b739:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b73c:	29 f0                	sub    eax,esi
c000b73e:	83 c4 10             	add    esp,0x10
c000b741:	29 f0                	sub    eax,esi
c000b743:	79 02                	jns    c000b747 <prepare_data+0x74>
c000b745:	31 c0                	xor    eax,eax
c000b747:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b74a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b74d:	29 ef                	sub    edi,ebp
c000b74f:	39 c7                	cmp    edi,eax
c000b751:	7e 02                	jle    c000b755 <prepare_data+0x82>
c000b753:	89 c7                	mov    edi,eax
c000b755:	89 f8                	mov    eax,edi
c000b757:	99                   	cdq    
c000b758:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b75b:	b8 15 00 00 00       	mov    eax,0x15
c000b760:	29 d7                	sub    edi,edx
c000b762:	0f 88 dd 00 00 00    	js     c000b845 <prepare_data+0x172>
c000b768:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b76b:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b76e:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b771:	0f 8f ce 00 00 00    	jg     c000b845 <prepare_data+0x172>
c000b777:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b77d:	50                   	push   eax
c000b77e:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b785:	50                   	push   eax
c000b786:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b78a:	8b 00                	mov    eax,DWORD PTR [eax]
c000b78c:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b78f:	50                   	push   eax
c000b790:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b793:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b797:	50                   	push   eax
c000b798:	e8 03 4f ff ff       	call   c00006a0 <memcpy>
c000b79d:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b7a0:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b7a3:	01 fd                	add    ebp,edi
c000b7a5:	01 f9                	add    ecx,edi
c000b7a7:	83 c4 10             	add    esp,0x10
c000b7aa:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b7ad:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b7b0:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b7b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7b7:	0f 85 86 00 00 00    	jne    c000b843 <prepare_data+0x170>
c000b7bd:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b7c0:	89 e8                	mov    eax,ebp
c000b7c2:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b7c5:	29 c8                	sub    eax,ecx
c000b7c7:	39 f8                	cmp    eax,edi
c000b7c9:	7d 78                	jge    c000b843 <prepare_data+0x170>
c000b7cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7cf:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7d3:	74 6e                	je     c000b843 <prepare_data+0x170>
c000b7d5:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7d8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7dc:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7df:	29 ef                	sub    edi,ebp
c000b7e1:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7e5:	7c 29                	jl     c000b810 <prepare_data+0x13d>
c000b7e7:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7ea:	29 f1                	sub    ecx,esi
c000b7ec:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7f3:	55                   	push   ebp
c000b7f4:	50                   	push   eax
c000b7f5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7f8:	50                   	push   eax
c000b7f9:	52                   	push   edx
c000b7fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7fe:	e8 65 4e ff ff       	call   c0000668 <memmove>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b809:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b80c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b810:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b813:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b816:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b819:	83 c6 05             	add    esi,0x5
c000b81c:	78 07                	js     c000b825 <prepare_data+0x152>
c000b81e:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b821:	39 cf                	cmp    edi,ecx
c000b823:	7e 04                	jle    c000b829 <prepare_data+0x156>
c000b825:	89 ce                	mov    esi,ecx
c000b827:	29 c6                	sub    esi,eax
c000b829:	8d 04 82             	lea    eax,[edx+eax*4]
c000b82c:	51                   	push   ecx
c000b82d:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b834:	51                   	push   ecx
c000b835:	6a 00                	push   0x0
c000b837:	50                   	push   eax
c000b838:	e8 7b 4e ff ff       	call   c00006b8 <memset>
c000b83d:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b840:	83 c4 10             	add    esp,0x10
c000b843:	31 c0                	xor    eax,eax
c000b845:	83 c4 1c             	add    esp,0x1c
c000b848:	5b                   	pop    ebx
c000b849:	5e                   	pop    esi
c000b84a:	5f                   	pop    edi
c000b84b:	5d                   	pop    ebp
c000b84c:	c3                   	ret    

c000b84d <sinc_multichan_vari_process>:
c000b84d:	55                   	push   ebp
c000b84e:	ba 05 00 00 00       	mov    edx,0x5
c000b853:	57                   	push   edi
c000b854:	56                   	push   esi
c000b855:	53                   	push   ebx
c000b856:	83 ec 4c             	sub    esp,0x4c
c000b859:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b85d:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b861:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b864:	85 db                	test   ebx,ebx
c000b866:	0f 84 9b 06 00 00    	je     c000bf07 <sinc_multichan_vari_process+0x6ba>
c000b86c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b86f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b872:	0f af c5             	imul   eax,ebp
c000b875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b878:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b87b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b882:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b889:	0f af c5             	imul   eax,ebp
c000b88c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b88f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b892:	8b 06                	mov    eax,DWORD PTR [esi]
c000b894:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b898:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b89c:	68 00 00 70 3f       	push   0x3f700000
c000b8a1:	6a 00                	push   0x0
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ab:	e8 6f c3 01 00       	call   c0027c1f <__ltdf2>
c000b8b0:	83 c4 10             	add    esp,0x10
c000b8b3:	ba 16 00 00 00       	mov    edx,0x16
c000b8b8:	85 c0                	test   eax,eax
c000b8ba:	0f 88 47 06 00 00    	js     c000bf07 <sinc_multichan_vari_process+0x6ba>
c000b8c0:	68 00 00 70 40       	push   0x40700000
c000b8c5:	6a 00                	push   0x0
c000b8c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8cf:	e8 2d c3 01 00       	call   c0027c01 <__gtdf2>
c000b8d4:	83 c4 10             	add    esp,0x10
c000b8d7:	ba 16 00 00 00       	mov    edx,0x16
c000b8dc:	85 c0                	test   eax,eax
c000b8de:	0f 8f 23 06 00 00    	jg     c000bf07 <sinc_multichan_vari_process+0x6ba>
c000b8e4:	83 ec 0c             	sub    esp,0xc
c000b8e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8ea:	e8 c4 c0 01 00       	call   c00279b3 <__floatsidf>
c000b8ef:	83 c4 10             	add    esp,0x10
c000b8f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8fa:	68 00 00 00 40       	push   0x40000000
c000b8ff:	6a 00                	push   0x0
c000b901:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b905:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b909:	e8 c5 b3 01 00       	call   c0026cd3 <__adddf3>
c000b90e:	59                   	pop    ecx
c000b90f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b913:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b917:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b91a:	e8 94 c0 01 00       	call   c00279b3 <__floatsidf>
c000b91f:	83 c4 10             	add    esp,0x10
c000b922:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b926:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b92a:	52                   	push   edx
c000b92b:	50                   	push   eax
c000b92c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	e8 fb bc 01 00       	call   c0027634 <__divdf3>
c000b939:	83 c4 10             	add    esp,0x10
c000b93c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b940:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b944:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b947:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b94a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b94e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b95a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b95e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b962:	e8 9a c2 01 00       	call   c0027c01 <__gtdf2>
c000b967:	83 c4 10             	add    esp,0x10
c000b96a:	85 c0                	test   eax,eax
c000b96c:	7e 2d                	jle    c000b99b <sinc_multichan_vari_process+0x14e>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b979:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b97d:	e8 9d c2 01 00       	call   c0027c1f <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 4d                	jns    c000b9d6 <sinc_multichan_vari_process+0x189>
c000b989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b98d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b991:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b995:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b999:	eb 1b                	jmp    c000b9b6 <sinc_multichan_vari_process+0x169>
c000b99b:	68 00 00 f0 3f       	push   0x3ff00000
c000b9a0:	6a 00                	push   0x0
c000b9a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9aa:	e8 70 c2 01 00       	call   c0027c1f <__ltdf2>
c000b9af:	83 c4 10             	add    esp,0x10
c000b9b2:	85 c0                	test   eax,eax
c000b9b4:	79 20                	jns    c000b9d6 <sinc_multichan_vari_process+0x189>
c000b9b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c6:	e8 69 bc 01 00       	call   c0027634 <__divdf3>
c000b9cb:	83 c4 10             	add    esp,0x10
c000b9ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9d6:	50                   	push   eax
c000b9d7:	50                   	push   eax
c000b9d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e0:	e8 eb c3 01 00       	call   c0027dd0 <lrint>
c000b9e5:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9e8:	40                   	inc    eax
c000b9e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9ed:	0f af c5             	imul   eax,ebp
c000b9f0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9f4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9fb:	58                   	pop    eax
c000b9fc:	5a                   	pop    edx
c000b9fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba05:	e8 c6 c3 01 00       	call   c0027dd0 <lrint>
c000ba0a:	83 ec 0c             	sub    esp,0xc
c000ba0d:	50                   	push   eax
c000ba0e:	e8 a0 bf 01 00       	call   c00279b3 <__floatsidf>
c000ba13:	83 c4 10             	add    esp,0x10
c000ba16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba1e:	52                   	push   edx
c000ba1f:	50                   	push   eax
c000ba20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba28:	e8 f7 b8 01 00       	call   c0027324 <__subdf3>
c000ba2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba35:	83 c4 20             	add    esp,0x20
c000ba38:	6a 00                	push   0x0
c000ba3a:	6a 00                	push   0x0
c000ba3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba44:	e8 d6 c1 01 00       	call   c0027c1f <__ltdf2>
c000ba49:	83 c4 10             	add    esp,0x10
c000ba4c:	85 c0                	test   eax,eax
c000ba4e:	79 1f                	jns    c000ba6f <sinc_multichan_vari_process+0x222>
c000ba50:	68 00 00 f0 3f       	push   0x3ff00000
c000ba55:	6a 00                	push   0x0
c000ba57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba5f:	e8 6f b2 01 00       	call   c0026cd3 <__adddf3>
c000ba64:	83 c4 10             	add    esp,0x10
c000ba67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba6f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba72:	83 ec 10             	sub    esp,0x10
c000ba75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba79:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba8c:	e8 93 b8 01 00       	call   c0027324 <__subdf3>
c000ba91:	83 c4 18             	add    esp,0x18
c000ba94:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba9c:	52                   	push   edx
c000ba9d:	50                   	push   eax
c000ba9e:	e8 2d c3 01 00       	call   c0027dd0 <lrint>
c000baa3:	0f af e8             	imul   ebp,eax
c000baa6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000baaa:	01 e8                	add    eax,ebp
c000baac:	99                   	cdq    
c000baad:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bab0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bab3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000babb:	68 00 00 f0 3f       	push   0x3ff00000
c000bac0:	6a 00                	push   0x0
c000bac2:	e8 6d bb 01 00       	call   c0027634 <__divdf3>
c000bac7:	83 c4 10             	add    esp,0x10
c000baca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bace:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bad2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bad7:	68 23 42 92 0c       	push   0xc924223
c000badc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bae0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bae4:	e8 ea b1 01 00       	call   c0026cd3 <__adddf3>
c000bae9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baed:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000baf1:	83 c4 20             	add    esp,0x20
c000baf4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bafc:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bb04:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb07:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb0a:	7d 50                	jge    c000bb5c <sinc_multichan_vari_process+0x30f>
c000bb0c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb0f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb12:	01 c8                	add    eax,ecx
c000bb14:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb17:	99                   	cdq    
c000bb18:	f7 f9                	idiv   ecx
c000bb1a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb1e:	7d 0c                	jge    c000bb2c <sinc_multichan_vari_process+0x2df>
c000bb20:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bb23:	85 ed                	test   ebp,ebp
c000bb25:	79 6b                	jns    c000bb92 <sinc_multichan_vari_process+0x345>
c000bb27:	e9 e6 00 00 00       	jmp    c000bc12 <sinc_multichan_vari_process+0x3c5>
c000bb2c:	50                   	push   eax
c000bb2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb31:	57                   	push   edi
c000bb32:	53                   	push   ebx
c000bb33:	e8 9b fb ff ff       	call   c000b6d3 <prepare_data>
c000bb38:	83 c4 10             	add    esp,0x10
c000bb3b:	89 c2                	mov    edx,eax
c000bb3d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb40:	85 c0                	test   eax,eax
c000bb42:	0f 85 bf 03 00 00    	jne    c000bf07 <sinc_multichan_vari_process+0x6ba>
c000bb48:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb4b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb4e:	01 c8                	add    eax,ecx
c000bb50:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb53:	99                   	cdq    
c000bb54:	f7 f9                	idiv   ecx
c000bb56:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb5a:	7c c4                	jl     c000bb20 <sinc_multichan_vari_process+0x2d3>
c000bb5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb64:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb67:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb72:	89 06                	mov    DWORD PTR [esi],eax
c000bb74:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb77:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb7a:	99                   	cdq    
c000bb7b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb7e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb81:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb84:	99                   	cdq    
c000bb85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb88:	31 d2                	xor    edx,edx
c000bb8a:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb8d:	e9 75 03 00 00       	jmp    c000bf07 <sinc_multichan_vari_process+0x6ba>
c000bb92:	83 ec 0c             	sub    esp,0xc
c000bb95:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb98:	e8 16 be 01 00       	call   c00279b3 <__floatsidf>
c000bb9d:	83 c4 10             	add    esp,0x10
c000bba0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bba4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bba8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbb8:	e8 16 b1 01 00       	call   c0026cd3 <__adddf3>
c000bbbd:	83 c4 10             	add    esp,0x10
c000bbc0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbc4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbc8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbcc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd8:	e8 f6 b0 01 00       	call   c0026cd3 <__adddf3>
c000bbdd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbe0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbe4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbe8:	e8 c6 bd 01 00       	call   c00279b3 <__floatsidf>
c000bbed:	83 c4 10             	add    esp,0x10
c000bbf0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbf4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbf8:	52                   	push   edx
c000bbf9:	50                   	push   eax
c000bbfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc02:	e8 16 c0 01 00       	call   c0027c1d <__gedf2>
c000bc07:	83 c4 10             	add    esp,0x10
c000bc0a:	85 c0                	test   eax,eax
c000bc0c:	0f 89 4a ff ff ff    	jns    c000bb5c <sinc_multichan_vari_process+0x30f>
c000bc12:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc16:	0f 8e ed 00 00 00    	jle    c000bd09 <sinc_multichan_vari_process+0x4bc>
c000bc1c:	83 ec 10             	sub    esp,0x10
c000bc1f:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc22:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc25:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc28:	ff 36                	push   DWORD PTR [esi]
c000bc2a:	e8 f5 b6 01 00       	call   c0027324 <__subdf3>
c000bc2f:	83 c4 18             	add    esp,0x18
c000bc32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc3a:	52                   	push   edx
c000bc3b:	50                   	push   eax
c000bc3c:	e8 6f c1 01 00       	call   c0027db0 <fabs>
c000bc41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc45:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc49:	83 c4 10             	add    esp,0x10
c000bc4c:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc51:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc5e:	e8 9e bf 01 00       	call   c0027c01 <__gtdf2>
c000bc63:	83 c4 10             	add    esp,0x10
c000bc66:	85 c0                	test   eax,eax
c000bc68:	0f 8e 9b 00 00 00    	jle    c000bd09 <sinc_multichan_vari_process+0x4bc>
c000bc6e:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc70:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc77:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc7b:	52                   	push   edx
c000bc7c:	50                   	push   eax
c000bc7d:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc80:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc83:	e8 9c b6 01 00       	call   c0027324 <__subdf3>
c000bc88:	59                   	pop    ecx
c000bc89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc91:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc94:	e8 1a bd 01 00       	call   c00279b3 <__floatsidf>
c000bc99:	83 c4 10             	add    esp,0x10
c000bc9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bca0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca4:	52                   	push   edx
c000bca5:	50                   	push   eax
c000bca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcae:	e8 9d b6 01 00       	call   c0027350 <__muldf3>
c000bcb3:	5d                   	pop    ebp
c000bcb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcb8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bcbc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bcbf:	e8 ef bc 01 00       	call   c00279b3 <__floatsidf>
c000bcc4:	83 c4 10             	add    esp,0x10
c000bcc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bccf:	52                   	push   edx
c000bcd0:	50                   	push   eax
c000bcd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcd9:	e8 56 b9 01 00       	call   c0027634 <__divdf3>
c000bcde:	83 c4 10             	add    esp,0x10
c000bce1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bce5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bce9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bced:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcf9:	e8 d5 af 01 00       	call   c0026cd3 <__adddf3>
c000bcfe:	83 c4 10             	add    esp,0x10
c000bd01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd05:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bd09:	83 ec 0c             	sub    esp,0xc
c000bd0c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd0f:	e8 9f bc 01 00       	call   c00279b3 <__floatsidf>
c000bd14:	83 c4 10             	add    esp,0x10
c000bd17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd1b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2f:	e8 eb be 01 00       	call   c0027c1f <__ltdf2>
c000bd34:	83 c4 10             	add    esp,0x10
c000bd37:	85 c0                	test   eax,eax
c000bd39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd3d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd41:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd45:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd49:	78 10                	js     c000bd5b <sinc_multichan_vari_process+0x50e>
c000bd4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd6b:	e8 e0 b5 01 00       	call   c0027350 <__muldf3>
c000bd70:	59                   	pop    ecx
c000bd71:	5d                   	pop    ebp
c000bd72:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd82:	e8 25 f9 ff ff       	call   c000b6ac <double_to_fp>
c000bd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd8b:	89 c5                	mov    ebp,eax
c000bd8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd91:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd99:	e8 b2 b5 01 00       	call   c0027350 <__muldf3>
c000bd9e:	83 c4 18             	add    esp,0x18
c000bda1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bda5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bda9:	52                   	push   edx
c000bdaa:	50                   	push   eax
c000bdab:	e8 fc f8 ff ff       	call   c000b6ac <double_to_fp>
c000bdb0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdb3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdb7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bdba:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdbd:	50                   	push   eax
c000bdbe:	50                   	push   eax
c000bdbf:	50                   	push   eax
c000bdc0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdc3:	e8 eb bb 01 00       	call   c00279b3 <__floatsidf>
c000bdc8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdcc:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bdd0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdd4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdd8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bddc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde0:	e8 4f b8 01 00       	call   c0027634 <__divdf3>
c000bde5:	83 c4 1c             	add    esp,0x1c
c000bde8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdec:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdf0:	52                   	push   edx
c000bdf1:	89 ea                	mov    edx,ebp
c000bdf3:	50                   	push   eax
c000bdf4:	89 d8                	mov    eax,ebx
c000bdf6:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdf9:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdfd:	e8 69 ed ff ff       	call   c000ab6b <calc_output_multi>
c000be02:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be05:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be08:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be18:	e8 17 b8 01 00       	call   c0027634 <__divdf3>
c000be1d:	83 c4 10             	add    esp,0x10
c000be20:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000be24:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000be28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be38:	e8 96 ae 01 00       	call   c0026cd3 <__adddf3>
c000be3d:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be41:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be45:	83 c4 28             	add    esp,0x28
c000be48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be50:	e8 7b bf 01 00       	call   c0027dd0 <lrint>
c000be55:	83 ec 0c             	sub    esp,0xc
c000be58:	50                   	push   eax
c000be59:	e8 55 bb 01 00       	call   c00279b3 <__floatsidf>
c000be5e:	83 c4 10             	add    esp,0x10
c000be61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be69:	52                   	push   edx
c000be6a:	50                   	push   eax
c000be6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be73:	e8 ac b4 01 00       	call   c0027324 <__subdf3>
c000be78:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be7c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be80:	83 c4 20             	add    esp,0x20
c000be83:	6a 00                	push   0x0
c000be85:	6a 00                	push   0x0
c000be87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be8f:	e8 8b bd 01 00       	call   c0027c1f <__ltdf2>
c000be94:	83 c4 10             	add    esp,0x10
c000be97:	85 c0                	test   eax,eax
c000be99:	79 20                	jns    c000bebb <sinc_multichan_vari_process+0x66e>
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bea7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beab:	e8 23 ae 01 00       	call   c0026cd3 <__adddf3>
c000beb0:	83 c4 10             	add    esp,0x10
c000beb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000beb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bebb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bebe:	83 ec 10             	sub    esp,0x10
c000bec1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bec5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000becc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bed4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bed8:	e8 47 b4 01 00       	call   c0027324 <__subdf3>
c000bedd:	83 c4 18             	add    esp,0x18
c000bee0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bee4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bee8:	52                   	push   edx
c000bee9:	50                   	push   eax
c000beea:	e8 e1 be 01 00       	call   c0027dd0 <lrint>
c000beef:	0f af e8             	imul   ebp,eax
c000bef2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bef6:	83 c4 10             	add    esp,0x10
c000bef9:	01 e8                	add    eax,ebp
c000befb:	99                   	cdq    
c000befc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000beff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf02:	e9 fd fb ff ff       	jmp    c000bb04 <sinc_multichan_vari_process+0x2b7>
c000bf07:	83 c4 4c             	add    esp,0x4c
c000bf0a:	89 d0                	mov    eax,edx
c000bf0c:	5b                   	pop    ebx
c000bf0d:	5e                   	pop    esi
c000bf0e:	5f                   	pop    edi
c000bf0f:	5d                   	pop    ebp
c000bf10:	c3                   	ret    

c000bf11 <sinc_hex_vari_process>:
c000bf11:	55                   	push   ebp
c000bf12:	ba 05 00 00 00       	mov    edx,0x5
c000bf17:	57                   	push   edi
c000bf18:	56                   	push   esi
c000bf19:	53                   	push   ebx
c000bf1a:	83 ec 4c             	sub    esp,0x4c
c000bf1d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf21:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf25:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf28:	85 db                	test   ebx,ebx
c000bf2a:	0f 84 9c 06 00 00    	je     c000c5cc <sinc_hex_vari_process+0x6bb>
c000bf30:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf33:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf36:	0f af c7             	imul   eax,edi
c000bf39:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf3c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf3f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf46:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf4d:	0f af c7             	imul   eax,edi
c000bf50:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf53:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf59:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf61:	68 00 00 70 3f       	push   0x3f700000
c000bf66:	6a 00                	push   0x0
c000bf68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf70:	e8 aa bc 01 00       	call   c0027c1f <__ltdf2>
c000bf75:	83 c4 10             	add    esp,0x10
c000bf78:	ba 16 00 00 00       	mov    edx,0x16
c000bf7d:	85 c0                	test   eax,eax
c000bf7f:	0f 88 47 06 00 00    	js     c000c5cc <sinc_hex_vari_process+0x6bb>
c000bf85:	68 00 00 70 40       	push   0x40700000
c000bf8a:	6a 00                	push   0x0
c000bf8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf94:	e8 68 bc 01 00       	call   c0027c01 <__gtdf2>
c000bf99:	83 c4 10             	add    esp,0x10
c000bf9c:	ba 16 00 00 00       	mov    edx,0x16
c000bfa1:	85 c0                	test   eax,eax
c000bfa3:	0f 8f 23 06 00 00    	jg     c000c5cc <sinc_hex_vari_process+0x6bb>
c000bfa9:	83 ec 0c             	sub    esp,0xc
c000bfac:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bfaf:	e8 ff b9 01 00       	call   c00279b3 <__floatsidf>
c000bfb4:	83 c4 10             	add    esp,0x10
c000bfb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfbf:	68 00 00 00 40       	push   0x40000000
c000bfc4:	6a 00                	push   0x0
c000bfc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfce:	e8 00 ad 01 00       	call   c0026cd3 <__adddf3>
c000bfd3:	59                   	pop    ecx
c000bfd4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfd8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfdc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfdf:	e8 cf b9 01 00       	call   c00279b3 <__floatsidf>
c000bfe4:	83 c4 10             	add    esp,0x10
c000bfe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfeb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfef:	52                   	push   edx
c000bff0:	50                   	push   eax
c000bff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff9:	e8 36 b6 01 00       	call   c0027634 <__divdf3>
c000bffe:	83 c4 10             	add    esp,0x10
c000c001:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c005:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c009:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c00c:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c00f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c013:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c017:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c01b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c01f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c027:	e8 d5 bb 01 00       	call   c0027c01 <__gtdf2>
c000c02c:	83 c4 10             	add    esp,0x10
c000c02f:	85 c0                	test   eax,eax
c000c031:	7e 2d                	jle    c000c060 <sinc_hex_vari_process+0x14f>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c042:	e8 d8 bb 01 00       	call   c0027c1f <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 4d                	jns    c000c09b <sinc_hex_vari_process+0x18a>
c000c04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c052:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c056:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c05a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c05e:	eb 1b                	jmp    c000c07b <sinc_hex_vari_process+0x16a>
c000c060:	68 00 00 f0 3f       	push   0x3ff00000
c000c065:	6a 00                	push   0x0
c000c067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c06b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c06f:	e8 ab bb 01 00       	call   c0027c1f <__ltdf2>
c000c074:	83 c4 10             	add    esp,0x10
c000c077:	85 c0                	test   eax,eax
c000c079:	79 20                	jns    c000c09b <sinc_hex_vari_process+0x18a>
c000c07b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c07f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c083:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c087:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08b:	e8 a4 b5 01 00       	call   c0027634 <__divdf3>
c000c090:	83 c4 10             	add    esp,0x10
c000c093:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c097:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c09b:	50                   	push   eax
c000c09c:	50                   	push   eax
c000c09d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0a5:	e8 26 bd 01 00       	call   c0027dd0 <lrint>
c000c0aa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c0ad:	40                   	inc    eax
c000c0ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0b2:	0f af c7             	imul   eax,edi
c000c0b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c0b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c0:	58                   	pop    eax
c000c0c1:	5a                   	pop    edx
c000c0c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0ca:	e8 01 bd 01 00       	call   c0027dd0 <lrint>
c000c0cf:	83 ec 0c             	sub    esp,0xc
c000c0d2:	50                   	push   eax
c000c0d3:	e8 db b8 01 00       	call   c00279b3 <__floatsidf>
c000c0d8:	83 c4 10             	add    esp,0x10
c000c0db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0e3:	52                   	push   edx
c000c0e4:	50                   	push   eax
c000c0e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0ed:	e8 32 b2 01 00       	call   c0027324 <__subdf3>
c000c0f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0fa:	83 c4 20             	add    esp,0x20
c000c0fd:	6a 00                	push   0x0
c000c0ff:	6a 00                	push   0x0
c000c101:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c105:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c109:	e8 11 bb 01 00       	call   c0027c1f <__ltdf2>
c000c10e:	83 c4 10             	add    esp,0x10
c000c111:	85 c0                	test   eax,eax
c000c113:	79 1f                	jns    c000c134 <sinc_hex_vari_process+0x223>
c000c115:	68 00 00 f0 3f       	push   0x3ff00000
c000c11a:	6a 00                	push   0x0
c000c11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c124:	e8 aa ab 01 00       	call   c0026cd3 <__adddf3>
c000c129:	83 c4 10             	add    esp,0x10
c000c12c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c130:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c134:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c137:	83 ec 10             	sub    esp,0x10
c000c13a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c13e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c145:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c149:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c14d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c151:	e8 ce b1 01 00       	call   c0027324 <__subdf3>
c000c156:	83 c4 18             	add    esp,0x18
c000c159:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c15d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c161:	52                   	push   edx
c000c162:	50                   	push   eax
c000c163:	e8 68 bc 01 00       	call   c0027dd0 <lrint>
c000c168:	0f af f8             	imul   edi,eax
c000c16b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c16f:	01 f8                	add    eax,edi
c000c171:	99                   	cdq    
c000c172:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c175:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c178:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c17c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c180:	68 00 00 f0 3f       	push   0x3ff00000
c000c185:	6a 00                	push   0x0
c000c187:	e8 a8 b4 01 00       	call   c0027634 <__divdf3>
c000c18c:	83 c4 10             	add    esp,0x10
c000c18f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c193:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c197:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c19c:	68 23 42 92 0c       	push   0xc924223
c000c1a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1a9:	e8 25 ab 01 00       	call   c0026cd3 <__adddf3>
c000c1ae:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c1b2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c1b6:	83 c4 20             	add    esp,0x20
c000c1b9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1c1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c1c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c1cc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1cf:	7d 50                	jge    c000c221 <sinc_hex_vari_process+0x310>
c000c1d1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1d4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1d7:	01 c8                	add    eax,ecx
c000c1d9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1dc:	99                   	cdq    
c000c1dd:	f7 f9                	idiv   ecx
c000c1df:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1e3:	7d 0c                	jge    c000c1f1 <sinc_hex_vari_process+0x2e0>
c000c1e5:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1e8:	85 ff                	test   edi,edi
c000c1ea:	79 6c                	jns    c000c258 <sinc_hex_vari_process+0x347>
c000c1ec:	e9 e7 00 00 00       	jmp    c000c2d8 <sinc_hex_vari_process+0x3c7>
c000c1f1:	50                   	push   eax
c000c1f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1f6:	56                   	push   esi
c000c1f7:	53                   	push   ebx
c000c1f8:	e8 d6 f4 ff ff       	call   c000b6d3 <prepare_data>
c000c1fd:	83 c4 10             	add    esp,0x10
c000c200:	89 c2                	mov    edx,eax
c000c202:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c205:	85 c0                	test   eax,eax
c000c207:	0f 85 bf 03 00 00    	jne    c000c5cc <sinc_hex_vari_process+0x6bb>
c000c20d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c210:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c213:	01 c8                	add    eax,ecx
c000c215:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c218:	99                   	cdq    
c000c219:	f7 f9                	idiv   ecx
c000c21b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c21f:	7c c4                	jl     c000c1e5 <sinc_hex_vari_process+0x2d4>
c000c221:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c225:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c229:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c22c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c22f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c233:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c237:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c23a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c23d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c240:	99                   	cdq    
c000c241:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c244:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c247:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c24a:	99                   	cdq    
c000c24b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c24e:	31 d2                	xor    edx,edx
c000c250:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c253:	e9 74 03 00 00       	jmp    c000c5cc <sinc_hex_vari_process+0x6bb>
c000c258:	83 ec 0c             	sub    esp,0xc
c000c25b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c25e:	e8 50 b7 01 00       	call   c00279b3 <__floatsidf>
c000c263:	83 c4 10             	add    esp,0x10
c000c266:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c26a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c26e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c272:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c276:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c27a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c27e:	e8 50 aa 01 00       	call   c0026cd3 <__adddf3>
c000c283:	83 c4 10             	add    esp,0x10
c000c286:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c28a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c28e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c296:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29e:	e8 30 aa 01 00       	call   c0026cd3 <__adddf3>
c000c2a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2aa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2ae:	e8 00 b7 01 00       	call   c00279b3 <__floatsidf>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2be:	52                   	push   edx
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2c8:	e8 50 b9 01 00       	call   c0027c1d <__gedf2>
c000c2cd:	83 c4 10             	add    esp,0x10
c000c2d0:	85 c0                	test   eax,eax
c000c2d2:	0f 89 49 ff ff ff    	jns    c000c221 <sinc_hex_vari_process+0x310>
c000c2d8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2dc:	0f 8e ef 00 00 00    	jle    c000c3d1 <sinc_hex_vari_process+0x4c0>
c000c2e2:	83 ec 10             	sub    esp,0x10
c000c2e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2eb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2ee:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2f1:	e8 2e b0 01 00       	call   c0027324 <__subdf3>
c000c2f6:	83 c4 18             	add    esp,0x18
c000c2f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c301:	52                   	push   edx
c000c302:	50                   	push   eax
c000c303:	e8 a8 ba 01 00       	call   c0027db0 <fabs>
c000c308:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c30c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c310:	83 c4 10             	add    esp,0x10
c000c313:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c318:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c31d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c321:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c325:	e8 d7 b8 01 00       	call   c0027c01 <__gtdf2>
c000c32a:	83 c4 10             	add    esp,0x10
c000c32d:	85 c0                	test   eax,eax
c000c32f:	0f 8e 9c 00 00 00    	jle    c000c3d1 <sinc_hex_vari_process+0x4c0>
c000c335:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c338:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c33b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c33f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c343:	52                   	push   edx
c000c344:	50                   	push   eax
c000c345:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c348:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c34b:	e8 d4 af 01 00       	call   c0027324 <__subdf3>
c000c350:	59                   	pop    ecx
c000c351:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c355:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c359:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c35c:	e8 52 b6 01 00       	call   c00279b3 <__floatsidf>
c000c361:	83 c4 10             	add    esp,0x10
c000c364:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c368:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36c:	52                   	push   edx
c000c36d:	50                   	push   eax
c000c36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c376:	e8 d5 af 01 00       	call   c0027350 <__muldf3>
c000c37b:	5f                   	pop    edi
c000c37c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c380:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c384:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c387:	e8 27 b6 01 00       	call   c00279b3 <__floatsidf>
c000c38c:	83 c4 10             	add    esp,0x10
c000c38f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c393:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c397:	52                   	push   edx
c000c398:	50                   	push   eax
c000c399:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c39d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3a1:	e8 8e b2 01 00       	call   c0027634 <__divdf3>
c000c3a6:	83 c4 10             	add    esp,0x10
c000c3a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c1:	e8 0d a9 01 00       	call   c0026cd3 <__adddf3>
c000c3c6:	83 c4 10             	add    esp,0x10
c000c3c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3d1:	83 ec 0c             	sub    esp,0xc
c000c3d4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3d7:	e8 d7 b5 01 00       	call   c00279b3 <__floatsidf>
c000c3dc:	83 c4 10             	add    esp,0x10
c000c3df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f7:	e8 23 b8 01 00       	call   c0027c1f <__ltdf2>
c000c3fc:	83 c4 10             	add    esp,0x10
c000c3ff:	85 c0                	test   eax,eax
c000c401:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c405:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c409:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c40d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c411:	78 10                	js     c000c423 <sinc_hex_vari_process+0x512>
c000c413:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c417:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c41b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c41f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c423:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c427:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c42b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c433:	e8 18 af 01 00       	call   c0027350 <__muldf3>
c000c438:	59                   	pop    ecx
c000c439:	5f                   	pop    edi
c000c43a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c43e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c442:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c446:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c44a:	e8 5d f2 ff ff       	call   c000b6ac <double_to_fp>
c000c44f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c453:	89 c7                	mov    edi,eax
c000c455:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c45d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c461:	e8 ea ae 01 00       	call   c0027350 <__muldf3>
c000c466:	83 c4 18             	add    esp,0x18
c000c469:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c46d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c471:	52                   	push   edx
c000c472:	50                   	push   eax
c000c473:	e8 34 f2 ff ff       	call   c000b6ac <double_to_fp>
c000c478:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c47b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c47f:	83 c4 0c             	add    esp,0xc
c000c482:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c485:	8d 04 90             	lea    eax,[eax+edx*4]
c000c488:	50                   	push   eax
c000c489:	50                   	push   eax
c000c48a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c48d:	e8 21 b5 01 00       	call   c00279b3 <__floatsidf>
c000c492:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c496:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c49a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c49e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4aa:	e8 85 b1 01 00       	call   c0027634 <__divdf3>
c000c4af:	83 c4 18             	add    esp,0x18
c000c4b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ba:	52                   	push   edx
c000c4bb:	89 fa                	mov    edx,edi
c000c4bd:	50                   	push   eax
c000c4be:	89 d8                	mov    eax,ebx
c000c4c0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c4c4:	e8 50 de ff ff       	call   c000a319 <calc_output_hex>
c000c4c9:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4dd:	e8 52 b1 01 00       	call   c0027634 <__divdf3>
c000c4e2:	83 c4 10             	add    esp,0x10
c000c4e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4fd:	e8 d1 a7 01 00       	call   c0026cd3 <__adddf3>
c000c502:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c506:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c50a:	83 c4 18             	add    esp,0x18
c000c50d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c511:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c515:	e8 b6 b8 01 00       	call   c0027dd0 <lrint>
c000c51a:	83 ec 0c             	sub    esp,0xc
c000c51d:	50                   	push   eax
c000c51e:	e8 90 b4 01 00       	call   c00279b3 <__floatsidf>
c000c523:	83 c4 10             	add    esp,0x10
c000c526:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c52a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c52e:	52                   	push   edx
c000c52f:	50                   	push   eax
c000c530:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c534:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c538:	e8 e7 ad 01 00       	call   c0027324 <__subdf3>
c000c53d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c541:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c545:	83 c4 20             	add    esp,0x20
c000c548:	6a 00                	push   0x0
c000c54a:	6a 00                	push   0x0
c000c54c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c550:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c554:	e8 c6 b6 01 00       	call   c0027c1f <__ltdf2>
c000c559:	83 c4 10             	add    esp,0x10
c000c55c:	85 c0                	test   eax,eax
c000c55e:	79 20                	jns    c000c580 <sinc_hex_vari_process+0x66f>
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c56c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c570:	e8 5e a7 01 00       	call   c0026cd3 <__adddf3>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c57c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c580:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c583:	83 ec 10             	sub    esp,0x10
c000c586:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c58a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c58d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c591:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c595:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c599:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c59d:	e8 82 ad 01 00       	call   c0027324 <__subdf3>
c000c5a2:	83 c4 18             	add    esp,0x18
c000c5a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5ad:	52                   	push   edx
c000c5ae:	50                   	push   eax
c000c5af:	e8 1c b8 01 00       	call   c0027dd0 <lrint>
c000c5b4:	0f af f8             	imul   edi,eax
c000c5b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c5bb:	83 c4 10             	add    esp,0x10
c000c5be:	01 f8                	add    eax,edi
c000c5c0:	99                   	cdq    
c000c5c1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c5c4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c5c7:	e9 fd fb ff ff       	jmp    c000c1c9 <sinc_hex_vari_process+0x2b8>
c000c5cc:	83 c4 4c             	add    esp,0x4c
c000c5cf:	89 d0                	mov    eax,edx
c000c5d1:	5b                   	pop    ebx
c000c5d2:	5e                   	pop    esi
c000c5d3:	5f                   	pop    edi
c000c5d4:	5d                   	pop    ebp
c000c5d5:	c3                   	ret    

c000c5d6 <sinc_quad_vari_process>:
c000c5d6:	55                   	push   ebp
c000c5d7:	ba 05 00 00 00       	mov    edx,0x5
c000c5dc:	57                   	push   edi
c000c5dd:	56                   	push   esi
c000c5de:	53                   	push   ebx
c000c5df:	83 ec 4c             	sub    esp,0x4c
c000c5e2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5e6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5ea:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5ed:	85 db                	test   ebx,ebx
c000c5ef:	0f 84 9c 06 00 00    	je     c000cc91 <sinc_quad_vari_process+0x6bb>
c000c5f5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5f8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5fb:	0f af c7             	imul   eax,edi
c000c5fe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c601:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c604:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c60b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c612:	0f af c7             	imul   eax,edi
c000c615:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c618:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c61b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c61e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c622:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c626:	68 00 00 70 3f       	push   0x3f700000
c000c62b:	6a 00                	push   0x0
c000c62d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c631:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c635:	e8 e5 b5 01 00       	call   c0027c1f <__ltdf2>
c000c63a:	83 c4 10             	add    esp,0x10
c000c63d:	ba 16 00 00 00       	mov    edx,0x16
c000c642:	85 c0                	test   eax,eax
c000c644:	0f 88 47 06 00 00    	js     c000cc91 <sinc_quad_vari_process+0x6bb>
c000c64a:	68 00 00 70 40       	push   0x40700000
c000c64f:	6a 00                	push   0x0
c000c651:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c655:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c659:	e8 a3 b5 01 00       	call   c0027c01 <__gtdf2>
c000c65e:	83 c4 10             	add    esp,0x10
c000c661:	ba 16 00 00 00       	mov    edx,0x16
c000c666:	85 c0                	test   eax,eax
c000c668:	0f 8f 23 06 00 00    	jg     c000cc91 <sinc_quad_vari_process+0x6bb>
c000c66e:	83 ec 0c             	sub    esp,0xc
c000c671:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c674:	e8 3a b3 01 00       	call   c00279b3 <__floatsidf>
c000c679:	83 c4 10             	add    esp,0x10
c000c67c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c680:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c684:	68 00 00 00 40       	push   0x40000000
c000c689:	6a 00                	push   0x0
c000c68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c693:	e8 3b a6 01 00       	call   c0026cd3 <__adddf3>
c000c698:	59                   	pop    ecx
c000c699:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c69d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6a1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6a4:	e8 0a b3 01 00       	call   c00279b3 <__floatsidf>
c000c6a9:	83 c4 10             	add    esp,0x10
c000c6ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6b4:	52                   	push   edx
c000c6b5:	50                   	push   eax
c000c6b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6be:	e8 71 af 01 00       	call   c0027634 <__divdf3>
c000c6c3:	83 c4 10             	add    esp,0x10
c000c6c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6ce:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6d1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ec:	e8 10 b5 01 00       	call   c0027c01 <__gtdf2>
c000c6f1:	83 c4 10             	add    esp,0x10
c000c6f4:	85 c0                	test   eax,eax
c000c6f6:	7e 2d                	jle    c000c725 <sinc_quad_vari_process+0x14f>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c703:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c707:	e8 13 b5 01 00       	call   c0027c1f <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 4d                	jns    c000c760 <sinc_quad_vari_process+0x18a>
c000c713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c717:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c71b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c71f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c723:	eb 1b                	jmp    c000c740 <sinc_quad_vari_process+0x16a>
c000c725:	68 00 00 f0 3f       	push   0x3ff00000
c000c72a:	6a 00                	push   0x0
c000c72c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c730:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c734:	e8 e6 b4 01 00       	call   c0027c1f <__ltdf2>
c000c739:	83 c4 10             	add    esp,0x10
c000c73c:	85 c0                	test   eax,eax
c000c73e:	79 20                	jns    c000c760 <sinc_quad_vari_process+0x18a>
c000c740:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c744:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c748:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c74c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c750:	e8 df ae 01 00       	call   c0027634 <__divdf3>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c75c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c760:	50                   	push   eax
c000c761:	50                   	push   eax
c000c762:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c766:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c76a:	e8 61 b6 01 00       	call   c0027dd0 <lrint>
c000c76f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c772:	40                   	inc    eax
c000c773:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c777:	0f af c7             	imul   eax,edi
c000c77a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c77e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c781:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c785:	58                   	pop    eax
c000c786:	5a                   	pop    edx
c000c787:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c78b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c78f:	e8 3c b6 01 00       	call   c0027dd0 <lrint>
c000c794:	83 ec 0c             	sub    esp,0xc
c000c797:	50                   	push   eax
c000c798:	e8 16 b2 01 00       	call   c00279b3 <__floatsidf>
c000c79d:	83 c4 10             	add    esp,0x10
c000c7a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7a8:	52                   	push   edx
c000c7a9:	50                   	push   eax
c000c7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7b2:	e8 6d ab 01 00       	call   c0027324 <__subdf3>
c000c7b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7bb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7bf:	83 c4 20             	add    esp,0x20
c000c7c2:	6a 00                	push   0x0
c000c7c4:	6a 00                	push   0x0
c000c7c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ce:	e8 4c b4 01 00       	call   c0027c1f <__ltdf2>
c000c7d3:	83 c4 10             	add    esp,0x10
c000c7d6:	85 c0                	test   eax,eax
c000c7d8:	79 1f                	jns    c000c7f9 <sinc_quad_vari_process+0x223>
c000c7da:	68 00 00 f0 3f       	push   0x3ff00000
c000c7df:	6a 00                	push   0x0
c000c7e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7e9:	e8 e5 a4 01 00       	call   c0026cd3 <__adddf3>
c000c7ee:	83 c4 10             	add    esp,0x10
c000c7f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7fc:	83 ec 10             	sub    esp,0x10
c000c7ff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c803:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c812:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c816:	e8 09 ab 01 00       	call   c0027324 <__subdf3>
c000c81b:	83 c4 18             	add    esp,0x18
c000c81e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c822:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c826:	52                   	push   edx
c000c827:	50                   	push   eax
c000c828:	e8 a3 b5 01 00       	call   c0027dd0 <lrint>
c000c82d:	0f af f8             	imul   edi,eax
c000c830:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c834:	01 f8                	add    eax,edi
c000c836:	99                   	cdq    
c000c837:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c83a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c83d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c841:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c845:	68 00 00 f0 3f       	push   0x3ff00000
c000c84a:	6a 00                	push   0x0
c000c84c:	e8 e3 ad 01 00       	call   c0027634 <__divdf3>
c000c851:	83 c4 10             	add    esp,0x10
c000c854:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c858:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c861:	68 23 42 92 0c       	push   0xc924223
c000c866:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c86a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c86e:	e8 60 a4 01 00       	call   c0026cd3 <__adddf3>
c000c873:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c877:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c87b:	83 c4 20             	add    esp,0x20
c000c87e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c886:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c88e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c891:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c894:	7d 50                	jge    c000c8e6 <sinc_quad_vari_process+0x310>
c000c896:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c899:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c89c:	01 c8                	add    eax,ecx
c000c89e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8a1:	99                   	cdq    
c000c8a2:	f7 f9                	idiv   ecx
c000c8a4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8a8:	7d 0c                	jge    c000c8b6 <sinc_quad_vari_process+0x2e0>
c000c8aa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c8ad:	85 ff                	test   edi,edi
c000c8af:	79 6c                	jns    c000c91d <sinc_quad_vari_process+0x347>
c000c8b1:	e9 e7 00 00 00       	jmp    c000c99d <sinc_quad_vari_process+0x3c7>
c000c8b6:	50                   	push   eax
c000c8b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bb:	56                   	push   esi
c000c8bc:	53                   	push   ebx
c000c8bd:	e8 11 ee ff ff       	call   c000b6d3 <prepare_data>
c000c8c2:	83 c4 10             	add    esp,0x10
c000c8c5:	89 c2                	mov    edx,eax
c000c8c7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c8ca:	85 c0                	test   eax,eax
c000c8cc:	0f 85 bf 03 00 00    	jne    c000cc91 <sinc_quad_vari_process+0x6bb>
c000c8d2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8d5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8d8:	01 c8                	add    eax,ecx
c000c8da:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8dd:	99                   	cdq    
c000c8de:	f7 f9                	idiv   ecx
c000c8e0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8e4:	7c c4                	jl     c000c8aa <sinc_quad_vari_process+0x2d4>
c000c8e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8ee:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8f1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8fc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8ff:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c902:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c905:	99                   	cdq    
c000c906:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c909:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c90c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c90f:	99                   	cdq    
c000c910:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c913:	31 d2                	xor    edx,edx
c000c915:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c918:	e9 74 03 00 00       	jmp    c000cc91 <sinc_quad_vari_process+0x6bb>
c000c91d:	83 ec 0c             	sub    esp,0xc
c000c920:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c923:	e8 8b b0 01 00       	call   c00279b3 <__floatsidf>
c000c928:	83 c4 10             	add    esp,0x10
c000c92b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c92f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c933:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c937:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c93b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c93f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c943:	e8 8b a3 01 00       	call   c0026cd3 <__adddf3>
c000c948:	83 c4 10             	add    esp,0x10
c000c94b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c94f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c953:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c957:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c95b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c963:	e8 6b a3 01 00       	call   c0026cd3 <__adddf3>
c000c968:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c96b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c96f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c973:	e8 3b b0 01 00       	call   c00279b3 <__floatsidf>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c97f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c983:	52                   	push   edx
c000c984:	50                   	push   eax
c000c985:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c989:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c98d:	e8 8b b2 01 00       	call   c0027c1d <__gedf2>
c000c992:	83 c4 10             	add    esp,0x10
c000c995:	85 c0                	test   eax,eax
c000c997:	0f 89 49 ff ff ff    	jns    c000c8e6 <sinc_quad_vari_process+0x310>
c000c99d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c9a1:	0f 8e ef 00 00 00    	jle    c000ca96 <sinc_quad_vari_process+0x4c0>
c000c9a7:	83 ec 10             	sub    esp,0x10
c000c9aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9ad:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9b0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c9b3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c9b6:	e8 69 a9 01 00       	call   c0027324 <__subdf3>
c000c9bb:	83 c4 18             	add    esp,0x18
c000c9be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c6:	52                   	push   edx
c000c9c7:	50                   	push   eax
c000c9c8:	e8 e3 b3 01 00       	call   c0027db0 <fabs>
c000c9cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9d5:	83 c4 10             	add    esp,0x10
c000c9d8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9dd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ea:	e8 12 b2 01 00       	call   c0027c01 <__gtdf2>
c000c9ef:	83 c4 10             	add    esp,0x10
c000c9f2:	85 c0                	test   eax,eax
c000c9f4:	0f 8e 9c 00 00 00    	jle    c000ca96 <sinc_quad_vari_process+0x4c0>
c000c9fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9fd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca04:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca08:	52                   	push   edx
c000ca09:	50                   	push   eax
c000ca0a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ca0d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ca10:	e8 0f a9 01 00       	call   c0027324 <__subdf3>
c000ca15:	59                   	pop    ecx
c000ca16:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca1a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ca21:	e8 8d af 01 00       	call   c00279b3 <__floatsidf>
c000ca26:	83 c4 10             	add    esp,0x10
c000ca29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca31:	52                   	push   edx
c000ca32:	50                   	push   eax
c000ca33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca3b:	e8 10 a9 01 00       	call   c0027350 <__muldf3>
c000ca40:	5f                   	pop    edi
c000ca41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca45:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca49:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca4c:	e8 62 af 01 00       	call   c00279b3 <__floatsidf>
c000ca51:	83 c4 10             	add    esp,0x10
c000ca54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca5c:	52                   	push   edx
c000ca5d:	50                   	push   eax
c000ca5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca66:	e8 c9 ab 01 00       	call   c0027634 <__divdf3>
c000ca6b:	83 c4 10             	add    esp,0x10
c000ca6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca86:	e8 48 a2 01 00       	call   c0026cd3 <__adddf3>
c000ca8b:	83 c4 10             	add    esp,0x10
c000ca8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca92:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca96:	83 ec 0c             	sub    esp,0xc
c000ca99:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca9c:	e8 12 af 01 00       	call   c00279b3 <__floatsidf>
c000caa1:	83 c4 10             	add    esp,0x10
c000caa4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000caa8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000caac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabc:	e8 5e b1 01 00       	call   c0027c1f <__ltdf2>
c000cac1:	83 c4 10             	add    esp,0x10
c000cac4:	85 c0                	test   eax,eax
c000cac6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000caca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cace:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cad2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cad6:	78 10                	js     c000cae8 <sinc_quad_vari_process+0x512>
c000cad8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cadc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cae0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cae4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cae8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf8:	e8 53 a8 01 00       	call   c0027350 <__muldf3>
c000cafd:	59                   	pop    ecx
c000cafe:	5f                   	pop    edi
c000caff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb0f:	e8 98 eb ff ff       	call   c000b6ac <double_to_fp>
c000cb14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb18:	89 c7                	mov    edi,eax
c000cb1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb26:	e8 25 a8 01 00       	call   c0027350 <__muldf3>
c000cb2b:	83 c4 18             	add    esp,0x18
c000cb2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb32:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb36:	52                   	push   edx
c000cb37:	50                   	push   eax
c000cb38:	e8 6f eb ff ff       	call   c000b6ac <double_to_fp>
c000cb3d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb40:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb44:	83 c4 0c             	add    esp,0xc
c000cb47:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb4a:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb4d:	50                   	push   eax
c000cb4e:	50                   	push   eax
c000cb4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb52:	e8 5c ae 01 00       	call   c00279b3 <__floatsidf>
c000cb57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb5b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb6f:	e8 c0 aa 01 00       	call   c0027634 <__divdf3>
c000cb74:	83 c4 18             	add    esp,0x18
c000cb77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb7f:	52                   	push   edx
c000cb80:	89 fa                	mov    edx,edi
c000cb82:	50                   	push   eax
c000cb83:	89 d8                	mov    eax,ebx
c000cb85:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb89:	e8 a5 d1 ff ff       	call   c0009d33 <calc_output_quad>
c000cb8e:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cba2:	e8 8d aa 01 00       	call   c0027634 <__divdf3>
c000cba7:	83 c4 10             	add    esp,0x10
c000cbaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbc2:	e8 0c a1 01 00       	call   c0026cd3 <__adddf3>
c000cbc7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cbcb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cbcf:	83 c4 18             	add    esp,0x18
c000cbd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbda:	e8 f1 b1 01 00       	call   c0027dd0 <lrint>
c000cbdf:	83 ec 0c             	sub    esp,0xc
c000cbe2:	50                   	push   eax
c000cbe3:	e8 cb ad 01 00       	call   c00279b3 <__floatsidf>
c000cbe8:	83 c4 10             	add    esp,0x10
c000cbeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbf3:	52                   	push   edx
c000cbf4:	50                   	push   eax
c000cbf5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbf9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbfd:	e8 22 a7 01 00       	call   c0027324 <__subdf3>
c000cc02:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc06:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc0a:	83 c4 20             	add    esp,0x20
c000cc0d:	6a 00                	push   0x0
c000cc0f:	6a 00                	push   0x0
c000cc11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc19:	e8 01 b0 01 00       	call   c0027c1f <__ltdf2>
c000cc1e:	83 c4 10             	add    esp,0x10
c000cc21:	85 c0                	test   eax,eax
c000cc23:	79 20                	jns    c000cc45 <sinc_quad_vari_process+0x66f>
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc35:	e8 99 a0 01 00       	call   c0026cd3 <__adddf3>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc45:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc48:	83 ec 10             	sub    esp,0x10
c000cc4b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc4f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc62:	e8 bd a6 01 00       	call   c0027324 <__subdf3>
c000cc67:	83 c4 18             	add    esp,0x18
c000cc6a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc6e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc72:	52                   	push   edx
c000cc73:	50                   	push   eax
c000cc74:	e8 57 b1 01 00       	call   c0027dd0 <lrint>
c000cc79:	0f af f8             	imul   edi,eax
c000cc7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc80:	83 c4 10             	add    esp,0x10
c000cc83:	01 f8                	add    eax,edi
c000cc85:	99                   	cdq    
c000cc86:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc89:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc8c:	e9 fd fb ff ff       	jmp    c000c88e <sinc_quad_vari_process+0x2b8>
c000cc91:	83 c4 4c             	add    esp,0x4c
c000cc94:	89 d0                	mov    eax,edx
c000cc96:	5b                   	pop    ebx
c000cc97:	5e                   	pop    esi
c000cc98:	5f                   	pop    edi
c000cc99:	5d                   	pop    ebp
c000cc9a:	c3                   	ret    

c000cc9b <sinc_stereo_vari_process>:
c000cc9b:	55                   	push   ebp
c000cc9c:	ba 05 00 00 00       	mov    edx,0x5
c000cca1:	57                   	push   edi
c000cca2:	56                   	push   esi
c000cca3:	53                   	push   ebx
c000cca4:	83 ec 4c             	sub    esp,0x4c
c000cca7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ccab:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ccaf:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ccb2:	85 db                	test   ebx,ebx
c000ccb4:	0f 84 9c 06 00 00    	je     c000d356 <sinc_stereo_vari_process+0x6bb>
c000ccba:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ccbd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ccc0:	0f af c7             	imul   eax,edi
c000ccc3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ccc6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccc9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ccd0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccd7:	0f af c7             	imul   eax,edi
c000ccda:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccdd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cce0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cce7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cceb:	68 00 00 70 3f       	push   0x3f700000
c000ccf0:	6a 00                	push   0x0
c000ccf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfa:	e8 20 af 01 00       	call   c0027c1f <__ltdf2>
c000ccff:	83 c4 10             	add    esp,0x10
c000cd02:	ba 16 00 00 00       	mov    edx,0x16
c000cd07:	85 c0                	test   eax,eax
c000cd09:	0f 88 47 06 00 00    	js     c000d356 <sinc_stereo_vari_process+0x6bb>
c000cd0f:	68 00 00 70 40       	push   0x40700000
c000cd14:	6a 00                	push   0x0
c000cd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1e:	e8 de ae 01 00       	call   c0027c01 <__gtdf2>
c000cd23:	83 c4 10             	add    esp,0x10
c000cd26:	ba 16 00 00 00       	mov    edx,0x16
c000cd2b:	85 c0                	test   eax,eax
c000cd2d:	0f 8f 23 06 00 00    	jg     c000d356 <sinc_stereo_vari_process+0x6bb>
c000cd33:	83 ec 0c             	sub    esp,0xc
c000cd36:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd39:	e8 75 ac 01 00       	call   c00279b3 <__floatsidf>
c000cd3e:	83 c4 10             	add    esp,0x10
c000cd41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd49:	68 00 00 00 40       	push   0x40000000
c000cd4e:	6a 00                	push   0x0
c000cd50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd58:	e8 76 9f 01 00       	call   c0026cd3 <__adddf3>
c000cd5d:	59                   	pop    ecx
c000cd5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd62:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd66:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd69:	e8 45 ac 01 00       	call   c00279b3 <__floatsidf>
c000cd6e:	83 c4 10             	add    esp,0x10
c000cd71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd79:	52                   	push   edx
c000cd7a:	50                   	push   eax
c000cd7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd83:	e8 ac a8 01 00       	call   c0027634 <__divdf3>
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd8f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd93:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd96:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cda1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cda5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cda9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb1:	e8 4b ae 01 00       	call   c0027c01 <__gtdf2>
c000cdb6:	83 c4 10             	add    esp,0x10
c000cdb9:	85 c0                	test   eax,eax
c000cdbb:	7e 2d                	jle    c000cdea <sinc_stereo_vari_process+0x14f>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdcc:	e8 4e ae 01 00       	call   c0027c1f <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 4d                	jns    c000ce25 <sinc_stereo_vari_process+0x18a>
c000cdd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cddc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cde0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cde4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cde8:	eb 1b                	jmp    c000ce05 <sinc_stereo_vari_process+0x16a>
c000cdea:	68 00 00 f0 3f       	push   0x3ff00000
c000cdef:	6a 00                	push   0x0
c000cdf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdf9:	e8 21 ae 01 00       	call   c0027c1f <__ltdf2>
c000cdfe:	83 c4 10             	add    esp,0x10
c000ce01:	85 c0                	test   eax,eax
c000ce03:	79 20                	jns    c000ce25 <sinc_stereo_vari_process+0x18a>
c000ce05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce15:	e8 1a a8 01 00       	call   c0027634 <__divdf3>
c000ce1a:	83 c4 10             	add    esp,0x10
c000ce1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce21:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce25:	50                   	push   eax
c000ce26:	50                   	push   eax
c000ce27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce2f:	e8 9c af 01 00       	call   c0027dd0 <lrint>
c000ce34:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce37:	40                   	inc    eax
c000ce38:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce3c:	0f af c7             	imul   eax,edi
c000ce3f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce46:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4a:	58                   	pop    eax
c000ce4b:	5a                   	pop    edx
c000ce4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce54:	e8 77 af 01 00       	call   c0027dd0 <lrint>
c000ce59:	83 ec 0c             	sub    esp,0xc
c000ce5c:	50                   	push   eax
c000ce5d:	e8 51 ab 01 00       	call   c00279b3 <__floatsidf>
c000ce62:	83 c4 10             	add    esp,0x10
c000ce65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce69:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce6d:	52                   	push   edx
c000ce6e:	50                   	push   eax
c000ce6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce77:	e8 a8 a4 01 00       	call   c0027324 <__subdf3>
c000ce7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce84:	83 c4 20             	add    esp,0x20
c000ce87:	6a 00                	push   0x0
c000ce89:	6a 00                	push   0x0
c000ce8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce93:	e8 87 ad 01 00       	call   c0027c1f <__ltdf2>
c000ce98:	83 c4 10             	add    esp,0x10
c000ce9b:	85 c0                	test   eax,eax
c000ce9d:	79 1f                	jns    c000cebe <sinc_stereo_vari_process+0x223>
c000ce9f:	68 00 00 f0 3f       	push   0x3ff00000
c000cea4:	6a 00                	push   0x0
c000cea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceae:	e8 20 9e 01 00       	call   c0026cd3 <__adddf3>
c000ceb3:	83 c4 10             	add    esp,0x10
c000ceb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ceba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cebe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cec1:	83 ec 10             	sub    esp,0x10
c000cec4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cec8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ced7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cedb:	e8 44 a4 01 00       	call   c0027324 <__subdf3>
c000cee0:	83 c4 18             	add    esp,0x18
c000cee3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cee7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ceeb:	52                   	push   edx
c000ceec:	50                   	push   eax
c000ceed:	e8 de ae 01 00       	call   c0027dd0 <lrint>
c000cef2:	0f af f8             	imul   edi,eax
c000cef5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cef9:	01 f8                	add    eax,edi
c000cefb:	99                   	cdq    
c000cefc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cf02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0a:	68 00 00 f0 3f       	push   0x3ff00000
c000cf0f:	6a 00                	push   0x0
c000cf11:	e8 1e a7 01 00       	call   c0027634 <__divdf3>
c000cf16:	83 c4 10             	add    esp,0x10
c000cf19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf21:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cf26:	68 23 42 92 0c       	push   0xc924223
c000cf2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf33:	e8 9b 9d 01 00       	call   c0026cd3 <__adddf3>
c000cf38:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf3c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf40:	83 c4 20             	add    esp,0x20
c000cf43:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf4b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf56:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf59:	7d 50                	jge    c000cfab <sinc_stereo_vari_process+0x310>
c000cf5b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf5e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf61:	01 c8                	add    eax,ecx
c000cf63:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf66:	99                   	cdq    
c000cf67:	f7 f9                	idiv   ecx
c000cf69:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf6d:	7d 0c                	jge    c000cf7b <sinc_stereo_vari_process+0x2e0>
c000cf6f:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf72:	85 ff                	test   edi,edi
c000cf74:	79 6c                	jns    c000cfe2 <sinc_stereo_vari_process+0x347>
c000cf76:	e9 e7 00 00 00       	jmp    c000d062 <sinc_stereo_vari_process+0x3c7>
c000cf7b:	50                   	push   eax
c000cf7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf80:	56                   	push   esi
c000cf81:	53                   	push   ebx
c000cf82:	e8 4c e7 ff ff       	call   c000b6d3 <prepare_data>
c000cf87:	83 c4 10             	add    esp,0x10
c000cf8a:	89 c2                	mov    edx,eax
c000cf8c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf8f:	85 c0                	test   eax,eax
c000cf91:	0f 85 bf 03 00 00    	jne    c000d356 <sinc_stereo_vari_process+0x6bb>
c000cf97:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf9a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf9d:	01 c8                	add    eax,ecx
c000cf9f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cfa2:	99                   	cdq    
c000cfa3:	f7 f9                	idiv   ecx
c000cfa5:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cfa9:	7c c4                	jl     c000cf6f <sinc_stereo_vari_process+0x2d4>
c000cfab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfaf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfb3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cfb6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfbd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cfc4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cfc7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cfca:	99                   	cdq    
c000cfcb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfce:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfd1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfd4:	99                   	cdq    
c000cfd5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfd8:	31 d2                	xor    edx,edx
c000cfda:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfdd:	e9 74 03 00 00       	jmp    c000d356 <sinc_stereo_vari_process+0x6bb>
c000cfe2:	83 ec 0c             	sub    esp,0xc
c000cfe5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfe8:	e8 c6 a9 01 00       	call   c00279b3 <__floatsidf>
c000cfed:	83 c4 10             	add    esp,0x10
c000cff0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cff4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cff8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cffc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d000:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d004:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d008:	e8 c6 9c 01 00       	call   c0026cd3 <__adddf3>
c000d00d:	83 c4 10             	add    esp,0x10
c000d010:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d014:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d018:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d01c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d020:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d024:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d028:	e8 a6 9c 01 00       	call   c0026cd3 <__adddf3>
c000d02d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d030:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d034:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d038:	e8 76 a9 01 00       	call   c00279b3 <__floatsidf>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d044:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d048:	52                   	push   edx
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d04e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d052:	e8 c6 ab 01 00       	call   c0027c1d <__gedf2>
c000d057:	83 c4 10             	add    esp,0x10
c000d05a:	85 c0                	test   eax,eax
c000d05c:	0f 89 49 ff ff ff    	jns    c000cfab <sinc_stereo_vari_process+0x310>
c000d062:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d066:	0f 8e ef 00 00 00    	jle    c000d15b <sinc_stereo_vari_process+0x4c0>
c000d06c:	83 ec 10             	sub    esp,0x10
c000d06f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d072:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d075:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d078:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d07b:	e8 a4 a2 01 00       	call   c0027324 <__subdf3>
c000d080:	83 c4 18             	add    esp,0x18
c000d083:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d087:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08b:	52                   	push   edx
c000d08c:	50                   	push   eax
c000d08d:	e8 1e ad 01 00       	call   c0027db0 <fabs>
c000d092:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d096:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d09a:	83 c4 10             	add    esp,0x10
c000d09d:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d0a2:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d0a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0af:	e8 4d ab 01 00       	call   c0027c01 <__gtdf2>
c000d0b4:	83 c4 10             	add    esp,0x10
c000d0b7:	85 c0                	test   eax,eax
c000d0b9:	0f 8e 9c 00 00 00    	jle    c000d15b <sinc_stereo_vari_process+0x4c0>
c000d0bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0c2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0cd:	52                   	push   edx
c000d0ce:	50                   	push   eax
c000d0cf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0d2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0d5:	e8 4a a2 01 00       	call   c0027324 <__subdf3>
c000d0da:	59                   	pop    ecx
c000d0db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0df:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0e6:	e8 c8 a8 01 00       	call   c00279b3 <__floatsidf>
c000d0eb:	83 c4 10             	add    esp,0x10
c000d0ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f6:	52                   	push   edx
c000d0f7:	50                   	push   eax
c000d0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d100:	e8 4b a2 01 00       	call   c0027350 <__muldf3>
c000d105:	5f                   	pop    edi
c000d106:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d10a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d10e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d111:	e8 9d a8 01 00       	call   c00279b3 <__floatsidf>
c000d116:	83 c4 10             	add    esp,0x10
c000d119:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d11d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d121:	52                   	push   edx
c000d122:	50                   	push   eax
c000d123:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d127:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d12b:	e8 04 a5 01 00       	call   c0027634 <__divdf3>
c000d130:	83 c4 10             	add    esp,0x10
c000d133:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d137:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d143:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d147:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d14b:	e8 83 9b 01 00       	call   c0026cd3 <__adddf3>
c000d150:	83 c4 10             	add    esp,0x10
c000d153:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d157:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d15b:	83 ec 0c             	sub    esp,0xc
c000d15e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d161:	e8 4d a8 01 00       	call   c00279b3 <__floatsidf>
c000d166:	83 c4 10             	add    esp,0x10
c000d169:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d16d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d17d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d181:	e8 99 aa 01 00       	call   c0027c1f <__ltdf2>
c000d186:	83 c4 10             	add    esp,0x10
c000d189:	85 c0                	test   eax,eax
c000d18b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d18f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d193:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d197:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d19b:	78 10                	js     c000d1ad <sinc_stereo_vari_process+0x512>
c000d19d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1bd:	e8 8e a1 01 00       	call   c0027350 <__muldf3>
c000d1c2:	59                   	pop    ecx
c000d1c3:	5f                   	pop    edi
c000d1c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1d4:	e8 d3 e4 ff ff       	call   c000b6ac <double_to_fp>
c000d1d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1dd:	89 c7                	mov    edi,eax
c000d1df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1eb:	e8 60 a1 01 00       	call   c0027350 <__muldf3>
c000d1f0:	83 c4 18             	add    esp,0x18
c000d1f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1fb:	52                   	push   edx
c000d1fc:	50                   	push   eax
c000d1fd:	e8 aa e4 ff ff       	call   c000b6ac <double_to_fp>
c000d202:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d205:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d209:	83 c4 0c             	add    esp,0xc
c000d20c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d20f:	8d 04 90             	lea    eax,[eax+edx*4]
c000d212:	50                   	push   eax
c000d213:	50                   	push   eax
c000d214:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d217:	e8 97 a7 01 00       	call   c00279b3 <__floatsidf>
c000d21c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d220:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d224:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d228:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d22c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d234:	e8 fb a3 01 00       	call   c0027634 <__divdf3>
c000d239:	83 c4 18             	add    esp,0x18
c000d23c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d240:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d244:	52                   	push   edx
c000d245:	89 fa                	mov    edx,edi
c000d247:	50                   	push   eax
c000d248:	89 d8                	mov    eax,ebx
c000d24a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d24e:	e8 02 c7 ff ff       	call   c0009955 <calc_output_stereo>
c000d253:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d257:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d25b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d25f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d267:	e8 c8 a3 01 00       	call   c0027634 <__divdf3>
c000d26c:	83 c4 10             	add    esp,0x10
c000d26f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d273:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d27b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d27f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d283:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d287:	e8 47 9a 01 00       	call   c0026cd3 <__adddf3>
c000d28c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d290:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d294:	83 c4 18             	add    esp,0x18
c000d297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d29b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d29f:	e8 2c ab 01 00       	call   c0027dd0 <lrint>
c000d2a4:	83 ec 0c             	sub    esp,0xc
c000d2a7:	50                   	push   eax
c000d2a8:	e8 06 a7 01 00       	call   c00279b3 <__floatsidf>
c000d2ad:	83 c4 10             	add    esp,0x10
c000d2b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d2b8:	52                   	push   edx
c000d2b9:	50                   	push   eax
c000d2ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2c2:	e8 5d a0 01 00       	call   c0027324 <__subdf3>
c000d2c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2cf:	83 c4 20             	add    esp,0x20
c000d2d2:	6a 00                	push   0x0
c000d2d4:	6a 00                	push   0x0
c000d2d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2de:	e8 3c a9 01 00       	call   c0027c1f <__ltdf2>
c000d2e3:	83 c4 10             	add    esp,0x10
c000d2e6:	85 c0                	test   eax,eax
c000d2e8:	79 20                	jns    c000d30a <sinc_stereo_vari_process+0x66f>
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2fa:	e8 d4 99 01 00       	call   c0026cd3 <__adddf3>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d306:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d30a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d30d:	83 ec 10             	sub    esp,0x10
c000d310:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d314:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d31b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d31f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d323:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d327:	e8 f8 9f 01 00       	call   c0027324 <__subdf3>
c000d32c:	83 c4 18             	add    esp,0x18
c000d32f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d337:	52                   	push   edx
c000d338:	50                   	push   eax
c000d339:	e8 92 aa 01 00       	call   c0027dd0 <lrint>
c000d33e:	0f af f8             	imul   edi,eax
c000d341:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d345:	83 c4 10             	add    esp,0x10
c000d348:	01 f8                	add    eax,edi
c000d34a:	99                   	cdq    
c000d34b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d34e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d351:	e9 fd fb ff ff       	jmp    c000cf53 <sinc_stereo_vari_process+0x2b8>
c000d356:	83 c4 4c             	add    esp,0x4c
c000d359:	89 d0                	mov    eax,edx
c000d35b:	5b                   	pop    ebx
c000d35c:	5e                   	pop    esi
c000d35d:	5f                   	pop    edi
c000d35e:	5d                   	pop    ebp
c000d35f:	c3                   	ret    

c000d360 <sinc_mono_vari_process>:
c000d360:	55                   	push   ebp
c000d361:	ba 05 00 00 00       	mov    edx,0x5
c000d366:	57                   	push   edi
c000d367:	56                   	push   esi
c000d368:	53                   	push   ebx
c000d369:	83 ec 4c             	sub    esp,0x4c
c000d36c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d370:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d374:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d377:	85 db                	test   ebx,ebx
c000d379:	0f 84 c1 06 00 00    	je     c000da40 <sinc_mono_vari_process+0x6e0>
c000d37f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d382:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d385:	0f af c7             	imul   eax,edi
c000d388:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d38b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d38e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d395:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d39c:	0f af c7             	imul   eax,edi
c000d39f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d3a2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3a6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d3a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3b3:	68 00 00 70 3f       	push   0x3f700000
c000d3b8:	6a 00                	push   0x0
c000d3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c2:	e8 58 a8 01 00       	call   c0027c1f <__ltdf2>
c000d3c7:	83 c4 10             	add    esp,0x10
c000d3ca:	ba 16 00 00 00       	mov    edx,0x16
c000d3cf:	85 c0                	test   eax,eax
c000d3d1:	0f 88 69 06 00 00    	js     c000da40 <sinc_mono_vari_process+0x6e0>
c000d3d7:	68 00 00 70 40       	push   0x40700000
c000d3dc:	6a 00                	push   0x0
c000d3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3e6:	e8 16 a8 01 00       	call   c0027c01 <__gtdf2>
c000d3eb:	83 c4 10             	add    esp,0x10
c000d3ee:	ba 16 00 00 00       	mov    edx,0x16
c000d3f3:	85 c0                	test   eax,eax
c000d3f5:	0f 8f 45 06 00 00    	jg     c000da40 <sinc_mono_vari_process+0x6e0>
c000d3fb:	83 ec 0c             	sub    esp,0xc
c000d3fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d401:	e8 ad a5 01 00       	call   c00279b3 <__floatsidf>
c000d406:	83 c4 10             	add    esp,0x10
c000d409:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d40d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d411:	68 00 00 00 40       	push   0x40000000
c000d416:	6a 00                	push   0x0
c000d418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d420:	e8 ae 98 01 00       	call   c0026cd3 <__adddf3>
c000d425:	59                   	pop    ecx
c000d426:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d42a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d42e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d431:	e8 7d a5 01 00       	call   c00279b3 <__floatsidf>
c000d436:	83 c4 10             	add    esp,0x10
c000d439:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d43d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d441:	52                   	push   edx
c000d442:	50                   	push   eax
c000d443:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d447:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44b:	e8 e4 a1 01 00       	call   c0027634 <__divdf3>
c000d450:	83 c4 10             	add    esp,0x10
c000d453:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d457:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d45b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d45e:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d461:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d465:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d469:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d46d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d479:	e8 83 a7 01 00       	call   c0027c01 <__gtdf2>
c000d47e:	83 c4 10             	add    esp,0x10
c000d481:	85 c0                	test   eax,eax
c000d483:	7e 2d                	jle    c000d4b2 <sinc_mono_vari_process+0x152>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d494:	e8 86 a7 01 00       	call   c0027c1f <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 4d                	jns    c000d4ed <sinc_mono_vari_process+0x18d>
c000d4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d4a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4b0:	eb 1b                	jmp    c000d4cd <sinc_mono_vari_process+0x16d>
c000d4b2:	68 00 00 f0 3f       	push   0x3ff00000
c000d4b7:	6a 00                	push   0x0
c000d4b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c1:	e8 59 a7 01 00       	call   c0027c1f <__ltdf2>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	85 c0                	test   eax,eax
c000d4cb:	79 20                	jns    c000d4ed <sinc_mono_vari_process+0x18d>
c000d4cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4dd:	e8 52 a1 01 00       	call   c0027634 <__divdf3>
c000d4e2:	83 c4 10             	add    esp,0x10
c000d4e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4ed:	50                   	push   eax
c000d4ee:	50                   	push   eax
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f7:	e8 d4 a8 01 00       	call   c0027dd0 <lrint>
c000d4fc:	40                   	inc    eax
c000d4fd:	0f af c7             	imul   eax,edi
c000d500:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d504:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d508:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d50b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d50e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d516:	58                   	pop    eax
c000d517:	5a                   	pop    edx
c000d518:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d51c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d520:	e8 ab a8 01 00       	call   c0027dd0 <lrint>
c000d525:	83 ec 0c             	sub    esp,0xc
c000d528:	50                   	push   eax
c000d529:	e8 85 a4 01 00       	call   c00279b3 <__floatsidf>
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d535:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d539:	52                   	push   edx
c000d53a:	50                   	push   eax
c000d53b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d53f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d543:	e8 dc 9d 01 00       	call   c0027324 <__subdf3>
c000d548:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d54c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d550:	83 c4 20             	add    esp,0x20
c000d553:	6a 00                	push   0x0
c000d555:	6a 00                	push   0x0
c000d557:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55f:	e8 bb a6 01 00       	call   c0027c1f <__ltdf2>
c000d564:	83 c4 10             	add    esp,0x10
c000d567:	85 c0                	test   eax,eax
c000d569:	79 1f                	jns    c000d58a <sinc_mono_vari_process+0x22a>
c000d56b:	68 00 00 f0 3f       	push   0x3ff00000
c000d570:	6a 00                	push   0x0
c000d572:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d576:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d57a:	e8 54 97 01 00       	call   c0026cd3 <__adddf3>
c000d57f:	83 c4 10             	add    esp,0x10
c000d582:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d586:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d58a:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d58d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d590:	83 ec 10             	sub    esp,0x10
c000d593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d59f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5a3:	e8 7c 9d 01 00       	call   c0027324 <__subdf3>
c000d5a8:	83 c4 18             	add    esp,0x18
c000d5ab:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5b3:	52                   	push   edx
c000d5b4:	50                   	push   eax
c000d5b5:	e8 16 a8 01 00       	call   c0027dd0 <lrint>
c000d5ba:	0f af f8             	imul   edi,eax
c000d5bd:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d5c0:	31 ff                	xor    edi,edi
c000d5c2:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d5c7:	99                   	cdq    
c000d5c8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d5cb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d6:	55                   	push   ebp
c000d5d7:	57                   	push   edi
c000d5d8:	e8 57 a0 01 00       	call   c0027634 <__divdf3>
c000d5dd:	83 c4 10             	add    esp,0x10
c000d5e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5ed:	68 23 42 92 0c       	push   0xc924223
c000d5f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fa:	e8 d4 96 01 00       	call   c0026cd3 <__adddf3>
c000d5ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d603:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d607:	83 c4 20             	add    esp,0x20
c000d60a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d60e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d612:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d615:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d618:	7d 54                	jge    c000d66e <sinc_mono_vari_process+0x30e>
c000d61a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d61d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d620:	01 c8                	add    eax,ecx
c000d622:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d625:	99                   	cdq    
c000d626:	f7 f9                	idiv   ecx
c000d628:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d62c:	7d 0c                	jge    c000d63a <sinc_mono_vari_process+0x2da>
c000d62e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d631:	85 ff                	test   edi,edi
c000d633:	79 73                	jns    c000d6a8 <sinc_mono_vari_process+0x348>
c000d635:	e9 ee 00 00 00       	jmp    c000d728 <sinc_mono_vari_process+0x3c8>
c000d63a:	50                   	push   eax
c000d63b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d63f:	56                   	push   esi
c000d640:	53                   	push   ebx
c000d641:	e8 8d e0 ff ff       	call   c000b6d3 <prepare_data>
c000d646:	89 c2                	mov    edx,eax
c000d648:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d64c:	83 c4 10             	add    esp,0x10
c000d64f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d652:	85 d2                	test   edx,edx
c000d654:	0f 85 e6 03 00 00    	jne    c000da40 <sinc_mono_vari_process+0x6e0>
c000d65a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d65d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d660:	01 c8                	add    eax,ecx
c000d662:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d665:	99                   	cdq    
c000d666:	f7 f9                	idiv   ecx
c000d668:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d66c:	7c c0                	jl     c000d62e <sinc_mono_vari_process+0x2ce>
c000d66e:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d676:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d67a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d67d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d684:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d688:	89 01                	mov    DWORD PTR [ecx],eax
c000d68a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d68d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d690:	99                   	cdq    
c000d691:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d694:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d697:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d69a:	99                   	cdq    
c000d69b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d69e:	31 d2                	xor    edx,edx
c000d6a0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d6a3:	e9 98 03 00 00       	jmp    c000da40 <sinc_mono_vari_process+0x6e0>
c000d6a8:	83 ec 0c             	sub    esp,0xc
c000d6ab:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d6ae:	e8 00 a3 01 00       	call   c00279b3 <__floatsidf>
c000d6b3:	83 c4 10             	add    esp,0x10
c000d6b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6ce:	e8 00 96 01 00       	call   c0026cd3 <__adddf3>
c000d6d3:	83 c4 10             	add    esp,0x10
c000d6d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6ee:	e8 e0 95 01 00       	call   c0026cd3 <__adddf3>
c000d6f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6f6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6fa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6fe:	e8 b0 a2 01 00       	call   c00279b3 <__floatsidf>
c000d703:	83 c4 10             	add    esp,0x10
c000d706:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d70a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d70e:	52                   	push   edx
c000d70f:	50                   	push   eax
c000d710:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d714:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d718:	e8 e4 a4 01 00       	call   c0027c01 <__gtdf2>
c000d71d:	83 c4 10             	add    esp,0x10
c000d720:	85 c0                	test   eax,eax
c000d722:	0f 8f 46 ff ff ff    	jg     c000d66e <sinc_mono_vari_process+0x30e>
c000d728:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d72c:	0f 8e f5 00 00 00    	jle    c000d827 <sinc_mono_vari_process+0x4c7>
c000d732:	83 ec 10             	sub    esp,0x10
c000d735:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d738:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d73b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d73f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d742:	ff 30                	push   DWORD PTR [eax]
c000d744:	e8 db 9b 01 00       	call   c0027324 <__subdf3>
c000d749:	83 c4 18             	add    esp,0x18
c000d74c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d750:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d754:	52                   	push   edx
c000d755:	50                   	push   eax
c000d756:	e8 55 a6 01 00       	call   c0027db0 <fabs>
c000d75b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d75f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d763:	83 c4 10             	add    esp,0x10
c000d766:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d76b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d770:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d774:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d778:	e8 84 a4 01 00       	call   c0027c01 <__gtdf2>
c000d77d:	83 c4 10             	add    esp,0x10
c000d780:	85 c0                	test   eax,eax
c000d782:	0f 8e 9f 00 00 00    	jle    c000d827 <sinc_mono_vari_process+0x4c7>
c000d788:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d78c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d78f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d791:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d795:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d799:	52                   	push   edx
c000d79a:	50                   	push   eax
c000d79b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d79e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d7a1:	e8 7e 9b 01 00       	call   c0027324 <__subdf3>
c000d7a6:	5f                   	pop    edi
c000d7a7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7ab:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7af:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d7b2:	e8 fc a1 01 00       	call   c00279b3 <__floatsidf>
c000d7b7:	83 c4 10             	add    esp,0x10
c000d7ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c2:	52                   	push   edx
c000d7c3:	50                   	push   eax
c000d7c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7cc:	e8 7f 9b 01 00       	call   c0027350 <__muldf3>
c000d7d1:	5d                   	pop    ebp
c000d7d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7da:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7dd:	e8 d1 a1 01 00       	call   c00279b3 <__floatsidf>
c000d7e2:	83 c4 10             	add    esp,0x10
c000d7e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7ed:	52                   	push   edx
c000d7ee:	50                   	push   eax
c000d7ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7f7:	e8 38 9e 01 00       	call   c0027634 <__divdf3>
c000d7fc:	83 c4 10             	add    esp,0x10
c000d7ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d803:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d807:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d80b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d80f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d813:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d817:	e8 b7 94 01 00       	call   c0026cd3 <__adddf3>
c000d81c:	83 c4 10             	add    esp,0x10
c000d81f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d823:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d827:	83 ec 0c             	sub    esp,0xc
c000d82a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d82d:	e8 81 a1 01 00       	call   c00279b3 <__floatsidf>
c000d832:	83 c4 10             	add    esp,0x10
c000d835:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d839:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d841:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d845:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84d:	e8 cd a3 01 00       	call   c0027c1f <__ltdf2>
c000d852:	83 c4 10             	add    esp,0x10
c000d855:	85 c0                	test   eax,eax
c000d857:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d85b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d85f:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d863:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d867:	78 10                	js     c000d879 <sinc_mono_vari_process+0x519>
c000d869:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d86d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d871:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d875:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d879:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d87d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d881:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d885:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d889:	e8 c2 9a 01 00       	call   c0027350 <__muldf3>
c000d88e:	59                   	pop    ecx
c000d88f:	5f                   	pop    edi
c000d890:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d894:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d898:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d89c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8a0:	e8 07 de ff ff       	call   c000b6ac <double_to_fp>
c000d8a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8a9:	89 c7                	mov    edi,eax
c000d8ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8b7:	e8 94 9a 01 00       	call   c0027350 <__muldf3>
c000d8bc:	83 c4 18             	add    esp,0x18
c000d8bf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8c3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8c7:	52                   	push   edx
c000d8c8:	50                   	push   eax
c000d8c9:	e8 de dd ff ff       	call   c000b6ac <double_to_fp>
c000d8ce:	83 ec 0c             	sub    esp,0xc
c000d8d1:	89 c5                	mov    ebp,eax
c000d8d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8d6:	e8 d8 a0 01 00       	call   c00279b3 <__floatsidf>
c000d8db:	83 c4 10             	add    esp,0x10
c000d8de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8e2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8e6:	52                   	push   edx
c000d8e7:	50                   	push   eax
c000d8e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8ec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f0:	e8 3f 9d 01 00       	call   c0027634 <__divdf3>
c000d8f5:	83 c4 10             	add    esp,0x10
c000d8f8:	89 e9                	mov    ecx,ebp
c000d8fa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8fe:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d902:	89 d8                	mov    eax,ebx
c000d904:	89 fa                	mov    edx,edi
c000d906:	e8 ee bd ff ff       	call   c00096f9 <calc_output_single>
c000d90b:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d90e:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d911:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d915:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d919:	52                   	push   edx
c000d91a:	50                   	push   eax
c000d91b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d91f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d923:	e8 28 9a 01 00       	call   c0027350 <__muldf3>
c000d928:	59                   	pop    ecx
c000d929:	59                   	pop    ecx
c000d92a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d92e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d932:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d936:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d93a:	e8 e4 a2 01 00       	call   c0027c23 <__truncdfsf2>
c000d93f:	83 c4 10             	add    esp,0x10
c000d942:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d945:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d948:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d94c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d950:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d954:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d958:	e8 d7 9c 01 00       	call   c0027634 <__divdf3>
c000d95d:	83 c4 10             	add    esp,0x10
c000d960:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d964:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d96c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d970:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d974:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d978:	e8 56 93 01 00       	call   c0026cd3 <__adddf3>
c000d97d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d981:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d985:	83 c4 18             	add    esp,0x18
c000d988:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d98c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d990:	e8 3b a4 01 00       	call   c0027dd0 <lrint>
c000d995:	83 ec 0c             	sub    esp,0xc
c000d998:	50                   	push   eax
c000d999:	e8 15 a0 01 00       	call   c00279b3 <__floatsidf>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9a9:	52                   	push   edx
c000d9aa:	50                   	push   eax
c000d9ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9af:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9b3:	e8 6c 99 01 00       	call   c0027324 <__subdf3>
c000d9b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9c0:	83 c4 20             	add    esp,0x20
c000d9c3:	6a 00                	push   0x0
c000d9c5:	6a 00                	push   0x0
c000d9c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9cf:	e8 4b a2 01 00       	call   c0027c1f <__ltdf2>
c000d9d4:	83 c4 10             	add    esp,0x10
c000d9d7:	85 c0                	test   eax,eax
c000d9d9:	79 20                	jns    c000d9fb <sinc_mono_vari_process+0x69b>
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9eb:	e8 e3 92 01 00       	call   c0026cd3 <__adddf3>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9fb:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9fe:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000da01:	83 ec 10             	sub    esp,0x10
c000da04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da0c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da14:	e8 0b 99 01 00       	call   c0027324 <__subdf3>
c000da19:	83 c4 18             	add    esp,0x18
c000da1c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da24:	52                   	push   edx
c000da25:	50                   	push   eax
c000da26:	e8 a5 a3 01 00       	call   c0027dd0 <lrint>
c000da2b:	83 c4 10             	add    esp,0x10
c000da2e:	0f af f8             	imul   edi,eax
c000da31:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da34:	99                   	cdq    
c000da35:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da38:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da3b:	e9 d2 fb ff ff       	jmp    c000d612 <sinc_mono_vari_process+0x2b2>
c000da40:	83 c4 4c             	add    esp,0x4c
c000da43:	89 d0                	mov    eax,edx
c000da45:	5b                   	pop    ebx
c000da46:	5e                   	pop    esi
c000da47:	5f                   	pop    edi
c000da48:	5d                   	pop    ebp
c000da49:	c3                   	ret    

c000da4a <sinc_get_name>:
c000da4a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da4e:	31 c0                	xor    eax,eax
c000da50:	83 fa 02             	cmp    edx,0x2
c000da53:	77 07                	ja     c000da5c <sinc_get_name+0x12>
c000da55:	8b 04 95 c4 95 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6a3c]
c000da5c:	c3                   	ret    

c000da5d <sinc_get_description>:
c000da5d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da61:	31 c0                	xor    eax,eax
c000da63:	83 fa 02             	cmp    edx,0x2
c000da66:	77 07                	ja     c000da6f <sinc_get_description+0x12>
c000da68:	8b 04 95 b8 95 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6a48]
c000da6f:	c3                   	ret    

c000da70 <sinc_set_converter>:
c000da70:	53                   	push   ebx
c000da71:	81 ec 58 08 00 00    	sub    esp,0x858
c000da77:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da7e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da81:	85 c0                	test   eax,eax
c000da83:	74 13                	je     c000da98 <sinc_set_converter+0x28>
c000da85:	83 ec 0c             	sub    esp,0xc
c000da88:	50                   	push   eax
c000da89:	e8 9a 1b 00 00       	call   c000f628 <free>
c000da8e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da95:	83 c4 10             	add    esp,0x10
c000da98:	50                   	push   eax
c000da99:	68 44 08 00 00       	push   0x844
c000da9e:	6a 00                	push   0x0
c000daa0:	8d 44 24 18          	lea    eax,[esp+0x18]
c000daa4:	50                   	push   eax
c000daa5:	e8 0e 2c ff ff       	call   c00006b8 <memset>
c000daaa:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000daad:	83 c4 10             	add    esp,0x10
c000dab0:	b8 0b 00 00 00       	mov    eax,0xb
c000dab5:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dabb:	7f 6e                	jg     c000db2b <sinc_set_converter+0xbb>
c000dabd:	83 fa 01             	cmp    edx,0x1
c000dac0:	75 10                	jne    c000dad2 <sinc_set_converter+0x62>
c000dac2:	c7 43 24 60 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d360
c000dac9:	c7 43 20 60 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d360
c000dad0:	eb 4d                	jmp    c000db1f <sinc_set_converter+0xaf>
c000dad2:	83 fa 02             	cmp    edx,0x2
c000dad5:	75 10                	jne    c000dae7 <sinc_set_converter+0x77>
c000dad7:	c7 43 24 9b cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc9b
c000dade:	c7 43 20 9b cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc9b
c000dae5:	eb 38                	jmp    c000db1f <sinc_set_converter+0xaf>
c000dae7:	83 fa 04             	cmp    edx,0x4
c000daea:	75 10                	jne    c000dafc <sinc_set_converter+0x8c>
c000daec:	c7 43 24 d6 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5d6
c000daf3:	c7 43 20 d6 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5d6
c000dafa:	eb 23                	jmp    c000db1f <sinc_set_converter+0xaf>
c000dafc:	83 fa 06             	cmp    edx,0x6
c000daff:	75 10                	jne    c000db11 <sinc_set_converter+0xa1>
c000db01:	c7 43 24 11 bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf11
c000db08:	c7 43 20 11 bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf11
c000db0f:	eb 0e                	jmp    c000db1f <sinc_set_converter+0xaf>
c000db11:	c7 43 24 4d b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b84d
c000db18:	c7 43 20 4d b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b84d
c000db1f:	c7 43 28 00 ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab00
c000db26:	b8 0a 00 00 00       	mov    eax,0xa
c000db2b:	81 c4 58 08 00 00    	add    esp,0x858
c000db31:	5b                   	pop    ebx
c000db32:	c3                   	ret    

c000db33 <zoh_vari_process>:
c000db33:	55                   	push   ebp
c000db34:	31 d2                	xor    edx,edx
c000db36:	57                   	push   edi
c000db37:	56                   	push   esi
c000db38:	53                   	push   ebx
c000db39:	83 ec 3c             	sub    esp,0x3c
c000db3c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db40:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db44:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db48:	0f 8e 80 06 00 00    	jle    c000e1ce <zoh_vari_process+0x69b>
c000db4e:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db51:	ba 05 00 00 00       	mov    edx,0x5
c000db56:	85 db                	test   ebx,ebx
c000db58:	0f 84 70 06 00 00    	je     c000e1ce <zoh_vari_process+0x69b>
c000db5e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db61:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db65:	74 19                	je     c000db80 <zoh_vari_process+0x4d>
c000db67:	31 d2                	xor    edx,edx
c000db69:	39 c2                	cmp    edx,eax
c000db6b:	7d 0c                	jge    c000db79 <zoh_vari_process+0x46>
c000db6d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db6f:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db72:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db76:	42                   	inc    edx
c000db77:	eb f0                	jmp    c000db69 <zoh_vari_process+0x36>
c000db79:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db80:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db83:	0f af d0             	imul   edx,eax
c000db86:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db89:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db8d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db94:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db97:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db9e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dba1:	8b 07                	mov    eax,DWORD PTR [edi]
c000dba3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dba7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbab:	68 00 00 70 3f       	push   0x3f700000
c000dbb0:	6a 00                	push   0x0
c000dbb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbba:	e8 60 a0 01 00       	call   c0027c1f <__ltdf2>
c000dbbf:	83 c4 10             	add    esp,0x10
c000dbc2:	ba 16 00 00 00       	mov    edx,0x16
c000dbc7:	85 c0                	test   eax,eax
c000dbc9:	0f 88 ff 05 00 00    	js     c000e1ce <zoh_vari_process+0x69b>
c000dbcf:	68 00 00 70 40       	push   0x40700000
c000dbd4:	6a 00                	push   0x0
c000dbd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbde:	e8 1e a0 01 00       	call   c0027c01 <__gtdf2>
c000dbe3:	83 c4 10             	add    esp,0x10
c000dbe6:	ba 16 00 00 00       	mov    edx,0x16
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 8f db 05 00 00    	jg     c000e1ce <zoh_vari_process+0x69b>
c000dbf3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbf6:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbf9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbfd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc01:	68 00 00 f0 3f       	push   0x3ff00000
c000dc06:	6a 00                	push   0x0
c000dc08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc10:	e8 0a a0 01 00       	call   c0027c1f <__ltdf2>
c000dc15:	83 c4 10             	add    esp,0x10
c000dc18:	85 c0                	test   eax,eax
c000dc1a:	0f 89 da 01 00 00    	jns    c000ddfa <zoh_vari_process+0x2c7>
c000dc20:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dc23:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dc26:	0f 8d ce 01 00 00    	jge    c000ddfa <zoh_vari_process+0x2c7>
c000dc2c:	83 ec 0c             	sub    esp,0xc
c000dc2f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc32:	e8 7c 9d 01 00       	call   c00279b3 <__floatsidf>
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc49:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc51:	e8 fa 96 01 00       	call   c0027350 <__muldf3>
c000dc56:	59                   	pop    ecx
c000dc57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc5b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc62:	e8 4c 9d 01 00       	call   c00279b3 <__floatsidf>
c000dc67:	83 c4 10             	add    esp,0x10
c000dc6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc72:	52                   	push   edx
c000dc73:	50                   	push   eax
c000dc74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7c:	e8 52 90 01 00       	call   c0026cd3 <__adddf3>
c000dc81:	59                   	pop    ecx
c000dc82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc8a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc8d:	e8 21 9d 01 00       	call   c00279b3 <__floatsidf>
c000dc92:	83 c4 10             	add    esp,0x10
c000dc95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc9d:	52                   	push   edx
c000dc9e:	50                   	push   eax
c000dc9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dca3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dca7:	e8 71 9f 01 00       	call   c0027c1d <__gedf2>
c000dcac:	83 c4 10             	add    esp,0x10
c000dcaf:	85 c0                	test   eax,eax
c000dcb1:	0f 89 43 01 00 00    	jns    c000ddfa <zoh_vari_process+0x2c7>
c000dcb7:	85 ed                	test   ebp,ebp
c000dcb9:	0f 8e ec 00 00 00    	jle    c000ddab <zoh_vari_process+0x278>
c000dcbf:	83 ec 10             	sub    esp,0x10
c000dcc2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcc5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcc8:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dccb:	ff 37                	push   DWORD PTR [edi]
c000dccd:	e8 52 96 01 00       	call   c0027324 <__subdf3>
c000dcd2:	83 c4 18             	add    esp,0x18
c000dcd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcdd:	52                   	push   edx
c000dcde:	50                   	push   eax
c000dcdf:	e8 cc a0 01 00       	call   c0027db0 <fabs>
c000dce4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dce8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcec:	83 c4 10             	add    esp,0x10
c000dcef:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcf4:	68 23 42 92 0c       	push   0xc924223
c000dcf9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcfd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd01:	e8 fb 9e 01 00       	call   c0027c01 <__gtdf2>
c000dd06:	83 c4 10             	add    esp,0x10
c000dd09:	85 c0                	test   eax,eax
c000dd0b:	0f 8e 9a 00 00 00    	jle    c000ddab <zoh_vari_process+0x278>
c000dd11:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd13:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd16:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd19:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd1d:	52                   	push   edx
c000dd1e:	50                   	push   eax
c000dd1f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dd22:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dd25:	e8 fa 95 01 00       	call   c0027324 <__subdf3>
c000dd2a:	59                   	pop    ecx
c000dd2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd33:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd36:	e8 78 9c 01 00       	call   c00279b3 <__floatsidf>
c000dd3b:	83 c4 10             	add    esp,0x10
c000dd3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd46:	52                   	push   edx
c000dd47:	50                   	push   eax
c000dd48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd50:	e8 fb 95 01 00       	call   c0027350 <__muldf3>
c000dd55:	5d                   	pop    ebp
c000dd56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd5e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd61:	e8 4d 9c 01 00       	call   c00279b3 <__floatsidf>
c000dd66:	83 c4 10             	add    esp,0x10
c000dd69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd71:	52                   	push   edx
c000dd72:	50                   	push   eax
c000dd73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd7b:	e8 b4 98 01 00       	call   c0027634 <__divdf3>
c000dd80:	83 c4 10             	add    esp,0x10
c000dd83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd8b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd8f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9b:	e8 33 8f 01 00       	call   c0026cd3 <__adddf3>
c000dda0:	83 c4 10             	add    esp,0x10
c000dda3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dda7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddab:	31 c0                	xor    eax,eax
c000ddad:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ddb0:	7e 13                	jle    c000ddc5 <zoh_vari_process+0x292>
c000ddb2:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000ddb6:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ddb9:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ddbc:	40                   	inc    eax
c000ddbd:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000ddc0:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ddc3:	eb e8                	jmp    c000ddad <zoh_vari_process+0x27a>
c000ddc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddcd:	68 00 00 f0 3f       	push   0x3ff00000
c000ddd2:	6a 00                	push   0x0
c000ddd4:	e8 5b 98 01 00       	call   c0027634 <__divdf3>
c000ddd9:	83 c4 10             	add    esp,0x10
c000dddc:	89 04 24             	mov    DWORD PTR [esp],eax
c000dddf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dde3:	52                   	push   edx
c000dde4:	50                   	push   eax
c000dde5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dde9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dded:	e8 e1 8e 01 00       	call   c0026cd3 <__adddf3>
c000ddf2:	83 c4 10             	add    esp,0x10
c000ddf5:	e9 ff fd ff ff       	jmp    c000dbf9 <zoh_vari_process+0xc6>
c000ddfa:	55                   	push   ebp
c000ddfb:	55                   	push   ebp
c000ddfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de04:	e8 c7 9f 01 00       	call   c0027dd0 <lrint>
c000de09:	83 ec 0c             	sub    esp,0xc
c000de0c:	50                   	push   eax
c000de0d:	e8 a1 9b 01 00       	call   c00279b3 <__floatsidf>
c000de12:	83 c4 10             	add    esp,0x10
c000de15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de1d:	52                   	push   edx
c000de1e:	50                   	push   eax
c000de1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de27:	e8 f8 94 01 00       	call   c0027324 <__subdf3>
c000de2c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de30:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de34:	83 c4 20             	add    esp,0x20
c000de37:	6a 00                	push   0x0
c000de39:	6a 00                	push   0x0
c000de3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de43:	e8 d7 9d 01 00       	call   c0027c1f <__ltdf2>
c000de48:	83 c4 10             	add    esp,0x10
c000de4b:	85 c0                	test   eax,eax
c000de4d:	79 1e                	jns    c000de6d <zoh_vari_process+0x33a>
c000de4f:	68 00 00 f0 3f       	push   0x3ff00000
c000de54:	6a 00                	push   0x0
c000de56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de5e:	e8 70 8e 01 00       	call   c0026cd3 <__adddf3>
c000de63:	83 c4 10             	add    esp,0x10
c000de66:	89 04 24             	mov    DWORD PTR [esp],eax
c000de69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de6d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de70:	83 ec 10             	sub    esp,0x10
c000de73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de83:	e8 9c 94 01 00       	call   c0027324 <__subdf3>
c000de88:	83 c4 18             	add    esp,0x18
c000de8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de8f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de93:	52                   	push   edx
c000de94:	50                   	push   eax
c000de95:	e8 36 9f 01 00       	call   c0027dd0 <lrint>
c000de9a:	83 c4 10             	add    esp,0x10
c000de9d:	0f af e8             	imul   ebp,eax
c000dea0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dea3:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000dea6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000deaa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dead:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000deb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deb4:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000deb7:	0f 8d 7a 02 00 00    	jge    c000e137 <zoh_vari_process+0x604>
c000debd:	83 ec 0c             	sub    esp,0xc
c000dec0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dec3:	e8 eb 9a 01 00       	call   c00279b3 <__floatsidf>
c000dec8:	83 c4 10             	add    esp,0x10
c000decb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000decf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ded3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ded7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dedb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dedf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee3:	e8 68 94 01 00       	call   c0027350 <__muldf3>
c000dee8:	59                   	pop    ecx
c000dee9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000deed:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000def1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000def5:	e8 b9 9a 01 00       	call   c00279b3 <__floatsidf>
c000defa:	83 c4 10             	add    esp,0x10
c000defd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df01:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df05:	52                   	push   edx
c000df06:	50                   	push   eax
c000df07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0f:	e8 bf 8d 01 00       	call   c0026cd3 <__adddf3>
c000df14:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000df17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df1b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000df1f:	e8 8f 9a 01 00       	call   c00279b3 <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df2b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df39:	e8 e3 9c 01 00       	call   c0027c21 <__ledf2>
c000df3e:	83 c4 10             	add    esp,0x10
c000df41:	85 c0                	test   eax,eax
c000df43:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df47:	0f 8f ea 01 00 00    	jg     c000e137 <zoh_vari_process+0x604>
c000df4d:	85 c9                	test   ecx,ecx
c000df4f:	0f 8e ed 00 00 00    	jle    c000e042 <zoh_vari_process+0x50f>
c000df55:	83 ec 10             	sub    esp,0x10
c000df58:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df5b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df5e:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df61:	ff 37                	push   DWORD PTR [edi]
c000df63:	e8 bc 93 01 00       	call   c0027324 <__subdf3>
c000df68:	83 c4 18             	add    esp,0x18
c000df6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df73:	52                   	push   edx
c000df74:	50                   	push   eax
c000df75:	e8 36 9e 01 00       	call   c0027db0 <fabs>
c000df7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df82:	83 c4 10             	add    esp,0x10
c000df85:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df8a:	68 23 42 92 0c       	push   0xc924223
c000df8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df97:	e8 65 9c 01 00       	call   c0027c01 <__gtdf2>
c000df9c:	83 c4 10             	add    esp,0x10
c000df9f:	85 c0                	test   eax,eax
c000dfa1:	0f 8e 9b 00 00 00    	jle    c000e042 <zoh_vari_process+0x50f>
c000dfa7:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfa9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb4:	52                   	push   edx
c000dfb5:	50                   	push   eax
c000dfb6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dfb9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dfbc:	e8 63 93 01 00       	call   c0027324 <__subdf3>
c000dfc1:	5d                   	pop    ebp
c000dfc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfcd:	e8 e1 99 01 00       	call   c00279b3 <__floatsidf>
c000dfd2:	83 c4 10             	add    esp,0x10
c000dfd5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdd:	52                   	push   edx
c000dfde:	50                   	push   eax
c000dfdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe7:	e8 64 93 01 00       	call   c0027350 <__muldf3>
c000dfec:	59                   	pop    ecx
c000dfed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dff1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dff5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dff8:	e8 b6 99 01 00       	call   c00279b3 <__floatsidf>
c000dffd:	83 c4 10             	add    esp,0x10
c000e000:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e004:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e008:	52                   	push   edx
c000e009:	50                   	push   eax
c000e00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e012:	e8 1d 96 01 00       	call   c0027634 <__divdf3>
c000e017:	83 c4 10             	add    esp,0x10
c000e01a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e022:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e026:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e032:	e8 9c 8c 01 00       	call   c0026cd3 <__adddf3>
c000e037:	83 c4 10             	add    esp,0x10
c000e03a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e03e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e042:	31 d2                	xor    edx,edx
c000e044:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e047:	39 d0                	cmp    eax,edx
c000e049:	7e 1d                	jle    c000e068 <zoh_vari_process+0x535>
c000e04b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e04e:	29 c1                	sub    ecx,eax
c000e050:	89 c8                	mov    eax,ecx
c000e052:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e054:	01 d0                	add    eax,edx
c000e056:	42                   	inc    edx
c000e057:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e05a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e05d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e060:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e063:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e066:	eb dc                	jmp    c000e044 <zoh_vari_process+0x511>
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	68 00 00 f0 3f       	push   0x3ff00000
c000e075:	6a 00                	push   0x0
c000e077:	e8 b8 95 01 00       	call   c0027634 <__divdf3>
c000e07c:	83 c4 10             	add    esp,0x10
c000e07f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e087:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e08b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e08f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e093:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e097:	e8 37 8c 01 00       	call   c0026cd3 <__adddf3>
c000e09c:	5d                   	pop    ebp
c000e09d:	59                   	pop    ecx
c000e09e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ae:	e8 1d 9d 01 00       	call   c0027dd0 <lrint>
c000e0b3:	83 ec 0c             	sub    esp,0xc
c000e0b6:	50                   	push   eax
c000e0b7:	e8 f7 98 01 00       	call   c00279b3 <__floatsidf>
c000e0bc:	83 c4 10             	add    esp,0x10
c000e0bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0c7:	52                   	push   edx
c000e0c8:	50                   	push   eax
c000e0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d1:	e8 4e 92 01 00       	call   c0027324 <__subdf3>
c000e0d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0de:	83 c4 20             	add    esp,0x20
c000e0e1:	6a 00                	push   0x0
c000e0e3:	6a 00                	push   0x0
c000e0e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0ed:	e8 2d 9b 01 00       	call   c0027c1f <__ltdf2>
c000e0f2:	83 c4 10             	add    esp,0x10
c000e0f5:	85 c0                	test   eax,eax
c000e0f7:	79 1e                	jns    c000e117 <zoh_vari_process+0x5e4>
c000e0f9:	68 00 00 f0 3f       	push   0x3ff00000
c000e0fe:	6a 00                	push   0x0
c000e100:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e104:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e108:	e8 c6 8b 01 00       	call   c0026cd3 <__adddf3>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 04 24             	mov    DWORD PTR [esp],eax
c000e113:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e117:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e11a:	83 ec 10             	sub    esp,0x10
c000e11d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e121:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e125:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e129:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e12d:	e8 f2 91 01 00       	call   c0027324 <__subdf3>
c000e132:	e9 51 fd ff ff       	jmp    c000de88 <zoh_vari_process+0x355>
c000e137:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e13b:	7d 3a                	jge    c000e177 <zoh_vari_process+0x644>
c000e13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e141:	83 ec 0c             	sub    esp,0xc
c000e144:	29 e8                	sub    eax,ebp
c000e146:	99                   	cdq    
c000e147:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e14a:	50                   	push   eax
c000e14b:	e8 63 98 01 00       	call   c00279b3 <__floatsidf>
c000e150:	83 c4 10             	add    esp,0x10
c000e153:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e157:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e15b:	52                   	push   edx
c000e15c:	50                   	push   eax
c000e15d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e161:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e165:	e8 69 8b 01 00       	call   c0026cd3 <__adddf3>
c000e16a:	83 c4 10             	add    esp,0x10
c000e16d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e170:	89 04 24             	mov    DWORD PTR [esp],eax
c000e173:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e177:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e17a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e17e:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e181:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e184:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e187:	85 c0                	test   eax,eax
c000e189:	7f 25                	jg     c000e1b0 <zoh_vari_process+0x67d>
c000e18b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e18f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e193:	89 07                	mov    DWORD PTR [edi],eax
c000e195:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e198:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e19b:	99                   	cdq    
c000e19c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e19f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e1a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e1a5:	99                   	cdq    
c000e1a6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1a9:	31 d2                	xor    edx,edx
c000e1ab:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e1ae:	eb 1e                	jmp    c000e1ce <zoh_vari_process+0x69b>
c000e1b0:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e1b3:	31 d2                	xor    edx,edx
c000e1b5:	29 c8                	sub    eax,ecx
c000e1b7:	c1 e0 02             	shl    eax,0x2
c000e1ba:	39 d1                	cmp    ecx,edx
c000e1bc:	7e cd                	jle    c000e18b <zoh_vari_process+0x658>
c000e1be:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e1c0:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e1c4:	83 c0 04             	add    eax,0x4
c000e1c7:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e1cb:	42                   	inc    edx
c000e1cc:	eb ec                	jmp    c000e1ba <zoh_vari_process+0x687>
c000e1ce:	83 c4 3c             	add    esp,0x3c
c000e1d1:	89 d0                	mov    eax,edx
c000e1d3:	5b                   	pop    ebx
c000e1d4:	5e                   	pop    esi
c000e1d5:	5f                   	pop    edi
c000e1d6:	5d                   	pop    ebp
c000e1d7:	c3                   	ret    

c000e1d8 <zoh_reset>:
c000e1d8:	83 ec 0c             	sub    esp,0xc
c000e1db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1df:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1e2:	85 c0                	test   eax,eax
c000e1e4:	74 20                	je     c000e206 <zoh_reset+0x2e>
c000e1e6:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1e9:	83 c0 1c             	add    eax,0x1c
c000e1ec:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1ef:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1f6:	c1 e2 02             	shl    edx,0x2
c000e1f9:	51                   	push   ecx
c000e1fa:	52                   	push   edx
c000e1fb:	6a 00                	push   0x0
c000e1fd:	50                   	push   eax
c000e1fe:	e8 b5 24 ff ff       	call   c00006b8 <memset>
c000e203:	83 c4 10             	add    esp,0x10
c000e206:	83 c4 0c             	add    esp,0xc
c000e209:	c3                   	ret    

c000e20a <zoh_get_name>:
c000e20a:	31 c0                	xor    eax,eax
c000e20c:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e211:	75 05                	jne    c000e218 <zoh_get_name+0xe>
c000e213:	b8 de 96 02 c0       	mov    eax,0xc00296de
c000e218:	c3                   	ret    

c000e219 <zoh_get_description>:
c000e219:	31 c0                	xor    eax,eax
c000e21b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e220:	75 05                	jne    c000e227 <zoh_get_description+0xe>
c000e222:	b8 ef 96 02 c0       	mov    eax,0xc00296ef
c000e227:	c3                   	ret    

c000e228 <zoh_set_converter>:
c000e228:	53                   	push   ebx
c000e229:	b8 0a 00 00 00       	mov    eax,0xa
c000e22e:	83 ec 08             	sub    esp,0x8
c000e231:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e235:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e23a:	75 6e                	jne    c000e2aa <zoh_set_converter+0x82>
c000e23c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e23f:	85 c0                	test   eax,eax
c000e241:	74 13                	je     c000e256 <zoh_set_converter+0x2e>
c000e243:	83 ec 0c             	sub    esp,0xc
c000e246:	50                   	push   eax
c000e247:	e8 dc 13 00 00       	call   c000f628 <free>
c000e24c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e253:	83 c4 10             	add    esp,0x10
c000e256:	50                   	push   eax
c000e257:	50                   	push   eax
c000e258:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e25b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e262:	50                   	push   eax
c000e263:	6a 01                	push   0x1
c000e265:	e8 de 13 00 00       	call   c000f648 <calloc>
c000e26a:	83 c4 10             	add    esp,0x10
c000e26d:	89 c2                	mov    edx,eax
c000e26f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e272:	85 d2                	test   edx,edx
c000e274:	b8 01 00 00 00       	mov    eax,0x1
c000e279:	74 2f                	je     c000e2aa <zoh_set_converter+0x82>
c000e27b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e27e:	83 ec 0c             	sub    esp,0xc
c000e281:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e284:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e28a:	c7 43 24 33 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db33
c000e291:	c7 43 20 33 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db33
c000e298:	c7 43 28 d8 e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1d8
c000e29f:	53                   	push   ebx
c000e2a0:	e8 33 ff ff ff       	call   c000e1d8 <zoh_reset>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	31 c0                	xor    eax,eax
c000e2aa:	83 c4 08             	add    esp,0x8
c000e2ad:	5b                   	pop    ebx
c000e2ae:	c3                   	ret    

c000e2af <CPU::current()>:
c000e2af:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000e2b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2ba:	90                   	nop
c000e2bb:	c3                   	ret    

c000e2bc <operator new(unsigned long)>:
c000e2bc:	83 ec 0c             	sub    esp,0xc
c000e2bf:	83 ec 0c             	sub    esp,0xc
c000e2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c6:	e8 4d 13 00 00       	call   c000f618 <malloc>
c000e2cb:	83 c4 10             	add    esp,0x10
c000e2ce:	83 c4 0c             	add    esp,0xc
c000e2d1:	c3                   	ret    

c000e2d2 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e2d2:	83 ec 0c             	sub    esp,0xc
c000e2d5:	83 ec 08             	sub    esp,0x8
c000e2d8:	68 26 97 02 c0       	push   0xc0029726
c000e2dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2e1:	e8 c2 24 ff ff       	call   c00007a8 <strcmp>
c000e2e6:	83 c4 10             	add    esp,0x10
c000e2e9:	85 c0                	test   eax,eax
c000e2eb:	0f 94 c0             	sete   al
c000e2ee:	84 c0                	test   al,al
c000e2f0:	74 0a                	je     c000e2fc <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e2f2:	b8 c8 da 02 c0       	mov    eax,0xc002dac8
c000e2f7:	e9 e3 00 00 00       	jmp    c000e3df <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e2fc:	83 ec 08             	sub    esp,0x8
c000e2ff:	68 2f 97 02 c0       	push   0xc002972f
c000e304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e308:	e8 9b 24 ff ff       	call   c00007a8 <strcmp>
c000e30d:	83 c4 10             	add    esp,0x10
c000e310:	85 c0                	test   eax,eax
c000e312:	0f 94 c0             	sete   al
c000e315:	84 c0                	test   al,al
c000e317:	74 0a                	je     c000e323 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e319:	b8 4c 61 02 c0       	mov    eax,0xc002614c
c000e31e:	e9 bc 00 00 00       	jmp    c000e3df <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e323:	83 ec 08             	sub    esp,0x8
c000e326:	68 39 97 02 c0       	push   0xc0029739
c000e32b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e32f:	e8 74 24 ff ff       	call   c00007a8 <strcmp>
c000e334:	83 c4 10             	add    esp,0x10
c000e337:	85 c0                	test   eax,eax
c000e339:	0f 94 c0             	sete   al
c000e33c:	84 c0                	test   al,al
c000e33e:	74 0a                	je     c000e34a <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e340:	b8 80 5e 02 c0       	mov    eax,0xc0025e80
c000e345:	e9 95 00 00 00       	jmp    c000e3df <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e34a:	83 ec 08             	sub    esp,0x8
c000e34d:	68 42 97 02 c0       	push   0xc0029742
c000e352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e356:	e8 4d 24 ff ff       	call   c00007a8 <strcmp>
c000e35b:	83 c4 10             	add    esp,0x10
c000e35e:	85 c0                	test   eax,eax
c000e360:	0f 94 c0             	sete   al
c000e363:	84 c0                	test   al,al
c000e365:	74 07                	je     c000e36e <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e367:	b8 4c 62 02 c0       	mov    eax,0xc002624c
c000e36c:	eb 71                	jmp    c000e3df <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e36e:	83 ec 08             	sub    esp,0x8
c000e371:	68 4c 97 02 c0       	push   0xc002974c
c000e376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e37a:	e8 29 24 ff ff       	call   c00007a8 <strcmp>
c000e37f:	83 c4 10             	add    esp,0x10
c000e382:	85 c0                	test   eax,eax
c000e384:	0f 94 c0             	sete   al
c000e387:	84 c0                	test   al,al
c000e389:	74 07                	je     c000e392 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e38b:	b8 cc 5f 02 c0       	mov    eax,0xc0025fcc
c000e390:	eb 4d                	jmp    c000e3df <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e392:	83 ec 08             	sub    esp,0x8
c000e395:	68 55 97 02 c0       	push   0xc0029755
c000e39a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e39e:	e8 05 24 ff ff       	call   c00007a8 <strcmp>
c000e3a3:	83 c4 10             	add    esp,0x10
c000e3a6:	85 c0                	test   eax,eax
c000e3a8:	0f 94 c0             	sete   al
c000e3ab:	84 c0                	test   al,al
c000e3ad:	74 07                	je     c000e3b6 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e3af:	b8 cc da 02 c0       	mov    eax,0xc002dacc
c000e3b4:	eb 29                	jmp    c000e3df <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3b6:	83 ec 08             	sub    esp,0x8
c000e3b9:	68 62 97 02 c0       	push   0xc0029762
c000e3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3c2:	e8 e1 23 ff ff       	call   c00007a8 <strcmp>
c000e3c7:	83 c4 10             	add    esp,0x10
c000e3ca:	85 c0                	test   eax,eax
c000e3cc:	0f 94 c0             	sete   al
c000e3cf:	84 c0                	test   al,al
c000e3d1:	74 07                	je     c000e3da <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e3d3:	b8 cd da 02 c0       	mov    eax,0xc002dacd
c000e3d8:	eb 05                	jmp    c000e3df <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3da:	b8 00 00 00 00       	mov    eax,0x0
c000e3df:	83 c4 0c             	add    esp,0xc
c000e3e2:	c3                   	ret    
c000e3e3:	90                   	nop

c000e3e4 <Computer::close(int, int, void*)>:
c000e3e4:	57                   	push   edi
c000e3e5:	56                   	push   esi
c000e3e6:	53                   	push   ebx
c000e3e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3ef:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3f3:	83 ec 0c             	sub    esp,0xc
c000e3f6:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e3fc:	e8 83 5a 00 00       	call   c0013e84 <Device::closeAll()>
c000e401:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e407:	83 c4 10             	add    esp,0x10
c000e40a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e40c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e410:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e418:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e41c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e420:	5b                   	pop    ebx
c000e421:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e424:	5e                   	pop    esi
c000e425:	5f                   	pop    edi
c000e426:	ff e0                	jmp    eax

c000e428 <Krnl::firstTask()>:
c000e428:	53                   	push   ebx
c000e429:	83 ec 14             	sub    esp,0x14
c000e42c:	fb                   	sti    
c000e42d:	68 3f 07 00 00       	push   0x73f
c000e432:	e8 e1 11 00 00       	call   c000f618 <malloc>
c000e437:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e43e:	89 c3                	mov    ebx,eax
c000e440:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c000e446:	68 6f 97 02 c0       	push   0xc002976f
c000e44b:	6a 01                	push   0x1
c000e44d:	50                   	push   eax
c000e44e:	e8 97 ee 00 00       	call   c001d2ea <Process::Process(bool, char const*, Process*, char**)>
c000e453:	83 c4 20             	add    esp,0x20
c000e456:	68 ff 00 00 00       	push   0xff
c000e45b:	6a 00                	push   0x0
c000e45d:	68 ad ef 00 c0       	push   0xc000efad
c000e462:	53                   	push   ebx
c000e463:	e8 80 f1 00 00       	call   c001d5e8 <Process::createThread(void (*)(void*), void*, int)>
c000e468:	6a 7a                	push   0x7a
c000e46a:	6a 00                	push   0x0
c000e46c:	68 46 de 01 c0       	push   0xc001de46
c000e471:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c000e477:	e8 6c f1 00 00       	call   c001d5e8 <Process::createThread(void (*)(void*), void*, int)>
c000e47c:	83 c4 20             	add    esp,0x20
c000e47f:	a3 e8 0f 03 c0       	mov    ds:0xc0030fe8,eax
c000e484:	c6 05 cd da 02 c0 01 	mov    BYTE PTR ds:0xc002dacd,0x1
c000e48b:	e8 37 fd 00 00       	call   c001e1c7 <Vm::initialise8086()>
c000e490:	e8 d7 47 00 00       	call   c0012c6c <Fs::initVFS()>
c000e495:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000e49a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e4a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4a2:	6a 00                	push   0x0
c000e4a4:	6a 00                	push   0x0
c000e4a6:	6a 00                	push   0x0
c000e4a8:	50                   	push   eax
c000e4a9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4ac:	e8 27 d8 00 00       	call   c001bcd8 <Sys::loadSyscalls()>
c000e4b1:	e8 6c b8 00 00       	call   c0019d22 <Krnl::loadSystemEnv()>
c000e4b6:	83 c4 0c             	add    esp,0xc
c000e4b9:	6a 3a                	push   0x3a
c000e4bb:	68 7c 97 02 c0       	push   0xc002977c
c000e4c0:	68 85 97 02 c0       	push   0xc0029785
c000e4c5:	e8 7e c5 00 00       	call   c001aa48 <Reg::readIntWithDefault(char*, char*, int)>
c000e4ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4cd:	e8 82 52 00 00       	call   c0013754 <User::loadClockSettings(int)>
c000e4d2:	58                   	pop    eax
c000e4d3:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000e4d8:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e4de:	e8 75 59 00 00       	call   c0013e58 <Device::loadDriversForAll()>
c000e4e3:	5a                   	pop    edx
c000e4e4:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c000e4ea:	59                   	pop    ecx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 8d 97 02 c0       	push   0xc002978d
c000e4f2:	e8 4c e9 00 00       	call   c001ce43 <Thr::loadDLL(char const*, bool)>
c000e4f7:	5a                   	pop    edx
c000e4f8:	59                   	pop    ecx
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 52 eb 00 00       	call   c001d052 <Thr::executeDLL(unsigned long, void*)>
c000e500:	83 c4 10             	add    esp,0x10
c000e503:	83 ec 0c             	sub    esp,0xc
c000e506:	6a 02                	push   0x2
c000e508:	e8 3f f4 00 00       	call   c001d94c <blockTask(TaskState)>
c000e50d:	83 c4 10             	add    esp,0x10
c000e510:	eb f1                	jmp    c000e503 <Krnl::firstTask()+0xdb>

c000e512 <Computer::Computer()>:
c000e512:	83 ec 0c             	sub    esp,0xc
c000e515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e519:	83 ec 08             	sub    esp,0x8
c000e51c:	68 a9 97 02 c0       	push   0xc00297a9
c000e521:	50                   	push   eax
c000e522:	e8 d7 59 00 00       	call   c0013efe <Device::Device(char const*)>
c000e527:	83 c4 10             	add    esp,0x10
c000e52a:	ba 48 99 02 c0       	mov    edx,0xc0029948
c000e52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e533:	89 10                	mov    DWORD PTR [eax],edx
c000e535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e539:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e547:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e555:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e55b:	83 ca 04             	or     edx,0x4
c000e55e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e568:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e56e:	0f b6 d0             	movzx  edx,al
c000e571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e575:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e580:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e586:	0f b6 d0             	movzx  edx,al
c000e589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e596:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e59c:	8d 50 01             	lea    edx,[eax+0x1]
c000e59f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5a3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e5a9:	0f b6 d0             	movzx  edx,al
c000e5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5b0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e5b4:	83 e1 3f             	and    ecx,0x3f
c000e5b7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e5bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5c5:	0f b6 d0             	movzx  edx,al
c000e5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5dd:	0f b6 d0             	movzx  edx,al
c000e5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e4:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e5e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5f3:	8d 50 01             	lea    edx,[eax+0x1]
c000e5f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5fa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e600:	0f b6 d0             	movzx  edx,al
c000e603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e607:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e60b:	83 e1 3f             	and    ecx,0x3f
c000e60e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e616:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e61c:	0f b6 d0             	movzx  edx,al
c000e61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e623:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e634:	0f b6 d0             	movzx  edx,al
c000e637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e644:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e64a:	8d 50 01             	lea    edx,[eax+0x1]
c000e64d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e651:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e657:	0f b6 d0             	movzx  edx,al
c000e65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e65e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e662:	83 e1 3f             	and    ecx,0x3f
c000e665:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e669:	90                   	nop
c000e66a:	83 c4 0c             	add    esp,0xc
c000e66d:	c3                   	ret    

c000e66e <Computer::setBootMessage(char const*)>:
c000e66e:	c3                   	ret    
c000e66f:	90                   	nop

c000e670 <Computer::detectFeatures()>:
c000e670:	55                   	push   ebp
c000e671:	57                   	push   edi
c000e672:	56                   	push   esi
c000e673:	53                   	push   ebx
c000e674:	83 ec 1c             	sub    esp,0x1c
c000e677:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e67b:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e685:	e8 5a 1c ff ff       	call   c00002e4 <detectCPUID>
c000e68a:	85 c0                	test   eax,eax
c000e68c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e692:	0f 95 c2             	setne  dl
c000e695:	83 e0 fd             	and    eax,0xfffffffd
c000e698:	d1 e2                	shl    edx,1
c000e69a:	09 d0                	or     eax,edx
c000e69c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6a2:	a8 02                	test   al,0x2
c000e6a4:	75 46                	jne    c000e6ec <Computer::detectFeatures()+0x7c>
c000e6a6:	f6 05 e1 da 02 c0 04 	test   BYTE PTR ds:0xc002dae1,0x4
c000e6ad:	74 07                	je     c000e6b6 <Computer::detectFeatures()+0x46>
c000e6af:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e6b6:	e8 5b 77 01 00       	call   c0025e16 <x87Detect>
c000e6bb:	83 e0 01             	and    eax,0x1
c000e6be:	c1 e0 04             	shl    eax,0x4
c000e6c1:	88 c2                	mov    dl,al
c000e6c3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6c9:	83 e0 ef             	and    eax,0xffffffef
c000e6cc:	09 d0                	or     eax,edx
c000e6ce:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6d4:	a8 10                	test   al,0x10
c000e6d6:	0f 85 2a 01 00 00    	jne    c000e806 <Computer::detectFeatures()+0x196>
c000e6dc:	84 c0                	test   al,al
c000e6de:	0f 88 45 01 00 00    	js     c000e829 <Computer::detectFeatures()+0x1b9>
c000e6e4:	83 c4 1c             	add    esp,0x1c
c000e6e7:	5b                   	pop    ebx
c000e6e8:	5e                   	pop    esi
c000e6e9:	5f                   	pop    edi
c000e6ea:	5d                   	pop    ebp
c000e6eb:	c3                   	ret    
c000e6ec:	83 ec 0c             	sub    esp,0xc
c000e6ef:	6a 20                	push   0x20
c000e6f1:	e8 ee 9f 00 00       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e6f6:	83 e0 01             	and    eax,0x1
c000e6f9:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e700:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e706:	83 e0 f7             	and    eax,0xfffffff7
c000e709:	09 d0                	or     eax,edx
c000e70b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e711:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e718:	e8 c7 9f 00 00       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e71d:	83 e0 01             	and    eax,0x1
c000e720:	88 c2                	mov    dl,al
c000e722:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e728:	83 e0 fe             	and    eax,0xfffffffe
c000e72b:	09 d0                	or     eax,edx
c000e72d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e733:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e73a:	e8 a5 9f 00 00       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e73f:	c1 e0 07             	shl    eax,0x7
c000e742:	88 c2                	mov    dl,al
c000e744:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e74a:	83 e0 7f             	and    eax,0x7f
c000e74d:	09 d0                	or     eax,edx
c000e74f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e755:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e75c:	e8 83 9f 00 00       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e761:	83 c4 10             	add    esp,0x10
c000e764:	83 e0 01             	and    eax,0x1
c000e767:	c1 e0 05             	shl    eax,0x5
c000e76a:	88 c2                	mov    dl,al
c000e76c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e772:	83 e0 df             	and    eax,0xffffffdf
c000e775:	09 d0                	or     eax,edx
c000e777:	f7 05 e0 da 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002dae0,0x401
c000e781:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e787:	0f 84 c2 00 00 00    	je     c000e84f <Computer::detectFeatures()+0x1df>
c000e78d:	83 e0 fe             	and    eax,0xfffffffe
c000e790:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e796:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e79c:	88 c2                	mov    dl,al
c000e79e:	83 e2 09             	and    edx,0x9
c000e7a1:	fe ca                	dec    dl
c000e7a3:	75 09                	jne    c000e7ae <Computer::detectFeatures()+0x13e>
c000e7a5:	83 e0 fe             	and    eax,0xfffffffe
c000e7a8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7ae:	83 ec 0c             	sub    esp,0xc
c000e7b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e7b5:	50                   	push   eax
c000e7b6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e7ba:	55                   	push   ebp
c000e7bb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e7bf:	57                   	push   edi
c000e7c0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e7c4:	56                   	push   esi
c000e7c5:	68 00 00 00 80       	push   0x80000000
c000e7ca:	e8 91 9e 00 00       	call   c0018660 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7cf:	83 c4 20             	add    esp,0x20
c000e7d2:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e7d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e7dd:	0f 86 c3 fe ff ff    	jbe    c000e6a6 <Computer::detectFeatures()+0x36>
c000e7e3:	83 ec 0c             	sub    esp,0xc
c000e7e6:	50                   	push   eax
c000e7e7:	55                   	push   ebp
c000e7e8:	57                   	push   edi
c000e7e9:	56                   	push   esi
c000e7ea:	68 01 00 00 80       	push   0x80000001
c000e7ef:	e8 6c 9e 00 00       	call   c0018660 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7f4:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e7fe:	83 c4 20             	add    esp,0x20
c000e801:	e9 a0 fe ff ff       	jmp    c000e6a6 <Computer::detectFeatures()+0x36>
c000e806:	e8 c5 75 01 00       	call   c0025dd0 <absolutelyNoChanceInHell>
c000e80b:	88 c2                	mov    dl,al
c000e80d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e813:	c1 e2 07             	shl    edx,0x7
c000e816:	83 e0 7f             	and    eax,0x7f
c000e819:	09 d0                	or     eax,edx
c000e81b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e821:	84 c0                	test   al,al
c000e823:	0f 89 bb fe ff ff    	jns    c000e6e4 <Computer::detectFeatures()+0x74>
c000e829:	e8 82 75 01 00       	call   c0025db0 <avxDetect>
c000e82e:	83 e0 01             	and    eax,0x1
c000e831:	c1 e0 05             	shl    eax,0x5
c000e834:	88 c2                	mov    dl,al
c000e836:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e83c:	83 e0 df             	and    eax,0xffffffdf
c000e83f:	09 d0                	or     eax,edx
c000e841:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e847:	83 c4 1c             	add    esp,0x1c
c000e84a:	5b                   	pop    ebx
c000e84b:	5e                   	pop    esi
c000e84c:	5f                   	pop    edi
c000e84d:	5d                   	pop    ebp
c000e84e:	c3                   	ret    
c000e84f:	83 ec 0c             	sub    esp,0xc
c000e852:	68 00 02 00 00       	push   0x200
c000e857:	e8 88 9e 00 00       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c000e85c:	83 c4 10             	add    esp,0x10
c000e85f:	83 e0 01             	and    eax,0x1
c000e862:	88 c2                	mov    dl,al
c000e864:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e86a:	83 e0 fe             	and    eax,0xfffffffe
c000e86d:	09 d0                	or     eax,edx
c000e86f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e875:	e9 1c ff ff ff       	jmp    c000e796 <Computer::detectFeatures()+0x126>

c000e87a <Computer::displayFeatures()>:
c000e87a:	53                   	push   ebx
c000e87b:	83 ec 14             	sub    esp,0x14
c000e87e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e882:	68 b9 97 02 c0       	push   0xc00297b9
c000e887:	e8 5b 40 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000e88c:	83 c4 10             	add    esp,0x10
c000e88f:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e896:	0f 85 73 02 00 00    	jne    c000eb0f <Computer::displayFeatures()+0x295>
c000e89c:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e8a1:	83 ec 08             	sub    esp,0x8
c000e8a4:	50                   	push   eax
c000e8a5:	68 cc 97 02 c0       	push   0xc00297cc
c000e8aa:	e8 38 40 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000e8af:	83 c4 10             	add    esp,0x10
c000e8b2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e8b9:	0f 85 8c 02 00 00    	jne    c000eb4b <Computer::displayFeatures()+0x2d1>
c000e8bf:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e8c4:	83 ec 08             	sub    esp,0x8
c000e8c7:	50                   	push   eax
c000e8c8:	68 dd 97 02 c0       	push   0xc00297dd
c000e8cd:	e8 15 40 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000e8d2:	83 c4 10             	add    esp,0x10
c000e8d5:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e8dc:	0f 85 5f 02 00 00    	jne    c000eb41 <Computer::displayFeatures()+0x2c7>
c000e8e2:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e8e7:	83 ec 08             	sub    esp,0x8
c000e8ea:	50                   	push   eax
c000e8eb:	68 ee 97 02 c0       	push   0xc00297ee
c000e8f0:	e8 f2 3f 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000e8f5:	83 c4 10             	add    esp,0x10
c000e8f8:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e8ff:	0f 85 32 02 00 00    	jne    c000eb37 <Computer::displayFeatures()+0x2bd>
c000e905:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e90a:	83 ec 08             	sub    esp,0x8
c000e90d:	50                   	push   eax
c000e90e:	68 ff 97 02 c0       	push   0xc00297ff
c000e913:	e8 cf 3f 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000e918:	83 c4 10             	add    esp,0x10
c000e91b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e922:	0f 85 05 02 00 00    	jne    c000eb2d <Computer::displayFeatures()+0x2b3>
c000e928:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e92d:	83 ec 08             	sub    esp,0x8
c000e930:	50                   	push   eax
c000e931:	68 10 98 02 c0       	push   0xc0029810
c000e936:	e8 ac 3f 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000e93b:	83 c4 10             	add    esp,0x10
c000e93e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e945:	0f 85 d8 01 00 00    	jne    c000eb23 <Computer::displayFeatures()+0x2a9>
c000e94b:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e950:	83 ec 08             	sub    esp,0x8
c000e953:	50                   	push   eax
c000e954:	68 21 98 02 c0       	push   0xc0029821
c000e959:	e8 89 3f 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000e95e:	83 c4 10             	add    esp,0x10
c000e961:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e968:	0f 85 ab 01 00 00    	jne    c000eb19 <Computer::displayFeatures()+0x29f>
c000e96e:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e973:	83 ec 08             	sub    esp,0x8
c000e976:	50                   	push   eax
c000e977:	68 32 98 02 c0       	push   0xc0029832
c000e97c:	e8 66 3f 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000e981:	83 c4 10             	add    esp,0x10
c000e984:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e98b:	0f 88 1b 02 00 00    	js     c000ebac <Computer::displayFeatures()+0x332>
c000e991:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e996:	83 ec 08             	sub    esp,0x8
c000e999:	50                   	push   eax
c000e99a:	68 43 98 02 c0       	push   0xc0029843
c000e99f:	e8 43 3f 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000e9a4:	83 c4 10             	add    esp,0x10
c000e9a7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e9ae:	0f 85 a1 01 00 00    	jne    c000eb55 <Computer::displayFeatures()+0x2db>
c000e9b4:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e9b9:	83 ec 08             	sub    esp,0x8
c000e9bc:	50                   	push   eax
c000e9bd:	68 54 98 02 c0       	push   0xc0029854
c000e9c2:	e8 20 3f 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000e9c7:	83 c4 10             	add    esp,0x10
c000e9ca:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e9d1:	0f 85 cb 01 00 00    	jne    c000eba2 <Computer::displayFeatures()+0x328>
c000e9d7:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e9dc:	83 ec 08             	sub    esp,0x8
c000e9df:	50                   	push   eax
c000e9e0:	68 65 98 02 c0       	push   0xc0029865
c000e9e5:	e8 fd 3e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000e9ea:	83 c4 10             	add    esp,0x10
c000e9ed:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e9f4:	0f 85 9e 01 00 00    	jne    c000eb98 <Computer::displayFeatures()+0x31e>
c000e9fa:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e9ff:	83 ec 08             	sub    esp,0x8
c000ea02:	50                   	push   eax
c000ea03:	68 76 98 02 c0       	push   0xc0029876
c000ea08:	e8 da 3e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000ea0d:	83 c4 10             	add    esp,0x10
c000ea10:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ea17:	0f 85 71 01 00 00    	jne    c000eb8e <Computer::displayFeatures()+0x314>
c000ea1d:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea22:	83 ec 08             	sub    esp,0x8
c000ea25:	50                   	push   eax
c000ea26:	68 87 98 02 c0       	push   0xc0029887
c000ea2b:	e8 b7 3e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000ea30:	83 c4 10             	add    esp,0x10
c000ea33:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ea3a:	0f 85 44 01 00 00    	jne    c000eb84 <Computer::displayFeatures()+0x30a>
c000ea40:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea45:	83 ec 08             	sub    esp,0x8
c000ea48:	50                   	push   eax
c000ea49:	68 98 98 02 c0       	push   0xc0029898
c000ea4e:	e8 94 3e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000ea53:	83 c4 10             	add    esp,0x10
c000ea56:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ea5d:	0f 85 17 01 00 00    	jne    c000eb7a <Computer::displayFeatures()+0x300>
c000ea63:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea68:	83 ec 08             	sub    esp,0x8
c000ea6b:	50                   	push   eax
c000ea6c:	68 a9 98 02 c0       	push   0xc00298a9
c000ea71:	e8 71 3e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000ea76:	83 c4 10             	add    esp,0x10
c000ea79:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ea80:	0f 85 ea 00 00 00    	jne    c000eb70 <Computer::displayFeatures()+0x2f6>
c000ea86:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea8b:	83 ec 08             	sub    esp,0x8
c000ea8e:	50                   	push   eax
c000ea8f:	68 ba 98 02 c0       	push   0xc00298ba
c000ea94:	e8 4e 3e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000ea99:	83 c4 10             	add    esp,0x10
c000ea9c:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eaa3:	0f 88 0d 01 00 00    	js     c000ebb6 <Computer::displayFeatures()+0x33c>
c000eaa9:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000eaae:	83 ec 08             	sub    esp,0x8
c000eab1:	50                   	push   eax
c000eab2:	68 cb 98 02 c0       	push   0xc00298cb
c000eab7:	e8 2b 3e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000eac6:	0f 85 9a 00 00 00    	jne    c000eb66 <Computer::displayFeatures()+0x2ec>
c000eacc:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ead1:	83 ec 08             	sub    esp,0x8
c000ead4:	50                   	push   eax
c000ead5:	68 dc 98 02 c0       	push   0xc00298dc
c000eada:	e8 08 3e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eae9:	75 74                	jne    c000eb5f <Computer::displayFeatures()+0x2e5>
c000eaeb:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000eaf0:	83 ec 08             	sub    esp,0x8
c000eaf3:	50                   	push   eax
c000eaf4:	68 ed 98 02 c0       	push   0xc00298ed
c000eaf9:	e8 e9 3d 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000eafe:	c7 44 24 20 3b b2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b23b
c000eb06:	83 c4 18             	add    esp,0x18
c000eb09:	5b                   	pop    ebx
c000eb0a:	e9 d8 3d 00 00       	jmp    c00128e7 <Dbg::kprintf(char const*, ...)>
c000eb0f:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb14:	e9 88 fd ff ff       	jmp    c000e8a1 <Computer::displayFeatures()+0x27>
c000eb19:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb1e:	e9 50 fe ff ff       	jmp    c000e973 <Computer::displayFeatures()+0xf9>
c000eb23:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb28:	e9 23 fe ff ff       	jmp    c000e950 <Computer::displayFeatures()+0xd6>
c000eb2d:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb32:	e9 f6 fd ff ff       	jmp    c000e92d <Computer::displayFeatures()+0xb3>
c000eb37:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb3c:	e9 c9 fd ff ff       	jmp    c000e90a <Computer::displayFeatures()+0x90>
c000eb41:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb46:	e9 9c fd ff ff       	jmp    c000e8e7 <Computer::displayFeatures()+0x6d>
c000eb4b:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb50:	e9 6f fd ff ff       	jmp    c000e8c4 <Computer::displayFeatures()+0x4a>
c000eb55:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb5a:	e9 5a fe ff ff       	jmp    c000e9b9 <Computer::displayFeatures()+0x13f>
c000eb5f:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb64:	eb 8a                	jmp    c000eaf0 <Computer::displayFeatures()+0x276>
c000eb66:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb6b:	e9 61 ff ff ff       	jmp    c000ead1 <Computer::displayFeatures()+0x257>
c000eb70:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb75:	e9 11 ff ff ff       	jmp    c000ea8b <Computer::displayFeatures()+0x211>
c000eb7a:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb7f:	e9 e4 fe ff ff       	jmp    c000ea68 <Computer::displayFeatures()+0x1ee>
c000eb84:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb89:	e9 b7 fe ff ff       	jmp    c000ea45 <Computer::displayFeatures()+0x1cb>
c000eb8e:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb93:	e9 8a fe ff ff       	jmp    c000ea22 <Computer::displayFeatures()+0x1a8>
c000eb98:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb9d:	e9 5d fe ff ff       	jmp    c000e9ff <Computer::displayFeatures()+0x185>
c000eba2:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eba7:	e9 30 fe ff ff       	jmp    c000e9dc <Computer::displayFeatures()+0x162>
c000ebac:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000ebb1:	e9 e0 fd ff ff       	jmp    c000e996 <Computer::displayFeatures()+0x11c>
c000ebb6:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000ebbb:	e9 ee fe ff ff       	jmp    c000eaae <Computer::displayFeatures()+0x234>

c000ebc0 <Computer::rdmsr(unsigned int)>:
c000ebc0:	83 ec 0c             	sub    esp,0xc
c000ebc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ebce:	74 0a                	je     c000ebda <Computer::rdmsr(unsigned int)+0x1a>
c000ebd0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebd4:	0f 32                	rdmsr  
c000ebd6:	83 c4 0c             	add    esp,0xc
c000ebd9:	c3                   	ret    
c000ebda:	83 ec 0c             	sub    esp,0xc
c000ebdd:	68 fe 98 02 c0       	push   0xc00298fe
c000ebe2:	e8 74 b2 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c000ebe7:	83 c4 10             	add    esp,0x10
c000ebea:	eb e4                	jmp    c000ebd0 <Computer::rdmsr(unsigned int)+0x10>

c000ebec <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ebec:	57                   	push   edi
c000ebed:	56                   	push   esi
c000ebee:	52                   	push   edx
c000ebef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebf3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ebf7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ebfb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ec02:	74 0e                	je     c000ec12 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ec04:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec08:	89 f0                	mov    eax,esi
c000ec0a:	89 fa                	mov    edx,edi
c000ec0c:	0f 30                	wrmsr  
c000ec0e:	58                   	pop    eax
c000ec0f:	5e                   	pop    esi
c000ec10:	5f                   	pop    edi
c000ec11:	c3                   	ret    
c000ec12:	83 ec 0c             	sub    esp,0xc
c000ec15:	68 04 99 02 c0       	push   0xc0029904
c000ec1a:	e8 3c b2 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c000ec1f:	83 c4 10             	add    esp,0x10
c000ec22:	eb e0                	jmp    c000ec04 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ec24 <Computer::nmiEnabled()>:
c000ec24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec28:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ec2e:	c3                   	ret    
c000ec2f:	90                   	nop

c000ec30 <Computer::readCMOS(unsigned char)>:
c000ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec34:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec3b:	19 c0                	sbb    eax,eax
c000ec3d:	83 e0 80             	and    eax,0xffffff80
c000ec40:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec44:	e6 70                	out    0x70,al
c000ec46:	e4 71                	in     al,0x71
c000ec48:	c3                   	ret    
c000ec49:	90                   	nop

c000ec4a <Computer::enableNMI(bool)>:
c000ec4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec52:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ec58:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ec60:	eb ce                	jmp    c000ec30 <Computer::readCMOS(unsigned char)>

c000ec62 <Computer::open(int, int, void*)>:
c000ec62:	56                   	push   esi
c000ec63:	53                   	push   ebx
c000ec64:	83 ec 10             	sub    esp,0x10
c000ec67:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ec6b:	f6 05 e0 da 02 c0 04 	test   BYTE PTR ds:0xc002dae0,0x4
c000ec72:	68 68 12 00 00       	push   0x1268
c000ec77:	0f 94 05 04 ca 02 c0 	sete   BYTE PTR ds:0xc002ca04
c000ec7e:	e8 95 09 00 00       	call   c000f618 <malloc>
c000ec83:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec86:	89 c6                	mov    esi,eax
c000ec88:	e8 27 8f 00 00       	call   c0017bb4 <ACPI::ACPI()>
c000ec8d:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec93:	58                   	pop    eax
c000ec94:	5a                   	pop    edx
c000ec95:	56                   	push   esi
c000ec96:	53                   	push   ebx
c000ec97:	e8 72 50 00 00       	call   c0013d0e <Device::addChild(Device*)>
c000ec9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec9f:	e8 cc f9 ff ff       	call   c000e670 <Computer::detectFeatures()>
c000eca4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eca7:	e8 ce fb ff ff       	call   c000e87a <Computer::displayFeatures()>
c000ecac:	59                   	pop    ecx
c000ecad:	5e                   	pop    esi
c000ecae:	6a 01                	push   0x1
c000ecb0:	53                   	push   ebx
c000ecb1:	e8 94 ff ff ff       	call   c000ec4a <Computer::enableNMI(bool)>
c000ecb6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ecbd:	e8 56 09 00 00       	call   c000f618 <malloc>
c000ecc2:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecc5:	89 c6                	mov    esi,eax
c000ecc7:	e8 d0 9a 00 00       	call   c001879c <CPU::CPU()>
c000eccc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ecd2:	58                   	pop    eax
c000ecd3:	5a                   	pop    edx
c000ecd4:	56                   	push   esi
c000ecd5:	53                   	push   ebx
c000ecd6:	e8 33 50 00 00       	call   c0013d0e <Device::addChild(Device*)>
c000ecdb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ece1:	8b 10                	mov    edx,DWORD PTR [eax]
c000ece3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ece7:	6a 00                	push   0x0
c000ece9:	6a 00                	push   0x0
c000eceb:	50                   	push   eax
c000ecec:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecef:	83 c4 20             	add    esp,0x20
c000ecf2:	e8 9d 55 00 00       	call   c0014294 <setupFPU()>
c000ecf7:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ecfd:	85 c0                	test   eax,eax
c000ecff:	74 1f                	je     c000ed20 <Computer::open(int, int, void*)+0xbe>
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	50                   	push   eax
c000ed05:	53                   	push   ebx
c000ed06:	e8 03 50 00 00       	call   c0013d0e <Device::addChild(Device*)>
c000ed0b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ed11:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed13:	6a 00                	push   0x0
c000ed15:	6a 00                	push   0x0
c000ed17:	6a 00                	push   0x0
c000ed19:	50                   	push   eax
c000ed1a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed1d:	83 c4 20             	add    esp,0x20
c000ed20:	83 ec 0c             	sub    esp,0xc
c000ed23:	68 28 e4 00 c0       	push   0xc000e428
c000ed28:	e8 bb e9 00 00       	call   c001d6e8 <setupMultitasking(void (*)())>
c000ed2d:	83 c4 14             	add    esp,0x14
c000ed30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed35:	5b                   	pop    ebx
c000ed36:	5e                   	pop    esi
c000ed37:	c3                   	ret    

c000ed38 <Computer::disableNMI()>:
c000ed38:	6a 00                	push   0x0
c000ed3a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed3e:	e8 07 ff ff ff       	call   c000ec4a <Computer::enableNMI(bool)>
c000ed43:	58                   	pop    eax
c000ed44:	5a                   	pop    edx
c000ed45:	c3                   	ret    

c000ed46 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ed51:	19 c0                	sbb    eax,eax
c000ed53:	83 e0 80             	and    eax,0xffffff80
c000ed56:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed5a:	e6 70                	out    0x70,al
c000ed5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed60:	e6 71                	out    0x71,al
c000ed62:	c3                   	ret    
c000ed63:	90                   	nop

c000ed64 <Computer::handleNMI()>:
c000ed64:	56                   	push   esi
c000ed65:	53                   	push   ebx
c000ed66:	83 ec 10             	sub    esp,0x10
c000ed69:	e4 92                	in     al,0x92
c000ed6b:	89 c6                	mov    esi,eax
c000ed6d:	e4 61                	in     al,0x61
c000ed6f:	68 0a 99 02 c0       	push   0xc002990a
c000ed74:	88 c3                	mov    bl,al
c000ed76:	e8 6c 3b 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000ed7b:	83 c4 10             	add    esp,0x10
c000ed7e:	83 e6 10             	and    esi,0x10
c000ed81:	75 0d                	jne    c000ed90 <Computer::handleNMI()+0x2c>
c000ed83:	f6 c3 40             	test   bl,0x40
c000ed86:	75 1d                	jne    c000eda5 <Computer::handleNMI()+0x41>
c000ed88:	84 db                	test   bl,bl
c000ed8a:	78 2d                	js     c000edb9 <Computer::handleNMI()+0x55>
c000ed8c:	58                   	pop    eax
c000ed8d:	5b                   	pop    ebx
c000ed8e:	5e                   	pop    esi
c000ed8f:	c3                   	ret    
c000ed90:	83 ec 0c             	sub    esp,0xc
c000ed93:	68 1b 99 02 c0       	push   0xc002991b
c000ed98:	e8 be b0 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c000ed9d:	83 c4 10             	add    esp,0x10
c000eda0:	f6 c3 40             	test   bl,0x40
c000eda3:	74 e3                	je     c000ed88 <Computer::handleNMI()+0x24>
c000eda5:	83 ec 0c             	sub    esp,0xc
c000eda8:	68 28 99 02 c0       	push   0xc0029928
c000edad:	e8 a9 b0 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	84 db                	test   bl,bl
c000edb7:	79 d3                	jns    c000ed8c <Computer::handleNMI()+0x28>
c000edb9:	c7 44 24 10 32 99 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029932
c000edc1:	5a                   	pop    edx
c000edc2:	5b                   	pop    ebx
c000edc3:	5e                   	pop    esi
c000edc4:	e9 92 b0 00 00       	jmp    c0019e5b <Krnl::panic(char const*)>
c000edc9:	90                   	nop

c000edca <Computer::setDiskActivityLight(int, bool)>:
c000edca:	56                   	push   esi
c000edcb:	53                   	push   ebx
c000edcc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000edd0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000edd5:	77 1b                	ja     c000edf2 <Computer::setDiskActivityLight(int, bool)+0x28>
c000edd7:	e4 92                	in     al,0x92
c000edd9:	bb 40 00 00 00       	mov    ebx,0x40
c000edde:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ede2:	89 da                	mov    edx,ebx
c000ede4:	d3 e2                	shl    edx,cl
c000ede6:	89 f1                	mov    ecx,esi
c000ede8:	f7 d2                	not    edx
c000edea:	d3 e3                	shl    ebx,cl
c000edec:	21 d0                	and    eax,edx
c000edee:	09 d8                	or     eax,ebx
c000edf0:	e6 92                	out    0x92,al
c000edf2:	5b                   	pop    ebx
c000edf3:	5e                   	pop    esi
c000edf4:	c3                   	ret    
c000edf5:	90                   	nop

c000edf6 <GDTEntry::setBase(unsigned int)>:
c000edf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edfa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000edfe:	89 c1                	mov    ecx,eax
c000ee00:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ee04:	c1 e9 10             	shr    ecx,0x10
c000ee07:	c1 e8 18             	shr    eax,0x18
c000ee0a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ee0d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ee10:	c3                   	ret    
c000ee11:	90                   	nop

c000ee12 <GDTEntry::setLimit(unsigned int)>:
c000ee12:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee1a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ee1d:	66 89 01             	mov    WORD PTR [ecx],ax
c000ee20:	83 e2 f0             	and    edx,0xfffffff0
c000ee23:	c1 e8 10             	shr    eax,0x10
c000ee26:	83 e0 0f             	and    eax,0xf
c000ee29:	09 d0                	or     eax,edx
c000ee2b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ee2e:	c3                   	ret    
c000ee2f:	90                   	nop

c000ee30 <GDT::GDT()>:
c000ee30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee34:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee3e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee44:	90                   	nop
c000ee45:	c3                   	ret    

c000ee46 <GDT::addEntry(GDTEntry)>:
c000ee46:	53                   	push   ebx
c000ee47:	83 ec 0c             	sub    esp,0xc
c000ee4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ee57:	52                   	push   edx
c000ee58:	50                   	push   eax
c000ee59:	68 6c 99 02 c0       	push   0xc002996c
c000ee5e:	e8 84 3a 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000ee63:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee65:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee69:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ee6d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ee71:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ee75:	8d 50 01             	lea    edx,[eax+0x1]
c000ee78:	c1 e0 03             	shl    eax,0x3
c000ee7b:	89 13                	mov    DWORD PTR [ebx],edx
c000ee7d:	83 c4 18             	add    esp,0x18
c000ee80:	5b                   	pop    ebx
c000ee81:	c3                   	ret    

c000ee82 <GDT::getNumberOfEntries()>:
c000ee82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee86:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee88:	c3                   	ret    
c000ee89:	90                   	nop

c000ee8a <GDT::flush()>:
c000ee8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee8e:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee90:	83 c0 04             	add    eax,0x4
c000ee93:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee9a:	a3 d2 da 02 c0       	mov    ds:0xc002dad2,eax
c000ee9f:	66 89 15 d0 da 02 c0 	mov    WORD PTR ds:0xc002dad0,dx
c000eea6:	e9 9d 15 ff ff       	jmp    c0000448 <loadGDT>
c000eeab:	90                   	nop

c000eeac <GDT::setup()>:
c000eeac:	55                   	push   ebp
c000eead:	57                   	push   edi
c000eeae:	56                   	push   esi
c000eeaf:	53                   	push   ebx
c000eeb0:	83 ec 3c             	sub    esp,0x3c
c000eeb3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000eeb7:	6a 00                	push   0x0
c000eeb9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000eebd:	53                   	push   ebx
c000eebe:	e8 33 ff ff ff       	call   c000edf6 <GDTEntry::setBase(unsigned int)>
c000eec3:	6a 00                	push   0x0
c000eec5:	53                   	push   ebx
c000eec6:	e8 47 ff ff ff       	call   c000ee12 <GDTEntry::setLimit(unsigned int)>
c000eecb:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000eed3:	6a 00                	push   0x0
c000eed5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000eed9:	53                   	push   ebx
c000eeda:	e8 17 ff ff ff       	call   c000edf6 <GDTEntry::setBase(unsigned int)>
c000eedf:	68 ff ff ff 00       	push   0xffffff
c000eee4:	53                   	push   ebx
c000eee5:	e8 28 ff ff ff       	call   c000ee12 <GDTEntry::setLimit(unsigned int)>
c000eeea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eeee:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eef3:	0d 00 9a c0 00       	or     eax,0xc09a00
c000eef8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eefc:	83 c4 20             	add    esp,0x20
c000eeff:	6a 00                	push   0x0
c000ef01:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ef05:	53                   	push   ebx
c000ef06:	e8 eb fe ff ff       	call   c000edf6 <GDTEntry::setBase(unsigned int)>
c000ef0b:	68 ff ff ff 00       	push   0xffffff
c000ef10:	53                   	push   ebx
c000ef11:	e8 fc fe ff ff       	call   c000ee12 <GDTEntry::setLimit(unsigned int)>
c000ef16:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ef1a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef1e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ef22:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ef26:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ef2a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef2f:	0d 00 92 c0 00       	or     eax,0xc09200
c000ef34:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef38:	89 d8                	mov    eax,ebx
c000ef3a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ef3e:	80 cc 60             	or     ah,0x60
c000ef41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef45:	83 c4 0c             	add    esp,0xc
c000ef48:	89 f8                	mov    eax,edi
c000ef4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef4e:	80 cc 60             	or     ah,0x60
c000ef51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef55:	89 c7                	mov    edi,eax
c000ef57:	55                   	push   ebp
c000ef58:	e8 e9 fe ff ff       	call   c000ee46 <GDT::addEntry(GDTEntry)>
c000ef5d:	83 c4 0c             	add    esp,0xc
c000ef60:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef68:	55                   	push   ebp
c000ef69:	e8 d8 fe ff ff       	call   c000ee46 <GDT::addEntry(GDTEntry)>
c000ef6e:	83 c4 0c             	add    esp,0xc
c000ef71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef79:	55                   	push   ebp
c000ef7a:	e8 c7 fe ff ff       	call   c000ee46 <GDT::addEntry(GDTEntry)>
c000ef7f:	83 c4 0c             	add    esp,0xc
c000ef82:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef8a:	53                   	push   ebx
c000ef8b:	51                   	push   ecx
c000ef8c:	55                   	push   ebp
c000ef8d:	e8 b4 fe ff ff       	call   c000ee46 <GDT::addEntry(GDTEntry)>
c000ef92:	83 c4 0c             	add    esp,0xc
c000ef95:	57                   	push   edi
c000ef96:	56                   	push   esi
c000ef97:	55                   	push   ebp
c000ef98:	e8 a9 fe ff ff       	call   c000ee46 <GDT::addEntry(GDTEntry)>
c000ef9d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000efa0:	e8 e5 fe ff ff       	call   c000ee8a <GDT::flush()>
c000efa5:	83 c4 4c             	add    esp,0x4c
c000efa8:	5b                   	pop    ebx
c000efa9:	5e                   	pop    esi
c000efaa:	5f                   	pop    edi
c000efab:	5d                   	pop    ebp
c000efac:	c3                   	ret    

c000efad <idleFunction(void*)>:
c000efad:	53                   	push   ebx
c000efae:	83 ec 08             	sub    esp,0x8
c000efb1:	e8 02 e5 00 00       	call   c001d4b8 <unlockScheduler()>
c000efb6:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000efbb:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000efc1:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000efc8:	74 3c                	je     c000f006 <idleFunction(void*)+0x59>
c000efca:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000efd1:	74 33                	je     c000f006 <idleFunction(void*)+0x59>
c000efd3:	31 db                	xor    ebx,ebx
c000efd5:	52                   	push   edx
c000efd6:	52                   	push   edx
c000efd7:	68 e1 00 00 00       	push   0xe1
c000efdc:	50                   	push   eax
c000efdd:	e8 de fb ff ff       	call   c000ebc0 <Computer::rdmsr(unsigned int)>
c000efe2:	53                   	push   ebx
c000efe3:	83 e0 02             	and    eax,0x2
c000efe6:	50                   	push   eax
c000efe7:	68 e1 00 00 00       	push   0xe1
c000efec:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c000eff2:	e8 f5 fb ff ff       	call   c000ebec <Computer::wrmsr(unsigned int, unsigned long long)>
c000eff7:	83 c4 20             	add    esp,0x20
c000effa:	e8 80 12 ff ff       	call   c000027f <doTPAUSE>
c000efff:	e8 4c 8e 01 00       	call   c0027e50 <idleCommon()>
c000f004:	eb f4                	jmp    c000effa <idleFunction(void*)+0x4d>
c000f006:	fb                   	sti    
c000f007:	f4                   	hlt    
c000f008:	e8 43 8e 01 00       	call   c0027e50 <idleCommon()>
c000f00d:	eb f7                	jmp    c000f006 <idleFunction(void*)+0x59>
c000f00f:	90                   	nop

c000f010 <IDTEntry::IDTEntry(bool)>:
c000f010:	83 ec 04             	sub    esp,0x4
c000f013:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f017:	88 04 24             	mov    BYTE PTR [esp],al
c000f01a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f01e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f028:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f02c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f030:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f033:	83 e2 f0             	and    edx,0xfffffff0
c000f036:	83 ca 0e             	or     edx,0xe
c000f039:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f03c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f040:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f043:	83 e2 ef             	and    edx,0xffffffef
c000f046:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f049:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f04d:	74 04                	je     c000f053 <IDTEntry::IDTEntry(bool)+0x43>
c000f04f:	b2 03                	mov    dl,0x3
c000f051:	eb 02                	jmp    c000f055 <IDTEntry::IDTEntry(bool)+0x45>
c000f053:	b2 00                	mov    dl,0x0
c000f055:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f059:	83 e2 03             	and    edx,0x3
c000f05c:	88 d1                	mov    cl,dl
c000f05e:	c1 e1 05             	shl    ecx,0x5
c000f061:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f064:	83 e2 9f             	and    edx,0xffffff9f
c000f067:	09 ca                	or     edx,ecx
c000f069:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f06c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f070:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f073:	83 ca 80             	or     edx,0xffffff80
c000f076:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f079:	90                   	nop
c000f07a:	83 c4 04             	add    esp,0x4
c000f07d:	c3                   	ret    

c000f07e <IDTEntry::setOffset(unsigned int)>:
c000f07e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f082:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f086:	66 89 02             	mov    WORD PTR [edx],ax
c000f089:	c1 e8 10             	shr    eax,0x10
c000f08c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f090:	c3                   	ret    
c000f091:	90                   	nop

c000f092 <IDT::IDT()>:
c000f092:	90                   	nop
c000f093:	c3                   	ret    

c000f094 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f098:	83 c0 30             	add    eax,0x30
c000f09b:	c3                   	ret    

c000f09c <IDT::addEntry(IDTEntry, int)>:
c000f09c:	53                   	push   ebx
c000f09d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f0a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0ad:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f0b0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f0b4:	5b                   	pop    ebx
c000f0b5:	c3                   	ret    

c000f0b6 <IDT::addEntry(int, void (*)(), bool)>:
c000f0b6:	53                   	push   ebx
c000f0b7:	83 ec 10             	sub    esp,0x10
c000f0ba:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f0bf:	50                   	push   eax
c000f0c0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f0c4:	53                   	push   ebx
c000f0c5:	e8 46 ff ff ff       	call   c000f010 <IDTEntry::IDTEntry(bool)>
c000f0ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0ce:	53                   	push   ebx
c000f0cf:	e8 aa ff ff ff       	call   c000f07e <IDTEntry::setOffset(unsigned int)>
c000f0d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f0e4:	e8 b3 ff ff ff       	call   c000f09c <IDT::addEntry(IDTEntry, int)>
c000f0e9:	83 c4 30             	add    esp,0x30
c000f0ec:	5b                   	pop    ebx
c000f0ed:	c3                   	ret    

c000f0ee <IDT::flush()>:
c000f0ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f2:	66 c7 05 d8 da 02 c0 ff 07 	mov    WORD PTR ds:0xc002dad8,0x7ff
c000f0fb:	a3 da da 02 c0       	mov    ds:0xc002dada,eax
c000f100:	0f 01 1d d8 da 02 c0 	lidtd  ds:0xc002dad8
c000f107:	c3                   	ret    

c000f108 <IDT::setup()>:
c000f108:	57                   	push   edi
c000f109:	56                   	push   esi
c000f10a:	53                   	push   ebx
c000f10b:	83 ec 10             	sub    esp,0x10
c000f10e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f112:	6a 00                	push   0x0
c000f114:	68 68 04 00 c0       	push   0xc0000468
c000f119:	6a 00                	push   0x0
c000f11b:	53                   	push   ebx
c000f11c:	e8 95 ff ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f121:	6a 00                	push   0x0
c000f123:	68 78 04 00 c0       	push   0xc0000478
c000f128:	6a 01                	push   0x1
c000f12a:	53                   	push   ebx
c000f12b:	e8 86 ff ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f130:	83 c4 20             	add    esp,0x20
c000f133:	6a 00                	push   0x0
c000f135:	68 82 04 00 c0       	push   0xc0000482
c000f13a:	6a 02                	push   0x2
c000f13c:	53                   	push   ebx
c000f13d:	e8 74 ff ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f142:	6a 00                	push   0x0
c000f144:	68 8c 04 00 c0       	push   0xc000048c
c000f149:	6a 03                	push   0x3
c000f14b:	53                   	push   ebx
c000f14c:	e8 65 ff ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f151:	83 c4 20             	add    esp,0x20
c000f154:	6a 00                	push   0x0
c000f156:	68 96 04 00 c0       	push   0xc0000496
c000f15b:	6a 04                	push   0x4
c000f15d:	53                   	push   ebx
c000f15e:	e8 53 ff ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f163:	6a 00                	push   0x0
c000f165:	68 a0 04 00 c0       	push   0xc00004a0
c000f16a:	6a 05                	push   0x5
c000f16c:	53                   	push   ebx
c000f16d:	e8 44 ff ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f172:	83 c4 20             	add    esp,0x20
c000f175:	6a 00                	push   0x0
c000f177:	68 aa 04 00 c0       	push   0xc00004aa
c000f17c:	6a 06                	push   0x6
c000f17e:	53                   	push   ebx
c000f17f:	e8 32 ff ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f184:	6a 00                	push   0x0
c000f186:	68 b4 04 00 c0       	push   0xc00004b4
c000f18b:	6a 07                	push   0x7
c000f18d:	53                   	push   ebx
c000f18e:	e8 23 ff ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f193:	83 c4 20             	add    esp,0x20
c000f196:	6a 00                	push   0x0
c000f198:	68 be 04 00 c0       	push   0xc00004be
c000f19d:	6a 08                	push   0x8
c000f19f:	53                   	push   ebx
c000f1a0:	e8 11 ff ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f1a5:	6a 00                	push   0x0
c000f1a7:	68 c6 04 00 c0       	push   0xc00004c6
c000f1ac:	6a 09                	push   0x9
c000f1ae:	53                   	push   ebx
c000f1af:	e8 02 ff ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f1b4:	83 c4 20             	add    esp,0x20
c000f1b7:	6a 00                	push   0x0
c000f1b9:	68 d0 04 00 c0       	push   0xc00004d0
c000f1be:	6a 0a                	push   0xa
c000f1c0:	53                   	push   ebx
c000f1c1:	e8 f0 fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f1c6:	6a 00                	push   0x0
c000f1c8:	68 d8 04 00 c0       	push   0xc00004d8
c000f1cd:	6a 0b                	push   0xb
c000f1cf:	53                   	push   ebx
c000f1d0:	e8 e1 fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f1d5:	83 c4 20             	add    esp,0x20
c000f1d8:	6a 00                	push   0x0
c000f1da:	68 e0 04 00 c0       	push   0xc00004e0
c000f1df:	6a 0c                	push   0xc
c000f1e1:	53                   	push   ebx
c000f1e2:	e8 cf fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f1e7:	6a 00                	push   0x0
c000f1e9:	68 e8 04 00 c0       	push   0xc00004e8
c000f1ee:	6a 0d                	push   0xd
c000f1f0:	53                   	push   ebx
c000f1f1:	e8 c0 fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f1f6:	83 c4 20             	add    esp,0x20
c000f1f9:	6a 00                	push   0x0
c000f1fb:	68 f0 04 00 c0       	push   0xc00004f0
c000f200:	6a 0e                	push   0xe
c000f202:	53                   	push   ebx
c000f203:	e8 ae fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f208:	6a 00                	push   0x0
c000f20a:	68 f8 04 00 c0       	push   0xc00004f8
c000f20f:	6a 0f                	push   0xf
c000f211:	53                   	push   ebx
c000f212:	e8 9f fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f217:	83 c4 20             	add    esp,0x20
c000f21a:	6a 00                	push   0x0
c000f21c:	68 02 05 00 c0       	push   0xc0000502
c000f221:	6a 10                	push   0x10
c000f223:	53                   	push   ebx
c000f224:	e8 8d fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f229:	6a 00                	push   0x0
c000f22b:	68 0c 05 00 c0       	push   0xc000050c
c000f230:	6a 11                	push   0x11
c000f232:	53                   	push   ebx
c000f233:	e8 7e fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f238:	83 c4 20             	add    esp,0x20
c000f23b:	6a 00                	push   0x0
c000f23d:	68 16 05 00 c0       	push   0xc0000516
c000f242:	6a 12                	push   0x12
c000f244:	53                   	push   ebx
c000f245:	e8 6c fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f24a:	6a 01                	push   0x1
c000f24c:	68 b0 05 00 c0       	push   0xc00005b0
c000f251:	6a 60                	push   0x60
c000f253:	53                   	push   ebx
c000f254:	e8 5d fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f259:	83 c4 20             	add    esp,0x20
c000f25c:	6a 00                	push   0x0
c000f25e:	68 b7 05 00 c0       	push   0xc00005b7
c000f263:	6a 20                	push   0x20
c000f265:	53                   	push   ebx
c000f266:	e8 4b fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f26b:	6a 00                	push   0x0
c000f26d:	68 a2 05 00 c0       	push   0xc00005a2
c000f272:	6a 21                	push   0x21
c000f274:	53                   	push   ebx
c000f275:	e8 3c fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f27a:	83 c4 20             	add    esp,0x20
c000f27d:	6a 00                	push   0x0
c000f27f:	68 a9 05 00 c0       	push   0xc00005a9
c000f284:	6a 22                	push   0x22
c000f286:	53                   	push   ebx
c000f287:	e8 2a fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f28c:	6a 00                	push   0x0
c000f28e:	68 20 05 00 c0       	push   0xc0000520
c000f293:	6a 23                	push   0x23
c000f295:	53                   	push   ebx
c000f296:	e8 1b fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f29b:	83 c4 20             	add    esp,0x20
c000f29e:	6a 00                	push   0x0
c000f2a0:	68 2a 05 00 c0       	push   0xc000052a
c000f2a5:	6a 24                	push   0x24
c000f2a7:	53                   	push   ebx
c000f2a8:	e8 09 fe ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f2ad:	6a 00                	push   0x0
c000f2af:	68 34 05 00 c0       	push   0xc0000534
c000f2b4:	6a 25                	push   0x25
c000f2b6:	53                   	push   ebx
c000f2b7:	e8 fa fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f2bc:	83 c4 20             	add    esp,0x20
c000f2bf:	6a 00                	push   0x0
c000f2c1:	68 3e 05 00 c0       	push   0xc000053e
c000f2c6:	6a 26                	push   0x26
c000f2c8:	53                   	push   ebx
c000f2c9:	e8 e8 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f2ce:	6a 00                	push   0x0
c000f2d0:	68 48 05 00 c0       	push   0xc0000548
c000f2d5:	6a 27                	push   0x27
c000f2d7:	53                   	push   ebx
c000f2d8:	e8 d9 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f2dd:	83 c4 20             	add    esp,0x20
c000f2e0:	6a 00                	push   0x0
c000f2e2:	68 52 05 00 c0       	push   0xc0000552
c000f2e7:	6a 28                	push   0x28
c000f2e9:	53                   	push   ebx
c000f2ea:	e8 c7 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f2ef:	6a 00                	push   0x0
c000f2f1:	68 5c 05 00 c0       	push   0xc000055c
c000f2f6:	6a 29                	push   0x29
c000f2f8:	53                   	push   ebx
c000f2f9:	e8 b8 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f2fe:	83 c4 20             	add    esp,0x20
c000f301:	6a 00                	push   0x0
c000f303:	68 66 05 00 c0       	push   0xc0000566
c000f308:	6a 2a                	push   0x2a
c000f30a:	53                   	push   ebx
c000f30b:	e8 a6 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f310:	6a 00                	push   0x0
c000f312:	68 70 05 00 c0       	push   0xc0000570
c000f317:	6a 2b                	push   0x2b
c000f319:	53                   	push   ebx
c000f31a:	e8 97 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f31f:	83 c4 20             	add    esp,0x20
c000f322:	6a 00                	push   0x0
c000f324:	68 7a 05 00 c0       	push   0xc000057a
c000f329:	6a 2c                	push   0x2c
c000f32b:	53                   	push   ebx
c000f32c:	e8 85 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f331:	6a 00                	push   0x0
c000f333:	68 84 05 00 c0       	push   0xc0000584
c000f338:	6a 2d                	push   0x2d
c000f33a:	53                   	push   ebx
c000f33b:	e8 76 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f340:	83 c4 20             	add    esp,0x20
c000f343:	6a 00                	push   0x0
c000f345:	68 8e 05 00 c0       	push   0xc000058e
c000f34a:	6a 2e                	push   0x2e
c000f34c:	53                   	push   ebx
c000f34d:	e8 64 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f352:	6a 00                	push   0x0
c000f354:	68 98 05 00 c0       	push   0xc0000598
c000f359:	6a 2f                	push   0x2f
c000f35b:	53                   	push   ebx
c000f35c:	e8 55 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f361:	83 c4 20             	add    esp,0x20
c000f364:	6a 00                	push   0x0
c000f366:	68 ed 05 00 c0       	push   0xc00005ed
c000f36b:	6a 30                	push   0x30
c000f36d:	53                   	push   ebx
c000f36e:	e8 43 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f373:	6a 00                	push   0x0
c000f375:	68 f7 05 00 c0       	push   0xc00005f7
c000f37a:	6a 31                	push   0x31
c000f37c:	53                   	push   ebx
c000f37d:	e8 34 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f382:	83 c4 20             	add    esp,0x20
c000f385:	6a 00                	push   0x0
c000f387:	68 01 06 00 c0       	push   0xc0000601
c000f38c:	6a 32                	push   0x32
c000f38e:	53                   	push   ebx
c000f38f:	e8 22 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f394:	6a 00                	push   0x0
c000f396:	68 0b 06 00 c0       	push   0xc000060b
c000f39b:	6a 33                	push   0x33
c000f39d:	53                   	push   ebx
c000f39e:	e8 13 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f3a3:	83 c4 20             	add    esp,0x20
c000f3a6:	6a 00                	push   0x0
c000f3a8:	68 15 06 00 c0       	push   0xc0000615
c000f3ad:	6a 34                	push   0x34
c000f3af:	53                   	push   ebx
c000f3b0:	e8 01 fd ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f3b5:	6a 00                	push   0x0
c000f3b7:	68 1f 06 00 c0       	push   0xc000061f
c000f3bc:	6a 35                	push   0x35
c000f3be:	53                   	push   ebx
c000f3bf:	e8 f2 fc ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f3c4:	83 c4 20             	add    esp,0x20
c000f3c7:	6a 00                	push   0x0
c000f3c9:	68 29 06 00 c0       	push   0xc0000629
c000f3ce:	6a 36                	push   0x36
c000f3d0:	53                   	push   ebx
c000f3d1:	e8 e0 fc ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f3d6:	6a 00                	push   0x0
c000f3d8:	68 33 06 00 c0       	push   0xc0000633
c000f3dd:	6a 37                	push   0x37
c000f3df:	53                   	push   ebx
c000f3e0:	e8 d1 fc ff ff       	call   c000f0b6 <IDT::addEntry(int, void (*)(), bool)>
c000f3e5:	83 c4 20             	add    esp,0x20
c000f3e8:	e8 9a 26 00 00       	call   c0011a87 <Virt::getAKernelVAS()>
c000f3ed:	52                   	push   edx
c000f3ee:	6a 03                	push   0x3
c000f3f0:	6a 02                	push   0x2
c000f3f2:	50                   	push   eax
c000f3f3:	e8 ca 2c 00 00       	call   c00120c2 <VAS::allocatePages(int, int)>
c000f3f8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f3ff:	89 c6                	mov    esi,eax
c000f401:	e8 12 02 00 00       	call   c000f618 <malloc>
c000f406:	81 c6 00 20 00 00    	add    esi,0x2000
c000f40c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f40f:	89 c7                	mov    edi,eax
c000f411:	e8 12 1e 00 00       	call   c0011228 <TSS::TSS()>
c000f416:	83 c4 0c             	add    esp,0xc
c000f419:	68 be 04 00 c0       	push   0xc00004be
c000f41e:	56                   	push   esi
c000f41f:	57                   	push   edi
c000f420:	e8 43 1e 00 00       	call   c0011268 <TSS::setup(unsigned long, unsigned long)>
c000f425:	59                   	pop    ecx
c000f426:	89 c6                	mov    esi,eax
c000f428:	5f                   	pop    edi
c000f429:	6a 00                	push   0x0
c000f42b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f42f:	50                   	push   eax
c000f430:	e8 db fb ff ff       	call   c000f010 <IDTEntry::IDTEntry(bool)>
c000f435:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f439:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f43e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f445:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f44b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f44f:	80 ce 05             	or     dh,0x5
c000f452:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f459:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f45d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f460:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f463:	e8 86 fc ff ff       	call   c000f0ee <IDT::flush()>
c000f468:	83 c4 20             	add    esp,0x20
c000f46b:	5b                   	pop    ebx
c000f46c:	5e                   	pop    esi
c000f46d:	5f                   	pop    edi
c000f46e:	c3                   	ret    

c000f46f <sbrk>:
c000f46f:	55                   	push   ebp
c000f470:	57                   	push   edi
c000f471:	56                   	push   esi
c000f472:	53                   	push   ebx
c000f473:	83 ec 1c             	sub    esp,0x1c
c000f476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f47a:	85 c0                	test   eax,eax
c000f47c:	74 3e                	je     c000f4bc <sbrk+0x4d>
c000f47e:	78 43                	js     c000f4c3 <sbrk+0x54>
c000f480:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c000f486:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f48c:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f492:	83 e2 01             	and    edx,0x1
c000f495:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f499:	8b 0d f0 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c9f0
c000f49f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f4a3:	05 ff 0f 00 00       	add    eax,0xfff
c000f4a8:	89 c2                	mov    edx,eax
c000f4aa:	78 2f                	js     c000f4db <sbrk+0x6c>
c000f4ac:	c1 fa 0c             	sar    edx,0xc
c000f4af:	89 d7                	mov    edi,edx
c000f4b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4b5:	be 00 00 00 00       	mov    esi,0x0
c000f4ba:	eb 36                	jmp    c000f4f2 <sbrk+0x83>
c000f4bc:	a1 f0 c9 02 c0       	mov    eax,ds:0xc002c9f0
c000f4c1:	eb 74                	jmp    c000f537 <sbrk+0xc8>
c000f4c3:	83 ec 08             	sub    esp,0x8
c000f4c6:	50                   	push   eax
c000f4c7:	68 88 99 02 c0       	push   0xc0029988
c000f4cc:	e8 16 34 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000f4d1:	83 c4 10             	add    esp,0x10
c000f4d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4d9:	eb 5c                	jmp    c000f537 <sbrk+0xc8>
c000f4db:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f4e1:	eb c9                	jmp    c000f4ac <sbrk+0x3d>
c000f4e3:	81 05 f0 c9 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c9f0,0x1000
c000f4ed:	46                   	inc    esi
c000f4ee:	39 f7                	cmp    edi,esi
c000f4f0:	74 34                	je     c000f526 <sbrk+0xb7>
c000f4f2:	e8 90 25 00 00       	call   c0011a87 <Virt::getAKernelVAS()>
c000f4f7:	89 c3                	mov    ebx,eax
c000f4f9:	8b 2d f0 c9 02 c0    	mov    ebp,DWORD PTR ds:0xc002c9f0
c000f4ff:	e8 b1 07 00 00       	call   c000fcb5 <Phys::allocatePage()>
c000f504:	68 01 04 00 00       	push   0x401
c000f509:	55                   	push   ebp
c000f50a:	50                   	push   eax
c000f50b:	53                   	push   ebx
c000f50c:	e8 b1 2a 00 00       	call   c0011fc2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f511:	83 c4 10             	add    esp,0x10
c000f514:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f519:	74 c8                	je     c000f4e3 <sbrk+0x74>
c000f51b:	8b 1d f0 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9f0
c000f521:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f524:	eb bd                	jmp    c000f4e3 <sbrk+0x74>
c000f526:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f52b:	75 12                	jne    c000f53f <sbrk+0xd0>
c000f52d:	0f 20 d8             	mov    eax,cr3
c000f530:	0f 22 d8             	mov    cr3,eax
c000f533:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f537:	83 c4 1c             	add    esp,0x1c
c000f53a:	5b                   	pop    ebx
c000f53b:	5e                   	pop    esi
c000f53c:	5f                   	pop    edi
c000f53d:	5d                   	pop    ebp
c000f53e:	c3                   	ret    
c000f53f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f543:	89 cb                	mov    ebx,ecx
c000f545:	c1 eb 0a             	shr    ebx,0xa
c000f548:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f54e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f558:	c1 e0 0c             	shl    eax,0xc
c000f55b:	01 c8                	add    eax,ecx
c000f55d:	c1 e8 0a             	shr    eax,0xa
c000f560:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f565:	2d 00 00 40 00       	sub    eax,0x400000
c000f56a:	39 c3                	cmp    ebx,eax
c000f56c:	77 c5                	ja     c000f533 <sbrk+0xc4>
c000f56e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f571:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f577:	39 d8                	cmp    eax,ebx
c000f579:	73 f3                	jae    c000f56e <sbrk+0xff>
c000f57b:	eb b6                	jmp    c000f533 <sbrk+0xc4>

c000f57d <mmap>:
c000f57d:	83 ec 18             	sub    esp,0x18
c000f580:	68 b8 99 02 c0       	push   0xc00299b8
c000f585:	e8 d1 a8 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c000f58a:	b8 00 00 00 00       	mov    eax,0x0
c000f58f:	83 c4 1c             	add    esp,0x1c
c000f592:	c3                   	ret    

c000f593 <munmap>:
c000f593:	83 ec 18             	sub    esp,0x18
c000f596:	68 bd 99 02 c0       	push   0xc00299bd
c000f59b:	e8 bb a8 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c000f5a0:	b8 00 00 00 00       	mov    eax,0x0
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <liballoc_lock()>:
c000f5a9:	83 ec 0c             	sub    esp,0xc
c000f5ac:	e8 05 df 00 00       	call   c001d4b6 <lockScheduler()>
c000f5b1:	b8 00 00 00 00       	mov    eax,0x0
c000f5b6:	83 c4 0c             	add    esp,0xc
c000f5b9:	c3                   	ret    

c000f5ba <liballoc_unlock()>:
c000f5ba:	83 ec 0c             	sub    esp,0xc
c000f5bd:	e8 f6 de 00 00       	call   c001d4b8 <unlockScheduler()>
c000f5c2:	b8 00 00 00 00       	mov    eax,0x0
c000f5c7:	83 c4 0c             	add    esp,0xc
c000f5ca:	c3                   	ret    

c000f5cb <liballoc_alloc(int)>:
c000f5cb:	83 ec 0c             	sub    esp,0xc
c000f5ce:	e8 b4 24 00 00       	call   c0011a87 <Virt::getAKernelVAS()>
c000f5d3:	83 ec 04             	sub    esp,0x4
c000f5d6:	6a 01                	push   0x1
c000f5d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5dc:	50                   	push   eax
c000f5dd:	e8 e0 2a 00 00       	call   c00120c2 <VAS::allocatePages(int, int)>
c000f5e2:	83 c4 1c             	add    esp,0x1c
c000f5e5:	c3                   	ret    

c000f5e6 <liballoc_free(void*, int)>:
c000f5e6:	83 ec 0c             	sub    esp,0xc
c000f5e9:	e8 99 24 00 00       	call   c0011a87 <Virt::getAKernelVAS()>
c000f5ee:	83 ec 08             	sub    esp,0x8
c000f5f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5f5:	50                   	push   eax
c000f5f6:	e8 83 27 00 00       	call   c0011d7e <VAS::freeAllocatedPages(unsigned long)>
c000f5fb:	b8 00 00 00 00       	mov    eax,0x0
c000f600:	83 c4 1c             	add    esp,0x1c
c000f603:	c3                   	ret    

c000f604 <realloc>:
c000f604:	83 ec 14             	sub    esp,0x14
c000f607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f60b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f60f:	e8 1d 1e ff ff       	call   c0001431 <dlrealloc>
c000f614:	83 c4 1c             	add    esp,0x1c
c000f617:	c3                   	ret    

c000f618 <malloc>:
c000f618:	83 ec 18             	sub    esp,0x18
c000f61b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f61f:	e8 d0 18 ff ff       	call   c0000ef4 <dlmalloc>
c000f624:	83 c4 1c             	add    esp,0x1c
c000f627:	c3                   	ret    

c000f628 <free>:
c000f628:	83 ec 18             	sub    esp,0x18
c000f62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f62f:	e8 65 15 ff ff       	call   c0000b99 <dlfree>
c000f634:	83 c4 1c             	add    esp,0x1c
c000f637:	c3                   	ret    

c000f638 <rfree>:
c000f638:	83 ec 18             	sub    esp,0x18
c000f63b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f63f:	e8 55 15 ff ff       	call   c0000b99 <dlfree>
c000f644:	83 c4 1c             	add    esp,0x1c
c000f647:	c3                   	ret    

c000f648 <calloc>:
c000f648:	56                   	push   esi
c000f649:	53                   	push   ebx
c000f64a:	83 ec 10             	sub    esp,0x10
c000f64d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f651:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f656:	53                   	push   ebx
c000f657:	e8 bc ff ff ff       	call   c000f618 <malloc>
c000f65c:	89 c6                	mov    esi,eax
c000f65e:	83 c4 0c             	add    esp,0xc
c000f661:	53                   	push   ebx
c000f662:	6a 00                	push   0x0
c000f664:	50                   	push   eax
c000f665:	e8 4e 10 ff ff       	call   c00006b8 <memset>
c000f66a:	89 f0                	mov    eax,esi
c000f66c:	83 c4 14             	add    esp,0x14
c000f66f:	5b                   	pop    ebx
c000f670:	5e                   	pop    esi
c000f671:	c3                   	ret    

c000f672 <hwTextMode_loadInData(VgaText*)>:
c000f672:	55                   	push   ebp
c000f673:	a1 00 ca 02 c0       	mov    eax,ds:0xc002ca00
c000f678:	57                   	push   edi
c000f679:	56                   	push   esi
c000f67a:	53                   	push   ebx
c000f67b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f67f:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f685:	85 d2                	test   edx,edx
c000f687:	7e 2f                	jle    c000f6b8 <hwTextMode_loadInData(VgaText*)+0x46>
c000f689:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f68f:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f692:	31 f6                	xor    esi,esi
c000f694:	29 fd                	sub    ebp,edi
c000f696:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f699:	31 c0                	xor    eax,eax
c000f69b:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f69f:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f6a3:	40                   	inc    eax
c000f6a4:	83 f8 50             	cmp    eax,0x50
c000f6a7:	75 f2                	jne    c000f69b <hwTextMode_loadInData(VgaText*)+0x29>
c000f6a9:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f6af:	46                   	inc    esi
c000f6b0:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f6b6:	7f de                	jg     c000f696 <hwTextMode_loadInData(VgaText*)+0x24>
c000f6b8:	5b                   	pop    ebx
c000f6b9:	5e                   	pop    esi
c000f6ba:	5f                   	pop    edi
c000f6bb:	5d                   	pop    ebp
c000f6bc:	c3                   	ret    

c000f6bd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f6bd:	55                   	push   ebp
c000f6be:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f6c5:	57                   	push   edi
c000f6c6:	56                   	push   esi
c000f6c7:	53                   	push   ebx
c000f6c8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f6cc:	75 50                	jne    c000f71e <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f6ce:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6d4:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6da:	8b 15 00 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca00
c000f6e0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f6e4:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f6ea:	eb 0e                	jmp    c000f6fa <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f6ec:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6f2:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6f8:	89 da                	mov    edx,ebx
c000f6fa:	83 e5 0f             	and    ebp,0xf
c000f6fd:	c1 e0 04             	shl    eax,0x4
c000f700:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f703:	0f b6 c0             	movzx  eax,al
c000f706:	41                   	inc    ecx
c000f707:	09 e8                	or     eax,ebp
c000f709:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f70d:	c1 e0 08             	shl    eax,0x8
c000f710:	09 e8                	or     eax,ebp
c000f712:	39 fb                	cmp    ebx,edi
c000f714:	66 89 02             	mov    WORD PTR [edx],ax
c000f717:	75 d3                	jne    c000f6ec <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f719:	5b                   	pop    ebx
c000f71a:	5e                   	pop    esi
c000f71b:	5f                   	pop    edi
c000f71c:	5d                   	pop    ebp
c000f71d:	c3                   	ret    
c000f71e:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f728:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f732:	31 c0                	xor    eax,eax
c000f734:	bd 02 00 00 00       	mov    ebp,0x2
c000f739:	eb 9f                	jmp    c000f6da <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f73b <hwTextMode_showCursor(VgaText*, bool)>:
c000f73b:	56                   	push   esi
c000f73c:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f743:	53                   	push   ebx
c000f744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f748:	75 39                	jne    c000f783 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f74a:	84 c0                	test   al,al
c000f74c:	74 38                	je     c000f786 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f74e:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f753:	b0 0a                	mov    al,0xa
c000f755:	89 da                	mov    edx,ebx
c000f757:	ee                   	out    dx,al
c000f758:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f75d:	89 ca                	mov    edx,ecx
c000f75f:	ec                   	in     al,dx
c000f760:	b2 0f                	mov    dl,0xf
c000f762:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f766:	83 e0 c0             	and    eax,0xffffffc0
c000f769:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f76f:	09 d0                	or     eax,edx
c000f771:	89 ca                	mov    edx,ecx
c000f773:	ee                   	out    dx,al
c000f774:	b0 0b                	mov    al,0xb
c000f776:	89 da                	mov    edx,ebx
c000f778:	ee                   	out    dx,al
c000f779:	89 ca                	mov    edx,ecx
c000f77b:	ec                   	in     al,dx
c000f77c:	83 e0 e0             	and    eax,0xffffffe0
c000f77f:	83 c8 0f             	or     eax,0xf
c000f782:	ee                   	out    dx,al
c000f783:	5b                   	pop    ebx
c000f784:	5e                   	pop    esi
c000f785:	c3                   	ret    
c000f786:	b0 0a                	mov    al,0xa
c000f788:	ba d4 03 00 00       	mov    edx,0x3d4
c000f78d:	ee                   	out    dx,al
c000f78e:	b0 20                	mov    al,0x20
c000f790:	ba d5 03 00 00       	mov    edx,0x3d5
c000f795:	ee                   	out    dx,al
c000f796:	5b                   	pop    ebx
c000f797:	5e                   	pop    esi
c000f798:	c3                   	ret    

c000f799 <hwTextMode_update(VgaText*)>:
c000f799:	c3                   	ret    

c000f79a <hwTextMode_updateCursor(VgaText*)>:
c000f79a:	56                   	push   esi
c000f79b:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f7a2:	53                   	push   ebx
c000f7a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7a7:	75 3f                	jne    c000f7e8 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f7a9:	be d4 03 00 00       	mov    esi,0x3d4
c000f7ae:	b9 19 00 00 00       	mov    ecx,0x19
c000f7b3:	89 f2                	mov    edx,esi
c000f7b5:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f7bb:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f7c1:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f7c4:	c1 e1 04             	shl    ecx,0x4
c000f7c7:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f7cd:	b0 0f                	mov    al,0xf
c000f7cf:	ee                   	out    dx,al
c000f7d0:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f7d5:	88 c8                	mov    al,cl
c000f7d7:	89 da                	mov    edx,ebx
c000f7d9:	ee                   	out    dx,al
c000f7da:	b0 0e                	mov    al,0xe
c000f7dc:	89 f2                	mov    edx,esi
c000f7de:	ee                   	out    dx,al
c000f7df:	89 c8                	mov    eax,ecx
c000f7e1:	89 da                	mov    edx,ebx
c000f7e3:	66 c1 e8 08          	shr    ax,0x8
c000f7e7:	ee                   	out    dx,al
c000f7e8:	5b                   	pop    ebx
c000f7e9:	5e                   	pop    esi
c000f7ea:	c3                   	ret    

c000f7eb <hwTextMode_disableBlink(VgaText*, bool)>:
c000f7eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7ef:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f7f6:	75 38                	jne    c000f830 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f7f8:	ba da 03 00 00       	mov    edx,0x3da
c000f7fd:	84 c0                	test   al,al
c000f7ff:	75 18                	jne    c000f819 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f801:	ec                   	in     al,dx
c000f802:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f807:	b0 30                	mov    al,0x30
c000f809:	89 ca                	mov    edx,ecx
c000f80b:	ee                   	out    dx,al
c000f80c:	ba c1 03 00 00       	mov    edx,0x3c1
c000f811:	ec                   	in     al,dx
c000f812:	83 c8 08             	or     eax,0x8
c000f815:	89 ca                	mov    edx,ecx
c000f817:	ee                   	out    dx,al
c000f818:	c3                   	ret    
c000f819:	ec                   	in     al,dx
c000f81a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f81f:	b0 30                	mov    al,0x30
c000f821:	89 ca                	mov    edx,ecx
c000f823:	ee                   	out    dx,al
c000f824:	ba c1 03 00 00       	mov    edx,0x3c1
c000f829:	ec                   	in     al,dx
c000f82a:	83 e0 f7             	and    eax,0xfffffff7
c000f82d:	89 ca                	mov    edx,ecx
c000f82f:	ee                   	out    dx,al
c000f830:	c3                   	ret    

c000f831 <hwTextMode_scrollScreen(VgaText*)>:
c000f831:	55                   	push   ebp
c000f832:	57                   	push   edi
c000f833:	56                   	push   esi
c000f834:	53                   	push   ebx
c000f835:	83 ec 1c             	sub    esp,0x1c
c000f838:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f83c:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f843:	74 14                	je     c000f859 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f845:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f84f:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f859:	a1 00 ca 02 c0       	mov    eax,ds:0xc002ca00
c000f85e:	bd 02 00 00 00       	mov    ebp,0x2
c000f863:	05 a0 00 00 00       	add    eax,0xa0
c000f868:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f86c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f870:	31 c0                	xor    eax,eax
c000f872:	eb 0b                	jmp    c000f87f <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f874:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f87a:	74 57                	je     c000f8d3 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f87c:	43                   	inc    ebx
c000f87d:	89 f0                	mov    eax,esi
c000f87f:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f885:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f88b:	88 13                	mov    BYTE PTR [ebx],dl
c000f88d:	8d 70 01             	lea    esi,[eax+0x1]
c000f890:	83 fd 18             	cmp    ebp,0x18
c000f893:	75 df                	jne    c000f874 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f895:	a8 01                	test   al,0x1
c000f897:	75 13                	jne    c000f8ac <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f899:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f89c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f8a2:	75 d8                	jne    c000f87c <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f8a4:	83 c4 1c             	add    esp,0x1c
c000f8a7:	5b                   	pop    ebx
c000f8a8:	5e                   	pop    esi
c000f8a9:	5f                   	pop    edi
c000f8aa:	5d                   	pop    ebp
c000f8ab:	c3                   	ret    
c000f8ac:	83 ec 08             	sub    esp,0x8
c000f8af:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f8b6:	50                   	push   eax
c000f8b7:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f8bb:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f8c2:	50                   	push   eax
c000f8c3:	e8 32 0c 00 00       	call   c00104fa <VgaText::combineColours(unsigned char, unsigned char)>
c000f8c8:	83 c4 10             	add    esp,0x10
c000f8cb:	88 07                	mov    BYTE PTR [edi],al
c000f8cd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8d1:	eb c9                	jmp    c000f89c <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f8d3:	45                   	inc    ebp
c000f8d4:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f8dc:	eb 8e                	jmp    c000f86c <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f8de <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f8de:	57                   	push   edi
c000f8df:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f8e6:	56                   	push   esi
c000f8e7:	53                   	push   ebx
c000f8e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8ec:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f8f0:	75 65                	jne    c000f957 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f8f2:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f8f7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f8fc:	83 ec 08             	sub    esp,0x8
c000f8ff:	52                   	push   edx
c000f900:	50                   	push   eax
c000f901:	e8 f4 0b 00 00       	call   c00104fa <VgaText::combineColours(unsigned char, unsigned char)>
c000f906:	5a                   	pop    edx
c000f907:	0f b6 c0             	movzx  eax,al
c000f90a:	59                   	pop    ecx
c000f90b:	50                   	push   eax
c000f90c:	0f be c3             	movsx  eax,bl
c000f90f:	50                   	push   eax
c000f910:	e8 8b 0c 00 00       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c000f915:	83 c4 10             	add    esp,0x10
c000f918:	8b 35 00 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca00
c000f91e:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f925:	74 07                	je     c000f92e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f927:	66 0f be c3          	movsx  ax,bl
c000f92b:	80 cc 02             	or     ah,0x2
c000f92e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f932:	ba 19 00 00 00       	mov    edx,0x19
c000f937:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f93d:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f940:	8d 14 92             	lea    edx,[edx+edx*4]
c000f943:	c1 e1 04             	shl    ecx,0x4
c000f946:	c1 e2 04             	shl    edx,0x4
c000f949:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f94d:	01 ca                	add    edx,ecx
c000f94f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f953:	5b                   	pop    ebx
c000f954:	5e                   	pop    esi
c000f955:	5f                   	pop    edi
c000f956:	c3                   	ret    
c000f957:	b8 02 00 00 00       	mov    eax,0x2
c000f95c:	31 d2                	xor    edx,edx
c000f95e:	eb 9c                	jmp    c000f8fc <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f960 <setupTextMode()>:
c000f960:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f965:	83 e0 30             	and    eax,0x30
c000f968:	66 83 f8 30          	cmp    ax,0x30
c000f96c:	75 11                	jne    c000f97f <setupTextMode()+0x1f>
c000f96e:	81 2d 00 ca 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002ca00,0x8000
c000f978:	c6 05 60 db 02 c0 01 	mov    BYTE PTR ds:0xc002db60,0x1
c000f97f:	c7 05 98 db 02 c0 eb f7 00 c0 	mov    DWORD PTR ds:0xc002db98,0xc000f7eb
c000f989:	c7 05 84 db 02 c0 72 f6 00 c0 	mov    DWORD PTR ds:0xc002db84,0xc000f672
c000f993:	c7 05 80 db 02 c0 bd f6 00 c0 	mov    DWORD PTR ds:0xc002db80,0xc000f6bd
c000f99d:	c7 05 8c db 02 c0 31 f8 00 c0 	mov    DWORD PTR ds:0xc002db8c,0xc000f831
c000f9a7:	c7 05 94 db 02 c0 3b f7 00 c0 	mov    DWORD PTR ds:0xc002db94,0xc000f73b
c000f9b1:	c7 05 88 db 02 c0 99 f7 00 c0 	mov    DWORD PTR ds:0xc002db88,0xc000f799
c000f9bb:	c7 05 90 db 02 c0 9a f7 00 c0 	mov    DWORD PTR ds:0xc002db90,0xc000f79a
c000f9c5:	c7 05 9c db 02 c0 de f8 00 c0 	mov    DWORD PTR ds:0xc002db9c,0xc000f8de
c000f9cf:	c3                   	ret    

c000f9d0 <kernel_main>:
c000f9d0:	57                   	push   edi
c000f9d1:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9d6:	56                   	push   esi
c000f9d7:	31 f6                	xor    esi,esi
c000f9d9:	53                   	push   ebx
c000f9da:	83 ec 10             	sub    esp,0x10
c000f9dd:	e8 72 09 00 00       	call   c0010354 <installVgaTextImplementation()>
c000f9e2:	e8 79 ff ff ff       	call   c000f960 <setupTextMode()>
c000f9e7:	89 f0                	mov    eax,esi
c000f9e9:	89 fa                	mov    edx,edi
c000f9eb:	ee                   	out    dx,al
c000f9ec:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9f1:	b0 80                	mov    al,0x80
c000f9f3:	89 da                	mov    edx,ebx
c000f9f5:	ee                   	out    dx,al
c000f9f6:	b1 03                	mov    cl,0x3
c000f9f8:	ba f8 03 00 00       	mov    edx,0x3f8
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	ee                   	out    dx,al
c000fa00:	89 f0                	mov    eax,esi
c000fa02:	89 fa                	mov    edx,edi
c000fa04:	ee                   	out    dx,al
c000fa05:	88 c8                	mov    al,cl
c000fa07:	89 da                	mov    edx,ebx
c000fa09:	ee                   	out    dx,al
c000fa0a:	b0 c7                	mov    al,0xc7
c000fa0c:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa11:	ee                   	out    dx,al
c000fa12:	b0 0b                	mov    al,0xb
c000fa14:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa19:	ee                   	out    dx,al
c000fa1a:	83 ec 0c             	sub    esp,0xc
c000fa1d:	68 c4 99 02 c0       	push   0xc00299c4
c000fa22:	e8 c0 2e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000fa27:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa2c:	05 ff 0f 00 00       	add    eax,0xfff
c000fa31:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa36:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa39:	e8 d1 03 00 00       	call   c000fe0f <Phys::physicalMemorySetup(unsigned int)>
c000fa3e:	e8 c5 1f 00 00       	call   c0011a08 <Virt::virtualMemorySetup()>
c000fa43:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fa49:	83 c4 10             	add    esp,0x10
c000fa4c:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fa52:	75 0e                	jne    c000fa62 <kernel_main+0x92>
c000fa54:	89 d8                	mov    eax,ebx
c000fa56:	25 48 03 00 00       	and    eax,0x348
c000fa5b:	3d 00 03 00 00       	cmp    eax,0x300
c000fa60:	74 10                	je     c000fa72 <kernel_main+0xa2>
c000fa62:	83 ec 0c             	sub    esp,0xc
c000fa65:	68 3c b2 02 c0       	push   0xc002b23c
c000fa6a:	e8 ec a3 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c000fa6f:	83 c4 10             	add    esp,0x10
c000fa72:	83 ec 0c             	sub    esp,0xc
c000fa75:	89 1d e0 da 02 c0    	mov    DWORD PTR ds:0xc002dae0,ebx
c000fa7b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fa7f:	53                   	push   ebx
c000fa80:	e8 37 21 00 00       	call   c0011bbc <VAS::VAS()>
c000fa85:	89 1d 44 dc 02 c0    	mov    DWORD PTR ds:0xc002dc44,ebx
c000fa8b:	e8 90 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa90:	c7 04 24 db 99 02 c0 	mov    DWORD PTR [esp],0xc00299db
c000fa97:	e8 4b 2e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000fa9c:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000faa3:	e8 70 fb ff ff       	call   c000f618 <malloc>
c000faa8:	89 04 24             	mov    DWORD PTR [esp],eax
c000faab:	89 c6                	mov    esi,eax
c000faad:	e8 60 ea ff ff       	call   c000e512 <Computer::Computer()>
c000fab2:	58                   	pop    eax
c000fab3:	89 35 c8 da 02 c0    	mov    DWORD PTR ds:0xc002dac8,esi
c000fab9:	5a                   	pop    edx
c000faba:	56                   	push   esi
c000fabb:	68 f8 99 02 c0       	push   0xc00299f8
c000fac0:	e8 22 2e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000fac5:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000faca:	8b 10                	mov    edx,DWORD PTR [eax]
c000facc:	6a 00                	push   0x0
c000face:	6a 00                	push   0x0
c000fad0:	6a 00                	push   0x0
c000fad2:	50                   	push   eax
c000fad3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fad6:	83 c4 14             	add    esp,0x14
c000fad9:	53                   	push   ebx
c000fada:	e8 77 23 00 00       	call   c0011e56 <VAS::~VAS()>
c000fadf:	c7 04 24 0b 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a0b
c000fae6:	e8 70 a3 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c000faeb:	83 c4 20             	add    esp,0x20
c000faee:	5b                   	pop    ebx
c000faef:	5e                   	pop    esi
c000faf0:	5f                   	pop    edi
c000faf1:	c3                   	ret    

c000faf2 <Phys::allocateDMA(unsigned long)>:
c000faf2:	55                   	push   ebp
c000faf3:	31 d2                	xor    edx,edx
c000faf5:	57                   	push   edi
c000faf6:	31 ed                	xor    ebp,ebp
c000faf8:	56                   	push   esi
c000faf9:	31 c9                	xor    ecx,ecx
c000fafb:	53                   	push   ebx
c000fafc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb00:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fb06:	31 c0                	xor    eax,eax
c000fb08:	c1 ee 0c             	shr    esi,0xc
c000fb0b:	eb 17                	jmp    c000fb24 <Phys::allocateDMA(unsigned long)+0x32>
c000fb0d:	85 c9                	test   ecx,ecx
c000fb0f:	75 04                	jne    c000fb15 <Phys::allocateDMA(unsigned long)+0x23>
c000fb11:	89 d5                	mov    ebp,edx
c000fb13:	89 d0                	mov    eax,edx
c000fb15:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb18:	39 de                	cmp    esi,ebx
c000fb1a:	74 20                	je     c000fb3c <Phys::allocateDMA(unsigned long)+0x4a>
c000fb1c:	42                   	inc    edx
c000fb1d:	89 d9                	mov    ecx,ebx
c000fb1f:	83 fa 2f             	cmp    edx,0x2f
c000fb22:	7f 11                	jg     c000fb35 <Phys::allocateDMA(unsigned long)+0x43>
c000fb24:	80 ba 20 db 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd24e0],0x0
c000fb2b:	74 e0                	je     c000fb0d <Phys::allocateDMA(unsigned long)+0x1b>
c000fb2d:	31 c9                	xor    ecx,ecx
c000fb2f:	42                   	inc    edx
c000fb30:	83 fa 2f             	cmp    edx,0x2f
c000fb33:	7e ef                	jle    c000fb24 <Phys::allocateDMA(unsigned long)+0x32>
c000fb35:	5b                   	pop    ebx
c000fb36:	31 c0                	xor    eax,eax
c000fb38:	5e                   	pop    esi
c000fb39:	5f                   	pop    edi
c000fb3a:	5d                   	pop    ebp
c000fb3b:	c3                   	ret    
c000fb3c:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb3f:	89 d7                	mov    edi,edx
c000fb41:	4f                   	dec    edi
c000fb42:	79 03                	jns    c000fb47 <Phys::allocateDMA(unsigned long)+0x55>
c000fb44:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb47:	c1 ff 04             	sar    edi,0x4
c000fb4a:	89 c2                	mov    edx,eax
c000fb4c:	c1 fa 04             	sar    edx,0x4
c000fb4f:	39 fa                	cmp    edx,edi
c000fb51:	75 2f                	jne    c000fb82 <Phys::allocateDMA(unsigned long)+0x90>
c000fb53:	85 db                	test   ebx,ebx
c000fb55:	74 1a                	je     c000fb71 <Phys::allocateDMA(unsigned long)+0x7f>
c000fb57:	be 20 db 02 c0       	mov    esi,0xc002db20
c000fb5c:	8d 90 20 db 02 c0    	lea    edx,[eax-0x3ffd24e0]
c000fb62:	f7 d6                	not    esi
c000fb64:	29 c6                	sub    esi,eax
c000fb66:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb69:	42                   	inc    edx
c000fb6a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb6d:	39 d9                	cmp    ecx,ebx
c000fb6f:	7f f5                	jg     c000fb66 <Phys::allocateDMA(unsigned long)+0x74>
c000fb71:	85 ff                	test   edi,edi
c000fb73:	74 13                	je     c000fb88 <Phys::allocateDMA(unsigned long)+0x96>
c000fb75:	5b                   	pop    ebx
c000fb76:	05 50 20 0c 00       	add    eax,0xc2050
c000fb7b:	5e                   	pop    esi
c000fb7c:	c1 e0 0c             	shl    eax,0xc
c000fb7f:	5f                   	pop    edi
c000fb80:	5d                   	pop    ebp
c000fb81:	c3                   	ret    
c000fb82:	89 ea                	mov    edx,ebp
c000fb84:	31 c9                	xor    ecx,ecx
c000fb86:	eb a7                	jmp    c000fb2f <Phys::allocateDMA(unsigned long)+0x3d>
c000fb88:	5b                   	pop    ebx
c000fb89:	c1 e0 0c             	shl    eax,0xc
c000fb8c:	5e                   	pop    esi
c000fb8d:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fb92:	5f                   	pop    edi
c000fb93:	5d                   	pop    ebp
c000fb94:	c3                   	ret    

c000fb95 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fb95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb99:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fb9d:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fba3:	c1 e9 0c             	shr    ecx,0xc
c000fba6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fbab:	76 25                	jbe    c000fbd2 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fbad:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fbb2:	c1 e8 0c             	shr    eax,0xc
c000fbb5:	8d 50 10             	lea    edx,[eax+0x10]
c000fbb8:	85 c9                	test   ecx,ecx
c000fbba:	74 15                	je     c000fbd1 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbbc:	8d 82 20 db 02 c0    	lea    eax,[edx-0x3ffd24e0]
c000fbc2:	8d 94 11 20 db 02 c0 	lea    edx,[ecx+edx*1-0x3ffd24e0]
c000fbc9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbcc:	40                   	inc    eax
c000fbcd:	39 d0                	cmp    eax,edx
c000fbcf:	75 f8                	jne    c000fbc9 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fbd1:	c3                   	ret    
c000fbd2:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fbd8:	c1 ea 0c             	shr    edx,0xc
c000fbdb:	eb db                	jmp    c000fbb8 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fbdd <Phys::setPageState(unsigned long, bool)>:
c000fbdd:	56                   	push   esi
c000fbde:	ba 01 00 00 00       	mov    edx,0x1
c000fbe3:	53                   	push   ebx
c000fbe4:	8b 35 f4 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c9f4
c000fbea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbf2:	89 c8                	mov    eax,ecx
c000fbf4:	83 e1 07             	and    ecx,0x7
c000fbf7:	c1 e8 03             	shr    eax,0x3
c000fbfa:	d3 e3                	shl    ebx,cl
c000fbfc:	01 c6                	add    esi,eax
c000fbfe:	d3 e2                	shl    edx,cl
c000fc00:	f7 d2                	not    edx
c000fc02:	20 16                	and    BYTE PTR [esi],dl
c000fc04:	03 05 f4 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9f4
c000fc0a:	08 18                	or     BYTE PTR [eax],bl
c000fc0c:	5b                   	pop    ebx
c000fc0d:	5e                   	pop    esi
c000fc0e:	c3                   	ret    

c000fc0f <Phys::getPageState(unsigned long)>:
c000fc0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc13:	8b 15 f4 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9f4
c000fc19:	89 c8                	mov    eax,ecx
c000fc1b:	83 e1 07             	and    ecx,0x7
c000fc1e:	c1 e8 03             	shr    eax,0x3
c000fc21:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc25:	d3 f8                	sar    eax,cl
c000fc27:	83 e0 01             	and    eax,0x1
c000fc2a:	c3                   	ret    

c000fc2b <Phys::freePage(unsigned long)>:
c000fc2b:	53                   	push   ebx
c000fc2c:	83 ec 08             	sub    esp,0x8
c000fc2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc33:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fc39:	76 57                	jbe    c000fc92 <Phys::freePage(unsigned long)+0x67>
c000fc3b:	c1 eb 0c             	shr    ebx,0xc
c000fc3e:	53                   	push   ebx
c000fc3f:	e8 cb ff ff ff       	call   c000fc0f <Phys::getPageState(unsigned long)>
c000fc44:	5a                   	pop    edx
c000fc45:	84 c0                	test   al,al
c000fc47:	74 5b                	je     c000fca4 <Phys::freePage(unsigned long)+0x79>
c000fc49:	a1 0c db 02 c0       	mov    eax,ds:0xc002db0c
c000fc4e:	48                   	dec    eax
c000fc4f:	a3 0c db 02 c0       	mov    ds:0xc002db0c,eax
c000fc54:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc57:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc5a:	c1 e0 02             	shl    eax,0x2
c000fc5d:	99                   	cdq    
c000fc5e:	f7 3d 10 db 02 c0    	idiv   DWORD PTR ds:0xc002db10
c000fc64:	39 05 08 db 02 c0    	cmp    DWORD PTR ds:0xc002db08,eax
c000fc6a:	75 13                	jne    c000fc7f <Phys::freePage(unsigned long)+0x54>
c000fc6c:	83 ec 08             	sub    esp,0x8
c000fc6f:	6a 00                	push   0x0
c000fc71:	53                   	push   ebx
c000fc72:	e8 66 ff ff ff       	call   c000fbdd <Phys::setPageState(unsigned long, bool)>
c000fc77:	83 c4 10             	add    esp,0x10
c000fc7a:	83 c4 08             	add    esp,0x8
c000fc7d:	5b                   	pop    ebx
c000fc7e:	c3                   	ret    
c000fc7f:	83 ec 0c             	sub    esp,0xc
c000fc82:	a3 08 db 02 c0       	mov    ds:0xc002db08,eax
c000fc87:	50                   	push   eax
c000fc88:	e8 5b 0a 00 00       	call   c00106e8 <VgaText::updateRAMUsageDisplay(int)>
c000fc8d:	83 c4 10             	add    esp,0x10
c000fc90:	eb da                	jmp    c000fc6c <Phys::freePage(unsigned long)+0x41>
c000fc92:	68 00 10 00 00       	push   0x1000
c000fc97:	53                   	push   ebx
c000fc98:	e8 f8 fe ff ff       	call   c000fb95 <Phys::freeDMA(unsigned long, unsigned long)>
c000fc9d:	59                   	pop    ecx
c000fc9e:	5b                   	pop    ebx
c000fc9f:	83 c4 08             	add    esp,0x8
c000fca2:	5b                   	pop    ebx
c000fca3:	c3                   	ret    
c000fca4:	c7 44 24 10 26 9a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029a26
c000fcac:	83 c4 08             	add    esp,0x8
c000fcaf:	5b                   	pop    ebx
c000fcb0:	e9 a6 a1 00 00       	jmp    c0019e5b <Krnl::panic(char const*)>

c000fcb5 <Phys::allocatePage()>:
c000fcb5:	56                   	push   esi
c000fcb6:	53                   	push   ebx
c000fcb7:	51                   	push   ecx
c000fcb8:	8b 35 00 db 02 c0    	mov    esi,DWORD PTR ds:0xc002db00
c000fcbe:	89 f3                	mov    ebx,esi
c000fcc0:	eb 0a                	jmp    c000fccc <Phys::allocatePage()+0x17>
c000fcc2:	89 1d 00 db 02 c0    	mov    DWORD PTR ds:0xc002db00,ebx
c000fcc8:	39 de                	cmp    esi,ebx
c000fcca:	74 24                	je     c000fcf0 <Phys::allocatePage()+0x3b>
c000fccc:	53                   	push   ebx
c000fccd:	e8 3d ff ff ff       	call   c000fc0f <Phys::getPageState(unsigned long)>
c000fcd2:	5a                   	pop    edx
c000fcd3:	84 c0                	test   al,al
c000fcd5:	74 5a                	je     c000fd31 <Phys::allocatePage()+0x7c>
c000fcd7:	43                   	inc    ebx
c000fcd8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fcde:	75 e2                	jne    c000fcc2 <Phys::allocatePage()+0xd>
c000fce0:	31 db                	xor    ebx,ebx
c000fce2:	c7 05 00 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db00,0x0
c000fcec:	39 de                	cmp    esi,ebx
c000fcee:	75 dc                	jne    c000fccc <Phys::allocatePage()+0x17>
c000fcf0:	83 ec 0c             	sub    esp,0xc
c000fcf3:	68 3c 9a 02 c0       	push   0xc0029a3c
c000fcf8:	e8 ea 2b 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000fcfd:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fd04:	e8 e9 fd ff ff       	call   c000faf2 <Phys::allocateDMA(unsigned long)>
c000fd09:	83 c4 10             	add    esp,0x10
c000fd0c:	85 c0                	test   eax,eax
c000fd0e:	75 56                	jne    c000fd66 <Phys::allocatePage()+0xb1>
c000fd10:	83 ec 0c             	sub    esp,0xc
c000fd13:	68 4d 9a 02 c0       	push   0xc0029a4d
c000fd18:	e8 3e a1 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c000fd1d:	83 c4 10             	add    esp,0x10
c000fd20:	8b 1d 00 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db00
c000fd26:	53                   	push   ebx
c000fd27:	e8 e3 fe ff ff       	call   c000fc0f <Phys::getPageState(unsigned long)>
c000fd2c:	5a                   	pop    edx
c000fd2d:	84 c0                	test   al,al
c000fd2f:	75 a6                	jne    c000fcd7 <Phys::allocatePage()+0x22>
c000fd31:	6a 01                	push   0x1
c000fd33:	53                   	push   ebx
c000fd34:	e8 a4 fe ff ff       	call   c000fbdd <Phys::setPageState(unsigned long, bool)>
c000fd39:	a1 0c db 02 c0       	mov    eax,ds:0xc002db0c
c000fd3e:	59                   	pop    ecx
c000fd3f:	40                   	inc    eax
c000fd40:	5b                   	pop    ebx
c000fd41:	a3 0c db 02 c0       	mov    ds:0xc002db0c,eax
c000fd46:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd49:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd4c:	c1 e0 02             	shl    eax,0x2
c000fd4f:	99                   	cdq    
c000fd50:	f7 3d 10 db 02 c0    	idiv   DWORD PTR ds:0xc002db10
c000fd56:	39 05 08 db 02 c0    	cmp    DWORD PTR ds:0xc002db08,eax
c000fd5c:	75 0c                	jne    c000fd6a <Phys::allocatePage()+0xb5>
c000fd5e:	a1 00 db 02 c0       	mov    eax,ds:0xc002db00
c000fd63:	c1 e0 0c             	shl    eax,0xc
c000fd66:	5a                   	pop    edx
c000fd67:	5b                   	pop    ebx
c000fd68:	5e                   	pop    esi
c000fd69:	c3                   	ret    
c000fd6a:	83 ec 0c             	sub    esp,0xc
c000fd6d:	a3 08 db 02 c0       	mov    ds:0xc002db08,eax
c000fd72:	50                   	push   eax
c000fd73:	e8 70 09 00 00       	call   c00106e8 <VgaText::updateRAMUsageDisplay(int)>
c000fd78:	83 c4 10             	add    esp,0x10
c000fd7b:	eb e1                	jmp    c000fd5e <Phys::allocatePage()+0xa9>

c000fd7d <Phys::allocateContiguousPages(int)>:
c000fd7d:	57                   	push   edi
c000fd7e:	56                   	push   esi
c000fd7f:	53                   	push   ebx
c000fd80:	31 db                	xor    ebx,ebx
c000fd82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fd86:	e8 2b d7 00 00       	call   c001d4b6 <lockScheduler()>
c000fd8b:	85 db                	test   ebx,ebx
c000fd8d:	75 11                	jne    c000fda0 <Phys::allocateContiguousPages(int)+0x23>
c000fd8f:	e8 21 ff ff ff       	call   c000fcb5 <Phys::allocatePage()>
c000fd94:	83 ff 01             	cmp    edi,0x1
c000fd97:	89 c6                	mov    esi,eax
c000fd99:	74 21                	je     c000fdbc <Phys::allocateContiguousPages(int)+0x3f>
c000fd9b:	bb 01 00 00 00       	mov    ebx,0x1
c000fda0:	e8 10 ff ff ff       	call   c000fcb5 <Phys::allocatePage()>
c000fda5:	89 da                	mov    edx,ebx
c000fda7:	c1 e2 0c             	shl    edx,0xc
c000fdaa:	01 f2                	add    edx,esi
c000fdac:	39 c2                	cmp    edx,eax
c000fdae:	74 17                	je     c000fdc7 <Phys::allocateContiguousPages(int)+0x4a>
c000fdb0:	bb 01 00 00 00       	mov    ebx,0x1
c000fdb5:	89 c6                	mov    esi,eax
c000fdb7:	83 ff 01             	cmp    edi,0x1
c000fdba:	75 e4                	jne    c000fda0 <Phys::allocateContiguousPages(int)+0x23>
c000fdbc:	e8 f7 d6 00 00       	call   c001d4b8 <unlockScheduler()>
c000fdc1:	89 f0                	mov    eax,esi
c000fdc3:	5b                   	pop    ebx
c000fdc4:	5e                   	pop    esi
c000fdc5:	5f                   	pop    edi
c000fdc6:	c3                   	ret    
c000fdc7:	43                   	inc    ebx
c000fdc8:	39 fb                	cmp    ebx,edi
c000fdca:	75 bf                	jne    c000fd8b <Phys::allocateContiguousPages(int)+0xe>
c000fdcc:	e8 e7 d6 00 00       	call   c001d4b8 <unlockScheduler()>
c000fdd1:	89 f0                	mov    eax,esi
c000fdd3:	5b                   	pop    ebx
c000fdd4:	5e                   	pop    esi
c000fdd5:	5f                   	pop    edi
c000fdd6:	c3                   	ret    

c000fdd7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fdd7:	56                   	push   esi
c000fdd8:	53                   	push   ebx
c000fdd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fddd:	39 1d 04 db 02 c0    	cmp    DWORD PTR ds:0xc002db04,ebx
c000fde3:	73 06                	jae    c000fdeb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fde5:	89 1d 04 db 02 c0    	mov    DWORD PTR ds:0xc002db04,ebx
c000fdeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdef:	c1 eb 0c             	shr    ebx,0xc
c000fdf2:	c1 e8 0c             	shr    eax,0xc
c000fdf5:	39 d8                	cmp    eax,ebx
c000fdf7:	73 13                	jae    c000fe0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fdf9:	6a 00                	push   0x0
c000fdfb:	8d 70 01             	lea    esi,[eax+0x1]
c000fdfe:	50                   	push   eax
c000fdff:	e8 d9 fd ff ff       	call   c000fbdd <Phys::setPageState(unsigned long, bool)>
c000fe04:	5a                   	pop    edx
c000fe05:	89 f0                	mov    eax,esi
c000fe07:	59                   	pop    ecx
c000fe08:	39 f3                	cmp    ebx,esi
c000fe0a:	75 ed                	jne    c000fdf9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fe0c:	5b                   	pop    ebx
c000fe0d:	5e                   	pop    esi
c000fe0e:	c3                   	ret    

c000fe0f <Phys::physicalMemorySetup(unsigned int)>:
c000fe0f:	55                   	push   ebp
c000fe10:	57                   	push   edi
c000fe11:	56                   	push   esi
c000fe12:	53                   	push   ebx
c000fe13:	31 db                	xor    ebx,ebx
c000fe15:	83 ec 40             	sub    esp,0x40
c000fe18:	6a 30                	push   0x30
c000fe1a:	6a 00                	push   0x0
c000fe1c:	68 20 db 02 c0       	push   0xc002db20
c000fe21:	e8 92 08 ff ff       	call   c00006b8 <memset>
c000fe26:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe2a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe2f:	05 00 10 00 00       	add    eax,0x1000
c000fe34:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe38:	83 c4 10             	add    esp,0x10
c000fe3b:	83 ec 08             	sub    esp,0x8
c000fe3e:	6a 01                	push   0x1
c000fe40:	53                   	push   ebx
c000fe41:	43                   	inc    ebx
c000fe42:	e8 96 fd ff ff       	call   c000fbdd <Phys::setPageState(unsigned long, bool)>
c000fe47:	83 c4 10             	add    esp,0x10
c000fe4a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe50:	75 e9                	jne    c000fe3b <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe52:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe59:	66 85 c0             	test   ax,ax
c000fe5c:	0f 84 8e 01 00 00    	je     c000fff0 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe62:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe66:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe6e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe72:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe7b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe83:	eb 15                	jmp    c000fe9a <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe85:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe89:	83 c3 18             	add    ebx,0x18
c000fe8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe90:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe94:	0f 84 66 01 00 00    	je     c0010000 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe9a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe9d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fea0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fea3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fea7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000feab:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fead:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000feb0:	01 f0                	add    eax,esi
c000feb2:	55                   	push   ebp
c000feb3:	11 fa                	adc    edx,edi
c000feb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000feb9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000febd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fec1:	56                   	push   esi
c000fec2:	68 88 9a 02 c0       	push   0xc0029a88
c000fec7:	e8 1b 2a 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000fecc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fed0:	83 c4 10             	add    esp,0x10
c000fed3:	09 f8                	or     eax,edi
c000fed5:	0f 85 25 01 00 00    	jne    c0010000 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fedb:	4d                   	dec    ebp
c000fedc:	75 a7                	jne    c000fe85 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fede:	ba 00 00 08 00       	mov    edx,0x80000
c000fee3:	89 c1                	mov    ecx,eax
c000fee5:	39 f2                	cmp    edx,esi
c000fee7:	19 f9                	sbb    ecx,edi
c000fee9:	0f 82 a7 00 00 00    	jb     c000ff96 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000feef:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fef3:	89 c1                	mov    ecx,eax
c000fef5:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fef9:	0f 83 97 00 00 00    	jae    c000ff96 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000feff:	ba 00 00 0a 00       	mov    edx,0xa0000
c000ff04:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff08:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff0c:	39 fa                	cmp    edx,edi
c000ff0e:	19 e8                	sbb    eax,ebp
c000ff10:	0f 82 14 01 00 00    	jb     c001002a <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000ff16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff1a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff1e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff24:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff29:	83 d5 ff             	adc    ebp,0xffffffff
c000ff2c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff30:	31 c0                	xor    eax,eax
c000ff32:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff36:	39 fa                	cmp    edx,edi
c000ff38:	89 c1                	mov    ecx,eax
c000ff3a:	19 e9                	sbb    ecx,ebp
c000ff3c:	0f 83 43 ff ff ff    	jae    c000fe85 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff42:	be 00 00 08 00       	mov    esi,0x80000
c000ff47:	50                   	push   eax
c000ff48:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff4c:	57                   	push   edi
c000ff4d:	56                   	push   esi
c000ff4e:	68 ac 9a 02 c0       	push   0xc0029aac
c000ff53:	e8 8f 29 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000ff58:	5a                   	pop    edx
c000ff59:	59                   	pop    ecx
c000ff5a:	57                   	push   edi
c000ff5b:	56                   	push   esi
c000ff5c:	e8 76 fe ff ff       	call   c000fdd7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff61:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff69:	83 c4 0c             	add    esp,0xc
c000ff6c:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff70:	03 05 10 db 02 c0    	add    eax,DWORD PTR ds:0xc002db10
c000ff76:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff7d:	a3 10 db 02 c0       	mov    ds:0xc002db10,eax
c000ff82:	52                   	push   edx
c000ff83:	50                   	push   eax
c000ff84:	68 69 9a 02 c0       	push   0xc0029a69
c000ff89:	e8 59 29 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c000ff8e:	83 c4 10             	add    esp,0x10
c000ff91:	e9 ef fe ff ff       	jmp    c000fe85 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff96:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffa2:	39 ea                	cmp    edx,ebp
c000ffa4:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ffa8:	0f 82 d7 fe ff ff    	jb     c000fe85 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffae:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ffb3:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ffb7:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ffbb:	0f 83 c4 fe ff ff    	jae    c000fe85 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffc1:	39 ee                	cmp    esi,ebp
c000ffc3:	89 f8                	mov    eax,edi
c000ffc5:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffc9:	0f 83 78 ff ff ff    	jae    c000ff47 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffd7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffdb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffdf:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffe3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffe7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffeb:	e9 57 ff ff ff       	jmp    c000ff47 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fff0:	83 ec 0c             	sub    esp,0xc
c000fff3:	68 5b 9a 02 c0       	push   0xc0029a5b
c000fff8:	e8 5e 9e 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	bb 40 01 00 00       	mov    ebx,0x140
c0010005:	83 ec 08             	sub    esp,0x8
c0010008:	6a 00                	push   0x0
c001000a:	53                   	push   ebx
c001000b:	43                   	inc    ebx
c001000c:	e8 cc fb ff ff       	call   c000fbdd <Phys::setPageState(unsigned long, bool)>
c0010011:	ff 05 10 db 02 c0    	inc    DWORD PTR ds:0xc002db10
c0010017:	83 c4 10             	add    esp,0x10
c001001a:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010020:	75 e3                	jne    c0010005 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010022:	83 c4 3c             	add    esp,0x3c
c0010025:	5b                   	pop    ebx
c0010026:	5e                   	pop    esi
c0010027:	5f                   	pop    edi
c0010028:	5d                   	pop    ebp
c0010029:	c3                   	ret    
c001002a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010032:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001003a:	e9 d7 fe ff ff       	jmp    c000ff16 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001003f:	90                   	nop

c0010040 <Pipe::isAtty()>:
c0010040:	31 c0                	xor    eax,eax
c0010042:	c3                   	ret    
c0010043:	90                   	nop

c0010044 <Pipe::~Pipe()>:
c0010044:	83 ec 0c             	sub    esp,0xc
c0010047:	ba 18 9b 02 c0       	mov    edx,0xc0029b18
c001004c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010050:	89 10                	mov    DWORD PTR [eax],edx
c0010052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010056:	83 ec 0c             	sub    esp,0xc
c0010059:	50                   	push   eax
c001005a:	e8 37 16 00 00       	call   c0011696 <UnixFile::~UnixFile()>
c001005f:	83 c4 10             	add    esp,0x10
c0010062:	90                   	nop
c0010063:	83 c4 0c             	add    esp,0xc
c0010066:	c3                   	ret    
c0010067:	90                   	nop

c0010068 <Pipe::~Pipe()>:
c0010068:	83 ec 0c             	sub    esp,0xc
c001006b:	83 ec 0c             	sub    esp,0xc
c001006e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010072:	e8 cd ff ff ff       	call   c0010044 <Pipe::~Pipe()>
c0010077:	83 c4 10             	add    esp,0x10
c001007a:	83 ec 08             	sub    esp,0x8
c001007d:	6a 20                	push   0x20
c001007f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010083:	e8 7f 27 00 00       	call   c0012807 <operator delete(void*, unsigned long)>
c0010088:	83 c4 10             	add    esp,0x10
c001008b:	83 c4 0c             	add    esp,0xc
c001008e:	c3                   	ret    
c001008f:	90                   	nop

c0010090 <Pipe::read(unsigned long long, void*, int*)>:
c0010090:	55                   	push   ebp
c0010091:	57                   	push   edi
c0010092:	56                   	push   esi
c0010093:	53                   	push   ebx
c0010094:	83 ec 1c             	sub    esp,0x1c
c0010097:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001009b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001009f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00100a3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00100a6:	89 c8                	mov    eax,ecx
c00100a8:	99                   	cdq    
c00100a9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00100ad:	74 19                	je     c00100c8 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100af:	39 f9                	cmp    ecx,edi
c00100b1:	89 d1                	mov    ecx,edx
c00100b3:	19 f1                	sbb    ecx,esi
c00100b5:	73 11                	jae    c00100c8 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100b7:	e8 fa d3 00 00       	call   c001d4b6 <lockScheduler()>
c00100bc:	e8 31 d7 00 00       	call   c001d7f2 <schedule()>
c00100c1:	e8 f2 d3 00 00       	call   c001d4b8 <unlockScheduler()>
c00100c6:	eb db                	jmp    c00100a3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100c8:	39 f8                	cmp    eax,edi
c00100ca:	89 d1                	mov    ecx,edx
c00100cc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00100d0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00100d4:	19 f1                	sbb    ecx,esi
c00100d6:	73 08                	jae    c00100e0 <Pipe::read(unsigned long long, void*, int*)+0x50>
c00100d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00100e0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100e3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100e6:	29 c6                	sub    esi,eax
c00100e8:	89 f1                	mov    ecx,esi
c00100ea:	c1 f9 1f             	sar    ecx,0x1f
c00100ed:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00100f1:	89 ca                	mov    edx,ecx
c00100f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100f7:	19 d1                	sbb    ecx,edx
c00100f9:	73 04                	jae    c00100ff <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00100fb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00100ff:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010103:	89 fd                	mov    ebp,edi
c0010105:	29 f5                	sub    ebp,esi
c0010107:	85 f6                	test   esi,esi
c0010109:	74 12                	je     c001011d <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001010b:	52                   	push   edx
c001010c:	56                   	push   esi
c001010d:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010110:	50                   	push   eax
c0010111:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010115:	e8 86 05 ff ff       	call   c00006a0 <memcpy>
c001011a:	83 c4 10             	add    esp,0x10
c001011d:	85 ed                	test   ebp,ebp
c001011f:	74 12                	je     c0010133 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010121:	50                   	push   eax
c0010122:	55                   	push   ebp
c0010123:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010126:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001012a:	56                   	push   esi
c001012b:	e8 70 05 ff ff       	call   c00006a0 <memcpy>
c0010130:	83 c4 10             	add    esp,0x10
c0010133:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010136:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010139:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001013c:	99                   	cdq    
c001013d:	89 f7                	mov    edi,esi
c001013f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010143:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010147:	c1 ff 1f             	sar    edi,0x1f
c001014a:	57                   	push   edi
c001014b:	56                   	push   esi
c001014c:	52                   	push   edx
c001014d:	50                   	push   eax
c001014e:	e8 f9 60 01 00       	call   c002624c <__umoddi3>
c0010153:	83 c4 10             	add    esp,0x10
c0010156:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010159:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001015e:	75 10                	jne    c0010170 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010160:	83 ec 0c             	sub    esp,0xc
c0010163:	68 d5 9a 02 c0       	push   0xc0029ad5
c0010168:	e8 ee 9c 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c001016d:	83 c4 10             	add    esp,0x10
c0010170:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010174:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010178:	89 10                	mov    DWORD PTR [eax],edx
c001017a:	83 c4 1c             	add    esp,0x1c
c001017d:	31 c0                	xor    eax,eax
c001017f:	5b                   	pop    ebx
c0010180:	5e                   	pop    esi
c0010181:	5f                   	pop    edi
c0010182:	5d                   	pop    ebp
c0010183:	c3                   	ret    

c0010184 <Pipe::write(unsigned long long, void*, int*)>:
c0010184:	55                   	push   ebp
c0010185:	57                   	push   edi
c0010186:	56                   	push   esi
c0010187:	53                   	push   ebx
c0010188:	83 ec 1c             	sub    esp,0x1c
c001018b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001018f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010193:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010197:	89 04 24             	mov    DWORD PTR [esp],eax
c001019a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001019d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00101a0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00101a4:	89 de                	mov    esi,ebx
c00101a6:	89 df                	mov    edi,ebx
c00101a8:	c1 ff 1f             	sar    edi,0x1f
c00101ab:	01 c6                	add    esi,eax
c00101ad:	89 c8                	mov    eax,ecx
c00101af:	11 d7                	adc    edi,edx
c00101b1:	99                   	cdq    
c00101b2:	39 f1                	cmp    ecx,esi
c00101b4:	89 d0                	mov    eax,edx
c00101b6:	19 f8                	sbb    eax,edi
c00101b8:	b8 01 00 00 00       	mov    eax,0x1
c00101bd:	0f 82 80 00 00 00    	jb     c0010243 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00101c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101c6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00101c9:	01 d8                	add    eax,ebx
c00101cb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00101cf:	99                   	cdq    
c00101d0:	f7 f9                	idiv   ecx
c00101d2:	29 d1                	sub    ecx,edx
c00101d4:	89 d7                	mov    edi,edx
c00101d6:	89 c8                	mov    eax,ecx
c00101d8:	99                   	cdq    
c00101d9:	39 ce                	cmp    esi,ecx
c00101db:	19 d3                	sbb    ebx,edx
c00101dd:	bb 00 00 00 00       	mov    ebx,0x0
c00101e2:	72 04                	jb     c00101e8 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00101e4:	89 f3                	mov    ebx,esi
c00101e6:	29 cb                	sub    ebx,ecx
c00101e8:	89 f1                	mov    ecx,esi
c00101ea:	29 d9                	sub    ecx,ebx
c00101ec:	74 1a                	je     c0010208 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00101ee:	52                   	push   edx
c00101ef:	51                   	push   ecx
c00101f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00101f8:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101fb:	57                   	push   edi
c00101fc:	e8 9f 04 ff ff       	call   c00006a0 <memcpy>
c0010201:	83 c4 10             	add    esp,0x10
c0010204:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010208:	85 db                	test   ebx,ebx
c001020a:	74 12                	je     c001021e <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001020c:	50                   	push   eax
c001020d:	53                   	push   ebx
c001020e:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010212:	51                   	push   ecx
c0010213:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010216:	e8 85 04 ff ff       	call   c00006a0 <memcpy>
c001021b:	83 c4 10             	add    esp,0x10
c001021e:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010221:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010226:	75 10                	jne    c0010238 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010228:	83 ec 0c             	sub    esp,0xc
c001022b:	68 f1 9a 02 c0       	push   0xc0029af1
c0010230:	e8 26 9c 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0010235:	83 c4 10             	add    esp,0x10
c0010238:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001023c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001023f:	89 38                	mov    DWORD PTR [eax],edi
c0010241:	31 c0                	xor    eax,eax
c0010243:	83 c4 1c             	add    esp,0x1c
c0010246:	5b                   	pop    ebx
c0010247:	5e                   	pop    esi
c0010248:	5f                   	pop    edi
c0010249:	5d                   	pop    ebp
c001024a:	c3                   	ret    
c001024b:	90                   	nop

c001024c <Pipe::Pipe(int)>:
c001024c:	83 ec 0c             	sub    esp,0xc
c001024f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010253:	83 ec 08             	sub    esp,0x8
c0010256:	6a 00                	push   0x0
c0010258:	50                   	push   eax
c0010259:	e8 56 12 00 00       	call   c00114b4 <UnixFile::UnixFile(int)>
c001025e:	83 c4 10             	add    esp,0x10
c0010261:	ba 18 9b 02 c0       	mov    edx,0xc0029b18
c0010266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026a:	89 10                	mov    DWORD PTR [eax],edx
c001026c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010270:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010274:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010286:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001028d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010291:	83 ec 0c             	sub    esp,0xc
c0010294:	50                   	push   eax
c0010295:	e8 7e f3 ff ff       	call   c000f618 <malloc>
c001029a:	83 c4 10             	add    esp,0x10
c001029d:	89 c2                	mov    edx,eax
c001029f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00102a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102aa:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00102ae:	90                   	nop
c00102af:	83 c4 0c             	add    esp,0xc
c00102b2:	c3                   	ret    
c00102b3:	90                   	nop

c00102b4 <VgaText::isAtty()>:
c00102b4:	b0 01                	mov    al,0x1
c00102b6:	c3                   	ret    
c00102b7:	90                   	nop

c00102b8 <VgaText::~VgaText()>:
c00102b8:	83 ec 0c             	sub    esp,0xc
c00102bb:	ba d4 9b 02 c0       	mov    edx,0xc0029bd4
c00102c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102c4:	89 10                	mov    DWORD PTR [eax],edx
c00102c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ca:	83 ec 0c             	sub    esp,0xc
c00102cd:	50                   	push   eax
c00102ce:	e8 c3 13 00 00       	call   c0011696 <UnixFile::~UnixFile()>
c00102d3:	83 c4 10             	add    esp,0x10
c00102d6:	90                   	nop
c00102d7:	83 c4 0c             	add    esp,0xc
c00102da:	c3                   	ret    
c00102db:	90                   	nop

c00102dc <VgaText::~VgaText()>:
c00102dc:	83 ec 0c             	sub    esp,0xc
c00102df:	83 ec 0c             	sub    esp,0xc
c00102e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e6:	e8 cd ff ff ff       	call   c00102b8 <VgaText::~VgaText()>
c00102eb:	83 c4 10             	add    esp,0x10
c00102ee:	83 ec 08             	sub    esp,0x8
c00102f1:	68 60 12 00 00       	push   0x1260
c00102f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fa:	e8 08 25 00 00       	call   c0012807 <operator delete(void*, unsigned long)>
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	83 c4 0c             	add    esp,0xc
c0010305:	c3                   	ret    

c0010306 <VgaText::read(unsigned long long, void*, int*)>:
c0010306:	83 ec 10             	sub    esp,0x10
c0010309:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001030d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010315:	e8 1d 59 00 00       	call   c0015c37 <readKeyboard(VgaText*, char*, unsigned long)>
c001031a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001031e:	89 02                	mov    DWORD PTR [edx],eax
c0010320:	31 c0                	xor    eax,eax
c0010322:	83 c4 1c             	add    esp,0x1c
c0010325:	c3                   	ret    

c0010326 <setTerminalScrollLock(bool)>:
c0010326:	c3                   	ret    

c0010327 <addToTerminalCycle(VgaText*)>:
c0010327:	8b 15 a0 db 02 c0    	mov    edx,DWORD PTR ds:0xc002dba0
c001032d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010331:	85 d2                	test   edx,edx
c0010333:	75 0c                	jne    c0010341 <addToTerminalCycle(VgaText*)+0x1a>
c0010335:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001033b:	a3 a0 db 02 c0       	mov    ds:0xc002dba0,eax
c0010340:	c3                   	ret    
c0010341:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010347:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c001034d:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010353:	c3                   	ret    

c0010354 <installVgaTextImplementation()>:
c0010354:	83 ec 10             	sub    esp,0x10
c0010357:	6a 20                	push   0x20
c0010359:	6a 00                	push   0x0
c001035b:	68 80 db 02 c0       	push   0xc002db80
c0010360:	e8 53 03 ff ff       	call   c00006b8 <memset>
c0010365:	83 c4 1c             	add    esp,0x1c
c0010368:	c3                   	ret    

c0010369 <scrollTerminalScrollLock(int)>:
c0010369:	c3                   	ret    

c001036a <VgaText::load()>:
c001036a:	53                   	push   ebx
c001036b:	31 c0                	xor    eax,eax
c001036d:	83 ec 58             	sub    esp,0x58
c0010370:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010374:	89 e2                	mov    edx,esp
c0010376:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001037a:	40                   	inc    eax
c001037b:	83 f8 50             	cmp    eax,0x50
c001037e:	75 f6                	jne    c0010376 <VgaText::load()+0xc>
c0010380:	31 c0                	xor    eax,eax
c0010382:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010389:	84 c9                	test   cl,cl
c001038b:	74 06                	je     c0010393 <VgaText::load()+0x29>
c001038d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010390:	40                   	inc    eax
c0010391:	eb ef                	jmp    c0010382 <VgaText::load()+0x18>
c0010393:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010399:	85 c0                	test   eax,eax
c001039b:	74 09                	je     c00103a6 <VgaText::load()+0x3c>
c001039d:	51                   	push   ecx
c001039e:	51                   	push   ecx
c001039f:	52                   	push   edx
c00103a0:	53                   	push   ebx
c00103a1:	ff d0                	call   eax
c00103a3:	83 c4 10             	add    esp,0x10
c00103a6:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00103ac:	85 c0                	test   eax,eax
c00103ae:	74 09                	je     c00103b9 <VgaText::load()+0x4f>
c00103b0:	83 ec 0c             	sub    esp,0xc
c00103b3:	53                   	push   ebx
c00103b4:	ff d0                	call   eax
c00103b6:	83 c4 10             	add    esp,0x10
c00103b9:	83 c4 58             	add    esp,0x58
c00103bc:	5b                   	pop    ebx
c00103bd:	c3                   	ret    

c00103be <VgaText::updateCursor()>:
c00103be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103c2:	39 05 a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,eax
c00103c8:	75 0c                	jne    c00103d6 <VgaText::updateCursor()+0x18>
c00103ca:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00103d0:	85 c0                	test   eax,eax
c00103d2:	74 02                	je     c00103d6 <VgaText::updateCursor()+0x18>
c00103d4:	ff e0                	jmp    eax
c00103d6:	c3                   	ret    
c00103d7:	90                   	nop

c00103d8 <VgaText::showCursor(bool)>:
c00103d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103e0:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00103e6:	c3                   	ret    
c00103e7:	90                   	nop

c00103e8 <VgaText::disableBlink(bool)>:
c00103e8:	56                   	push   esi
c00103e9:	53                   	push   ebx
c00103ea:	51                   	push   ecx
c00103eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103f3:	39 1d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ebx
c00103f9:	75 18                	jne    c0010413 <VgaText::disableBlink(bool)+0x2b>
c00103fb:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010401:	85 c0                	test   eax,eax
c0010403:	74 0e                	je     c0010413 <VgaText::disableBlink(bool)+0x2b>
c0010405:	89 f1                	mov    ecx,esi
c0010407:	52                   	push   edx
c0010408:	52                   	push   edx
c0010409:	0f b6 d1             	movzx  edx,cl
c001040c:	52                   	push   edx
c001040d:	53                   	push   ebx
c001040e:	ff d0                	call   eax
c0010410:	83 c4 10             	add    esp,0x10
c0010413:	89 f0                	mov    eax,esi
c0010415:	83 f0 01             	xor    eax,0x1
c0010418:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001041e:	58                   	pop    eax
c001041f:	5b                   	pop    ebx
c0010420:	5e                   	pop    esi
c0010421:	c3                   	ret    

c0010422 <VgaText::doANSI_SGR(int)>:
c0010422:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001042a:	85 d2                	test   edx,edx
c001042c:	75 14                	jne    c0010442 <VgaText::doANSI_SGR(int)+0x20>
c001042e:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010434:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001043a:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010440:	eb 65                	jmp    c00104a7 <VgaText::doANSI_SGR(int)+0x85>
c0010442:	83 fa 07             	cmp    edx,0x7
c0010445:	75 14                	jne    c001045b <VgaText::doANSI_SGR(int)+0x39>
c0010447:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001044d:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010453:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010459:	eb 4c                	jmp    c00104a7 <VgaText::doANSI_SGR(int)+0x85>
c001045b:	83 fa 1b             	cmp    edx,0x1b
c001045e:	74 ce                	je     c001042e <VgaText::doANSI_SGR(int)+0xc>
c0010460:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010463:	83 f9 07             	cmp    ecx,0x7
c0010466:	77 09                	ja     c0010471 <VgaText::doANSI_SGR(int)+0x4f>
c0010468:	8b 14 8d 20 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd35e0]
c001046f:	eb 20                	jmp    c0010491 <VgaText::doANSI_SGR(int)+0x6f>
c0010471:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010474:	83 f9 07             	cmp    ecx,0x7
c0010477:	77 09                	ja     c0010482 <VgaText::doANSI_SGR(int)+0x60>
c0010479:	8b 14 8d 20 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd35e0]
c0010480:	eb 25                	jmp    c00104a7 <VgaText::doANSI_SGR(int)+0x85>
c0010482:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010485:	83 f9 07             	cmp    ecx,0x7
c0010488:	77 0e                	ja     c0010498 <VgaText::doANSI_SGR(int)+0x76>
c001048a:	8b 14 95 d8 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3728]
c0010491:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010497:	c3                   	ret    
c0010498:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001049b:	83 f9 07             	cmp    ecx,0x7
c001049e:	77 0d                	ja     c00104ad <VgaText::doANSI_SGR(int)+0x8b>
c00104a0:	8b 14 95 b0 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3750]
c00104a7:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104ad:	c3                   	ret    

c00104ae <VgaText::setDefaultBgColour(VgaColour)>:
c00104ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104b6:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00104bc:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104c2:	c3                   	ret    
c00104c3:	90                   	nop

c00104c4 <VgaText::setDefaultFgColour(VgaColour)>:
c00104c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104cc:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00104d2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104d8:	c3                   	ret    
c00104d9:	90                   	nop

c00104da <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00104da:	53                   	push   ebx
c00104db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104df:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00104e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104e7:	51                   	push   ecx
c00104e8:	e8 c1 ff ff ff       	call   c00104ae <VgaText::setDefaultBgColour(VgaColour)>
c00104ed:	58                   	pop    eax
c00104ee:	5a                   	pop    edx
c00104ef:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00104f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00104f7:	5b                   	pop    ebx
c00104f8:	eb ca                	jmp    c00104c4 <VgaText::setDefaultFgColour(VgaColour)>

c00104fa <VgaText::combineColours(unsigned char, unsigned char)>:
c00104fa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00104fe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010503:	83 e0 0f             	and    eax,0xf
c0010506:	c1 e2 04             	shl    edx,0x4
c0010509:	09 d0                	or     eax,edx
c001050b:	c3                   	ret    

c001050c <VgaText::scrollScreen()>:
c001050c:	57                   	push   edi
c001050d:	56                   	push   esi
c001050e:	be 01 00 00 00       	mov    esi,0x1
c0010513:	53                   	push   ebx
c0010514:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010518:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001051e:	31 ff                	xor    edi,edi
c0010520:	01 d9                	add    ecx,ebx
c0010522:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010525:	83 fe 17             	cmp    esi,0x17
c0010528:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001052e:	75 28                	jne    c0010558 <VgaText::scrollScreen()+0x4c>
c0010530:	f7 c7 01 00 00 00    	test   edi,0x1
c0010536:	74 1c                	je     c0010554 <VgaText::scrollScreen()+0x48>
c0010538:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001053f:	50                   	push   eax
c0010540:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010547:	50                   	push   eax
c0010548:	e8 ad ff ff ff       	call   c00104fa <VgaText::combineColours(unsigned char, unsigned char)>
c001054d:	5a                   	pop    edx
c001054e:	5a                   	pop    edx
c001054f:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010552:	eb 04                	jmp    c0010558 <VgaText::scrollScreen()+0x4c>
c0010554:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010558:	47                   	inc    edi
c0010559:	41                   	inc    ecx
c001055a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010560:	75 c0                	jne    c0010522 <VgaText::scrollScreen()+0x16>
c0010562:	46                   	inc    esi
c0010563:	83 fe 18             	cmp    esi,0x18
c0010566:	75 b0                	jne    c0010518 <VgaText::scrollScreen()+0xc>
c0010568:	39 1d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ebx
c001056e:	75 24                	jne    c0010594 <VgaText::scrollScreen()+0x88>
c0010570:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010577:	74 08                	je     c0010581 <VgaText::scrollScreen()+0x75>
c0010579:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001057f:	eb 13                	jmp    c0010594 <VgaText::scrollScreen()+0x88>
c0010581:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010587:	85 c0                	test   eax,eax
c0010589:	74 09                	je     c0010594 <VgaText::scrollScreen()+0x88>
c001058b:	83 ec 0c             	sub    esp,0xc
c001058e:	53                   	push   ebx
c001058f:	ff d0                	call   eax
c0010591:	83 c4 10             	add    esp,0x10
c0010594:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010598:	5b                   	pop    ebx
c0010599:	5e                   	pop    esi
c001059a:	5f                   	pop    edi
c001059b:	e9 1e fe ff ff       	jmp    c00103be <VgaText::updateCursor()>

c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>:
c00105a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00105a5:	c1 e0 08             	shl    eax,0x8
c00105a8:	89 c2                	mov    edx,eax
c00105aa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00105af:	09 d0                	or     eax,edx
c00105b1:	c3                   	ret    

c00105b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00105b2:	53                   	push   ebx
c00105b3:	83 ec 08             	sub    esp,0x8
c00105b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105ba:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105bf:	50                   	push   eax
c00105c0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105c5:	50                   	push   eax
c00105c6:	e8 2f ff ff ff       	call   c00104fa <VgaText::combineColours(unsigned char, unsigned char)>
c00105cb:	5a                   	pop    edx
c00105cc:	0f b6 c0             	movzx  eax,al
c00105cf:	5b                   	pop    ebx
c00105d0:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105d5:	50                   	push   eax
c00105d6:	53                   	push   ebx
c00105d7:	e8 c4 ff ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00105dc:	5a                   	pop    edx
c00105dd:	5a                   	pop    edx
c00105de:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00105e4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00105e8:	0f b7 d2             	movzx  edx,dx
c00105eb:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00105f0:	39 0d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ecx
c00105f6:	75 14                	jne    c001060c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00105f8:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00105fe:	85 c0                	test   eax,eax
c0010600:	74 0a                	je     c001060c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010602:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010606:	83 c4 08             	add    esp,0x8
c0010609:	5b                   	pop    ebx
c001060a:	ff e0                	jmp    eax
c001060c:	83 c4 08             	add    esp,0x8
c001060f:	5b                   	pop    ebx
c0010610:	c3                   	ret    
c0010611:	90                   	nop

c0010612 <VgaText::getCursorX()>:
c0010612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010616:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001061c:	c3                   	ret    
c001061d:	90                   	nop

c001061e <VgaText::getCursorY()>:
c001061e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010622:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010628:	c3                   	ret    
c0010629:	90                   	nop

c001062a <VgaText::setCursor(int, int)>:
c001062a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001062e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010632:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010638:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001063c:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010642:	e9 77 fd ff ff       	jmp    c00103be <VgaText::updateCursor()>
c0010647:	90                   	nop

c0010648 <VgaText::setCursorX(int)>:
c0010648:	83 ec 10             	sub    esp,0x10
c001064b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001064f:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010655:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010659:	50                   	push   eax
c001065a:	e8 cb ff ff ff       	call   c001062a <VgaText::setCursor(int, int)>
c001065f:	83 c4 1c             	add    esp,0x1c
c0010662:	c3                   	ret    
c0010663:	90                   	nop

c0010664 <VgaText::setCursorY(int)>:
c0010664:	83 ec 10             	sub    esp,0x10
c0010667:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001066b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001066f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010675:	50                   	push   eax
c0010676:	e8 af ff ff ff       	call   c001062a <VgaText::setCursor(int, int)>
c001067b:	83 c4 1c             	add    esp,0x1c
c001067e:	c3                   	ret    
c001067f:	90                   	nop

c0010680 <VgaText::incrementCursor(bool)>:
c0010680:	56                   	push   esi
c0010681:	53                   	push   ebx
c0010682:	51                   	push   ecx
c0010683:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010687:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001068b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010691:	40                   	inc    eax
c0010692:	83 f8 50             	cmp    eax,0x50
c0010695:	74 08                	je     c001069f <VgaText::incrementCursor(bool)+0x1f>
c0010697:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001069d:	eb 33                	jmp    c00106d2 <VgaText::incrementCursor(bool)+0x52>
c001069f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00106a5:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00106af:	8d 50 01             	lea    edx,[eax+0x1]
c00106b2:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00106b8:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00106be:	75 12                	jne    c00106d2 <VgaText::incrementCursor(bool)+0x52>
c00106c0:	83 ec 0c             	sub    esp,0xc
c00106c3:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00106c9:	53                   	push   ebx
c00106ca:	e8 3d fe ff ff       	call   c001050c <VgaText::scrollScreen()>
c00106cf:	83 c4 10             	add    esp,0x10
c00106d2:	89 f0                	mov    eax,esi
c00106d4:	84 c0                	test   al,al
c00106d6:	74 0c                	je     c00106e4 <VgaText::incrementCursor(bool)+0x64>
c00106d8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106dc:	5a                   	pop    edx
c00106dd:	5b                   	pop    ebx
c00106de:	5e                   	pop    esi
c00106df:	e9 da fc ff ff       	jmp    c00103be <VgaText::updateCursor()>
c00106e4:	58                   	pop    eax
c00106e5:	5b                   	pop    ebx
c00106e6:	5e                   	pop    esi
c00106e7:	c3                   	ret    

c00106e8 <VgaText::updateRAMUsageDisplay(int)>:
c00106e8:	56                   	push   esi
c00106e9:	8b 35 00 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca00
c00106ef:	53                   	push   ebx
c00106f0:	bb 0a 00 00 00       	mov    ebx,0xa
c00106f5:	6a 0f                	push   0xf
c00106f7:	6a 00                	push   0x0
c00106f9:	e8 fc fd ff ff       	call   c00104fa <VgaText::combineColours(unsigned char, unsigned char)>
c00106fe:	5a                   	pop    edx
c00106ff:	59                   	pop    ecx
c0010700:	0f b6 c8             	movzx  ecx,al
c0010703:	51                   	push   ecx
c0010704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010708:	99                   	cdq    
c0010709:	f7 fb                	idiv   ebx
c001070b:	89 d3                	mov    ebx,edx
c001070d:	83 c0 30             	add    eax,0x30
c0010710:	83 c3 30             	add    ebx,0x30
c0010713:	0f be c0             	movsx  eax,al
c0010716:	0f b6 db             	movzx  ebx,bl
c0010719:	50                   	push   eax
c001071a:	e8 81 fe ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c001071f:	5a                   	pop    edx
c0010720:	5a                   	pop    edx
c0010721:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010728:	51                   	push   ecx
c0010729:	53                   	push   ebx
c001072a:	e8 71 fe ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c001072f:	5b                   	pop    ebx
c0010730:	5a                   	pop    edx
c0010731:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010738:	51                   	push   ecx
c0010739:	6a 25                	push   0x25
c001073b:	e8 60 fe ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010740:	59                   	pop    ecx
c0010741:	5b                   	pop    ebx
c0010742:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010749:	5b                   	pop    ebx
c001074a:	5e                   	pop    esi
c001074b:	c3                   	ret    

c001074c <VgaText::updateDiskUsage()>:
c001074c:	55                   	push   ebp
c001074d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010752:	57                   	push   edi
c0010753:	8b 3d 00 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca00
c0010759:	56                   	push   esi
c001075a:	53                   	push   ebx
c001075b:	6a 0f                	push   0xf
c001075d:	6a 00                	push   0x0
c001075f:	e8 96 fd ff ff       	call   c00104fa <VgaText::combineColours(unsigned char, unsigned char)>
c0010764:	5a                   	pop    edx
c0010765:	0f b6 d8             	movzx  ebx,al
c0010768:	59                   	pop    ecx
c0010769:	8b 35 28 1e 03 c0    	mov    esi,DWORD PTR ds:0xc0031e28
c001076f:	53                   	push   ebx
c0010770:	b9 0a 00 00 00       	mov    ecx,0xa
c0010775:	89 f0                	mov    eax,esi
c0010777:	99                   	cdq    
c0010778:	f7 fd                	idiv   ebp
c001077a:	99                   	cdq    
c001077b:	f7 f9                	idiv   ecx
c001077d:	8d 42 30             	lea    eax,[edx+0x30]
c0010780:	0f b6 c0             	movzx  eax,al
c0010783:	50                   	push   eax
c0010784:	e8 17 fe ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010789:	5d                   	pop    ebp
c001078a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001078f:	5a                   	pop    edx
c0010790:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010794:	53                   	push   ebx
c0010795:	89 f0                	mov    eax,esi
c0010797:	99                   	cdq    
c0010798:	f7 fd                	idiv   ebp
c001079a:	99                   	cdq    
c001079b:	f7 f9                	idiv   ecx
c001079d:	8d 42 30             	lea    eax,[edx+0x30]
c00107a0:	0f b6 c0             	movzx  eax,al
c00107a3:	50                   	push   eax
c00107a4:	e8 f7 fd ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00107a9:	5d                   	pop    ebp
c00107aa:	bd 64 00 00 00       	mov    ebp,0x64
c00107af:	5a                   	pop    edx
c00107b0:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00107b7:	53                   	push   ebx
c00107b8:	89 f0                	mov    eax,esi
c00107ba:	99                   	cdq    
c00107bb:	f7 fd                	idiv   ebp
c00107bd:	99                   	cdq    
c00107be:	f7 f9                	idiv   ecx
c00107c0:	8d 42 30             	lea    eax,[edx+0x30]
c00107c3:	0f b6 c0             	movzx  eax,al
c00107c6:	50                   	push   eax
c00107c7:	e8 d4 fd ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00107cc:	5d                   	pop    ebp
c00107cd:	5a                   	pop    edx
c00107ce:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00107d5:	53                   	push   ebx
c00107d6:	89 f0                	mov    eax,esi
c00107d8:	99                   	cdq    
c00107d9:	f7 f9                	idiv   ecx
c00107db:	89 d6                	mov    esi,edx
c00107dd:	99                   	cdq    
c00107de:	f7 f9                	idiv   ecx
c00107e0:	8d 42 30             	lea    eax,[edx+0x30]
c00107e3:	0f b6 c0             	movzx  eax,al
c00107e6:	50                   	push   eax
c00107e7:	e8 b4 fd ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00107ec:	5d                   	pop    ebp
c00107ed:	5a                   	pop    edx
c00107ee:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00107f5:	53                   	push   ebx
c00107f6:	8d 46 30             	lea    eax,[esi+0x30]
c00107f9:	0f b6 f0             	movzx  esi,al
c00107fc:	56                   	push   esi
c00107fd:	e8 9e fd ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010802:	5e                   	pop    esi
c0010803:	8b 35 24 1e 03 c0    	mov    esi,DWORD PTR ds:0xc0031e24
c0010809:	5d                   	pop    ebp
c001080a:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010811:	bd 10 27 00 00       	mov    ebp,0x2710
c0010816:	53                   	push   ebx
c0010817:	89 f0                	mov    eax,esi
c0010819:	99                   	cdq    
c001081a:	f7 fd                	idiv   ebp
c001081c:	99                   	cdq    
c001081d:	f7 f9                	idiv   ecx
c001081f:	8d 42 30             	lea    eax,[edx+0x30]
c0010822:	0f b6 c0             	movzx  eax,al
c0010825:	50                   	push   eax
c0010826:	e8 75 fd ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c001082b:	5a                   	pop    edx
c001082c:	5d                   	pop    ebp
c001082d:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010834:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010839:	53                   	push   ebx
c001083a:	89 f0                	mov    eax,esi
c001083c:	99                   	cdq    
c001083d:	f7 fd                	idiv   ebp
c001083f:	99                   	cdq    
c0010840:	f7 f9                	idiv   ecx
c0010842:	8d 42 30             	lea    eax,[edx+0x30]
c0010845:	0f b6 c0             	movzx  eax,al
c0010848:	50                   	push   eax
c0010849:	e8 52 fd ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c001084e:	5a                   	pop    edx
c001084f:	5d                   	pop    ebp
c0010850:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010857:	bd 64 00 00 00       	mov    ebp,0x64
c001085c:	53                   	push   ebx
c001085d:	89 f0                	mov    eax,esi
c001085f:	99                   	cdq    
c0010860:	f7 fd                	idiv   ebp
c0010862:	99                   	cdq    
c0010863:	f7 f9                	idiv   ecx
c0010865:	83 c2 30             	add    edx,0x30
c0010868:	0f b6 d2             	movzx  edx,dl
c001086b:	52                   	push   edx
c001086c:	e8 2f fd ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010871:	5a                   	pop    edx
c0010872:	5d                   	pop    ebp
c0010873:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c001087a:	53                   	push   ebx
c001087b:	89 f0                	mov    eax,esi
c001087d:	99                   	cdq    
c001087e:	f7 f9                	idiv   ecx
c0010880:	89 d6                	mov    esi,edx
c0010882:	99                   	cdq    
c0010883:	f7 f9                	idiv   ecx
c0010885:	8d 42 30             	lea    eax,[edx+0x30]
c0010888:	0f b6 c0             	movzx  eax,al
c001088b:	50                   	push   eax
c001088c:	e8 0f fd ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010891:	5a                   	pop    edx
c0010892:	59                   	pop    ecx
c0010893:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c001089a:	53                   	push   ebx
c001089b:	8d 46 30             	lea    eax,[esi+0x30]
c001089e:	0f b6 f0             	movzx  esi,al
c00108a1:	56                   	push   esi
c00108a2:	e8 f9 fc ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00108a7:	5b                   	pop    ebx
c00108a8:	5e                   	pop    esi
c00108a9:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c00108b0:	5b                   	pop    ebx
c00108b1:	5e                   	pop    esi
c00108b2:	5f                   	pop    edi
c00108b3:	5d                   	pop    ebp
c00108b4:	c3                   	ret    
c00108b5:	90                   	nop

c00108b6 <VgaText::updateTitle()>:
c00108b6:	53                   	push   ebx
c00108b7:	31 c0                	xor    eax,eax
c00108b9:	83 ec 58             	sub    esp,0x58
c00108bc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00108c0:	89 e1                	mov    ecx,esp
c00108c2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00108c6:	40                   	inc    eax
c00108c7:	83 f8 50             	cmp    eax,0x50
c00108ca:	75 f6                	jne    c00108c2 <VgaText::updateTitle()+0xc>
c00108cc:	31 c0                	xor    eax,eax
c00108ce:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00108d5:	84 db                	test   bl,bl
c00108d7:	74 06                	je     c00108df <VgaText::updateTitle()+0x29>
c00108d9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00108dc:	40                   	inc    eax
c00108dd:	eb ef                	jmp    c00108ce <VgaText::updateTitle()+0x18>
c00108df:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00108e5:	85 c0                	test   eax,eax
c00108e7:	74 09                	je     c00108f2 <VgaText::updateTitle()+0x3c>
c00108e9:	53                   	push   ebx
c00108ea:	53                   	push   ebx
c00108eb:	51                   	push   ecx
c00108ec:	52                   	push   edx
c00108ed:	ff d0                	call   eax
c00108ef:	83 c4 10             	add    esp,0x10
c00108f2:	e8 55 fe ff ff       	call   c001074c <VgaText::updateDiskUsage()>
c00108f7:	83 c4 58             	add    esp,0x58
c00108fa:	5b                   	pop    ebx
c00108fb:	c3                   	ret    

c00108fc <VgaText::setTitleTextColour(VgaColour)>:
c00108fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010900:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010904:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c001090a:	eb aa                	jmp    c00108b6 <VgaText::updateTitle()>

c001090c <VgaText::setTitleColour(VgaColour)>:
c001090c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010910:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010914:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c001091a:	eb 9a                	jmp    c00108b6 <VgaText::updateTitle()>

c001091c <VgaText::setTitle(char*)>:
c001091c:	53                   	push   ebx
c001091d:	83 ec 10             	sub    esp,0x10
c0010920:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010928:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001092e:	50                   	push   eax
c001092f:	e8 23 fe fe ff       	call   c0000757 <strcpy>
c0010934:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010938:	83 c4 18             	add    esp,0x18
c001093b:	5b                   	pop    ebx
c001093c:	e9 75 ff ff ff       	jmp    c00108b6 <VgaText::updateTitle()>
c0010941:	90                   	nop

c0010942 <VgaText::decrementCursor(bool)>:
c0010942:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010946:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001094a:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010950:	85 c0                	test   eax,eax
c0010952:	74 07                	je     c001095b <VgaText::decrementCursor(bool)+0x19>
c0010954:	48                   	dec    eax
c0010955:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c001095b:	84 c9                	test   cl,cl
c001095d:	74 09                	je     c0010968 <VgaText::decrementCursor(bool)+0x26>
c001095f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010963:	e9 56 fa ff ff       	jmp    c00103be <VgaText::updateCursor()>
c0010968:	c3                   	ret    
c0010969:	90                   	nop

c001096a <VgaText::putchar(char, VgaColour, VgaColour)>:
c001096a:	53                   	push   ebx
c001096b:	83 ec 08             	sub    esp,0x8
c001096e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010972:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010976:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001097a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001097e:	3c 07                	cmp    al,0x7
c0010980:	75 2a                	jne    c00109ac <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010982:	a1 4c dc 02 c0       	mov    eax,ds:0xc002dc4c
c0010987:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001098f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010997:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001099f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109a3:	83 c4 08             	add    esp,0x8
c00109a6:	5b                   	pop    ebx
c00109a7:	e9 3a 2d 00 00       	jmp    c00136e6 <Buzzer::beep(int, int, bool)>
c00109ac:	3c 0d                	cmp    al,0xd
c00109ae:	75 0c                	jne    c00109bc <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00109b0:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109ba:	eb 3b                	jmp    c00109f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00109bc:	3c 0a                	cmp    al,0xa
c00109be:	75 40                	jne    c0010a00 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00109c0:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109c6:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109d0:	8d 50 01             	lea    edx,[eax+0x1]
c00109d3:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109d9:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109df:	75 12                	jne    c00109f3 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00109e1:	83 ec 0c             	sub    esp,0xc
c00109e4:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109ea:	53                   	push   ebx
c00109eb:	e8 1c fb ff ff       	call   c001050c <VgaText::scrollScreen()>
c00109f0:	83 c4 10             	add    esp,0x10
c00109f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109f7:	83 c4 08             	add    esp,0x8
c00109fa:	5b                   	pop    ebx
c00109fb:	e9 be f9 ff ff       	jmp    c00103be <VgaText::updateCursor()>
c0010a00:	3c 08                	cmp    al,0x8
c0010a02:	75 31                	jne    c0010a35 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010a04:	50                   	push   eax
c0010a05:	50                   	push   eax
c0010a06:	6a 01                	push   0x1
c0010a08:	53                   	push   ebx
c0010a09:	e8 34 ff ff ff       	call   c0010942 <VgaText::decrementCursor(bool)>
c0010a0e:	5a                   	pop    edx
c0010a0f:	59                   	pop    ecx
c0010a10:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a16:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a1c:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a22:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a28:	6a 20                	push   0x20
c0010a2a:	53                   	push   ebx
c0010a2b:	e8 82 fb ff ff       	call   c00105b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a30:	83 c4 28             	add    esp,0x28
c0010a33:	5b                   	pop    ebx
c0010a34:	c3                   	ret    
c0010a35:	83 ec 08             	sub    esp,0x8
c0010a38:	0f be c0             	movsx  eax,al
c0010a3b:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a41:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a47:	51                   	push   ecx
c0010a48:	52                   	push   edx
c0010a49:	50                   	push   eax
c0010a4a:	53                   	push   ebx
c0010a4b:	e8 62 fb ff ff       	call   c00105b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a50:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010a54:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010a5c:	83 c4 28             	add    esp,0x28
c0010a5f:	5b                   	pop    ebx
c0010a60:	e9 1b fc ff ff       	jmp    c0010680 <VgaText::incrementCursor(bool)>
c0010a65:	90                   	nop

c0010a66 <VgaText::isShowingCursor()>:
c0010a66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a6a:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010a70:	c3                   	ret    
c0010a71:	90                   	nop

c0010a72 <VgaText::isBlinkDisabled()>:
c0010a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a76:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010a7c:	83 f0 01             	xor    eax,0x1
c0010a7f:	c3                   	ret    

c0010a80 <VgaText::setCursorHeight(int)>:
c0010a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a88:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010a8e:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010a95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a99:	e9 3a f9 ff ff       	jmp    c00103d8 <VgaText::showCursor(bool)>

c0010a9e <VgaText::getCursorHeight()>:
c0010a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aa2:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010aa8:	c3                   	ret    

c0010aa9 <setActiveTerminal(VgaText*)>:
c0010aa9:	53                   	push   ebx
c0010aaa:	83 ec 08             	sub    esp,0x8
c0010aad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ab1:	85 db                	test   ebx,ebx
c0010ab3:	75 11                	jne    c0010ac6 <setActiveTerminal(VgaText*)+0x1d>
c0010ab5:	c7 44 24 10 2c 9b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029b2c
c0010abd:	83 c4 08             	add    esp,0x8
c0010ac0:	5b                   	pop    ebx
c0010ac1:	e9 95 93 00 00       	jmp    c0019e5b <Krnl::panic(char const*)>
c0010ac6:	50                   	push   eax
c0010ac7:	50                   	push   eax
c0010ac8:	53                   	push   ebx
c0010ac9:	68 3a 9b 02 c0       	push   0xc0029b3a
c0010ace:	e8 14 1e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0010ad3:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c0010ad8:	83 c4 10             	add    esp,0x10
c0010adb:	85 c0                	test   eax,eax
c0010add:	74 0c                	je     c0010aeb <setActiveTerminal(VgaText*)+0x42>
c0010adf:	83 ec 0c             	sub    esp,0xc
c0010ae2:	50                   	push   eax
c0010ae3:	e8 d6 f8 ff ff       	call   c00103be <VgaText::updateCursor()>
c0010ae8:	83 c4 10             	add    esp,0x10
c0010aeb:	89 1d a4 db 02 c0    	mov    DWORD PTR ds:0xc002dba4,ebx
c0010af1:	51                   	push   ecx
c0010af2:	51                   	push   ecx
c0010af3:	53                   	push   ebx
c0010af4:	68 52 9b 02 c0       	push   0xc0029b52
c0010af9:	e8 e9 1d 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0010afe:	83 c4 0c             	add    esp,0xc
c0010b01:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010b07:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010b0d:	53                   	push   ebx
c0010b0e:	e8 17 fb ff ff       	call   c001062a <VgaText::setCursor(int, int)>
c0010b13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b16:	e8 57 ff ff ff       	call   c0010a72 <VgaText::isBlinkDisabled()>
c0010b1b:	5a                   	pop    edx
c0010b1c:	0f b6 c0             	movzx  eax,al
c0010b1f:	59                   	pop    ecx
c0010b20:	50                   	push   eax
c0010b21:	53                   	push   ebx
c0010b22:	e8 c1 f8 ff ff       	call   c00103e8 <VgaText::disableBlink(bool)>
c0010b27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b2a:	e8 6f ff ff ff       	call   c0010a9e <VgaText::getCursorHeight()>
c0010b2f:	5a                   	pop    edx
c0010b30:	59                   	pop    ecx
c0010b31:	50                   	push   eax
c0010b32:	53                   	push   ebx
c0010b33:	e8 48 ff ff ff       	call   c0010a80 <VgaText::setCursorHeight(int)>
c0010b38:	83 c4 10             	add    esp,0x10
c0010b3b:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010b42:	75 0a                	jne    c0010b4e <setActiveTerminal(VgaText*)+0xa5>
c0010b44:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010b4e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b52:	83 c4 08             	add    esp,0x8
c0010b55:	5b                   	pop    ebx
c0010b56:	e9 0f f8 ff ff       	jmp    c001036a <VgaText::load()>

c0010b5b <doTerminalCycle()>:
c0010b5b:	83 ec 18             	sub    esp,0x18
c0010b5e:	a1 a0 db 02 c0       	mov    eax,ds:0xc002dba0
c0010b63:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010b69:	50                   	push   eax
c0010b6a:	a3 a0 db 02 c0       	mov    ds:0xc002dba0,eax
c0010b6f:	e8 35 ff ff ff       	call   c0010aa9 <setActiveTerminal(VgaText*)>
c0010b74:	83 c4 1c             	add    esp,0x1c
c0010b77:	c3                   	ret    

c0010b78 <VgaText::doUpdate()>:
c0010b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b7c:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010b82:	85 c0                	test   eax,eax
c0010b84:	74 02                	je     c0010b88 <VgaText::doUpdate()+0x10>
c0010b86:	ff e0                	jmp    eax
c0010b88:	c3                   	ret    
c0010b89:	90                   	nop

c0010b8a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010b8a:	55                   	push   ebp
c0010b8b:	57                   	push   edi
c0010b8c:	56                   	push   esi
c0010b8d:	53                   	push   ebx
c0010b8e:	83 ec 1c             	sub    esp,0x1c
c0010b91:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010b95:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010b9a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010ba1:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010ba4:	50                   	push   eax
c0010ba5:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010baa:	50                   	push   eax
c0010bab:	e8 4a f9 ff ff       	call   c00104fa <VgaText::combineColours(unsigned char, unsigned char)>
c0010bb0:	59                   	pop    ecx
c0010bb1:	0f b6 c0             	movzx  eax,al
c0010bb4:	5b                   	pop    ebx
c0010bb5:	31 c9                	xor    ecx,ecx
c0010bb7:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010bbf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010bc3:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010bc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bcd:	0f b7 db             	movzx  ebx,bx
c0010bd0:	01 db                	add    ebx,ebx
c0010bd2:	01 fb                	add    ebx,edi
c0010bd4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010bd7:	84 c0                	test   al,al
c0010bd9:	0f 84 38 01 00 00    	je     c0010d17 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010bdf:	3c 0d                	cmp    al,0xd
c0010be1:	75 0f                	jne    c0010bf2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010be3:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bed:	e9 1f 01 00 00       	jmp    c0010d11 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010bf2:	3c 0a                	cmp    al,0xa
c0010bf4:	75 5b                	jne    c0010c51 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010bf6:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010bfc:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010c06:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c09:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010c0f:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010c15:	75 12                	jne    c0010c29 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010c17:	83 ec 0c             	sub    esp,0xc
c0010c1a:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010c20:	55                   	push   ebp
c0010c21:	e8 e6 f8 ff ff       	call   c001050c <VgaText::scrollScreen()>
c0010c26:	83 c4 10             	add    esp,0x10
c0010c29:	83 ec 0c             	sub    esp,0xc
c0010c2c:	55                   	push   ebp
c0010c2d:	e8 8c f7 ff ff       	call   c00103be <VgaText::updateCursor()>
c0010c32:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c3a:	83 c4 10             	add    esp,0x10
c0010c3d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c43:	31 c9                	xor    ecx,ecx
c0010c45:	0f b7 db             	movzx  ebx,bx
c0010c48:	01 db                	add    ebx,ebx
c0010c4a:	01 fb                	add    ebx,edi
c0010c4c:	e9 c0 00 00 00       	jmp    c0010d11 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c51:	3c 08                	cmp    al,0x8
c0010c53:	75 4e                	jne    c0010ca3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010c55:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c59:	53                   	push   ebx
c0010c5a:	53                   	push   ebx
c0010c5b:	6a 01                	push   0x1
c0010c5d:	55                   	push   ebp
c0010c5e:	e8 df fc ff ff       	call   c0010942 <VgaText::decrementCursor(bool)>
c0010c63:	58                   	pop    eax
c0010c64:	5a                   	pop    edx
c0010c65:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c6b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c71:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010c77:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010c7d:	6a 20                	push   0x20
c0010c7f:	55                   	push   ebp
c0010c80:	e8 2d f9 ff ff       	call   c00105b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c85:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c8d:	83 c4 20             	add    esp,0x20
c0010c90:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c96:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010c9a:	0f b7 db             	movzx  ebx,bx
c0010c9d:	01 db                	add    ebx,ebx
c0010c9f:	01 fb                	add    ebx,edi
c0010ca1:	eb 6e                	jmp    c0010d11 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ca3:	51                   	push   ecx
c0010ca4:	51                   	push   ecx
c0010ca5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ca9:	50                   	push   eax
c0010caa:	e8 f1 f8 ff ff       	call   c00105a0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010caf:	83 c4 10             	add    esp,0x10
c0010cb2:	66 89 03             	mov    WORD PTR [ebx],ax
c0010cb5:	39 2d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ebp
c0010cbb:	75 2a                	jne    c0010ce7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cbd:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010cc3:	85 c0                	test   eax,eax
c0010cc5:	74 20                	je     c0010ce7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cc7:	52                   	push   edx
c0010cc8:	52                   	push   edx
c0010cc9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ccf:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010cd5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010cd9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010cdd:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010ce0:	51                   	push   ecx
c0010ce1:	55                   	push   ebp
c0010ce2:	ff d0                	call   eax
c0010ce4:	83 c4 20             	add    esp,0x20
c0010ce7:	83 c3 02             	add    ebx,0x2
c0010cea:	50                   	push   eax
c0010ceb:	50                   	push   eax
c0010cec:	6a 00                	push   0x0
c0010cee:	55                   	push   ebp
c0010cef:	e8 8c f9 ff ff       	call   c0010680 <VgaText::incrementCursor(bool)>
c0010cf4:	83 c4 10             	add    esp,0x10
c0010cf7:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010cfe:	75 0f                	jne    c0010d0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010d00:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010d08:	0f b7 db             	movzx  ebx,bx
c0010d0b:	01 db                	add    ebx,ebx
c0010d0d:	01 fb                	add    ebx,edi
c0010d0f:	b1 01                	mov    cl,0x1
c0010d11:	46                   	inc    esi
c0010d12:	e9 bd fe ff ff       	jmp    c0010bd4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010d17:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d1b:	83 ec 0c             	sub    esp,0xc
c0010d1e:	55                   	push   ebp
c0010d1f:	e8 9a f6 ff ff       	call   c00103be <VgaText::updateCursor()>
c0010d24:	83 c4 10             	add    esp,0x10
c0010d27:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d2b:	84 c9                	test   cl,cl
c0010d2d:	74 0c                	je     c0010d3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010d2f:	83 ec 0c             	sub    esp,0xc
c0010d32:	55                   	push   ebp
c0010d33:	e8 40 fe ff ff       	call   c0010b78 <VgaText::doUpdate()>
c0010d38:	83 c4 10             	add    esp,0x10
c0010d3b:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010d42:	83 c4 1c             	add    esp,0x1c
c0010d45:	5b                   	pop    ebx
c0010d46:	5e                   	pop    esi
c0010d47:	5f                   	pop    edi
c0010d48:	5d                   	pop    ebp
c0010d49:	c3                   	ret    

c0010d4a <VgaText::clearScreen()>:
c0010d4a:	57                   	push   edi
c0010d4b:	56                   	push   esi
c0010d4c:	31 f6                	xor    esi,esi
c0010d4e:	53                   	push   ebx
c0010d4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d53:	52                   	push   edx
c0010d54:	6a 00                	push   0x0
c0010d56:	6a 00                	push   0x0
c0010d58:	53                   	push   ebx
c0010d59:	e8 cc f8 ff ff       	call   c001062a <VgaText::setCursor(int, int)>
c0010d5e:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010d65:	83 c4 10             	add    esp,0x10
c0010d68:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010d6e:	7e 26                	jle    c0010d96 <VgaText::clearScreen()+0x4c>
c0010d70:	31 ff                	xor    edi,edi
c0010d72:	50                   	push   eax
c0010d73:	50                   	push   eax
c0010d74:	56                   	push   esi
c0010d75:	57                   	push   edi
c0010d76:	47                   	inc    edi
c0010d77:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d7d:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d83:	6a 20                	push   0x20
c0010d85:	53                   	push   ebx
c0010d86:	e8 27 f8 ff ff       	call   c00105b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d8b:	83 c4 20             	add    esp,0x20
c0010d8e:	83 ff 50             	cmp    edi,0x50
c0010d91:	75 df                	jne    c0010d72 <VgaText::clearScreen()+0x28>
c0010d93:	46                   	inc    esi
c0010d94:	eb d2                	jmp    c0010d68 <VgaText::clearScreen()+0x1e>
c0010d96:	83 ec 0c             	sub    esp,0xc
c0010d99:	53                   	push   ebx
c0010d9a:	e8 d9 fd ff ff       	call   c0010b78 <VgaText::doUpdate()>
c0010d9f:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010da6:	83 c4 10             	add    esp,0x10
c0010da9:	5b                   	pop    ebx
c0010daa:	5e                   	pop    esi
c0010dab:	5f                   	pop    edi
c0010dac:	c3                   	ret    
c0010dad:	90                   	nop

c0010dae <VgaText::putchar(char)>:
c0010dae:	56                   	push   esi
c0010daf:	53                   	push   ebx
c0010db0:	83 ec 14             	sub    esp,0x14
c0010db3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010db7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010dbb:	3c 5b                	cmp    al,0x5b
c0010dbd:	75 21                	jne    c0010de0 <VgaText::putchar(char)+0x32>
c0010dbf:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010dc6:	74 28                	je     c0010df0 <VgaText::putchar(char)+0x42>
c0010dc8:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010dd1:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010ddb:	e9 e2 00 00 00       	jmp    c0010ec2 <VgaText::putchar(char)+0x114>
c0010de0:	3c 1b                	cmp    al,0x1b
c0010de2:	75 0c                	jne    c0010df0 <VgaText::putchar(char)+0x42>
c0010de4:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010deb:	e9 d2 00 00 00       	jmp    c0010ec2 <VgaText::putchar(char)+0x114>
c0010df0:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010df6:	84 c9                	test   cl,cl
c0010df8:	0f 84 ab 00 00 00    	je     c0010ea9 <VgaText::putchar(char)+0xfb>
c0010dfe:	8d 50 c0             	lea    edx,[eax-0x40]
c0010e01:	80 fa 3e             	cmp    dl,0x3e
c0010e04:	0f 87 82 00 00 00    	ja     c0010e8c <VgaText::putchar(char)+0xde>
c0010e0a:	3c 6d                	cmp    al,0x6d
c0010e0c:	75 4d                	jne    c0010e5b <VgaText::putchar(char)+0xad>
c0010e0e:	31 f6                	xor    esi,esi
c0010e10:	31 d2                	xor    edx,edx
c0010e12:	31 c0                	xor    eax,eax
c0010e14:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010e1a:	7e 30                	jle    c0010e4c <VgaText::putchar(char)+0x9e>
c0010e1c:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010e24:	80 fa 3b             	cmp    dl,0x3b
c0010e27:	75 17                	jne    c0010e40 <VgaText::putchar(char)+0x92>
c0010e29:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e2d:	50                   	push   eax
c0010e2e:	53                   	push   ebx
c0010e2f:	e8 ee f5 ff ff       	call   c0010422 <VgaText::doANSI_SGR(int)>
c0010e34:	59                   	pop    ecx
c0010e35:	31 d2                	xor    edx,edx
c0010e37:	58                   	pop    eax
c0010e38:	31 c0                	xor    eax,eax
c0010e3a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010e3e:	eb 09                	jmp    c0010e49 <VgaText::putchar(char)+0x9b>
c0010e40:	6b c0 0a             	imul   eax,eax,0xa
c0010e43:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010e47:	88 ca                	mov    dl,cl
c0010e49:	46                   	inc    esi
c0010e4a:	eb c8                	jmp    c0010e14 <VgaText::putchar(char)+0x66>
c0010e4c:	84 d2                	test   dl,dl
c0010e4e:	74 31                	je     c0010e81 <VgaText::putchar(char)+0xd3>
c0010e50:	50                   	push   eax
c0010e51:	53                   	push   ebx
c0010e52:	e8 cb f5 ff ff       	call   c0010422 <VgaText::doANSI_SGR(int)>
c0010e57:	58                   	pop    eax
c0010e58:	5a                   	pop    edx
c0010e59:	eb 26                	jmp    c0010e81 <VgaText::putchar(char)+0xd3>
c0010e5b:	3c 4a                	cmp    al,0x4a
c0010e5d:	75 22                	jne    c0010e81 <VgaText::putchar(char)+0xd3>
c0010e5f:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010e66:	75 19                	jne    c0010e81 <VgaText::putchar(char)+0xd3>
c0010e68:	83 ec 0c             	sub    esp,0xc
c0010e6b:	53                   	push   ebx
c0010e6c:	e8 d9 fe ff ff       	call   c0010d4a <VgaText::clearScreen()>
c0010e71:	83 c4 0c             	add    esp,0xc
c0010e74:	6a 00                	push   0x0
c0010e76:	6a 00                	push   0x0
c0010e78:	53                   	push   ebx
c0010e79:	e8 ac f7 ff ff       	call   c001062a <VgaText::setCursor(int, int)>
c0010e7e:	83 c4 10             	add    esp,0x10
c0010e81:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010e8a:	eb 36                	jmp    c0010ec2 <VgaText::putchar(char)+0x114>
c0010e8c:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010e92:	83 fa 0e             	cmp    edx,0xe
c0010e95:	7f 2b                	jg     c0010ec2 <VgaText::putchar(char)+0x114>
c0010e97:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010e9a:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010ea0:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010ea7:	eb 19                	jmp    c0010ec2 <VgaText::putchar(char)+0x114>
c0010ea9:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010eaf:	0f be c0             	movsx  eax,al
c0010eb2:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010eb8:	50                   	push   eax
c0010eb9:	53                   	push   ebx
c0010eba:	e8 ab fa ff ff       	call   c001096a <VgaText::putchar(char, VgaColour, VgaColour)>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	83 c4 14             	add    esp,0x14
c0010ec5:	5b                   	pop    ebx
c0010ec6:	5e                   	pop    esi
c0010ec7:	c3                   	ret    

c0010ec8 <VgaText::puts(char const*)>:
c0010ec8:	53                   	push   ebx
c0010ec9:	83 ec 08             	sub    esp,0x8
c0010ecc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ed0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ed3:	84 c0                	test   al,al
c0010ed5:	74 12                	je     c0010ee9 <VgaText::puts(char const*)+0x21>
c0010ed7:	43                   	inc    ebx
c0010ed8:	51                   	push   ecx
c0010ed9:	51                   	push   ecx
c0010eda:	50                   	push   eax
c0010edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010edf:	e8 ca fe ff ff       	call   c0010dae <VgaText::putchar(char)>
c0010ee4:	83 c4 10             	add    esp,0x10
c0010ee7:	eb e7                	jmp    c0010ed0 <VgaText::puts(char const*)+0x8>
c0010ee9:	83 c4 08             	add    esp,0x8
c0010eec:	5b                   	pop    ebx
c0010eed:	c3                   	ret    

c0010eee <VgaText::putx(unsigned int)>:
c0010eee:	57                   	push   edi
c0010eef:	b9 11 00 00 00       	mov    ecx,0x11
c0010ef4:	56                   	push   esi
c0010ef5:	be 6e 9b 02 c0       	mov    esi,0xc0029b6e
c0010efa:	53                   	push   ebx
c0010efb:	83 ec 20             	sub    esp,0x20
c0010efe:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f02:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010f06:	fc                   	cld    
c0010f07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f09:	be 08 00 00 00       	mov    esi,0x8
c0010f0e:	50                   	push   eax
c0010f0f:	50                   	push   eax
c0010f10:	89 d8                	mov    eax,ebx
c0010f12:	c1 e3 04             	shl    ebx,0x4
c0010f15:	c1 e8 1c             	shr    eax,0x1c
c0010f18:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010f1d:	50                   	push   eax
c0010f1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f22:	e8 87 fe ff ff       	call   c0010dae <VgaText::putchar(char)>
c0010f27:	83 c4 10             	add    esp,0x10
c0010f2a:	4e                   	dec    esi
c0010f2b:	75 e1                	jne    c0010f0e <VgaText::putx(unsigned int)+0x20>
c0010f2d:	83 c4 20             	add    esp,0x20
c0010f30:	5b                   	pop    ebx
c0010f31:	5e                   	pop    esi
c0010f32:	5f                   	pop    edi
c0010f33:	c3                   	ret    

c0010f34 <VgaText::VgaText(char const*)>:
c0010f34:	57                   	push   edi
c0010f35:	56                   	push   esi
c0010f36:	53                   	push   ebx
c0010f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3b:	83 ec 08             	sub    esp,0x8
c0010f3e:	6a 00                	push   0x0
c0010f40:	50                   	push   eax
c0010f41:	e8 6e 05 00 00       	call   c00114b4 <UnixFile::UnixFile(int)>
c0010f46:	83 c4 10             	add    esp,0x10
c0010f49:	ba d4 9b 02 c0       	mov    edx,0xc0029bd4
c0010f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f52:	89 10                	mov    DWORD PTR [eax],edx
c0010f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f58:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f66:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f74:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7f:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8a:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f98:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa6:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb1:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fbc:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010fc2:	bb 80 db 02 c0       	mov    ebx,0xc002db80
c0010fc7:	b8 08 00 00 00       	mov    eax,0x8
c0010fcc:	fc                   	cld    
c0010fcd:	89 d7                	mov    edi,edx
c0010fcf:	89 de                	mov    esi,ebx
c0010fd1:	89 c1                	mov    ecx,eax
c0010fd3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fd9:	05 1e 10 00 00       	add    eax,0x101e
c0010fde:	83 ec 08             	sub    esp,0x8
c0010fe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fe5:	50                   	push   eax
c0010fe6:	e8 6c f7 fe ff       	call   c0000757 <strcpy>
c0010feb:	83 c4 10             	add    esp,0x10
c0010fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff2:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011000:	83 c0 0c             	add    eax,0xc
c0011003:	83 ec 04             	sub    esp,0x4
c0011006:	68 00 0f 00 00       	push   0xf00
c001100b:	6a 00                	push   0x0
c001100d:	50                   	push   eax
c001100e:	e8 a5 f6 fe ff       	call   c00006b8 <memset>
c0011013:	83 c4 10             	add    esp,0x10
c0011016:	83 ec 04             	sub    esp,0x4
c0011019:	6a 00                	push   0x0
c001101b:	6a 07                	push   0x7
c001101d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011021:	e8 b4 f4 ff ff       	call   c00104da <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011026:	83 c4 10             	add    esp,0x10
c0011029:	83 ec 08             	sub    esp,0x8
c001102c:	6a 02                	push   0x2
c001102e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011032:	e8 49 fa ff ff       	call   c0010a80 <VgaText::setCursorHeight(int)>
c0011037:	83 c4 10             	add    esp,0x10
c001103a:	83 ec 04             	sub    esp,0x4
c001103d:	6a 00                	push   0x0
c001103f:	6a 00                	push   0x0
c0011041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011045:	e8 e0 f5 ff ff       	call   c001062a <VgaText::setCursor(int, int)>
c001104a:	83 c4 10             	add    esp,0x10
c001104d:	83 ec 08             	sub    esp,0x8
c0011050:	6a 01                	push   0x1
c0011052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011056:	e8 7d f3 ff ff       	call   c00103d8 <VgaText::showCursor(bool)>
c001105b:	83 c4 10             	add    esp,0x10
c001105e:	83 ec 08             	sub    esp,0x8
c0011061:	6a 01                	push   0x1
c0011063:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011067:	e8 7c f3 ff ff       	call   c00103e8 <VgaText::disableBlink(bool)>
c001106c:	83 c4 10             	add    esp,0x10
c001106f:	83 ec 0c             	sub    esp,0xc
c0011072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011076:	e8 cf fc ff ff       	call   c0010d4a <VgaText::clearScreen()>
c001107b:	83 c4 10             	add    esp,0x10
c001107e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011082:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108d:	05 9e 10 00 00       	add    eax,0x109e
c0011092:	83 ec 04             	sub    esp,0x4
c0011095:	68 96 00 00 00       	push   0x96
c001109a:	6a 00                	push   0x0
c001109c:	50                   	push   eax
c001109d:	e8 16 f6 fe ff       	call   c00006b8 <memset>
c00110a2:	83 c4 10             	add    esp,0x10
c00110a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a9:	05 34 11 00 00       	add    eax,0x1134
c00110ae:	83 ec 04             	sub    esp,0x4
c00110b1:	68 2c 01 00 00       	push   0x12c
c00110b6:	6a 00                	push   0x0
c00110b8:	50                   	push   eax
c00110b9:	e8 fa f5 fe ff       	call   c00006b8 <memset>
c00110be:	83 c4 10             	add    esp,0x10
c00110c1:	90                   	nop
c00110c2:	5b                   	pop    ebx
c00110c3:	5e                   	pop    esi
c00110c4:	5f                   	pop    edi
c00110c5:	c3                   	ret    

c00110c6 <VgaText::receiveKey(unsigned char)>:
c00110c6:	55                   	push   ebp
c00110c7:	57                   	push   edi
c00110c8:	56                   	push   esi
c00110c9:	53                   	push   ebx
c00110ca:	83 ec 1c             	sub    esp,0x1c
c00110cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110d5:	84 db                	test   bl,bl
c00110d7:	0f 84 c9 00 00 00    	je     c00111a6 <VgaText::receiveKey(unsigned char)+0xe0>
c00110dd:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00110e3:	80 fb 08             	cmp    bl,0x8
c00110e6:	75 2c                	jne    c0011114 <VgaText::receiveKey(unsigned char)+0x4e>
c00110e8:	83 ec 0c             	sub    esp,0xc
c00110eb:	57                   	push   edi
c00110ec:	e8 e4 f5 fe ff       	call   c00006d5 <strlen>
c00110f1:	83 c4 10             	add    esp,0x10
c00110f4:	85 c0                	test   eax,eax
c00110f6:	74 41                	je     c0011139 <VgaText::receiveKey(unsigned char)+0x73>
c00110f8:	50                   	push   eax
c00110f9:	50                   	push   eax
c00110fa:	6a 08                	push   0x8
c00110fc:	56                   	push   esi
c00110fd:	e8 ac fc ff ff       	call   c0010dae <VgaText::putchar(char)>
c0011102:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011105:	e8 cb f5 fe ff       	call   c00006d5 <strlen>
c001110a:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011112:	eb 22                	jmp    c0011136 <VgaText::receiveKey(unsigned char)+0x70>
c0011114:	0f be c3             	movsx  eax,bl
c0011117:	52                   	push   edx
c0011118:	52                   	push   edx
c0011119:	50                   	push   eax
c001111a:	56                   	push   esi
c001111b:	e8 8e fc ff ff       	call   c0010dae <VgaText::putchar(char)>
c0011120:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011124:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011129:	59                   	pop    ecx
c001112a:	5d                   	pop    ebp
c001112b:	8d 44 24 16          	lea    eax,[esp+0x16]
c001112f:	50                   	push   eax
c0011130:	57                   	push   edi
c0011131:	e8 d8 f6 fe ff       	call   c000080e <strcat>
c0011136:	83 c4 10             	add    esp,0x10
c0011139:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011140:	75 05                	jne    c0011147 <VgaText::receiveKey(unsigned char)+0x81>
c0011142:	80 fb 0a             	cmp    bl,0xa
c0011145:	75 53                	jne    c001119a <VgaText::receiveKey(unsigned char)+0xd4>
c0011147:	83 ec 0c             	sub    esp,0xc
c001114a:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011150:	53                   	push   ebx
c0011151:	e8 7f f5 fe ff       	call   c00006d5 <strlen>
c0011156:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011159:	89 c5                	mov    ebp,eax
c001115b:	e8 75 f5 fe ff       	call   c00006d5 <strlen>
c0011160:	83 c4 10             	add    esp,0x10
c0011163:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011167:	3d 2c 01 00 00       	cmp    eax,0x12c
c001116c:	76 10                	jbe    c001117e <VgaText::receiveKey(unsigned char)+0xb8>
c001116e:	83 ec 0c             	sub    esp,0xc
c0011171:	68 7f 9b 02 c0       	push   0xc0029b7f
c0011176:	e8 e0 8c 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	50                   	push   eax
c001117f:	50                   	push   eax
c0011180:	57                   	push   edi
c0011181:	53                   	push   ebx
c0011182:	e8 87 f6 fe ff       	call   c000080e <strcat>
c0011187:	83 c4 0c             	add    esp,0xc
c001118a:	68 96 00 00 00       	push   0x96
c001118f:	6a 00                	push   0x0
c0011191:	57                   	push   edi
c0011192:	e8 21 f5 fe ff       	call   c00006b8 <memset>
c0011197:	83 c4 10             	add    esp,0x10
c001119a:	83 ec 0c             	sub    esp,0xc
c001119d:	56                   	push   esi
c001119e:	e8 d5 f9 ff ff       	call   c0010b78 <VgaText::doUpdate()>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	83 c4 1c             	add    esp,0x1c
c00111a9:	5b                   	pop    ebx
c00111aa:	5e                   	pop    esi
c00111ab:	5f                   	pop    edi
c00111ac:	5d                   	pop    ebp
c00111ad:	c3                   	ret    

c00111ae <VgaText::write(unsigned long long, void*, int*)>:
c00111ae:	55                   	push   ebp
c00111af:	57                   	push   edi
c00111b0:	56                   	push   esi
c00111b1:	53                   	push   ebx
c00111b2:	83 ec 0c             	sub    esp,0xc
c00111b5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00111b9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111bd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111c1:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00111c8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00111cb:	39 eb                	cmp    ebx,ebp
c00111cd:	74 13                	je     c00111e2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00111cf:	43                   	inc    ebx
c00111d0:	50                   	push   eax
c00111d1:	50                   	push   eax
c00111d2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00111d6:	50                   	push   eax
c00111d7:	56                   	push   esi
c00111d8:	e8 d1 fb ff ff       	call   c0010dae <VgaText::putchar(char)>
c00111dd:	83 c4 10             	add    esp,0x10
c00111e0:	eb e9                	jmp    c00111cb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00111e2:	83 ec 0c             	sub    esp,0xc
c00111e5:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00111ec:	56                   	push   esi
c00111ed:	e8 86 f9 ff ff       	call   c0010b78 <VgaText::doUpdate()>
c00111f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00111f6:	89 38                	mov    DWORD PTR [eax],edi
c00111f8:	83 c4 1c             	add    esp,0x1c
c00111fb:	31 c0                	xor    eax,eax
c00111fd:	5b                   	pop    ebx
c00111fe:	5e                   	pop    esi
c00111ff:	5f                   	pop    edi
c0011200:	5d                   	pop    ebp
c0011201:	c3                   	ret    

c0011202 <newTerminal(char*)>:
c0011202:	83 ec 28             	sub    esp,0x28
c0011205:	68 60 12 00 00       	push   0x1260
c001120a:	e8 09 e4 ff ff       	call   c000f618 <malloc>
c001120f:	5a                   	pop    edx
c0011210:	59                   	pop    ecx
c0011211:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011215:	50                   	push   eax
c0011216:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001121a:	e8 15 fd ff ff       	call   c0010f34 <VgaText::VgaText(char const*)>
c001121f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011223:	83 c4 2c             	add    esp,0x2c
c0011226:	c3                   	ret    
c0011227:	90                   	nop

c0011228 <TSS::TSS()>:
c0011228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001122c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011233:	90                   	nop
c0011234:	c3                   	ret    
c0011235:	90                   	nop

c0011236 <TSS::setESP(unsigned long)>:
c0011236:	55                   	push   ebp
c0011237:	89 e5                	mov    ebp,esp
c0011239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001123c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001123f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011242:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011245:	90                   	nop
c0011246:	5d                   	pop    ebp
c0011247:	c3                   	ret    

c0011248 <TSS::flush()>:
c0011248:	55                   	push   ebp
c0011249:	89 e5                	mov    ebp,esp
c001124b:	83 ec 10             	sub    esp,0x10
c001124e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011251:	8b 00                	mov    eax,DWORD PTR [eax]
c0011253:	83 c8 03             	or     eax,0x3
c0011256:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001125a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001125e:	66 89 d0             	mov    ax,dx
c0011261:	0f 00 d8             	ltr    ax
c0011264:	90                   	nop
c0011265:	c9                   	leave  
c0011266:	c3                   	ret    
c0011267:	90                   	nop

c0011268 <TSS::setup(unsigned long, unsigned long)>:
c0011268:	55                   	push   ebp
c0011269:	89 e5                	mov    ebp,esp
c001126b:	83 ec 18             	sub    esp,0x18
c001126e:	83 ec 0c             	sub    esp,0xc
c0011271:	6a 68                	push   0x68
c0011273:	e8 a0 e3 ff ff       	call   c000f618 <malloc>
c0011278:	83 c4 10             	add    esp,0x10
c001127b:	89 c2                	mov    edx,eax
c001127d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011280:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011286:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011289:	83 ec 04             	sub    esp,0x4
c001128c:	6a 68                	push   0x68
c001128e:	6a 00                	push   0x0
c0011290:	50                   	push   eax
c0011291:	e8 22 f4 fe ff       	call   c00006b8 <memset>
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001129c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001129f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00112a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ab:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00112b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112b7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00112ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112c3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00112c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112cf:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00112d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112db:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00112e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112e7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00112ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00112f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ff:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011308:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001130b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001130e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011314:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011317:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001131a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001131d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011320:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011323:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001132a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001132d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011330:	0f 20 da             	mov    edx,cr3
c0011333:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011336:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011339:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001133c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001133f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011342:	83 ec 08             	sub    esp,0x8
c0011345:	50                   	push   eax
c0011346:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011349:	50                   	push   eax
c001134a:	e8 a7 da ff ff       	call   c000edf6 <GDTEntry::setBase(unsigned int)>
c001134f:	83 c4 10             	add    esp,0x10
c0011352:	83 ec 08             	sub    esp,0x8
c0011355:	6a 68                	push   0x68
c0011357:	8d 45 ec             	lea    eax,[ebp-0x14]
c001135a:	50                   	push   eax
c001135b:	e8 b2 da ff ff       	call   c000ee12 <GDTEntry::setLimit(unsigned int)>
c0011360:	83 c4 10             	add    esp,0x10
c0011363:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011367:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001136a:	83 e0 0f             	and    eax,0xf
c001136d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011370:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011373:	83 c8 40             	or     eax,0x40
c0011376:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011379:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001137e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011384:	05 78 01 00 00       	add    eax,0x178
c0011389:	83 ec 04             	sub    esp,0x4
c001138c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001138f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011392:	50                   	push   eax
c0011393:	e8 ae da ff ff       	call   c000ee46 <GDT::addEntry(GDTEntry)>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	89 c2                	mov    edx,eax
c001139d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113a0:	89 10                	mov    DWORD PTR [eax],edx
c00113a2:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00113a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113ad:	05 78 01 00 00       	add    eax,0x178
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	50                   	push   eax
c00113b6:	e8 cf da ff ff       	call   c000ee8a <GDT::flush()>
c00113bb:	83 c4 10             	add    esp,0x10
c00113be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00113c3:	83 ec 08             	sub    esp,0x8
c00113c6:	50                   	push   eax
c00113c7:	68 e8 9b 02 c0       	push   0xc0029be8
c00113cc:	e8 16 15 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00113d1:	83 c4 10             	add    esp,0x10
c00113d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00113d9:	c9                   	leave  
c00113da:	c3                   	ret    
c00113db:	90                   	nop

c00113dc <ReservedFilename::read(unsigned long long, void*, int*)>:
c00113dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00113ec:	75 08                	jne    c00113f6 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00113ee:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00113f4:	eb 38                	jmp    c001142e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00113f6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00113fb:	75 17                	jne    c0011414 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00113fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011402:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011405:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001140b:	8b 10                	mov    edx,DWORD PTR [eax]
c001140d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011411:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011414:	89 c1                	mov    ecx,eax
c0011416:	83 e1 fd             	and    ecx,0xfffffffd
c0011419:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001141f:	74 cd                	je     c00113ee <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011421:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011426:	83 e0 ef             	and    eax,0xffffffef
c0011429:	83 f8 08             	cmp    eax,0x8
c001142c:	76 c0                	jbe    c00113ee <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001142e:	31 c0                	xor    eax,eax
c0011430:	c3                   	ret    
c0011431:	90                   	nop

c0011432 <ReservedFilename::isAtty()>:
c0011432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011436:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011439:	31 c0                	xor    eax,eax
c001143b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011441:	74 09                	je     c001144c <ReservedFilename::isAtty()+0x1a>
c0011443:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011449:	0f 94 c0             	sete   al
c001144c:	c3                   	ret    
c001144d:	90                   	nop

c001144e <ReservedFilename::write(unsigned long long, void*, int*)>:
c001144e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011452:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011456:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001145d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011462:	75 08                	jne    c001146c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011464:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001146a:	eb 3d                	jmp    c00114a9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001146c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011471:	75 17                	jne    c001148a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011478:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001147b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011481:	8b 10                	mov    edx,DWORD PTR [eax]
c0011483:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011487:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001148a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001148f:	75 04                	jne    c0011495 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011491:	89 0a                	mov    DWORD PTR [edx],ecx
c0011493:	eb 14                	jmp    c00114a9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011495:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001149a:	74 c8                	je     c0011464 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001149c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00114a1:	83 e0 ef             	and    eax,0xffffffef
c00114a4:	83 f8 08             	cmp    eax,0x8
c00114a7:	76 bb                	jbe    c0011464 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114a9:	31 c0                	xor    eax,eax
c00114ab:	c3                   	ret    

c00114ac <UnixFile::getFileDescriptor()>:
c00114ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b3:	c3                   	ret    

c00114b4 <UnixFile::UnixFile(int)>:
c00114b4:	53                   	push   ebx
c00114b5:	83 ec 28             	sub    esp,0x28
c00114b8:	ba d4 9c 02 c0       	mov    edx,0xc0029cd4
c00114bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114c1:	89 10                	mov    DWORD PTR [eax],edx
c00114c3:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00114cb:	0f 8f 8c 01 00 00    	jg     c001165d <UnixFile::UnixFile(int)+0x1a9>
c00114d1:	a1 60 ca 02 c0       	mov    eax,ds:0xc002ca60
c00114d6:	8d 50 01             	lea    edx,[eax+0x1]
c00114d9:	89 15 60 ca 02 c0    	mov    DWORD PTR ds:0xc002ca60,edx
c00114df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114e3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114e6:	83 ec 08             	sub    esp,0x8
c00114e9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00114ed:	68 38 dc 02 c0       	push   0xc002dc38
c00114f2:	e8 c9 69 01 00       	call   c0027ec0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00114f7:	83 c4 10             	add    esp,0x10
c00114fa:	a0 34 dc 02 c0       	mov    al,ds:0xc002dc34
c00114ff:	83 f0 01             	xor    eax,0x1
c0011502:	84 c0                	test   al,al
c0011504:	0f 84 54 01 00 00    	je     c001165e <UnixFile::UnixFile(int)+0x1aa>
c001150a:	c6 05 34 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc34,0x1
c0011511:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011519:	83 ec 0c             	sub    esp,0xc
c001151c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011520:	e8 f3 e0 ff ff       	call   c000f618 <malloc>
c0011525:	83 c4 10             	add    esp,0x10
c0011528:	89 c3                	mov    ebx,eax
c001152a:	83 ec 08             	sub    esp,0x8
c001152d:	68 03 ff ff 0f       	push   0xfffff03
c0011532:	53                   	push   ebx
c0011533:	e8 2c 01 00 00       	call   c0011664 <ReservedFilename::ReservedFilename(int)>
c0011538:	83 c4 10             	add    esp,0x10
c001153b:	89 1d 2c dc 02 c0    	mov    DWORD PTR ds:0xc002dc2c,ebx
c0011541:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011549:	83 ec 0c             	sub    esp,0xc
c001154c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011550:	e8 c3 e0 ff ff       	call   c000f618 <malloc>
c0011555:	83 c4 10             	add    esp,0x10
c0011558:	89 c3                	mov    ebx,eax
c001155a:	83 ec 08             	sub    esp,0x8
c001155d:	68 01 ff ff 0f       	push   0xfffff01
c0011562:	53                   	push   ebx
c0011563:	e8 fc 00 00 00       	call   c0011664 <ReservedFilename::ReservedFilename(int)>
c0011568:	83 c4 10             	add    esp,0x10
c001156b:	89 1d 30 dc 02 c0    	mov    DWORD PTR ds:0xc002dc30,ebx
c0011571:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011579:	83 ec 0c             	sub    esp,0xc
c001157c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011580:	e8 93 e0 ff ff       	call   c000f618 <malloc>
c0011585:	83 c4 10             	add    esp,0x10
c0011588:	89 c3                	mov    ebx,eax
c001158a:	83 ec 08             	sub    esp,0x8
c001158d:	68 00 ff ff 0f       	push   0xfffff00
c0011592:	53                   	push   ebx
c0011593:	e8 cc 00 00 00       	call   c0011664 <ReservedFilename::ReservedFilename(int)>
c0011598:	83 c4 10             	add    esp,0x10
c001159b:	89 1d 24 dc 02 c0    	mov    DWORD PTR ds:0xc002dc24,ebx
c00115a1:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00115a9:	83 ec 0c             	sub    esp,0xc
c00115ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115b0:	e8 63 e0 ff ff       	call   c000f618 <malloc>
c00115b5:	83 c4 10             	add    esp,0x10
c00115b8:	89 c3                	mov    ebx,eax
c00115ba:	83 ec 08             	sub    esp,0x8
c00115bd:	68 02 ff ff 0f       	push   0xfffff02
c00115c2:	53                   	push   ebx
c00115c3:	e8 9c 00 00 00       	call   c0011664 <ReservedFilename::ReservedFilename(int)>
c00115c8:	83 c4 10             	add    esp,0x10
c00115cb:	89 1d 28 dc 02 c0    	mov    DWORD PTR ds:0xc002dc28,ebx
c00115d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00115d9:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00115de:	7f 7e                	jg     c001165e <UnixFile::UnixFile(int)+0x1aa>
c00115e0:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00115e8:	83 ec 0c             	sub    esp,0xc
c00115eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00115ef:	e8 24 e0 ff ff       	call   c000f618 <malloc>
c00115f4:	83 c4 10             	add    esp,0x10
c00115f7:	89 c3                	mov    ebx,eax
c00115f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115fd:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011602:	83 ec 08             	sub    esp,0x8
c0011605:	50                   	push   eax
c0011606:	53                   	push   ebx
c0011607:	e8 58 00 00 00       	call   c0011664 <ReservedFilename::ReservedFilename(int)>
c001160c:	83 c4 10             	add    esp,0x10
c001160f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011613:	89 1c 85 00 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2400],ebx
c001161a:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011622:	83 ec 0c             	sub    esp,0xc
c0011625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011629:	e8 ea df ff ff       	call   c000f618 <malloc>
c001162e:	83 c4 10             	add    esp,0x10
c0011631:	89 c3                	mov    ebx,eax
c0011633:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011637:	05 20 ff ff 0f       	add    eax,0xfffff20
c001163c:	83 ec 08             	sub    esp,0x8
c001163f:	50                   	push   eax
c0011640:	53                   	push   ebx
c0011641:	e8 1e 00 00 00       	call   c0011664 <ReservedFilename::ReservedFilename(int)>
c0011646:	83 c4 10             	add    esp,0x10
c0011649:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001164d:	89 1c 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],ebx
c0011654:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011658:	e9 7c ff ff ff       	jmp    c00115d9 <UnixFile::UnixFile(int)+0x125>
c001165d:	90                   	nop
c001165e:	83 c4 28             	add    esp,0x28
c0011661:	5b                   	pop    ebx
c0011662:	c3                   	ret    
c0011663:	90                   	nop

c0011664 <ReservedFilename::ReservedFilename(int)>:
c0011664:	83 ec 0c             	sub    esp,0xc
c0011667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001166b:	83 ec 08             	sub    esp,0x8
c001166e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011672:	50                   	push   eax
c0011673:	e8 3c fe ff ff       	call   c00114b4 <UnixFile::UnixFile(int)>
c0011678:	83 c4 10             	add    esp,0x10
c001167b:	ba f0 9c 02 c0       	mov    edx,0xc0029cf0
c0011680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011684:	89 10                	mov    DWORD PTR [eax],edx
c0011686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001168a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001168e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011691:	90                   	nop
c0011692:	83 c4 0c             	add    esp,0xc
c0011695:	c3                   	ret    

c0011696 <UnixFile::~UnixFile()>:
c0011696:	83 ec 1c             	sub    esp,0x1c
c0011699:	ba d4 9c 02 c0       	mov    edx,0xc0029cd4
c001169e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116a2:	89 10                	mov    DWORD PTR [eax],edx
c00116a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ab:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00116b0:	7f 73                	jg     c0011725 <UnixFile::~UnixFile()+0x8f>
c00116b2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116ba:	83 ec 0c             	sub    esp,0xc
c00116bd:	68 38 dc 02 c0       	push   0xc002dc38
c00116c2:	e8 cd 68 01 00       	call   c0027f94 <LinkedList<UnixFile>::getFirstElement()>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116ce:	83 ec 0c             	sub    esp,0xc
c00116d1:	68 38 dc 02 c0       	push   0xc002dc38
c00116d6:	e8 c1 68 01 00       	call   c0027f9c <LinkedList<UnixFile>::removeFirst()>
c00116db:	83 c4 10             	add    esp,0x10
c00116de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116e2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00116e6:	74 40                	je     c0011728 <UnixFile::~UnixFile()+0x92>
c00116e8:	83 ec 08             	sub    esp,0x8
c00116eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116ef:	68 38 dc 02 c0       	push   0xc002dc38
c00116f4:	e8 c7 67 01 00       	call   c0027ec0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00116f9:	83 c4 10             	add    esp,0x10
c00116fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011700:	8d 50 01             	lea    edx,[eax+0x1]
c0011703:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011707:	3d 88 13 00 00       	cmp    eax,0x1388
c001170c:	0f 94 c0             	sete   al
c001170f:	84 c0                	test   al,al
c0011711:	74 a7                	je     c00116ba <UnixFile::~UnixFile()+0x24>
c0011713:	83 ec 0c             	sub    esp,0xc
c0011716:	68 ac 9c 02 c0       	push   0xc0029cac
c001171b:	e8 3b 87 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0011720:	83 c4 10             	add    esp,0x10
c0011723:	eb 95                	jmp    c00116ba <UnixFile::~UnixFile()+0x24>
c0011725:	90                   	nop
c0011726:	eb 01                	jmp    c0011729 <UnixFile::~UnixFile()+0x93>
c0011728:	90                   	nop
c0011729:	90                   	nop
c001172a:	83 c4 1c             	add    esp,0x1c
c001172d:	c3                   	ret    

c001172e <UnixFile::~UnixFile()>:
c001172e:	83 ec 0c             	sub    esp,0xc
c0011731:	83 ec 0c             	sub    esp,0xc
c0011734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011738:	e8 59 ff ff ff       	call   c0011696 <UnixFile::~UnixFile()>
c001173d:	83 c4 10             	add    esp,0x10
c0011740:	83 ec 08             	sub    esp,0x8
c0011743:	6a 0c                	push   0xc
c0011745:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011749:	e8 b9 10 00 00       	call   c0012807 <operator delete(void*, unsigned long)>
c001174e:	83 c4 10             	add    esp,0x10
c0011751:	83 c4 0c             	add    esp,0xc
c0011754:	c3                   	ret    
c0011755:	90                   	nop

c0011756 <ReservedFilename::~ReservedFilename()>:
c0011756:	83 ec 0c             	sub    esp,0xc
c0011759:	ba f0 9c 02 c0       	mov    edx,0xc0029cf0
c001175e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011762:	89 10                	mov    DWORD PTR [eax],edx
c0011764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011768:	83 ec 0c             	sub    esp,0xc
c001176b:	50                   	push   eax
c001176c:	e8 25 ff ff ff       	call   c0011696 <UnixFile::~UnixFile()>
c0011771:	83 c4 10             	add    esp,0x10
c0011774:	90                   	nop
c0011775:	83 c4 0c             	add    esp,0xc
c0011778:	c3                   	ret    
c0011779:	90                   	nop

c001177a <ReservedFilename::~ReservedFilename()>:
c001177a:	83 ec 0c             	sub    esp,0xc
c001177d:	83 ec 0c             	sub    esp,0xc
c0011780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011784:	e8 cd ff ff ff       	call   c0011756 <ReservedFilename::~ReservedFilename()>
c0011789:	83 c4 10             	add    esp,0x10
c001178c:	83 ec 08             	sub    esp,0x8
c001178f:	6a 0c                	push   0xc
c0011791:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011795:	e8 6d 10 00 00       	call   c0012807 <operator delete(void*, unsigned long)>
c001179a:	83 c4 10             	add    esp,0x10
c001179d:	83 c4 0c             	add    esp,0xc
c00117a0:	c3                   	ret    

c00117a1 <getFromFileDescriptor(int)>:
c00117a1:	53                   	push   ebx
c00117a2:	83 ec 08             	sub    esp,0x8
c00117a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117a9:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00117af:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00117b5:	7f 2c                	jg     c00117e3 <getFromFileDescriptor(int)+0x42>
c00117b7:	83 ec 0c             	sub    esp,0xc
c00117ba:	68 38 dc 02 c0       	push   0xc002dc38
c00117bf:	e8 d0 67 01 00       	call   c0027f94 <LinkedList<UnixFile>::getFirstElement()>
c00117c4:	83 c4 10             	add    esp,0x10
c00117c7:	85 c0                	test   eax,eax
c00117c9:	75 04                	jne    c00117cf <getFromFileDescriptor(int)+0x2e>
c00117cb:	31 c0                	xor    eax,eax
c00117cd:	eb 6e                	jmp    c001183d <getFromFileDescriptor(int)+0x9c>
c00117cf:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00117d2:	74 69                	je     c001183d <getFromFileDescriptor(int)+0x9c>
c00117d4:	52                   	push   edx
c00117d5:	52                   	push   edx
c00117d6:	50                   	push   eax
c00117d7:	68 38 dc 02 c0       	push   0xc002dc38
c00117dc:	e8 5d 68 01 00       	call   c002803e <LinkedList<UnixFile>::getNext(UnixFile*)>
c00117e1:	eb e1                	jmp    c00117c4 <getFromFileDescriptor(int)+0x23>
c00117e3:	a1 2c dc 02 c0       	mov    eax,ds:0xc002dc2c
c00117e8:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00117ee:	74 4d                	je     c001183d <getFromFileDescriptor(int)+0x9c>
c00117f0:	a1 30 dc 02 c0       	mov    eax,ds:0xc002dc30
c00117f5:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00117fb:	74 40                	je     c001183d <getFromFileDescriptor(int)+0x9c>
c00117fd:	a1 28 dc 02 c0       	mov    eax,ds:0xc002dc28
c0011802:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011808:	74 33                	je     c001183d <getFromFileDescriptor(int)+0x9c>
c001180a:	a1 24 dc 02 c0       	mov    eax,ds:0xc002dc24
c001180f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011815:	74 26                	je     c001183d <getFromFileDescriptor(int)+0x9c>
c0011817:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001181d:	83 f8 08             	cmp    eax,0x8
c0011820:	77 09                	ja     c001182b <getFromFileDescriptor(int)+0x8a>
c0011822:	8b 04 85 00 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2400]
c0011829:	eb 12                	jmp    c001183d <getFromFileDescriptor(int)+0x9c>
c001182b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011831:	83 fb 08             	cmp    ebx,0x8
c0011834:	77 95                	ja     c00117cb <getFromFileDescriptor(int)+0x2a>
c0011836:	8b 04 9d c0 db 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2440]
c001183d:	83 c4 08             	add    esp,0x8
c0011840:	5b                   	pop    ebx
c0011841:	c3                   	ret    

c0011842 <__static_initialization_and_destruction_0(int, int)>:
c0011842:	83 ec 0c             	sub    esp,0xc
c0011845:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001184a:	75 34                	jne    c0011880 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001184c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011854:	75 2a                	jne    c0011880 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011856:	83 ec 0c             	sub    esp,0xc
c0011859:	68 38 dc 02 c0       	push   0xc002dc38
c001185e:	e8 05 66 01 00       	call   c0027e68 <LinkedList<UnixFile>::LinkedList()>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	83 ec 04             	sub    esp,0x4
c0011869:	68 ec c9 02 c0       	push   0xc002c9ec
c001186e:	68 38 dc 02 c0       	push   0xc002dc38
c0011873:	68 66 7e 02 c0       	push   0xc0027e66
c0011878:	e8 04 0f 00 00       	call   c0012781 <__cxa_atexit>
c001187d:	83 c4 10             	add    esp,0x10
c0011880:	90                   	nop
c0011881:	83 c4 0c             	add    esp,0xc
c0011884:	c3                   	ret    

c0011885 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011885:	83 ec 0c             	sub    esp,0xc
c0011888:	83 ec 08             	sub    esp,0x8
c001188b:	68 ff ff 00 00       	push   0xffff
c0011890:	6a 01                	push   0x1
c0011892:	e8 ab ff ff ff       	call   c0011842 <__static_initialization_and_destruction_0(int, int)>
c0011897:	83 c4 10             	add    esp,0x10
c001189a:	83 c4 0c             	add    esp,0xc
c001189d:	c3                   	ret    

c001189e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001189e:	53                   	push   ebx
c001189f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00118a7:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00118ad:	89 c8                	mov    eax,ecx
c00118af:	d1 e8                	shr    eax,1
c00118b1:	03 05 68 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca68
c00118b7:	83 e1 01             	and    ecx,0x1
c00118ba:	8a 10                	mov    dl,BYTE PTR [eax]
c00118bc:	75 09                	jne    c00118c7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00118be:	83 e2 f0             	and    edx,0xfffffff0
c00118c1:	09 da                	or     edx,ebx
c00118c3:	88 10                	mov    BYTE PTR [eax],dl
c00118c5:	5b                   	pop    ebx
c00118c6:	c3                   	ret    
c00118c7:	c1 e3 04             	shl    ebx,0x4
c00118ca:	83 e2 0f             	and    edx,0xf
c00118cd:	09 da                	or     edx,ebx
c00118cf:	88 10                	mov    BYTE PTR [eax],dl
c00118d1:	5b                   	pop    ebx
c00118d2:	c3                   	ret    

c00118d3 <Virt::getPageState(unsigned long)>:
c00118d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d7:	8b 0d 68 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca68
c00118dd:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00118e3:	89 d0                	mov    eax,edx
c00118e5:	d1 e8                	shr    eax,1
c00118e7:	83 e2 01             	and    edx,0x1
c00118ea:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00118ed:	75 04                	jne    c00118f3 <Virt::getPageState(unsigned long)+0x20>
c00118ef:	83 e0 0f             	and    eax,0xf
c00118f2:	c3                   	ret    
c00118f3:	c0 e8 04             	shr    al,0x4
c00118f6:	c3                   	ret    

c00118f7 <Virt::allocateKernelVirtualPages(int)>:
c00118f7:	55                   	push   ebp
c00118f8:	31 ed                	xor    ebp,ebp
c00118fa:	57                   	push   edi
c00118fb:	56                   	push   esi
c00118fc:	53                   	push   ebx
c00118fd:	31 db                	xor    ebx,ebx
c00118ff:	83 ec 1c             	sub    esp,0x1c
c0011902:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011906:	8b 3d 64 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca64
c001190c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011911:	57                   	push   edi
c0011912:	e8 bc ff ff ff       	call   c00118d3 <Virt::getPageState(unsigned long)>
c0011917:	5a                   	pop    edx
c0011918:	84 c0                	test   al,al
c001191a:	75 3a                	jne    c0011956 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001191c:	85 db                	test   ebx,ebx
c001191e:	75 02                	jne    c0011922 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011920:	89 fd                	mov    ebp,edi
c0011922:	43                   	inc    ebx
c0011923:	39 f3                	cmp    ebx,esi
c0011925:	74 5a                	je     c0011981 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011927:	47                   	inc    edi
c0011928:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001192e:	76 31                	jbe    c0011961 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011930:	c7 05 64 ca 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002ca64,0xc8000
c001193a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001193f:	75 28                	jne    c0011969 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011941:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011946:	bf 00 80 0c 00       	mov    edi,0xc8000
c001194b:	57                   	push   edi
c001194c:	e8 82 ff ff ff       	call   c00118d3 <Virt::getPageState(unsigned long)>
c0011951:	5a                   	pop    edx
c0011952:	84 c0                	test   al,al
c0011954:	74 c6                	je     c001191c <Virt::allocateKernelVirtualPages(int)+0x25>
c0011956:	31 db                	xor    ebx,ebx
c0011958:	47                   	inc    edi
c0011959:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001195f:	77 cf                	ja     c0011930 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011961:	89 3d 64 ca 02 c0    	mov    DWORD PTR ds:0xc002ca64,edi
c0011967:	eb a8                	jmp    c0011911 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011969:	83 ec 0c             	sub    esp,0xc
c001196c:	68 04 9d 02 c0       	push   0xc0029d04
c0011971:	e8 e5 84 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0011976:	8b 3d 64 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca64
c001197c:	83 c4 10             	add    esp,0x10
c001197f:	eb 90                	jmp    c0011911 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011981:	89 2d 64 ca 02 c0    	mov    DWORD PTR ds:0xc002ca64,ebp
c0011987:	4b                   	dec    ebx
c0011988:	74 5f                	je     c00119e9 <Virt::allocateKernelVirtualPages(int)+0xf2>
c001198a:	85 f6                	test   esi,esi
c001198c:	74 3d                	je     c00119cb <Virt::allocateKernelVirtualPages(int)+0xd4>
c001198e:	89 e8                	mov    eax,ebp
c0011990:	31 db                	xor    ebx,ebx
c0011992:	8d 7e ff             	lea    edi,[esi-0x1]
c0011995:	eb 14                	jmp    c00119ab <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011997:	6a 01                	push   0x1
c0011999:	43                   	inc    ebx
c001199a:	50                   	push   eax
c001199b:	e8 fe fe ff ff       	call   c001189e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119a0:	58                   	pop    eax
c00119a1:	39 f3                	cmp    ebx,esi
c00119a3:	5a                   	pop    edx
c00119a4:	74 25                	je     c00119cb <Virt::allocateKernelVirtualPages(int)+0xd4>
c00119a6:	a1 64 ca 02 c0       	mov    eax,ds:0xc002ca64
c00119ab:	8d 50 01             	lea    edx,[eax+0x1]
c00119ae:	85 db                	test   ebx,ebx
c00119b0:	89 15 64 ca 02 c0    	mov    DWORD PTR ds:0xc002ca64,edx
c00119b6:	74 20                	je     c00119d8 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00119b8:	39 df                	cmp    edi,ebx
c00119ba:	75 db                	jne    c0011997 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00119bc:	6a 03                	push   0x3
c00119be:	43                   	inc    ebx
c00119bf:	50                   	push   eax
c00119c0:	e8 d9 fe ff ff       	call   c001189e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119c5:	59                   	pop    ecx
c00119c6:	39 f3                	cmp    ebx,esi
c00119c8:	58                   	pop    eax
c00119c9:	75 db                	jne    c00119a6 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119cb:	83 c4 1c             	add    esp,0x1c
c00119ce:	89 e8                	mov    eax,ebp
c00119d0:	5b                   	pop    ebx
c00119d1:	c1 e0 0c             	shl    eax,0xc
c00119d4:	5e                   	pop    esi
c00119d5:	5f                   	pop    edi
c00119d6:	5d                   	pop    ebp
c00119d7:	c3                   	ret    
c00119d8:	6a 02                	push   0x2
c00119da:	bb 01 00 00 00       	mov    ebx,0x1
c00119df:	50                   	push   eax
c00119e0:	e8 b9 fe ff ff       	call   c001189e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119e5:	58                   	pop    eax
c00119e6:	5a                   	pop    edx
c00119e7:	eb bd                	jmp    c00119a6 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119e9:	6a 04                	push   0x4
c00119eb:	8d 45 01             	lea    eax,[ebp+0x1]
c00119ee:	55                   	push   ebp
c00119ef:	a3 64 ca 02 c0       	mov    ds:0xc002ca64,eax
c00119f4:	e8 a5 fe ff ff       	call   c001189e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119f9:	59                   	pop    ecx
c00119fa:	89 e8                	mov    eax,ebp
c00119fc:	5b                   	pop    ebx
c00119fd:	c1 e0 0c             	shl    eax,0xc
c0011a00:	83 c4 1c             	add    esp,0x1c
c0011a03:	5b                   	pop    ebx
c0011a04:	5e                   	pop    esi
c0011a05:	5f                   	pop    edi
c0011a06:	5d                   	pop    ebp
c0011a07:	c3                   	ret    

c0011a08 <Virt::virtualMemorySetup()>:
c0011a08:	53                   	push   ebx
c0011a09:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a0e:	83 ec 08             	sub    esp,0x8
c0011a11:	6a 0f                	push   0xf
c0011a13:	53                   	push   ebx
c0011a14:	43                   	inc    ebx
c0011a15:	e8 84 fe ff ff       	call   c001189e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a1a:	59                   	pop    ecx
c0011a1b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a21:	58                   	pop    eax
c0011a22:	75 ed                	jne    c0011a11 <Virt::virtualMemorySetup()+0x9>
c0011a24:	83 ec 08             	sub    esp,0x8
c0011a27:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a2c:	68 00 00 00 c8       	push   0xc8000000
c0011a31:	68 8b 9e 02 c0       	push   0xc0029e8b
c0011a36:	e8 ac 0e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0011a3b:	58                   	pop    eax
c0011a3c:	5a                   	pop    edx
c0011a3d:	68 00 f0 ff ef       	push   0xeffff000
c0011a42:	68 9f 9e 02 c0       	push   0xc0029e9f
c0011a47:	e8 9b 0e 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0011a4c:	83 c4 10             	add    esp,0x10
c0011a4f:	83 ec 08             	sub    esp,0x8
c0011a52:	6a 00                	push   0x0
c0011a54:	53                   	push   ebx
c0011a55:	43                   	inc    ebx
c0011a56:	e8 43 fe ff ff       	call   c001189e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a5b:	83 c4 10             	add    esp,0x10
c0011a5e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a64:	75 e9                	jne    c0011a4f <Virt::virtualMemorySetup()+0x47>
c0011a66:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011a6b:	83 ec 08             	sub    esp,0x8
c0011a6e:	6a 0f                	push   0xf
c0011a70:	53                   	push   ebx
c0011a71:	43                   	inc    ebx
c0011a72:	e8 27 fe ff ff       	call   c001189e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a77:	83 c4 10             	add    esp,0x10
c0011a7a:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011a80:	75 e9                	jne    c0011a6b <Virt::virtualMemorySetup()+0x63>
c0011a82:	83 c4 08             	add    esp,0x8
c0011a85:	5b                   	pop    ebx
c0011a86:	c3                   	ret    

c0011a87 <Virt::getAKernelVAS()>:
c0011a87:	a1 44 dc 02 c0       	mov    eax,ds:0xc002dc44
c0011a8c:	c3                   	ret    

c0011a8d <Virt::setupPageSwapping(int)>:
c0011a8d:	57                   	push   edi
c0011a8e:	56                   	push   esi
c0011a8f:	53                   	push   ebx
c0011a90:	83 ec 1c             	sub    esp,0x1c
c0011a93:	68 14 01 00 00       	push   0x114
c0011a98:	e8 7b db ff ff       	call   c000f618 <malloc>
c0011a9d:	83 c4 0c             	add    esp,0xc
c0011aa0:	89 c6                	mov    esi,eax
c0011aa2:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c0011aa8:	68 b3 9e 02 c0       	push   0xc0029eb3
c0011aad:	50                   	push   eax
c0011aae:	e8 8d 13 00 00       	call   c0012e40 <File::File(char const*, Process*)>
c0011ab3:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ab6:	e8 61 15 00 00       	call   c001301c <File::unlink()>
c0011abb:	58                   	pop    eax
c0011abc:	5a                   	pop    edx
c0011abd:	6a 12                	push   0x12
c0011abf:	56                   	push   esi
c0011ac0:	e8 df 13 00 00       	call   c0012ea4 <File::open(FileOpenMode)>
c0011ac5:	83 c4 10             	add    esp,0x10
c0011ac8:	85 c0                	test   eax,eax
c0011aca:	0f 85 ca 00 00 00    	jne    c0011b9a <Virt::setupPageSwapping(int)+0x10d>
c0011ad0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ad4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011adc:	c1 e3 08             	shl    ebx,0x8
c0011adf:	83 ec 0c             	sub    esp,0xc
c0011ae2:	68 00 00 01 00       	push   0x10000
c0011ae7:	e8 2c db ff ff       	call   c000f618 <malloc>
c0011aec:	83 c4 0c             	add    esp,0xc
c0011aef:	89 c7                	mov    edi,eax
c0011af1:	68 00 00 01 00       	push   0x10000
c0011af6:	6a 00                	push   0x0
c0011af8:	50                   	push   eax
c0011af9:	e8 ba eb fe ff       	call   c00006b8 <memset>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	85 db                	test   ebx,ebx
c0011b03:	79 03                	jns    c0011b08 <Virt::setupPageSwapping(int)+0x7b>
c0011b05:	83 c3 0f             	add    ebx,0xf
c0011b08:	c1 fb 04             	sar    ebx,0x4
c0011b0b:	4b                   	dec    ebx
c0011b0c:	83 fb ff             	cmp    ebx,0xffffffff
c0011b0f:	74 4b                	je     c0011b5c <Virt::setupPageSwapping(int)+0xcf>
c0011b11:	83 ec 0c             	sub    esp,0xc
c0011b14:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b16:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b1a:	52                   	push   edx
c0011b1b:	57                   	push   edi
c0011b1c:	6a 00                	push   0x0
c0011b1e:	68 00 00 01 00       	push   0x10000
c0011b23:	56                   	push   esi
c0011b24:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b27:	83 c4 20             	add    esp,0x20
c0011b2a:	85 c0                	test   eax,eax
c0011b2c:	75 59                	jne    c0011b87 <Virt::setupPageSwapping(int)+0xfa>
c0011b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b32:	3d 00 00 01 00       	cmp    eax,0x10000
c0011b37:	74 d2                	je     c0011b0b <Virt::setupPageSwapping(int)+0x7e>
c0011b39:	83 ec 08             	sub    esp,0x8
c0011b3c:	4b                   	dec    ebx
c0011b3d:	50                   	push   eax
c0011b3e:	68 06 9f 02 c0       	push   0xc0029f06
c0011b43:	e8 9f 0d 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0011b48:	c7 04 24 0f 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f0f
c0011b4f:	e8 07 83 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0011b54:	83 c4 10             	add    esp,0x10
c0011b57:	83 fb ff             	cmp    ebx,0xffffffff
c0011b5a:	75 b5                	jne    c0011b11 <Virt::setupPageSwapping(int)+0x84>
c0011b5c:	83 ec 0c             	sub    esp,0xc
c0011b5f:	56                   	push   esi
c0011b60:	e8 9d 13 00 00       	call   c0012f02 <File::close()>
c0011b65:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b68:	e8 cb da ff ff       	call   c000f638 <rfree>
c0011b6d:	83 c4 10             	add    esp,0x10
c0011b70:	85 f6                	test   esi,esi
c0011b72:	74 0c                	je     c0011b80 <Virt::setupPageSwapping(int)+0xf3>
c0011b74:	83 ec 0c             	sub    esp,0xc
c0011b77:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b79:	56                   	push   esi
c0011b7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b7d:	83 c4 10             	add    esp,0x10
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	5b                   	pop    ebx
c0011b84:	5e                   	pop    esi
c0011b85:	5f                   	pop    edi
c0011b86:	c3                   	ret    
c0011b87:	83 ec 08             	sub    esp,0x8
c0011b8a:	50                   	push   eax
c0011b8b:	68 ee 9e 02 c0       	push   0xc0029eee
c0011b90:	e8 52 0d 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0011b95:	83 c4 10             	add    esp,0x10
c0011b98:	eb 94                	jmp    c0011b2e <Virt::setupPageSwapping(int)+0xa1>
c0011b9a:	83 ec 08             	sub    esp,0x8
c0011b9d:	50                   	push   eax
c0011b9e:	68 ca 9e 02 c0       	push   0xc0029eca
c0011ba3:	e8 3f 0d 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0011ba8:	c7 04 24 d3 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ed3
c0011baf:	e8 a7 82 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0011bb4:	83 c4 10             	add    esp,0x10
c0011bb7:	e9 14 ff ff ff       	jmp    c0011ad0 <Virt::setupPageSwapping(int)+0x43>

c0011bbc <VAS::VAS()>:
c0011bbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bcb:	a3 44 dc 02 c0       	mov    ds:0xc002dc44,eax
c0011bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd4:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bdc:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011bdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be3:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011bea:	90                   	nop
c0011beb:	c3                   	ret    

c0011bec <VAS::VAS(VAS*)>:
c0011bec:	83 ec 0c             	sub    esp,0xc
c0011bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bf3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bfa:	83 ec 0c             	sub    esp,0xc
c0011bfd:	68 24 9d 02 c0       	push   0xc0029d24
c0011c02:	e8 54 82 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0011c07:	83 c4 10             	add    esp,0x10
c0011c0a:	90                   	nop
c0011c0b:	83 c4 0c             	add    esp,0xc
c0011c0e:	c3                   	ret    
c0011c0f:	90                   	nop

c0011c10 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011c10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c14:	89 c2                	mov    edx,eax
c0011c16:	c1 e8 0a             	shr    eax,0xa
c0011c19:	c1 ea 16             	shr    edx,0x16
c0011c1c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c21:	19 c9                	sbb    ecx,ecx
c0011c23:	c1 e2 0c             	shl    edx,0xc
c0011c26:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011c2c:	25 fc 0f 00 00       	and    eax,0xffc
c0011c31:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011c38:	01 d0                	add    eax,edx
c0011c3a:	c3                   	ret    
c0011c3b:	90                   	nop

c0011c3c <VAS::getPageTableEntry(unsigned long)>:
c0011c3c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c40:	89 ca                	mov    edx,ecx
c0011c42:	c1 e9 0a             	shr    ecx,0xa
c0011c45:	c1 ea 16             	shr    edx,0x16
c0011c48:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011c4e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011c54:	c1 e0 0c             	shl    eax,0xc
c0011c57:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011c5a:	c3                   	ret    

c0011c5b <Virt::freeKernelVirtualPages(unsigned long)>:
c0011c5b:	57                   	push   edi
c0011c5c:	56                   	push   esi
c0011c5d:	be 01 00 00 00       	mov    esi,0x1
c0011c62:	53                   	push   ebx
c0011c63:	83 ec 10             	sub    esp,0x10
c0011c66:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c6a:	c1 eb 0c             	shr    ebx,0xc
c0011c6d:	eb 3f                	jmp    c0011cae <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011c6f:	e8 13 fe ff ff       	call   c0011a87 <Virt::getAKernelVAS()>
c0011c74:	83 ec 08             	sub    esp,0x8
c0011c77:	57                   	push   edi
c0011c78:	50                   	push   eax
c0011c79:	e8 be ff ff ff       	call   c0011c3c <VAS::getPageTableEntry(unsigned long)>
c0011c7e:	83 c4 10             	add    esp,0x10
c0011c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c83:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c87:	f6 c4 04             	test   ah,0x4
c0011c8a:	75 5f                	jne    c0011ceb <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011c8c:	80 fa 04             	cmp    dl,0x4
c0011c8f:	74 78                	je     c0011d09 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011c91:	80 fa 02             	cmp    dl,0x2
c0011c94:	0f 84 88 00 00 00    	je     c0011d22 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011c9a:	80 fa 03             	cmp    dl,0x3
c0011c9d:	0f 84 ad 00 00 00    	je     c0011d50 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ca3:	fe ca                	dec    dl
c0011ca5:	0f 84 92 00 00 00    	je     c0011d3d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011cab:	43                   	inc    ebx
c0011cac:	31 f6                	xor    esi,esi
c0011cae:	53                   	push   ebx
c0011caf:	e8 1f fc ff ff       	call   c00118d3 <Virt::getPageState(unsigned long)>
c0011cb4:	5f                   	pop    edi
c0011cb5:	89 df                	mov    edi,ebx
c0011cb7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011cbb:	c1 e7 0c             	shl    edi,0xc
c0011cbe:	84 c0                	test   al,al
c0011cc0:	75 ad                	jne    c0011c6f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011cc2:	83 ec 0c             	sub    esp,0xc
c0011cc5:	68 15 9f 02 c0       	push   0xc0029f15
c0011cca:	e8 8c 81 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0011ccf:	e8 b3 fd ff ff       	call   c0011a87 <Virt::getAKernelVAS()>
c0011cd4:	5a                   	pop    edx
c0011cd5:	59                   	pop    ecx
c0011cd6:	57                   	push   edi
c0011cd7:	50                   	push   eax
c0011cd8:	e8 5f ff ff ff       	call   c0011c3c <VAS::getPageTableEntry(unsigned long)>
c0011cdd:	83 c4 10             	add    esp,0x10
c0011ce0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ce6:	f6 c4 04             	test   ah,0x4
c0011ce9:	74 c0                	je     c0011cab <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ceb:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011cef:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cf4:	83 ec 0c             	sub    esp,0xc
c0011cf7:	50                   	push   eax
c0011cf8:	e8 2e df ff ff       	call   c000fc2b <Phys::freePage(unsigned long)>
c0011cfd:	83 c4 10             	add    esp,0x10
c0011d00:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011d04:	80 fa 04             	cmp    dl,0x4
c0011d07:	75 88                	jne    c0011c91 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011d09:	89 f0                	mov    eax,esi
c0011d0b:	84 c0                	test   al,al
c0011d0d:	75 47                	jne    c0011d56 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011d0f:	c7 44 24 20 48 9d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029d48
c0011d17:	83 c4 10             	add    esp,0x10
c0011d1a:	5b                   	pop    ebx
c0011d1b:	5e                   	pop    esi
c0011d1c:	5f                   	pop    edi
c0011d1d:	e9 39 81 00 00       	jmp    c0019e5b <Krnl::panic(char const*)>
c0011d22:	89 f0                	mov    eax,esi
c0011d24:	84 c0                	test   al,al
c0011d26:	75 15                	jne    c0011d3d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011d28:	83 ec 0c             	sub    esp,0xc
c0011d2b:	68 31 9f 02 c0       	push   0xc0029f31
c0011d30:	e8 26 81 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0011d35:	83 c4 10             	add    esp,0x10
c0011d38:	e9 6e ff ff ff       	jmp    c0011cab <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d3d:	83 ec 08             	sub    esp,0x8
c0011d40:	6a 00                	push   0x0
c0011d42:	53                   	push   ebx
c0011d43:	e8 56 fb ff ff       	call   c001189e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d48:	83 c4 10             	add    esp,0x10
c0011d4b:	e9 5b ff ff ff       	jmp    c0011cab <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d50:	89 f0                	mov    eax,esi
c0011d52:	84 c0                	test   al,al
c0011d54:	75 15                	jne    c0011d6b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011d56:	83 ec 08             	sub    esp,0x8
c0011d59:	6a 00                	push   0x0
c0011d5b:	53                   	push   ebx
c0011d5c:	e8 3d fb ff ff       	call   c001189e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d61:	83 c4 10             	add    esp,0x10
c0011d64:	83 c4 10             	add    esp,0x10
c0011d67:	5b                   	pop    ebx
c0011d68:	5e                   	pop    esi
c0011d69:	5f                   	pop    edi
c0011d6a:	c3                   	ret    
c0011d6b:	c7 44 24 20 4d 9f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029f4d
c0011d73:	83 c4 10             	add    esp,0x10
c0011d76:	5b                   	pop    ebx
c0011d77:	5e                   	pop    esi
c0011d78:	5f                   	pop    edi
c0011d79:	e9 dd 80 00 00       	jmp    c0019e5b <Krnl::panic(char const*)>

c0011d7e <VAS::freeAllocatedPages(unsigned long)>:
c0011d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d86:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011d8a:	74 09                	je     c0011d95 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011d8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d90:	e9 c6 fe ff ff       	jmp    c0011c5b <Virt::freeKernelVirtualPages(unsigned long)>
c0011d95:	c7 44 24 04 6c 9d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029d6c
c0011d9d:	e9 45 0b 00 00       	jmp    c00128e7 <Dbg::kprintf(char const*, ...)>

c0011da2 <VAS::virtualToPhysical(unsigned long)>:
c0011da2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011da6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011daa:	e8 8d fe ff ff       	call   c0011c3c <VAS::getPageTableEntry(unsigned long)>
c0011daf:	5a                   	pop    edx
c0011db0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db2:	59                   	pop    ecx
c0011db3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011db8:	c3                   	ret    
c0011db9:	90                   	nop

c0011dba <VAS::reflagRange(unsigned long, int, int, int)>:
c0011dba:	55                   	push   ebp
c0011dbb:	57                   	push   edi
c0011dbc:	56                   	push   esi
c0011dbd:	53                   	push   ebx
c0011dbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011dc2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011dc6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011dca:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011dce:	85 db                	test   ebx,ebx
c0011dd0:	7e 22                	jle    c0011df4 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011dd2:	c1 e3 0c             	shl    ebx,0xc
c0011dd5:	01 f3                	add    ebx,esi
c0011dd7:	56                   	push   esi
c0011dd8:	81 c6 00 10 00 00    	add    esi,0x1000
c0011dde:	55                   	push   ebp
c0011ddf:	e8 58 fe ff ff       	call   c0011c3c <VAS::getPageTableEntry(unsigned long)>
c0011de4:	5a                   	pop    edx
c0011de5:	59                   	pop    ecx
c0011de6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011de8:	21 f9                	and    ecx,edi
c0011dea:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011dee:	39 f3                	cmp    ebx,esi
c0011df0:	89 08                	mov    DWORD PTR [eax],ecx
c0011df2:	75 e3                	jne    c0011dd7 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011df4:	5b                   	pop    ebx
c0011df5:	5e                   	pop    esi
c0011df6:	5f                   	pop    edi
c0011df7:	5d                   	pop    ebp
c0011df8:	c3                   	ret    
c0011df9:	90                   	nop

c0011dfa <VAS::setToWriteCombining(unsigned long, int)>:
c0011dfa:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0011dff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e05:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011e0c:	75 01                	jne    c0011e0f <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011e0e:	c3                   	ret    
c0011e0f:	68 80 00 00 00       	push   0x80
c0011e14:	6a ff                	push   0xffffffff
c0011e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e22:	e8 93 ff ff ff       	call   c0011dba <VAS::reflagRange(unsigned long, int, int, int)>
c0011e27:	83 c4 14             	add    esp,0x14
c0011e2a:	c3                   	ret    
c0011e2b:	90                   	nop

c0011e2c <VAS::mapOtherVASIn(bool, VAS*)>:
c0011e2c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e35:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e3c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011e3f:	19 c0                	sbb    eax,eax
c0011e41:	83 ca 03             	or     edx,0x3
c0011e44:	83 e0 fc             	and    eax,0xfffffffc
c0011e47:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011e4e:	0f 20 d8             	mov    eax,cr3
c0011e51:	0f 22 d8             	mov    cr3,eax
c0011e54:	c3                   	ret    
c0011e55:	90                   	nop

c0011e56 <VAS::~VAS()>:
c0011e56:	83 ec 2c             	sub    esp,0x2c
c0011e59:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e61:	e8 50 b6 00 00       	call   c001d4b6 <lockScheduler()>
c0011e66:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e70:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e76:	83 ec 04             	sub    esp,0x4
c0011e79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e7d:	6a 01                	push   0x1
c0011e7f:	50                   	push   eax
c0011e80:	e8 a7 ff ff ff       	call   c0011e2c <VAS::mapOtherVASIn(bool, VAS*)>
c0011e85:	83 c4 10             	add    esp,0x10
c0011e88:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e90:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011e98:	0f 8f d7 00 00 00    	jg     c0011f75 <VAS::~VAS()+0x11f>
c0011e9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ea5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ea9:	c1 e2 02             	shl    edx,0x2
c0011eac:	01 d0                	add    eax,edx
c0011eae:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb8:	83 e0 01             	and    eax,0x1
c0011ebb:	0f 84 ab 00 00 00    	je     c0011f6c <VAS::~VAS()+0x116>
c0011ec1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ec9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011ed1:	7f 75                	jg     c0011f48 <VAS::~VAS()+0xf2>
c0011ed3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ed7:	c1 e0 0a             	shl    eax,0xa
c0011eda:	89 c2                	mov    edx,eax
c0011edc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ee0:	01 d0                	add    eax,edx
c0011ee2:	c1 e0 0c             	shl    eax,0xc
c0011ee5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ee9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011eee:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ef0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ef3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011ef9:	83 ec 04             	sub    esp,0x4
c0011efc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f00:	6a 01                	push   0x1
c0011f02:	50                   	push   eax
c0011f03:	e8 08 fd ff ff       	call   c0011c10 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011f08:	83 c4 10             	add    esp,0x10
c0011f0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f13:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f1d:	25 01 04 00 00       	and    eax,0x401
c0011f22:	3d 01 04 00 00       	cmp    eax,0x401
c0011f27:	75 19                	jne    c0011f42 <VAS::~VAS()+0xec>
c0011f29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f2d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f32:	83 ec 0c             	sub    esp,0xc
c0011f35:	50                   	push   eax
c0011f36:	e8 f0 dc ff ff       	call   c000fc2b <Phys::freePage(unsigned long)>
c0011f3b:	83 c4 10             	add    esp,0x10
c0011f3e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f42:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011f46:	eb 81                	jmp    c0011ec9 <VAS::~VAS()+0x73>
c0011f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f4c:	25 00 04 00 00       	and    eax,0x400
c0011f51:	74 19                	je     c0011f6c <VAS::~VAS()+0x116>
c0011f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f57:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f5c:	83 ec 0c             	sub    esp,0xc
c0011f5f:	50                   	push   eax
c0011f60:	e8 c6 dc ff ff       	call   c000fc2b <Phys::freePage(unsigned long)>
c0011f65:	83 c4 10             	add    esp,0x10
c0011f68:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f6c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f70:	e9 1b ff ff ff       	jmp    c0011e90 <VAS::~VAS()+0x3a>
c0011f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f7c:	83 ec 0c             	sub    esp,0xc
c0011f7f:	50                   	push   eax
c0011f80:	e8 d6 fc ff ff       	call   c0011c5b <Virt::freeKernelVirtualPages(unsigned long)>
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f8f:	83 ec 0c             	sub    esp,0xc
c0011f92:	50                   	push   eax
c0011f93:	e8 93 dc ff ff       	call   c000fc2b <Phys::freePage(unsigned long)>
c0011f98:	83 c4 10             	add    esp,0x10
c0011f9b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fa3:	c1 e0 02             	shl    eax,0x2
c0011fa6:	83 ec 08             	sub    esp,0x8
c0011fa9:	50                   	push   eax
c0011faa:	68 90 9d 02 c0       	push   0xc0029d90
c0011faf:	e8 33 09 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0011fb4:	83 c4 10             	add    esp,0x10
c0011fb7:	e8 fc b4 00 00       	call   c001d4b8 <unlockScheduler()>
c0011fbc:	90                   	nop
c0011fbd:	83 c4 2c             	add    esp,0x2c
c0011fc0:	c3                   	ret    
c0011fc1:	90                   	nop

c0011fc2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011fc2:	55                   	push   ebp
c0011fc3:	57                   	push   edi
c0011fc4:	56                   	push   esi
c0011fc5:	53                   	push   ebx
c0011fc6:	83 ec 1c             	sub    esp,0x1c
c0011fc9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011fcd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fd1:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011fd7:	77 08                	ja     c0011fe1 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011fd9:	0f 20 d8             	mov    eax,cr3
c0011fdc:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011fdf:	75 47                	jne    c0012028 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011fe1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fe5:	09 d8                	or     eax,ebx
c0011fe7:	a9 ff 0f 00 00       	test   eax,0xfff
c0011fec:	75 57                	jne    c0012045 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011fee:	89 de                	mov    esi,ebx
c0011ff0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011ff3:	c1 ee 16             	shr    esi,0x16
c0011ff6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011ffd:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012001:	74 54                	je     c0012057 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012003:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012007:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001200d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012011:	c1 e6 0c             	shl    esi,0xc
c0012014:	c1 eb 0a             	shr    ebx,0xa
c0012017:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001201d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012020:	83 c4 1c             	add    esp,0x1c
c0012023:	5b                   	pop    ebx
c0012024:	5e                   	pop    esi
c0012025:	5f                   	pop    edi
c0012026:	5d                   	pop    ebp
c0012027:	c3                   	ret    
c0012028:	83 ec 0c             	sub    esp,0xc
c001202b:	68 b0 9d 02 c0       	push   0xc0029db0
c0012030:	e8 b2 08 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0012035:	83 c4 10             	add    esp,0x10
c0012038:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001203c:	09 d8                	or     eax,ebx
c001203e:	a9 ff 0f 00 00       	test   eax,0xfff
c0012043:	74 a9                	je     c0011fee <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012045:	83 ec 0c             	sub    esp,0xc
c0012048:	68 18 9e 02 c0       	push   0xc0029e18
c001204d:	e8 09 7e 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0012052:	83 c4 10             	add    esp,0x10
c0012055:	eb 97                	jmp    c0011fee <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012057:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001205b:	e8 55 dc ff ff       	call   c000fcb5 <Phys::allocatePage()>
c0012060:	89 c5                	mov    ebp,eax
c0012062:	e8 20 fa ff ff       	call   c0011a87 <Virt::getAKernelVAS()>
c0012067:	83 ec 0c             	sub    esp,0xc
c001206a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001206e:	6a 01                	push   0x1
c0012070:	e8 82 f8 ff ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c0012075:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001207c:	6a 01                	push   0x1
c001207e:	50                   	push   eax
c001207f:	55                   	push   ebp
c0012080:	81 cd 07 04 00 00    	or     ebp,0x407
c0012086:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001208a:	51                   	push   ecx
c001208b:	e8 26 02 00 00       	call   c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012090:	83 c4 1c             	add    esp,0x1c
c0012093:	68 00 10 00 00       	push   0x1000
c0012098:	6a 00                	push   0x0
c001209a:	50                   	push   eax
c001209b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001209f:	e8 14 e6 fe ff       	call   c00006b8 <memset>
c00120a4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00120a8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00120ab:	e8 ab fb ff ff       	call   c0011c5b <Virt::freeKernelVirtualPages(unsigned long)>
c00120b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120b4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00120bd:	e9 41 ff ff ff       	jmp    c0012003 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00120c2 <VAS::allocatePages(int, int)>:
c00120c2:	55                   	push   ebp
c00120c3:	57                   	push   edi
c00120c4:	56                   	push   esi
c00120c5:	53                   	push   ebx
c00120c6:	83 ec 1c             	sub    esp,0x1c
c00120c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120cd:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00120d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120d8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00120de:	83 e0 01             	and    eax,0x1
c00120e1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00120e5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00120e9:	0f 85 cc 00 00 00    	jne    c00121bb <VAS::allocatePages(int, int)+0xf9>
c00120ef:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00120f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120f6:	85 c0                	test   eax,eax
c00120f8:	0f 84 a1 00 00 00    	je     c001219f <VAS::allocatePages(int, int)+0xdd>
c00120fe:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012102:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012106:	c1 e6 0c             	shl    esi,0xc
c0012109:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001210d:	85 c0                	test   eax,eax
c001210f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012112:	7e 33                	jle    c0012147 <VAS::allocatePages(int, int)+0x85>
c0012114:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012118:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001211c:	81 cd 00 04 00 00    	or     ebp,0x400
c0012122:	e8 8e db ff ff       	call   c000fcb5 <Phys::allocatePage()>
c0012127:	55                   	push   ebp
c0012128:	53                   	push   ebx
c0012129:	50                   	push   eax
c001212a:	57                   	push   edi
c001212b:	e8 92 fe ff ff       	call   c0011fc2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012130:	83 c4 10             	add    esp,0x10
c0012133:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012138:	74 03                	je     c001213d <VAS::allocatePages(int, int)+0x7b>
c001213a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001213d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012143:	39 de                	cmp    esi,ebx
c0012145:	75 db                	jne    c0012122 <VAS::allocatePages(int, int)+0x60>
c0012147:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001214c:	75 12                	jne    c0012160 <VAS::allocatePages(int, int)+0x9e>
c001214e:	0f 20 d8             	mov    eax,cr3
c0012151:	0f 22 d8             	mov    cr3,eax
c0012154:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012158:	83 c4 1c             	add    esp,0x1c
c001215b:	5b                   	pop    ebx
c001215c:	5e                   	pop    esi
c001215d:	5f                   	pop    edi
c001215e:	5d                   	pop    ebp
c001215f:	c3                   	ret    
c0012160:	c1 ee 0a             	shr    esi,0xa
c0012163:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012167:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001216d:	c1 eb 0a             	shr    ebx,0xa
c0012170:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012176:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001217c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012182:	39 c3                	cmp    ebx,eax
c0012184:	77 ce                	ja     c0012154 <VAS::allocatePages(int, int)+0x92>
c0012186:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012189:	81 c3 00 10 00 00    	add    ebx,0x1000
c001218f:	39 d8                	cmp    eax,ebx
c0012191:	73 f3                	jae    c0012186 <VAS::allocatePages(int, int)+0xc4>
c0012193:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012197:	83 c4 1c             	add    esp,0x1c
c001219a:	5b                   	pop    ebx
c001219b:	5e                   	pop    esi
c001219c:	5f                   	pop    edi
c001219d:	5d                   	pop    ebp
c001219e:	c3                   	ret    
c001219f:	83 ec 0c             	sub    esp,0xc
c00121a2:	68 3c 9e 02 c0       	push   0xc0029e3c
c00121a7:	e8 af 7c 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c00121ac:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121b3:	83 c4 10             	add    esp,0x10
c00121b6:	e9 43 ff ff ff       	jmp    c00120fe <VAS::allocatePages(int, int)+0x3c>
c00121bb:	83 ec 0c             	sub    esp,0xc
c00121be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00121c2:	e8 30 f7 ff ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c00121c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121cb:	83 c4 10             	add    esp,0x10
c00121ce:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00121d3:	0f 87 9b 00 00 00    	ja     c0012274 <VAS::allocatePages(int, int)+0x1b2>
c00121d9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00121dd:	85 d2                	test   edx,edx
c00121df:	7e 3c                	jle    c001221d <VAS::allocatePages(int, int)+0x15b>
c00121e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121e5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121ed:	c1 e5 0c             	shl    ebp,0xc
c00121f0:	81 ce 00 04 00 00    	or     esi,0x400
c00121f6:	01 dd                	add    ebp,ebx
c00121f8:	e8 b8 da ff ff       	call   c000fcb5 <Phys::allocatePage()>
c00121fd:	56                   	push   esi
c00121fe:	53                   	push   ebx
c00121ff:	50                   	push   eax
c0012200:	57                   	push   edi
c0012201:	e8 bc fd ff ff       	call   c0011fc2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012206:	83 c4 10             	add    esp,0x10
c0012209:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001220e:	74 03                	je     c0012213 <VAS::allocatePages(int, int)+0x151>
c0012210:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012213:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012219:	39 dd                	cmp    ebp,ebx
c001221b:	75 db                	jne    c00121f8 <VAS::allocatePages(int, int)+0x136>
c001221d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012222:	0f 84 26 ff ff ff    	je     c001214e <VAS::allocatePages(int, int)+0x8c>
c0012228:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001222c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012230:	89 d3                	mov    ebx,edx
c0012232:	c1 e0 0c             	shl    eax,0xc
c0012235:	c1 eb 0a             	shr    ebx,0xa
c0012238:	01 d0                	add    eax,edx
c001223a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012240:	c1 e8 0a             	shr    eax,0xa
c0012243:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012249:	25 00 f0 ff ff       	and    eax,0xfffff000
c001224e:	2d 00 00 40 00       	sub    eax,0x400000
c0012253:	39 c3                	cmp    ebx,eax
c0012255:	0f 87 f9 fe ff ff    	ja     c0012154 <VAS::allocatePages(int, int)+0x92>
c001225b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001225e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012264:	39 d8                	cmp    eax,ebx
c0012266:	73 f3                	jae    c001225b <VAS::allocatePages(int, int)+0x199>
c0012268:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001226c:	83 c4 1c             	add    esp,0x1c
c001226f:	5b                   	pop    ebx
c0012270:	5e                   	pop    esi
c0012271:	5f                   	pop    edi
c0012272:	5d                   	pop    ebp
c0012273:	c3                   	ret    
c0012274:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012279:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001227f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012286:	0f 84 4d ff ff ff    	je     c00121d9 <VAS::allocatePages(int, int)+0x117>
c001228c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012294:	e9 40 ff ff ff       	jmp    c00121d9 <VAS::allocatePages(int, int)+0x117>
c0012299:	90                   	nop

c001229a <VAS::setCPUSpecific(unsigned long)>:
c001229a:	83 ec 0c             	sub    esp,0xc
c001229d:	6a 05                	push   0x5
c001229f:	68 00 00 40 c2       	push   0xc2400000
c00122a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122ac:	e8 11 fd ff ff       	call   c0011fc2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00122b1:	83 c4 1c             	add    esp,0x1c
c00122b4:	c3                   	ret    
c00122b5:	90                   	nop

c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00122b6:	55                   	push   ebp
c00122b7:	57                   	push   edi
c00122b8:	56                   	push   esi
c00122b9:	53                   	push   ebx
c00122ba:	83 ec 1c             	sub    esp,0x1c
c00122bd:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00122c2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122cc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00122d0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00122d6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00122da:	83 e0 01             	and    eax,0x1
c00122dd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00122e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122e5:	85 c0                	test   eax,eax
c00122e7:	7e 39                	jle    c0012322 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00122e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122ed:	89 f3                	mov    ebx,esi
c00122ef:	c1 e0 0c             	shl    eax,0xc
c00122f2:	01 f0                	add    eax,esi
c00122f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122f8:	55                   	push   ebp
c00122f9:	53                   	push   ebx
c00122fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122fe:	29 f0                	sub    eax,esi
c0012300:	01 d8                	add    eax,ebx
c0012302:	50                   	push   eax
c0012303:	57                   	push   edi
c0012304:	e8 b9 fc ff ff       	call   c0011fc2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012309:	83 c4 10             	add    esp,0x10
c001230c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012311:	74 03                	je     c0012316 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012313:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012316:	81 c3 00 10 00 00    	add    ebx,0x1000
c001231c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012320:	75 d6                	jne    c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012322:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012327:	75 10                	jne    c0012339 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012329:	0f 20 d8             	mov    eax,cr3
c001232c:	0f 22 d8             	mov    cr3,eax
c001232f:	83 c4 1c             	add    esp,0x1c
c0012332:	89 f0                	mov    eax,esi
c0012334:	5b                   	pop    ebx
c0012335:	5e                   	pop    esi
c0012336:	5f                   	pop    edi
c0012337:	5d                   	pop    ebp
c0012338:	c3                   	ret    
c0012339:	89 f3                	mov    ebx,esi
c001233b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001233f:	c1 eb 0a             	shr    ebx,0xa
c0012342:	c1 e0 0c             	shl    eax,0xc
c0012345:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001234b:	01 f0                	add    eax,esi
c001234d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012353:	c1 e8 0a             	shr    eax,0xa
c0012356:	25 00 f0 ff ff       	and    eax,0xfffff000
c001235b:	2d 00 00 40 00       	sub    eax,0x400000
c0012360:	39 c3                	cmp    ebx,eax
c0012362:	77 cb                	ja     c001232f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012364:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012367:	81 c3 00 10 00 00    	add    ebx,0x1000
c001236d:	39 d8                	cmp    eax,ebx
c001236f:	73 f3                	jae    c0012364 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012371:	83 c4 1c             	add    esp,0x1c
c0012374:	89 f0                	mov    eax,esi
c0012376:	5b                   	pop    ebx
c0012377:	5e                   	pop    esi
c0012378:	5f                   	pop    edi
c0012379:	5d                   	pop    ebp
c001237a:	c3                   	ret    
c001237b:	90                   	nop

c001237c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001237c:	55                   	push   ebp
c001237d:	57                   	push   edi
c001237e:	56                   	push   esi
c001237f:	53                   	push   ebx
c0012380:	83 ec 1c             	sub    esp,0x1c
c0012383:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012387:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001238b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001238f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012393:	a9 ff 0f 00 00       	test   eax,0xfff
c0012398:	75 4a                	jne    c00123e4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001239a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001239e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123a1:	c1 eb 16             	shr    ebx,0x16
c00123a4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00123ab:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00123af:	74 4d                	je     c00123fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00123b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00123b5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00123b9:	c1 e8 0a             	shr    eax,0xa
c00123bc:	80 fa 01             	cmp    dl,0x1
c00123bf:	19 d2                	sbb    edx,edx
c00123c1:	c1 e3 0c             	shl    ebx,0xc
c00123c4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00123c8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00123ce:	25 fc 0f 00 00       	and    eax,0xffc
c00123d3:	01 d8                	add    eax,ebx
c00123d5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00123dc:	83 c4 1c             	add    esp,0x1c
c00123df:	5b                   	pop    ebx
c00123e0:	5e                   	pop    esi
c00123e1:	5f                   	pop    edi
c00123e2:	5d                   	pop    ebp
c00123e3:	c3                   	ret    
c00123e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00123e8:	83 ec 0c             	sub    esp,0xc
c00123eb:	68 68 9e 02 c0       	push   0xc0029e68
c00123f0:	e8 66 7a 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123fc:	eb 9c                	jmp    c001239a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00123fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012402:	e8 ae d8 ff ff       	call   c000fcb5 <Phys::allocatePage()>
c0012407:	89 c5                	mov    ebp,eax
c0012409:	e8 79 f6 ff ff       	call   c0011a87 <Virt::getAKernelVAS()>
c001240e:	83 ec 0c             	sub    esp,0xc
c0012411:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012415:	6a 01                	push   0x1
c0012417:	e8 db f4 ff ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c001241c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012423:	6a 01                	push   0x1
c0012425:	50                   	push   eax
c0012426:	55                   	push   ebp
c0012427:	81 cd 07 04 00 00    	or     ebp,0x407
c001242d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012431:	51                   	push   ecx
c0012432:	e8 7f fe ff ff       	call   c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012437:	83 c4 1c             	add    esp,0x1c
c001243a:	68 00 10 00 00       	push   0x1000
c001243f:	6a 00                	push   0x0
c0012441:	50                   	push   eax
c0012442:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012446:	e8 6d e2 fe ff       	call   c00006b8 <memset>
c001244b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001244f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012452:	e8 04 f8 ff ff       	call   c0011c5b <Virt::freeKernelVirtualPages(unsigned long)>
c0012457:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001245a:	83 c4 10             	add    esp,0x10
c001245d:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012460:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012464:	e9 48 ff ff ff       	jmp    c00123b1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012469:	90                   	nop

c001246a <VAS::VAS(bool)>:
c001246a:	53                   	push   ebx
c001246b:	83 ec 28             	sub    esp,0x28
c001246e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012472:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001247a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012485:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012489:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001248c:	e8 24 d8 ff ff       	call   c000fcb5 <Phys::allocatePage()>
c0012491:	89 c2                	mov    edx,eax
c0012493:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012497:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001249a:	e8 e8 f5 ff ff       	call   c0011a87 <Virt::getAKernelVAS()>
c001249f:	89 c3                	mov    ebx,eax
c00124a1:	83 ec 0c             	sub    esp,0xc
c00124a4:	6a 01                	push   0x1
c00124a6:	e8 4c f4 ff ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c00124ab:	83 c4 10             	add    esp,0x10
c00124ae:	89 c2                	mov    edx,eax
c00124b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124b7:	83 ec 0c             	sub    esp,0xc
c00124ba:	6a 03                	push   0x3
c00124bc:	6a 01                	push   0x1
c00124be:	52                   	push   edx
c00124bf:	50                   	push   eax
c00124c0:	53                   	push   ebx
c00124c1:	e8 f0 fd ff ff       	call   c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124c6:	83 c4 20             	add    esp,0x20
c00124c9:	89 c2                	mov    edx,eax
c00124cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124cf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124d2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124da:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00124e2:	7f 1c                	jg     c0012500 <VAS::VAS(bool)+0x96>
c00124e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124ef:	c1 e2 02             	shl    edx,0x2
c00124f2:	01 d0                	add    eax,edx
c00124f4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00124fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00124fe:	eb da                	jmp    c00124da <VAS::VAS(bool)+0x70>
c0012500:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012508:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012510:	7f 7a                	jg     c001258c <VAS::VAS(bool)+0x122>
c0012512:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012516:	2d 00 02 00 00       	sub    eax,0x200
c001251b:	c1 e0 0c             	shl    eax,0xc
c001251e:	83 c8 03             	or     eax,0x3
c0012521:	89 c2                	mov    edx,eax
c0012523:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012528:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001252e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012534:	83 e0 10             	and    eax,0x10
c0012537:	84 c0                	test   al,al
c0012539:	74 07                	je     c0012542 <VAS::VAS(bool)+0xd8>
c001253b:	b8 00 01 00 00       	mov    eax,0x100
c0012540:	eb 05                	jmp    c0012547 <VAS::VAS(bool)+0xdd>
c0012542:	b8 00 00 00 00       	mov    eax,0x0
c0012547:	09 d0                	or     eax,edx
c0012549:	89 c1                	mov    ecx,eax
c001254b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001254f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012552:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012556:	c1 e2 02             	shl    edx,0x2
c0012559:	01 d0                	add    eax,edx
c001255b:	89 ca                	mov    edx,ecx
c001255d:	89 10                	mov    DWORD PTR [eax],edx
c001255f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012563:	2d 40 03 00 00       	sub    eax,0x340
c0012568:	83 f8 7f             	cmp    eax,0x7f
c001256b:	77 16                	ja     c0012583 <VAS::VAS(bool)+0x119>
c001256d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012571:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012574:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012578:	c1 e2 02             	shl    edx,0x2
c001257b:	01 d0                	add    eax,edx
c001257d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012583:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012587:	e9 7c ff ff ff       	jmp    c0012508 <VAS::VAS(bool)+0x9e>
c001258c:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012591:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012597:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001259d:	83 e0 10             	and    eax,0x10
c00125a0:	84 c0                	test   al,al
c00125a2:	74 07                	je     c00125ab <VAS::VAS(bool)+0x141>
c00125a4:	b8 03 41 00 00       	mov    eax,0x4103
c00125a9:	eb 05                	jmp    c00125b0 <VAS::VAS(bool)+0x146>
c00125ab:	b8 03 40 00 00       	mov    eax,0x4003
c00125b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125b4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00125b7:	81 c2 20 0c 00 00    	add    edx,0xc20
c00125bd:	89 02                	mov    DWORD PTR [edx],eax
c00125bf:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00125c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125ca:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00125d0:	83 ec 08             	sub    esp,0x8
c00125d3:	50                   	push   eax
c00125d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125d8:	e8 bd fc ff ff       	call   c001229a <VAS::setCPUSpecific(unsigned long)>
c00125dd:	83 c4 10             	add    esp,0x10
c00125e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125e4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125e7:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00125ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125f2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125f8:	83 e0 10             	and    eax,0x10
c00125fb:	84 c0                	test   al,al
c00125fd:	74 07                	je     c0012606 <VAS::VAS(bool)+0x19c>
c00125ff:	b8 00 01 00 00       	mov    eax,0x100
c0012604:	eb 05                	jmp    c001260b <VAS::VAS(bool)+0x1a1>
c0012606:	b8 00 00 00 00       	mov    eax,0x0
c001260b:	09 c2                	or     edx,eax
c001260d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012611:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012614:	05 fc 0f 00 00       	add    eax,0xffc
c0012619:	83 ca 03             	or     edx,0x3
c001261c:	89 10                	mov    DWORD PTR [eax],edx
c001261e:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012623:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012629:	83 ec 0c             	sub    esp,0xc
c001262c:	50                   	push   eax
c001262d:	e8 c8 19 00 00       	call   c0013ffa <Device::getName()>
c0012632:	83 c4 10             	add    esp,0x10
c0012635:	83 ec 08             	sub    esp,0x8
c0012638:	68 67 9f 02 c0       	push   0xc0029f67
c001263d:	50                   	push   eax
c001263e:	e8 65 e1 fe ff       	call   c00007a8 <strcmp>
c0012643:	83 c4 10             	add    esp,0x10
c0012646:	85 c0                	test   eax,eax
c0012648:	0f 94 c0             	sete   al
c001264b:	84 c0                	test   al,al
c001264d:	74 70                	je     c00126bf <VAS::VAS(bool)+0x255>
c001264f:	e8 45 ae 00 00       	call   c001d499 <disableIRQs()>
c0012654:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012659:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001265f:	05 7c 09 00 00       	add    eax,0x97c
c0012664:	83 ec 0c             	sub    esp,0xc
c0012667:	50                   	push   eax
c0012668:	e8 27 ca ff ff       	call   c000f094 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001266d:	83 c4 10             	add    esp,0x10
c0012670:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012675:	89 c3                	mov    ebx,eax
c0012677:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001267c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012682:	05 7c 09 00 00       	add    eax,0x97c
c0012687:	83 ec 0c             	sub    esp,0xc
c001268a:	50                   	push   eax
c001268b:	e8 04 ca ff ff       	call   c000f094 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012690:	83 c4 10             	add    esp,0x10
c0012693:	83 ec 08             	sub    esp,0x8
c0012696:	50                   	push   eax
c0012697:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001269b:	e8 9c f5 ff ff       	call   c0011c3c <VAS::getPageTableEntry(unsigned long)>
c00126a0:	83 c4 10             	add    esp,0x10
c00126a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00126a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126aa:	6a 11                	push   0x11
c00126ac:	53                   	push   ebx
c00126ad:	50                   	push   eax
c00126ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126b2:	e8 0b f9 ff ff       	call   c0011fc2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126b7:	83 c4 10             	add    esp,0x10
c00126ba:	e8 e8 ad 00 00       	call   c001d4a7 <enableIRQs()>
c00126bf:	90                   	nop
c00126c0:	83 c4 28             	add    esp,0x28
c00126c3:	5b                   	pop    ebx
c00126c4:	c3                   	ret    

c00126c5 <mapVASFirstTime>:
c00126c5:	55                   	push   ebp
c00126c6:	57                   	push   edi
c00126c7:	56                   	push   esi
c00126c8:	53                   	push   ebx
c00126c9:	83 ec 0c             	sub    esp,0xc
c00126cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126d1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126d4:	4a                   	dec    edx
c00126d5:	0f 84 8e 00 00 00    	je     c0012769 <mapVASFirstTime+0xa4>
c00126db:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126de:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126e1:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126e6:	c1 e5 15             	shl    ebp,0x15
c00126e9:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126ee:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00126f4:	29 eb                	sub    ebx,ebp
c00126f6:	29 ee                	sub    esi,ebp
c00126f8:	e8 b8 d5 ff ff       	call   c000fcb5 <Phys::allocatePage()>
c00126fd:	83 ec 0c             	sub    esp,0xc
c0012700:	68 03 04 00 00       	push   0x403
c0012705:	6a 01                	push   0x1
c0012707:	53                   	push   ebx
c0012708:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001270e:	50                   	push   eax
c001270f:	57                   	push   edi
c0012710:	e8 a1 fb ff ff       	call   c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012715:	83 c4 20             	add    esp,0x20
c0012718:	39 f3                	cmp    ebx,esi
c001271a:	75 dc                	jne    c00126f8 <mapVASFirstTime+0x33>
c001271c:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012721:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012726:	29 ee                	sub    esi,ebp
c0012728:	29 e8                	sub    eax,ebp
c001272a:	89 c5                	mov    ebp,eax
c001272c:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012730:	19 db                	sbb    ebx,ebx
c0012732:	e8 7e d5 ff ff       	call   c000fcb5 <Phys::allocatePage()>
c0012737:	83 e3 04             	and    ebx,0x4
c001273a:	83 ec 0c             	sub    esp,0xc
c001273d:	81 c3 03 04 00 00    	add    ebx,0x403
c0012743:	53                   	push   ebx
c0012744:	6a 01                	push   0x1
c0012746:	56                   	push   esi
c0012747:	81 ee 00 10 00 00    	sub    esi,0x1000
c001274d:	50                   	push   eax
c001274e:	57                   	push   edi
c001274f:	e8 62 fb ff ff       	call   c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012754:	83 c4 20             	add    esp,0x20
c0012757:	39 f5                	cmp    ebp,esi
c0012759:	75 d1                	jne    c001272c <mapVASFirstTime+0x67>
c001275b:	0f 20 d8             	mov    eax,cr3
c001275e:	0f 22 d8             	mov    cr3,eax
c0012761:	83 c4 0c             	add    esp,0xc
c0012764:	5b                   	pop    ebx
c0012765:	5e                   	pop    esi
c0012766:	5f                   	pop    edi
c0012767:	5d                   	pop    ebp
c0012768:	c3                   	ret    
c0012769:	83 ec 0c             	sub    esp,0xc
c001276c:	68 75 9f 02 c0       	push   0xc0029f75
c0012771:	e8 71 01 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0012776:	83 c4 10             	add    esp,0x10
c0012779:	83 c4 0c             	add    esp,0xc
c001277c:	5b                   	pop    ebx
c001277d:	5e                   	pop    esi
c001277e:	5f                   	pop    edi
c001277f:	5d                   	pop    ebp
c0012780:	c3                   	ret    

c0012781 <__cxa_atexit>:
c0012781:	31 c0                	xor    eax,eax
c0012783:	c3                   	ret    

c0012784 <__cxa_finalize>:
c0012784:	c3                   	ret    

c0012785 <__stack_chk_fail>:
c0012785:	55                   	push   ebp
c0012786:	89 e5                	mov    ebp,esp
c0012788:	83 ec 14             	sub    esp,0x14
c001278b:	68 8e 9f 02 c0       	push   0xc0029f8e
c0012790:	e8 52 01 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0012795:	58                   	pop    eax
c0012796:	5a                   	pop    edx
c0012797:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001279a:	68 de 9f 02 c0       	push   0xc0029fde
c001279f:	e8 43 01 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00127a4:	59                   	pop    ecx
c00127a5:	58                   	pop    eax
c00127a6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127a9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127ac:	68 de 9f 02 c0       	push   0xc0029fde
c00127b1:	e8 31 01 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00127b6:	5a                   	pop    edx
c00127b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127ba:	59                   	pop    ecx
c00127bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00127bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127c0:	68 de 9f 02 c0       	push   0xc0029fde
c00127c5:	e8 1d 01 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00127ca:	5a                   	pop    edx
c00127cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127ce:	59                   	pop    ecx
c00127cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00127d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00127d3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127d6:	68 de 9f 02 c0       	push   0xc0029fde
c00127db:	e8 07 01 00 00       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00127e0:	c7 04 24 e6 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fe6
c00127e7:	e8 6f 76 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c00127ec:	83 c4 10             	add    esp,0x10
c00127ef:	c9                   	leave  
c00127f0:	c3                   	ret    

c00127f1 <__cxa_pure_virtual>:
c00127f1:	83 ec 18             	sub    esp,0x18
c00127f4:	68 fe 9f 02 c0       	push   0xc0029ffe
c00127f9:	e8 5d 76 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c00127fe:	83 c4 1c             	add    esp,0x1c
c0012801:	c3                   	ret    

c0012802 <operator new[](unsigned long)>:
c0012802:	e9 11 ce ff ff       	jmp    c000f618 <malloc>

c0012807 <operator delete(void*, unsigned long)>:
c0012807:	e9 2c ce ff ff       	jmp    c000f638 <rfree>

c001280c <operator delete[](void*)>:
c001280c:	e9 27 ce ff ff       	jmp    c000f638 <rfree>

c0012811 <operator delete[](void*, unsigned long)>:
c0012811:	e9 22 ce ff ff       	jmp    c000f638 <rfree>

c0012816 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012816:	57                   	push   edi
c0012817:	b9 3f 00 00 00       	mov    ecx,0x3f
c001281c:	56                   	push   esi
c001281d:	be 14 a0 02 c0       	mov    esi,0xc002a014
c0012822:	53                   	push   ebx
c0012823:	83 ec 40             	sub    esp,0x40
c0012826:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001282a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001282e:	fc                   	cld    
c001282f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012831:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012835:	83 f9 3e             	cmp    ecx,0x3e
c0012838:	7e 05                	jle    c001283f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c001283a:	b9 3e 00 00 00       	mov    ecx,0x3e
c001283f:	89 df                	mov    edi,ebx
c0012841:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012845:	eb 02                	jmp    c0012849 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012847:	89 c7                	mov    edi,eax
c0012849:	31 d2                	xor    edx,edx
c001284b:	46                   	inc    esi
c001284c:	89 f8                	mov    eax,edi
c001284e:	f7 f1                	div    ecx
c0012850:	39 cf                	cmp    edi,ecx
c0012852:	73 f3                	jae    c0012847 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012854:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012857:	eb 02                	jmp    c001285b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012859:	89 c3                	mov    ebx,eax
c001285b:	31 d2                	xor    edx,edx
c001285d:	4e                   	dec    esi
c001285e:	89 d8                	mov    eax,ebx
c0012860:	f7 f1                	div    ecx
c0012862:	39 cb                	cmp    ebx,ecx
c0012864:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012868:	88 16                	mov    BYTE PTR [esi],dl
c001286a:	73 ed                	jae    c0012859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c001286c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012870:	83 c4 40             	add    esp,0x40
c0012873:	5b                   	pop    ebx
c0012874:	5e                   	pop    esi
c0012875:	5f                   	pop    edi
c0012876:	c3                   	ret    

c0012877 <Dbg::logc(char)>:
c0012877:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001287b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012880:	ec                   	in     al,dx
c0012881:	a8 20                	test   al,0x20
c0012883:	74 fb                	je     c0012880 <Dbg::logc(char)+0x9>
c0012885:	ba f8 03 00 00       	mov    edx,0x3f8
c001288a:	88 c8                	mov    al,cl
c001288c:	ee                   	out    dx,al
c001288d:	c3                   	ret    

c001288e <Dbg::logs(char*)>:
c001288e:	53                   	push   ebx
c001288f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012893:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012896:	84 c0                	test   al,al
c0012898:	74 0f                	je     c00128a9 <Dbg::logs(char*)+0x1b>
c001289a:	50                   	push   eax
c001289b:	43                   	inc    ebx
c001289c:	e8 d6 ff ff ff       	call   c0012877 <Dbg::logc(char)>
c00128a1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128a4:	5a                   	pop    edx
c00128a5:	84 c0                	test   al,al
c00128a7:	75 f1                	jne    c001289a <Dbg::logs(char*)+0xc>
c00128a9:	5b                   	pop    ebx
c00128aa:	c3                   	ret    

c00128ab <Dbg::logWriteInt(unsigned int)>:
c00128ab:	83 ec 10             	sub    esp,0x10
c00128ae:	6a 0a                	push   0xa
c00128b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128b4:	50                   	push   eax
c00128b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128b9:	e8 58 ff ff ff       	call   c0012816 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128be:	50                   	push   eax
c00128bf:	e8 ca ff ff ff       	call   c001288e <Dbg::logs(char*)>
c00128c4:	83 c4 20             	add    esp,0x20
c00128c7:	c3                   	ret    

c00128c8 <Dbg::logWriteIntBase(unsigned int, int)>:
c00128c8:	83 ec 10             	sub    esp,0x10
c00128cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128d3:	50                   	push   eax
c00128d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128d8:	e8 39 ff ff ff       	call   c0012816 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128dd:	50                   	push   eax
c00128de:	e8 ab ff ff ff       	call   c001288e <Dbg::logs(char*)>
c00128e3:	83 c4 20             	add    esp,0x20
c00128e6:	c3                   	ret    

c00128e7 <Dbg::kprintf(char const*, ...)>:
c00128e7:	55                   	push   ebp
c00128e8:	57                   	push   edi
c00128e9:	56                   	push   esi
c00128ea:	53                   	push   ebx
c00128eb:	83 ec 0c             	sub    esp,0xc
c00128ee:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128f2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128fa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128fd:	84 c0                	test   al,al
c00128ff:	74 4a                	je     c001294b <Dbg::kprintf(char const*, ...)+0x64>
c0012901:	31 db                	xor    ebx,ebx
c0012903:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012906:	3c 25                	cmp    al,0x25
c0012908:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001290b:	0f 85 e4 00 00 00    	jne    c00129f5 <Dbg::kprintf(char const*, ...)+0x10e>
c0012911:	83 c3 02             	add    ebx,0x2
c0012914:	8a 07                	mov    al,BYTE PTR [edi]
c0012916:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012919:	83 e8 25             	sub    eax,0x25
c001291c:	3c 53                	cmp    al,0x53
c001291e:	0f 87 ba 00 00 00    	ja     c00129de <Dbg::kprintf(char const*, ...)+0xf7>
c0012924:	0f b6 c0             	movzx  eax,al
c0012927:	ff 24 85 54 a0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5fac]
c001292e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012932:	89 c8                	mov    eax,ecx
c0012934:	83 c1 04             	add    ecx,0x4
c0012937:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001293b:	ff 30                	push   DWORD PTR [eax]
c001293d:	e8 4c ff ff ff       	call   c001288e <Dbg::logs(char*)>
c0012942:	58                   	pop    eax
c0012943:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012947:	84 c0                	test   al,al
c0012949:	75 b8                	jne    c0012903 <Dbg::kprintf(char const*, ...)+0x1c>
c001294b:	83 c4 0c             	add    esp,0xc
c001294e:	5b                   	pop    ebx
c001294f:	5e                   	pop    esi
c0012950:	5f                   	pop    edi
c0012951:	5d                   	pop    ebp
c0012952:	c3                   	ret    
c0012953:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012957:	89 d0                	mov    eax,edx
c0012959:	83 c2 04             	add    edx,0x4
c001295c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012960:	ff 30                	push   DWORD PTR [eax]
c0012962:	e8 44 ff ff ff       	call   c00128ab <Dbg::logWriteInt(unsigned int)>
c0012967:	58                   	pop    eax
c0012968:	eb d9                	jmp    c0012943 <Dbg::kprintf(char const*, ...)+0x5c>
c001296a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001296e:	89 d0                	mov    eax,edx
c0012970:	83 c2 04             	add    edx,0x4
c0012973:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012976:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001297a:	50                   	push   eax
c001297b:	e8 f7 fe ff ff       	call   c0012877 <Dbg::logc(char)>
c0012980:	58                   	pop    eax
c0012981:	eb c0                	jmp    c0012943 <Dbg::kprintf(char const*, ...)+0x5c>
c0012983:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012987:	89 c8                	mov    eax,ecx
c0012989:	83 c1 04             	add    ecx,0x4
c001298c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012990:	ff 30                	push   DWORD PTR [eax]
c0012992:	e8 14 ff ff ff       	call   c00128ab <Dbg::logWriteInt(unsigned int)>
c0012997:	5f                   	pop    edi
c0012998:	eb a9                	jmp    c0012943 <Dbg::kprintf(char const*, ...)+0x5c>
c001299a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001299e:	89 c8                	mov    eax,ecx
c00129a0:	83 c1 04             	add    ecx,0x4
c00129a3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129a7:	6a 10                	push   0x10
c00129a9:	ff 30                	push   DWORD PTR [eax]
c00129ab:	e8 18 ff ff ff       	call   c00128c8 <Dbg::logWriteIntBase(unsigned int, int)>
c00129b0:	59                   	pop    ecx
c00129b1:	5f                   	pop    edi
c00129b2:	eb 8f                	jmp    c0012943 <Dbg::kprintf(char const*, ...)+0x5c>
c00129b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129b8:	89 d0                	mov    eax,edx
c00129ba:	83 c2 08             	add    edx,0x8
c00129bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129c1:	6a 10                	push   0x10
c00129c3:	ff 30                	push   DWORD PTR [eax]
c00129c5:	e8 fe fe ff ff       	call   c00128c8 <Dbg::logWriteIntBase(unsigned int, int)>
c00129ca:	58                   	pop    eax
c00129cb:	5a                   	pop    edx
c00129cc:	e9 72 ff ff ff       	jmp    c0012943 <Dbg::kprintf(char const*, ...)+0x5c>
c00129d1:	6a 25                	push   0x25
c00129d3:	e8 9f fe ff ff       	call   c0012877 <Dbg::logc(char)>
c00129d8:	58                   	pop    eax
c00129d9:	e9 65 ff ff ff       	jmp    c0012943 <Dbg::kprintf(char const*, ...)+0x5c>
c00129de:	6a 25                	push   0x25
c00129e0:	e8 92 fe ff ff       	call   c0012877 <Dbg::logc(char)>
c00129e5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129e8:	50                   	push   eax
c00129e9:	e8 89 fe ff ff       	call   c0012877 <Dbg::logc(char)>
c00129ee:	5a                   	pop    edx
c00129ef:	59                   	pop    ecx
c00129f0:	e9 4e ff ff ff       	jmp    c0012943 <Dbg::kprintf(char const*, ...)+0x5c>
c00129f5:	50                   	push   eax
c00129f6:	89 eb                	mov    ebx,ebp
c00129f8:	e8 7a fe ff ff       	call   c0012877 <Dbg::logc(char)>
c00129fd:	89 fd                	mov    ebp,edi
c00129ff:	58                   	pop    eax
c0012a00:	e9 3e ff ff ff       	jmp    c0012943 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a05:	90                   	nop

c0012a06 <File::read(unsigned long long, void*, int*)>:
c0012a06:	53                   	push   ebx
c0012a07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a0b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a0f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a16:	3c 19                	cmp    al,0x19
c0012a18:	77 35                	ja     c0012a4f <File::read(unsigned long long, void*, int*)+0x49>
c0012a1a:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0012a21:	85 c0                	test   eax,eax
c0012a23:	74 2a                	je     c0012a4f <File::read(unsigned long long, void*, int*)+0x49>
c0012a25:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a2b:	85 c0                	test   eax,eax
c0012a2d:	74 20                	je     c0012a4f <File::read(unsigned long long, void*, int*)+0x49>
c0012a2f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a33:	74 21                	je     c0012a56 <File::read(unsigned long long, void*, int*)+0x50>
c0012a35:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a37:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a3b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a49:	5b                   	pop    ebx
c0012a4a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a4d:	ff e0                	jmp    eax
c0012a4f:	b8 0b 00 00 00       	mov    eax,0xb
c0012a54:	eb 05                	jmp    c0012a5b <File::read(unsigned long long, void*, int*)+0x55>
c0012a56:	b8 05 00 00 00       	mov    eax,0x5
c0012a5b:	5b                   	pop    ebx
c0012a5c:	c3                   	ret    
c0012a5d:	90                   	nop

c0012a5e <File::write(unsigned long long, void*, int*)>:
c0012a5e:	53                   	push   ebx
c0012a5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a63:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a67:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a6e:	3c 19                	cmp    al,0x19
c0012a70:	77 35                	ja     c0012aa7 <File::write(unsigned long long, void*, int*)+0x49>
c0012a72:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0012a79:	85 c0                	test   eax,eax
c0012a7b:	74 2a                	je     c0012aa7 <File::write(unsigned long long, void*, int*)+0x49>
c0012a7d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a83:	85 c0                	test   eax,eax
c0012a85:	74 20                	je     c0012aa7 <File::write(unsigned long long, void*, int*)+0x49>
c0012a87:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a8b:	74 21                	je     c0012aae <File::write(unsigned long long, void*, int*)+0x50>
c0012a8d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a8f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a93:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012aa1:	5b                   	pop    ebx
c0012aa2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012aa5:	ff e0                	jmp    eax
c0012aa7:	b8 0b 00 00 00       	mov    eax,0xb
c0012aac:	eb 05                	jmp    c0012ab3 <File::write(unsigned long long, void*, int*)+0x55>
c0012aae:	b8 05 00 00 00       	mov    eax,0x5
c0012ab3:	5b                   	pop    ebx
c0012ab4:	c3                   	ret    
c0012ab5:	90                   	nop

c0012ab6 <Directory::read(unsigned long long, void*, int*)>:
c0012ab6:	53                   	push   ebx
c0012ab7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012abb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012abf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ac6:	3c 19                	cmp    al,0x19
c0012ac8:	77 35                	ja     c0012aff <Directory::read(unsigned long long, void*, int*)+0x49>
c0012aca:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0012ad1:	85 c0                	test   eax,eax
c0012ad3:	74 2a                	je     c0012aff <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ad5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012adb:	85 c0                	test   eax,eax
c0012add:	74 20                	je     c0012aff <Directory::read(unsigned long long, void*, int*)+0x49>
c0012adf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ae3:	74 21                	je     c0012b06 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012ae5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ae7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012aeb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012af1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012af5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012af9:	5b                   	pop    ebx
c0012afa:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012afd:	ff e0                	jmp    eax
c0012aff:	b8 0b 00 00 00       	mov    eax,0xb
c0012b04:	eb 05                	jmp    c0012b0b <Directory::read(unsigned long long, void*, int*)+0x55>
c0012b06:	b8 05 00 00 00       	mov    eax,0x5
c0012b0b:	5b                   	pop    ebx
c0012b0c:	c3                   	ret    
c0012b0d:	90                   	nop

c0012b0e <Directory::write(unsigned long long, void*, int*)>:
c0012b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b12:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b19:	b8 0b 00 00 00       	mov    eax,0xb
c0012b1e:	80 fa 19             	cmp    dl,0x19
c0012b21:	77 18                	ja     c0012b3b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b23:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012b2a:	85 d2                	test   edx,edx
c0012b2c:	74 0d                	je     c0012b3b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b2e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b35:	19 c0                	sbb    eax,eax
c0012b37:	83 e0 0a             	and    eax,0xa
c0012b3a:	40                   	inc    eax
c0012b3b:	c3                   	ret    

c0012b3c <File::isAtty()>:
c0012b3c:	31 c0                	xor    eax,eax
c0012b3e:	c3                   	ret    
c0012b3f:	90                   	nop

c0012b40 <Directory::isAtty()>:
c0012b40:	31 c0                	xor    eax,eax
c0012b42:	c3                   	ret    
c0012b43:	90                   	nop

c0012b44 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b44:	b8 0a 00 00 00       	mov    eax,0xa
c0012b49:	c3                   	ret    

c0012b4a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b4a:	b8 0a 00 00 00       	mov    eax,0xa
c0012b4f:	c3                   	ret    

c0012b50 <File::~File()>:
c0012b50:	83 ec 0c             	sub    esp,0xc
c0012b53:	ba 10 a2 02 c0       	mov    edx,0xc002a210
c0012b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b5c:	89 10                	mov    DWORD PTR [eax],edx
c0012b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b62:	83 ec 0c             	sub    esp,0xc
c0012b65:	50                   	push   eax
c0012b66:	e8 2b eb ff ff       	call   c0011696 <UnixFile::~UnixFile()>
c0012b6b:	83 c4 10             	add    esp,0x10
c0012b6e:	90                   	nop
c0012b6f:	83 c4 0c             	add    esp,0xc
c0012b72:	c3                   	ret    
c0012b73:	90                   	nop

c0012b74 <File::~File()>:
c0012b74:	83 ec 0c             	sub    esp,0xc
c0012b77:	83 ec 0c             	sub    esp,0xc
c0012b7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b7e:	e8 cd ff ff ff       	call   c0012b50 <File::~File()>
c0012b83:	83 c4 10             	add    esp,0x10
c0012b86:	83 ec 08             	sub    esp,0x8
c0012b89:	68 14 01 00 00       	push   0x114
c0012b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b92:	e8 70 fc ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0012b97:	83 c4 10             	add    esp,0x10
c0012b9a:	83 c4 0c             	add    esp,0xc
c0012b9d:	c3                   	ret    

c0012b9e <Directory::~Directory()>:
c0012b9e:	83 ec 0c             	sub    esp,0xc
c0012ba1:	ba 2c a2 02 c0       	mov    edx,0xc002a22c
c0012ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012baa:	89 10                	mov    DWORD PTR [eax],edx
c0012bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb0:	83 ec 0c             	sub    esp,0xc
c0012bb3:	50                   	push   eax
c0012bb4:	e8 dd ea ff ff       	call   c0011696 <UnixFile::~UnixFile()>
c0012bb9:	83 c4 10             	add    esp,0x10
c0012bbc:	90                   	nop
c0012bbd:	83 c4 0c             	add    esp,0xc
c0012bc0:	c3                   	ret    
c0012bc1:	90                   	nop

c0012bc2 <Directory::~Directory()>:
c0012bc2:	83 ec 0c             	sub    esp,0xc
c0012bc5:	83 ec 0c             	sub    esp,0xc
c0012bc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bcc:	e8 cd ff ff ff       	call   c0012b9e <Directory::~Directory()>
c0012bd1:	83 c4 10             	add    esp,0x10
c0012bd4:	83 ec 08             	sub    esp,0x8
c0012bd7:	68 14 01 00 00       	push   0x114
c0012bdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012be0:	e8 22 fc ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0012be5:	83 c4 10             	add    esp,0x10
c0012be8:	83 c4 0c             	add    esp,0xc
c0012beb:	c3                   	ret    

c0012bec <Filesystem::Filesystem()>:
c0012bec:	ba ac a1 02 c0       	mov    edx,0xc002a1ac
c0012bf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf5:	89 10                	mov    DWORD PTR [eax],edx
c0012bf7:	8b 15 48 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc48
c0012bfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c01:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c08:	a3 48 dc 02 c0       	mov    ds:0xc002dc48,eax
c0012c0d:	90                   	nop
c0012c0e:	c3                   	ret    
c0012c0f:	90                   	nop

c0012c10 <Filesystem::~Filesystem()>:
c0012c10:	ba ac a1 02 c0       	mov    edx,0xc002a1ac
c0012c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c19:	89 10                	mov    DWORD PTR [eax],edx
c0012c1b:	90                   	nop
c0012c1c:	c3                   	ret    
c0012c1d:	90                   	nop

c0012c1e <Filesystem::~Filesystem()>:
c0012c1e:	83 ec 0c             	sub    esp,0xc
c0012c21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c25:	e8 e6 ff ff ff       	call   c0012c10 <Filesystem::~Filesystem()>
c0012c2a:	83 c4 04             	add    esp,0x4
c0012c2d:	83 ec 08             	sub    esp,0x8
c0012c30:	6a 08                	push   0x8
c0012c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c36:	e8 cc fb ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0012c3b:	83 c4 10             	add    esp,0x10
c0012c3e:	83 c4 0c             	add    esp,0xc
c0012c41:	c3                   	ret    

c0012c42 <Fs::getcwd(Process*, char*, int)>:
c0012c42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c46:	31 c0                	xor    eax,eax
c0012c48:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c4b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c4f:	7d 15                	jge    c0012c66 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c55:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c5c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c5f:	84 c9                	test   cl,cl
c0012c61:	74 06                	je     c0012c69 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c63:	40                   	inc    eax
c0012c64:	eb e2                	jmp    c0012c48 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c66:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c69:	31 c0                	xor    eax,eax
c0012c6b:	c3                   	ret    

c0012c6c <Fs::initVFS()>:
c0012c6c:	83 ec 18             	sub    esp,0x18
c0012c6f:	6a 08                	push   0x8
c0012c71:	e8 a2 c9 ff ff       	call   c000f618 <malloc>
c0012c76:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c79:	e8 ac d9 00 00       	call   c002062a <FAT::FAT()>
c0012c7e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c85:	e8 8e c9 ff ff       	call   c000f618 <malloc>
c0012c8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c8d:	e8 f0 eb 00 00       	call   c0021882 <ISO9660::ISO9660()>
c0012c92:	83 c4 1c             	add    esp,0x1c
c0012c95:	c3                   	ret    

c0012c96 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c96:	55                   	push   ebp
c0012c97:	57                   	push   edi
c0012c98:	56                   	push   esi
c0012c99:	53                   	push   ebx
c0012c9a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ca0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ca7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012cae:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012cb5:	68 00 04 00 00       	push   0x400
c0012cba:	6a 00                	push   0x0
c0012cbc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012cc0:	56                   	push   esi
c0012cc1:	e8 f2 d9 fe ff       	call   c00006b8 <memset>
c0012cc6:	83 c4 10             	add    esp,0x10
c0012cc9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012ccd:	75 0b                	jne    c0012cda <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ccf:	50                   	push   eax
c0012cd0:	50                   	push   eax
c0012cd1:	57                   	push   edi
c0012cd2:	56                   	push   esi
c0012cd3:	e8 7f da fe ff       	call   c0000757 <strcpy>
c0012cd8:	eb 41                	jmp    c0012d1b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012cda:	8a 07                	mov    al,BYTE PTR [edi]
c0012cdc:	3c 5c                	cmp    al,0x5c
c0012cde:	74 04                	je     c0012ce4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012ce0:	3c 2f                	cmp    al,0x2f
c0012ce2:	75 18                	jne    c0012cfc <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012ce4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012ce7:	3c 60                	cmp    al,0x60
c0012ce9:	7e 03                	jle    c0012cee <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012ceb:	83 e8 20             	sub    eax,0x20
c0012cee:	88 04 24             	mov    BYTE PTR [esp],al
c0012cf1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012cf8:	50                   	push   eax
c0012cf9:	50                   	push   eax
c0012cfa:	eb 18                	jmp    c0012d14 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012cfc:	50                   	push   eax
c0012cfd:	50                   	push   eax
c0012cfe:	55                   	push   ebp
c0012cff:	56                   	push   esi
c0012d00:	e8 52 da fe ff       	call   c0000757 <strcpy>
c0012d05:	5a                   	pop    edx
c0012d06:	59                   	pop    ecx
c0012d07:	68 2f b8 02 c0       	push   0xc002b82f
c0012d0c:	56                   	push   esi
c0012d0d:	e8 fc da fe ff       	call   c000080e <strcat>
c0012d12:	5d                   	pop    ebp
c0012d13:	58                   	pop    eax
c0012d14:	57                   	push   edi
c0012d15:	56                   	push   esi
c0012d16:	e8 f3 da fe ff       	call   c000080e <strcat>
c0012d1b:	83 c4 10             	add    esp,0x10
c0012d1e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d21:	3c 60                	cmp    al,0x60
c0012d23:	7e 03                	jle    c0012d28 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d25:	83 e8 20             	sub    eax,0x20
c0012d28:	88 04 24             	mov    BYTE PTR [esp],al
c0012d2b:	88 03                	mov    BYTE PTR [ebx],al
c0012d2d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d34:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d3a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d3e:	bf 03 00 00 00       	mov    edi,0x3
c0012d43:	b8 03 00 00 00       	mov    eax,0x3
c0012d48:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d4b:	84 d2                	test   dl,dl
c0012d4d:	0f 84 91 00 00 00    	je     c0012de4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d53:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d56:	80 fa 5c             	cmp    dl,0x5c
c0012d59:	74 05                	je     c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d5b:	80 fa 2f             	cmp    dl,0x2f
c0012d5e:	75 12                	jne    c0012d72 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d60:	89 c5                	mov    ebp,eax
c0012d62:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d67:	74 09                	je     c0012d72 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d69:	40                   	inc    eax
c0012d6a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d6e:	89 cf                	mov    edi,ecx
c0012d70:	eb d6                	jmp    c0012d48 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d72:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d77:	75 5b                	jne    c0012dd4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d79:	80 fa 2e             	cmp    dl,0x2e
c0012d7c:	75 56                	jne    c0012dd4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d7e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d82:	74 19                	je     c0012d9d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d84:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d89:	74 53                	je     c0012dde <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d8b:	89 f9                	mov    ecx,edi
c0012d8d:	41                   	inc    ecx
c0012d8e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d91:	80 fa 2f             	cmp    dl,0x2f
c0012d94:	74 f7                	je     c0012d8d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d96:	80 fa 5c             	cmp    dl,0x5c
c0012d99:	74 f2                	je     c0012d8d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d9b:	eb d1                	jmp    c0012d6e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d9d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012da2:	74 3a                	je     c0012dde <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012da4:	83 f8 03             	cmp    eax,0x3
c0012da7:	74 c5                	je     c0012d6e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012da9:	41                   	inc    ecx
c0012daa:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012dad:	80 fa 2f             	cmp    dl,0x2f
c0012db0:	74 f7                	je     c0012da9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012db2:	80 fa 5c             	cmp    dl,0x5c
c0012db5:	74 f2                	je     c0012da9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012db7:	48                   	dec    eax
c0012db8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dbc:	75 06                	jne    c0012dc4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dbe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dc2:	eb f3                	jmp    c0012db7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012dc4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dc8:	74 07                	je     c0012dd1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012dca:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dce:	48                   	dec    eax
c0012dcf:	eb f3                	jmp    c0012dc4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dd1:	40                   	inc    eax
c0012dd2:	eb 9a                	jmp    c0012d6e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dd4:	80 fa 2f             	cmp    dl,0x2f
c0012dd7:	74 95                	je     c0012d6e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dd9:	80 fa 5c             	cmp    dl,0x5c
c0012ddc:	74 90                	je     c0012d6e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dde:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012de1:	40                   	inc    eax
c0012de2:	eb 8a                	jmp    c0012d6e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012de8:	83 ec 0c             	sub    esp,0xc
c0012deb:	53                   	push   ebx
c0012dec:	e8 e4 d8 fe ff       	call   c00006d5 <strlen>
c0012df1:	83 c4 10             	add    esp,0x10
c0012df4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012df9:	75 26                	jne    c0012e21 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012dfb:	83 ec 0c             	sub    esp,0xc
c0012dfe:	53                   	push   ebx
c0012dff:	e8 d1 d8 fe ff       	call   c00006d5 <strlen>
c0012e04:	83 c4 10             	add    esp,0x10
c0012e07:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e0c:	74 26                	je     c0012e34 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e0e:	83 ec 0c             	sub    esp,0xc
c0012e11:	53                   	push   ebx
c0012e12:	e8 be d8 fe ff       	call   c00006d5 <strlen>
c0012e17:	83 c4 10             	add    esp,0x10
c0012e1a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e1f:	eb c7                	jmp    c0012de8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e21:	83 ec 0c             	sub    esp,0xc
c0012e24:	53                   	push   ebx
c0012e25:	e8 ab d8 fe ff       	call   c00006d5 <strlen>
c0012e2a:	83 c4 10             	add    esp,0x10
c0012e2d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e32:	74 c7                	je     c0012dfb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e34:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e3a:	5b                   	pop    ebx
c0012e3b:	5e                   	pop    esi
c0012e3c:	5f                   	pop    edi
c0012e3d:	5d                   	pop    ebp
c0012e3e:	c3                   	ret    
c0012e3f:	90                   	nop

c0012e40 <File::File(char const*, Process*)>:
c0012e40:	83 ec 0c             	sub    esp,0xc
c0012e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e47:	83 ec 08             	sub    esp,0x8
c0012e4a:	6a 00                	push   0x0
c0012e4c:	50                   	push   eax
c0012e4d:	e8 62 e6 ff ff       	call   c00114b4 <UnixFile::UnixFile(int)>
c0012e52:	83 c4 10             	add    esp,0x10
c0012e55:	ba 10 a2 02 c0       	mov    edx,0xc002a210
c0012e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e5e:	89 10                	mov    DWORD PTR [eax],edx
c0012e60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e64:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e6e:	83 c0 0d             	add    eax,0xd
c0012e71:	83 ec 04             	sub    esp,0x4
c0012e74:	52                   	push   edx
c0012e75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e79:	50                   	push   eax
c0012e7a:	e8 17 fe ff ff       	call   c0012c96 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e7f:	83 c4 10             	add    esp,0x10
c0012e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e86:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e89:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e90:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e9e:	90                   	nop
c0012e9f:	83 c4 0c             	add    esp,0xc
c0012ea2:	c3                   	ret    
c0012ea3:	90                   	nop

c0012ea4 <File::open(FileOpenMode)>:
c0012ea4:	53                   	push   ebx
c0012ea5:	b8 0b 00 00 00       	mov    eax,0xb
c0012eaa:	83 ec 08             	sub    esp,0x8
c0012ead:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012eb1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012eb8:	80 fa 19             	cmp    dl,0x19
c0012ebb:	77 40                	ja     c0012efd <File::open(FileOpenMode)+0x59>
c0012ebd:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012ec4:	85 d2                	test   edx,edx
c0012ec6:	74 35                	je     c0012efd <File::open(FileOpenMode)+0x59>
c0012ec8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ece:	85 d2                	test   edx,edx
c0012ed0:	74 2b                	je     c0012efd <File::open(FileOpenMode)+0x59>
c0012ed2:	b8 06 00 00 00       	mov    eax,0x6
c0012ed7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012edb:	75 20                	jne    c0012efd <File::open(FileOpenMode)+0x59>
c0012edd:	8b 02                	mov    eax,DWORD PTR [edx]
c0012edf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ee5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ee9:	51                   	push   ecx
c0012eea:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012eed:	51                   	push   ecx
c0012eee:	52                   	push   edx
c0012eef:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	85 c0                	test   eax,eax
c0012ef7:	75 04                	jne    c0012efd <File::open(FileOpenMode)+0x59>
c0012ef9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012efd:	83 c4 08             	add    esp,0x8
c0012f00:	5b                   	pop    ebx
c0012f01:	c3                   	ret    

c0012f02 <File::close()>:
c0012f02:	53                   	push   ebx
c0012f03:	b8 0b 00 00 00       	mov    eax,0xb
c0012f08:	83 ec 08             	sub    esp,0x8
c0012f0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f0f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f16:	80 fa 19             	cmp    dl,0x19
c0012f19:	77 41                	ja     c0012f5c <File::close()+0x5a>
c0012f1b:	8b 1c 95 e0 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f20]
c0012f22:	85 db                	test   ebx,ebx
c0012f24:	74 36                	je     c0012f5c <File::close()+0x5a>
c0012f26:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f2d:	74 2d                	je     c0012f5c <File::close()+0x5a>
c0012f2f:	b8 05 00 00 00       	mov    eax,0x5
c0012f34:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f38:	74 22                	je     c0012f5c <File::close()+0x5a>
c0012f3a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f3e:	8b 04 95 e0 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f20]
c0012f45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f4b:	53                   	push   ebx
c0012f4c:	53                   	push   ebx
c0012f4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f4f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f55:	50                   	push   eax
c0012f56:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f59:	83 c4 10             	add    esp,0x10
c0012f5c:	83 c4 08             	add    esp,0x8
c0012f5f:	5b                   	pop    ebx
c0012f60:	c3                   	ret    
c0012f61:	90                   	nop

c0012f62 <File::seek(unsigned long long)>:
c0012f62:	56                   	push   esi
c0012f63:	53                   	push   ebx
c0012f64:	b8 0b 00 00 00       	mov    eax,0xb
c0012f69:	51                   	push   ecx
c0012f6a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f72:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f7d:	80 fa 19             	cmp    dl,0x19
c0012f80:	77 31                	ja     c0012fb3 <File::seek(unsigned long long)+0x51>
c0012f82:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012f89:	85 d2                	test   edx,edx
c0012f8b:	74 26                	je     c0012fb3 <File::seek(unsigned long long)+0x51>
c0012f8d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f93:	85 d2                	test   edx,edx
c0012f95:	74 1c                	je     c0012fb3 <File::seek(unsigned long long)+0x51>
c0012f97:	b8 05 00 00 00       	mov    eax,0x5
c0012f9c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012fa0:	74 11                	je     c0012fb3 <File::seek(unsigned long long)+0x51>
c0012fa2:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fa4:	53                   	push   ebx
c0012fa5:	51                   	push   ecx
c0012fa6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012fac:	52                   	push   edx
c0012fad:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012fb0:	83 c4 10             	add    esp,0x10
c0012fb3:	5a                   	pop    edx
c0012fb4:	5b                   	pop    ebx
c0012fb5:	5e                   	pop    esi
c0012fb6:	c3                   	ret    
c0012fb7:	90                   	nop

c0012fb8 <File::tell(unsigned long long*)>:
c0012fb8:	83 ec 0c             	sub    esp,0xc
c0012fbb:	b8 0b 00 00 00       	mov    eax,0xb
c0012fc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fc4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fcb:	80 fa 19             	cmp    dl,0x19
c0012fce:	77 34                	ja     c0013004 <File::tell(unsigned long long*)+0x4c>
c0012fd0:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012fd7:	85 d2                	test   edx,edx
c0012fd9:	74 29                	je     c0013004 <File::tell(unsigned long long*)+0x4c>
c0012fdb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fe1:	85 d2                	test   edx,edx
c0012fe3:	74 1f                	je     c0013004 <File::tell(unsigned long long*)+0x4c>
c0012fe5:	b8 05 00 00 00       	mov    eax,0x5
c0012fea:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012fee:	74 14                	je     c0013004 <File::tell(unsigned long long*)+0x4c>
c0012ff0:	50                   	push   eax
c0012ff1:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ff3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ff7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ffd:	52                   	push   edx
c0012ffe:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013001:	83 c4 10             	add    esp,0x10
c0013004:	83 c4 0c             	add    esp,0xc
c0013007:	c3                   	ret    

c0013008 <File::rewind()>:
c0013008:	83 ec 10             	sub    esp,0x10
c001300b:	6a 00                	push   0x0
c001300d:	6a 00                	push   0x0
c001300f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013013:	e8 4a ff ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c0013018:	83 c4 1c             	add    esp,0x1c
c001301b:	c3                   	ret    

c001301c <File::unlink()>:
c001301c:	83 ec 0c             	sub    esp,0xc
c001301f:	b8 0b 00 00 00       	mov    eax,0xb
c0013024:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013028:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001302f:	80 f9 19             	cmp    cl,0x19
c0013032:	77 2f                	ja     c0013063 <File::unlink()+0x47>
c0013034:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c001303b:	85 c9                	test   ecx,ecx
c001303d:	74 24                	je     c0013063 <File::unlink()+0x47>
c001303f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013045:	85 c9                	test   ecx,ecx
c0013047:	74 1a                	je     c0013063 <File::unlink()+0x47>
c0013049:	b8 06 00 00 00       	mov    eax,0x6
c001304e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013052:	75 0f                	jne    c0013063 <File::unlink()+0x47>
c0013054:	83 c2 0d             	add    edx,0xd
c0013057:	50                   	push   eax
c0013058:	50                   	push   eax
c0013059:	8b 01                	mov    eax,DWORD PTR [ecx]
c001305b:	52                   	push   edx
c001305c:	51                   	push   ecx
c001305d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013060:	83 c4 10             	add    esp,0x10
c0013063:	83 c4 0c             	add    esp,0xc
c0013066:	c3                   	ret    
c0013067:	90                   	nop

c0013068 <File::rename(char const*)>:
c0013068:	83 ec 0c             	sub    esp,0xc
c001306b:	b8 0b 00 00 00       	mov    eax,0xb
c0013070:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013074:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001307b:	80 f9 19             	cmp    cl,0x19
c001307e:	77 32                	ja     c00130b2 <File::rename(char const*)+0x4a>
c0013080:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013087:	85 c9                	test   ecx,ecx
c0013089:	74 27                	je     c00130b2 <File::rename(char const*)+0x4a>
c001308b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013091:	85 c9                	test   ecx,ecx
c0013093:	74 1d                	je     c00130b2 <File::rename(char const*)+0x4a>
c0013095:	b8 06 00 00 00       	mov    eax,0x6
c001309a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001309e:	75 12                	jne    c00130b2 <File::rename(char const*)+0x4a>
c00130a0:	83 c2 0d             	add    edx,0xd
c00130a3:	50                   	push   eax
c00130a4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130aa:	52                   	push   edx
c00130ab:	51                   	push   ecx
c00130ac:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	83 c4 0c             	add    esp,0xc
c00130b5:	c3                   	ret    

c00130b6 <File::chfatattr(unsigned char, unsigned char)>:
c00130b6:	57                   	push   edi
c00130b7:	b8 0b 00 00 00       	mov    eax,0xb
c00130bc:	56                   	push   esi
c00130bd:	53                   	push   ebx
c00130be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130cd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130d1:	80 f9 19             	cmp    cl,0x19
c00130d4:	77 37                	ja     c001310d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130d6:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c00130dd:	85 c9                	test   ecx,ecx
c00130df:	74 2c                	je     c001310d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130e7:	85 c9                	test   ecx,ecx
c00130e9:	74 22                	je     c001310d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130eb:	b8 06 00 00 00       	mov    eax,0x6
c00130f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130f4:	75 17                	jne    c001310d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130f6:	8b 39                	mov    edi,DWORD PTR [ecx]
c00130f8:	89 f0                	mov    eax,esi
c00130fa:	83 c2 0d             	add    edx,0xd
c00130fd:	0f b6 f0             	movzx  esi,al
c0013100:	0f b6 db             	movzx  ebx,bl
c0013103:	56                   	push   esi
c0013104:	53                   	push   ebx
c0013105:	52                   	push   edx
c0013106:	51                   	push   ecx
c0013107:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001310a:	83 c4 10             	add    esp,0x10
c001310d:	5b                   	pop    ebx
c001310e:	5e                   	pop    esi
c001310f:	5f                   	pop    edi
c0013110:	c3                   	ret    
c0013111:	90                   	nop

c0013112 <File::exists()>:
c0013112:	83 ec 0c             	sub    esp,0xc
c0013115:	31 c0                	xor    eax,eax
c0013117:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001311b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013122:	80 f9 19             	cmp    cl,0x19
c0013125:	77 24                	ja     c001314b <File::exists()+0x39>
c0013127:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c001312e:	85 c9                	test   ecx,ecx
c0013130:	74 19                	je     c001314b <File::exists()+0x39>
c0013132:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013138:	85 c9                	test   ecx,ecx
c001313a:	74 0f                	je     c001314b <File::exists()+0x39>
c001313c:	83 c2 0d             	add    edx,0xd
c001313f:	50                   	push   eax
c0013140:	50                   	push   eax
c0013141:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013143:	52                   	push   edx
c0013144:	51                   	push   ecx
c0013145:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013148:	83 c4 10             	add    esp,0x10
c001314b:	83 c4 0c             	add    esp,0xc
c001314e:	c3                   	ret    
c001314f:	90                   	nop

c0013150 <File::stat(unsigned long long*, bool*)>:
c0013150:	56                   	push   esi
c0013151:	53                   	push   ebx
c0013152:	50                   	push   eax
c0013153:	b8 0b 00 00 00       	mov    eax,0xb
c0013158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001315c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013160:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013167:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001316b:	80 f9 19             	cmp    cl,0x19
c001316e:	77 3d                	ja     c00131ad <File::stat(unsigned long long*, bool*)+0x5d>
c0013170:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013177:	85 c9                	test   ecx,ecx
c0013179:	74 32                	je     c00131ad <File::stat(unsigned long long*, bool*)+0x5d>
c001317b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013181:	85 c9                	test   ecx,ecx
c0013183:	74 28                	je     c00131ad <File::stat(unsigned long long*, bool*)+0x5d>
c0013185:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013187:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001318b:	74 13                	je     c00131a0 <File::stat(unsigned long long*, bool*)+0x50>
c001318d:	83 ec 04             	sub    esp,0x4
c0013190:	56                   	push   esi
c0013191:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013197:	51                   	push   ecx
c0013198:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001319b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001319e:	eb 0a                	jmp    c00131aa <File::stat(unsigned long long*, bool*)+0x5a>
c00131a0:	53                   	push   ebx
c00131a1:	83 c2 0d             	add    edx,0xd
c00131a4:	56                   	push   esi
c00131a5:	52                   	push   edx
c00131a6:	51                   	push   ecx
c00131a7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00131aa:	83 c4 10             	add    esp,0x10
c00131ad:	5a                   	pop    edx
c00131ae:	5b                   	pop    ebx
c00131af:	5e                   	pop    esi
c00131b0:	c3                   	ret    

c00131b1 <Fs::setcwd(Process*, char*)>:
c00131b1:	55                   	push   ebp
c00131b2:	57                   	push   edi
c00131b3:	56                   	push   esi
c00131b4:	53                   	push   ebx
c00131b5:	81 ec 20 02 00 00    	sub    esp,0x220
c00131bb:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131c2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131c8:	57                   	push   edi
c00131c9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131d0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131d4:	56                   	push   esi
c00131d5:	e8 bc fa ff ff       	call   c0012c96 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131da:	89 34 24             	mov    DWORD PTR [esp],esi
c00131dd:	e8 f3 d4 fe ff       	call   c00006d5 <strlen>
c00131e2:	83 c4 10             	add    esp,0x10
c00131e5:	83 f8 02             	cmp    eax,0x2
c00131e8:	77 17                	ja     c0013201 <Fs::setcwd(Process*, char*)+0x50>
c00131ea:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131ef:	83 e8 41             	sub    eax,0x41
c00131f2:	83 f8 19             	cmp    eax,0x19
c00131f5:	76 24                	jbe    c001321b <Fs::setcwd(Process*, char*)+0x6a>
c00131f7:	b8 03 00 00 00       	mov    eax,0x3
c00131fc:	e9 e0 00 00 00       	jmp    c00132e1 <Fs::setcwd(Process*, char*)+0x130>
c0013201:	83 ec 0c             	sub    esp,0xc
c0013204:	56                   	push   esi
c0013205:	e8 cb d4 fe ff       	call   c00006d5 <strlen>
c001320a:	83 c4 10             	add    esp,0x10
c001320d:	83 f8 03             	cmp    eax,0x3
c0013210:	75 34                	jne    c0013246 <Fs::setcwd(Process*, char*)+0x95>
c0013212:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013217:	75 2d                	jne    c0013246 <Fs::setcwd(Process*, char*)+0x95>
c0013219:	eb cf                	jmp    c00131ea <Fs::setcwd(Process*, char*)+0x39>
c001321b:	8b 14 85 e0 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f20]
c0013222:	b8 05 00 00 00       	mov    eax,0x5
c0013227:	85 d2                	test   edx,edx
c0013229:	0f 84 b2 00 00 00    	je     c00132e1 <Fs::setcwd(Process*, char*)+0x130>
c001322f:	b8 06 00 00 00       	mov    eax,0x6
c0013234:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001323b:	0f 85 92 00 00 00    	jne    c00132d3 <Fs::setcwd(Process*, char*)+0x122>
c0013241:	e9 9b 00 00 00       	jmp    c00132e1 <Fs::setcwd(Process*, char*)+0x130>
c0013246:	83 ec 0c             	sub    esp,0xc
c0013249:	68 14 01 00 00       	push   0x114
c001324e:	e8 c5 c3 ff ff       	call   c000f618 <malloc>
c0013253:	83 c4 0c             	add    esp,0xc
c0013256:	89 c3                	mov    ebx,eax
c0013258:	55                   	push   ebp
c0013259:	56                   	push   esi
c001325a:	50                   	push   eax
c001325b:	e8 e0 fb ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c0013260:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013265:	83 c4 0c             	add    esp,0xc
c0013268:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001326c:	50                   	push   eax
c001326d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013271:	50                   	push   eax
c0013272:	53                   	push   ebx
c0013273:	e8 d8 fe ff ff       	call   c0013150 <File::stat(unsigned long long*, bool*)>
c0013278:	83 c4 10             	add    esp,0x10
c001327b:	83 f8 02             	cmp    eax,0x2
c001327e:	74 04                	je     c0013284 <Fs::setcwd(Process*, char*)+0xd3>
c0013280:	85 c0                	test   eax,eax
c0013282:	74 1c                	je     c00132a0 <Fs::setcwd(Process*, char*)+0xef>
c0013284:	b8 01 00 00 00       	mov    eax,0x1
c0013289:	85 db                	test   ebx,ebx
c001328b:	74 54                	je     c00132e1 <Fs::setcwd(Process*, char*)+0x130>
c001328d:	83 ec 0c             	sub    esp,0xc
c0013290:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013292:	53                   	push   ebx
c0013293:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013296:	83 c4 10             	add    esp,0x10
c0013299:	b8 01 00 00 00       	mov    eax,0x1
c001329e:	eb 41                	jmp    c00132e1 <Fs::setcwd(Process*, char*)+0x130>
c00132a0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00132a5:	75 1c                	jne    c00132c3 <Fs::setcwd(Process*, char*)+0x112>
c00132a7:	b8 02 00 00 00       	mov    eax,0x2
c00132ac:	85 db                	test   ebx,ebx
c00132ae:	74 31                	je     c00132e1 <Fs::setcwd(Process*, char*)+0x130>
c00132b0:	83 ec 0c             	sub    esp,0xc
c00132b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132b5:	53                   	push   ebx
c00132b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132b9:	83 c4 10             	add    esp,0x10
c00132bc:	b8 02 00 00 00       	mov    eax,0x2
c00132c1:	eb 1e                	jmp    c00132e1 <Fs::setcwd(Process*, char*)+0x130>
c00132c3:	85 db                	test   ebx,ebx
c00132c5:	74 0c                	je     c00132d3 <Fs::setcwd(Process*, char*)+0x122>
c00132c7:	83 ec 0c             	sub    esp,0xc
c00132ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132cc:	53                   	push   ebx
c00132cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132d0:	83 c4 10             	add    esp,0x10
c00132d3:	50                   	push   eax
c00132d4:	50                   	push   eax
c00132d5:	56                   	push   esi
c00132d6:	57                   	push   edi
c00132d7:	e8 7b d4 fe ff       	call   c0000757 <strcpy>
c00132dc:	83 c4 10             	add    esp,0x10
c00132df:	31 c0                	xor    eax,eax
c00132e1:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132e7:	5b                   	pop    ebx
c00132e8:	5e                   	pop    esi
c00132e9:	5f                   	pop    edi
c00132ea:	5d                   	pop    ebp
c00132eb:	c3                   	ret    

c00132ec <Directory::Directory(char const*, Process*)>:
c00132ec:	83 ec 0c             	sub    esp,0xc
c00132ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f3:	83 ec 08             	sub    esp,0x8
c00132f6:	6a 00                	push   0x0
c00132f8:	50                   	push   eax
c00132f9:	e8 b6 e1 ff ff       	call   c00114b4 <UnixFile::UnixFile(int)>
c00132fe:	83 c4 10             	add    esp,0x10
c0013301:	ba 2c a2 02 c0       	mov    edx,0xc002a22c
c0013306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330a:	89 10                	mov    DWORD PTR [eax],edx
c001330c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013310:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331a:	83 c0 0d             	add    eax,0xd
c001331d:	83 ec 04             	sub    esp,0x4
c0013320:	52                   	push   edx
c0013321:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013325:	50                   	push   eax
c0013326:	e8 6b f9 ff ff       	call   c0012c96 <Fs::standardiseFiles(char*, char const*, char const*)>
c001332b:	83 c4 10             	add    esp,0x10
c001332e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013332:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013335:	8d 50 bf             	lea    edx,[eax-0x41]
c0013338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013346:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001334a:	90                   	nop
c001334b:	83 c4 0c             	add    esp,0xc
c001334e:	c3                   	ret    
c001334f:	90                   	nop

c0013350 <Directory::open()>:
c0013350:	53                   	push   ebx
c0013351:	b8 0b 00 00 00       	mov    eax,0xb
c0013356:	83 ec 08             	sub    esp,0x8
c0013359:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001335d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013364:	80 fa 19             	cmp    dl,0x19
c0013367:	77 3d                	ja     c00133a6 <Directory::open()+0x56>
c0013369:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0013370:	85 d2                	test   edx,edx
c0013372:	74 32                	je     c00133a6 <Directory::open()+0x56>
c0013374:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001337a:	85 d2                	test   edx,edx
c001337c:	74 28                	je     c00133a6 <Directory::open()+0x56>
c001337e:	b8 06 00 00 00       	mov    eax,0x6
c0013383:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013387:	75 1d                	jne    c00133a6 <Directory::open()+0x56>
c0013389:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001338f:	50                   	push   eax
c0013390:	8b 02                	mov    eax,DWORD PTR [edx]
c0013392:	51                   	push   ecx
c0013393:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013396:	51                   	push   ecx
c0013397:	52                   	push   edx
c0013398:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001339b:	83 c4 10             	add    esp,0x10
c001339e:	85 c0                	test   eax,eax
c00133a0:	75 04                	jne    c00133a6 <Directory::open()+0x56>
c00133a2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133a6:	83 c4 08             	add    esp,0x8
c00133a9:	5b                   	pop    ebx
c00133aa:	c3                   	ret    
c00133ab:	90                   	nop

c00133ac <Directory::close()>:
c00133ac:	53                   	push   ebx
c00133ad:	b8 0b 00 00 00       	mov    eax,0xb
c00133b2:	83 ec 08             	sub    esp,0x8
c00133b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133b9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133c0:	80 fa 19             	cmp    dl,0x19
c00133c3:	77 41                	ja     c0013406 <Directory::close()+0x5a>
c00133c5:	8b 1c 95 e0 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f20]
c00133cc:	85 db                	test   ebx,ebx
c00133ce:	74 36                	je     c0013406 <Directory::close()+0x5a>
c00133d0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133d7:	74 2d                	je     c0013406 <Directory::close()+0x5a>
c00133d9:	b8 05 00 00 00       	mov    eax,0x5
c00133de:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133e2:	74 22                	je     c0013406 <Directory::close()+0x5a>
c00133e4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133e8:	8b 04 95 e0 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f20]
c00133ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133f5:	53                   	push   ebx
c00133f6:	53                   	push   ebx
c00133f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00133f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00133ff:	50                   	push   eax
c0013400:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013403:	83 c4 10             	add    esp,0x10
c0013406:	83 c4 08             	add    esp,0x8
c0013409:	5b                   	pop    ebx
c001340a:	c3                   	ret    
c001340b:	90                   	nop

c001340c <Directory::unlink()>:
c001340c:	83 ec 0c             	sub    esp,0xc
c001340f:	b8 0b 00 00 00       	mov    eax,0xb
c0013414:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013418:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001341f:	80 f9 19             	cmp    cl,0x19
c0013422:	77 2f                	ja     c0013453 <Directory::unlink()+0x47>
c0013424:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c001342b:	85 c9                	test   ecx,ecx
c001342d:	74 24                	je     c0013453 <Directory::unlink()+0x47>
c001342f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013435:	85 c9                	test   ecx,ecx
c0013437:	74 1a                	je     c0013453 <Directory::unlink()+0x47>
c0013439:	b8 06 00 00 00       	mov    eax,0x6
c001343e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013442:	75 0f                	jne    c0013453 <Directory::unlink()+0x47>
c0013444:	83 c2 0d             	add    edx,0xd
c0013447:	50                   	push   eax
c0013448:	50                   	push   eax
c0013449:	8b 01                	mov    eax,DWORD PTR [ecx]
c001344b:	52                   	push   edx
c001344c:	51                   	push   ecx
c001344d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013450:	83 c4 10             	add    esp,0x10
c0013453:	83 c4 0c             	add    esp,0xc
c0013456:	c3                   	ret    
c0013457:	90                   	nop

c0013458 <Directory::rename(char const*)>:
c0013458:	83 ec 0c             	sub    esp,0xc
c001345b:	b8 0b 00 00 00       	mov    eax,0xb
c0013460:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013464:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001346b:	80 f9 19             	cmp    cl,0x19
c001346e:	77 32                	ja     c00134a2 <Directory::rename(char const*)+0x4a>
c0013470:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013477:	85 c9                	test   ecx,ecx
c0013479:	74 27                	je     c00134a2 <Directory::rename(char const*)+0x4a>
c001347b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013481:	85 c9                	test   ecx,ecx
c0013483:	74 1d                	je     c00134a2 <Directory::rename(char const*)+0x4a>
c0013485:	b8 06 00 00 00       	mov    eax,0x6
c001348a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001348e:	75 12                	jne    c00134a2 <Directory::rename(char const*)+0x4a>
c0013490:	83 c2 0d             	add    edx,0xd
c0013493:	50                   	push   eax
c0013494:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013496:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001349a:	52                   	push   edx
c001349b:	51                   	push   ecx
c001349c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001349f:	83 c4 10             	add    esp,0x10
c00134a2:	83 c4 0c             	add    esp,0xc
c00134a5:	c3                   	ret    

c00134a6 <Directory::exists()>:
c00134a6:	83 ec 0c             	sub    esp,0xc
c00134a9:	31 c0                	xor    eax,eax
c00134ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134af:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134b6:	80 f9 19             	cmp    cl,0x19
c00134b9:	77 24                	ja     c00134df <Directory::exists()+0x39>
c00134bb:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c00134c2:	85 c9                	test   ecx,ecx
c00134c4:	74 19                	je     c00134df <Directory::exists()+0x39>
c00134c6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134cc:	85 c9                	test   ecx,ecx
c00134ce:	74 0f                	je     c00134df <Directory::exists()+0x39>
c00134d0:	83 c2 0d             	add    edx,0xd
c00134d3:	50                   	push   eax
c00134d4:	50                   	push   eax
c00134d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134d7:	52                   	push   edx
c00134d8:	51                   	push   ecx
c00134d9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134dc:	83 c4 10             	add    esp,0x10
c00134df:	83 c4 0c             	add    esp,0xc
c00134e2:	c3                   	ret    
c00134e3:	90                   	nop

c00134e4 <Directory::read(dirent*)>:
c00134e4:	83 ec 1c             	sub    esp,0x1c
c00134e7:	b8 0b 00 00 00       	mov    eax,0xb
c00134ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134f0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134f7:	80 fa 19             	cmp    dl,0x19
c00134fa:	77 30                	ja     c001352c <Directory::read(dirent*)+0x48>
c00134fc:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0013503:	85 d2                	test   edx,edx
c0013505:	74 25                	je     c001352c <Directory::read(dirent*)+0x48>
c0013507:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001350e:	74 1c                	je     c001352c <Directory::read(dirent*)+0x48>
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013515:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013519:	52                   	push   edx
c001351a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001351e:	6a 00                	push   0x0
c0013520:	68 10 01 00 00       	push   0x110
c0013525:	51                   	push   ecx
c0013526:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013529:	83 c4 20             	add    esp,0x20
c001352c:	83 c4 1c             	add    esp,0x1c
c001352f:	c3                   	ret    

c0013530 <Directory::create()>:
c0013530:	83 ec 0c             	sub    esp,0xc
c0013533:	b8 0b 00 00 00       	mov    eax,0xb
c0013538:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001353c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013543:	80 f9 19             	cmp    cl,0x19
c0013546:	77 2f                	ja     c0013577 <Directory::create()+0x47>
c0013548:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c001354f:	85 c9                	test   ecx,ecx
c0013551:	74 24                	je     c0013577 <Directory::create()+0x47>
c0013553:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013559:	85 c9                	test   ecx,ecx
c001355b:	74 1a                	je     c0013577 <Directory::create()+0x47>
c001355d:	b8 06 00 00 00       	mov    eax,0x6
c0013562:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013566:	75 0f                	jne    c0013577 <Directory::create()+0x47>
c0013568:	83 c2 0d             	add    edx,0xd
c001356b:	50                   	push   eax
c001356c:	50                   	push   eax
c001356d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001356f:	52                   	push   edx
c0013570:	51                   	push   ecx
c0013571:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013574:	83 c4 10             	add    esp,0x10
c0013577:	83 c4 0c             	add    esp,0xc
c001357a:	c3                   	ret    
c001357b:	90                   	nop

c001357c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001357c:	b8 0a 00 00 00       	mov    eax,0xa
c0013581:	c3                   	ret    

c0013582 <Bus::Bus(char const*)>:
c0013582:	83 ec 0c             	sub    esp,0xc
c0013585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013589:	83 ec 08             	sub    esp,0x8
c001358c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013590:	50                   	push   eax
c0013591:	e8 68 09 00 00       	call   c0013efe <Device::Device(char const*)>
c0013596:	83 c4 10             	add    esp,0x10
c0013599:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c001359e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a2:	89 10                	mov    DWORD PTR [eax],edx
c00135a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a8:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135b2:	90                   	nop
c00135b3:	83 c4 0c             	add    esp,0xc
c00135b6:	c3                   	ret    
c00135b7:	90                   	nop

c00135b8 <Bus::~Bus()>:
c00135b8:	83 ec 0c             	sub    esp,0xc
c00135bb:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c00135c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c4:	89 10                	mov    DWORD PTR [eax],edx
c00135c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ca:	83 ec 0c             	sub    esp,0xc
c00135cd:	50                   	push   eax
c00135ce:	e8 0d 06 00 00       	call   c0013be0 <Device::~Device()>
c00135d3:	83 c4 10             	add    esp,0x10
c00135d6:	90                   	nop
c00135d7:	83 c4 0c             	add    esp,0xc
c00135da:	c3                   	ret    
c00135db:	90                   	nop

c00135dc <Bus::~Bus()>:
c00135dc:	83 ec 0c             	sub    esp,0xc
c00135df:	83 ec 0c             	sub    esp,0xc
c00135e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e6:	e8 cd ff ff ff       	call   c00135b8 <Bus::~Bus()>
c00135eb:	83 c4 10             	add    esp,0x10
c00135ee:	83 ec 08             	sub    esp,0x8
c00135f1:	68 58 01 00 00       	push   0x158
c00135f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135fa:	e8 08 f2 ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c00135ff:	83 c4 10             	add    esp,0x10
c0013602:	83 c4 0c             	add    esp,0xc
c0013605:	c3                   	ret    

c0013606 <Buzzer::Buzzer(char const*)>:
c0013606:	83 ec 0c             	sub    esp,0xc
c0013609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001360d:	83 ec 08             	sub    esp,0x8
c0013610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013614:	50                   	push   eax
c0013615:	e8 e4 08 00 00       	call   c0013efe <Device::Device(char const*)>
c001361a:	83 c4 10             	add    esp,0x10
c001361d:	ba 74 a2 02 c0       	mov    edx,0xc002a274
c0013622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013626:	89 10                	mov    DWORD PTR [eax],edx
c0013628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001362c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001363a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013644:	90                   	nop
c0013645:	83 c4 0c             	add    esp,0xc
c0013648:	c3                   	ret    
c0013649:	90                   	nop

c001364a <Buzzer::~Buzzer()>:
c001364a:	83 ec 0c             	sub    esp,0xc
c001364d:	ba 74 a2 02 c0       	mov    edx,0xc002a274
c0013652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013656:	89 10                	mov    DWORD PTR [eax],edx
c0013658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001365c:	83 ec 0c             	sub    esp,0xc
c001365f:	50                   	push   eax
c0013660:	e8 7b 05 00 00       	call   c0013be0 <Device::~Device()>
c0013665:	83 c4 10             	add    esp,0x10
c0013668:	90                   	nop
c0013669:	83 c4 0c             	add    esp,0xc
c001366c:	c3                   	ret    
c001366d:	90                   	nop

c001366e <Buzzer::~Buzzer()>:
c001366e:	83 ec 0c             	sub    esp,0xc
c0013671:	83 ec 0c             	sub    esp,0xc
c0013674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013678:	e8 cd ff ff ff       	call   c001364a <Buzzer::~Buzzer()>
c001367d:	83 c4 10             	add    esp,0x10
c0013680:	83 ec 08             	sub    esp,0x8
c0013683:	68 5c 01 00 00       	push   0x15c
c0013688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001368c:	e8 76 f1 ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0013691:	83 c4 10             	add    esp,0x10
c0013694:	83 c4 0c             	add    esp,0xc
c0013697:	c3                   	ret    

c0013698 <Buzzer::stop()>:
c0013698:	83 ec 14             	sub    esp,0x14
c001369b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001369f:	8b 10                	mov    edx,DWORD PTR [eax]
c00136a1:	6a 00                	push   0x0
c00136a3:	50                   	push   eax
c00136a4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136a7:	83 c4 1c             	add    esp,0x1c
c00136aa:	c3                   	ret    

c00136ab <beepThread(void*)>:
c00136ab:	53                   	push   ebx
c00136ac:	83 ec 08             	sub    esp,0x8
c00136af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136b3:	e8 00 9e 00 00       	call   c001d4b8 <unlockScheduler()>
c00136b8:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136bd:	52                   	push   edx
c00136be:	52                   	push   edx
c00136bf:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136c5:	52                   	push   edx
c00136c6:	50                   	push   eax
c00136c7:	e8 3a a3 00 00       	call   c001da06 <nanoSleep(unsigned long long)>
c00136cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136cf:	e8 c4 ff ff ff       	call   c0013698 <Buzzer::stop()>
c00136d4:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136dc:	83 c4 18             	add    esp,0x18
c00136df:	5b                   	pop    ebx
c00136e0:	e9 67 a2 00 00       	jmp    c001d94c <blockTask(TaskState)>
c00136e5:	90                   	nop

c00136e6 <Buzzer::beep(int, int, bool)>:
c00136e6:	57                   	push   edi
c00136e7:	56                   	push   esi
c00136e8:	53                   	push   ebx
c00136e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136ed:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136f5:	52                   	push   edx
c00136f6:	52                   	push   edx
c00136f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00136f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136fd:	56                   	push   esi
c00136fe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013701:	83 c4 10             	add    esp,0x10
c0013704:	89 f8                	mov    eax,edi
c0013706:	84 c0                	test   al,al
c0013708:	74 1f                	je     c0013729 <Buzzer::beep(int, int, bool)+0x43>
c001370a:	50                   	push   eax
c001370b:	50                   	push   eax
c001370c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013712:	99                   	cdq    
c0013713:	52                   	push   edx
c0013714:	50                   	push   eax
c0013715:	e8 ec a2 00 00       	call   c001da06 <nanoSleep(unsigned long long)>
c001371a:	83 c4 10             	add    esp,0x10
c001371d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013721:	5b                   	pop    ebx
c0013722:	5e                   	pop    esi
c0013723:	5f                   	pop    edi
c0013724:	e9 6f ff ff ff       	jmp    c0013698 <Buzzer::stop()>
c0013729:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001372f:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0013734:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001373c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013740:	c7 44 24 14 ab 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc00136ab
c0013748:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001374c:	5b                   	pop    ebx
c001374d:	5e                   	pop    esi
c001374e:	5f                   	pop    edi
c001374f:	e9 94 9e 00 00       	jmp    c001d5e8 <Process::createThread(void (*)(void*), void*, int)>

c0013754 <User::loadClockSettings(int)>:
c0013754:	53                   	push   ebx
c0013755:	83 ec 14             	sub    esp,0x14
c0013758:	68 14 01 00 00       	push   0x114
c001375d:	e8 b6 be ff ff       	call   c000f618 <malloc>
c0013762:	83 c4 0c             	add    esp,0xc
c0013765:	89 c3                	mov    ebx,eax
c0013767:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c001376d:	68 9c a2 02 c0       	push   0xc002a29c
c0013772:	50                   	push   eax
c0013773:	e8 c8 f6 ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c0013778:	58                   	pop    eax
c0013779:	5a                   	pop    edx
c001377a:	6a 01                	push   0x1
c001377c:	53                   	push   ebx
c001377d:	e8 22 f7 ff ff       	call   c0012ea4 <File::open(FileOpenMode)>
c0013782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013785:	e8 78 f7 ff ff       	call   c0012f02 <File::close()>
c001378a:	83 c4 10             	add    esp,0x10
c001378d:	85 db                	test   ebx,ebx
c001378f:	74 0f                	je     c00137a0 <User::loadClockSettings(int)+0x4c>
c0013791:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013793:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013797:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001379a:	83 c4 08             	add    esp,0x8
c001379d:	5b                   	pop    ebx
c001379e:	ff e0                	jmp    eax
c00137a0:	83 c4 08             	add    esp,0x8
c00137a3:	5b                   	pop    ebx
c00137a4:	c3                   	ret    
c00137a5:	90                   	nop

c00137a6 <Clock::Clock(char const*)>:
c00137a6:	83 ec 0c             	sub    esp,0xc
c00137a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ad:	83 ec 08             	sub    esp,0x8
c00137b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b4:	50                   	push   eax
c00137b5:	e8 44 07 00 00       	call   c0013efe <Device::Device(char const*)>
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	ba c4 a2 02 c0       	mov    edx,0xc002a2c4
c00137c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c6:	89 10                	mov    DWORD PTR [eax],edx
c00137c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137cc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137d6:	90                   	nop
c00137d7:	83 c4 0c             	add    esp,0xc
c00137da:	c3                   	ret    
c00137db:	90                   	nop

c00137dc <Clock::~Clock()>:
c00137dc:	83 ec 0c             	sub    esp,0xc
c00137df:	ba c4 a2 02 c0       	mov    edx,0xc002a2c4
c00137e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e8:	89 10                	mov    DWORD PTR [eax],edx
c00137ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ee:	83 ec 0c             	sub    esp,0xc
c00137f1:	50                   	push   eax
c00137f2:	e8 e9 03 00 00       	call   c0013be0 <Device::~Device()>
c00137f7:	83 c4 10             	add    esp,0x10
c00137fa:	90                   	nop
c00137fb:	83 c4 0c             	add    esp,0xc
c00137fe:	c3                   	ret    
c00137ff:	90                   	nop

c0013800 <Clock::~Clock()>:
c0013800:	83 ec 0c             	sub    esp,0xc
c0013803:	83 ec 0c             	sub    esp,0xc
c0013806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001380a:	e8 cd ff ff ff       	call   c00137dc <Clock::~Clock()>
c001380f:	83 c4 10             	add    esp,0x10
c0013812:	83 ec 08             	sub    esp,0x8
c0013815:	68 58 01 00 00       	push   0x158
c001381a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001381e:	e8 e4 ef ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0013823:	83 c4 10             	add    esp,0x10
c0013826:	83 c4 0c             	add    esp,0xc
c0013829:	c3                   	ret    

c001382a <Clock::timeInSecondsLocal()>:
c001382a:	53                   	push   ebx
c001382b:	83 ec 14             	sub    esp,0x14
c001382e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013832:	8b 10                	mov    edx,DWORD PTR [eax]
c0013834:	50                   	push   eax
c0013835:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013838:	0f b6 0d 50 dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc50
c001383f:	03 0d 54 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc54
c0013845:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001384b:	89 cb                	mov    ebx,ecx
c001384d:	c1 fb 1f             	sar    ebx,0x1f
c0013850:	01 c8                	add    eax,ecx
c0013852:	11 da                	adc    edx,ebx
c0013854:	83 c4 10             	add    esp,0x10
c0013857:	31 c9                	xor    ecx,ecx
c0013859:	80 3d 51 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc51,0x0
c0013860:	74 05                	je     c0013867 <Clock::timeInSecondsLocal()+0x3d>
c0013862:	b9 08 07 00 00       	mov    ecx,0x708
c0013867:	31 db                	xor    ebx,ebx
c0013869:	01 c8                	add    eax,ecx
c001386b:	11 da                	adc    edx,ebx
c001386d:	83 c4 08             	add    esp,0x8
c0013870:	5b                   	pop    ebx
c0013871:	c3                   	ret    

c0013872 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013872:	57                   	push   edi
c0013873:	56                   	push   esi
c0013874:	53                   	push   ebx
c0013875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013879:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001387d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001387f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013883:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013886:	0f b6 05 50 dc 02 c0 	movzx  eax,BYTE PTR ds:0xc002dc50
c001388d:	03 05 54 dc 02 c0    	add    eax,DWORD PTR ds:0xc002dc54
c0013893:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013899:	99                   	cdq    
c001389a:	29 c6                	sub    esi,eax
c001389c:	19 d7                	sbb    edi,edx
c001389e:	89 f0                	mov    eax,esi
c00138a0:	89 fa                	mov    edx,edi
c00138a2:	31 f6                	xor    esi,esi
c00138a4:	80 3d 51 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc51,0x0
c00138ab:	74 05                	je     c00138b2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138ad:	be 08 07 00 00       	mov    esi,0x708
c00138b2:	31 ff                	xor    edi,edi
c00138b4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138b8:	29 f0                	sub    eax,esi
c00138ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138be:	19 fa                	sbb    edx,edi
c00138c0:	89 d8                	mov    eax,ebx
c00138c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138c6:	5b                   	pop    ebx
c00138c7:	5e                   	pop    esi
c00138c8:	5f                   	pop    edi
c00138c9:	ff e0                	jmp    eax

c00138cb <datetimeToSeconds(datetime_t)>:
c00138cb:	55                   	push   ebp
c00138cc:	57                   	push   edi
c00138cd:	56                   	push   esi
c00138ce:	53                   	push   ebx
c00138cf:	83 ec 14             	sub    esp,0x14
c00138d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138d6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138da:	89 d3                	mov    ebx,edx
c00138dc:	0f b6 c6             	movzx  eax,dh
c00138df:	c1 eb 10             	shr    ebx,0x10
c00138e2:	48                   	dec    eax
c00138e3:	66 81 eb 6c 07       	sub    bx,0x76c
c00138e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138ec:	0f b6 f5             	movzx  esi,ch
c00138ef:	89 cf                	mov    edi,ecx
c00138f1:	6b f6 3c             	imul   esi,esi,0x3c
c00138f4:	c1 ef 10             	shr    edi,0x10
c00138f7:	0f b6 c9             	movzx  ecx,cl
c00138fa:	89 f8                	mov    eax,edi
c00138fc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013902:	0f b6 f8             	movzx  edi,al
c0013905:	0f b6 d2             	movzx  edx,dl
c0013908:	01 fe                	add    esi,edi
c001390a:	01 f1                	add    ecx,esi
c001390c:	0f b7 f3             	movzx  esi,bx
c001390f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013913:	c1 f9 1f             	sar    ecx,0x1f
c0013916:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001391b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001391f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013924:	8b 0c 8d 00 a3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5d00]
c001392b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001392f:	76 29                	jbe    c001395a <datetimeToSeconds(datetime_t)+0x8f>
c0013931:	f6 c3 03             	test   bl,0x3
c0013934:	75 24                	jne    c001395a <datetimeToSeconds(datetime_t)+0x8f>
c0013936:	31 d2                	xor    edx,edx
c0013938:	bf 64 00 00 00       	mov    edi,0x64
c001393d:	89 d8                	mov    eax,ebx
c001393f:	66 f7 f7             	div    di
c0013942:	66 85 d2             	test   dx,dx
c0013945:	75 12                	jne    c0013959 <datetimeToSeconds(datetime_t)+0x8e>
c0013947:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001394d:	bf 90 01 00 00       	mov    edi,0x190
c0013952:	99                   	cdq    
c0013953:	f7 ff                	idiv   edi
c0013955:	85 d2                	test   edx,edx
c0013957:	75 01                	jne    c001395a <datetimeToSeconds(datetime_t)+0x8f>
c0013959:	41                   	inc    ecx
c001395a:	66 83 fb 46          	cmp    bx,0x46
c001395e:	76 45                	jbe    c00139a5 <datetimeToSeconds(datetime_t)+0xda>
c0013960:	bb 46 00 00 00       	mov    ebx,0x46
c0013965:	bf 64 00 00 00       	mov    edi,0x64
c001396a:	bd 90 01 00 00       	mov    ebp,0x190
c001396f:	b8 6d 01 00 00       	mov    eax,0x16d
c0013974:	f6 c3 03             	test   bl,0x3
c0013977:	75 23                	jne    c001399c <datetimeToSeconds(datetime_t)+0xd1>
c0013979:	89 d8                	mov    eax,ebx
c001397b:	99                   	cdq    
c001397c:	f7 ff                	idiv   edi
c001397e:	b8 6e 01 00 00       	mov    eax,0x16e
c0013983:	85 d2                	test   edx,edx
c0013985:	75 15                	jne    c001399c <datetimeToSeconds(datetime_t)+0xd1>
c0013987:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001398d:	99                   	cdq    
c001398e:	f7 fd                	idiv   ebp
c0013990:	83 fa 01             	cmp    edx,0x1
c0013993:	19 c0                	sbb    eax,eax
c0013995:	f7 d0                	not    eax
c0013997:	05 6e 01 00 00       	add    eax,0x16e
c001399c:	01 c1                	add    ecx,eax
c001399e:	43                   	inc    ebx
c001399f:	39 f3                	cmp    ebx,esi
c00139a1:	7c cc                	jl     c001396f <datetimeToSeconds(datetime_t)+0xa4>
c00139a3:	eb 35                	jmp    c00139da <datetimeToSeconds(datetime_t)+0x10f>
c00139a5:	74 33                	je     c00139da <datetimeToSeconds(datetime_t)+0x10f>
c00139a7:	b8 45 00 00 00       	mov    eax,0x45
c00139ac:	89 c2                	mov    edx,eax
c00139ae:	83 e2 03             	and    edx,0x3
c00139b1:	39 f0                	cmp    eax,esi
c00139b3:	7e 0f                	jle    c00139c4 <datetimeToSeconds(datetime_t)+0xf9>
c00139b5:	83 fa 01             	cmp    edx,0x1
c00139b8:	19 d2                	sbb    edx,edx
c00139ba:	48                   	dec    eax
c00139bb:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139c2:	eb e8                	jmp    c00139ac <datetimeToSeconds(datetime_t)+0xe1>
c00139c4:	b8 6d 01 00 00       	mov    eax,0x16d
c00139c9:	85 d2                	test   edx,edx
c00139cb:	75 0b                	jne    c00139d8 <datetimeToSeconds(datetime_t)+0x10d>
c00139cd:	66 83 fb 01          	cmp    bx,0x1
c00139d1:	19 c0                	sbb    eax,eax
c00139d3:	05 6e 01 00 00       	add    eax,0x16e
c00139d8:	29 c1                	sub    ecx,eax
c00139da:	b8 80 51 01 00       	mov    eax,0x15180
c00139df:	f7 e9                	imul   ecx
c00139e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139e5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139e9:	83 c4 14             	add    esp,0x14
c00139ec:	5b                   	pop    ebx
c00139ed:	5e                   	pop    esi
c00139ee:	5f                   	pop    edi
c00139ef:	5d                   	pop    ebp
c00139f0:	c3                   	ret    
c00139f1:	90                   	nop

c00139f2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139f2:	57                   	push   edi
c00139f3:	56                   	push   esi
c00139f4:	53                   	push   ebx
c00139f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00139fb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a06:	e8 c0 fe ff ff       	call   c00138cb <datetimeToSeconds(datetime_t)>
c0013a0b:	59                   	pop    ecx
c0013a0c:	0f b6 0d 50 dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc50
c0013a13:	5b                   	pop    ebx
c0013a14:	03 0d 54 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc54
c0013a1a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a20:	89 cb                	mov    ebx,ecx
c0013a22:	c1 fb 1f             	sar    ebx,0x1f
c0013a25:	29 c8                	sub    eax,ecx
c0013a27:	19 da                	sbb    edx,ebx
c0013a29:	31 c9                	xor    ecx,ecx
c0013a2b:	80 3d 51 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc51,0x0
c0013a32:	74 05                	je     c0013a39 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a34:	b9 08 07 00 00       	mov    ecx,0x708
c0013a39:	31 db                	xor    ebx,ebx
c0013a3b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a3f:	29 c8                	sub    eax,ecx
c0013a41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a45:	19 da                	sbb    edx,ebx
c0013a47:	89 f8                	mov    eax,edi
c0013a49:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a4d:	5b                   	pop    ebx
c0013a4e:	5e                   	pop    esi
c0013a4f:	5f                   	pop    edi
c0013a50:	ff e0                	jmp    eax

c0013a52 <secondsToDatetime(unsigned long long)>:
c0013a52:	55                   	push   ebp
c0013a53:	57                   	push   edi
c0013a54:	56                   	push   esi
c0013a55:	53                   	push   ebx
c0013a56:	83 ec 1c             	sub    esp,0x1c
c0013a59:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a5d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a61:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a65:	6a 00                	push   0x0
c0013a67:	68 80 51 01 00       	push   0x15180
c0013a6c:	55                   	push   ebp
c0013a6d:	57                   	push   edi
c0013a6e:	e8 d9 26 01 00       	call   c002614c <__udivdi3>
c0013a73:	83 c4 10             	add    esp,0x10
c0013a76:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a80:	6a 00                	push   0x0
c0013a82:	68 80 51 01 00       	push   0x15180
c0013a87:	55                   	push   ebp
c0013a88:	57                   	push   edi
c0013a89:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a8e:	e8 b9 27 01 00       	call   c002624c <__umoddi3>
c0013a93:	83 c4 10             	add    esp,0x10
c0013a96:	99                   	cdq    
c0013a97:	f7 ff                	idiv   edi
c0013a99:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a9e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013aa1:	89 d0                	mov    eax,edx
c0013aa3:	99                   	cdq    
c0013aa4:	f7 ff                	idiv   edi
c0013aa6:	85 db                	test   ebx,ebx
c0013aa8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013aab:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013aae:	79 11                	jns    c0013ac1 <secondsToDatetime(unsigned long long)+0x6f>
c0013ab0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013ab4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013aba:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013abf:	eb 07                	jmp    c0013ac8 <secondsToDatetime(unsigned long long)+0x76>
c0013ac1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ac6:	89 d8                	mov    eax,ebx
c0013ac8:	bf b4 05 00 00       	mov    edi,0x5b4
c0013acd:	99                   	cdq    
c0013ace:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013ad3:	f7 f9                	idiv   ecx
c0013ad5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ada:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ade:	31 d2                	xor    edx,edx
c0013ae0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013ae8:	01 c3                	add    ebx,eax
c0013aea:	89 d8                	mov    eax,ebx
c0013aec:	f7 f1                	div    ecx
c0013aee:	31 d2                	xor    edx,edx
c0013af0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013af3:	89 d8                	mov    eax,ebx
c0013af5:	f7 f7                	div    edi
c0013af7:	31 d2                	xor    edx,edx
c0013af9:	29 c1                	sub    ecx,eax
c0013afb:	89 d8                	mov    eax,ebx
c0013afd:	f7 f5                	div    ebp
c0013aff:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013b04:	29 c1                	sub    ecx,eax
c0013b06:	31 d2                	xor    edx,edx
c0013b08:	89 c8                	mov    eax,ecx
c0013b0a:	f7 f5                	div    ebp
c0013b0c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b15:	31 d2                	xor    edx,edx
c0013b17:	89 c8                	mov    eax,ecx
c0013b19:	f7 f5                	div    ebp
c0013b1b:	31 d2                	xor    edx,edx
c0013b1d:	01 c3                	add    ebx,eax
c0013b1f:	89 c8                	mov    eax,ecx
c0013b21:	f7 f7                	div    edi
c0013b23:	bf 99 00 00 00       	mov    edi,0x99
c0013b28:	29 c3                	sub    ebx,eax
c0013b2a:	31 d2                	xor    edx,edx
c0013b2c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b34:	29 c3                	sub    ebx,eax
c0013b36:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b39:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b3c:	bb 05 00 00 00       	mov    ebx,0x5
c0013b41:	83 c1 02             	add    ecx,0x2
c0013b44:	89 c8                	mov    eax,ecx
c0013b46:	f7 f7                	div    edi
c0013b48:	31 d2                	xor    edx,edx
c0013b4a:	89 c7                	mov    edi,eax
c0013b4c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b52:	83 c0 02             	add    eax,0x2
c0013b55:	f7 f3                	div    ebx
c0013b57:	89 eb                	mov    ebx,ebp
c0013b59:	29 c3                	sub    ebx,eax
c0013b5b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b61:	88 1e                	mov    BYTE PTR [esi],bl
c0013b63:	19 c0                	sbb    eax,eax
c0013b65:	31 d2                	xor    edx,edx
c0013b67:	83 e0 0c             	and    eax,0xc
c0013b6a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b6e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b76:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b7a:	83 f9 01             	cmp    ecx,0x1
c0013b7d:	0f 96 c2             	setbe  dl
c0013b80:	41                   	inc    ecx
c0013b81:	01 d0                	add    eax,edx
c0013b83:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b86:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b8a:	83 c4 1c             	add    esp,0x1c
c0013b8d:	89 f0                	mov    eax,esi
c0013b8f:	5b                   	pop    ebx
c0013b90:	5e                   	pop    esi
c0013b91:	5f                   	pop    edi
c0013b92:	5d                   	pop    ebp
c0013b93:	c2 04 00             	ret    0x4

c0013b96 <Clock::timeInDatetimeLocal()>:
c0013b96:	53                   	push   ebx
c0013b97:	83 ec 14             	sub    esp,0x14
c0013b9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ba2:	e8 83 fc ff ff       	call   c001382a <Clock::timeInSecondsLocal()>
c0013ba7:	83 c4 0c             	add    esp,0xc
c0013baa:	52                   	push   edx
c0013bab:	50                   	push   eax
c0013bac:	53                   	push   ebx
c0013bad:	e8 a0 fe ff ff       	call   c0013a52 <secondsToDatetime(unsigned long long)>
c0013bb2:	89 d8                	mov    eax,ebx
c0013bb4:	83 c4 14             	add    esp,0x14
c0013bb7:	5b                   	pop    ebx
c0013bb8:	c2 04 00             	ret    0x4
c0013bbb:	90                   	nop

c0013bbc <Device::hibernate()>:
c0013bbc:	c3                   	ret    
c0013bbd:	90                   	nop

c0013bbe <Device::wake()>:
c0013bbe:	c3                   	ret    
c0013bbf:	90                   	nop

c0013bc0 <Device::detect()>:
c0013bc0:	c3                   	ret    
c0013bc1:	90                   	nop

c0013bc2 <Device::disableLegacy()>:
c0013bc2:	c3                   	ret    
c0013bc3:	90                   	nop

c0013bc4 <Device::powerSaving(PowerSavingLevel)>:
c0013bc4:	c3                   	ret    
c0013bc5:	90                   	nop

c0013bc6 <DriverlessDevice::close(int, int, void*)>:
c0013bc6:	31 c0                	xor    eax,eax
c0013bc8:	c3                   	ret    
c0013bc9:	90                   	nop

c0013bca <DriverlessDevice::detect()>:
c0013bca:	c3                   	ret    
c0013bcb:	90                   	nop

c0013bcc <DriverlessDevice::open(int, int, void*)>:
c0013bcc:	83 ec 18             	sub    esp,0x18
c0013bcf:	68 30 a3 02 c0       	push   0xc002a330
c0013bd4:	e8 82 62 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0013bd9:	83 c8 ff             	or     eax,0xffffffff
c0013bdc:	83 c4 1c             	add    esp,0x1c
c0013bdf:	c3                   	ret    

c0013be0 <Device::~Device()>:
c0013be0:	ba 58 a3 02 c0       	mov    edx,0xc002a358
c0013be5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013be9:	89 10                	mov    DWORD PTR [eax],edx
c0013beb:	90                   	nop
c0013bec:	c3                   	ret    
c0013bed:	90                   	nop

c0013bee <Device::~Device()>:
c0013bee:	83 ec 0c             	sub    esp,0xc
c0013bf1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013bf5:	e8 e6 ff ff ff       	call   c0013be0 <Device::~Device()>
c0013bfa:	83 c4 04             	add    esp,0x4
c0013bfd:	83 ec 08             	sub    esp,0x8
c0013c00:	68 58 01 00 00       	push   0x158
c0013c05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c09:	e8 f9 eb ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0013c0e:	83 c4 10             	add    esp,0x10
c0013c11:	83 c4 0c             	add    esp,0xc
c0013c14:	c3                   	ret    
c0013c15:	90                   	nop

c0013c16 <Device::findAndLoadDriver()>:
c0013c16:	c3                   	ret    
c0013c17:	90                   	nop

c0013c18 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c18:	57                   	push   edi
c0013c19:	b9 09 00 00 00       	mov    ecx,0x9
c0013c1e:	56                   	push   esi
c0013c1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c23:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c27:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c31:	81 c7 18 01 00 00    	add    edi,0x118
c0013c37:	fc                   	cld    
c0013c38:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c3a:	5e                   	pop    esi
c0013c3b:	5f                   	pop    edi
c0013c3c:	c3                   	ret    
c0013c3d:	90                   	nop

c0013c3e <Device::preOpenACPI(void*, char*, char*)>:
c0013c3e:	56                   	push   esi
c0013c3f:	53                   	push   ebx
c0013c40:	83 ec 08             	sub    esp,0x8
c0013c43:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c47:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013c4b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013c55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c59:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013c5f:	6a 1e                	push   0x1e
c0013c61:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013c67:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c6b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013c71:	50                   	push   eax
c0013c72:	e8 29 ca fe ff       	call   c00006a0 <memcpy>
c0013c77:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013c7b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013c7f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013c87:	83 c4 14             	add    esp,0x14
c0013c8a:	5b                   	pop    ebx
c0013c8b:	5e                   	pop    esi
c0013c8c:	e9 0f ca fe ff       	jmp    c00006a0 <memcpy>
c0013c91:	90                   	nop

c0013c92 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c96:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c9b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ca2:	75 0b                	jne    c0013caf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ca6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013caa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013cad:	eb 1e                	jmp    c0013ccd <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013caf:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0013cb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cba:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cc0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cc2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cca:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013ccd:	ff e0                	jmp    eax
c0013ccf:	90                   	nop

c0013cd0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cd4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cd9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ce0:	75 0b                	jne    c0013ced <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013ce2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ce4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ce8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013ceb:	eb 1e                	jmp    c0013d0b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013ced:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0013cf2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cf8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cfe:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d00:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d08:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d0b:	ff e0                	jmp    eax
c0013d0d:	90                   	nop

c0013d0e <Device::addChild(Device*)>:
c0013d0e:	53                   	push   ebx
c0013d0f:	83 ec 08             	sub    esp,0x8
c0013d12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d1a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d20:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d26:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d28:	85 d2                	test   edx,edx
c0013d2a:	74 04                	je     c0013d30 <Device::addChild(Device*)+0x22>
c0013d2c:	89 d3                	mov    ebx,edx
c0013d2e:	eb f6                	jmp    c0013d26 <Device::addChild(Device*)+0x18>
c0013d30:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d33:	83 ec 0c             	sub    esp,0xc
c0013d36:	6a 08                	push   0x8
c0013d38:	e8 db b8 ff ff       	call   c000f618 <malloc>
c0013d3d:	89 03                	mov    DWORD PTR [ebx],eax
c0013d3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d45:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d4c:	83 c4 18             	add    esp,0x18
c0013d4f:	5b                   	pop    ebx
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <Device::removeAllChildren()>:
c0013d52:	56                   	push   esi
c0013d53:	53                   	push   ebx
c0013d54:	52                   	push   edx
c0013d55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d59:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d5f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d62:	74 17                	je     c0013d7b <Device::removeAllChildren()+0x29>
c0013d64:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d67:	85 c0                	test   eax,eax
c0013d69:	74 0c                	je     c0013d77 <Device::removeAllChildren()+0x25>
c0013d6b:	83 ec 0c             	sub    esp,0xc
c0013d6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d70:	50                   	push   eax
c0013d71:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d74:	83 c4 10             	add    esp,0x10
c0013d77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d79:	eb e4                	jmp    c0013d5f <Device::removeAllChildren()+0xd>
c0013d7b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d81:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d87:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d94:	58                   	pop    eax
c0013d95:	5b                   	pop    ebx
c0013d96:	5e                   	pop    esi
c0013d97:	c3                   	ret    

c0013d98 <Device::hibernateAll()>:
c0013d98:	53                   	push   ebx
c0013d99:	83 ec 14             	sub    esp,0x14
c0013d9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013da0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013da2:	53                   	push   ebx
c0013da3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013da6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dac:	83 c4 10             	add    esp,0x10
c0013daf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013db2:	74 0f                	je     c0013dc3 <Device::hibernateAll()+0x2b>
c0013db4:	83 ec 0c             	sub    esp,0xc
c0013db7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dba:	e8 d9 ff ff ff       	call   c0013d98 <Device::hibernateAll()>
c0013dbf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dc1:	eb e9                	jmp    c0013dac <Device::hibernateAll()+0x14>
c0013dc3:	83 c4 08             	add    esp,0x8
c0013dc6:	5b                   	pop    ebx
c0013dc7:	c3                   	ret    

c0013dc8 <Device::wakeAll()>:
c0013dc8:	53                   	push   ebx
c0013dc9:	83 ec 14             	sub    esp,0x14
c0013dcc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dd2:	53                   	push   ebx
c0013dd3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013dd6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ddc:	83 c4 10             	add    esp,0x10
c0013ddf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013de2:	74 0f                	je     c0013df3 <Device::wakeAll()+0x2b>
c0013de4:	83 ec 0c             	sub    esp,0xc
c0013de7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dea:	e8 d9 ff ff ff       	call   c0013dc8 <Device::wakeAll()>
c0013def:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013df1:	eb e9                	jmp    c0013ddc <Device::wakeAll()+0x14>
c0013df3:	83 c4 08             	add    esp,0x8
c0013df6:	5b                   	pop    ebx
c0013df7:	c3                   	ret    

c0013df8 <Device::detectAll()>:
c0013df8:	53                   	push   ebx
c0013df9:	83 ec 14             	sub    esp,0x14
c0013dfc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e02:	53                   	push   ebx
c0013e03:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e06:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e0c:	83 c4 10             	add    esp,0x10
c0013e0f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e12:	74 0f                	je     c0013e23 <Device::detectAll()+0x2b>
c0013e14:	83 ec 0c             	sub    esp,0xc
c0013e17:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e1a:	e8 d9 ff ff ff       	call   c0013df8 <Device::detectAll()>
c0013e1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e21:	eb e9                	jmp    c0013e0c <Device::detectAll()+0x14>
c0013e23:	83 c4 08             	add    esp,0x8
c0013e26:	5b                   	pop    ebx
c0013e27:	c3                   	ret    

c0013e28 <Device::disableLegacyAll()>:
c0013e28:	53                   	push   ebx
c0013e29:	83 ec 14             	sub    esp,0x14
c0013e2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e32:	53                   	push   ebx
c0013e33:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e36:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e3c:	83 c4 10             	add    esp,0x10
c0013e3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e42:	74 0f                	je     c0013e53 <Device::disableLegacyAll()+0x2b>
c0013e44:	83 ec 0c             	sub    esp,0xc
c0013e47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e4a:	e8 d9 ff ff ff       	call   c0013e28 <Device::disableLegacyAll()>
c0013e4f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e51:	eb e9                	jmp    c0013e3c <Device::disableLegacyAll()+0x14>
c0013e53:	83 c4 08             	add    esp,0x8
c0013e56:	5b                   	pop    ebx
c0013e57:	c3                   	ret    

c0013e58 <Device::loadDriversForAll()>:
c0013e58:	53                   	push   ebx
c0013e59:	83 ec 08             	sub    esp,0x8
c0013e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e60:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e66:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013e68:	85 db                	test   ebx,ebx
c0013e6a:	74 12                	je     c0013e7e <Device::loadDriversForAll()+0x26>
c0013e6c:	83 ec 0c             	sub    esp,0xc
c0013e6f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013e72:	e8 e1 ff ff ff       	call   c0013e58 <Device::loadDriversForAll()>
c0013e77:	83 c4 10             	add    esp,0x10
c0013e7a:	89 d8                	mov    eax,ebx
c0013e7c:	eb e8                	jmp    c0013e66 <Device::loadDriversForAll()+0xe>
c0013e7e:	83 c4 08             	add    esp,0x8
c0013e81:	5b                   	pop    ebx
c0013e82:	c3                   	ret    
c0013e83:	90                   	nop

c0013e84 <Device::closeAll()>:
c0013e84:	53                   	push   ebx
c0013e85:	83 ec 08             	sub    esp,0x8
c0013e88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e8e:	6a 00                	push   0x0
c0013e90:	6a 00                	push   0x0
c0013e92:	6a 00                	push   0x0
c0013e94:	53                   	push   ebx
c0013e95:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e9e:	83 c4 10             	add    esp,0x10
c0013ea1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ea4:	74 0f                	je     c0013eb5 <Device::closeAll()+0x31>
c0013ea6:	83 ec 0c             	sub    esp,0xc
c0013ea9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eac:	e8 d3 ff ff ff       	call   c0013e84 <Device::closeAll()>
c0013eb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eb3:	eb e9                	jmp    c0013e9e <Device::closeAll()+0x1a>
c0013eb5:	83 c4 08             	add    esp,0x8
c0013eb8:	5b                   	pop    ebx
c0013eb9:	c3                   	ret    

c0013eba <Device::powerSavingAll(PowerSavingLevel)>:
c0013eba:	56                   	push   esi
c0013ebb:	53                   	push   ebx
c0013ebc:	83 ec 0c             	sub    esp,0xc
c0013ebf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ec3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ec7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ec9:	56                   	push   esi
c0013eca:	53                   	push   ebx
c0013ecb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ece:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eda:	74 0f                	je     c0013eeb <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013edc:	52                   	push   edx
c0013edd:	52                   	push   edx
c0013ede:	56                   	push   esi
c0013edf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ee2:	e8 d3 ff ff ff       	call   c0013eba <Device::powerSavingAll(PowerSavingLevel)>
c0013ee7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ee9:	eb e9                	jmp    c0013ed4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013eeb:	58                   	pop    eax
c0013eec:	5b                   	pop    ebx
c0013eed:	5e                   	pop    esi
c0013eee:	c3                   	ret    
c0013eef:	90                   	nop

c0013ef0 <Device::setName(char const*)>:
c0013ef0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013ef8:	e9 5a c8 fe ff       	jmp    c0000757 <strcpy>
c0013efd:	90                   	nop

c0013efe <Device::Device(char const*)>:
c0013efe:	83 ec 1c             	sub    esp,0x1c
c0013f01:	ba 58 a3 02 c0       	mov    edx,0xc002a358
c0013f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f0a:	89 10                	mov    DWORD PTR [eax],edx
c0013f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f10:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f2c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f3a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f44:	83 ec 08             	sub    esp,0x8
c0013f47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f4f:	e8 9c ff ff ff       	call   c0013ef0 <Device::setName(char const*)>
c0013f54:	83 c4 10             	add    esp,0x10
c0013f57:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f5f:	83 ec 0c             	sub    esp,0xc
c0013f62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f66:	e8 ad b6 ff ff       	call   c000f618 <malloc>
c0013f6b:	83 c4 10             	add    esp,0x10
c0013f6e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f7f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f89:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f99:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013faa:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fce:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fdc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fea:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013ff4:	90                   	nop
c0013ff5:	83 c4 1c             	add    esp,0x1c
c0013ff8:	c3                   	ret    
c0013ff9:	90                   	nop

c0013ffa <Device::getName()>:
c0013ffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ffe:	05 d0 00 00 00       	add    eax,0xd0
c0014003:	c3                   	ret    

c0014004 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014004:	83 ec 0c             	sub    esp,0xc
c0014007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001400b:	83 ec 08             	sub    esp,0x8
c001400e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014012:	50                   	push   eax
c0014013:	e8 e6 fe ff ff       	call   c0013efe <Device::Device(char const*)>
c0014018:	83 c4 10             	add    esp,0x10
c001401b:	ba 84 a3 02 c0       	mov    edx,0xc002a384
c0014020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014024:	89 10                	mov    DWORD PTR [eax],edx
c0014026:	90                   	nop
c0014027:	83 c4 0c             	add    esp,0xc
c001402a:	c3                   	ret    
c001402b:	90                   	nop

c001402c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001402c:	57                   	push   edi
c001402d:	56                   	push   esi
c001402e:	53                   	push   ebx
c001402f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014033:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001403b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014041:	75 0c                	jne    c001404f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014043:	52                   	push   edx
c0014044:	52                   	push   edx
c0014045:	53                   	push   ebx
c0014046:	56                   	push   esi
c0014047:	e8 3e 40 01 00       	call   c002808a <LinkedList<Device>::addElement(Device*)>
c001404c:	83 c4 10             	add    esp,0x10
c001404f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014055:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014058:	74 12                	je     c001406c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001405a:	50                   	push   eax
c001405b:	57                   	push   edi
c001405c:	56                   	push   esi
c001405d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014060:	e8 c7 ff ff ff       	call   c001402c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014065:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014067:	83 c4 10             	add    esp,0x10
c001406a:	eb e9                	jmp    c0014055 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001406c:	5b                   	pop    ebx
c001406d:	5e                   	pop    esi
c001406e:	5f                   	pop    edi
c001406f:	c3                   	ret    

c0014070 <getDevicesOfType(DeviceType)>:
c0014070:	53                   	push   ebx
c0014071:	83 ec 14             	sub    esp,0x14
c0014074:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014078:	53                   	push   ebx
c0014079:	e8 e8 40 01 00       	call   c0028166 <LinkedList<Device>::LinkedList()>
c001407e:	83 c4 0c             	add    esp,0xc
c0014081:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014085:	53                   	push   ebx
c0014086:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c001408c:	e8 9b ff ff ff       	call   c001402c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014091:	89 d8                	mov    eax,ebx
c0014093:	83 c4 18             	add    esp,0x18
c0014096:	5b                   	pop    ebx
c0014097:	c2 04 00             	ret    0x4

c001409a <HardDiskController::HardDiskController(char const*)>:
c001409a:	83 ec 0c             	sub    esp,0xc
c001409d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a1:	83 ec 08             	sub    esp,0x8
c00140a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a8:	50                   	push   eax
c00140a9:	e8 50 fe ff ff       	call   c0013efe <Device::Device(char const*)>
c00140ae:	83 c4 10             	add    esp,0x10
c00140b1:	ba b0 a3 02 c0       	mov    edx,0xc002a3b0
c00140b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ba:	89 10                	mov    DWORD PTR [eax],edx
c00140bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140ca:	90                   	nop
c00140cb:	83 c4 0c             	add    esp,0xc
c00140ce:	c3                   	ret    
c00140cf:	90                   	nop

c00140d0 <HardDiskController::~HardDiskController()>:
c00140d0:	83 ec 0c             	sub    esp,0xc
c00140d3:	ba b0 a3 02 c0       	mov    edx,0xc002a3b0
c00140d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140dc:	89 10                	mov    DWORD PTR [eax],edx
c00140de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e2:	83 ec 0c             	sub    esp,0xc
c00140e5:	50                   	push   eax
c00140e6:	e8 f5 fa ff ff       	call   c0013be0 <Device::~Device()>
c00140eb:	83 c4 10             	add    esp,0x10
c00140ee:	90                   	nop
c00140ef:	83 c4 0c             	add    esp,0xc
c00140f2:	c3                   	ret    
c00140f3:	90                   	nop

c00140f4 <HardDiskController::~HardDiskController()>:
c00140f4:	83 ec 0c             	sub    esp,0xc
c00140f7:	83 ec 0c             	sub    esp,0xc
c00140fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140fe:	e8 cd ff ff ff       	call   c00140d0 <HardDiskController::~HardDiskController()>
c0014103:	83 c4 10             	add    esp,0x10
c0014106:	83 ec 08             	sub    esp,0x8
c0014109:	68 58 01 00 00       	push   0x158
c001410e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014112:	e8 f0 e6 ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0014117:	83 c4 10             	add    esp,0x10
c001411a:	83 c4 0c             	add    esp,0xc
c001411d:	c3                   	ret    

c001411e <PhysicalDisk::eject()>:
c001411e:	83 ec 18             	sub    esp,0x18
c0014121:	68 d4 a3 02 c0       	push   0xc002a3d4
c0014126:	e8 bc e7 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001412b:	83 c8 ff             	or     eax,0xffffffff
c001412e:	83 c4 1c             	add    esp,0x1c
c0014131:	c3                   	ret    

c0014132 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014132:	83 ec 0c             	sub    esp,0xc
c0014135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014139:	83 ec 08             	sub    esp,0x8
c001413c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014140:	50                   	push   eax
c0014141:	e8 b8 fd ff ff       	call   c0013efe <Device::Device(char const*)>
c0014146:	83 c4 10             	add    esp,0x10
c0014149:	ba 04 a4 02 c0       	mov    edx,0xc002a404
c001414e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014152:	89 10                	mov    DWORD PTR [eax],edx
c0014154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014158:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001415f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014163:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001416a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001416e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001417c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014180:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001418a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014194:	90                   	nop
c0014195:	83 c4 0c             	add    esp,0xc
c0014198:	c3                   	ret    
c0014199:	90                   	nop

c001419a <PhysicalDisk::startCache()>:
c001419a:	56                   	push   esi
c001419b:	53                   	push   ebx
c001419c:	83 ec 10             	sub    esp,0x10
c001419f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141a3:	6a 44                	push   0x44
c00141a5:	e8 6e b4 ff ff       	call   c000f618 <malloc>
c00141aa:	89 c6                	mov    esi,eax
c00141ac:	58                   	pop    eax
c00141ad:	5a                   	pop    edx
c00141ae:	53                   	push   ebx
c00141af:	56                   	push   esi
c00141b0:	e8 d5 26 00 00       	call   c001688a <VCache::VCache(PhysicalDisk*)>
c00141b5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141bb:	83 c4 14             	add    esp,0x14
c00141be:	5b                   	pop    ebx
c00141bf:	5e                   	pop    esi
c00141c0:	c3                   	ret    
c00141c1:	90                   	nop

c00141c2 <PhysicalDisk::~PhysicalDisk()>:
c00141c2:	83 ec 0c             	sub    esp,0xc
c00141c5:	ba 04 a4 02 c0       	mov    edx,0xc002a404
c00141ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ce:	89 10                	mov    DWORD PTR [eax],edx
c00141d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141d4:	83 ec 0c             	sub    esp,0xc
c00141d7:	50                   	push   eax
c00141d8:	e8 03 fa ff ff       	call   c0013be0 <Device::~Device()>
c00141dd:	83 c4 10             	add    esp,0x10
c00141e0:	90                   	nop
c00141e1:	83 c4 0c             	add    esp,0xc
c00141e4:	c3                   	ret    
c00141e5:	90                   	nop

c00141e6 <PhysicalDisk::~PhysicalDisk()>:
c00141e6:	83 ec 0c             	sub    esp,0xc
c00141e9:	83 ec 0c             	sub    esp,0xc
c00141ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f0:	e8 cd ff ff ff       	call   c00141c2 <PhysicalDisk::~PhysicalDisk()>
c00141f5:	83 c4 10             	add    esp,0x10
c00141f8:	83 ec 08             	sub    esp,0x8
c00141fb:	68 6c 01 00 00       	push   0x16c
c0014200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014204:	e8 fe e5 ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0014209:	83 c4 10             	add    esp,0x10
c001420c:	83 c4 0c             	add    esp,0xc
c001420f:	c3                   	ret    

c0014210 <FPU::FPU(char const*)>:
c0014210:	83 ec 0c             	sub    esp,0xc
c0014213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014217:	83 ec 08             	sub    esp,0x8
c001421a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001421e:	50                   	push   eax
c001421f:	e8 da fc ff ff       	call   c0013efe <Device::Device(char const*)>
c0014224:	83 c4 10             	add    esp,0x10
c0014227:	ba 48 a4 02 c0       	mov    edx,0xc002a448
c001422c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014230:	89 10                	mov    DWORD PTR [eax],edx
c0014232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014236:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014240:	90                   	nop
c0014241:	83 c4 0c             	add    esp,0xc
c0014244:	c3                   	ret    
c0014245:	90                   	nop

c0014246 <FPU::~FPU()>:
c0014246:	83 ec 0c             	sub    esp,0xc
c0014249:	ba 48 a4 02 c0       	mov    edx,0xc002a448
c001424e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014252:	89 10                	mov    DWORD PTR [eax],edx
c0014254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014258:	83 ec 0c             	sub    esp,0xc
c001425b:	50                   	push   eax
c001425c:	e8 7f f9 ff ff       	call   c0013be0 <Device::~Device()>
c0014261:	83 c4 10             	add    esp,0x10
c0014264:	90                   	nop
c0014265:	83 c4 0c             	add    esp,0xc
c0014268:	c3                   	ret    
c0014269:	90                   	nop

c001426a <FPU::~FPU()>:
c001426a:	83 ec 0c             	sub    esp,0xc
c001426d:	83 ec 0c             	sub    esp,0xc
c0014270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014274:	e8 cd ff ff ff       	call   c0014246 <FPU::~FPU()>
c0014279:	83 c4 10             	add    esp,0x10
c001427c:	83 ec 08             	sub    esp,0x8
c001427f:	68 58 01 00 00       	push   0x158
c0014284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014288:	e8 7a e5 ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c001428d:	83 c4 10             	add    esp,0x10
c0014290:	83 c4 0c             	add    esp,0xc
c0014293:	c3                   	ret    

c0014294 <setupFPU()>:
c0014294:	53                   	push   ebx
c0014295:	83 ec 08             	sub    esp,0x8
c0014298:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c001429e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142a5:	74 19                	je     c00142c0 <setupFPU()+0x2c>
c00142a7:	83 ec 0c             	sub    esp,0xc
c00142aa:	68 58 01 00 00       	push   0x158
c00142af:	e8 64 b3 ff ff       	call   c000f618 <malloc>
c00142b4:	89 c3                	mov    ebx,eax
c00142b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00142b9:	e8 12 0a 01 00       	call   c0024cd0 <AVX::AVX()>
c00142be:	eb 5b                	jmp    c001431b <setupFPU()+0x87>
c00142c0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142c6:	84 c0                	test   al,al
c00142c8:	79 19                	jns    c00142e3 <setupFPU()+0x4f>
c00142ca:	83 ec 0c             	sub    esp,0xc
c00142cd:	68 58 01 00 00       	push   0x158
c00142d2:	e8 41 b3 ff ff       	call   c000f618 <malloc>
c00142d7:	89 c3                	mov    ebx,eax
c00142d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00142dc:	e8 15 0b 01 00       	call   c0024df6 <SSE::SSE()>
c00142e1:	eb 38                	jmp    c001431b <setupFPU()+0x87>
c00142e3:	a8 20                	test   al,0x20
c00142e5:	74 19                	je     c0014300 <setupFPU()+0x6c>
c00142e7:	83 ec 0c             	sub    esp,0xc
c00142ea:	68 58 01 00 00       	push   0x158
c00142ef:	e8 24 b3 ff ff       	call   c000f618 <malloc>
c00142f4:	89 c3                	mov    ebx,eax
c00142f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00142f9:	e8 62 0a 01 00       	call   c0024d60 <MMX::MMX()>
c00142fe:	eb 1b                	jmp    c001431b <setupFPU()+0x87>
c0014300:	a8 10                	test   al,0x10
c0014302:	74 1c                	je     c0014320 <setupFPU()+0x8c>
c0014304:	83 ec 0c             	sub    esp,0xc
c0014307:	68 58 01 00 00       	push   0x158
c001430c:	e8 07 b3 ff ff       	call   c000f618 <malloc>
c0014311:	89 c3                	mov    ebx,eax
c0014313:	89 04 24             	mov    DWORD PTR [esp],eax
c0014316:	e8 69 0b 01 00       	call   c0024e84 <x87::x87()>
c001431b:	83 c4 10             	add    esp,0x10
c001431e:	eb 24                	jmp    c0014344 <setupFPU()+0xb0>
c0014320:	83 e0 ef             	and    eax,0xffffffef
c0014323:	83 ec 0c             	sub    esp,0xc
c0014326:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001432c:	68 34 a4 02 c0       	push   0xc002a434
c0014331:	e8 b1 e5 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014336:	0f 20 c0             	mov    eax,cr0
c0014339:	83 c8 04             	or     eax,0x4
c001433c:	0f 22 c0             	mov    cr0,eax
c001433f:	31 db                	xor    ebx,ebx
c0014341:	83 c4 10             	add    esp,0x10
c0014344:	89 d8                	mov    eax,ebx
c0014346:	83 c4 08             	add    esp,0x8
c0014349:	5b                   	pop    ebx
c001434a:	c3                   	ret    
c001434b:	90                   	nop

c001434c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001434c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014350:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014354:	c1 e0 04             	shl    eax,0x4
c0014357:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001435b:	8d 50 10             	lea    edx,[eax+0x10]
c001435e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014364:	74 08                	je     c001436e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014366:	83 c0 04             	add    eax,0x4
c0014369:	39 d0                	cmp    eax,edx
c001436b:	75 f1                	jne    c001435e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001436d:	c3                   	ret    
c001436e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014378:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014382:	eb e2                	jmp    c0014366 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014384 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014384:	57                   	push   edi
c0014385:	31 c0                	xor    eax,eax
c0014387:	56                   	push   esi
c0014388:	53                   	push   ebx
c0014389:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001438d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014391:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014395:	89 da                	mov    edx,ebx
c0014397:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001439b:	c1 e2 04             	shl    edx,0x4
c001439e:	01 ca                	add    edx,ecx
c00143a0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143a8:	74 16                	je     c00143c0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143aa:	40                   	inc    eax
c00143ab:	83 f8 04             	cmp    eax,0x4
c00143ae:	75 f0                	jne    c00143a0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143b0:	c7 44 24 10 78 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a478
c00143b8:	5b                   	pop    ebx
c00143b9:	5e                   	pop    esi
c00143ba:	5f                   	pop    edi
c00143bb:	e9 9b 5a 00 00       	jmp    c0019e5b <Krnl::panic(char const*)>
c00143c0:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143c3:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143c6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143cc:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143d2:	5b                   	pop    ebx
c00143d3:	5e                   	pop    esi
c00143d4:	5f                   	pop    edi
c00143d5:	c3                   	ret    

c00143d6 <doubleFault(regs*, void*)>:
c00143d6:	55                   	push   ebp
c00143d7:	89 e5                	mov    ebp,esp
c00143d9:	83 ec 08             	sub    esp,0x8
c00143dc:	83 ec 0c             	sub    esp,0xc
c00143df:	68 b3 a4 02 c0       	push   0xc002a4b3
c00143e4:	e8 72 5a 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c00143e9:	83 c4 10             	add    esp,0x10
c00143ec:	90                   	nop
c00143ed:	c9                   	leave  
c00143ee:	c3                   	ret    
c00143ef:	90                   	nop

c00143f0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143f0:	56                   	push   esi
c00143f1:	53                   	push   ebx
c00143f2:	50                   	push   eax
c00143f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143fb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014400:	75 35                	jne    c0014437 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014402:	8d 43 20             	lea    eax,[ebx+0x20]
c0014405:	31 d2                	xor    edx,edx
c0014407:	89 c1                	mov    ecx,eax
c0014409:	c1 e1 04             	shl    ecx,0x4
c001440c:	01 f1                	add    ecx,esi
c001440e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014416:	74 3e                	je     c0014456 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014418:	42                   	inc    edx
c0014419:	83 fa 04             	cmp    edx,0x4
c001441c:	75 f0                	jne    c001440e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001441e:	83 ec 0c             	sub    esp,0xc
c0014421:	68 f8 a4 02 c0       	push   0xc002a4f8
c0014426:	e8 30 5a 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c001442b:	83 c4 10             	add    esp,0x10
c001442e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014433:	5a                   	pop    edx
c0014434:	5b                   	pop    ebx
c0014435:	5e                   	pop    esi
c0014436:	c3                   	ret    
c0014437:	83 ec 0c             	sub    esp,0xc
c001443a:	56                   	push   esi
c001443b:	e8 ba fb ff ff       	call   c0013ffa <Device::getName()>
c0014440:	83 c4 10             	add    esp,0x10
c0014443:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014446:	75 ba                	jne    c0014402 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014448:	83 fb 0f             	cmp    ebx,0xf
c001444b:	7f 29                	jg     c0014476 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001444d:	0f b6 9b 20 cd 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd32e0]
c0014454:	eb ac                	jmp    c0014402 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014456:	8d 04 82             	lea    eax,[edx+eax*4]
c0014459:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001445d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014460:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014466:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001446a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014470:	89 d8                	mov    eax,ebx
c0014472:	5a                   	pop    edx
c0014473:	5b                   	pop    ebx
c0014474:	5e                   	pop    esi
c0014475:	c3                   	ret    
c0014476:	83 ec 0c             	sub    esp,0xc
c0014479:	68 c0 a4 02 c0       	push   0xc002a4c0
c001447e:	e8 d8 59 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0014483:	83 c4 10             	add    esp,0x10
c0014486:	e9 77 ff ff ff       	jmp    c0014402 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001448b:	90                   	nop

c001448c <InterruptController::clearAllHandlers(int, bool)>:
c001448c:	56                   	push   esi
c001448d:	53                   	push   ebx
c001448e:	52                   	push   edx
c001448f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014493:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014497:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001449c:	75 61                	jne    c00144ff <InterruptController::clearAllHandlers(int, bool)+0x73>
c001449e:	8d 46 20             	lea    eax,[esi+0x20]
c00144a1:	c1 e6 04             	shl    esi,0x4
c00144a4:	c1 e0 04             	shl    eax,0x4
c00144a7:	01 de                	add    esi,ebx
c00144a9:	01 d8                	add    eax,ebx
c00144ab:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144b5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144bf:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144c9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144d3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144dd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144e7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144f1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00144fb:	58                   	pop    eax
c00144fc:	5b                   	pop    ebx
c00144fd:	5e                   	pop    esi
c00144fe:	c3                   	ret    
c00144ff:	83 ec 0c             	sub    esp,0xc
c0014502:	53                   	push   ebx
c0014503:	e8 f2 fa ff ff       	call   c0013ffa <Device::getName()>
c0014508:	83 c4 10             	add    esp,0x10
c001450b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001450e:	75 8e                	jne    c001449e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014510:	83 fe 0f             	cmp    esi,0xf
c0014513:	7f 09                	jg     c001451e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014515:	0f b6 b6 20 cd 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd32e0]
c001451c:	eb 80                	jmp    c001449e <InterruptController::clearAllHandlers(int, bool)+0x12>
c001451e:	83 ec 0c             	sub    esp,0xc
c0014521:	68 34 a5 02 c0       	push   0xc002a534
c0014526:	e8 30 59 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c001452b:	83 c4 10             	add    esp,0x10
c001452e:	e9 6b ff ff ff       	jmp    c001449e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014533:	90                   	nop

c0014534 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014534:	56                   	push   esi
c0014535:	53                   	push   ebx
c0014536:	52                   	push   edx
c0014537:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001453b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001453f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014544:	75 3a                	jne    c0014580 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014546:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001454a:	8d 50 20             	lea    edx,[eax+0x20]
c001454d:	c1 e2 04             	shl    edx,0x4
c0014550:	8d 04 16             	lea    eax,[esi+edx*1]
c0014553:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014557:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001455d:	74 0b                	je     c001456a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001455f:	83 c0 04             	add    eax,0x4
c0014562:	39 d0                	cmp    eax,edx
c0014564:	75 f1                	jne    c0014557 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014566:	58                   	pop    eax
c0014567:	5b                   	pop    ebx
c0014568:	5e                   	pop    esi
c0014569:	c3                   	ret    
c001456a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014574:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001457e:	eb df                	jmp    c001455f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014580:	83 ec 0c             	sub    esp,0xc
c0014583:	56                   	push   esi
c0014584:	e8 71 fa ff ff       	call   c0013ffa <Device::getName()>
c0014589:	83 c4 10             	add    esp,0x10
c001458c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001458f:	75 b5                	jne    c0014546 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014591:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014596:	7f 11                	jg     c00145a9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014598:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001459c:	0f b6 80 20 cd 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd32e0]
c00145a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145a7:	eb 9d                	jmp    c0014546 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145a9:	83 ec 0c             	sub    esp,0xc
c00145ac:	68 34 a5 02 c0       	push   0xc002a534
c00145b1:	e8 a5 58 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c00145b6:	83 c4 10             	add    esp,0x10
c00145b9:	eb 8b                	jmp    c0014546 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145bb <nmiHandler(regs*, void*)>:
c00145bb:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00145c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145c4:	e9 9b a7 ff ff       	jmp    c000ed64 <Computer::handleNMI()>

c00145c9 <int_handler>:
c00145c9:	55                   	push   ebp
c00145ca:	57                   	push   edi
c00145cb:	56                   	push   esi
c00145cc:	53                   	push   ebx
c00145cd:	83 ec 0c             	sub    esp,0xc
c00145d0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145d4:	80 3d 20 06 03 c0 00 	cmp    BYTE PTR ds:0xc0030620,0x0
c00145db:	74 0b                	je     c00145e8 <int_handler+0x1f>
c00145dd:	fa                   	cli    
c00145de:	f4                   	hlt    
c00145df:	80 3d 20 06 03 c0 00 	cmp    BYTE PTR ds:0xc0030620,0x0
c00145e6:	75 f5                	jne    c00145dd <int_handler+0x14>
c00145e8:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00145ed:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145f6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00145fc:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145ff:	83 f8 17             	cmp    eax,0x17
c0014602:	77 13                	ja     c0014617 <int_handler+0x4e>
c0014604:	83 ec 08             	sub    esp,0x8
c0014607:	8b 17                	mov    edx,DWORD PTR [edi]
c0014609:	8d 43 e0             	lea    eax,[ebx-0x20]
c001460c:	0f b6 c0             	movzx  eax,al
c001460f:	50                   	push   eax
c0014610:	57                   	push   edi
c0014611:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014614:	83 c4 10             	add    esp,0x10
c0014617:	83 c3 15             	add    ebx,0x15
c001461a:	c1 e3 04             	shl    ebx,0x4
c001461d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014621:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014628:	31 db                	xor    ebx,ebx
c001462a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001462e:	85 c0                	test   eax,eax
c0014630:	74 13                	je     c0014645 <int_handler+0x7c>
c0014632:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014635:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014639:	74 1c                	je     c0014657 <int_handler+0x8e>
c001463b:	83 ec 08             	sub    esp,0x8
c001463e:	52                   	push   edx
c001463f:	56                   	push   esi
c0014640:	ff d0                	call   eax
c0014642:	83 c4 10             	add    esp,0x10
c0014645:	43                   	inc    ebx
c0014646:	83 fb 04             	cmp    ebx,0x4
c0014649:	75 df                	jne    c001462a <int_handler+0x61>
c001464b:	83 c4 0c             	add    esp,0xc
c001464e:	31 c0                	xor    eax,eax
c0014650:	5b                   	pop    ebx
c0014651:	31 d2                	xor    edx,edx
c0014653:	5e                   	pop    esi
c0014654:	5f                   	pop    edi
c0014655:	5d                   	pop    ebp
c0014656:	c3                   	ret    
c0014657:	83 ec 08             	sub    esp,0x8
c001465a:	52                   	push   edx
c001465b:	56                   	push   esi
c001465c:	ff d0                	call   eax
c001465e:	83 c4 10             	add    esp,0x10
c0014661:	83 c4 0c             	add    esp,0xc
c0014664:	5b                   	pop    ebx
c0014665:	5e                   	pop    esi
c0014666:	5f                   	pop    edi
c0014667:	5d                   	pop    ebp
c0014668:	c3                   	ret    
c0014669:	90                   	nop

c001466a <InterruptController::InterruptController(char const*)>:
c001466a:	83 ec 1c             	sub    esp,0x1c
c001466d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014671:	83 ec 08             	sub    esp,0x8
c0014674:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014678:	50                   	push   eax
c0014679:	e8 80 f8 ff ff       	call   c0013efe <Device::Device(char const*)>
c001467e:	83 c4 10             	add    esp,0x10
c0014681:	ba d0 a7 02 c0       	mov    edx,0xc002a7d0
c0014686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001468a:	89 10                	mov    DWORD PTR [eax],edx
c001468c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014690:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001469a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146a2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146aa:	7f 5e                	jg     c001470a <InterruptController::InterruptController(char const*)+0xa0>
c00146ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146b4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146b9:	7f 49                	jg     c0014704 <InterruptController::InterruptController(char const*)+0x9a>
c00146bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146c3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146ce:	01 ca                	add    edx,ecx
c00146d0:	83 c2 54             	add    edx,0x54
c00146d3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146e3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146ee:	01 ca                	add    edx,ecx
c00146f0:	81 c2 54 04 00 00    	add    edx,0x454
c00146f6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146fe:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014702:	eb b0                	jmp    c00146b4 <InterruptController::InterruptController(char const*)+0x4a>
c0014704:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014708:	eb 98                	jmp    c00146a2 <InterruptController::InterruptController(char const*)+0x38>
c001470a:	90                   	nop
c001470b:	83 c4 1c             	add    esp,0x1c
c001470e:	c3                   	ret    
c001470f:	90                   	nop

c0014710 <InterruptController::~InterruptController()>:
c0014710:	83 ec 0c             	sub    esp,0xc
c0014713:	ba d0 a7 02 c0       	mov    edx,0xc002a7d0
c0014718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001471c:	89 10                	mov    DWORD PTR [eax],edx
c001471e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014722:	83 ec 0c             	sub    esp,0xc
c0014725:	50                   	push   eax
c0014726:	e8 b5 f4 ff ff       	call   c0013be0 <Device::~Device()>
c001472b:	83 c4 10             	add    esp,0x10
c001472e:	90                   	nop
c001472f:	83 c4 0c             	add    esp,0xc
c0014732:	c3                   	ret    
c0014733:	90                   	nop

c0014734 <InterruptController::~InterruptController()>:
c0014734:	83 ec 0c             	sub    esp,0xc
c0014737:	83 ec 0c             	sub    esp,0xc
c001473a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001473e:	e8 cd ff ff ff       	call   c0014710 <InterruptController::~InterruptController()>
c0014743:	83 c4 10             	add    esp,0x10
c0014746:	83 ec 08             	sub    esp,0x8
c0014749:	68 58 21 00 00       	push   0x2158
c001474e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014752:	e8 b0 e0 ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0014757:	83 c4 10             	add    esp,0x10
c001475a:	83 c4 0c             	add    esp,0xc
c001475d:	c3                   	ret    

c001475e <displayDebugInfo(regs*)>:
c001475e:	55                   	push   ebp
c001475f:	57                   	push   edi
c0014760:	56                   	push   esi
c0014761:	53                   	push   ebx
c0014762:	83 ec 24             	sub    esp,0x24
c0014765:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014769:	0f 20 c2             	mov    edx,cr0
c001476c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014770:	0f 20 d7             	mov    edi,cr2
c0014773:	0f 20 de             	mov    esi,cr3
c0014776:	0f 20 e5             	mov    ebp,cr4
c0014779:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001477c:	68 6e a5 02 c0       	push   0xc002a56e
c0014781:	e8 61 e1 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014786:	59                   	pop    ecx
c0014787:	58                   	pop    eax
c0014788:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001478b:	68 79 a5 02 c0       	push   0xc002a579
c0014790:	e8 52 e1 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014795:	58                   	pop    eax
c0014796:	5a                   	pop    edx
c0014797:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001479a:	68 84 a5 02 c0       	push   0xc002a584
c001479f:	e8 43 e1 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00147a4:	59                   	pop    ecx
c00147a5:	58                   	pop    eax
c00147a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147a9:	68 8f a5 02 c0       	push   0xc002a58f
c00147ae:	e8 34 e1 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00147b3:	58                   	pop    eax
c00147b4:	5a                   	pop    edx
c00147b5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147b8:	68 9a a5 02 c0       	push   0xc002a59a
c00147bd:	e8 25 e1 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00147c2:	59                   	pop    ecx
c00147c3:	58                   	pop    eax
c00147c4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147c7:	68 a5 a5 02 c0       	push   0xc002a5a5
c00147cc:	e8 16 e1 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00147d1:	58                   	pop    eax
c00147d2:	5a                   	pop    edx
c00147d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147d6:	68 b0 a5 02 c0       	push   0xc002a5b0
c00147db:	e8 07 e1 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00147e0:	59                   	pop    ecx
c00147e1:	58                   	pop    eax
c00147e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147e5:	68 bb a5 02 c0       	push   0xc002a5bb
c00147ea:	e8 f8 e0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00147ef:	58                   	pop    eax
c00147f0:	5a                   	pop    edx
c00147f1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147f4:	68 c6 a5 02 c0       	push   0xc002a5c6
c00147f9:	e8 e9 e0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00147fe:	59                   	pop    ecx
c00147ff:	58                   	pop    eax
c0014800:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014803:	68 d5 a5 02 c0       	push   0xc002a5d5
c0014808:	e8 da e0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001480d:	58                   	pop    eax
c001480e:	5a                   	pop    edx
c001480f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014812:	68 e0 a5 02 c0       	push   0xc002a5e0
c0014817:	e8 cb e0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001481c:	59                   	pop    ecx
c001481d:	58                   	pop    eax
c001481e:	57                   	push   edi
c001481f:	68 eb a5 02 c0       	push   0xc002a5eb
c0014824:	e8 be e0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014829:	58                   	pop    eax
c001482a:	5a                   	pop    edx
c001482b:	56                   	push   esi
c001482c:	68 f6 a5 02 c0       	push   0xc002a5f6
c0014831:	e8 b1 e0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014836:	59                   	pop    ecx
c0014837:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001483c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014842:	e8 62 c2 ff ff       	call   c0010aa9 <setActiveTerminal(VgaText*)>
c0014847:	58                   	pop    eax
c0014848:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001484b:	5a                   	pop    edx
c001484c:	c1 e0 05             	shl    eax,0x5
c001484f:	05 80 ca 02 c0       	add    eax,0xc002ca80
c0014854:	50                   	push   eax
c0014855:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001485a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014860:	e8 63 c6 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014865:	59                   	pop    ecx
c0014866:	58                   	pop    eax
c0014867:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001486c:	68 01 a6 02 c0       	push   0xc002a601
c0014871:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014877:	e8 4c c6 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001487c:	58                   	pop    eax
c001487d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014882:	5a                   	pop    edx
c0014883:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014886:	83 c0 0c             	add    eax,0xc
c0014889:	50                   	push   eax
c001488a:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001488f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014895:	e8 2e c6 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001489a:	59                   	pop    ecx
c001489b:	58                   	pop    eax
c001489c:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00148a1:	68 0a a6 02 c0       	push   0xc002a60a
c00148a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ac:	e8 17 c6 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c00148b1:	58                   	pop    eax
c00148b2:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00148b7:	5a                   	pop    edx
c00148b8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c1:	e8 28 c6 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c00148c6:	59                   	pop    ecx
c00148c7:	58                   	pop    eax
c00148c8:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00148cd:	68 12 a6 02 c0       	push   0xc002a612
c00148d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d8:	e8 eb c5 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c00148dd:	58                   	pop    eax
c00148de:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00148e3:	5a                   	pop    edx
c00148e4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ed:	e8 fc c5 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c00148f2:	59                   	pop    ecx
c00148f3:	58                   	pop    eax
c00148f4:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00148f9:	68 1a a6 02 c0       	push   0xc002a61a
c00148fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014904:	e8 bf c5 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014909:	58                   	pop    eax
c001490a:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001490f:	5a                   	pop    edx
c0014910:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014913:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014919:	e8 d0 c5 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c001491e:	59                   	pop    ecx
c001491f:	58                   	pop    eax
c0014920:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014925:	68 22 a6 02 c0       	push   0xc002a622
c001492a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014930:	e8 93 c5 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014935:	58                   	pop    eax
c0014936:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001493b:	5a                   	pop    edx
c001493c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001493f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014945:	e8 a4 c5 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c001494a:	59                   	pop    ecx
c001494b:	58                   	pop    eax
c001494c:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014951:	68 2a a6 02 c0       	push   0xc002a62a
c0014956:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495c:	e8 67 c5 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014961:	58                   	pop    eax
c0014962:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014967:	5a                   	pop    edx
c0014968:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001496b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014971:	e8 78 c5 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c0014976:	59                   	pop    ecx
c0014977:	58                   	pop    eax
c0014978:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001497d:	68 32 a6 02 c0       	push   0xc002a632
c0014982:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014988:	e8 3b c5 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001498d:	58                   	pop    eax
c001498e:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014993:	5a                   	pop    edx
c0014994:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014997:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001499d:	e8 4c c5 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c00149a2:	59                   	pop    ecx
c00149a3:	58                   	pop    eax
c00149a4:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00149a9:	68 3a a6 02 c0       	push   0xc002a63a
c00149ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b4:	e8 0f c5 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c00149b9:	58                   	pop    eax
c00149ba:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00149bf:	5a                   	pop    edx
c00149c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149c4:	52                   	push   edx
c00149c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149cb:	e8 1e c5 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c00149d0:	59                   	pop    ecx
c00149d1:	58                   	pop    eax
c00149d2:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00149d7:	68 43 a6 02 c0       	push   0xc002a643
c00149dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e2:	e8 e1 c4 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c00149e7:	58                   	pop    eax
c00149e8:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00149ed:	5a                   	pop    edx
c00149ee:	57                   	push   edi
c00149ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f5:	e8 f4 c4 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c00149fa:	59                   	pop    ecx
c00149fb:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a00:	5f                   	pop    edi
c0014a01:	68 4b a6 02 c0       	push   0xc002a64b
c0014a06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0c:	e8 b7 c4 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014a11:	58                   	pop    eax
c0014a12:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a17:	5a                   	pop    edx
c0014a18:	56                   	push   esi
c0014a19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a1f:	e8 ca c4 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c0014a24:	59                   	pop    ecx
c0014a25:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a2a:	5e                   	pop    esi
c0014a2b:	68 53 a6 02 c0       	push   0xc002a653
c0014a30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a36:	e8 8d c4 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014a3b:	5f                   	pop    edi
c0014a3c:	58                   	pop    eax
c0014a3d:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a42:	55                   	push   ebp
c0014a43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a49:	e8 a0 c4 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c0014a4e:	58                   	pop    eax
c0014a4f:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a54:	5a                   	pop    edx
c0014a55:	68 5b a6 02 c0       	push   0xc002a65b
c0014a5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a60:	e8 63 c4 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014a65:	0f 21 c0             	mov    eax,db0
c0014a68:	59                   	pop    ecx
c0014a69:	5e                   	pop    esi
c0014a6a:	50                   	push   eax
c0014a6b:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a76:	e8 73 c4 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c0014a7b:	5f                   	pop    edi
c0014a7c:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a81:	5d                   	pop    ebp
c0014a82:	68 64 a6 02 c0       	push   0xc002a664
c0014a87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8d:	e8 36 c4 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014a92:	0f 21 c8             	mov    eax,db1
c0014a95:	5a                   	pop    edx
c0014a96:	59                   	pop    ecx
c0014a97:	50                   	push   eax
c0014a98:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa3:	e8 46 c4 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c0014aa8:	5e                   	pop    esi
c0014aa9:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014aae:	5f                   	pop    edi
c0014aaf:	68 6c a6 02 c0       	push   0xc002a66c
c0014ab4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aba:	e8 09 c4 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014abf:	0f 21 d0             	mov    eax,db2
c0014ac2:	5d                   	pop    ebp
c0014ac3:	5a                   	pop    edx
c0014ac4:	50                   	push   eax
c0014ac5:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014aca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad0:	e8 19 c4 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c0014ad5:	59                   	pop    ecx
c0014ad6:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014adb:	5e                   	pop    esi
c0014adc:	68 74 a6 02 c0       	push   0xc002a674
c0014ae1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae7:	e8 dc c3 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014aec:	0f 21 d8             	mov    eax,db3
c0014aef:	5f                   	pop    edi
c0014af0:	5d                   	pop    ebp
c0014af1:	50                   	push   eax
c0014af2:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014af7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014afd:	e8 ec c3 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c0014b02:	58                   	pop    eax
c0014b03:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b08:	5a                   	pop    edx
c0014b09:	68 7c a6 02 c0       	push   0xc002a67c
c0014b0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b14:	e8 af c3 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014b19:	0f 21 f0             	mov    eax,db6
c0014b1c:	59                   	pop    ecx
c0014b1d:	5e                   	pop    esi
c0014b1e:	50                   	push   eax
c0014b1f:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2a:	e8 bf c3 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c0014b2f:	5f                   	pop    edi
c0014b30:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b35:	5d                   	pop    ebp
c0014b36:	68 84 a6 02 c0       	push   0xc002a684
c0014b3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b41:	e8 82 c3 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014b46:	0f 21 f8             	mov    eax,db7
c0014b49:	5a                   	pop    edx
c0014b4a:	59                   	pop    ecx
c0014b4b:	50                   	push   eax
c0014b4c:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b57:	e8 92 c3 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c0014b5c:	5e                   	pop    esi
c0014b5d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b60:	e8 8d 82 00 00       	call   c001cdf2 <Thr::getDriverNameFromAddress(unsigned long)>
c0014b65:	83 c4 10             	add    esp,0x10
c0014b68:	85 c0                	test   eax,eax
c0014b6a:	74 7d                	je     c0014be9 <displayDebugInfo(regs*)+0x48b>
c0014b6c:	89 c6                	mov    esi,eax
c0014b6e:	50                   	push   eax
c0014b6f:	50                   	push   eax
c0014b70:	56                   	push   esi
c0014b71:	68 8c a6 02 c0       	push   0xc002a68c
c0014b76:	e8 6c dd ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014b7b:	5a                   	pop    edx
c0014b7c:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b81:	59                   	pop    ecx
c0014b82:	68 9a a6 02 c0       	push   0xc002a69a
c0014b87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b8d:	e8 36 c3 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014b92:	5f                   	pop    edi
c0014b93:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b98:	5d                   	pop    ebp
c0014b99:	56                   	push   esi
c0014b9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ba0:	e8 23 c3 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014ba5:	58                   	pop    eax
c0014ba6:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014bab:	5a                   	pop    edx
c0014bac:	68 a6 a6 02 c0       	push   0xc002a6a6
c0014bb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb7:	e8 0c c3 ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0014bbc:	59                   	pop    ecx
c0014bbd:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014bc2:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014bc8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014bcb:	e8 59 82 00 00       	call   c001ce29 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014bd0:	5b                   	pop    ebx
c0014bd1:	5d                   	pop    ebp
c0014bd2:	50                   	push   eax
c0014bd3:	57                   	push   edi
c0014bd4:	e8 15 c3 ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c0014bd9:	58                   	pop    eax
c0014bda:	5a                   	pop    edx
c0014bdb:	56                   	push   esi
c0014bdc:	68 b2 a6 02 c0       	push   0xc002a6b2
c0014be1:	e8 01 dd ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014be6:	83 c4 10             	add    esp,0x10
c0014be9:	fa                   	cli    
c0014bea:	f4                   	hlt    
c0014beb:	eb fe                	jmp    c0014beb <displayDebugInfo(regs*)+0x48d>

c0014bed <x87EmulHandler(regs*, void*)>:
c0014bed:	53                   	push   ebx
c0014bee:	83 ec 14             	sub    esp,0x14
c0014bf1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014bf5:	53                   	push   ebx
c0014bf6:	e8 4f a5 00 00       	call   c001f14a <Vm::x87Handler(regs*)>
c0014bfb:	83 c4 10             	add    esp,0x10
c0014bfe:	84 c0                	test   al,al
c0014c00:	74 05                	je     c0014c07 <x87EmulHandler(regs*, void*)+0x1a>
c0014c02:	83 c4 08             	add    esp,0x8
c0014c05:	5b                   	pop    ebx
c0014c06:	c3                   	ret    
c0014c07:	83 ec 0c             	sub    esp,0xc
c0014c0a:	68 c2 a6 02 c0       	push   0xc002a6c2
c0014c0f:	e8 d3 dc ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014c14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c17:	e8 42 fb ff ff       	call   c001475e <displayDebugInfo(regs*)>

c0014c1c <gpFault(regs*, void*)>:
c0014c1c:	53                   	push   ebx
c0014c1d:	83 ec 14             	sub    esp,0x14
c0014c20:	c7 05 70 dc 02 c0 c7 e4 01 c0 	mov    DWORD PTR ds:0xc002dc70,0xc001e4c7
c0014c2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c2e:	53                   	push   ebx
c0014c2f:	e8 93 98 00 00       	call   c001e4c7 <Vm::faultHandler(regs*)>
c0014c34:	83 c4 10             	add    esp,0x10
c0014c37:	84 c0                	test   al,al
c0014c39:	74 05                	je     c0014c40 <gpFault(regs*, void*)+0x24>
c0014c3b:	83 c4 08             	add    esp,0x8
c0014c3e:	5b                   	pop    ebx
c0014c3f:	c3                   	ret    
c0014c40:	83 ec 0c             	sub    esp,0xc
c0014c43:	68 d8 a6 02 c0       	push   0xc002a6d8
c0014c48:	e8 9a dc ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014c4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c50:	e8 09 fb ff ff       	call   c001475e <displayDebugInfo(regs*)>

c0014c55 <pgFault(regs*, void*)>:
c0014c55:	83 ec 18             	sub    esp,0x18
c0014c58:	68 f3 a6 02 c0       	push   0xc002a6f3
c0014c5d:	e8 85 dc ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014c62:	58                   	pop    eax
c0014c63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c67:	e8 f2 fa ff ff       	call   c001475e <displayDebugInfo(regs*)>

c0014c6c <otherISRHandler(regs*, void*)>:
c0014c6c:	53                   	push   ebx
c0014c6d:	83 ec 0c             	sub    esp,0xc
c0014c70:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c74:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014c77:	50                   	push   eax
c0014c78:	50                   	push   eax
c0014c79:	68 00 a7 02 c0       	push   0xc002a700
c0014c7e:	e8 64 dc ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014c83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c86:	e8 d3 fa ff ff       	call   c001475e <displayDebugInfo(regs*)>

c0014c8b <opcodeFault(regs*, void*)>:
c0014c8b:	55                   	push   ebp
c0014c8c:	89 e5                	mov    ebp,esp
c0014c8e:	56                   	push   esi
c0014c8f:	53                   	push   ebx
c0014c90:	83 ec 40             	sub    esp,0x40
c0014c93:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0014c98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c9e:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014ca4:	84 c0                	test   al,al
c0014ca6:	74 24                	je     c0014ccc <opcodeFault(regs*, void*)+0x41>
c0014ca8:	83 ec 0c             	sub    esp,0xc
c0014cab:	68 20 a7 02 c0       	push   0xc002a720
c0014cb0:	e8 32 dc ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014cb5:	83 c4 10             	add    esp,0x10
c0014cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cbe:	8d 50 19             	lea    edx,[eax+0x19]
c0014cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cc7:	e9 be 05 00 00       	jmp    c001528a <opcodeFault(regs*, void*)+0x5ff>
c0014ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cd2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014cd5:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014cd9:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014cdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ce3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014ce6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ce9:	8a 00                	mov    al,BYTE PTR [eax]
c0014ceb:	3c f0                	cmp    al,0xf0
c0014ced:	75 17                	jne    c0014d06 <opcodeFault(regs*, void*)+0x7b>
c0014cef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0014cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d01:	e9 da 00 00 00       	jmp    c0014de0 <opcodeFault(regs*, void*)+0x155>
c0014d06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d09:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0b:	3c f2                	cmp    al,0xf2
c0014d0d:	74 09                	je     c0014d18 <opcodeFault(regs*, void*)+0x8d>
c0014d0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d12:	8a 00                	mov    al,BYTE PTR [eax]
c0014d14:	3c f3                	cmp    al,0xf3
c0014d16:	75 1b                	jne    c0014d33 <opcodeFault(regs*, void*)+0xa8>
c0014d18:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d1c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d25:	8d 50 01             	lea    edx,[eax+0x1]
c0014d28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d2e:	e9 ad 00 00 00       	jmp    c0014de0 <opcodeFault(regs*, void*)+0x155>
c0014d33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d36:	8a 00                	mov    al,BYTE PTR [eax]
c0014d38:	3c 66                	cmp    al,0x66
c0014d3a:	75 1f                	jne    c0014d5b <opcodeFault(regs*, void*)+0xd0>
c0014d3c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d40:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d44:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d4d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d53:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d56:	e9 85 00 00 00       	jmp    c0014de0 <opcodeFault(regs*, void*)+0x155>
c0014d5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d5e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d60:	3c 67                	cmp    al,0x67
c0014d62:	75 18                	jne    c0014d7c <opcodeFault(regs*, void*)+0xf1>
c0014d64:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d68:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d71:	8d 50 01             	lea    edx,[eax+0x1]
c0014d74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d77:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d7a:	eb 64                	jmp    c0014de0 <opcodeFault(regs*, void*)+0x155>
c0014d7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d7f:	8a 00                	mov    al,BYTE PTR [eax]
c0014d81:	3c 2e                	cmp    al,0x2e
c0014d83:	74 09                	je     c0014d8e <opcodeFault(regs*, void*)+0x103>
c0014d85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d88:	8a 00                	mov    al,BYTE PTR [eax]
c0014d8a:	3c 3e                	cmp    al,0x3e
c0014d8c:	75 18                	jne    c0014da6 <opcodeFault(regs*, void*)+0x11b>
c0014d8e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d92:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d98:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d9b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014da4:	eb 3a                	jmp    c0014de0 <opcodeFault(regs*, void*)+0x155>
c0014da6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da9:	8a 00                	mov    al,BYTE PTR [eax]
c0014dab:	3c 36                	cmp    al,0x36
c0014dad:	74 1b                	je     c0014dca <opcodeFault(regs*, void*)+0x13f>
c0014daf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db2:	8a 00                	mov    al,BYTE PTR [eax]
c0014db4:	3c 26                	cmp    al,0x26
c0014db6:	74 12                	je     c0014dca <opcodeFault(regs*, void*)+0x13f>
c0014db8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbb:	8a 00                	mov    al,BYTE PTR [eax]
c0014dbd:	3c 64                	cmp    al,0x64
c0014dbf:	74 09                	je     c0014dca <opcodeFault(regs*, void*)+0x13f>
c0014dc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc4:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc6:	3c 65                	cmp    al,0x65
c0014dc8:	75 16                	jne    c0014de0 <opcodeFault(regs*, void*)+0x155>
c0014dca:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dce:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dd7:	8d 50 01             	lea    edx,[eax+0x1]
c0014dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014de0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de3:	8a 00                	mov    al,BYTE PTR [eax]
c0014de5:	3c 0f                	cmp    al,0xf
c0014de7:	0f 85 ad 00 00 00    	jne    c0014e9a <opcodeFault(regs*, void*)+0x20f>
c0014ded:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df0:	40                   	inc    eax
c0014df1:	8a 00                	mov    al,BYTE PTR [eax]
c0014df3:	3c c2                	cmp    al,0xc2
c0014df5:	74 0e                	je     c0014e05 <opcodeFault(regs*, void*)+0x17a>
c0014df7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfa:	40                   	inc    eax
c0014dfb:	8a 00                	mov    al,BYTE PTR [eax]
c0014dfd:	3c c3                	cmp    al,0xc3
c0014dff:	0f 85 95 00 00 00    	jne    c0014e9a <opcodeFault(regs*, void*)+0x20f>
c0014e05:	83 ec 0c             	sub    esp,0xc
c0014e08:	68 43 a7 02 c0       	push   0xc002a743
c0014e0d:	e8 d5 da ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0014e12:	83 c4 10             	add    esp,0x10
c0014e15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e18:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e1b:	8d 50 01             	lea    edx,[eax+0x1]
c0014e1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e21:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e24:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e2a:	8a 00                	mov    al,BYTE PTR [eax]
c0014e2c:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e32:	88 10                	mov    BYTE PTR [eax],dl
c0014e34:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e37:	50                   	push   eax
c0014e38:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e3b:	50                   	push   eax
c0014e3c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e3f:	50                   	push   eax
c0014e40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e43:	e8 44 48 00 00       	call   c001968c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e48:	83 c4 10             	add    esp,0x10
c0014e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e51:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e54:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e57:	01 d0                	add    eax,edx
c0014e59:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e62:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e65:	48                   	dec    eax
c0014e66:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014e69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014e6f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e75:	83 ec 04             	sub    esp,0x4
c0014e78:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014e7b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014e7e:	50                   	push   eax
c0014e7f:	e8 30 b3 fe ff       	call   c00001b4 <voodooXADD>
c0014e84:	83 c4 10             	add    esp,0x10
c0014e87:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014e8a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014e8d:	01 c2                	add    edx,eax
c0014e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e92:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e95:	e9 f0 03 00 00       	jmp    c001528a <opcodeFault(regs*, void*)+0x5ff>
c0014e9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e9d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e9f:	3c 0f                	cmp    al,0xf
c0014ea1:	0f 85 8b 01 00 00    	jne    c0015032 <opcodeFault(regs*, void*)+0x3a7>
c0014ea7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eaa:	40                   	inc    eax
c0014eab:	8a 00                	mov    al,BYTE PTR [eax]
c0014ead:	3c c7                	cmp    al,0xc7
c0014eaf:	0f 86 7d 01 00 00    	jbe    c0015032 <opcodeFault(regs*, void*)+0x3a7>
c0014eb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb8:	40                   	inc    eax
c0014eb9:	8a 00                	mov    al,BYTE PTR [eax]
c0014ebb:	3c cf                	cmp    al,0xcf
c0014ebd:	0f 87 6f 01 00 00    	ja     c0015032 <opcodeFault(regs*, void*)+0x3a7>
c0014ec3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec6:	40                   	inc    eax
c0014ec7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec9:	83 c0 38             	add    eax,0x38
c0014ecc:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014ecf:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ed3:	75 0b                	jne    c0014ee0 <opcodeFault(regs*, void*)+0x255>
c0014ed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014edb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ede:	eb 75                	jmp    c0014f55 <opcodeFault(regs*, void*)+0x2ca>
c0014ee0:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ee4:	75 0b                	jne    c0014ef1 <opcodeFault(regs*, void*)+0x266>
c0014ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014eec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eef:	eb 64                	jmp    c0014f55 <opcodeFault(regs*, void*)+0x2ca>
c0014ef1:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ef5:	75 0b                	jne    c0014f02 <opcodeFault(regs*, void*)+0x277>
c0014ef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014efd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f00:	eb 53                	jmp    c0014f55 <opcodeFault(regs*, void*)+0x2ca>
c0014f02:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f06:	75 0b                	jne    c0014f13 <opcodeFault(regs*, void*)+0x288>
c0014f08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f0e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f11:	eb 42                	jmp    c0014f55 <opcodeFault(regs*, void*)+0x2ca>
c0014f13:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f17:	75 0b                	jne    c0014f24 <opcodeFault(regs*, void*)+0x299>
c0014f19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f1f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f22:	eb 31                	jmp    c0014f55 <opcodeFault(regs*, void*)+0x2ca>
c0014f24:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f28:	75 0b                	jne    c0014f35 <opcodeFault(regs*, void*)+0x2aa>
c0014f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f30:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f33:	eb 20                	jmp    c0014f55 <opcodeFault(regs*, void*)+0x2ca>
c0014f35:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f39:	75 0b                	jne    c0014f46 <opcodeFault(regs*, void*)+0x2bb>
c0014f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f41:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f44:	eb 0f                	jmp    c0014f55 <opcodeFault(regs*, void*)+0x2ca>
c0014f46:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f4a:	75 09                	jne    c0014f55 <opcodeFault(regs*, void*)+0x2ca>
c0014f4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f52:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f55:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f59:	74 10                	je     c0014f6b <opcodeFault(regs*, void*)+0x2e0>
c0014f5b:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f62:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014f69:	eb 2d                	jmp    c0014f98 <opcodeFault(regs*, void*)+0x30d>
c0014f6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f6e:	c1 e0 18             	shl    eax,0x18
c0014f71:	89 c2                	mov    edx,eax
c0014f73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f76:	c1 e0 08             	shl    eax,0x8
c0014f79:	25 00 00 ff 00       	and    eax,0xff0000
c0014f7e:	09 c2                	or     edx,eax
c0014f80:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f83:	c1 e8 08             	shr    eax,0x8
c0014f86:	25 00 ff 00 00       	and    eax,0xff00
c0014f8b:	09 c2                	or     edx,eax
c0014f8d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f90:	c1 e8 18             	shr    eax,0x18
c0014f93:	09 d0                	or     eax,edx
c0014f95:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f98:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f9c:	75 0b                	jne    c0014fa9 <opcodeFault(regs*, void*)+0x31e>
c0014f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fa4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fa7:	eb 75                	jmp    c001501e <opcodeFault(regs*, void*)+0x393>
c0014fa9:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014fad:	75 0b                	jne    c0014fba <opcodeFault(regs*, void*)+0x32f>
c0014faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fb5:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014fb8:	eb 64                	jmp    c001501e <opcodeFault(regs*, void*)+0x393>
c0014fba:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014fbe:	75 0b                	jne    c0014fcb <opcodeFault(regs*, void*)+0x340>
c0014fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fc6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fc9:	eb 53                	jmp    c001501e <opcodeFault(regs*, void*)+0x393>
c0014fcb:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014fcf:	75 0b                	jne    c0014fdc <opcodeFault(regs*, void*)+0x351>
c0014fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fd7:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014fda:	eb 42                	jmp    c001501e <opcodeFault(regs*, void*)+0x393>
c0014fdc:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014fe0:	75 0b                	jne    c0014fed <opcodeFault(regs*, void*)+0x362>
c0014fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fe8:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014feb:	eb 31                	jmp    c001501e <opcodeFault(regs*, void*)+0x393>
c0014fed:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ff1:	75 0b                	jne    c0014ffe <opcodeFault(regs*, void*)+0x373>
c0014ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ff9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014ffc:	eb 20                	jmp    c001501e <opcodeFault(regs*, void*)+0x393>
c0014ffe:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015002:	75 0b                	jne    c001500f <opcodeFault(regs*, void*)+0x384>
c0015004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015007:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001500a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001500d:	eb 0f                	jmp    c001501e <opcodeFault(regs*, void*)+0x393>
c001500f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015013:	75 09                	jne    c001501e <opcodeFault(regs*, void*)+0x393>
c0015015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015018:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001501b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001501e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015021:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015024:	8d 50 02             	lea    edx,[eax+0x2]
c0015027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001502d:	e9 58 02 00 00       	jmp    c001528a <opcodeFault(regs*, void*)+0x5ff>
c0015032:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015035:	8a 00                	mov    al,BYTE PTR [eax]
c0015037:	3c 0f                	cmp    al,0xf
c0015039:	0f 85 76 01 00 00    	jne    c00151b5 <opcodeFault(regs*, void*)+0x52a>
c001503f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015042:	40                   	inc    eax
c0015043:	8a 00                	mov    al,BYTE PTR [eax]
c0015045:	3c c7                	cmp    al,0xc7
c0015047:	0f 85 68 01 00 00    	jne    c00151b5 <opcodeFault(regs*, void*)+0x52a>
c001504d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015053:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015056:	8d 50 01             	lea    edx,[eax+0x1]
c0015059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001505f:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015062:	50                   	push   eax
c0015063:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015066:	50                   	push   eax
c0015067:	8d 45 bc             	lea    eax,[ebp-0x44]
c001506a:	50                   	push   eax
c001506b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001506e:	e8 19 46 00 00       	call   c001968c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015073:	83 c4 10             	add    esp,0x10
c0015076:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015079:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001507c:	83 f0 01             	xor    eax,0x1
c001507f:	84 c0                	test   al,al
c0015081:	0f 84 2e 01 00 00    	je     c00151b5 <opcodeFault(regs*, void*)+0x52a>
c0015087:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001508a:	3c 01                	cmp    al,0x1
c001508c:	0f 85 23 01 00 00    	jne    c00151b5 <opcodeFault(regs*, void*)+0x52a>
c0015092:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015095:	83 f0 01             	xor    eax,0x1
c0015098:	84 c0                	test   al,al
c001509a:	0f 84 15 01 00 00    	je     c00151b5 <opcodeFault(regs*, void*)+0x52a>
c00150a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00150a6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150a9:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00150b0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150b3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150b6:	89 c2                	mov    edx,eax
c00150b8:	b8 00 00 00 00       	mov    eax,0x0
c00150bd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150c0:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00150c9:	ba 00 00 00 00       	mov    edx,0x0
c00150ce:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00150d1:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00150d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00150da:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150dd:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00150e4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00150e7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150ea:	89 c2                	mov    edx,eax
c00150ec:	b8 00 00 00 00       	mov    eax,0x0
c00150f1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150f4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00150f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150fa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00150fd:	ba 00 00 00 00       	mov    edx,0x0
c0015102:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015105:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015108:	e8 a9 83 00 00       	call   c001d4b6 <lockScheduler()>
c001510d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015110:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015113:	8b 00                	mov    eax,DWORD PTR [eax]
c0015115:	89 c1                	mov    ecx,eax
c0015117:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001511a:	89 cb                	mov    ebx,ecx
c001511c:	89 d0                	mov    eax,edx
c001511e:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015121:	89 c6                	mov    esi,eax
c0015123:	89 f0                	mov    eax,esi
c0015125:	09 d8                	or     eax,ebx
c0015127:	85 c0                	test   eax,eax
c0015129:	75 21                	jne    c001514c <opcodeFault(regs*, void*)+0x4c1>
c001512b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001512e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015131:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015134:	89 01                	mov    DWORD PTR [ecx],eax
c0015136:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001513f:	83 c8 40             	or     eax,0x40
c0015142:	89 c2                	mov    edx,eax
c0015144:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015147:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001514a:	eb 3e                	jmp    c001518a <opcodeFault(regs*, void*)+0x4ff>
c001514c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001514f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015152:	8b 00                	mov    eax,DWORD PTR [eax]
c0015154:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015157:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001515a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001515d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015160:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015163:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015166:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015169:	89 d0                	mov    eax,edx
c001516b:	31 d2                	xor    edx,edx
c001516d:	89 c3                	mov    ebx,eax
c001516f:	89 d6                	mov    esi,edx
c0015171:	89 da                	mov    edx,ebx
c0015173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015176:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001517f:	83 e0 bf             	and    eax,0xffffffbf
c0015182:	89 c2                	mov    edx,eax
c0015184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015187:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001518a:	e8 29 83 00 00       	call   c001d4b8 <unlockScheduler()>
c001518f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015192:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015195:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015198:	01 c2                	add    edx,eax
c001519a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151a0:	83 ec 0c             	sub    esp,0xc
c00151a3:	68 52 a7 02 c0       	push   0xc002a752
c00151a8:	e8 3a d7 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00151ad:	83 c4 10             	add    esp,0x10
c00151b0:	e9 d5 00 00 00       	jmp    c001528a <opcodeFault(regs*, void*)+0x5ff>
c00151b5:	83 ec 0c             	sub    esp,0xc
c00151b8:	68 65 a7 02 c0       	push   0xc002a765
c00151bd:	e8 25 d7 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00151c2:	83 c4 10             	add    esp,0x10
c00151c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151d1:	c1 e0 04             	shl    eax,0x4
c00151d4:	01 d0                	add    eax,edx
c00151d6:	83 c0 03             	add    eax,0x3
c00151d9:	8a 00                	mov    al,BYTE PTR [eax]
c00151db:	0f b6 d8             	movzx  ebx,al
c00151de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151ea:	c1 e0 04             	shl    eax,0x4
c00151ed:	01 d0                	add    eax,edx
c00151ef:	83 c0 02             	add    eax,0x2
c00151f2:	8a 00                	mov    al,BYTE PTR [eax]
c00151f4:	0f b6 c8             	movzx  ecx,al
c00151f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015200:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015203:	c1 e0 04             	shl    eax,0x4
c0015206:	01 d0                	add    eax,edx
c0015208:	40                   	inc    eax
c0015209:	8a 00                	mov    al,BYTE PTR [eax]
c001520b:	0f b6 d0             	movzx  edx,al
c001520e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015211:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015217:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001521a:	c1 e0 04             	shl    eax,0x4
c001521d:	01 f0                	add    eax,esi
c001521f:	8a 00                	mov    al,BYTE PTR [eax]
c0015221:	0f b6 c0             	movzx  eax,al
c0015224:	83 ec 0c             	sub    esp,0xc
c0015227:	53                   	push   ebx
c0015228:	51                   	push   ecx
c0015229:	52                   	push   edx
c001522a:	50                   	push   eax
c001522b:	68 78 a7 02 c0       	push   0xc002a778
c0015230:	e8 b2 d6 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0015235:	83 c4 20             	add    esp,0x20
c0015238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001523e:	83 c0 03             	add    eax,0x3
c0015241:	8a 00                	mov    al,BYTE PTR [eax]
c0015243:	0f b6 d8             	movzx  ebx,al
c0015246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015249:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001524c:	83 c0 02             	add    eax,0x2
c001524f:	8a 00                	mov    al,BYTE PTR [eax]
c0015251:	0f b6 c8             	movzx  ecx,al
c0015254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015257:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001525a:	40                   	inc    eax
c001525b:	8a 00                	mov    al,BYTE PTR [eax]
c001525d:	0f b6 d0             	movzx  edx,al
c0015260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015263:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015266:	8a 00                	mov    al,BYTE PTR [eax]
c0015268:	0f b6 c0             	movzx  eax,al
c001526b:	83 ec 0c             	sub    esp,0xc
c001526e:	53                   	push   ebx
c001526f:	51                   	push   ecx
c0015270:	52                   	push   edx
c0015271:	50                   	push   eax
c0015272:	68 a0 a7 02 c0       	push   0xc002a7a0
c0015277:	e8 6b d6 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001527c:	83 c4 20             	add    esp,0x20
c001527f:	83 ec 0c             	sub    esp,0xc
c0015282:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015285:	e8 d4 f4 ff ff       	call   c001475e <displayDebugInfo(regs*)>
c001528a:	8d 65 f8             	lea    esp,[ebp-0x8]
c001528d:	5b                   	pop    ebx
c001528e:	5e                   	pop    esi
c001528f:	5d                   	pop    ebp
c0015290:	c3                   	ret    

c0015291 <displayProgramFault(char const*)>:
c0015291:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015296:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015299:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001529f:	85 c0                	test   eax,eax
c00152a1:	74 15                	je     c00152b8 <displayProgramFault(char const*)+0x27>
c00152a3:	83 ec 0c             	sub    esp,0xc
c00152a6:	6a 04                	push   0x4
c00152a8:	6a 0f                	push   0xf
c00152aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152ae:	50                   	push   eax
c00152af:	e8 d6 b8 ff ff       	call   c0010b8a <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152b4:	83 c4 1c             	add    esp,0x1c
c00152b7:	c3                   	ret    
c00152b8:	c3                   	ret    

c00152b9 <setupInterruptController()>:
c00152b9:	55                   	push   ebp
c00152ba:	89 e5                	mov    ebp,esp
c00152bc:	53                   	push   ebx
c00152bd:	83 ec 24             	sub    esp,0x24
c00152c0:	b8 00 00 00 00       	mov    eax,0x0
c00152c5:	85 c0                	test   eax,eax
c00152c7:	0f 95 c0             	setne  al
c00152ca:	84 c0                	test   al,al
c00152cc:	74 5b                	je     c0015329 <setupInterruptController()+0x70>
c00152ce:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00152d5:	83 ec 0c             	sub    esp,0xc
c00152d8:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00152db:	e8 38 a3 ff ff       	call   c000f618 <malloc>
c00152e0:	83 c4 10             	add    esp,0x10
c00152e3:	89 c3                	mov    ebx,eax
c00152e5:	83 ec 0c             	sub    esp,0xc
c00152e8:	53                   	push   ebx
c00152e9:	e8 d4 fd 00 00       	call   c00250c2 <APIC::APIC()>
c00152ee:	83 c4 10             	add    esp,0x10
c00152f1:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00152f4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00152f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00152fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fc:	83 c0 08             	add    eax,0x8
c00152ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015301:	6a 00                	push   0x0
c0015303:	6a 00                	push   0x0
c0015305:	6a 00                	push   0x0
c0015307:	52                   	push   edx
c0015308:	ff d0                	call   eax
c001530a:	83 c4 10             	add    esp,0x10
c001530d:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0015312:	83 ec 08             	sub    esp,0x8
c0015315:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015318:	50                   	push   eax
c0015319:	e8 f0 e9 ff ff       	call   c0013d0e <Device::addChild(Device*)>
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015324:	e9 52 03 00 00       	jmp    c001567b <setupInterruptController()+0x3c2>
c0015329:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001532e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015334:	83 e0 01             	and    eax,0x1
c0015337:	84 c0                	test   al,al
c0015339:	0f 95 c0             	setne  al
c001533c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001533f:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015346:	83 ec 0c             	sub    esp,0xc
c0015349:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001534c:	e8 c7 a2 ff ff       	call   c000f618 <malloc>
c0015351:	83 c4 10             	add    esp,0x10
c0015354:	89 c3                	mov    ebx,eax
c0015356:	83 ec 0c             	sub    esp,0xc
c0015359:	53                   	push   ebx
c001535a:	e8 bb 02 01 00       	call   c002561a <PIC::PIC()>
c001535f:	83 c4 10             	add    esp,0x10
c0015362:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015365:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015368:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536b:	8b 00                	mov    eax,DWORD PTR [eax]
c001536d:	83 c0 08             	add    eax,0x8
c0015370:	8b 00                	mov    eax,DWORD PTR [eax]
c0015372:	6a 00                	push   0x0
c0015374:	6a 00                	push   0x0
c0015376:	6a 00                	push   0x0
c0015378:	52                   	push   edx
c0015379:	ff d0                	call   eax
c001537b:	83 c4 10             	add    esp,0x10
c001537e:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015382:	74 73                	je     c00153f7 <setupInterruptController()+0x13e>
c0015384:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015387:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538a:	8b 00                	mov    eax,DWORD PTR [eax]
c001538c:	83 c0 0c             	add    eax,0xc
c001538f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015391:	6a 00                	push   0x0
c0015393:	6a 00                	push   0x0
c0015395:	6a 00                	push   0x0
c0015397:	52                   	push   edx
c0015398:	ff d0                	call   eax
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153a1:	74 15                	je     c00153b8 <setupInterruptController()+0xff>
c00153a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a8:	83 c0 04             	add    eax,0x4
c00153ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ad:	83 ec 0c             	sub    esp,0xc
c00153b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b3:	ff d0                	call   eax
c00153b5:	83 c4 10             	add    esp,0x10
c00153b8:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00153bf:	83 ec 0c             	sub    esp,0xc
c00153c2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153c5:	e8 4e a2 ff ff       	call   c000f618 <malloc>
c00153ca:	83 c4 10             	add    esp,0x10
c00153cd:	89 c3                	mov    ebx,eax
c00153cf:	83 ec 0c             	sub    esp,0xc
c00153d2:	53                   	push   ebx
c00153d3:	e8 ea fc 00 00       	call   c00250c2 <APIC::APIC()>
c00153d8:	83 c4 10             	add    esp,0x10
c00153db:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00153de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e6:	83 c0 08             	add    eax,0x8
c00153e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153eb:	6a 00                	push   0x0
c00153ed:	6a 00                	push   0x0
c00153ef:	6a 00                	push   0x0
c00153f1:	52                   	push   edx
c00153f2:	ff d0                	call   eax
c00153f4:	83 c4 10             	add    esp,0x10
c00153f7:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00153fc:	83 ec 08             	sub    esp,0x8
c00153ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015402:	50                   	push   eax
c0015403:	e8 06 e9 ff ff       	call   c0013d0e <Device::addChild(Device*)>
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015410:	83 c0 24             	add    eax,0x24
c0015413:	8b 00                	mov    eax,DWORD PTR [eax]
c0015415:	6a 00                	push   0x0
c0015417:	68 6c 4c 01 c0       	push   0xc0014c6c
c001541c:	6a 00                	push   0x0
c001541e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015421:	ff d0                	call   eax
c0015423:	83 c4 10             	add    esp,0x10
c0015426:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015429:	8b 00                	mov    eax,DWORD PTR [eax]
c001542b:	83 c0 24             	add    eax,0x24
c001542e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015430:	6a 00                	push   0x0
c0015432:	68 6c 4c 01 c0       	push   0xc0014c6c
c0015437:	6a 01                	push   0x1
c0015439:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543c:	ff d0                	call   eax
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015444:	8b 00                	mov    eax,DWORD PTR [eax]
c0015446:	83 c0 24             	add    eax,0x24
c0015449:	8b 00                	mov    eax,DWORD PTR [eax]
c001544b:	6a 00                	push   0x0
c001544d:	68 bb 45 01 c0       	push   0xc00145bb
c0015452:	6a 02                	push   0x2
c0015454:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015457:	ff d0                	call   eax
c0015459:	83 c4 10             	add    esp,0x10
c001545c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015461:	83 c0 24             	add    eax,0x24
c0015464:	8b 00                	mov    eax,DWORD PTR [eax]
c0015466:	6a 00                	push   0x0
c0015468:	68 6c 4c 01 c0       	push   0xc0014c6c
c001546d:	6a 03                	push   0x3
c001546f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015472:	ff d0                	call   eax
c0015474:	83 c4 10             	add    esp,0x10
c0015477:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547a:	8b 00                	mov    eax,DWORD PTR [eax]
c001547c:	83 c0 24             	add    eax,0x24
c001547f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015481:	6a 00                	push   0x0
c0015483:	68 6c 4c 01 c0       	push   0xc0014c6c
c0015488:	6a 04                	push   0x4
c001548a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001548d:	ff d0                	call   eax
c001548f:	83 c4 10             	add    esp,0x10
c0015492:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015495:	8b 00                	mov    eax,DWORD PTR [eax]
c0015497:	83 c0 24             	add    eax,0x24
c001549a:	8b 00                	mov    eax,DWORD PTR [eax]
c001549c:	6a 00                	push   0x0
c001549e:	68 6c 4c 01 c0       	push   0xc0014c6c
c00154a3:	6a 05                	push   0x5
c00154a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a8:	ff d0                	call   eax
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b2:	83 c0 24             	add    eax,0x24
c00154b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b7:	6a 00                	push   0x0
c00154b9:	68 8b 4c 01 c0       	push   0xc0014c8b
c00154be:	6a 06                	push   0x6
c00154c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c3:	ff d0                	call   eax
c00154c5:	83 c4 10             	add    esp,0x10
c00154c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cd:	83 c0 24             	add    eax,0x24
c00154d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d2:	6a 00                	push   0x0
c00154d4:	68 ed 4b 01 c0       	push   0xc0014bed
c00154d9:	6a 07                	push   0x7
c00154db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154de:	ff d0                	call   eax
c00154e0:	83 c4 10             	add    esp,0x10
c00154e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e8:	83 c0 24             	add    eax,0x24
c00154eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ed:	6a 00                	push   0x0
c00154ef:	68 d6 43 01 c0       	push   0xc00143d6
c00154f4:	6a 08                	push   0x8
c00154f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f9:	ff d0                	call   eax
c00154fb:	83 c4 10             	add    esp,0x10
c00154fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015501:	8b 00                	mov    eax,DWORD PTR [eax]
c0015503:	83 c0 24             	add    eax,0x24
c0015506:	8b 00                	mov    eax,DWORD PTR [eax]
c0015508:	6a 00                	push   0x0
c001550a:	68 6c 4c 01 c0       	push   0xc0014c6c
c001550f:	6a 09                	push   0x9
c0015511:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015514:	ff d0                	call   eax
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551c:	8b 00                	mov    eax,DWORD PTR [eax]
c001551e:	83 c0 24             	add    eax,0x24
c0015521:	8b 00                	mov    eax,DWORD PTR [eax]
c0015523:	6a 00                	push   0x0
c0015525:	68 6c 4c 01 c0       	push   0xc0014c6c
c001552a:	6a 0a                	push   0xa
c001552c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001552f:	ff d0                	call   eax
c0015531:	83 c4 10             	add    esp,0x10
c0015534:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015537:	8b 00                	mov    eax,DWORD PTR [eax]
c0015539:	83 c0 24             	add    eax,0x24
c001553c:	8b 00                	mov    eax,DWORD PTR [eax]
c001553e:	6a 00                	push   0x0
c0015540:	68 6c 4c 01 c0       	push   0xc0014c6c
c0015545:	6a 0b                	push   0xb
c0015547:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001554a:	ff d0                	call   eax
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015552:	8b 00                	mov    eax,DWORD PTR [eax]
c0015554:	83 c0 24             	add    eax,0x24
c0015557:	8b 00                	mov    eax,DWORD PTR [eax]
c0015559:	6a 00                	push   0x0
c001555b:	68 6c 4c 01 c0       	push   0xc0014c6c
c0015560:	6a 0c                	push   0xc
c0015562:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015565:	ff d0                	call   eax
c0015567:	83 c4 10             	add    esp,0x10
c001556a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001556d:	8b 00                	mov    eax,DWORD PTR [eax]
c001556f:	83 c0 24             	add    eax,0x24
c0015572:	8b 00                	mov    eax,DWORD PTR [eax]
c0015574:	6a 00                	push   0x0
c0015576:	68 1c 4c 01 c0       	push   0xc0014c1c
c001557b:	6a 0d                	push   0xd
c001557d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015580:	ff d0                	call   eax
c0015582:	83 c4 10             	add    esp,0x10
c0015585:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015588:	8b 00                	mov    eax,DWORD PTR [eax]
c001558a:	83 c0 24             	add    eax,0x24
c001558d:	8b 00                	mov    eax,DWORD PTR [eax]
c001558f:	6a 00                	push   0x0
c0015591:	68 55 4c 01 c0       	push   0xc0014c55
c0015596:	6a 0e                	push   0xe
c0015598:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001559b:	ff d0                	call   eax
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a5:	83 c0 24             	add    eax,0x24
c00155a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155aa:	6a 00                	push   0x0
c00155ac:	68 6c 4c 01 c0       	push   0xc0014c6c
c00155b1:	6a 0f                	push   0xf
c00155b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155b6:	ff d0                	call   eax
c00155b8:	83 c4 10             	add    esp,0x10
c00155bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155be:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c0:	83 c0 24             	add    eax,0x24
c00155c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c5:	6a 00                	push   0x0
c00155c7:	68 6c 4c 01 c0       	push   0xc0014c6c
c00155cc:	6a 10                	push   0x10
c00155ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d1:	ff d0                	call   eax
c00155d3:	83 c4 10             	add    esp,0x10
c00155d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155db:	83 c0 24             	add    eax,0x24
c00155de:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e0:	6a 00                	push   0x0
c00155e2:	68 6c 4c 01 c0       	push   0xc0014c6c
c00155e7:	6a 11                	push   0x11
c00155e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ec:	ff d0                	call   eax
c00155ee:	83 c4 10             	add    esp,0x10
c00155f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f6:	83 c0 24             	add    eax,0x24
c00155f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fb:	6a 00                	push   0x0
c00155fd:	68 6c 4c 01 c0       	push   0xc0014c6c
c0015602:	6a 12                	push   0x12
c0015604:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015607:	ff d0                	call   eax
c0015609:	83 c4 10             	add    esp,0x10
c001560c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015611:	83 c0 24             	add    eax,0x24
c0015614:	8b 00                	mov    eax,DWORD PTR [eax]
c0015616:	6a 00                	push   0x0
c0015618:	68 6c 4c 01 c0       	push   0xc0014c6c
c001561d:	6a 13                	push   0x13
c001561f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015622:	ff d0                	call   eax
c0015624:	83 c4 10             	add    esp,0x10
c0015627:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001562a:	8b 00                	mov    eax,DWORD PTR [eax]
c001562c:	83 c0 24             	add    eax,0x24
c001562f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015631:	6a 00                	push   0x0
c0015633:	68 6c 4c 01 c0       	push   0xc0014c6c
c0015638:	6a 14                	push   0x14
c001563a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001563d:	ff d0                	call   eax
c001563f:	83 c4 10             	add    esp,0x10
c0015642:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015645:	8b 00                	mov    eax,DWORD PTR [eax]
c0015647:	83 c0 24             	add    eax,0x24
c001564a:	8b 00                	mov    eax,DWORD PTR [eax]
c001564c:	6a 00                	push   0x0
c001564e:	68 6c 4c 01 c0       	push   0xc0014c6c
c0015653:	6a 1e                	push   0x1e
c0015655:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015658:	ff d0                	call   eax
c001565a:	83 c4 10             	add    esp,0x10
c001565d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015660:	8b 00                	mov    eax,DWORD PTR [eax]
c0015662:	83 c0 24             	add    eax,0x24
c0015665:	8b 00                	mov    eax,DWORD PTR [eax]
c0015667:	6a 00                	push   0x0
c0015669:	68 af be 01 c0       	push   0xc001beaf
c001566e:	6a 60                	push   0x60
c0015670:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015673:	ff d0                	call   eax
c0015675:	83 c4 10             	add    esp,0x10
c0015678:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001567b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001567e:	c9                   	leave  
c001567f:	c3                   	ret    

c0015680 <InterruptController::convertLegacyIRQNumber(int)>:
c0015680:	55                   	push   ebp
c0015681:	89 e5                	mov    ebp,esp
c0015683:	83 ec 08             	sub    esp,0x8
c0015686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015689:	83 ec 0c             	sub    esp,0xc
c001568c:	50                   	push   eax
c001568d:	e8 68 e9 ff ff       	call   c0013ffa <Device::getName()>
c0015692:	83 c4 10             	add    esp,0x10
c0015695:	8a 00                	mov    al,BYTE PTR [eax]
c0015697:	3c 41                	cmp    al,0x41
c0015699:	0f 94 c0             	sete   al
c001569c:	84 c0                	test   al,al
c001569e:	74 28                	je     c00156c8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156a0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00156a4:	7f 12                	jg     c00156b8 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00156a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156a9:	05 20 cd 02 c0       	add    eax,0xc002cd20
c00156ae:	8a 00                	mov    al,BYTE PTR [eax]
c00156b0:	0f b6 c0             	movzx  eax,al
c00156b3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00156b6:	eb 10                	jmp    c00156c8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156b8:	83 ec 0c             	sub    esp,0xc
c00156bb:	68 c0 a4 02 c0       	push   0xc002a4c0
c00156c0:	e8 96 47 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c00156c5:	83 c4 10             	add    esp,0x10
c00156c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156cb:	c9                   	leave  
c00156cc:	c3                   	ret    
c00156cd:	90                   	nop

c00156ce <startGUI(void*)>:
c00156ce:	55                   	push   ebp
c00156cf:	89 e5                	mov    ebp,esp
c00156d1:	53                   	push   ebx
c00156d2:	83 ec 04             	sub    esp,0x4
c00156d5:	e8 de 7d 00 00       	call   c001d4b8 <unlockScheduler()>
c00156da:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c00156e0:	83 ec 08             	sub    esp,0x8
c00156e3:	6a 01                	push   0x1
c00156e5:	68 10 a8 02 c0       	push   0xc002a810
c00156ea:	e8 54 77 00 00       	call   c001ce43 <Thr::loadDLL(char const*, bool)>
c00156ef:	83 c4 10             	add    esp,0x10
c00156f2:	83 ec 08             	sub    esp,0x8
c00156f5:	53                   	push   ebx
c00156f6:	50                   	push   eax
c00156f7:	e8 56 79 00 00       	call   c001d052 <Thr::executeDLL(unsigned long, void*)>
c00156fc:	83 c4 10             	add    esp,0x10
c00156ff:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c0015705:	83 ec 08             	sub    esp,0x8
c0015708:	6a 01                	push   0x1
c001570a:	68 2a a8 02 c0       	push   0xc002a82a
c001570f:	e8 2f 77 00 00       	call   c001ce43 <Thr::loadDLL(char const*, bool)>
c0015714:	83 c4 10             	add    esp,0x10
c0015717:	83 ec 08             	sub    esp,0x8
c001571a:	53                   	push   ebx
c001571b:	50                   	push   eax
c001571c:	e8 31 79 00 00       	call   c001d052 <Thr::executeDLL(unsigned long, void*)>
c0015721:	83 c4 10             	add    esp,0x10
c0015724:	90                   	nop
c0015725:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015728:	c9                   	leave  
c0015729:	c3                   	ret    

c001572a <startGUIVESA(void*)>:
c001572a:	55                   	push   ebp
c001572b:	89 e5                	mov    ebp,esp
c001572d:	53                   	push   ebx
c001572e:	83 ec 04             	sub    esp,0x4
c0015731:	e8 82 7d 00 00       	call   c001d4b8 <unlockScheduler()>
c0015736:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c001573c:	83 ec 08             	sub    esp,0x8
c001573f:	6a 01                	push   0x1
c0015741:	68 44 a8 02 c0       	push   0xc002a844
c0015746:	e8 f8 76 00 00       	call   c001ce43 <Thr::loadDLL(char const*, bool)>
c001574b:	83 c4 10             	add    esp,0x10
c001574e:	83 ec 08             	sub    esp,0x8
c0015751:	53                   	push   ebx
c0015752:	50                   	push   eax
c0015753:	e8 fa 78 00 00       	call   c001d052 <Thr::executeDLL(unsigned long, void*)>
c0015758:	83 c4 10             	add    esp,0x10
c001575b:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c0015761:	83 ec 08             	sub    esp,0x8
c0015764:	6a 01                	push   0x1
c0015766:	68 2a a8 02 c0       	push   0xc002a82a
c001576b:	e8 d3 76 00 00       	call   c001ce43 <Thr::loadDLL(char const*, bool)>
c0015770:	83 c4 10             	add    esp,0x10
c0015773:	83 ec 08             	sub    esp,0x8
c0015776:	53                   	push   ebx
c0015777:	50                   	push   eax
c0015778:	e8 d5 78 00 00       	call   c001d052 <Thr::executeDLL(unsigned long, void*)>
c001577d:	83 c4 10             	add    esp,0x10
c0015780:	90                   	nop
c0015781:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015784:	c9                   	leave  
c0015785:	c3                   	ret    

c0015786 <sendKeyToTerminal(unsigned char)>:
c0015786:	55                   	push   ebp
c0015787:	89 e5                	mov    ebp,esp
c0015789:	83 ec 28             	sub    esp,0x28
c001578c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015792:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c0015797:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001579b:	83 ec 08             	sub    esp,0x8
c001579e:	52                   	push   edx
c001579f:	50                   	push   eax
c00157a0:	e8 21 b9 ff ff       	call   c00110c6 <VgaText::receiveKey(unsigned char)>
c00157a5:	83 c4 10             	add    esp,0x10
c00157a8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00157ac:	75 41                	jne    c00157ef <sendKeyToTerminal(unsigned char)+0x69>
c00157ae:	e8 2a 7d 00 00       	call   c001d4dd <lockStuff()>
c00157b3:	a1 80 dc 02 c0       	mov    eax,ds:0xc002dc80
c00157b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00157bb:	c7 05 80 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc80,0x0
c00157c5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00157c9:	74 1f                	je     c00157ea <sendKeyToTerminal(unsigned char)+0x64>
c00157cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00157d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00157da:	83 ec 0c             	sub    esp,0xc
c00157dd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00157e0:	e8 e9 82 00 00       	call   c001dace <unblockTask(ThreadControlBlock*)>
c00157e5:	83 c4 10             	add    esp,0x10
c00157e8:	eb db                	jmp    c00157c5 <sendKeyToTerminal(unsigned char)+0x3f>
c00157ea:	e8 88 80 00 00       	call   c001d877 <unlockStuff()>
c00157ef:	90                   	nop
c00157f0:	c9                   	leave  
c00157f1:	c3                   	ret    

c00157f2 <sendKeyboardToken(KeyboardToken)>:
c00157f2:	55                   	push   ebp
c00157f3:	89 e5                	mov    ebp,esp
c00157f5:	83 ec 18             	sub    esp,0x18
c00157f8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00157fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fe:	0f b7 c0             	movzx  eax,ax
c0015801:	83 f2 01             	xor    edx,0x1
c0015804:	88 90 a0 dc 02 c0    	mov    BYTE PTR [eax-0x3ffd2360],dl
c001580a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580d:	66 3d 03 02          	cmp    ax,0x203
c0015811:	75 07                	jne    c001581a <sendKeyboardToken(KeyboardToken)+0x28>
c0015813:	a0 a0 dd 02 c0       	mov    al,ds:0xc002dda0
c0015818:	84 c0                	test   al,al
c001581a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001581e:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015821:	a0 a8 e0 02 c0       	mov    al,ds:0xc002e0a8
c0015826:	38 c2                	cmp    dl,al
c0015828:	74 1c                	je     c0015846 <sendKeyboardToken(KeyboardToken)+0x54>
c001582a:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001582d:	a2 a8 e0 02 c0       	mov    ds:0xc002e0a8,al
c0015832:	a0 a8 e0 02 c0       	mov    al,ds:0xc002e0a8
c0015837:	0f b6 c0             	movzx  eax,al
c001583a:	83 ec 0c             	sub    esp,0xc
c001583d:	50                   	push   eax
c001583e:	e8 e3 aa ff ff       	call   c0010326 <setTerminalScrollLock(bool)>
c0015843:	83 c4 10             	add    esp,0x10
c0015846:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015849:	84 c0                	test   al,al
c001584b:	0f 84 ae 00 00 00    	je     c00158ff <sendKeyboardToken(KeyboardToken)+0x10d>
c0015851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015854:	66 3d 10 03          	cmp    ax,0x310
c0015858:	75 06                	jne    c0015860 <sendKeyboardToken(KeyboardToken)+0x6e>
c001585a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015863:	66 3d 11 03          	cmp    ax,0x311
c0015867:	75 06                	jne    c001586f <sendKeyboardToken(KeyboardToken)+0x7d>
c0015869:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001586f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015872:	66 3d 12 03          	cmp    ax,0x312
c0015876:	75 06                	jne    c001587e <sendKeyboardToken(KeyboardToken)+0x8c>
c0015878:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001587e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015881:	66 3d 13 03          	cmp    ax,0x313
c0015885:	75 06                	jne    c001588d <sendKeyboardToken(KeyboardToken)+0x9b>
c0015887:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001588d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015890:	66 3d 14 03          	cmp    ax,0x314
c0015894:	75 06                	jne    c001589c <sendKeyboardToken(KeyboardToken)+0xaa>
c0015896:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001589c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589f:	66 3d 15 03          	cmp    ax,0x315
c00158a3:	75 06                	jne    c00158ab <sendKeyboardToken(KeyboardToken)+0xb9>
c00158a5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ae:	66 3d 16 03          	cmp    ax,0x316
c00158b2:	75 06                	jne    c00158ba <sendKeyboardToken(KeyboardToken)+0xc8>
c00158b4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00158ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bd:	66 3d 17 03          	cmp    ax,0x317
c00158c1:	75 06                	jne    c00158c9 <sendKeyboardToken(KeyboardToken)+0xd7>
c00158c3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00158c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cc:	66 3d 18 03          	cmp    ax,0x318
c00158d0:	75 06                	jne    c00158d8 <sendKeyboardToken(KeyboardToken)+0xe6>
c00158d2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00158d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158db:	66 3d 19 03          	cmp    ax,0x319
c00158df:	75 06                	jne    c00158e7 <sendKeyboardToken(KeyboardToken)+0xf5>
c00158e1:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00158e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ea:	66 3d 1a 03          	cmp    ax,0x31a
c00158ee:	0f 85 c9 00 00 00    	jne    c00159bd <sendKeyboardToken(KeyboardToken)+0x1cb>
c00158f4:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00158fa:	e9 be 00 00 00       	jmp    c00159bd <sendKeyboardToken(KeyboardToken)+0x1cb>
c00158ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015902:	66 3d 10 03          	cmp    ax,0x310
c0015906:	75 0a                	jne    c0015912 <sendKeyboardToken(KeyboardToken)+0x120>
c0015908:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001590e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015915:	66 3d 11 03          	cmp    ax,0x311
c0015919:	75 0a                	jne    c0015925 <sendKeyboardToken(KeyboardToken)+0x133>
c001591b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015921:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015928:	66 3d 12 03          	cmp    ax,0x312
c001592c:	75 0a                	jne    c0015938 <sendKeyboardToken(KeyboardToken)+0x146>
c001592e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015934:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593b:	66 3d 13 03          	cmp    ax,0x313
c001593f:	75 0a                	jne    c001594b <sendKeyboardToken(KeyboardToken)+0x159>
c0015941:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015947:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001594b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594e:	66 3d 14 03          	cmp    ax,0x314
c0015952:	75 0a                	jne    c001595e <sendKeyboardToken(KeyboardToken)+0x16c>
c0015954:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001595a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001595e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015961:	66 3d 15 03          	cmp    ax,0x315
c0015965:	75 0a                	jne    c0015971 <sendKeyboardToken(KeyboardToken)+0x17f>
c0015967:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001596d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015974:	66 3d 16 03          	cmp    ax,0x316
c0015978:	75 0a                	jne    c0015984 <sendKeyboardToken(KeyboardToken)+0x192>
c001597a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015980:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015987:	66 3d 17 03          	cmp    ax,0x317
c001598b:	75 0a                	jne    c0015997 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001598d:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015993:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599a:	66 3d 18 03          	cmp    ax,0x318
c001599e:	75 0a                	jne    c00159aa <sendKeyboardToken(KeyboardToken)+0x1b8>
c00159a0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00159a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ad:	66 3d 19 03          	cmp    ax,0x319
c00159b1:	75 0a                	jne    c00159bd <sendKeyboardToken(KeyboardToken)+0x1cb>
c00159b3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00159b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c0:	66 3d 00 02          	cmp    ax,0x200
c00159c4:	75 2c                	jne    c00159f2 <sendKeyboardToken(KeyboardToken)+0x200>
c00159c6:	a0 a0 e0 02 c0       	mov    al,ds:0xc002e0a0
c00159cb:	83 f0 01             	xor    eax,0x1
c00159ce:	84 c0                	test   al,al
c00159d0:	74 20                	je     c00159f2 <sendKeyboardToken(KeyboardToken)+0x200>
c00159d2:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00159d7:	6a 01                	push   0x1
c00159d9:	6a 00                	push   0x0
c00159db:	68 ce 56 01 c0       	push   0xc00156ce
c00159e0:	50                   	push   eax
c00159e1:	e8 02 7c 00 00       	call   c001d5e8 <Process::createThread(void (*)(void*), void*, int)>
c00159e6:	83 c4 10             	add    esp,0x10
c00159e9:	c6 05 a0 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0a0,0x1
c00159f0:	eb 33                	jmp    c0015a25 <sendKeyboardToken(KeyboardToken)+0x233>
c00159f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f5:	66 3d 01 02          	cmp    ax,0x201
c00159f9:	75 2a                	jne    c0015a25 <sendKeyboardToken(KeyboardToken)+0x233>
c00159fb:	a0 a0 e0 02 c0       	mov    al,ds:0xc002e0a0
c0015a00:	83 f0 01             	xor    eax,0x1
c0015a03:	84 c0                	test   al,al
c0015a05:	74 1e                	je     c0015a25 <sendKeyboardToken(KeyboardToken)+0x233>
c0015a07:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0015a0c:	6a 01                	push   0x1
c0015a0e:	6a 00                	push   0x0
c0015a10:	68 2a 57 01 c0       	push   0xc001572a
c0015a15:	50                   	push   eax
c0015a16:	e8 cd 7b 00 00       	call   c001d5e8 <Process::createThread(void (*)(void*), void*, int)>
c0015a1b:	83 c4 10             	add    esp,0x10
c0015a1e:	c6 05 a0 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0a0,0x1
c0015a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a28:	66 3d 1d 03          	cmp    ax,0x31d
c0015a2c:	75 06                	jne    c0015a34 <sendKeyboardToken(KeyboardToken)+0x242>
c0015a2e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a37:	66 3d 1c 03          	cmp    ax,0x31c
c0015a3b:	75 06                	jne    c0015a43 <sendKeyboardToken(KeyboardToken)+0x251>
c0015a3d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a46:	66 3d 1b 03          	cmp    ax,0x31b
c0015a4a:	75 06                	jne    c0015a52 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a4c:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a55:	66 3d 1e 03          	cmp    ax,0x31e
c0015a59:	75 06                	jne    c0015a61 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015a5b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a64:	66 3d 1f 03          	cmp    ax,0x31f
c0015a68:	75 06                	jne    c0015a70 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015a6a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a73:	66 3d 1a 03          	cmp    ax,0x31a
c0015a77:	75 06                	jne    c0015a7f <sendKeyboardToken(KeyboardToken)+0x28d>
c0015a79:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015a7f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015a83:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a86:	83 f0 01             	xor    eax,0x1
c0015a89:	84 c0                	test   al,al
c0015a8b:	74 77                	je     c0015b04 <sendKeyboardToken(KeyboardToken)+0x312>
c0015a8d:	a0 a1 dd 02 c0       	mov    al,ds:0xc002dda1
c0015a92:	84 c0                	test   al,al
c0015a94:	74 41                	je     c0015ad7 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015a96:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a9a:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015a9e:	74 2b                	je     c0015acb <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015aa0:	8b 15 a4 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0a4
c0015aa6:	89 d0                	mov    eax,edx
c0015aa8:	c1 e0 02             	shl    eax,0x2
c0015aab:	01 d0                	add    eax,edx
c0015aad:	01 c0                	add    eax,eax
c0015aaf:	a3 a4 e0 02 c0       	mov    ds:0xc002e0a4,eax
c0015ab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab7:	0f b7 c0             	movzx  eax,ax
c0015aba:	8d 50 d0             	lea    edx,[eax-0x30]
c0015abd:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015ac2:	01 d0                	add    eax,edx
c0015ac4:	a3 a4 e0 02 c0       	mov    ds:0xc002e0a4,eax
c0015ac9:	eb 6d                	jmp    c0015b38 <sendKeyboardToken(KeyboardToken)+0x346>
c0015acb:	c7 05 a4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0a4,0x0
c0015ad5:	eb 61                	jmp    c0015b38 <sendKeyboardToken(KeyboardToken)+0x346>
c0015ad7:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015adc:	85 c0                	test   eax,eax
c0015ade:	74 18                	je     c0015af8 <sendKeyboardToken(KeyboardToken)+0x306>
c0015ae0:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015ae5:	0f b6 c0             	movzx  eax,al
c0015ae8:	83 ec 0c             	sub    esp,0xc
c0015aeb:	50                   	push   eax
c0015aec:	e8 95 fc ff ff       	call   c0015786 <sendKeyToTerminal(unsigned char)>
c0015af1:	83 c4 10             	add    esp,0x10
c0015af4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015af8:	c7 05 a4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0a4,0x0
c0015b02:	eb 34                	jmp    c0015b38 <sendKeyboardToken(KeyboardToken)+0x346>
c0015b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b07:	66 3d 01 01          	cmp    ax,0x101
c0015b0b:	75 2b                	jne    c0015b38 <sendKeyboardToken(KeyboardToken)+0x346>
c0015b0d:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015b12:	85 c0                	test   eax,eax
c0015b14:	74 18                	je     c0015b2e <sendKeyboardToken(KeyboardToken)+0x33c>
c0015b16:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015b1b:	0f b6 c0             	movzx  eax,al
c0015b1e:	83 ec 0c             	sub    esp,0xc
c0015b21:	50                   	push   eax
c0015b22:	e8 5f fc ff ff       	call   c0015786 <sendKeyToTerminal(unsigned char)>
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b2e:	c7 05 a4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0a4,0x0
c0015b38:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b3b:	83 f0 01             	xor    eax,0x1
c0015b3e:	84 c0                	test   al,al
c0015b40:	74 4c                	je     c0015b8e <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b42:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b45:	83 f0 01             	xor    eax,0x1
c0015b48:	84 c0                	test   al,al
c0015b4a:	74 42                	je     c0015b8e <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b4c:	a0 a0 dd 02 c0       	mov    al,ds:0xc002dda0
c0015b51:	83 f0 01             	xor    eax,0x1
c0015b54:	84 c0                	test   al,al
c0015b56:	74 36                	je     c0015b8e <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5b:	66 83 f8 1f          	cmp    ax,0x1f
c0015b5f:	76 09                	jbe    c0015b6a <sendKeyboardToken(KeyboardToken)+0x378>
c0015b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b64:	66 83 f8 7e          	cmp    ax,0x7e
c0015b68:	76 12                	jbe    c0015b7c <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6d:	66 83 f8 0a          	cmp    ax,0xa
c0015b71:	74 09                	je     c0015b7c <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b76:	66 83 f8 08          	cmp    ax,0x8
c0015b7a:	75 12                	jne    c0015b8e <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7f:	0f b6 c0             	movzx  eax,al
c0015b82:	83 ec 0c             	sub    esp,0xc
c0015b85:	50                   	push   eax
c0015b86:	e8 fb fb ff ff       	call   c0015786 <sendKeyToTerminal(unsigned char)>
c0015b8b:	83 c4 10             	add    esp,0x10
c0015b8e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b91:	83 f0 01             	xor    eax,0x1
c0015b94:	84 c0                	test   al,al
c0015b96:	74 4f                	je     c0015be7 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b98:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b9b:	83 f0 01             	xor    eax,0x1
c0015b9e:	84 c0                	test   al,al
c0015ba0:	74 45                	je     c0015be7 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ba2:	a0 a0 dd 02 c0       	mov    al,ds:0xc002dda0
c0015ba7:	84 c0                	test   al,al
c0015ba9:	74 3c                	je     c0015be7 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bae:	66 83 f8 3f          	cmp    ax,0x3f
c0015bb2:	76 33                	jbe    c0015be7 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb7:	66 83 f8 7f          	cmp    ax,0x7f
c0015bbb:	77 2a                	ja     c0015be7 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc0:	88 c2                	mov    dl,al
c0015bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc5:	66 83 f8 5f          	cmp    ax,0x5f
c0015bc9:	76 04                	jbe    c0015bcf <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015bcb:	b0 20                	mov    al,0x20
c0015bcd:	eb 02                	jmp    c0015bd1 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015bcf:	b0 00                	mov    al,0x0
c0015bd1:	29 c2                	sub    edx,eax
c0015bd3:	88 d0                	mov    al,dl
c0015bd5:	83 e8 40             	sub    eax,0x40
c0015bd8:	0f b6 c0             	movzx  eax,al
c0015bdb:	83 ec 0c             	sub    esp,0xc
c0015bde:	50                   	push   eax
c0015bdf:	e8 a2 fb ff ff       	call   c0015786 <sendKeyToTerminal(unsigned char)>
c0015be4:	83 c4 10             	add    esp,0x10
c0015be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bea:	66 3d 00 03          	cmp    ax,0x300
c0015bee:	75 0f                	jne    c0015bff <sendKeyboardToken(KeyboardToken)+0x40d>
c0015bf0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bf3:	83 f0 01             	xor    eax,0x1
c0015bf6:	84 c0                	test   al,al
c0015bf8:	74 05                	je     c0015bff <sendKeyboardToken(KeyboardToken)+0x40d>
c0015bfa:	e8 5c af ff ff       	call   c0010b5b <doTerminalCycle()>
c0015bff:	90                   	nop
c0015c00:	c9                   	leave  
c0015c01:	c3                   	ret    

c0015c02 <clearInternalKeybuffer(VgaText*)>:
c0015c02:	55                   	push   ebp
c0015c03:	89 e5                	mov    ebp,esp
c0015c05:	83 ec 08             	sub    esp,0x8
c0015c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0b:	05 34 11 00 00       	add    eax,0x1134
c0015c10:	83 ec 0c             	sub    esp,0xc
c0015c13:	50                   	push   eax
c0015c14:	e8 bc aa fe ff       	call   c00006d5 <strlen>
c0015c19:	83 c4 10             	add    esp,0x10
c0015c1c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c1f:	81 c2 34 11 00 00    	add    edx,0x1134
c0015c25:	83 ec 04             	sub    esp,0x4
c0015c28:	50                   	push   eax
c0015c29:	6a 00                	push   0x0
c0015c2b:	52                   	push   edx
c0015c2c:	e8 87 aa fe ff       	call   c00006b8 <memset>
c0015c31:	83 c4 10             	add    esp,0x10
c0015c34:	90                   	nop
c0015c35:	c9                   	leave  
c0015c36:	c3                   	ret    

c0015c37 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015c37:	55                   	push   ebp
c0015c38:	89 e5                	mov    ebp,esp
c0015c3a:	83 ec 18             	sub    esp,0x18
c0015c3d:	fb                   	sti    
c0015c3e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015c45:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c49:	0f 84 8a 00 00 00    	je     c0015cd9 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c52:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c58:	84 c0                	test   al,al
c0015c5a:	75 11                	jne    c0015c6d <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015c5c:	e8 55 78 00 00       	call   c001d4b6 <lockScheduler()>
c0015c61:	e8 8c 7b 00 00       	call   c001d7f2 <schedule()>
c0015c66:	e8 4d 78 00 00       	call   c001d4b8 <unlockScheduler()>
c0015c6b:	eb e2                	jmp    c0015c4f <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015c6d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c70:	8d 50 01             	lea    edx,[eax+0x1]
c0015c73:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c76:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c79:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015c7f:	88 10                	mov    BYTE PTR [eax],dl
c0015c81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c84:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c8a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c90:	05 34 11 00 00       	add    eax,0x1134
c0015c95:	83 ec 0c             	sub    esp,0xc
c0015c98:	50                   	push   eax
c0015c99:	e8 37 aa fe ff       	call   c00006d5 <strlen>
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ca4:	81 c2 34 11 00 00    	add    edx,0x1134
c0015caa:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015cad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cb0:	81 c2 34 11 00 00    	add    edx,0x1134
c0015cb6:	83 ec 04             	sub    esp,0x4
c0015cb9:	50                   	push   eax
c0015cba:	51                   	push   ecx
c0015cbb:	52                   	push   edx
c0015cbc:	e8 a7 a9 fe ff       	call   c0000668 <memmove>
c0015cc1:	83 c4 10             	add    esp,0x10
c0015cc4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015cc7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015cca:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015cce:	0f 85 71 ff ff ff    	jne    c0015c45 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015cd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd7:	eb 03                	jmp    c0015cdc <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015cd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cdc:	c9                   	leave  
c0015cdd:	c3                   	ret    

c0015cde <Keyboard::Keyboard(char const*)>:
c0015cde:	83 ec 0c             	sub    esp,0xc
c0015ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce5:	83 ec 08             	sub    esp,0x8
c0015ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cec:	50                   	push   eax
c0015ced:	e8 0c e2 ff ff       	call   c0013efe <Device::Device(char const*)>
c0015cf2:	83 c4 10             	add    esp,0x10
c0015cf5:	ba 68 a8 02 c0       	mov    edx,0xc002a868
c0015cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cfe:	89 10                	mov    DWORD PTR [eax],edx
c0015d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d04:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015d0e:	c6 05 84 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc84,0x1
c0015d15:	90                   	nop
c0015d16:	83 c4 0c             	add    esp,0xc
c0015d19:	c3                   	ret    

c0015d1a <Keyboard::~Keyboard()>:
c0015d1a:	83 ec 0c             	sub    esp,0xc
c0015d1d:	ba 68 a8 02 c0       	mov    edx,0xc002a868
c0015d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d26:	89 10                	mov    DWORD PTR [eax],edx
c0015d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d2c:	83 ec 0c             	sub    esp,0xc
c0015d2f:	50                   	push   eax
c0015d30:	e8 ab de ff ff       	call   c0013be0 <Device::~Device()>
c0015d35:	83 c4 10             	add    esp,0x10
c0015d38:	90                   	nop
c0015d39:	83 c4 0c             	add    esp,0xc
c0015d3c:	c3                   	ret    
c0015d3d:	90                   	nop

c0015d3e <Keyboard::~Keyboard()>:
c0015d3e:	83 ec 0c             	sub    esp,0xc
c0015d41:	83 ec 0c             	sub    esp,0xc
c0015d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d48:	e8 cd ff ff ff       	call   c0015d1a <Keyboard::~Keyboard()>
c0015d4d:	83 c4 10             	add    esp,0x10
c0015d50:	83 ec 08             	sub    esp,0x8
c0015d53:	68 5c 01 00 00       	push   0x15c
c0015d58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d5c:	e8 a6 ca ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0015d61:	83 c4 10             	add    esp,0x10
c0015d64:	83 c4 0c             	add    esp,0xc
c0015d67:	c3                   	ret    

c0015d68 <LogicalDisk::close(int, int, void*)>:
c0015d68:	83 c8 ff             	or     eax,0xffffffff
c0015d6b:	c3                   	ret    

c0015d6c <LogicalDisk::~LogicalDisk()>:
c0015d6c:	83 ec 0c             	sub    esp,0xc
c0015d6f:	ba 18 a9 02 c0       	mov    edx,0xc002a918
c0015d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d78:	89 10                	mov    DWORD PTR [eax],edx
c0015d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7e:	83 ec 0c             	sub    esp,0xc
c0015d81:	50                   	push   eax
c0015d82:	e8 59 de ff ff       	call   c0013be0 <Device::~Device()>
c0015d87:	83 c4 10             	add    esp,0x10
c0015d8a:	90                   	nop
c0015d8b:	83 c4 0c             	add    esp,0xc
c0015d8e:	c3                   	ret    
c0015d8f:	90                   	nop

c0015d90 <LogicalDisk::~LogicalDisk()>:
c0015d90:	83 ec 0c             	sub    esp,0xc
c0015d93:	83 ec 0c             	sub    esp,0xc
c0015d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d9a:	e8 cd ff ff ff       	call   c0015d6c <LogicalDisk::~LogicalDisk()>
c0015d9f:	83 c4 10             	add    esp,0x10
c0015da2:	83 ec 08             	sub    esp,0x8
c0015da5:	68 74 01 00 00       	push   0x174
c0015daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dae:	e8 54 ca ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0015db3:	83 c4 10             	add    esp,0x10
c0015db6:	83 c4 0c             	add    esp,0xc
c0015db9:	c3                   	ret    

c0015dba <LogicalDisk::open(int, int, void*)>:
c0015dba:	83 ec 18             	sub    esp,0x18
c0015dbd:	68 94 a8 02 c0       	push   0xc002a894
c0015dc2:	e8 94 40 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0015dc7:	83 c8 ff             	or     eax,0xffffffff
c0015dca:	83 c4 1c             	add    esp,0x1c
c0015dcd:	c3                   	ret    

c0015dce <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015dce:	53                   	push   ebx
c0015dcf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015dd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015dd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ddb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015de1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015de7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015ded:	77 10                	ja     c0015dff <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015def:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015df5:	89 d3                	mov    ebx,edx
c0015df7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015dfd:	72 05                	jb     c0015e04 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015dff:	83 c8 ff             	or     eax,0xffffffff
c0015e02:	89 c2                	mov    edx,eax
c0015e04:	5b                   	pop    ebx
c0015e05:	c3                   	ret    

c0015e06 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015e06:	56                   	push   esi
c0015e07:	83 c8 ff             	or     eax,0xffffffff
c0015e0a:	53                   	push   ebx
c0015e0b:	89 c2                	mov    edx,eax
c0015e0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015e11:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015e15:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e19:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e1f:	77 27                	ja     c0015e48 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e21:	89 d8                	mov    eax,ebx
c0015e23:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015e29:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015e2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e34:	89 c2                	mov    edx,eax
c0015e36:	73 10                	jae    c0015e48 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e38:	89 c8                	mov    eax,ecx
c0015e3a:	89 da                	mov    edx,ebx
c0015e3c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015e42:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015e48:	5b                   	pop    ebx
c0015e49:	5e                   	pop    esi
c0015e4a:	c3                   	ret    
c0015e4b:	90                   	nop

c0015e4c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e4c:	83 ec 1c             	sub    esp,0x1c
c0015e4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e63:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e72:	83 ec 08             	sub    esp,0x8
c0015e75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e79:	50                   	push   eax
c0015e7a:	e8 7f e0 ff ff       	call   c0013efe <Device::Device(char const*)>
c0015e7f:	83 c4 10             	add    esp,0x10
c0015e82:	ba 18 a9 02 c0       	mov    edx,0xc002a918
c0015e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e8b:	89 10                	mov    DWORD PTR [eax],edx
c0015e8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e91:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e9c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ea7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015eb1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015eb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015eb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ebd:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015ec3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015ec9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015ecd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015ed0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ed4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015eda:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ee4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ee8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ef2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015efc:	90                   	nop
c0015efd:	83 c4 1c             	add    esp,0x1c
c0015f00:	c3                   	ret    
c0015f01:	90                   	nop

c0015f02 <LogicalDisk::assignDriveLetter()>:
c0015f02:	55                   	push   ebp
c0015f03:	57                   	push   edi
c0015f04:	56                   	push   esi
c0015f05:	53                   	push   ebx
c0015f06:	83 ec 14             	sub    esp,0x14
c0015f09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f0d:	8b 3d c0 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0c0
c0015f13:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015f19:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015f1d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015f23:	8b 3d c4 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0c4
c0015f29:	3c 01                	cmp    al,0x1
c0015f2b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015f2f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015f33:	19 c0                	sbb    eax,eax
c0015f35:	83 e0 02             	and    eax,0x2
c0015f38:	83 c0 41             	add    eax,0x41
c0015f3b:	0f be e8             	movsx  ebp,al
c0015f3e:	3c 43                	cmp    al,0x43
c0015f40:	75 10                	jne    c0015f52 <LogicalDisk::assignDriveLetter()+0x50>
c0015f42:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015f49:	75 5d                	jne    c0015fa8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f4b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f50:	75 56                	jne    c0015fa8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f52:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015f55:	ba 01 00 00 00       	mov    edx,0x1
c0015f5a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f5e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f62:	d3 e2                	shl    edx,cl
c0015f64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f68:	89 d7                	mov    edi,edx
c0015f6a:	89 d6                	mov    esi,edx
c0015f6c:	c1 ff 1f             	sar    edi,0x1f
c0015f6f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f73:	21 f9                	and    ecx,edi
c0015f75:	09 d1                	or     ecx,edx
c0015f77:	75 2f                	jne    c0015fa8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f79:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f7d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f81:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f87:	09 f2                	or     edx,esi
c0015f89:	89 15 c0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c0,edx
c0015f8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f93:	09 fa                	or     edx,edi
c0015f95:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f99:	89 15 c4 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c4,edx
c0015f9f:	89 1c bd e0 e0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1f20],ebx
c0015fa6:	eb 08                	jmp    c0015fb0 <LogicalDisk::assignDriveLetter()+0xae>
c0015fa8:	45                   	inc    ebp
c0015fa9:	40                   	inc    eax
c0015faa:	3c 5b                	cmp    al,0x5b
c0015fac:	75 90                	jne    c0015f3e <LogicalDisk::assignDriveLetter()+0x3c>
c0015fae:	31 c0                	xor    eax,eax
c0015fb0:	83 c4 14             	add    esp,0x14
c0015fb3:	5b                   	pop    ebx
c0015fb4:	5e                   	pop    esi
c0015fb5:	5f                   	pop    edi
c0015fb6:	5d                   	pop    ebp
c0015fb7:	c3                   	ret    

c0015fb8 <LogicalDisk::mount()>:
c0015fb8:	56                   	push   esi
c0015fb9:	53                   	push   ebx
c0015fba:	51                   	push   ecx
c0015fbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fbf:	8b 1d 48 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc48
c0015fc5:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015fcf:	85 db                	test   ebx,ebx
c0015fd1:	74 50                	je     c0016023 <LogicalDisk::mount()+0x6b>
c0015fd3:	e8 c9 74 00 00       	call   c001d4a1 <getIRQNestingLevel()>
c0015fd8:	52                   	push   edx
c0015fd9:	52                   	push   edx
c0015fda:	50                   	push   eax
c0015fdb:	68 b8 a8 02 c0       	push   0xc002a8b8
c0015fe0:	e8 02 c9 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0015fe5:	83 c4 0c             	add    esp,0xc
c0015fe8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015fef:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ff1:	83 e8 41             	sub    eax,0x41
c0015ff4:	50                   	push   eax
c0015ff5:	56                   	push   esi
c0015ff6:	53                   	push   ebx
c0015ff7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ffa:	83 c4 10             	add    esp,0x10
c0015ffd:	84 c0                	test   al,al
c0015fff:	74 08                	je     c0016009 <LogicalDisk::mount()+0x51>
c0016001:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016007:	eb 1c                	jmp    c0016025 <LogicalDisk::mount()+0x6d>
c0016009:	e8 93 74 00 00       	call   c001d4a1 <getIRQNestingLevel()>
c001600e:	51                   	push   ecx
c001600f:	51                   	push   ecx
c0016010:	50                   	push   eax
c0016011:	68 d3 a8 02 c0       	push   0xc002a8d3
c0016016:	e8 cc c8 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001601b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001601e:	83 c4 10             	add    esp,0x10
c0016021:	eb ac                	jmp    c0015fcf <LogicalDisk::mount()+0x17>
c0016023:	31 c0                	xor    eax,eax
c0016025:	5a                   	pop    edx
c0016026:	5b                   	pop    ebx
c0016027:	5e                   	pop    esi
c0016028:	c3                   	ret    
c0016029:	90                   	nop

c001602a <LogicalDisk::unmount()>:
c001602a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001602e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016038:	c3                   	ret    
c0016039:	90                   	nop

c001603a <LogicalDisk::eject()>:
c001603a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001603e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016044:	8b 10                	mov    edx,DWORD PTR [eax]
c0016046:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001604a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001604d:	90                   	nop

c001604e <LogicalDisk::unassignDriveLetter()>:
c001604e:	57                   	push   edi
c001604f:	56                   	push   esi
c0016050:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016054:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001605b:	84 c9                	test   cl,cl
c001605d:	75 0f                	jne    c001606e <LogicalDisk::unassignDriveLetter()+0x20>
c001605f:	c7 44 24 0c ee a8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a8ee
c0016067:	5e                   	pop    esi
c0016068:	5f                   	pop    edi
c0016069:	e9 ed 3d 00 00       	jmp    c0019e5b <Krnl::panic(char const*)>
c001606e:	83 e9 41             	sub    ecx,0x41
c0016071:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016078:	b8 01 00 00 00       	mov    eax,0x1
c001607d:	c7 04 8d e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1f20],0x0
c0016088:	d3 e0                	shl    eax,cl
c001608a:	89 c7                	mov    edi,eax
c001608c:	f7 d0                	not    eax
c001608e:	c1 ff 1f             	sar    edi,0x1f
c0016091:	21 05 c0 e0 02 c0    	and    DWORD PTR ds:0xc002e0c0,eax
c0016097:	89 fe                	mov    esi,edi
c0016099:	f7 d6                	not    esi
c001609b:	21 35 c4 e0 02 c0    	and    DWORD PTR ds:0xc002e0c4,esi
c00160a1:	5e                   	pop    esi
c00160a2:	5f                   	pop    edi
c00160a3:	c3                   	ret    

c00160a4 <LogicalDisk::read(unsigned long long, int, void*)>:
c00160a4:	57                   	push   edi
c00160a5:	56                   	push   esi
c00160a6:	53                   	push   ebx
c00160a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160af:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160b7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160bd:	77 41                	ja     c0016100 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00160bf:	99                   	cdq    
c00160c0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160c6:	01 c8                	add    eax,ecx
c00160c8:	11 da                	adc    edx,ebx
c00160ca:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160d0:	19 d7                	sbb    edi,edx
c00160d2:	72 33                	jb     c0016107 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00160d4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160da:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160e4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160e8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160f8:	5b                   	pop    ebx
c00160f9:	5e                   	pop    esi
c00160fa:	5f                   	pop    edi
c00160fb:	e9 c2 0a 00 00       	jmp    c0016bc2 <VCache::read(unsigned long long, int, void*)>
c0016100:	b8 05 00 00 00       	mov    eax,0x5
c0016105:	eb 05                	jmp    c001610c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016107:	b8 07 00 00 00       	mov    eax,0x7
c001610c:	5b                   	pop    ebx
c001610d:	5e                   	pop    esi
c001610e:	5f                   	pop    edi
c001610f:	c3                   	ret    

c0016110 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016110:	57                   	push   edi
c0016111:	56                   	push   esi
c0016112:	53                   	push   ebx
c0016113:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016117:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001611b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001611f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016123:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016129:	77 41                	ja     c001616c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001612b:	99                   	cdq    
c001612c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016132:	01 c8                	add    eax,ecx
c0016134:	11 da                	adc    edx,ebx
c0016136:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001613c:	19 d7                	sbb    edi,edx
c001613e:	72 33                	jb     c0016173 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016140:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016146:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001614c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016150:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016154:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001615a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016160:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016164:	5b                   	pop    ebx
c0016165:	5e                   	pop    esi
c0016166:	5f                   	pop    edi
c0016167:	e9 60 09 00 00       	jmp    c0016acc <VCache::write(unsigned long long, int, void*)>
c001616c:	b8 05 00 00 00       	mov    eax,0x5
c0016171:	eb 05                	jmp    c0016178 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016173:	b8 07 00 00 00       	mov    eax,0x7
c0016178:	5b                   	pop    ebx
c0016179:	5e                   	pop    esi
c001617a:	5f                   	pop    edi
c001617b:	c3                   	ret    

c001617c <Mouse::Mouse(char const*)>:
c001617c:	83 ec 0c             	sub    esp,0xc
c001617f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016183:	83 ec 08             	sub    esp,0x8
c0016186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001618a:	50                   	push   eax
c001618b:	e8 6e dd ff ff       	call   c0013efe <Device::Device(char const*)>
c0016190:	83 c4 10             	add    esp,0x10
c0016193:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c0016198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001619c:	89 10                	mov    DWORD PTR [eax],edx
c001619e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161a2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00161ac:	90                   	nop
c00161ad:	83 c4 0c             	add    esp,0xc
c00161b0:	c3                   	ret    
c00161b1:	90                   	nop

c00161b2 <Mouse::~Mouse()>:
c00161b2:	83 ec 0c             	sub    esp,0xc
c00161b5:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c00161ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161be:	89 10                	mov    DWORD PTR [eax],edx
c00161c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c4:	83 ec 0c             	sub    esp,0xc
c00161c7:	50                   	push   eax
c00161c8:	e8 13 da ff ff       	call   c0013be0 <Device::~Device()>
c00161cd:	83 c4 10             	add    esp,0x10
c00161d0:	90                   	nop
c00161d1:	83 c4 0c             	add    esp,0xc
c00161d4:	c3                   	ret    
c00161d5:	90                   	nop

c00161d6 <Mouse::~Mouse()>:
c00161d6:	83 ec 0c             	sub    esp,0xc
c00161d9:	83 ec 0c             	sub    esp,0xc
c00161dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161e0:	e8 cd ff ff ff       	call   c00161b2 <Mouse::~Mouse()>
c00161e5:	83 c4 10             	add    esp,0x10
c00161e8:	83 ec 08             	sub    esp,0x8
c00161eb:	68 58 01 00 00       	push   0x158
c00161f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161f4:	e8 0e c6 ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c00161f9:	83 c4 10             	add    esp,0x10
c00161fc:	83 c4 0c             	add    esp,0xc
c00161ff:	c3                   	ret    

c0016200 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016200:	55                   	push   ebp
c0016201:	57                   	push   edi
c0016202:	56                   	push   esi
c0016203:	53                   	push   ebx
c0016204:	81 ec 28 01 00 00    	sub    esp,0x128
c001620a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016211:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016218:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001621f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016226:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001622a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001622e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016235:	e8 c0 dd ff ff       	call   c0013ffa <Device::getName()>
c001623a:	5a                   	pop    edx
c001623b:	59                   	pop    ecx
c001623c:	50                   	push   eax
c001623d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016241:	55                   	push   ebp
c0016242:	e8 10 a5 fe ff       	call   c0000757 <strcpy>
c0016247:	5b                   	pop    ebx
c0016248:	58                   	pop    eax
c0016249:	68 68 a9 02 c0       	push   0xc002a968
c001624e:	55                   	push   ebp
c001624f:	e8 ba a5 fe ff       	call   c000080e <strcat>
c0016254:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001625b:	e8 b8 93 ff ff       	call   c000f618 <malloc>
c0016260:	83 c4 0c             	add    esp,0xc
c0016263:	89 c3                	mov    ebx,eax
c0016265:	57                   	push   edi
c0016266:	56                   	push   esi
c0016267:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001626b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001626f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016276:	55                   	push   ebp
c0016277:	50                   	push   eax
c0016278:	e8 cf fb ff ff       	call   c0015e4c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001627d:	83 c4 14             	add    esp,0x14
c0016280:	53                   	push   ebx
c0016281:	e8 7c fc ff ff       	call   c0015f02 <LogicalDisk::assignDriveLetter()>
c0016286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016289:	89 c6                	mov    esi,eax
c001628b:	e8 28 fd ff ff       	call   c0015fb8 <LogicalDisk::mount()>
c0016290:	58                   	pop    eax
c0016291:	5a                   	pop    edx
c0016292:	53                   	push   ebx
c0016293:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001629a:	e8 6f da ff ff       	call   c0013d0e <Device::addChild(Device*)>
c001629f:	59                   	pop    ecx
c00162a0:	89 f0                	mov    eax,esi
c00162a2:	5b                   	pop    ebx
c00162a3:	0f be f0             	movsx  esi,al
c00162a6:	56                   	push   esi
c00162a7:	68 73 a9 02 c0       	push   0xc002a973
c00162ac:	e8 36 c6 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00162b1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00162b7:	5b                   	pop    ebx
c00162b8:	5e                   	pop    esi
c00162b9:	5f                   	pop    edi
c00162ba:	5d                   	pop    ebp
c00162bb:	c3                   	ret    

c00162bc <createPartitionsForDisk(PhysicalDisk*)>:
c00162bc:	55                   	push   ebp
c00162bd:	57                   	push   edi
c00162be:	56                   	push   esi
c00162bf:	53                   	push   ebx
c00162c0:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00162c6:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00162cd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00162d3:	3d 00 02 00 00       	cmp    eax,0x200
c00162d8:	74 27                	je     c0016301 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00162da:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00162e0:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00162e6:	83 ec 10             	sub    esp,0x10
c00162e9:	0f a4 f7 0a          	shld   edi,esi,0xa
c00162ed:	99                   	cdq    
c00162ee:	c1 e6 0a             	shl    esi,0xa
c00162f1:	52                   	push   edx
c00162f2:	89 fd                	mov    ebp,edi
c00162f4:	50                   	push   eax
c00162f5:	55                   	push   ebp
c00162f6:	56                   	push   esi
c00162f7:	e8 50 fe 00 00       	call   c002614c <__udivdi3>
c00162fc:	e9 b1 00 00 00       	jmp    c00163b2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016301:	83 ec 0c             	sub    esp,0xc
c0016304:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016306:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001630a:	56                   	push   esi
c001630b:	6a 01                	push   0x1
c001630d:	6a 00                	push   0x0
c001630f:	6a 00                	push   0x0
c0016311:	53                   	push   ebx
c0016312:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016315:	83 c4 20             	add    esp,0x20
c0016318:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016320:	75 0a                	jne    c001632c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016322:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001632a:	74 2c                	je     c0016358 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001632c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016332:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016338:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001633e:	83 ec 10             	sub    esp,0x10
c0016341:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016345:	89 f7                	mov    edi,esi
c0016347:	c1 e0 0a             	shl    eax,0xa
c001634a:	c1 ff 1f             	sar    edi,0x1f
c001634d:	57                   	push   edi
c001634e:	56                   	push   esi
c001634f:	52                   	push   edx
c0016350:	50                   	push   eax
c0016351:	e8 f6 fd 00 00       	call   c002614c <__udivdi3>
c0016356:	eb 5a                	jmp    c00163b2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016358:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001635f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016366:	83 e1 7f             	and    ecx,0x7f
c0016369:	83 e0 7f             	and    eax,0x7f
c001636c:	01 c1                	add    ecx,eax
c001636e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016375:	83 e0 7f             	and    eax,0x7f
c0016378:	01 c1                	add    ecx,eax
c001637a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016381:	83 e0 7f             	and    eax,0x7f
c0016384:	00 c1                	add    cl,al
c0016386:	74 41                	je     c00163c9 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016388:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001638e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016394:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001639a:	83 ec 10             	sub    esp,0x10
c001639d:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163a1:	89 f7                	mov    edi,esi
c00163a3:	c1 e0 0a             	shl    eax,0xa
c00163a6:	c1 ff 1f             	sar    edi,0x1f
c00163a9:	57                   	push   edi
c00163aa:	56                   	push   esi
c00163ab:	52                   	push   edx
c00163ac:	50                   	push   eax
c00163ad:	e8 9a fd 00 00       	call   c002614c <__udivdi3>
c00163b2:	83 c4 14             	add    esp,0x14
c00163b5:	52                   	push   edx
c00163b6:	50                   	push   eax
c00163b7:	6a 00                	push   0x0
c00163b9:	6a 00                	push   0x0
c00163bb:	53                   	push   ebx
c00163bc:	e8 3f fe ff ff       	call   c0016200 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00163c1:	83 c4 20             	add    esp,0x20
c00163c4:	e9 79 01 00 00       	jmp    c0016542 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00163c9:	89 f0                	mov    eax,esi
c00163cb:	31 f6                	xor    esi,esi
c00163cd:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00163d4:	75 02                	jne    c00163d8 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00163d6:	89 f1                	mov    ecx,esi
c00163d8:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00163df:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00163e6:	c1 e2 08             	shl    edx,0x8
c00163e9:	c1 e7 10             	shl    edi,0x10
c00163ec:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00163f4:	09 fa                	or     edx,edi
c00163f6:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00163fe:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016405:	83 c0 10             	add    eax,0x10
c0016408:	09 fa                	or     edx,edi
c001640a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016411:	c1 e7 18             	shl    edi,0x18
c0016414:	09 fa                	or     edx,edi
c0016416:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001641d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016421:	c1 e7 10             	shl    edi,0x10
c0016424:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001642b:	c1 e2 08             	shl    edx,0x8
c001642e:	09 fa                	or     edx,edi
c0016430:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016437:	09 fa                	or     edx,edi
c0016439:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016440:	c1 e7 18             	shl    edi,0x18
c0016443:	09 fa                	or     edx,edi
c0016445:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016449:	46                   	inc    esi
c001644a:	83 fe 04             	cmp    esi,0x4
c001644d:	0f 85 7a ff ff ff    	jne    c00163cd <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016457:	83 f0 01             	xor    eax,0x1
c001645a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001645e:	75 57                	jne    c00164b7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016460:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016464:	83 f0 01             	xor    eax,0x1
c0016467:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001646b:	75 4a                	jne    c00164b7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001646d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016471:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016479:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016481:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016487:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001648d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016493:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016497:	89 f7                	mov    edi,esi
c0016499:	c1 e0 0a             	shl    eax,0xa
c001649c:	c1 ff 1f             	sar    edi,0x1f
c001649f:	57                   	push   edi
c00164a0:	56                   	push   esi
c00164a1:	52                   	push   edx
c00164a2:	50                   	push   eax
c00164a3:	e8 a4 fc 00 00       	call   c002614c <__udivdi3>
c00164a8:	83 c4 10             	add    esp,0x10
c00164ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164b3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00164b7:	84 c9                	test   cl,cl
c00164b9:	74 53                	je     c001650e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00164bb:	0f b6 c9             	movzx  ecx,cl
c00164be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164c6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00164ca:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00164ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00164d6:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00164da:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00164de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00164e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164ee:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00164f2:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00164f6:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00164fa:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00164fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016502:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016506:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001650a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001650e:	31 ed                	xor    ebp,ebp
c0016510:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016514:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016518:	89 f8                	mov    eax,edi
c001651a:	09 f0                	or     eax,esi
c001651c:	74 1e                	je     c001653c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001651e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016522:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016526:	89 d1                	mov    ecx,edx
c0016528:	09 c1                	or     ecx,eax
c001652a:	74 10                	je     c001653c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001652c:	83 ec 0c             	sub    esp,0xc
c001652f:	57                   	push   edi
c0016530:	56                   	push   esi
c0016531:	52                   	push   edx
c0016532:	50                   	push   eax
c0016533:	53                   	push   ebx
c0016534:	e8 c7 fc ff ff       	call   c0016200 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016539:	83 c4 20             	add    esp,0x20
c001653c:	45                   	inc    ebp
c001653d:	83 fd 04             	cmp    ebp,0x4
c0016540:	75 ce                	jne    c0016510 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016542:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016548:	5b                   	pop    ebx
c0016549:	5e                   	pop    esi
c001654a:	5f                   	pop    edi
c001654b:	5d                   	pop    ebp
c001654c:	c3                   	ret    
c001654d:	90                   	nop

c001654e <Serial::Serial(char const*)>:
c001654e:	83 ec 0c             	sub    esp,0xc
c0016551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016555:	83 ec 08             	sub    esp,0x8
c0016558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001655c:	50                   	push   eax
c001655d:	e8 9c d9 ff ff       	call   c0013efe <Device::Device(char const*)>
c0016562:	83 c4 10             	add    esp,0x10
c0016565:	ba a0 a9 02 c0       	mov    edx,0xc002a9a0
c001656a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001656e:	89 10                	mov    DWORD PTR [eax],edx
c0016570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016574:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001657e:	90                   	nop
c001657f:	83 c4 0c             	add    esp,0xc
c0016582:	c3                   	ret    
c0016583:	90                   	nop

c0016584 <Serial::~Serial()>:
c0016584:	83 ec 0c             	sub    esp,0xc
c0016587:	ba a0 a9 02 c0       	mov    edx,0xc002a9a0
c001658c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016590:	89 10                	mov    DWORD PTR [eax],edx
c0016592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016596:	83 ec 0c             	sub    esp,0xc
c0016599:	50                   	push   eax
c001659a:	e8 41 d6 ff ff       	call   c0013be0 <Device::~Device()>
c001659f:	83 c4 10             	add    esp,0x10
c00165a2:	90                   	nop
c00165a3:	83 c4 0c             	add    esp,0xc
c00165a6:	c3                   	ret    
c00165a7:	90                   	nop

c00165a8 <Serial::~Serial()>:
c00165a8:	83 ec 0c             	sub    esp,0xc
c00165ab:	83 ec 0c             	sub    esp,0xc
c00165ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165b2:	e8 cd ff ff ff       	call   c0016584 <Serial::~Serial()>
c00165b7:	83 c4 10             	add    esp,0x10
c00165ba:	83 ec 08             	sub    esp,0x8
c00165bd:	68 58 01 00 00       	push   0x158
c00165c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165c6:	e8 3c c2 ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c00165cb:	83 c4 10             	add    esp,0x10
c00165ce:	83 c4 0c             	add    esp,0xc
c00165d1:	c3                   	ret    

c00165d2 <Timer::Timer(char const*)>:
c00165d2:	83 ec 0c             	sub    esp,0xc
c00165d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d9:	83 ec 08             	sub    esp,0x8
c00165dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165e0:	50                   	push   eax
c00165e1:	e8 18 d9 ff ff       	call   c0013efe <Device::Device(char const*)>
c00165e6:	83 c4 10             	add    esp,0x10
c00165e9:	ba e4 a9 02 c0       	mov    edx,0xc002a9e4
c00165ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165f2:	89 10                	mov    DWORD PTR [eax],edx
c00165f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165f8:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016602:	90                   	nop
c0016603:	83 c4 0c             	add    esp,0xc
c0016606:	c3                   	ret    
c0016607:	90                   	nop

c0016608 <Timer::~Timer()>:
c0016608:	83 ec 0c             	sub    esp,0xc
c001660b:	ba e4 a9 02 c0       	mov    edx,0xc002a9e4
c0016610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016614:	89 10                	mov    DWORD PTR [eax],edx
c0016616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001661a:	83 ec 0c             	sub    esp,0xc
c001661d:	50                   	push   eax
c001661e:	e8 bd d5 ff ff       	call   c0013be0 <Device::~Device()>
c0016623:	83 c4 10             	add    esp,0x10
c0016626:	90                   	nop
c0016627:	83 c4 0c             	add    esp,0xc
c001662a:	c3                   	ret    
c001662b:	90                   	nop

c001662c <Timer::~Timer()>:
c001662c:	83 ec 0c             	sub    esp,0xc
c001662f:	83 ec 0c             	sub    esp,0xc
c0016632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016636:	e8 cd ff ff ff       	call   c0016608 <Timer::~Timer()>
c001663b:	83 c4 10             	add    esp,0x10
c001663e:	83 ec 08             	sub    esp,0x8
c0016641:	68 5c 01 00 00       	push   0x15c
c0016646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001664a:	e8 b8 c1 ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c001664f:	83 c4 10             	add    esp,0x10
c0016652:	83 c4 0c             	add    esp,0xc
c0016655:	c3                   	ret    

c0016656 <Timer::read()>:
c0016656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001665a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016660:	c3                   	ret    

c0016661 <timerHandler(unsigned long long)>:
c0016661:	55                   	push   ebp
c0016662:	57                   	push   edi
c0016663:	56                   	push   esi
c0016664:	53                   	push   ebx
c0016665:	83 ec 0c             	sub    esp,0xc
c0016668:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001666c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016670:	01 35 50 e1 02 c0    	add    DWORD PTR ds:0xc002e150,esi
c0016676:	11 3d 54 e1 02 c0    	adc    DWORD PTR ds:0xc002e154,edi
c001667c:	80 3d cd da 02 c0 00 	cmp    BYTE PTR ds:0xc002dacd,0x0
c0016683:	0f 84 07 01 00 00    	je     c0016790 <timerHandler(unsigned long long)+0x12f>
c0016689:	e8 4f 6e 00 00       	call   c001d4dd <lockStuff()>
c001668e:	83 ec 0c             	sub    esp,0xc
c0016691:	68 1c 10 03 c0       	push   0xc003101c
c0016696:	e8 23 1b 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001669b:	c7 04 24 1c 10 03 c0 	mov    DWORD PTR [esp],0xc003101c
c00166a2:	89 c3                	mov    ebx,eax
c00166a4:	e8 1d 1b 01 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166a9:	83 c4 10             	add    esp,0x10
c00166ac:	84 c0                	test   al,al
c00166ae:	74 60                	je     c0016710 <timerHandler(unsigned long long)+0xaf>
c00166b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166b6:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00166b9:	85 c0                	test   eax,eax
c00166bb:	0f 85 91 00 00 00    	jne    c0016752 <timerHandler(unsigned long long)+0xf1>
c00166c1:	e9 be 00 00 00       	jmp    c0016784 <timerHandler(unsigned long long)+0x123>
c00166c6:	83 ec 0c             	sub    esp,0xc
c00166c9:	55                   	push   ebp
c00166ca:	e8 ff 73 00 00       	call   c001dace <unblockTask(ThreadControlBlock*)>
c00166cf:	83 c4 10             	add    esp,0x10
c00166d2:	39 eb                	cmp    ebx,ebp
c00166d4:	75 12                	jne    c00166e8 <timerHandler(unsigned long long)+0x87>
c00166d6:	83 ec 0c             	sub    esp,0xc
c00166d9:	68 1c 10 03 c0       	push   0xc003101c
c00166de:	e8 db 1a 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166e3:	89 c3                	mov    ebx,eax
c00166e5:	83 c4 10             	add    esp,0x10
c00166e8:	83 ec 0c             	sub    esp,0xc
c00166eb:	68 1c 10 03 c0       	push   0xc003101c
c00166f0:	e8 d1 1a 01 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166f5:	83 c4 10             	add    esp,0x10
c00166f8:	84 c0                	test   al,al
c00166fa:	75 b4                	jne    c00166b0 <timerHandler(unsigned long long)+0x4f>
c00166fc:	83 ec 0c             	sub    esp,0xc
c00166ff:	68 1c 10 03 c0       	push   0xc003101c
c0016704:	e8 b5 1a 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016709:	83 c4 10             	add    esp,0x10
c001670c:	39 d8                	cmp    eax,ebx
c001670e:	74 a0                	je     c00166b0 <timerHandler(unsigned long long)+0x4f>
c0016710:	83 ec 0c             	sub    esp,0xc
c0016713:	68 1c 10 03 c0       	push   0xc003101c
c0016718:	e8 a1 1a 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001671d:	c7 04 24 1c 10 03 c0 	mov    DWORD PTR [esp],0xc003101c
c0016724:	89 c5                	mov    ebp,eax
c0016726:	e8 b7 1a 01 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001672b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001672e:	83 c4 10             	add    esp,0x10
c0016731:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016734:	39 15 50 e1 02 c0    	cmp    DWORD PTR ds:0xc002e150,edx
c001673a:	a1 54 e1 02 c0       	mov    eax,ds:0xc002e154
c001673f:	19 c8                	sbb    eax,ecx
c0016741:	73 83                	jae    c00166c6 <timerHandler(unsigned long long)+0x65>
c0016743:	50                   	push   eax
c0016744:	50                   	push   eax
c0016745:	55                   	push   ebp
c0016746:	68 1c 10 03 c0       	push   0xc003101c
c001674b:	e8 40 1b 01 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016750:	eb 93                	jmp    c00166e5 <timerHandler(unsigned long long)+0x84>
c0016752:	80 3d cc da 02 c0 00 	cmp    BYTE PTR ds:0xc002dacc,0x0
c0016759:	74 29                	je     c0016784 <timerHandler(unsigned long long)+0x123>
c001675b:	39 c6                	cmp    esi,eax
c001675d:	bb 00 00 00 00       	mov    ebx,0x0
c0016762:	19 df                	sbb    edi,ebx
c0016764:	72 19                	jb     c001677f <timerHandler(unsigned long long)+0x11e>
c0016766:	e8 4b 6d 00 00       	call   c001d4b6 <lockScheduler()>
c001676b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016770:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016773:	e8 7a 70 00 00       	call   c001d7f2 <schedule()>
c0016778:	e8 3b 6d 00 00       	call   c001d4b8 <unlockScheduler()>
c001677d:	eb 05                	jmp    c0016784 <timerHandler(unsigned long long)+0x123>
c001677f:	29 f0                	sub    eax,esi
c0016781:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016784:	83 c4 0c             	add    esp,0xc
c0016787:	5b                   	pop    ebx
c0016788:	5e                   	pop    esi
c0016789:	5f                   	pop    edi
c001678a:	5d                   	pop    ebp
c001678b:	e9 e7 70 00 00       	jmp    c001d877 <unlockStuff()>
c0016790:	83 c4 0c             	add    esp,0xc
c0016793:	5b                   	pop    ebx
c0016794:	5e                   	pop    esi
c0016795:	5f                   	pop    edi
c0016796:	5d                   	pop    ebp
c0016797:	c3                   	ret    

c0016798 <setupTimer(int)>:
c0016798:	57                   	push   edi
c0016799:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001679e:	56                   	push   esi
c001679f:	53                   	push   ebx
c00167a0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167aa:	83 ec 0c             	sub    esp,0xc
c00167ad:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167b3:	e8 42 d8 ff ff       	call   c0013ffa <Device::getName()>
c00167b8:	83 c4 10             	add    esp,0x10
c00167bb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00167be:	0f 85 8d 00 00 00    	jne    c0016851 <setupTimer(int)+0xb9>
c00167c4:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00167c9:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00167d0:	74 7f                	je     c0016851 <setupTimer(int)+0xb9>
c00167d2:	83 ec 0c             	sub    esp,0xc
c00167d5:	68 5c 01 00 00       	push   0x15c
c00167da:	e8 39 8e ff ff       	call   c000f618 <malloc>
c00167df:	89 04 24             	mov    DWORD PTR [esp],eax
c00167e2:	89 c3                	mov    ebx,eax
c00167e4:	e8 3b f5 00 00       	call   c0025d24 <PIT::PIT()>
c00167e9:	59                   	pop    ecx
c00167ea:	5f                   	pop    edi
c00167eb:	53                   	push   ebx
c00167ec:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c00167f2:	e8 17 d5 ff ff       	call   c0013d0e <Device::addChild(Device*)>
c00167f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167f9:	6a 00                	push   0x0
c00167fb:	6a 00                	push   0x0
c00167fd:	56                   	push   esi
c00167fe:	53                   	push   ebx
c00167ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016802:	83 c4 14             	add    esp,0x14
c0016805:	68 60 01 00 00       	push   0x160
c001680a:	e8 09 8e ff ff       	call   c000f618 <malloc>
c001680f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016812:	89 c7                	mov    edi,eax
c0016814:	e8 bb f3 00 00       	call   c0025bd4 <APICTimer::APICTimer()>
c0016819:	6a 00                	push   0x0
c001681b:	6a 00                	push   0x0
c001681d:	56                   	push   esi
c001681e:	57                   	push   edi
c001681f:	e8 b2 f2 00 00       	call   c0025ad6 <APICTimer::open(int, int, void*)>
c0016824:	83 c4 20             	add    esp,0x20
c0016827:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016829:	6a 00                	push   0x0
c001682b:	6a 00                	push   0x0
c001682d:	6a 00                	push   0x0
c001682f:	53                   	push   ebx
c0016830:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016833:	58                   	pop    eax
c0016834:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0016839:	5a                   	pop    edx
c001683a:	57                   	push   edi
c001683b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016841:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016847:	e8 c2 d4 ff ff       	call   c0013d0e <Device::addChild(Device*)>
c001684c:	83 c4 10             	add    esp,0x10
c001684f:	eb 33                	jmp    c0016884 <setupTimer(int)+0xec>
c0016851:	83 ec 0c             	sub    esp,0xc
c0016854:	68 5c 01 00 00       	push   0x15c
c0016859:	e8 ba 8d ff ff       	call   c000f618 <malloc>
c001685e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016861:	89 c3                	mov    ebx,eax
c0016863:	e8 bc f4 00 00       	call   c0025d24 <PIT::PIT()>
c0016868:	58                   	pop    eax
c0016869:	5a                   	pop    edx
c001686a:	53                   	push   ebx
c001686b:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c0016871:	e8 98 d4 ff ff       	call   c0013d0e <Device::addChild(Device*)>
c0016876:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016878:	6a 00                	push   0x0
c001687a:	6a 00                	push   0x0
c001687c:	56                   	push   esi
c001687d:	53                   	push   ebx
c001687e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016881:	83 c4 20             	add    esp,0x20
c0016884:	89 d8                	mov    eax,ebx
c0016886:	5b                   	pop    ebx
c0016887:	5e                   	pop    esi
c0016888:	5f                   	pop    edi
c0016889:	c3                   	ret    

c001688a <VCache::VCache(PhysicalDisk*)>:
c001688a:	53                   	push   ebx
c001688b:	83 ec 18             	sub    esp,0x18
c001688e:	ba 90 aa 02 c0       	mov    edx,0xc002aa90
c0016893:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016897:	89 10                	mov    DWORD PTR [eax],edx
c0016899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001689d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00168a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a8:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00168af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b3:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00168ba:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00168c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00168cc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00168d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00168de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e2:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00168e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ea:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00168f1:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00168f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168fc:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016904:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001690c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016914:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001691b:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016923:	83 ec 0c             	sub    esp,0xc
c0016926:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001692a:	e8 e9 8c ff ff       	call   c000f618 <malloc>
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	89 c3                	mov    ebx,eax
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	53                   	push   ebx
c0016938:	e8 99 6c 00 00       	call   c001d5d6 <Mutex::Mutex()>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016944:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001694b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001694f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016956:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001695d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016961:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001696b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001696e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016972:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016978:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001697e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016982:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016985:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001698c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016990:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016994:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001699a:	05 00 01 00 00       	add    eax,0x100
c001699f:	c1 e0 04             	shl    eax,0x4
c00169a2:	83 ec 0c             	sub    esp,0xc
c00169a5:	50                   	push   eax
c00169a6:	e8 6d 8c ff ff       	call   c000f618 <malloc>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	89 c2                	mov    edx,eax
c00169b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00169b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169bb:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00169c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00169ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169d4:	c1 e0 06             	shl    eax,0x6
c00169d7:	83 ec 0c             	sub    esp,0xc
c00169da:	50                   	push   eax
c00169db:	e8 38 8c ff ff       	call   c000f618 <malloc>
c00169e0:	83 c4 10             	add    esp,0x10
c00169e3:	89 c2                	mov    edx,eax
c00169e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00169ec:	90                   	nop
c00169ed:	83 c4 18             	add    esp,0x18
c00169f0:	5b                   	pop    ebx
c00169f1:	c3                   	ret    

c00169f2 <VCache::invalidateReadBuffer()>:
c00169f2:	53                   	push   ebx
c00169f3:	83 ec 14             	sub    esp,0x14
c00169f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00169fa:	68 0c aa 02 c0       	push   0xc002aa0c
c00169ff:	e8 e3 be ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0016a04:	66 c7 43 3c 00 00    	mov    WORD PTR [ebx+0x3c],0x0
c0016a0a:	c6 43 3e 00          	mov    BYTE PTR [ebx+0x3e],0x0
c0016a0e:	83 c4 18             	add    esp,0x18
c0016a11:	5b                   	pop    ebx
c0016a12:	c3                   	ret    
c0016a13:	90                   	nop

c0016a14 <VCache::writeWriteBuffer()>:
c0016a14:	53                   	push   ebx
c0016a15:	83 ec 14             	sub    esp,0x14
c0016a18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a21:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a24:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a27:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016a2a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016a2d:	50                   	push   eax
c0016a2e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a31:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016a38:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016a3f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016a43:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016a4a:	83 c4 28             	add    esp,0x28
c0016a4d:	5b                   	pop    ebx
c0016a4e:	c3                   	ret    
c0016a4f:	90                   	nop

c0016a50 <VCache::~VCache()>:
c0016a50:	83 ec 0c             	sub    esp,0xc
c0016a53:	ba 90 aa 02 c0       	mov    edx,0xc002aa90
c0016a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a5c:	89 10                	mov    DWORD PTR [eax],edx
c0016a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a62:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016a65:	84 c0                	test   al,al
c0016a67:	74 0f                	je     c0016a78 <VCache::~VCache()+0x28>
c0016a69:	83 ec 0c             	sub    esp,0xc
c0016a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a70:	e8 9f ff ff ff       	call   c0016a14 <VCache::writeWriteBuffer()>
c0016a75:	83 c4 10             	add    esp,0x10
c0016a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a7c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a7f:	83 ec 0c             	sub    esp,0xc
c0016a82:	50                   	push   eax
c0016a83:	e8 a0 8b ff ff       	call   c000f628 <free>
c0016a88:	83 c4 10             	add    esp,0x10
c0016a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a8f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a92:	83 ec 0c             	sub    esp,0xc
c0016a95:	50                   	push   eax
c0016a96:	e8 8d 8b ff ff       	call   c000f628 <free>
c0016a9b:	83 c4 10             	add    esp,0x10
c0016a9e:	90                   	nop
c0016a9f:	83 c4 0c             	add    esp,0xc
c0016aa2:	c3                   	ret    
c0016aa3:	90                   	nop

c0016aa4 <VCache::~VCache()>:
c0016aa4:	83 ec 0c             	sub    esp,0xc
c0016aa7:	83 ec 0c             	sub    esp,0xc
c0016aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aae:	e8 9d ff ff ff       	call   c0016a50 <VCache::~VCache()>
c0016ab3:	83 c4 10             	add    esp,0x10
c0016ab6:	83 ec 08             	sub    esp,0x8
c0016ab9:	6a 44                	push   0x44
c0016abb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016abf:	e8 43 bd ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0016ac4:	83 c4 10             	add    esp,0x10
c0016ac7:	83 c4 0c             	add    esp,0xc
c0016aca:	c3                   	ret    
c0016acb:	90                   	nop

c0016acc <VCache::write(unsigned long long, int, void*)>:
c0016acc:	55                   	push   ebp
c0016acd:	57                   	push   edi
c0016ace:	56                   	push   esi
c0016acf:	53                   	push   ebx
c0016ad0:	83 ec 28             	sub    esp,0x28
c0016ad3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ad7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016adb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016adf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016ae3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ae6:	e8 4d 6f 00 00       	call   c001da38 <Semaphore::acquire()>
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016af2:	74 0c                	je     c0016b00 <VCache::write(unsigned long long, int, void*)+0x34>
c0016af4:	83 ec 0c             	sub    esp,0xc
c0016af7:	53                   	push   ebx
c0016af8:	e8 f5 fe ff ff       	call   c00169f2 <VCache::invalidateReadBuffer()>
c0016afd:	83 c4 10             	add    esp,0x10
c0016b00:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b04:	74 66                	je     c0016b6c <VCache::write(unsigned long long, int, void*)+0xa0>
c0016b06:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b09:	99                   	cdq    
c0016b0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b0e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016b11:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016b14:	89 c1                	mov    ecx,eax
c0016b16:	89 d0                	mov    eax,edx
c0016b18:	31 f1                	xor    ecx,esi
c0016b1a:	31 f8                	xor    eax,edi
c0016b1c:	89 ca                	mov    edx,ecx
c0016b1e:	09 c2                	or     edx,eax
c0016b20:	75 3e                	jne    c0016b60 <VCache::write(unsigned long long, int, void*)+0x94>
c0016b22:	83 fd 01             	cmp    ebp,0x1
c0016b25:	75 39                	jne    c0016b60 <VCache::write(unsigned long long, int, void*)+0x94>
c0016b27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b2a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b30:	51                   	push   ecx
c0016b31:	50                   	push   eax
c0016b32:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b36:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016b3a:	0f af c8             	imul   ecx,eax
c0016b3d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016b40:	51                   	push   ecx
c0016b41:	e8 5a 9b fe ff       	call   c00006a0 <memcpy>
c0016b46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b49:	83 c4 10             	add    esp,0x10
c0016b4c:	40                   	inc    eax
c0016b4d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016b50:	83 f8 40             	cmp    eax,0x40
c0016b53:	75 57                	jne    c0016bac <VCache::write(unsigned long long, int, void*)+0xe0>
c0016b55:	83 ec 0c             	sub    esp,0xc
c0016b58:	53                   	push   ebx
c0016b59:	e8 b6 fe ff ff       	call   c0016a14 <VCache::writeWriteBuffer()>
c0016b5e:	eb 34                	jmp    c0016b94 <VCache::write(unsigned long long, int, void*)+0xc8>
c0016b60:	83 ec 0c             	sub    esp,0xc
c0016b63:	53                   	push   ebx
c0016b64:	e8 ab fe ff ff       	call   c0016a14 <VCache::writeWriteBuffer()>
c0016b69:	83 c4 10             	add    esp,0x10
c0016b6c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b6f:	83 fd 3f             	cmp    ebp,0x3f
c0016b72:	7f 25                	jg     c0016b99 <VCache::write(unsigned long long, int, void*)+0xcd>
c0016b74:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016b77:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016b7a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016b7d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b81:	52                   	push   edx
c0016b82:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016b88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b8c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b8f:	e8 0c 9b fe ff       	call   c00006a0 <memcpy>
c0016b94:	83 c4 10             	add    esp,0x10
c0016b97:	eb 13                	jmp    c0016bac <VCache::write(unsigned long long, int, void*)+0xe0>
c0016b99:	83 ec 0c             	sub    esp,0xc
c0016b9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016ba2:	55                   	push   ebp
c0016ba3:	57                   	push   edi
c0016ba4:	56                   	push   esi
c0016ba5:	50                   	push   eax
c0016ba6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016ba9:	83 c4 20             	add    esp,0x20
c0016bac:	83 ec 0c             	sub    esp,0xc
c0016baf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bb2:	e8 2f 74 00 00       	call   c001dfe6 <Semaphore::release()>
c0016bb7:	83 c4 2c             	add    esp,0x2c
c0016bba:	31 c0                	xor    eax,eax
c0016bbc:	5b                   	pop    ebx
c0016bbd:	5e                   	pop    esi
c0016bbe:	5f                   	pop    edi
c0016bbf:	5d                   	pop    ebp
c0016bc0:	c3                   	ret    
c0016bc1:	90                   	nop

c0016bc2 <VCache::read(unsigned long long, int, void*)>:
c0016bc2:	55                   	push   ebp
c0016bc3:	57                   	push   edi
c0016bc4:	56                   	push   esi
c0016bc5:	53                   	push   ebx
c0016bc6:	83 ec 28             	sub    esp,0x28
c0016bc9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016bcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016bd1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016bd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bd9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016bdd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016be1:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016be5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016be8:	e8 4b 6e 00 00       	call   c001da38 <Semaphore::acquire()>
c0016bed:	83 c4 10             	add    esp,0x10
c0016bf0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016bf4:	74 0c                	je     c0016c02 <VCache::read(unsigned long long, int, void*)+0x40>
c0016bf6:	83 ec 0c             	sub    esp,0xc
c0016bf9:	53                   	push   ebx
c0016bfa:	e8 15 fe ff ff       	call   c0016a14 <VCache::writeWriteBuffer()>
c0016bff:	83 c4 10             	add    esp,0x10
c0016c02:	57                   	push   edi
c0016c03:	57                   	push   edi
c0016c04:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0016c08:	68 31 aa 02 c0       	push   0xc002aa31
c0016c0d:	e8 d5 bc ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0016c12:	83 c4 10             	add    esp,0x10
c0016c15:	83 fe 01             	cmp    esi,0x1
c0016c18:	0f 85 df 00 00 00    	jne    c0016cfd <VCache::read(unsigned long long, int, void*)+0x13b>
c0016c1e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c21:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016c28:	0f 85 cf 00 00 00    	jne    c0016cfd <VCache::read(unsigned long long, int, void*)+0x13b>
c0016c2e:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c32:	74 1b                	je     c0016c4f <VCache::read(unsigned long long, int, void*)+0x8d>
c0016c34:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c37:	f7 d9                	neg    ecx
c0016c39:	89 c8                	mov    eax,ecx
c0016c3b:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016c3e:	99                   	cdq    
c0016c3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c43:	21 d0                	and    eax,edx
c0016c45:	3b 43 34             	cmp    eax,DWORD PTR [ebx+0x34]
c0016c48:	75 05                	jne    c0016c4f <VCache::read(unsigned long long, int, void*)+0x8d>
c0016c4a:	3b 4b 30             	cmp    ecx,DWORD PTR [ebx+0x30]
c0016c4d:	74 42                	je     c0016c91 <VCache::read(unsigned long long, int, void*)+0xcf>
c0016c4f:	83 ec 0c             	sub    esp,0xc
c0016c52:	68 4a aa 02 c0       	push   0xc002aa4a
c0016c57:	e8 8b bc ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0016c5c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016c60:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c63:	f7 d9                	neg    ecx
c0016c65:	89 c8                	mov    eax,ecx
c0016c67:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0016c6b:	99                   	cdq    
c0016c6c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0016c6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c73:	89 ce                	mov    esi,ecx
c0016c75:	21 d0                	and    eax,edx
c0016c77:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0016c7a:	89 c7                	mov    edi,eax
c0016c7c:	59                   	pop    ecx
c0016c7d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c80:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c82:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016c85:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0016c88:	57                   	push   edi
c0016c89:	56                   	push   esi
c0016c8a:	50                   	push   eax
c0016c8b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c8e:	83 c4 20             	add    esp,0x20
c0016c91:	52                   	push   edx
c0016c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c9a:	2b 43 30             	sub    eax,DWORD PTR [ebx+0x30]
c0016c9d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0016ca0:	1b 53 34             	sbb    edx,DWORD PTR [ebx+0x34]
c0016ca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ca7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016cab:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016cb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cb5:	89 c8                	mov    eax,ecx
c0016cb7:	0f af f1             	imul   esi,ecx
c0016cba:	99                   	cdq    
c0016cbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016cbf:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
c0016cc4:	01 d6                	add    esi,edx
c0016cc6:	f7 e1                	mul    ecx
c0016cc8:	01 f2                	add    edx,esi
c0016cca:	52                   	push   edx
c0016ccb:	50                   	push   eax
c0016ccc:	68 5a aa 02 c0       	push   0xc002aa5a
c0016cd1:	e8 11 bc ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0016cd6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cd9:	83 c4 0c             	add    esp,0xc
c0016cdc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016ce2:	52                   	push   edx
c0016ce3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016ce6:	48                   	dec    eax
c0016ce7:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0016ceb:	0f af c2             	imul   eax,edx
c0016cee:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016cf1:	50                   	push   eax
c0016cf2:	55                   	push   ebp
c0016cf3:	e8 a8 99 fe ff       	call   c00006a0 <memcpy>
c0016cf8:	83 c4 10             	add    esp,0x10
c0016cfb:	eb 2d                	jmp    c0016d2a <VCache::read(unsigned long long, int, void*)+0x168>
c0016cfd:	50                   	push   eax
c0016cfe:	50                   	push   eax
c0016cff:	56                   	push   esi
c0016d00:	68 76 aa 02 c0       	push   0xc002aa76
c0016d05:	e8 dd bb ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0016d0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d0d:	e8 e0 fc ff ff       	call   c00169f2 <VCache::invalidateReadBuffer()>
c0016d12:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d15:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d1a:	56                   	push   esi
c0016d1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d23:	50                   	push   eax
c0016d24:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016d27:	83 c4 20             	add    esp,0x20
c0016d2a:	83 ec 0c             	sub    esp,0xc
c0016d2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d30:	e8 b1 72 00 00       	call   c001dfe6 <Semaphore::release()>
c0016d35:	83 c4 2c             	add    esp,0x2c
c0016d38:	31 c0                	xor    eax,eax
c0016d3a:	5b                   	pop    ebx
c0016d3b:	5e                   	pop    esi
c0016d3c:	5f                   	pop    edi
c0016d3d:	5d                   	pop    ebp
c0016d3e:	c3                   	ret    
c0016d3f:	90                   	nop

c0016d40 <Video::putrect(int, int, int, int, unsigned int)>:
c0016d40:	55                   	push   ebp
c0016d41:	57                   	push   edi
c0016d42:	56                   	push   esi
c0016d43:	53                   	push   ebx
c0016d44:	83 ec 1c             	sub    esp,0x1c
c0016d47:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d4f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016d53:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016d57:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d5f:	01 df                	add    edi,ebx
c0016d61:	39 fb                	cmp    ebx,edi
c0016d63:	7d 1f                	jge    c0016d84 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016d65:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d69:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016d6d:	7d 12                	jge    c0016d81 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016d6f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016d71:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016d75:	53                   	push   ebx
c0016d76:	55                   	push   ebp
c0016d77:	45                   	inc    ebp
c0016d78:	56                   	push   esi
c0016d79:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016d7c:	83 c4 10             	add    esp,0x10
c0016d7f:	eb e8                	jmp    c0016d69 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016d81:	43                   	inc    ebx
c0016d82:	eb dd                	jmp    c0016d61 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016d84:	83 c4 1c             	add    esp,0x1c
c0016d87:	5b                   	pop    ebx
c0016d88:	5e                   	pop    esi
c0016d89:	5f                   	pop    edi
c0016d8a:	5d                   	pop    ebp
c0016d8b:	c3                   	ret    

c0016d8c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016d8c:	55                   	push   ebp
c0016d8d:	57                   	push   edi
c0016d8e:	31 ff                	xor    edi,edi
c0016d90:	56                   	push   esi
c0016d91:	53                   	push   ebx
c0016d92:	83 ec 1c             	sub    esp,0x1c
c0016d95:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016d99:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016d9d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016da4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016da9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016dad:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016db1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016db5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016db8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016dbc:	01 f9                	add    ecx,edi
c0016dbe:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016dc2:	7d 2f                	jge    c0016df3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016dc4:	31 f6                	xor    esi,esi
c0016dc6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016dca:	01 f2                	add    edx,esi
c0016dcc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016dd0:	7d 1a                	jge    c0016dec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016dd2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016dd5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016dd8:	46                   	inc    esi
c0016dd9:	51                   	push   ecx
c0016dda:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016dde:	52                   	push   edx
c0016ddf:	55                   	push   ebp
c0016de0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016de3:	83 c4 10             	add    esp,0x10
c0016de6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016dea:	eb da                	jmp    c0016dc6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016dec:	47                   	inc    edi
c0016ded:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016df1:	eb c5                	jmp    c0016db8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016df3:	83 c4 1c             	add    esp,0x1c
c0016df6:	5b                   	pop    ebx
c0016df7:	5e                   	pop    esi
c0016df8:	5f                   	pop    edi
c0016df9:	5d                   	pop    ebp
c0016dfa:	c3                   	ret    
c0016dfb:	90                   	nop

c0016dfc <Video::blit(unsigned int*, int, int, int, int)>:
c0016dfc:	55                   	push   ebp
c0016dfd:	57                   	push   edi
c0016dfe:	56                   	push   esi
c0016dff:	53                   	push   ebx
c0016e00:	83 ec 1c             	sub    esp,0x1c
c0016e03:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e0b:	85 c0                	test   eax,eax
c0016e0d:	79 02                	jns    c0016e11 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016e0f:	31 c0                	xor    eax,eax
c0016e11:	c1 e0 02             	shl    eax,0x2
c0016e14:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016e18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e20:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016e24:	39 d8                	cmp    eax,ebx
c0016e26:	7e 49                	jle    c0016e71 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e28:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e2e:	7c 41                	jl     c0016e71 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e30:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016e34:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e38:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e3c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016e40:	39 f9                	cmp    ecx,edi
c0016e42:	7e 22                	jle    c0016e66 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016e44:	83 c5 04             	add    ebp,0x4
c0016e47:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e4d:	7c 14                	jl     c0016e63 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016e4f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e51:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016e54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e5c:	56                   	push   esi
c0016e5d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016e60:	83 c4 10             	add    esp,0x10
c0016e63:	47                   	inc    edi
c0016e64:	eb d2                	jmp    c0016e38 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e6a:	43                   	inc    ebx
c0016e6b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016e6f:	eb ab                	jmp    c0016e1c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016e71:	83 c4 1c             	add    esp,0x1c
c0016e74:	5b                   	pop    ebx
c0016e75:	5e                   	pop    esi
c0016e76:	5f                   	pop    edi
c0016e77:	5d                   	pop    ebp
c0016e78:	c3                   	ret    
c0016e79:	90                   	nop

c0016e7a <Video::clearScreen(unsigned int)>:
c0016e7a:	57                   	push   edi
c0016e7b:	56                   	push   esi
c0016e7c:	53                   	push   ebx
c0016e7d:	31 db                	xor    ebx,ebx
c0016e7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e83:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e89:	7e 1f                	jle    c0016eaa <Video::clearScreen(unsigned int)+0x30>
c0016e8b:	31 ff                	xor    edi,edi
c0016e8d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e93:	7e 12                	jle    c0016ea7 <Video::clearScreen(unsigned int)+0x2d>
c0016e95:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e9b:	53                   	push   ebx
c0016e9c:	57                   	push   edi
c0016e9d:	47                   	inc    edi
c0016e9e:	56                   	push   esi
c0016e9f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ea2:	83 c4 10             	add    esp,0x10
c0016ea5:	eb e6                	jmp    c0016e8d <Video::clearScreen(unsigned int)+0x13>
c0016ea7:	43                   	inc    ebx
c0016ea8:	eb d9                	jmp    c0016e83 <Video::clearScreen(unsigned int)+0x9>
c0016eaa:	5b                   	pop    ebx
c0016eab:	5e                   	pop    esi
c0016eac:	5f                   	pop    edi
c0016ead:	c3                   	ret    

c0016eae <Video::putpixel(int, int, unsigned int)>:
c0016eae:	c7 44 24 04 98 aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aa98
c0016eb6:	e9 a0 2f 00 00       	jmp    c0019e5b <Krnl::panic(char const*)>
c0016ebb:	90                   	nop

c0016ebc <Video::Video(char const*)>:
c0016ebc:	83 ec 0c             	sub    esp,0xc
c0016ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ec3:	83 ec 08             	sub    esp,0x8
c0016ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016eca:	50                   	push   eax
c0016ecb:	e8 2e d0 ff ff       	call   c0013efe <Device::Device(char const*)>
c0016ed0:	83 c4 10             	add    esp,0x10
c0016ed3:	ba 1c ab 02 c0       	mov    edx,0xc002ab1c
c0016ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016edc:	89 10                	mov    DWORD PTR [eax],edx
c0016ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ee2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016eec:	90                   	nop
c0016eed:	83 c4 0c             	add    esp,0xc
c0016ef0:	c3                   	ret    
c0016ef1:	90                   	nop

c0016ef2 <Video::~Video()>:
c0016ef2:	83 ec 0c             	sub    esp,0xc
c0016ef5:	ba 1c ab 02 c0       	mov    edx,0xc002ab1c
c0016efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016efe:	89 10                	mov    DWORD PTR [eax],edx
c0016f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f04:	83 ec 0c             	sub    esp,0xc
c0016f07:	50                   	push   eax
c0016f08:	e8 d3 cc ff ff       	call   c0013be0 <Device::~Device()>
c0016f0d:	83 c4 10             	add    esp,0x10
c0016f10:	90                   	nop
c0016f11:	83 c4 0c             	add    esp,0xc
c0016f14:	c3                   	ret    
c0016f15:	90                   	nop

c0016f16 <Video::~Video()>:
c0016f16:	83 ec 0c             	sub    esp,0xc
c0016f19:	83 ec 0c             	sub    esp,0xc
c0016f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f20:	e8 cd ff ff ff       	call   c0016ef2 <Video::~Video()>
c0016f25:	83 c4 10             	add    esp,0x10
c0016f28:	83 ec 08             	sub    esp,0x8
c0016f2b:	68 64 01 00 00       	push   0x164
c0016f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f34:	e8 ce b8 ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0016f39:	83 c4 10             	add    esp,0x10
c0016f3c:	83 c4 0c             	add    esp,0xc
c0016f3f:	c3                   	ret    

c0016f40 <Video::isMonochrome()>:
c0016f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f44:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016f4a:	c3                   	ret    
c0016f4b:	90                   	nop

c0016f4c <Video::getWidth()>:
c0016f4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f50:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016f56:	c3                   	ret    
c0016f57:	90                   	nop

c0016f58 <Video::getHeight()>:
c0016f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f5c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f62:	c3                   	ret    
c0016f63:	90                   	nop

c0016f64 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016f64:	55                   	push   ebp
c0016f65:	57                   	push   edi
c0016f66:	56                   	push   esi
c0016f67:	53                   	push   ebx
c0016f68:	83 ec 2c             	sub    esp,0x2c
c0016f6b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f6f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016f73:	83 f8 01             	cmp    eax,0x1
c0016f76:	19 c9                	sbb    ecx,ecx
c0016f78:	31 db                	xor    ebx,ebx
c0016f7a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016f7e:	89 cd                	mov    ebp,ecx
c0016f80:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016f88:	f7 d5                	not    ebp
c0016f8a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016f90:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016f94:	01 d8                	add    eax,ebx
c0016f96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f9a:	56                   	push   esi
c0016f9b:	e8 b8 ff ff ff       	call   c0016f58 <Video::getHeight()>
c0016fa0:	59                   	pop    ecx
c0016fa1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016fa5:	7e 70                	jle    c0017017 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016fa7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016fab:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016faf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016fb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fb6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016fba:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016fc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fc5:	89 f8                	mov    eax,edi
c0016fc7:	83 c0 20             	add    eax,0x20
c0016fca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fce:	56                   	push   esi
c0016fcf:	e8 78 ff ff ff       	call   c0016f4c <Video::getWidth()>
c0016fd4:	5a                   	pop    edx
c0016fd5:	39 c7                	cmp    edi,eax
c0016fd7:	7d 34                	jge    c001700d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016fd9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016fde:	74 05                	je     c0016fe5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016fe0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fe2:	55                   	push   ebp
c0016fe3:	eb 0d                	jmp    c0016ff2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016fe5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016fea:	74 12                	je     c0016ffe <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016fec:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ff2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ff6:	57                   	push   edi
c0016ff7:	56                   	push   esi
c0016ff8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ffb:	83 c4 10             	add    esp,0x10
c0016ffe:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017002:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017006:	47                   	inc    edi
c0017007:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001700b:	75 c1                	jne    c0016fce <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001700d:	43                   	inc    ebx
c001700e:	83 fb 20             	cmp    ebx,0x20
c0017011:	0f 85 79 ff ff ff    	jne    c0016f90 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017017:	83 c4 2c             	add    esp,0x2c
c001701a:	5b                   	pop    ebx
c001701b:	5e                   	pop    esi
c001701c:	5f                   	pop    edi
c001701d:	5d                   	pop    ebp
c001701e:	c3                   	ret    
c001701f:	90                   	nop

c0017020 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017020:	55                   	push   ebp
c0017021:	57                   	push   edi
c0017022:	56                   	push   esi
c0017023:	53                   	push   ebx
c0017024:	83 ec 28             	sub    esp,0x28
c0017027:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001702b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001702f:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017033:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017037:	c1 e7 08             	shl    edi,0x8
c001703a:	01 c7                	add    edi,eax
c001703c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017040:	c1 e0 08             	shl    eax,0x8
c0017043:	01 d0                	add    eax,edx
c0017045:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017049:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001704d:	0f af c7             	imul   eax,edi
c0017050:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017057:	50                   	push   eax
c0017058:	e8 bb 85 ff ff       	call   c000f618 <malloc>
c001705d:	83 c4 10             	add    esp,0x10
c0017060:	89 c5                	mov    ebp,eax
c0017062:	85 c0                	test   eax,eax
c0017064:	75 15                	jne    c001707b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017066:	83 ec 0c             	sub    esp,0xc
c0017069:	68 b9 aa 02 c0       	push   0xc002aab9
c001706e:	e8 74 b8 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017073:	83 c4 10             	add    esp,0x10
c0017076:	e9 1c 01 00 00       	jmp    c0017197 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001707b:	be 12 00 00 00       	mov    esi,0x12
c0017080:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017084:	74 11                	je     c0017097 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017086:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001708a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001708e:	c1 fe 03             	sar    esi,0x3
c0017091:	0f af f0             	imul   esi,eax
c0017094:	83 c6 12             	add    esi,0x12
c0017097:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001709b:	74 04                	je     c00170a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001709d:	85 ff                	test   edi,edi
c001709f:	75 12                	jne    c00170b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00170a1:	83 ec 0c             	sub    esp,0xc
c00170a4:	68 d0 aa 02 c0       	push   0xc002aad0
c00170a9:	e8 39 b8 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00170ae:	e9 ce 00 00 00       	jmp    c0017181 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00170b3:	52                   	push   edx
c00170b4:	52                   	push   edx
c00170b5:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00170b9:	50                   	push   eax
c00170ba:	68 e5 aa 02 c0       	push   0xc002aae5
c00170bf:	e8 23 b8 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00170c4:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00170c8:	83 c4 10             	add    esp,0x10
c00170cb:	80 fa 02             	cmp    dl,0x2
c00170ce:	0f 85 98 00 00 00    	jne    c001716c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00170d4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00170d9:	75 10                	jne    c00170eb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00170db:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00170df:	75 0a                	jne    c00170eb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00170e1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00170e4:	83 e8 18             	sub    eax,0x18
c00170e7:	a8 f7                	test   al,0xf7
c00170e9:	74 0a                	je     c00170f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00170eb:	83 ec 0c             	sub    esp,0xc
c00170ee:	68 f2 aa 02 c0       	push   0xc002aaf2
c00170f3:	eb 7f                	jmp    c0017174 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00170f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170fd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017105:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017109:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017111:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017115:	75 0c                	jne    c0017123 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017117:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001711c:	c1 e0 18             	shl    eax,0x18
c001711f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017123:	41                   	inc    ecx
c0017124:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017129:	c1 e2 10             	shl    edx,0x10
c001712c:	89 d0                	mov    eax,edx
c001712e:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017133:	c1 e2 08             	shl    edx,0x8
c0017136:	09 c2                	or     edx,eax
c0017138:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001713c:	09 c2                	or     edx,eax
c001713e:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017142:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017146:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001714a:	c1 f8 03             	sar    eax,0x3
c001714d:	01 c6                	add    esi,eax
c001714f:	89 c8                	mov    eax,ecx
c0017151:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017155:	39 c7                	cmp    edi,eax
c0017157:	7f b0                	jg     c0017109 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017159:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001715d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017161:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017164:	7e 22                	jle    c0017188 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017166:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001716a:	eb 99                	jmp    c0017105 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001716c:	50                   	push   eax
c001716d:	50                   	push   eax
c001716e:	52                   	push   edx
c001716f:	68 00 ab 02 c0       	push   0xc002ab00
c0017174:	e8 6e b7 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017179:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001717c:	e8 a7 84 ff ff       	call   c000f628 <free>
c0017181:	83 c4 10             	add    esp,0x10
c0017184:	31 ed                	xor    ebp,ebp
c0017186:	eb 0f                	jmp    c0017197 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017188:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001718c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001718f:	89 38                	mov    DWORD PTR [eax],edi
c0017191:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017195:	89 08                	mov    DWORD PTR [eax],ecx
c0017197:	83 c4 1c             	add    esp,0x1c
c001719a:	89 e8                	mov    eax,ebp
c001719c:	5b                   	pop    ebx
c001719d:	5e                   	pop    esi
c001719e:	5f                   	pop    edi
c001719f:	5d                   	pop    ebp
c00171a0:	c3                   	ret    
c00171a1:	90                   	nop

c00171a2 <Video::putTGA(int, int, unsigned char*, int)>:
c00171a2:	55                   	push   ebp
c00171a3:	57                   	push   edi
c00171a4:	56                   	push   esi
c00171a5:	53                   	push   ebx
c00171a6:	83 ec 28             	sub    esp,0x28
c00171a9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00171ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171b1:	50                   	push   eax
c00171b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171b6:	50                   	push   eax
c00171b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171bf:	56                   	push   esi
c00171c0:	e8 5b fe ff ff       	call   c0017020 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00171c5:	83 c4 20             	add    esp,0x20
c00171c8:	85 c0                	test   eax,eax
c00171ca:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00171ce:	74 35                	je     c0017205 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00171d0:	89 c7                	mov    edi,eax
c00171d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171d6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00171da:	39 d8                	cmp    eax,ebx
c00171dc:	7e 27                	jle    c0017205 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00171de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00171e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00171ea:	39 e8                	cmp    eax,ebp
c00171ec:	7e 14                	jle    c0017202 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00171ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00171f0:	83 c7 04             	add    edi,0x4
c00171f3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00171f6:	53                   	push   ebx
c00171f7:	55                   	push   ebp
c00171f8:	45                   	inc    ebp
c00171f9:	56                   	push   esi
c00171fa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00171fd:	83 c4 10             	add    esp,0x10
c0017200:	eb e0                	jmp    c00171e2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017202:	43                   	inc    ebx
c0017203:	eb cd                	jmp    c00171d2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017205:	83 c4 1c             	add    esp,0x1c
c0017208:	5b                   	pop    ebx
c0017209:	5e                   	pop    esi
c001720a:	5f                   	pop    edi
c001720b:	5d                   	pop    ebp
c001720c:	c3                   	ret    
c001720d:	90                   	nop

c001720e <ACPI::close(int, int, void*)>:
c001720e:	83 ec 1c             	sub    esp,0x1c
c0017211:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017219:	74 0a                	je     c0017225 <ACPI::close(int, int, void*)+0x17>
c001721b:	b8 00 00 00 00       	mov    eax,0x0
c0017220:	e9 9a 00 00 00       	jmp    c00172bf <ACPI::close(int, int, void*)+0xb1>
c0017225:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001722a:	75 37                	jne    c0017263 <ACPI::close(int, int, void*)+0x55>
c001722c:	83 ec 0c             	sub    esp,0xc
c001722f:	68 5c ab 02 c0       	push   0xc002ab5c
c0017234:	e8 ae b6 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017239:	83 c4 10             	add    esp,0x10
c001723c:	a1 88 01 03 c0       	mov    eax,ds:0xc0030188
c0017241:	85 c0                	test   eax,eax
c0017243:	74 07                	je     c001724c <ACPI::close(int, int, void*)+0x3e>
c0017245:	a1 88 01 03 c0       	mov    eax,ds:0xc0030188
c001724a:	ff d0                	call   eax
c001724c:	83 ec 0c             	sub    esp,0xc
c001724f:	68 80 ac 02 c0       	push   0xc002ac80
c0017254:	e8 02 2c 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0017259:	83 c4 10             	add    esp,0x10
c001725c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017261:	eb 5c                	jmp    c00172bf <ACPI::close(int, int, void*)+0xb1>
c0017263:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017268:	75 50                	jne    c00172ba <ACPI::close(int, int, void*)+0xac>
c001726a:	a1 84 01 03 c0       	mov    eax,ds:0xc0030184
c001726f:	85 c0                	test   eax,eax
c0017271:	74 07                	je     c001727a <ACPI::close(int, int, void*)+0x6c>
c0017273:	a1 84 01 03 c0       	mov    eax,ds:0xc0030184
c0017278:	ff d0                	call   eax
c001727a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001727f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017284:	83 e0 02             	and    eax,0x2
c0017287:	74 1c                	je     c00172a5 <ACPI::close(int, int, void*)+0x97>
c0017289:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017290:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017294:	89 c2                	mov    edx,eax
c0017296:	ec                   	in     al,dx
c0017297:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001729b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001729f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00172a3:	eb da                	jmp    c001727f <ACPI::close(int, int, void*)+0x71>
c00172a5:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00172ac:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00172b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00172b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00172b9:	ee                   	out    dx,al
c00172ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00172bf:	83 c4 1c             	add    esp,0x1c
c00172c2:	c3                   	ret    

c00172c3 <findRSDP()>:
c00172c3:	83 ec 1c             	sub    esp,0x1c
c00172c6:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00172cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172d1:	83 e0 04             	and    eax,0x4
c00172d4:	84 c0                	test   al,al
c00172d6:	75 07                	jne    c00172df <findRSDP()+0x1c>
c00172d8:	b8 00 00 00 00       	mov    eax,0x0
c00172dd:	eb 6a                	jmp    c0017349 <findRSDP()+0x86>
c00172df:	a1 10 db 02 c0       	mov    eax,ds:0xc002db10
c00172e4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00172e9:	7f 1b                	jg     c0017306 <findRSDP()+0x43>
c00172eb:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00172f0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00172f6:	83 e2 fb             	and    edx,0xfffffffb
c00172f9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00172ff:	b8 00 00 00 00       	mov    eax,0x0
c0017304:	eb 43                	jmp    c0017349 <findRSDP()+0x86>
c0017306:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001730e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017316:	77 2c                	ja     c0017344 <findRSDP()+0x81>
c0017318:	83 ec 04             	sub    esp,0x4
c001731b:	6a 08                	push   0x8
c001731d:	68 69 ab 02 c0       	push   0xc002ab69
c0017322:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017326:	e8 12 93 fe ff       	call   c000063d <memcmp>
c001732b:	83 c4 10             	add    esp,0x10
c001732e:	85 c0                	test   eax,eax
c0017330:	0f 94 c0             	sete   al
c0017333:	84 c0                	test   al,al
c0017335:	74 06                	je     c001733d <findRSDP()+0x7a>
c0017337:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001733b:	eb 0c                	jmp    c0017349 <findRSDP()+0x86>
c001733d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017342:	eb ca                	jmp    c001730e <findRSDP()+0x4b>
c0017344:	b8 00 00 00 00       	mov    eax,0x0
c0017349:	83 c4 1c             	add    esp,0x1c
c001734c:	c3                   	ret    

c001734d <loadACPITables(unsigned char*)>:
c001734d:	56                   	push   esi
c001734e:	53                   	push   ebx
c001734f:	83 ec 44             	sub    esp,0x44
c0017352:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017357:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001735d:	83 e0 04             	and    eax,0x4
c0017360:	84 c0                	test   al,al
c0017362:	0f 84 05 02 00 00    	je     c001756d <loadACPITables(unsigned char*)+0x220>
c0017368:	a0 a0 03 03 c0       	mov    al,ds:0xc00303a0
c001736d:	84 c0                	test   al,al
c001736f:	74 75                	je     c00173e6 <loadACPITables(unsigned char*)+0x99>
c0017371:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017375:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001737d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017380:	83 e8 24             	sub    eax,0x24
c0017383:	c1 e8 03             	shr    eax,0x3
c0017386:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001738a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017392:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017396:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001739a:	0f 8d b2 00 00 00    	jge    c0017452 <loadACPITables(unsigned char*)+0x105>
c00173a0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173a4:	83 c0 24             	add    eax,0x24
c00173a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173b7:	c1 e0 03             	shl    eax,0x3
c00173ba:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00173be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00173c2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00173c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00173c7:	89 c1                	mov    ecx,eax
c00173c9:	a1 8c 01 03 c0       	mov    eax,ds:0xc003018c
c00173ce:	8d 50 01             	lea    edx,[eax+0x1]
c00173d1:	89 15 8c 01 03 c0    	mov    DWORD PTR ds:0xc003018c,edx
c00173d7:	89 ca                	mov    edx,ecx
c00173d9:	89 14 c5 a4 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe5c],edx
c00173e0:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00173e4:	eb ac                	jmp    c0017392 <loadACPITables(unsigned char*)+0x45>
c00173e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173f5:	83 e8 24             	sub    eax,0x24
c00173f8:	c1 e8 02             	shr    eax,0x2
c00173fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173ff:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017407:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001740b:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001740f:	7d 41                	jge    c0017452 <loadACPITables(unsigned char*)+0x105>
c0017411:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017415:	83 c0 24             	add    eax,0x24
c0017418:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001741c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017420:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017424:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017428:	c1 e0 02             	shl    eax,0x2
c001742b:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001742f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017433:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017435:	a1 8c 01 03 c0       	mov    eax,ds:0xc003018c
c001743a:	8d 50 01             	lea    edx,[eax+0x1]
c001743d:	89 15 8c 01 03 c0    	mov    DWORD PTR ds:0xc003018c,edx
c0017443:	89 ca                	mov    edx,ecx
c0017445:	89 14 c5 a4 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe5c],edx
c001744c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017450:	eb b5                	jmp    c0017407 <loadACPITables(unsigned char*)+0xba>
c0017452:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001745a:	a1 8c 01 03 c0       	mov    eax,ds:0xc003018c
c001745f:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017463:	0f 8d 05 01 00 00    	jge    c001756e <loadACPITables(unsigned char*)+0x221>
c0017469:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001746d:	8b 04 c5 a4 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfe5c]
c0017474:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001747c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017484:	25 ff 0f 00 00       	and    eax,0xfff
c0017489:	89 c6                	mov    esi,eax
c001748b:	e8 f7 a5 ff ff       	call   c0011a87 <Virt::getAKernelVAS()>
c0017490:	89 c3                	mov    ebx,eax
c0017492:	83 ec 0c             	sub    esp,0xc
c0017495:	6a 01                	push   0x1
c0017497:	e8 5b a4 ff ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c001749c:	83 c4 10             	add    esp,0x10
c001749f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174a3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174a9:	83 ec 0c             	sub    esp,0xc
c00174ac:	6a 01                	push   0x1
c00174ae:	6a 01                	push   0x1
c00174b0:	50                   	push   eax
c00174b1:	52                   	push   edx
c00174b2:	53                   	push   ebx
c00174b3:	e8 fe ad ff ff       	call   c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00174b8:	83 c4 20             	add    esp,0x20
c00174bb:	09 f0                	or     eax,esi
c00174bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00174c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174c5:	c1 e0 03             	shl    eax,0x3
c00174c8:	05 a0 01 03 c0       	add    eax,0xc00301a0
c00174cd:	83 ec 04             	sub    esp,0x4
c00174d0:	6a 04                	push   0x4
c00174d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174d6:	50                   	push   eax
c00174d7:	e8 c4 91 fe ff       	call   c00006a0 <memcpy>
c00174dc:	83 c4 10             	add    esp,0x10
c00174df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00174ee:	05 00 10 00 00       	add    eax,0x1000
c00174f3:	c1 e8 0c             	shr    eax,0xc
c00174f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0017501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017505:	25 ff 0f 00 00       	and    eax,0xfff
c001750a:	89 c6                	mov    esi,eax
c001750c:	e8 76 a5 ff ff       	call   c0011a87 <Virt::getAKernelVAS()>
c0017511:	89 c3                	mov    ebx,eax
c0017513:	83 ec 0c             	sub    esp,0xc
c0017516:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001751a:	e8 d8 a3 ff ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c001751f:	83 c4 10             	add    esp,0x10
c0017522:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017526:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001752c:	83 ec 0c             	sub    esp,0xc
c001752f:	6a 01                	push   0x1
c0017531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017535:	50                   	push   eax
c0017536:	52                   	push   edx
c0017537:	53                   	push   ebx
c0017538:	e8 79 ad ff ff       	call   c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001753d:	83 c4 20             	add    esp,0x20
c0017540:	09 f0                	or     eax,esi
c0017542:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017549:	83 ec 0c             	sub    esp,0xc
c001754c:	50                   	push   eax
c001754d:	e8 09 a7 ff ff       	call   c0011c5b <Virt::freeKernelVirtualPages(unsigned long)>
c0017552:	83 c4 10             	add    esp,0x10
c0017555:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017559:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001755d:	89 14 c5 a4 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe5c],edx
c0017564:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017568:	e9 ed fe ff ff       	jmp    c001745a <loadACPITables(unsigned char*)+0x10d>
c001756d:	90                   	nop
c001756e:	83 c4 44             	add    esp,0x44
c0017571:	5b                   	pop    ebx
c0017572:	5e                   	pop    esi
c0017573:	c3                   	ret    

c0017574 <findRSDT(unsigned char*)>:
c0017574:	56                   	push   esi
c0017575:	53                   	push   ebx
c0017576:	83 ec 44             	sub    esp,0x44
c0017579:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001757e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017584:	83 e0 04             	and    eax,0x4
c0017587:	84 c0                	test   al,al
c0017589:	75 0a                	jne    c0017595 <findRSDT(unsigned char*)+0x21>
c001758b:	b8 00 00 00 00       	mov    eax,0x0
c0017590:	e9 f7 00 00 00       	jmp    c001768c <findRSDT(unsigned char*)+0x118>
c0017595:	83 ec 04             	sub    esp,0x4
c0017598:	6a 24                	push   0x24
c001759a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001759e:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175a2:	50                   	push   eax
c00175a3:	e8 f8 90 fe ff       	call   c00006a0 <memcpy>
c00175a8:	83 c4 10             	add    esp,0x10
c00175ab:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00175af:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00175b3:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00175bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00175bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175c3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00175c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175d3:	25 ff 0f 00 00       	and    eax,0xfff
c00175d8:	89 c6                	mov    esi,eax
c00175da:	e8 a8 a4 ff ff       	call   c0011a87 <Virt::getAKernelVAS()>
c00175df:	89 c3                	mov    ebx,eax
c00175e1:	83 ec 0c             	sub    esp,0xc
c00175e4:	6a 02                	push   0x2
c00175e6:	e8 0c a3 ff ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c00175eb:	83 c4 10             	add    esp,0x10
c00175ee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00175f2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175f8:	83 ec 0c             	sub    esp,0xc
c00175fb:	6a 01                	push   0x1
c00175fd:	6a 02                	push   0x2
c00175ff:	50                   	push   eax
c0017600:	52                   	push   edx
c0017601:	53                   	push   ebx
c0017602:	e8 af ac ff ff       	call   c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017607:	83 c4 20             	add    esp,0x20
c001760a:	09 f0                	or     eax,esi
c001760c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017610:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017614:	25 ff 0f 00 00       	and    eax,0xfff
c0017619:	89 c6                	mov    esi,eax
c001761b:	e8 67 a4 ff ff       	call   c0011a87 <Virt::getAKernelVAS()>
c0017620:	89 c3                	mov    ebx,eax
c0017622:	83 ec 0c             	sub    esp,0xc
c0017625:	6a 02                	push   0x2
c0017627:	e8 cb a2 ff ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c001762c:	83 c4 10             	add    esp,0x10
c001762f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017633:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017639:	83 ec 0c             	sub    esp,0xc
c001763c:	6a 01                	push   0x1
c001763e:	6a 02                	push   0x2
c0017640:	50                   	push   eax
c0017641:	52                   	push   edx
c0017642:	53                   	push   ebx
c0017643:	e8 6e ac ff ff       	call   c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017648:	83 c4 20             	add    esp,0x20
c001764b:	09 f0                	or     eax,esi
c001764d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017651:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017656:	75 11                	jne    c0017669 <findRSDT(unsigned char*)+0xf5>
c0017658:	c6 05 a0 03 03 c0 00 	mov    BYTE PTR ds:0xc00303a0,0x0
c001765f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017663:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017667:	eb 1f                	jmp    c0017688 <findRSDT(unsigned char*)+0x114>
c0017669:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001766e:	75 11                	jne    c0017681 <findRSDT(unsigned char*)+0x10d>
c0017670:	c6 05 a0 03 03 c0 01 	mov    BYTE PTR ds:0xc00303a0,0x1
c0017677:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001767b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001767f:	eb 07                	jmp    c0017688 <findRSDT(unsigned char*)+0x114>
c0017681:	b8 00 00 00 00       	mov    eax,0x0
c0017686:	eb 04                	jmp    c001768c <findRSDT(unsigned char*)+0x118>
c0017688:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001768c:	83 c4 44             	add    esp,0x44
c001768f:	5b                   	pop    ebx
c0017690:	5e                   	pop    esi
c0017691:	c3                   	ret    

c0017692 <findDataTable(unsigned char*, char*)>:
c0017692:	83 ec 1c             	sub    esp,0x1c
c0017695:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001769a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00176a0:	83 e0 04             	and    eax,0x4
c00176a3:	84 c0                	test   al,al
c00176a5:	75 07                	jne    c00176ae <findDataTable(unsigned char*, char*)+0x1c>
c00176a7:	b8 00 00 00 00       	mov    eax,0x0
c00176ac:	eb 7c                	jmp    c001772a <findDataTable(unsigned char*, char*)+0x98>
c00176ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176b6:	a1 8c 01 03 c0       	mov    eax,ds:0xc003018c
c00176bb:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00176bf:	7d 3a                	jge    c00176fb <findDataTable(unsigned char*, char*)+0x69>
c00176c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176c5:	c1 e0 03             	shl    eax,0x3
c00176c8:	05 a0 01 03 c0       	add    eax,0xc00301a0
c00176cd:	83 ec 04             	sub    esp,0x4
c00176d0:	6a 04                	push   0x4
c00176d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176d6:	50                   	push   eax
c00176d7:	e8 61 8f fe ff       	call   c000063d <memcmp>
c00176dc:	83 c4 10             	add    esp,0x10
c00176df:	85 c0                	test   eax,eax
c00176e1:	0f 94 c0             	sete   al
c00176e4:	84 c0                	test   al,al
c00176e6:	74 0d                	je     c00176f5 <findDataTable(unsigned char*, char*)+0x63>
c00176e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176ec:	8b 04 c5 a4 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfe5c]
c00176f3:	eb 35                	jmp    c001772a <findDataTable(unsigned char*, char*)+0x98>
c00176f5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00176f9:	eb bb                	jmp    c00176b6 <findDataTable(unsigned char*, char*)+0x24>
c00176fb:	a0 a0 03 03 c0       	mov    al,ds:0xc00303a0
c0017700:	84 c0                	test   al,al
c0017702:	74 07                	je     c001770b <findDataTable(unsigned char*, char*)+0x79>
c0017704:	b8 58 00 00 00       	mov    eax,0x58
c0017709:	eb 05                	jmp    c0017710 <findDataTable(unsigned char*, char*)+0x7e>
c001770b:	b8 52 00 00 00       	mov    eax,0x52
c0017710:	83 ec 04             	sub    esp,0x4
c0017713:	50                   	push   eax
c0017714:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017718:	68 a4 ac 02 c0       	push   0xc002aca4
c001771d:	e8 c5 b1 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017722:	83 c4 10             	add    esp,0x10
c0017725:	b8 00 00 00 00       	mov    eax,0x0
c001772a:	83 c4 1c             	add    esp,0x1c
c001772d:	c3                   	ret    

c001772e <scanMADT()>:
c001772e:	53                   	push   ebx
c001772f:	83 ec 38             	sub    esp,0x38
c0017732:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017737:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001773d:	83 e0 04             	and    eax,0x4
c0017740:	84 c0                	test   al,al
c0017742:	0f 84 63 04 00 00    	je     c0017bab <scanMADT()+0x47d>
c0017748:	e8 76 fb ff ff       	call   c00172c3 <findRSDP()>
c001774d:	a3 ac 03 03 c0       	mov    ds:0xc00303ac,eax
c0017752:	a1 ac 03 03 c0       	mov    eax,ds:0xc00303ac
c0017757:	85 c0                	test   eax,eax
c0017759:	75 19                	jne    c0017774 <scanMADT()+0x46>
c001775b:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017760:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017766:	83 e2 fb             	and    edx,0xfffffffb
c0017769:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001776f:	e9 3b 04 00 00       	jmp    c0017baf <scanMADT()+0x481>
c0017774:	a1 ac 03 03 c0       	mov    eax,ds:0xc00303ac
c0017779:	83 ec 0c             	sub    esp,0xc
c001777c:	50                   	push   eax
c001777d:	e8 f2 fd ff ff       	call   c0017574 <findRSDT(unsigned char*)>
c0017782:	83 c4 10             	add    esp,0x10
c0017785:	a3 a8 03 03 c0       	mov    ds:0xc00303a8,eax
c001778a:	a1 a8 03 03 c0       	mov    eax,ds:0xc00303a8
c001778f:	85 c0                	test   eax,eax
c0017791:	75 19                	jne    c00177ac <scanMADT()+0x7e>
c0017793:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017798:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001779e:	83 e2 fb             	and    edx,0xfffffffb
c00177a1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177a7:	e9 03 04 00 00       	jmp    c0017baf <scanMADT()+0x481>
c00177ac:	a1 a8 03 03 c0       	mov    eax,ds:0xc00303a8
c00177b1:	83 ec 0c             	sub    esp,0xc
c00177b4:	50                   	push   eax
c00177b5:	e8 93 fb ff ff       	call   c001734d <loadACPITables(unsigned char*)>
c00177ba:	83 c4 10             	add    esp,0x10
c00177bd:	a1 a8 03 03 c0       	mov    eax,ds:0xc00303a8
c00177c2:	83 ec 08             	sub    esp,0x8
c00177c5:	68 72 ab 02 c0       	push   0xc002ab72
c00177ca:	50                   	push   eax
c00177cb:	e8 c2 fe ff ff       	call   c0017692 <findDataTable(unsigned char*, char*)>
c00177d0:	83 c4 10             	add    esp,0x10
c00177d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177d7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00177dc:	75 19                	jne    c00177f7 <scanMADT()+0xc9>
c00177de:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00177e3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177e9:	83 e2 fe             	and    edx,0xfffffffe
c00177ec:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177f2:	e9 b8 03 00 00       	jmp    c0017baf <scanMADT()+0x481>
c00177f7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00177ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017803:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017806:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001780a:	0f 87 9f 03 00 00    	ja     c0017baf <scanMADT()+0x481>
c0017810:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017818:	0f 87 91 03 00 00    	ja     c0017baf <scanMADT()+0x481>
c001781e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017822:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001782a:	8d 50 01             	lea    edx,[eax+0x1]
c001782d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017831:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017835:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017839:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001783d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017841:	8d 50 01             	lea    edx,[eax+0x1]
c0017844:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017848:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001784c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017850:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017854:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017859:	0f 86 4f 03 00 00    	jbe    c0017bae <scanMADT()+0x480>
c001785f:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017864:	75 57                	jne    c00178bd <scanMADT()+0x18f>
c0017866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001786a:	8d 50 01             	lea    edx,[eax+0x1]
c001786d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017871:	8a 15 a0 05 03 c0    	mov    dl,BYTE PTR ds:0xc00305a0
c0017877:	0f b6 d2             	movzx  edx,dl
c001787a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001787e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017882:	88 82 e0 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfa20],al
c0017888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001788c:	8d 50 01             	lea    edx,[eax+0x1]
c001788f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017893:	8a 15 a0 05 03 c0    	mov    dl,BYTE PTR ds:0xc00305a0
c0017899:	8d 4a 01             	lea    ecx,[edx+0x1]
c001789c:	88 0d a0 05 03 c0    	mov    BYTE PTR ds:0xc00305a0,cl
c00178a2:	0f b6 d2             	movzx  edx,dl
c00178a5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178a9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178ad:	88 82 c0 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfa40],al
c00178b3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178b8:	e9 da 02 00 00       	jmp    c0017b97 <scanMADT()+0x469>
c00178bd:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00178c2:	0f 85 14 01 00 00    	jne    c00179dc <scanMADT()+0x2ae>
c00178c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178cc:	8d 50 01             	lea    edx,[eax+0x1]
c00178cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178d3:	8a 15 60 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030460
c00178d9:	0f b6 d2             	movzx  edx,dl
c00178dc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178e0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178e4:	88 82 80 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb80],al
c00178ea:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00178ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178f6:	01 d0                	add    eax,edx
c00178f8:	83 c0 2c             	add    eax,0x2c
c00178fb:	8a 00                	mov    al,BYTE PTR [eax]
c00178fd:	0f b6 d0             	movzx  edx,al
c0017900:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017904:	8d 48 01             	lea    ecx,[eax+0x1]
c0017907:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001790b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001790f:	0f b6 c0             	movzx  eax,al
c0017912:	c1 e0 08             	shl    eax,0x8
c0017915:	89 d1                	mov    ecx,edx
c0017917:	09 c1                	or     ecx,eax
c0017919:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001791d:	8d 50 02             	lea    edx,[eax+0x2]
c0017920:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017924:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017928:	0f b6 c0             	movzx  eax,al
c001792b:	c1 e0 10             	shl    eax,0x10
c001792e:	09 c1                	or     ecx,eax
c0017930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017934:	8d 50 03             	lea    edx,[eax+0x3]
c0017937:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001793b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001793f:	0f b6 c0             	movzx  eax,al
c0017942:	c1 e0 18             	shl    eax,0x18
c0017945:	09 c1                	or     ecx,eax
c0017947:	89 ca                	mov    edx,ecx
c0017949:	a0 60 04 03 c0       	mov    al,ds:0xc0030460
c001794e:	0f b6 c0             	movzx  eax,al
c0017951:	89 14 85 a0 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb60],edx
c0017958:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001795d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017961:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017965:	01 d0                	add    eax,edx
c0017967:	83 c0 2c             	add    eax,0x2c
c001796a:	8a 00                	mov    al,BYTE PTR [eax]
c001796c:	0f b6 d0             	movzx  edx,al
c001796f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017973:	8d 48 01             	lea    ecx,[eax+0x1]
c0017976:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001797a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001797e:	0f b6 c0             	movzx  eax,al
c0017981:	c1 e0 08             	shl    eax,0x8
c0017984:	89 d1                	mov    ecx,edx
c0017986:	09 c1                	or     ecx,eax
c0017988:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001798c:	8d 50 02             	lea    edx,[eax+0x2]
c001798f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017993:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017997:	0f b6 c0             	movzx  eax,al
c001799a:	c1 e0 10             	shl    eax,0x10
c001799d:	09 c1                	or     ecx,eax
c001799f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179a3:	8d 50 03             	lea    edx,[eax+0x3]
c00179a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179aa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179ae:	0f b6 c0             	movzx  eax,al
c00179b1:	c1 e0 18             	shl    eax,0x18
c00179b4:	09 c1                	or     ecx,eax
c00179b6:	89 ca                	mov    edx,ecx
c00179b8:	a0 60 04 03 c0       	mov    al,ds:0xc0030460
c00179bd:	0f b6 c0             	movzx  eax,al
c00179c0:	89 14 85 20 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfae0],edx
c00179c7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00179cc:	a0 60 04 03 c0       	mov    al,ds:0xc0030460
c00179d1:	40                   	inc    eax
c00179d2:	a2 60 04 03 c0       	mov    ds:0xc0030460,al
c00179d7:	e9 bb 01 00 00       	jmp    c0017b97 <scanMADT()+0x469>
c00179dc:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00179e1:	0f 85 e9 00 00 00    	jne    c0017ad0 <scanMADT()+0x3a2>
c00179e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179eb:	8d 50 01             	lea    edx,[eax+0x1]
c00179ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179f6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179fa:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00179fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a02:	8d 50 01             	lea    edx,[eax+0x1]
c0017a05:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a0d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a11:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017a15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a1d:	01 d0                	add    eax,edx
c0017a1f:	83 c0 2c             	add    eax,0x2c
c0017a22:	8a 00                	mov    al,BYTE PTR [eax]
c0017a24:	0f b6 d0             	movzx  edx,al
c0017a27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a2b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a32:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a36:	0f b6 c0             	movzx  eax,al
c0017a39:	c1 e0 08             	shl    eax,0x8
c0017a3c:	89 d1                	mov    ecx,edx
c0017a3e:	09 c1                	or     ecx,eax
c0017a40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a44:	8d 50 02             	lea    edx,[eax+0x2]
c0017a47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a4b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a4f:	0f b6 c0             	movzx  eax,al
c0017a52:	c1 e0 10             	shl    eax,0x10
c0017a55:	09 c1                	or     ecx,eax
c0017a57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a5b:	8d 50 03             	lea    edx,[eax+0x3]
c0017a5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a62:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a66:	0f b6 c0             	movzx  eax,al
c0017a69:	c1 e0 18             	shl    eax,0x18
c0017a6c:	09 c8                	or     eax,ecx
c0017a6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a72:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a7f:	01 d0                	add    eax,edx
c0017a81:	83 c0 2c             	add    eax,0x2c
c0017a84:	8a 00                	mov    al,BYTE PTR [eax]
c0017a86:	0f b6 c0             	movzx  eax,al
c0017a89:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017a8d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a94:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017a98:	0f b6 d2             	movzx  edx,dl
c0017a9b:	c1 e2 08             	shl    edx,0x8
c0017a9e:	09 d0                	or     eax,edx
c0017aa0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017aa5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017aaa:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017aaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ab3:	88 90 20 cd 02 c0    	mov    BYTE PTR [eax-0x3ffd32e0],dl
c0017ab9:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017abe:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017ac3:	66 89 84 12 40 04 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfbc0],ax
c0017acb:	e9 c7 00 00 00       	jmp    c0017b97 <scanMADT()+0x469>
c0017ad0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017ad5:	0f 85 b0 00 00 00    	jne    c0017b8b <scanMADT()+0x45d>
c0017adb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017adf:	8d 50 01             	lea    edx,[eax+0x1]
c0017ae2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ae6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017aee:	0f b6 c0             	movzx  eax,al
c0017af1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017af5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017af9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017afd:	01 d0                	add    eax,edx
c0017aff:	83 c0 2c             	add    eax,0x2c
c0017b02:	8a 00                	mov    al,BYTE PTR [eax]
c0017b04:	0f b6 d0             	movzx  edx,al
c0017b07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b0b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b12:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b16:	0f b6 c0             	movzx  eax,al
c0017b19:	c1 e0 08             	shl    eax,0x8
c0017b1c:	09 d0                	or     eax,edx
c0017b1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b22:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017b27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b2b:	8d 50 01             	lea    edx,[eax+0x1]
c0017b2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b36:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b3a:	0f b6 c0             	movzx  eax,al
c0017b3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b45:	c1 e0 08             	shl    eax,0x8
c0017b48:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017b4c:	89 c1                	mov    ecx,eax
c0017b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b52:	c1 e0 18             	shl    eax,0x18
c0017b55:	89 c3                	mov    ebx,eax
c0017b57:	a1 b0 03 03 c0       	mov    eax,ds:0xc00303b0
c0017b5c:	8d 50 01             	lea    edx,[eax+0x1]
c0017b5f:	89 15 b0 03 03 c0    	mov    DWORD PTR ds:0xc00303b0,edx
c0017b65:	09 d9                	or     ecx,ebx
c0017b67:	89 ca                	mov    edx,ecx
c0017b69:	89 14 85 c0 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc40],edx
c0017b70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017b74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b7c:	68 d4 ac 02 c0       	push   0xc002acd4
c0017b81:	e8 61 ad ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017b86:	83 c4 10             	add    esp,0x10
c0017b89:	eb 0c                	jmp    c0017b97 <scanMADT()+0x469>
c0017b8b:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017b90:	75 05                	jne    c0017b97 <scanMADT()+0x469>
c0017b92:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017b97:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017b9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ba0:	01 d0                	add    eax,edx
c0017ba2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017ba6:	e9 54 fc ff ff       	jmp    c00177ff <scanMADT()+0xd1>
c0017bab:	90                   	nop
c0017bac:	eb 01                	jmp    c0017baf <scanMADT()+0x481>
c0017bae:	90                   	nop
c0017baf:	83 c4 38             	add    esp,0x38
c0017bb2:	5b                   	pop    ebx
c0017bb3:	c3                   	ret    

c0017bb4 <ACPI::ACPI()>:
c0017bb4:	83 ec 0c             	sub    esp,0xc
c0017bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bbb:	83 ec 08             	sub    esp,0x8
c0017bbe:	68 77 ab 02 c0       	push   0xc002ab77
c0017bc3:	50                   	push   eax
c0017bc4:	e8 35 c3 ff ff       	call   c0013efe <Device::Device(char const*)>
c0017bc9:	83 c4 10             	add    esp,0x10
c0017bcc:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c0017bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bd5:	89 10                	mov    DWORD PTR [eax],edx
c0017bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bdb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017be6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c02:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c0d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017c14:	e8 15 fb ff ff       	call   c001772e <scanMADT()>
c0017c19:	90                   	nop
c0017c1a:	83 c4 0c             	add    esp,0xc
c0017c1d:	c3                   	ret    

c0017c1e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017c1e:	83 ec 2c             	sub    esp,0x2c
c0017c21:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017c25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c29:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017c2d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017c31:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017c36:	88 d0                	mov    al,dl
c0017c38:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017c3c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017c41:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017c49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c4d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c53:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017c57:	0f 8d 97 00 00 00    	jge    c0017cf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017c5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c65:	83 c2 2a             	add    edx,0x2a
c0017c68:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017c6c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017c71:	75 78                	jne    c0017ceb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c7b:	83 c2 2a             	add    edx,0x2a
c0017c7e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017c82:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017c86:	75 63                	jne    c0017ceb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c88:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c8d:	74 3a                	je     c0017cc9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017c8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c97:	83 c2 2a             	add    edx,0x2a
c0017c9a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017c9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ca2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ca5:	39 c2                	cmp    edx,eax
c0017ca7:	74 10                	je     c0017cb9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017ca9:	83 ec 0c             	sub    esp,0xc
c0017cac:	68 10 ad 02 c0       	push   0xc002ad10
c0017cb1:	e8 a5 21 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0017cb6:	83 c4 10             	add    esp,0x10
c0017cb9:	83 ec 0c             	sub    esp,0xc
c0017cbc:	68 7c ab 02 c0       	push   0xc002ab7c
c0017cc1:	e8 95 21 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0017cc6:	83 c4 10             	add    esp,0x10
c0017cc9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017ccd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cd1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cd5:	83 c2 2a             	add    edx,0x2a
c0017cd8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017cdc:	8b 02                	mov    eax,DWORD PTR [edx]
c0017cde:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017ce1:	89 01                	mov    DWORD PTR [ecx],eax
c0017ce3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ce6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ceb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017cef:	e9 55 ff ff ff       	jmp    c0017c49 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017cf4:	90                   	nop
c0017cf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cf9:	83 c4 2c             	add    esp,0x2c
c0017cfc:	c2 04 00             	ret    0x4
c0017cff:	90                   	nop

c0017d00 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017d00:	83 ec 1c             	sub    esp,0x1c
c0017d03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d07:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017d0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d0f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017d14:	88 c8                	mov    al,cl
c0017d16:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017d1a:	88 d0                	mov    al,dl
c0017d1c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017d20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d24:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d2e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d31:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017d35:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017d39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d3d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d47:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017d4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d4e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017d53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d57:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d5d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017d61:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d68:	83 c2 2a             	add    edx,0x2a
c0017d6b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d73:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d7d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d80:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d84:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d8c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d92:	8d 50 01             	lea    edx,[eax+0x1]
c0017d95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d99:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017d9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017da3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017da9:	3d 00 02 00 00       	cmp    eax,0x200
c0017dae:	75 10                	jne    c0017dc0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017db0:	83 ec 0c             	sub    esp,0xc
c0017db3:	68 8b ab 02 c0       	push   0xc002ab8b
c0017db8:	e8 9e 20 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0017dbd:	83 c4 10             	add    esp,0x10
c0017dc0:	90                   	nop
c0017dc1:	83 c4 1c             	add    esp,0x1c
c0017dc4:	c3                   	ret    
c0017dc5:	90                   	nop

c0017dc6 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017dc6:	b8 00 00 00 00       	mov    eax,0x0
c0017dcb:	c3                   	ret    

c0017dcc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017dcc:	83 ec 1c             	sub    esp,0x1c
c0017dcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017dd3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017dd6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017dda:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017ddf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017de4:	83 ec 08             	sub    esp,0x8
c0017de7:	52                   	push   edx
c0017de8:	50                   	push   eax
c0017de9:	e8 42 6e ff ff       	call   c000ec30 <Computer::readCMOS(unsigned char)>
c0017dee:	83 c4 10             	add    esp,0x10
c0017df1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017df5:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017dfa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017dff:	83 ec 04             	sub    esp,0x4
c0017e02:	6a 01                	push   0x1
c0017e04:	52                   	push   edx
c0017e05:	50                   	push   eax
c0017e06:	e8 3b 6f ff ff       	call   c000ed46 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e0b:	83 c4 10             	add    esp,0x10
c0017e0e:	90                   	nop
c0017e0f:	83 c4 1c             	add    esp,0x1c
c0017e12:	c3                   	ret    
c0017e13:	90                   	nop

c0017e14 <ACPI::open(int, int, void*)>:
c0017e14:	53                   	push   ebx
c0017e15:	83 ec 28             	sub    esp,0x28
c0017e18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e1c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017e23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e27:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017e2e:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017e33:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e39:	83 e0 04             	and    eax,0x4
c0017e3c:	84 c0                	test   al,al
c0017e3e:	74 47                	je     c0017e87 <ACPI::open(int, int, void*)+0x73>
c0017e40:	a1 a8 03 03 c0       	mov    eax,ds:0xc00303a8
c0017e45:	83 ec 08             	sub    esp,0x8
c0017e48:	68 a8 ab 02 c0       	push   0xc002aba8
c0017e4d:	50                   	push   eax
c0017e4e:	e8 3f f8 ff ff       	call   c0017692 <findDataTable(unsigned char*, char*)>
c0017e53:	83 c4 10             	add    esp,0x10
c0017e56:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e5a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017e5f:	74 26                	je     c0017e87 <ACPI::open(int, int, void*)+0x73>
c0017e61:	83 ec 0c             	sub    esp,0xc
c0017e64:	68 ad ab 02 c0       	push   0xc002abad
c0017e69:	e8 79 aa ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017e6e:	83 c4 10             	add    esp,0x10
c0017e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e75:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017e7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e80:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017e87:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0017e8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e93:	8a 00                	mov    al,BYTE PTR [eax]
c0017e95:	3c 01                	cmp    al,0x1
c0017e97:	75 28                	jne    c0017ec1 <ACPI::open(int, int, void*)+0xad>
c0017e99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e9d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017ea4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ea8:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017eaf:	83 ec 0c             	sub    esp,0xc
c0017eb2:	68 be ab 02 c0       	push   0xc002abbe
c0017eb7:	e8 2b aa ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	eb 25                	jmp    c0017ee6 <ACPI::open(int, int, void*)+0xd2>
c0017ec1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0017ec7:	3c 02                	cmp    al,0x2
c0017ec9:	75 1b                	jne    c0017ee6 <ACPI::open(int, int, void*)+0xd2>
c0017ecb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ecf:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017ed6:	83 ec 0c             	sub    esp,0xc
c0017ed9:	68 c6 ab 02 c0       	push   0xc002abc6
c0017ede:	e8 04 aa ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017ee3:	83 c4 10             	add    esp,0x10
c0017ee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017eea:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017ef0:	83 f0 01             	xor    eax,0x1
c0017ef3:	84 c0                	test   al,al
c0017ef5:	74 6a                	je     c0017f61 <ACPI::open(int, int, void*)+0x14d>
c0017ef7:	83 ec 0c             	sub    esp,0xc
c0017efa:	68 ce ab 02 c0       	push   0xc002abce
c0017eff:	e8 e3 a9 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017f04:	83 c4 10             	add    esp,0x10
c0017f07:	e8 44 82 fe ff       	call   c0000150 <manualPCIProbe>
c0017f0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f10:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0017f15:	75 28                	jne    c0017f3f <ACPI::open(int, int, void*)+0x12b>
c0017f17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f1b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017f22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f26:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017f2d:	83 ec 0c             	sub    esp,0xc
c0017f30:	68 dc ab 02 c0       	push   0xc002abdc
c0017f35:	e8 ad a9 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017f3a:	83 c4 10             	add    esp,0x10
c0017f3d:	eb 22                	jmp    c0017f61 <ACPI::open(int, int, void*)+0x14d>
c0017f3f:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0017f44:	75 1b                	jne    c0017f61 <ACPI::open(int, int, void*)+0x14d>
c0017f46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f4a:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017f51:	83 ec 0c             	sub    esp,0xc
c0017f54:	68 e6 ab 02 c0       	push   0xc002abe6
c0017f59:	e8 89 a9 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017f5e:	83 c4 10             	add    esp,0x10
c0017f61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f65:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017f6b:	84 c0                	test   al,al
c0017f6d:	74 13                	je     c0017f82 <ACPI::open(int, int, void*)+0x16e>
c0017f6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f73:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0017f79:	83 f0 01             	xor    eax,0x1
c0017f7c:	0f b6 c0             	movzx  eax,al
c0017f7f:	40                   	inc    eax
c0017f80:	eb 05                	jmp    c0017f87 <ACPI::open(int, int, void*)+0x173>
c0017f82:	b8 00 00 00 00       	mov    eax,0x0
c0017f87:	83 ec 08             	sub    esp,0x8
c0017f8a:	50                   	push   eax
c0017f8b:	68 f0 ab 02 c0       	push   0xc002abf0
c0017f90:	e8 52 a9 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0017f95:	83 c4 10             	add    esp,0x10
c0017f98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f9c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017fa2:	84 c0                	test   al,al
c0017fa4:	74 67                	je     c001800d <ACPI::open(int, int, void*)+0x1f9>
c0017fa6:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0017fae:	83 ec 0c             	sub    esp,0xc
c0017fb1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017fb5:	e8 5e 76 ff ff       	call   c000f618 <malloc>
c0017fba:	83 c4 10             	add    esp,0x10
c0017fbd:	89 c3                	mov    ebx,eax
c0017fbf:	83 ec 0c             	sub    esp,0xc
c0017fc2:	53                   	push   ebx
c0017fc3:	e8 f2 9f 00 00       	call   c0021fba <PCI::PCI()>
c0017fc8:	83 c4 10             	add    esp,0x10
c0017fcb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017fcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fd3:	83 ec 08             	sub    esp,0x8
c0017fd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017fda:	50                   	push   eax
c0017fdb:	e8 2e bd ff ff       	call   c0013d0e <Device::addChild(Device*)>
c0017fe0:	83 c4 10             	add    esp,0x10
c0017fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fe9:	83 c0 08             	add    eax,0x8
c0017fec:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fee:	6a 00                	push   0x0
c0017ff0:	6a 00                	push   0x0
c0017ff2:	6a 00                	push   0x0
c0017ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ff8:	ff d0                	call   eax
c0017ffa:	83 c4 10             	add    esp,0x10
c0017ffd:	83 ec 0c             	sub    esp,0xc
c0018000:	68 f9 ab 02 c0       	push   0xc002abf9
c0018005:	e8 dd a8 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001800a:	83 c4 10             	add    esp,0x10
c001800d:	83 ec 0c             	sub    esp,0xc
c0018010:	68 04 ac 02 c0       	push   0xc002ac04
c0018015:	e8 cc 43 00 00       	call   c001c3e6 <Thr::loadKernelSymbolTable(char const*)>
c001801a:	83 c4 10             	add    esp,0x10
c001801d:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0018022:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018028:	83 e0 04             	and    eax,0x4
c001802b:	84 c0                	test   al,al
c001802d:	0f 84 d2 00 00 00    	je     c0018105 <ACPI::open(int, int, void*)+0x2f1>
c0018033:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001803a:	83 ec 0c             	sub    esp,0xc
c001803d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018041:	e8 d2 75 ff ff       	call   c000f618 <malloc>
c0018046:	83 c4 10             	add    esp,0x10
c0018049:	89 c3                	mov    ebx,eax
c001804b:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0018050:	83 ec 04             	sub    esp,0x4
c0018053:	50                   	push   eax
c0018054:	68 22 ac 02 c0       	push   0xc002ac22
c0018059:	53                   	push   ebx
c001805a:	e8 e1 ad ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001805f:	83 c4 10             	add    esp,0x10
c0018062:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018066:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001806b:	74 17                	je     c0018084 <ACPI::open(int, int, void*)+0x270>
c001806d:	83 ec 0c             	sub    esp,0xc
c0018070:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018074:	e8 99 b0 ff ff       	call   c0013112 <File::exists()>
c0018079:	83 c4 10             	add    esp,0x10
c001807c:	84 c0                	test   al,al
c001807e:	74 04                	je     c0018084 <ACPI::open(int, int, void*)+0x270>
c0018080:	b0 01                	mov    al,0x1
c0018082:	eb 02                	jmp    c0018086 <ACPI::open(int, int, void*)+0x272>
c0018084:	b0 00                	mov    al,0x0
c0018086:	84 c0                	test   al,al
c0018088:	74 22                	je     c00180ac <ACPI::open(int, int, void*)+0x298>
c001808a:	83 ec 08             	sub    esp,0x8
c001808d:	6a 01                	push   0x1
c001808f:	68 22 ac 02 c0       	push   0xc002ac22
c0018094:	e8 aa 4d 00 00       	call   c001ce43 <Thr::loadDLL(char const*, bool)>
c0018099:	83 c4 10             	add    esp,0x10
c001809c:	83 ec 08             	sub    esp,0x8
c001809f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00180a3:	50                   	push   eax
c00180a4:	e8 a9 4f 00 00       	call   c001d052 <Thr::executeDLL(unsigned long, void*)>
c00180a9:	83 c4 10             	add    esp,0x10
c00180ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00180b1:	74 1e                	je     c00180d1 <ACPI::open(int, int, void*)+0x2bd>
c00180b3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00180b8:	74 17                	je     c00180d1 <ACPI::open(int, int, void*)+0x2bd>
c00180ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180be:	8b 00                	mov    eax,DWORD PTR [eax]
c00180c0:	83 c0 08             	add    eax,0x8
c00180c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00180c5:	83 ec 0c             	sub    esp,0xc
c00180c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180cc:	ff d0                	call   eax
c00180ce:	83 c4 10             	add    esp,0x10
c00180d1:	a1 a8 03 03 c0       	mov    eax,ds:0xc00303a8
c00180d6:	83 ec 08             	sub    esp,0x8
c00180d9:	68 3f ac 02 c0       	push   0xc002ac3f
c00180de:	50                   	push   eax
c00180df:	e8 ae f5 ff ff       	call   c0017692 <findDataTable(unsigned char*, char*)>
c00180e4:	83 c4 10             	add    esp,0x10
c00180e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180eb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00180f0:	74 13                	je     c0018105 <ACPI::open(int, int, void*)+0x2f1>
c00180f2:	83 ec 08             	sub    esp,0x8
c00180f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00180f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00180fd:	e8 ca fc ff ff       	call   c0017dcc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018102:	83 c4 10             	add    esp,0x10
c0018105:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c001810b:	83 ec 08             	sub    esp,0x8
c001810e:	6a 01                	push   0x1
c0018110:	68 44 ac 02 c0       	push   0xc002ac44
c0018115:	e8 29 4d 00 00       	call   c001ce43 <Thr::loadDLL(char const*, bool)>
c001811a:	83 c4 10             	add    esp,0x10
c001811d:	83 ec 08             	sub    esp,0x8
c0018120:	53                   	push   ebx
c0018121:	50                   	push   eax
c0018122:	e8 2b 4f 00 00       	call   c001d052 <Thr::executeDLL(unsigned long, void*)>
c0018127:	83 c4 10             	add    esp,0x10
c001812a:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c0018130:	83 ec 08             	sub    esp,0x8
c0018133:	6a 01                	push   0x1
c0018135:	68 61 ac 02 c0       	push   0xc002ac61
c001813a:	e8 04 4d 00 00       	call   c001ce43 <Thr::loadDLL(char const*, bool)>
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	83 ec 08             	sub    esp,0x8
c0018145:	53                   	push   ebx
c0018146:	50                   	push   eax
c0018147:	e8 06 4f 00 00       	call   c001d052 <Thr::executeDLL(unsigned long, void*)>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	b8 00 00 00 00       	mov    eax,0x0
c0018154:	83 c4 28             	add    esp,0x28
c0018157:	5b                   	pop    ebx
c0018158:	c3                   	ret    
c0018159:	90                   	nop

c001815a <ACPI::sleep()>:
c001815a:	83 ec 0c             	sub    esp,0xc
c001815d:	a1 80 01 03 c0       	mov    eax,ds:0xc0030180
c0018162:	85 c0                	test   eax,eax
c0018164:	74 07                	je     c001816d <ACPI::sleep()+0x13>
c0018166:	a1 80 01 03 c0       	mov    eax,ds:0xc0030180
c001816b:	ff d0                	call   eax
c001816d:	90                   	nop
c001816e:	83 c4 0c             	add    esp,0xc
c0018171:	c3                   	ret    

c0018172 <CPU::close(int, int, void*)>:
c0018172:	31 c0                	xor    eax,eax
c0018174:	c3                   	ret    
c0018175:	90                   	nop

c0018176 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018176:	55                   	push   ebp
c0018177:	57                   	push   edi
c0018178:	56                   	push   esi
c0018179:	53                   	push   ebx
c001817a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001817e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018182:	89 ce                	mov    esi,ecx
c0018184:	89 d5                	mov    ebp,edx
c0018186:	80 f9 04             	cmp    cl,0x4
c0018189:	75 28                	jne    c00181b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001818b:	8d 42 f9             	lea    eax,[edx-0x7]
c001818e:	3c 03                	cmp    al,0x3
c0018190:	0f 86 63 01 00 00    	jbe    c00182f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018196:	80 fa 03             	cmp    dl,0x3
c0018199:	0f 84 5a 01 00 00    	je     c00182f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001819f:	8d 7a f2             	lea    edi,[edx-0xe]
c00181a2:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c00181a7:	89 fb                	mov    ebx,edi
c00181a9:	80 fb 01             	cmp    bl,0x1
c00181ac:	77 4e                	ja     c00181fc <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00181ae:	e9 52 01 00 00       	jmp    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181b3:	80 f9 05             	cmp    cl,0x5
c00181b6:	75 4d                	jne    c0018205 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00181b8:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c00181bd:	80 fa 03             	cmp    dl,0x3
c00181c0:	0f 86 3f 01 00 00    	jbe    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181c6:	8d 7a fa             	lea    edi,[edx-0x6]
c00181c9:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c00181ce:	89 fb                	mov    ebx,edi
c00181d0:	80 fb 01             	cmp    bl,0x1
c00181d3:	0f 86 2c 01 00 00    	jbe    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181d9:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c00181de:	80 fa 08             	cmp    dl,0x8
c00181e1:	0f 84 1e 01 00 00    	je     c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181e7:	89 d7                	mov    edi,edx
c00181e9:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c00181ee:	83 e7 fb             	and    edi,0xfffffffb
c00181f1:	89 fb                	mov    ebx,edi
c00181f3:	80 fb 09             	cmp    bl,0x9
c00181f6:	0f 84 09 01 00 00    	je     c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181fc:	31 c0                	xor    eax,eax
c00181fe:	89 eb                	mov    ebx,ebp
c0018200:	0f b6 fb             	movzx  edi,bl
c0018203:	eb 30                	jmp    c0018235 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018205:	31 c0                	xor    eax,eax
c0018207:	80 f9 06             	cmp    cl,0x6
c001820a:	75 f2                	jne    c00181fe <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001820c:	80 fa 0a             	cmp    dl,0xa
c001820f:	77 ed                	ja     c00181fe <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018211:	bf de 05 00 00       	mov    edi,0x5de
c0018216:	0f a3 d7             	bt     edi,edx
c0018219:	73 e3                	jae    c00181fe <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001821b:	b8 40 cf 02 c0       	mov    eax,0xc002cf40
c0018220:	e9 e0 00 00 00       	jmp    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018225:	39 c7                	cmp    edi,eax
c0018227:	0f 84 d3 00 00 00    	je     c0018300 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001822d:	40                   	inc    eax
c001822e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018233:	74 09                	je     c001823e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018235:	89 f3                	mov    ebx,esi
c0018237:	80 fb 0f             	cmp    bl,0xf
c001823a:	75 f1                	jne    c001822d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001823c:	eb e7                	jmp    c0018225 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001823e:	80 f9 10             	cmp    cl,0x10
c0018241:	75 14                	jne    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018243:	8d 42 fc             	lea    eax,[edx-0x4]
c0018246:	83 e0 fb             	and    eax,0xfffffffb
c0018249:	3c 02                	cmp    al,0x2
c001824b:	76 34                	jbe    c0018281 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001824d:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c0018252:	80 fa 02             	cmp    dl,0x2
c0018255:	eb 24                	jmp    c001827b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018257:	80 f9 11             	cmp    cl,0x11
c001825a:	75 13                	jne    c001826f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001825c:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c0018261:	80 fa 03             	cmp    dl,0x3
c0018264:	0f 85 9b 00 00 00    	jne    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001826a:	e9 91 00 00 00       	jmp    c0018300 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001826f:	80 f9 12             	cmp    cl,0x12
c0018272:	75 14                	jne    c0018288 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018274:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c0018279:	fe ca                	dec    dl
c001827b:	0f 85 84 00 00 00    	jne    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018281:	b8 60 cf 02 c0       	mov    eax,0xc002cf60
c0018286:	eb 7d                	jmp    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018288:	80 f9 14             	cmp    cl,0x14
c001828b:	75 12                	jne    c001829f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001828d:	4a                   	dec    edx
c001828e:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c0018293:	80 fa 01             	cmp    dl,0x1
c0018296:	77 6d                	ja     c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018298:	b8 70 cf 02 c0       	mov    eax,0xc002cf70
c001829d:	eb 66                	jmp    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001829f:	80 f9 15             	cmp    cl,0x15
c00182a2:	75 31                	jne    c00182d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00182a4:	b8 80 cf 02 c0       	mov    eax,0xc002cf80
c00182a9:	80 fa 01             	cmp    dl,0x1
c00182ac:	74 57                	je     c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ae:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c00182b3:	80 fa 13             	cmp    dl,0x13
c00182b6:	76 0c                	jbe    c00182c4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00182b8:	80 fa 30             	cmp    dl,0x30
c00182bb:	75 48                	jne    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182bd:	b8 a0 cf 02 c0       	mov    eax,0xc002cfa0
c00182c2:	eb 41                	jmp    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182c4:	b9 04 00 09 00       	mov    ecx,0x90004
c00182c9:	0f a3 d1             	bt     ecx,edx
c00182cc:	73 37                	jae    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ce:	b8 90 cf 02 c0       	mov    eax,0xc002cf90
c00182d3:	eb 30                	jmp    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182d5:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c00182da:	80 f9 16             	cmp    cl,0x16
c00182dd:	75 26                	jne    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182df:	b8 b0 cf 02 c0       	mov    eax,0xc002cfb0
c00182e4:	84 d2                	test   dl,dl
c00182e6:	74 1d                	je     c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182e8:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c00182ed:	80 fa 30             	cmp    dl,0x30
c00182f0:	75 13                	jne    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f2:	b8 c0 cf 02 c0       	mov    eax,0xc002cfc0
c00182f7:	eb 0c                	jmp    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f9:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c00182fe:	eb 05                	jmp    c0018305 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018300:	b8 50 cf 02 c0       	mov    eax,0xc002cf50
c0018305:	5b                   	pop    ebx
c0018306:	5e                   	pop    esi
c0018307:	5f                   	pop    edi
c0018308:	5d                   	pop    ebp
c0018309:	c3                   	ret    

c001830a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001830a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001830e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018312:	80 f9 04             	cmp    cl,0x4
c0018315:	75 6b                	jne    c0018382 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018317:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c001831c:	80 fa 01             	cmp    dl,0x1
c001831f:	0f 86 92 02 00 00    	jbe    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018325:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c001832a:	80 fa 02             	cmp    dl,0x2
c001832d:	0f 84 84 02 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018333:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c0018338:	80 fa 03             	cmp    dl,0x3
c001833b:	0f 84 76 02 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018341:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018346:	80 fa 04             	cmp    dl,0x4
c0018349:	0f 84 68 02 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001834f:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018354:	80 fa 05             	cmp    dl,0x5
c0018357:	0f 84 5a 02 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001835d:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c0018362:	80 fa 07             	cmp    dl,0x7
c0018365:	0f 84 4c 02 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001836b:	83 ea 08             	sub    edx,0x8
c001836e:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c0018373:	80 fa 01             	cmp    dl,0x1
c0018376:	0f 87 3b 02 00 00    	ja     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001837c:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018381:	c3                   	ret    
c0018382:	80 f9 05             	cmp    cl,0x5
c0018385:	75 45                	jne    c00183cc <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018387:	8d 4a ff             	lea    ecx,[edx-0x1]
c001838a:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c001838f:	80 f9 02             	cmp    cl,0x2
c0018392:	0f 86 1f 02 00 00    	jbe    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018398:	80 fa 04             	cmp    dl,0x4
c001839b:	0f 84 f3 01 00 00    	je     c0018594 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00183a1:	80 fa 07             	cmp    dl,0x7
c00183a4:	0f 84 0d 02 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183aa:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00183af:	80 fa 08             	cmp    dl,0x8
c00183b2:	0f 84 ff 01 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183b8:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c00183bd:	80 fa 09             	cmp    dl,0x9
c00183c0:	0f 85 f1 01 00 00    	jne    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183c6:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00183cb:	c3                   	ret    
c00183cc:	80 f9 06             	cmp    cl,0x6
c00183cf:	0f 85 85 01 00 00    	jne    c001855a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00183d5:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00183da:	80 fa 01             	cmp    dl,0x1
c00183dd:	0f 84 d4 01 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183e3:	8d 42 fb             	lea    eax,[edx-0x5]
c00183e6:	3c 01                	cmp    al,0x1
c00183e8:	0f 86 ac 01 00 00    	jbe    c001859a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00183ee:	80 fa 03             	cmp    dl,0x3
c00183f1:	0f 84 a3 01 00 00    	je     c001859a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00183f7:	8d 4a f9             	lea    ecx,[edx-0x7]
c00183fa:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c00183ff:	80 f9 01             	cmp    cl,0x1
c0018402:	0f 86 af 01 00 00    	jbe    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018408:	80 fa 09             	cmp    dl,0x9
c001840b:	0f 84 8f 01 00 00    	je     c00185a0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018411:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018414:	80 f9 01             	cmp    cl,0x1
c0018417:	0f 86 9a 01 00 00    	jbe    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001841d:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018422:	80 fa 0d             	cmp    dl,0xd
c0018425:	0f 84 8c 01 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001842b:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c0018430:	80 fa 0e             	cmp    dl,0xe
c0018433:	0f 84 7e 01 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018439:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c001843e:	80 fa 0f             	cmp    dl,0xf
c0018441:	0f 84 70 01 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018447:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c001844c:	80 fa 15             	cmp    dl,0x15
c001844f:	0f 84 62 01 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018455:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018458:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c001845d:	80 f9 01             	cmp    cl,0x1
c0018460:	0f 86 51 01 00 00    	jbe    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018466:	80 fa 1a             	cmp    dl,0x1a
c0018469:	0f 84 37 01 00 00    	je     c00185a6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001846f:	80 fa 1c             	cmp    dl,0x1c
c0018472:	0f 84 34 01 00 00    	je     c00185ac <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018478:	80 fa 1d             	cmp    dl,0x1d
c001847b:	0f 84 36 01 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018481:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c0018486:	80 fa 25             	cmp    dl,0x25
c0018489:	0f 84 28 01 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001848f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018492:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c0018497:	80 f9 01             	cmp    cl,0x1
c001849a:	0f 86 17 01 00 00    	jbe    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a0:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c00184a5:	80 fa 2a             	cmp    dl,0x2a
c00184a8:	0f 84 09 01 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ae:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c00184b3:	80 fa 2c             	cmp    dl,0x2c
c00184b6:	0f 84 fb 00 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184bc:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c00184c1:	80 fa 2d             	cmp    dl,0x2d
c00184c4:	0f 84 ed 00 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ca:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c00184cf:	80 fa 2e             	cmp    dl,0x2e
c00184d2:	0f 84 df 00 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d8:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c00184dd:	80 fa 2f             	cmp    dl,0x2f
c00184e0:	0f 84 d1 00 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e6:	8d 4a cb             	lea    ecx,[edx-0x35]
c00184e9:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00184ee:	80 f9 01             	cmp    cl,0x1
c00184f1:	0f 86 c0 00 00 00    	jbe    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f7:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c00184fc:	80 fa 37             	cmp    dl,0x37
c00184ff:	0f 84 b2 00 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018505:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c001850a:	80 fa 3a             	cmp    dl,0x3a
c001850d:	0f 84 a4 00 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018513:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c0018518:	80 fa 3c             	cmp    dl,0x3c
c001851b:	0f 84 96 00 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018521:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c0018526:	80 fa 3d             	cmp    dl,0x3d
c0018529:	0f 84 88 00 00 00    	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001852f:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c0018534:	80 fa 3e             	cmp    dl,0x3e
c0018537:	74 7e                	je     c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018539:	8d 42 bb             	lea    eax,[edx-0x45]
c001853c:	3c 01                	cmp    al,0x1
c001853e:	76 72                	jbe    c00185b2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018540:	80 fa 3f             	cmp    dl,0x3f
c0018543:	74 6d                	je     c00185b2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018545:	80 fa 4a             	cmp    dl,0x4a
c0018548:	74 0a                	je     c0018554 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001854a:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c001854f:	80 fa 4d             	cmp    dl,0x4d
c0018552:	75 63                	jne    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018554:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c0018559:	c3                   	ret    
c001855a:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c001855f:	80 f9 0b             	cmp    cl,0xb
c0018562:	75 0a                	jne    c001856e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018564:	fe ca                	dec    dl
c0018566:	75 4f                	jne    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018568:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c001856d:	c3                   	ret    
c001856e:	80 f9 0f             	cmp    cl,0xf
c0018571:	75 44                	jne    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018573:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c0018578:	80 fa 02             	cmp    dl,0x2
c001857b:	76 3a                	jbe    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001857d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018580:	3c 01                	cmp    al,0x1
c0018582:	76 0a                	jbe    c001858e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018584:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c0018589:	80 fa 06             	cmp    dl,0x6
c001858c:	75 29                	jne    c00185b7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001858e:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c0018593:	c3                   	ret    
c0018594:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c0018599:	c3                   	ret    
c001859a:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c001859f:	c3                   	ret    
c00185a0:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c00185a5:	c3                   	ret    
c00185a6:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c00185ab:	c3                   	ret    
c00185ac:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00185b1:	c3                   	ret    
c00185b2:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c00185b7:	c3                   	ret    

c00185b8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00185b8:	60                   	pusha  
c00185b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00185c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00185c5:	9c                   	pushf  
c00185c6:	fa                   	cli    
c00185c7:	0f 09                	wbinvd 
c00185c9:	0f 30                	wrmsr  
c00185cb:	9d                   	popf   
c00185cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00185d0:	89 02                	mov    DWORD PTR [edx],eax
c00185d2:	61                   	popa   
c00185d3:	c3                   	ret    

c00185d4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00185d4:	60                   	pusha  
c00185d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185d9:	9c                   	pushf  
c00185da:	fa                   	cli    
c00185db:	0f 09                	wbinvd 
c00185dd:	31 c0                	xor    eax,eax
c00185df:	31 d2                	xor    edx,edx
c00185e1:	0f 32                	rdmsr  
c00185e3:	9d                   	popf   
c00185e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185e8:	89 02                	mov    DWORD PTR [edx],eax
c00185ea:	61                   	popa   
c00185eb:	c3                   	ret    

c00185ec <CPU::AMD_K6_writeback(int, int, int)>:
c00185ec:	56                   	push   esi
c00185ed:	53                   	push   ebx
c00185ee:	83 ec 10             	sub    esp,0x10
c00185f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185f5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00185fa:	75 5d                	jne    c0018659 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00185fc:	83 f8 08             	cmp    eax,0x8
c00185ff:	75 09                	jne    c001860a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018601:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018606:	7e 13                	jle    c001861b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018608:	eb 30                	jmp    c001863a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001860a:	83 f8 06             	cmp    eax,0x6
c001860d:	7c 4a                	jl     c0018659 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001860f:	83 f8 07             	cmp    eax,0x7
c0018612:	7e 07                	jle    c001861b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018614:	83 f8 09             	cmp    eax,0x9
c0018617:	74 21                	je     c001863a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018619:	eb 3e                	jmp    c0018659 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001861b:	89 e6                	mov    esi,esp
c001861d:	8b 1d 04 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db04
c0018623:	56                   	push   esi
c0018624:	c1 eb 15             	shr    ebx,0x15
c0018627:	68 82 00 00 c0       	push   0xc0000082
c001862c:	83 e3 7e             	and    ebx,0x7e
c001862f:	e8 a0 ff ff ff       	call   c00185d4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018634:	56                   	push   esi
c0018635:	6a 00                	push   0x0
c0018637:	53                   	push   ebx
c0018638:	eb 12                	jmp    c001864c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001863a:	89 e3                	mov    ebx,esp
c001863c:	53                   	push   ebx
c001863d:	68 82 00 00 c0       	push   0xc0000082
c0018642:	e8 8d ff ff ff       	call   c00185d4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018647:	53                   	push   ebx
c0018648:	6a 00                	push   0x0
c001864a:	6a 00                	push   0x0
c001864c:	68 82 00 00 c0       	push   0xc0000082
c0018651:	e8 62 ff ff ff       	call   c00185b8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018656:	83 c4 18             	add    esp,0x18
c0018659:	83 c4 10             	add    esp,0x10
c001865c:	5b                   	pop    ebx
c001865d:	5e                   	pop    esi
c001865e:	c3                   	ret    
c001865f:	90                   	nop

c0018660 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018660:	55                   	push   ebp
c0018661:	57                   	push   edi
c0018662:	56                   	push   esi
c0018663:	53                   	push   ebx
c0018664:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018668:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001866c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018670:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018674:	39 05 e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,eax
c001867a:	75 23                	jne    c001869f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001867c:	a1 0c 06 03 c0       	mov    eax,ds:0xc003060c
c0018681:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018685:	89 06                	mov    DWORD PTR [esi],eax
c0018687:	a1 08 06 03 c0       	mov    eax,ds:0xc0030608
c001868c:	89 07                	mov    DWORD PTR [edi],eax
c001868e:	a1 04 06 03 c0       	mov    eax,ds:0xc0030604
c0018693:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018696:	a1 00 06 03 c0       	mov    eax,ds:0xc0030600
c001869b:	89 02                	mov    DWORD PTR [edx],eax
c001869d:	eb 3f                	jmp    c00186de <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001869f:	31 c9                	xor    ecx,ecx
c00186a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186a5:	0f a2                	cpuid  
c00186a7:	89 06                	mov    DWORD PTR [esi],eax
c00186a9:	89 1f                	mov    DWORD PTR [edi],ebx
c00186ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186af:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00186b2:	89 10                	mov    DWORD PTR [eax],edx
c00186b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186b8:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c00186bd:	8b 06                	mov    eax,DWORD PTR [esi]
c00186bf:	a3 0c 06 03 c0       	mov    ds:0xc003060c,eax
c00186c4:	8b 07                	mov    eax,DWORD PTR [edi]
c00186c6:	a3 08 06 03 c0       	mov    ds:0xc0030608,eax
c00186cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00186ce:	a3 04 06 03 c0       	mov    ds:0xc0030604,eax
c00186d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00186d9:	a3 00 06 03 c0       	mov    ds:0xc0030600,eax
c00186de:	5b                   	pop    ebx
c00186df:	5e                   	pop    esi
c00186e0:	5f                   	pop    edi
c00186e1:	5d                   	pop    ebp
c00186e2:	c3                   	ret    
c00186e3:	90                   	nop

c00186e4 <CPU::cpuidCheckEDX(unsigned int)>:
c00186e4:	83 ec 10             	sub    esp,0x10
c00186e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186eb:	50                   	push   eax
c00186ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186f0:	50                   	push   eax
c00186f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186f5:	50                   	push   eax
c00186f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186fa:	50                   	push   eax
c00186fb:	6a 01                	push   0x1
c00186fd:	e8 5e ff ff ff       	call   c0018660 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018706:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001870a:	0f 95 c0             	setne  al
c001870d:	83 c4 24             	add    esp,0x24
c0018710:	c3                   	ret    
c0018711:	90                   	nop

c0018712 <CPU::cpuidCheckECX(unsigned int)>:
c0018712:	83 ec 10             	sub    esp,0x10
c0018715:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018719:	50                   	push   eax
c001871a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001871e:	50                   	push   eax
c001871f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018723:	50                   	push   eax
c0018724:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018728:	50                   	push   eax
c0018729:	6a 01                	push   0x1
c001872b:	e8 30 ff ff ff       	call   c0018660 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018730:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018734:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018738:	0f 95 c0             	setne  al
c001873b:	83 c4 24             	add    esp,0x24
c001873e:	c3                   	ret    
c001873f:	90                   	nop

c0018740 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018740:	83 ec 10             	sub    esp,0x10
c0018743:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018747:	50                   	push   eax
c0018748:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001874c:	50                   	push   eax
c001874d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018751:	50                   	push   eax
c0018752:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018756:	50                   	push   eax
c0018757:	6a 07                	push   0x7
c0018759:	e8 02 ff ff ff       	call   c0018660 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001875e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018762:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018766:	0f 95 c0             	setne  al
c0018769:	83 c4 24             	add    esp,0x24
c001876c:	c3                   	ret    
c001876d:	90                   	nop

c001876e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001876e:	83 ec 10             	sub    esp,0x10
c0018771:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018775:	50                   	push   eax
c0018776:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001877a:	50                   	push   eax
c001877b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001877f:	50                   	push   eax
c0018780:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018784:	50                   	push   eax
c0018785:	6a 07                	push   0x7
c0018787:	e8 d4 fe ff ff       	call   c0018660 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001878c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018790:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018794:	0f 95 c0             	setne  al
c0018797:	83 c4 24             	add    esp,0x24
c001879a:	c3                   	ret    
c001879b:	90                   	nop

c001879c <CPU::CPU()>:
c001879c:	83 ec 0c             	sub    esp,0xc
c001879f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187a3:	83 ec 08             	sub    esp,0x8
c00187a6:	68 5e b0 02 c0       	push   0xc002b05e
c00187ab:	50                   	push   eax
c00187ac:	e8 4d b7 ff ff       	call   c0013efe <Device::Device(char const*)>
c00187b1:	83 c4 10             	add    esp,0x10
c00187b4:	ba 38 b1 02 c0       	mov    edx,0xc002b138
c00187b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187bd:	89 10                	mov    DWORD PTR [eax],edx
c00187bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187c3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00187cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187d1:	05 78 01 00 00       	add    eax,0x178
c00187d6:	83 ec 0c             	sub    esp,0xc
c00187d9:	50                   	push   eax
c00187da:	e8 51 66 ff ff       	call   c000ee30 <GDT::GDT()>
c00187df:	83 c4 10             	add    esp,0x10
c00187e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187e6:	05 7c 09 00 00       	add    eax,0x97c
c00187eb:	83 ec 0c             	sub    esp,0xc
c00187ee:	50                   	push   eax
c00187ef:	e8 9e 68 ff ff       	call   c000f092 <IDT::IDT()>
c00187f4:	83 c4 10             	add    esp,0x10
c00187f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187fb:	05 7c 11 00 00       	add    eax,0x117c
c0018800:	83 ec 0c             	sub    esp,0xc
c0018803:	50                   	push   eax
c0018804:	e8 1f 8a ff ff       	call   c0011228 <TSS::TSS()>
c0018809:	83 c4 10             	add    esp,0x10
c001880c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018810:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001881b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018825:	90                   	nop
c0018826:	83 c4 0c             	add    esp,0xc
c0018829:	c3                   	ret    

c001882a <CPU::displayFeatures()>:
c001882a:	53                   	push   ebx
c001882b:	83 ec 10             	sub    esp,0x10
c001882e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018832:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018838:	68 6c ad 02 c0       	push   0xc002ad6c
c001883d:	e8 a5 a0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018842:	59                   	pop    ecx
c0018843:	58                   	pop    eax
c0018844:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001884a:	50                   	push   eax
c001884b:	68 7d ad 02 c0       	push   0xc002ad7d
c0018850:	e8 92 a0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018855:	58                   	pop    eax
c0018856:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001885c:	5a                   	pop    edx
c001885d:	c1 e8 0e             	shr    eax,0xe
c0018860:	0f b6 c0             	movzx  eax,al
c0018863:	50                   	push   eax
c0018864:	68 8e ad 02 c0       	push   0xc002ad8e
c0018869:	e8 79 a0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001886e:	59                   	pop    ecx
c001886f:	58                   	pop    eax
c0018870:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018876:	66 c1 e8 06          	shr    ax,0x6
c001887a:	0f b6 c0             	movzx  eax,al
c001887d:	50                   	push   eax
c001887e:	68 9f ad 02 c0       	push   0xc002ad9f
c0018883:	e8 5f a0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018888:	c7 04 24 3b b2 02 c0 	mov    DWORD PTR [esp],0xc002b23b
c001888f:	e8 53 a0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018894:	83 c4 10             	add    esp,0x10
c0018897:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c001889c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00188a3:	74 05                	je     c00188aa <CPU::displayFeatures()+0x80>
c00188a5:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00188aa:	52                   	push   edx
c00188ab:	52                   	push   edx
c00188ac:	50                   	push   eax
c00188ad:	68 b0 ad 02 c0       	push   0xc002adb0
c00188b2:	e8 30 a0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00188b7:	83 c4 10             	add    esp,0x10
c00188ba:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00188bf:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00188c6:	78 05                	js     c00188cd <CPU::displayFeatures()+0xa3>
c00188c8:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00188cd:	51                   	push   ecx
c00188ce:	51                   	push   ecx
c00188cf:	50                   	push   eax
c00188d0:	68 c7 ad 02 c0       	push   0xc002adc7
c00188d5:	e8 0d a0 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00188da:	83 c4 10             	add    esp,0x10
c00188dd:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00188e2:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00188e9:	75 05                	jne    c00188f0 <CPU::displayFeatures()+0xc6>
c00188eb:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00188f0:	52                   	push   edx
c00188f1:	52                   	push   edx
c00188f2:	50                   	push   eax
c00188f3:	68 de ad 02 c0       	push   0xc002adde
c00188f8:	e8 ea 9f ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00188fd:	83 c4 10             	add    esp,0x10
c0018900:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018905:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001890c:	75 05                	jne    c0018913 <CPU::displayFeatures()+0xe9>
c001890e:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018913:	51                   	push   ecx
c0018914:	51                   	push   ecx
c0018915:	50                   	push   eax
c0018916:	68 f5 ad 02 c0       	push   0xc002adf5
c001891b:	e8 c7 9f ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018920:	83 c4 10             	add    esp,0x10
c0018923:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018928:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001892f:	75 05                	jne    c0018936 <CPU::displayFeatures()+0x10c>
c0018931:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018936:	52                   	push   edx
c0018937:	52                   	push   edx
c0018938:	50                   	push   eax
c0018939:	68 0c ae 02 c0       	push   0xc002ae0c
c001893e:	e8 a4 9f ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018943:	83 c4 10             	add    esp,0x10
c0018946:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c001894b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018952:	75 05                	jne    c0018959 <CPU::displayFeatures()+0x12f>
c0018954:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018959:	51                   	push   ecx
c001895a:	51                   	push   ecx
c001895b:	50                   	push   eax
c001895c:	68 23 ae 02 c0       	push   0xc002ae23
c0018961:	e8 81 9f ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018966:	83 c4 10             	add    esp,0x10
c0018969:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c001896e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018975:	75 05                	jne    c001897c <CPU::displayFeatures()+0x152>
c0018977:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c001897c:	52                   	push   edx
c001897d:	52                   	push   edx
c001897e:	50                   	push   eax
c001897f:	68 3a ae 02 c0       	push   0xc002ae3a
c0018984:	e8 5e 9f ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018989:	83 c4 10             	add    esp,0x10
c001898c:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018991:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018998:	75 05                	jne    c001899f <CPU::displayFeatures()+0x175>
c001899a:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c001899f:	51                   	push   ecx
c00189a0:	51                   	push   ecx
c00189a1:	50                   	push   eax
c00189a2:	68 51 ae 02 c0       	push   0xc002ae51
c00189a7:	e8 3b 9f ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00189ac:	83 c4 10             	add    esp,0x10
c00189af:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00189b4:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00189bb:	75 05                	jne    c00189c2 <CPU::displayFeatures()+0x198>
c00189bd:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00189c2:	52                   	push   edx
c00189c3:	52                   	push   edx
c00189c4:	50                   	push   eax
c00189c5:	68 68 ae 02 c0       	push   0xc002ae68
c00189ca:	e8 18 9f ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00189cf:	83 c4 10             	add    esp,0x10
c00189d2:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00189d7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00189de:	75 05                	jne    c00189e5 <CPU::displayFeatures()+0x1bb>
c00189e0:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00189e5:	51                   	push   ecx
c00189e6:	51                   	push   ecx
c00189e7:	50                   	push   eax
c00189e8:	68 7f ae 02 c0       	push   0xc002ae7f
c00189ed:	e8 f5 9e ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00189f2:	83 c4 10             	add    esp,0x10
c00189f5:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00189fa:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018a01:	75 05                	jne    c0018a08 <CPU::displayFeatures()+0x1de>
c0018a03:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a08:	52                   	push   edx
c0018a09:	52                   	push   edx
c0018a0a:	50                   	push   eax
c0018a0b:	68 96 ae 02 c0       	push   0xc002ae96
c0018a10:	e8 d2 9e ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018a15:	83 c4 10             	add    esp,0x10
c0018a18:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a1d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018a24:	75 05                	jne    c0018a2b <CPU::displayFeatures()+0x201>
c0018a26:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a2b:	51                   	push   ecx
c0018a2c:	51                   	push   ecx
c0018a2d:	50                   	push   eax
c0018a2e:	68 ad ae 02 c0       	push   0xc002aead
c0018a33:	e8 af 9e ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018a38:	83 c4 10             	add    esp,0x10
c0018a3b:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a40:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018a47:	75 05                	jne    c0018a4e <CPU::displayFeatures()+0x224>
c0018a49:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a4e:	52                   	push   edx
c0018a4f:	52                   	push   edx
c0018a50:	50                   	push   eax
c0018a51:	68 c4 ae 02 c0       	push   0xc002aec4
c0018a56:	e8 8c 9e ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018a5b:	83 c4 10             	add    esp,0x10
c0018a5e:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a63:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018a6a:	78 05                	js     c0018a71 <CPU::displayFeatures()+0x247>
c0018a6c:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a71:	51                   	push   ecx
c0018a72:	51                   	push   ecx
c0018a73:	50                   	push   eax
c0018a74:	68 db ae 02 c0       	push   0xc002aedb
c0018a79:	e8 69 9e ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018a7e:	83 c4 10             	add    esp,0x10
c0018a81:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a86:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018a8d:	75 05                	jne    c0018a94 <CPU::displayFeatures()+0x26a>
c0018a8f:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a94:	52                   	push   edx
c0018a95:	52                   	push   edx
c0018a96:	50                   	push   eax
c0018a97:	68 f2 ae 02 c0       	push   0xc002aef2
c0018a9c:	e8 46 9e ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0018aa1:	83 c4 18             	add    esp,0x18
c0018aa4:	5b                   	pop    ebx
c0018aa5:	c3                   	ret    

c0018aa6 <CPU::detectFeatures()>:
c0018aa6:	55                   	push   ebp
c0018aa7:	57                   	push   edi
c0018aa8:	56                   	push   esi
c0018aa9:	53                   	push   ebx
c0018aaa:	83 ec 50             	sub    esp,0x50
c0018aad:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018ab1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018abb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018ac2:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018ac8:	6a 0d                	push   0xd
c0018aca:	6a 00                	push   0x0
c0018acc:	57                   	push   edi
c0018acd:	e8 e6 7b fe ff       	call   c00006b8 <memset>
c0018ad2:	83 c4 10             	add    esp,0x10
c0018ad5:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0018ada:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018ae1:	0f 84 20 09 00 00    	je     c0019407 <CPU::detectFeatures()+0x961>
c0018ae7:	83 ec 0c             	sub    esp,0xc
c0018aea:	6a 10                	push   0x10
c0018aec:	e8 f3 fb ff ff       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c0018af1:	83 e0 01             	and    eax,0x1
c0018af4:	8d 14 00             	lea    edx,[eax+eax*1]
c0018af7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018afd:	83 e0 fd             	and    eax,0xfffffffd
c0018b00:	09 d0                	or     eax,edx
c0018b02:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b08:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018b0f:	e8 d0 fb ff ff       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c0018b14:	83 e0 01             	and    eax,0x1
c0018b17:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018b1e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b24:	83 e0 fb             	and    eax,0xfffffffb
c0018b27:	09 d0                	or     eax,edx
c0018b29:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b2f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018b36:	e8 a9 fb ff ff       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c0018b3b:	83 e0 01             	and    eax,0x1
c0018b3e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018b45:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b4b:	83 e0 f7             	and    eax,0xfffffff7
c0018b4e:	09 d0                	or     eax,edx
c0018b50:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b56:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018b5d:	e8 82 fb ff ff       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c0018b62:	83 e0 01             	and    eax,0x1
c0018b65:	c1 e0 04             	shl    eax,0x4
c0018b68:	88 c2                	mov    dl,al
c0018b6a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b70:	83 e0 ef             	and    eax,0xffffffef
c0018b73:	09 d0                	or     eax,edx
c0018b75:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b7b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018b82:	e8 5d fb ff ff       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c0018b87:	83 e0 01             	and    eax,0x1
c0018b8a:	c1 e0 05             	shl    eax,0x5
c0018b8d:	88 c2                	mov    dl,al
c0018b8f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b95:	83 e0 df             	and    eax,0xffffffdf
c0018b98:	09 d0                	or     eax,edx
c0018b9a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ba0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018ba7:	e8 38 fb ff ff       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c0018bac:	83 e0 01             	and    eax,0x1
c0018baf:	8d 14 00             	lea    edx,[eax+eax*1]
c0018bb2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018bb8:	83 e0 fd             	and    eax,0xfffffffd
c0018bbb:	09 d0                	or     eax,edx
c0018bbd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018bc3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018bca:	e8 15 fb ff ff       	call   c00186e4 <CPU::cpuidCheckEDX(unsigned int)>
c0018bcf:	83 e0 01             	and    eax,0x1
c0018bd2:	c1 e0 06             	shl    eax,0x6
c0018bd5:	88 c2                	mov    dl,al
c0018bd7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018bdd:	83 e0 bf             	and    eax,0xffffffbf
c0018be0:	09 d0                	or     eax,edx
c0018be2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018be8:	58                   	pop    eax
c0018be9:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018bed:	56                   	push   esi
c0018bee:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018bf2:	55                   	push   ebp
c0018bf3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018bf7:	50                   	push   eax
c0018bf8:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018bfc:	52                   	push   edx
c0018bfd:	6a 00                	push   0x0
c0018bff:	e8 5c fa ff ff       	call   c0018660 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c04:	83 c4 1c             	add    esp,0x1c
c0018c07:	6a 04                	push   0x4
c0018c09:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018c0d:	50                   	push   eax
c0018c0e:	57                   	push   edi
c0018c0f:	e8 8c 7a fe ff       	call   c00006a0 <memcpy>
c0018c14:	83 c4 0c             	add    esp,0xc
c0018c17:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018c1d:	6a 04                	push   0x4
c0018c1f:	56                   	push   esi
c0018c20:	50                   	push   eax
c0018c21:	e8 7a 7a fe ff       	call   c00006a0 <memcpy>
c0018c26:	83 c4 0c             	add    esp,0xc
c0018c29:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018c2f:	6a 04                	push   0x4
c0018c31:	55                   	push   ebp
c0018c32:	50                   	push   eax
c0018c33:	e8 68 7a fe ff       	call   c00006a0 <memcpy>
c0018c38:	58                   	pop    eax
c0018c39:	5a                   	pop    edx
c0018c3a:	68 09 af 02 c0       	push   0xc002af09
c0018c3f:	57                   	push   edi
c0018c40:	e8 63 7b fe ff       	call   c00007a8 <strcmp>
c0018c45:	83 c4 10             	add    esp,0x10
c0018c48:	85 c0                	test   eax,eax
c0018c4a:	75 0f                	jne    c0018c5b <CPU::detectFeatures()+0x1b5>
c0018c4c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018c56:	e9 22 02 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018c5b:	50                   	push   eax
c0018c5c:	50                   	push   eax
c0018c5d:	68 16 af 02 c0       	push   0xc002af16
c0018c62:	57                   	push   edi
c0018c63:	e8 40 7b fe ff       	call   c00007a8 <strcmp>
c0018c68:	83 c4 10             	add    esp,0x10
c0018c6b:	85 c0                	test   eax,eax
c0018c6d:	74 dd                	je     c0018c4c <CPU::detectFeatures()+0x1a6>
c0018c6f:	51                   	push   ecx
c0018c70:	51                   	push   ecx
c0018c71:	68 23 af 02 c0       	push   0xc002af23
c0018c76:	57                   	push   edi
c0018c77:	e8 2c 7b fe ff       	call   c00007a8 <strcmp>
c0018c7c:	83 c4 10             	add    esp,0x10
c0018c7f:	85 c0                	test   eax,eax
c0018c81:	74 2a                	je     c0018cad <CPU::detectFeatures()+0x207>
c0018c83:	52                   	push   edx
c0018c84:	52                   	push   edx
c0018c85:	68 30 af 02 c0       	push   0xc002af30
c0018c8a:	57                   	push   edi
c0018c8b:	e8 18 7b fe ff       	call   c00007a8 <strcmp>
c0018c90:	83 c4 10             	add    esp,0x10
c0018c93:	85 c0                	test   eax,eax
c0018c95:	74 16                	je     c0018cad <CPU::detectFeatures()+0x207>
c0018c97:	50                   	push   eax
c0018c98:	50                   	push   eax
c0018c99:	68 3d af 02 c0       	push   0xc002af3d
c0018c9e:	57                   	push   edi
c0018c9f:	e8 04 7b fe ff       	call   c00007a8 <strcmp>
c0018ca4:	83 c4 10             	add    esp,0x10
c0018ca7:	85 c0                	test   eax,eax
c0018ca9:	74 48                	je     c0018cf3 <CPU::detectFeatures()+0x24d>
c0018cab:	eb 0f                	jmp    c0018cbc <CPU::detectFeatures()+0x216>
c0018cad:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018cb7:	e9 c1 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018cbc:	50                   	push   eax
c0018cbd:	50                   	push   eax
c0018cbe:	68 4a af 02 c0       	push   0xc002af4a
c0018cc3:	57                   	push   edi
c0018cc4:	e8 df 7a fe ff       	call   c00007a8 <strcmp>
c0018cc9:	83 c4 10             	add    esp,0x10
c0018ccc:	85 c0                	test   eax,eax
c0018cce:	74 23                	je     c0018cf3 <CPU::detectFeatures()+0x24d>
c0018cd0:	50                   	push   eax
c0018cd1:	50                   	push   eax
c0018cd2:	68 57 af 02 c0       	push   0xc002af57
c0018cd7:	57                   	push   edi
c0018cd8:	e8 cb 7a fe ff       	call   c00007a8 <strcmp>
c0018cdd:	83 c4 10             	add    esp,0x10
c0018ce0:	85 c0                	test   eax,eax
c0018ce2:	75 1e                	jne    c0018d02 <CPU::detectFeatures()+0x25c>
c0018ce4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018cee:	e9 8a 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018cf3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018cfd:	e9 7b 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018d02:	50                   	push   eax
c0018d03:	50                   	push   eax
c0018d04:	68 64 af 02 c0       	push   0xc002af64
c0018d09:	57                   	push   edi
c0018d0a:	e8 99 7a fe ff       	call   c00007a8 <strcmp>
c0018d0f:	83 c4 10             	add    esp,0x10
c0018d12:	85 c0                	test   eax,eax
c0018d14:	75 0f                	jne    c0018d25 <CPU::detectFeatures()+0x27f>
c0018d16:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018d20:	e9 58 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018d25:	50                   	push   eax
c0018d26:	50                   	push   eax
c0018d27:	68 23 af 02 c0       	push   0xc002af23
c0018d2c:	57                   	push   edi
c0018d2d:	e8 76 7a fe ff       	call   c00007a8 <strcmp>
c0018d32:	83 c4 10             	add    esp,0x10
c0018d35:	85 c0                	test   eax,eax
c0018d37:	75 0f                	jne    c0018d48 <CPU::detectFeatures()+0x2a2>
c0018d39:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018d43:	e9 35 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018d48:	50                   	push   eax
c0018d49:	50                   	push   eax
c0018d4a:	68 71 af 02 c0       	push   0xc002af71
c0018d4f:	57                   	push   edi
c0018d50:	e8 53 7a fe ff       	call   c00007a8 <strcmp>
c0018d55:	83 c4 10             	add    esp,0x10
c0018d58:	85 c0                	test   eax,eax
c0018d5a:	75 0f                	jne    c0018d6b <CPU::detectFeatures()+0x2c5>
c0018d5c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018d66:	e9 12 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018d6b:	51                   	push   ecx
c0018d6c:	51                   	push   ecx
c0018d6d:	68 7e af 02 c0       	push   0xc002af7e
c0018d72:	57                   	push   edi
c0018d73:	e8 30 7a fe ff       	call   c00007a8 <strcmp>
c0018d78:	83 c4 10             	add    esp,0x10
c0018d7b:	85 c0                	test   eax,eax
c0018d7d:	75 0f                	jne    c0018d8e <CPU::detectFeatures()+0x2e8>
c0018d7f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018d89:	e9 ef 00 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018d8e:	52                   	push   edx
c0018d8f:	52                   	push   edx
c0018d90:	68 8b af 02 c0       	push   0xc002af8b
c0018d95:	57                   	push   edi
c0018d96:	e8 0d 7a fe ff       	call   c00007a8 <strcmp>
c0018d9b:	83 c4 10             	add    esp,0x10
c0018d9e:	85 c0                	test   eax,eax
c0018da0:	75 0f                	jne    c0018db1 <CPU::detectFeatures()+0x30b>
c0018da2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018dac:	e9 cc 00 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018db1:	50                   	push   eax
c0018db2:	50                   	push   eax
c0018db3:	68 98 af 02 c0       	push   0xc002af98
c0018db8:	57                   	push   edi
c0018db9:	e8 ea 79 fe ff       	call   c00007a8 <strcmp>
c0018dbe:	83 c4 10             	add    esp,0x10
c0018dc1:	85 c0                	test   eax,eax
c0018dc3:	75 0f                	jne    c0018dd4 <CPU::detectFeatures()+0x32e>
c0018dc5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018dcf:	e9 a9 00 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018dd4:	50                   	push   eax
c0018dd5:	50                   	push   eax
c0018dd6:	68 a5 af 02 c0       	push   0xc002afa5
c0018ddb:	57                   	push   edi
c0018ddc:	e8 c7 79 fe ff       	call   c00007a8 <strcmp>
c0018de1:	83 c4 10             	add    esp,0x10
c0018de4:	85 c0                	test   eax,eax
c0018de6:	75 0f                	jne    c0018df7 <CPU::detectFeatures()+0x351>
c0018de8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018df2:	e9 86 00 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018df7:	50                   	push   eax
c0018df8:	50                   	push   eax
c0018df9:	68 b2 af 02 c0       	push   0xc002afb2
c0018dfe:	57                   	push   edi
c0018dff:	e8 a4 79 fe ff       	call   c00007a8 <strcmp>
c0018e04:	83 c4 10             	add    esp,0x10
c0018e07:	85 c0                	test   eax,eax
c0018e09:	75 0c                	jne    c0018e17 <CPU::detectFeatures()+0x371>
c0018e0b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018e15:	eb 66                	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018e17:	50                   	push   eax
c0018e18:	50                   	push   eax
c0018e19:	68 bf af 02 c0       	push   0xc002afbf
c0018e1e:	57                   	push   edi
c0018e1f:	e8 84 79 fe ff       	call   c00007a8 <strcmp>
c0018e24:	83 c4 10             	add    esp,0x10
c0018e27:	85 c0                	test   eax,eax
c0018e29:	75 0c                	jne    c0018e37 <CPU::detectFeatures()+0x391>
c0018e2b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018e35:	eb 46                	jmp    c0018e7d <CPU::detectFeatures()+0x3d7>
c0018e37:	50                   	push   eax
c0018e38:	50                   	push   eax
c0018e39:	68 cc af 02 c0       	push   0xc002afcc
c0018e3e:	57                   	push   edi
c0018e3f:	e8 64 79 fe ff       	call   c00007a8 <strcmp>
c0018e44:	83 c4 10             	add    esp,0x10
c0018e47:	85 c0                	test   eax,eax
c0018e49:	74 e0                	je     c0018e2b <CPU::detectFeatures()+0x385>
c0018e4b:	50                   	push   eax
c0018e4c:	50                   	push   eax
c0018e4d:	68 d9 af 02 c0       	push   0xc002afd9
c0018e52:	57                   	push   edi
c0018e53:	e8 50 79 fe ff       	call   c00007a8 <strcmp>
c0018e58:	83 c4 10             	add    esp,0x10
c0018e5b:	85 c0                	test   eax,eax
c0018e5d:	74 cc                	je     c0018e2b <CPU::detectFeatures()+0x385>
c0018e5f:	51                   	push   ecx
c0018e60:	51                   	push   ecx
c0018e61:	68 e6 af 02 c0       	push   0xc002afe6
c0018e66:	57                   	push   edi
c0018e67:	e8 3c 79 fe ff       	call   c00007a8 <strcmp>
c0018e6c:	83 c4 10             	add    esp,0x10
c0018e6f:	85 c0                	test   eax,eax
c0018e71:	74 b8                	je     c0018e2b <CPU::detectFeatures()+0x385>
c0018e73:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018e7d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018e82:	0f 86 be 00 00 00    	jbe    c0018f46 <CPU::detectFeatures()+0x4a0>
c0018e88:	83 ec 0c             	sub    esp,0xc
c0018e8b:	68 80 00 00 00       	push   0x80
c0018e90:	e8 ab f8 ff ff       	call   c0018740 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e95:	83 e0 01             	and    eax,0x1
c0018e98:	c1 e0 06             	shl    eax,0x6
c0018e9b:	88 c2                	mov    dl,al
c0018e9d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ea3:	83 e0 bf             	and    eax,0xffffffbf
c0018ea6:	09 d0                	or     eax,edx
c0018ea8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eae:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018eb5:	e8 86 f8 ff ff       	call   c0018740 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018eba:	83 e0 01             	and    eax,0x1
c0018ebd:	c1 e0 04             	shl    eax,0x4
c0018ec0:	88 c2                	mov    dl,al
c0018ec2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018ec8:	83 e0 ef             	and    eax,0xffffffef
c0018ecb:	09 d0                	or     eax,edx
c0018ecd:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ed3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018eda:	e8 61 f8 ff ff       	call   c0018740 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018edf:	c1 e0 07             	shl    eax,0x7
c0018ee2:	88 c2                	mov    dl,al
c0018ee4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eea:	83 e0 7f             	and    eax,0x7f
c0018eed:	09 d0                	or     eax,edx
c0018eef:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ef5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018efc:	e8 6d f8 ff ff       	call   c001876e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f01:	83 e0 01             	and    eax,0x1
c0018f04:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018f0b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f11:	83 e0 f7             	and    eax,0xfffffff7
c0018f14:	09 d0                	or     eax,edx
c0018f16:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f1c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018f23:	e8 46 f8 ff ff       	call   c001876e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f28:	83 c4 10             	add    esp,0x10
c0018f2b:	83 e0 01             	and    eax,0x1
c0018f2e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018f35:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f3b:	83 e0 fb             	and    eax,0xfffffffb
c0018f3e:	09 d0                	or     eax,edx
c0018f40:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f46:	83 ec 0c             	sub    esp,0xc
c0018f49:	56                   	push   esi
c0018f4a:	55                   	push   ebp
c0018f4b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f4f:	57                   	push   edi
c0018f50:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f54:	50                   	push   eax
c0018f55:	6a 01                	push   0x1
c0018f57:	e8 04 f7 ff ff       	call   c0018660 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f5c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018f60:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f66:	88 ca                	mov    dl,cl
c0018f68:	83 e0 f0             	and    eax,0xfffffff0
c0018f6b:	83 e2 0f             	and    edx,0xf
c0018f6e:	09 d0                	or     eax,edx
c0018f70:	88 ca                	mov    dl,cl
c0018f72:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018f78:	c0 ea 04             	shr    dl,0x4
c0018f7b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018f7f:	0f b6 c2             	movzx  eax,dl
c0018f82:	83 c4 20             	add    esp,0x20
c0018f85:	c1 e0 06             	shl    eax,0x6
c0018f88:	89 c5                	mov    ebp,eax
c0018f8a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f90:	66 25 3f c0          	and    ax,0xc03f
c0018f94:	09 e8                	or     eax,ebp
c0018f96:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018f9d:	89 c8                	mov    eax,ecx
c0018f9f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018fa5:	c1 e8 08             	shr    eax,0x8
c0018fa8:	83 e2 3f             	and    edx,0x3f
c0018fab:	83 e0 0f             	and    eax,0xf
c0018fae:	89 c5                	mov    ebp,eax
c0018fb0:	c1 e5 06             	shl    ebp,0x6
c0018fb3:	09 d5                	or     ebp,edx
c0018fb5:	89 ea                	mov    edx,ebp
c0018fb7:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018fbd:	88 c2                	mov    dl,al
c0018fbf:	c0 ea 02             	shr    dl,0x2
c0018fc2:	89 d5                	mov    ebp,edx
c0018fc4:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018fca:	83 e2 c0             	and    edx,0xffffffc0
c0018fcd:	09 d5                	or     ebp,edx
c0018fcf:	89 ea                	mov    edx,ebp
c0018fd1:	89 cd                	mov    ebp,ecx
c0018fd3:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018fd9:	c1 ed 0c             	shr    ebp,0xc
c0018fdc:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018fe2:	83 e5 03             	and    ebp,0x3
c0018fe5:	83 e2 cf             	and    edx,0xffffffcf
c0018fe8:	c1 e5 04             	shl    ebp,0x4
c0018feb:	09 d5                	or     ebp,edx
c0018fed:	3c 06                	cmp    al,0x6
c0018fef:	89 ea                	mov    edx,ebp
c0018ff1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ff7:	74 04                	je     c0018ffd <CPU::detectFeatures()+0x557>
c0018ff9:	3c 0f                	cmp    al,0xf
c0018ffb:	75 5c                	jne    c0019059 <CPU::detectFeatures()+0x5b3>
c0018ffd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019001:	89 cd                	mov    ebp,ecx
c0019003:	c1 ed 10             	shr    ebp,0x10
c0019006:	c1 e5 04             	shl    ebp,0x4
c0019009:	09 ea                	or     edx,ebp
c001900b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019011:	0f b6 d2             	movzx  edx,dl
c0019014:	66 81 e5 3f c0       	and    bp,0xc03f
c0019019:	c1 e2 06             	shl    edx,0x6
c001901c:	09 ea                	or     edx,ebp
c001901e:	3c 0f                	cmp    al,0xf
c0019020:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019027:	75 30                	jne    c0019059 <CPU::detectFeatures()+0x5b3>
c0019029:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001902f:	c1 e9 14             	shr    ecx,0x14
c0019032:	83 e0 3f             	and    eax,0x3f
c0019035:	83 c1 0f             	add    ecx,0xf
c0019038:	88 ca                	mov    dl,cl
c001903a:	c0 e9 02             	shr    cl,0x2
c001903d:	c1 e2 06             	shl    edx,0x6
c0019040:	09 d0                	or     eax,edx
c0019042:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019048:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001904e:	83 e0 c0             	and    eax,0xffffffc0
c0019051:	09 c1                	or     ecx,eax
c0019053:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019059:	83 ec 0c             	sub    esp,0xc
c001905c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019063:	56                   	push   esi
c0019064:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019068:	50                   	push   eax
c0019069:	57                   	push   edi
c001906a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001906e:	55                   	push   ebp
c001906f:	68 00 00 00 80       	push   0x80000000
c0019074:	e8 e7 f5 ff ff       	call   c0018660 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019079:	83 c4 20             	add    esp,0x20
c001907c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019084:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019088:	76 1e                	jbe    c00190a8 <CPU::detectFeatures()+0x602>
c001908a:	83 ec 0c             	sub    esp,0xc
c001908d:	56                   	push   esi
c001908e:	50                   	push   eax
c001908f:	57                   	push   edi
c0019090:	55                   	push   ebp
c0019091:	68 01 00 00 80       	push   0x80000001
c0019096:	e8 c5 f5 ff ff       	call   c0018660 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001909b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00190a5:	83 c4 20             	add    esp,0x20
c00190a8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00190ae:	83 f8 01             	cmp    eax,0x1
c00190b1:	75 6f                	jne    c0019122 <CPU::detectFeatures()+0x67c>
c00190b3:	51                   	push   ecx
c00190b4:	51                   	push   ecx
c00190b5:	68 f2 af 02 c0       	push   0xc002aff2
c00190ba:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00190be:	56                   	push   esi
c00190bf:	e8 93 76 fe ff       	call   c0000757 <strcpy>
c00190c4:	5f                   	pop    edi
c00190c5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190cb:	5d                   	pop    ebp
c00190cc:	66 c1 e8 06          	shr    ax,0x6
c00190d0:	0f b6 c0             	movzx  eax,al
c00190d3:	50                   	push   eax
c00190d4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190da:	c1 e8 0e             	shr    eax,0xe
c00190dd:	0f b6 c0             	movzx  eax,al
c00190e0:	50                   	push   eax
c00190e1:	e8 24 f2 ff ff       	call   c001830a <CPU::lookupIntelName(unsigned char, unsigned char)>
c00190e6:	5a                   	pop    edx
c00190e7:	59                   	pop    ecx
c00190e8:	50                   	push   eax
c00190e9:	56                   	push   esi
c00190ea:	e8 1f 77 fe ff       	call   c000080e <strcat>
c00190ef:	5f                   	pop    edi
c00190f0:	5d                   	pop    ebp
c00190f1:	56                   	push   esi
c00190f2:	53                   	push   ebx
c00190f3:	e8 f8 ad ff ff       	call   c0013ef0 <Device::setName(char const*)>
c00190f8:	58                   	pop    eax
c00190f9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00190ff:	5a                   	pop    edx
c0019100:	68 f9 af 02 c0       	push   0xc002aff9
c0019105:	50                   	push   eax
c0019106:	e8 9d 76 fe ff       	call   c00007a8 <strcmp>
c001910b:	83 c4 10             	add    esp,0x10
c001910e:	85 c0                	test   eax,eax
c0019110:	0f 85 71 03 00 00    	jne    c0019487 <CPU::detectFeatures()+0x9e1>
c0019116:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001911d:	e9 65 03 00 00       	jmp    c0019487 <CPU::detectFeatures()+0x9e1>
c0019122:	83 f8 02             	cmp    eax,0x2
c0019125:	0f 85 b5 00 00 00    	jne    c00191e0 <CPU::detectFeatures()+0x73a>
c001912b:	57                   	push   edi
c001912c:	57                   	push   edi
c001912d:	68 0b b0 02 c0       	push   0xc002b00b
c0019132:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019136:	56                   	push   esi
c0019137:	e8 1b 76 fe ff       	call   c0000757 <strcpy>
c001913c:	5d                   	pop    ebp
c001913d:	58                   	pop    eax
c001913e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019144:	66 c1 e8 06          	shr    ax,0x6
c0019148:	0f b6 c0             	movzx  eax,al
c001914b:	50                   	push   eax
c001914c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019152:	c1 e8 0e             	shr    eax,0xe
c0019155:	0f b6 c0             	movzx  eax,al
c0019158:	50                   	push   eax
c0019159:	e8 18 f0 ff ff       	call   c0018176 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001915e:	5a                   	pop    edx
c001915f:	59                   	pop    ecx
c0019160:	50                   	push   eax
c0019161:	56                   	push   esi
c0019162:	e8 a7 76 fe ff       	call   c000080e <strcat>
c0019167:	5f                   	pop    edi
c0019168:	5d                   	pop    ebp
c0019169:	56                   	push   esi
c001916a:	53                   	push   ebx
c001916b:	e8 80 ad ff ff       	call   c0013ef0 <Device::setName(char const*)>
c0019170:	58                   	pop    eax
c0019171:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019177:	5a                   	pop    edx
c0019178:	68 10 b0 02 c0       	push   0xc002b010
c001917d:	50                   	push   eax
c001917e:	e8 25 76 fe ff       	call   c00007a8 <strcmp>
c0019183:	83 c4 10             	add    esp,0x10
c0019186:	85 c0                	test   eax,eax
c0019188:	75 20                	jne    c00191aa <CPU::detectFeatures()+0x704>
c001918a:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c0019190:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019196:	a8 01                	test   al,0x1
c0019198:	74 10                	je     c00191aa <CPU::detectFeatures()+0x704>
c001919a:	83 e0 fe             	and    eax,0xfffffffe
c001919d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00191a3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00191aa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191b0:	c1 e8 0e             	shr    eax,0xe
c00191b3:	3c 05                	cmp    al,0x5
c00191b5:	0f 85 cc 02 00 00    	jne    c0019487 <CPU::detectFeatures()+0x9e1>
c00191bb:	56                   	push   esi
c00191bc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00191c2:	83 e0 0f             	and    eax,0xf
c00191c5:	50                   	push   eax
c00191c6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191cc:	66 c1 e8 06          	shr    ax,0x6
c00191d0:	0f b6 c0             	movzx  eax,al
c00191d3:	50                   	push   eax
c00191d4:	6a 05                	push   0x5
c00191d6:	e8 11 f4 ff ff       	call   c00185ec <CPU::AMD_K6_writeback(int, int, int)>
c00191db:	e9 1f 02 00 00       	jmp    c00193ff <CPU::detectFeatures()+0x959>
c00191e0:	8d 50 fd             	lea    edx,[eax-0x3]
c00191e3:	83 fa 01             	cmp    edx,0x1
c00191e6:	76 09                	jbe    c00191f1 <CPU::detectFeatures()+0x74b>
c00191e8:	83 f8 06             	cmp    eax,0x6
c00191eb:	0f 85 91 01 00 00    	jne    c0019382 <CPU::detectFeatures()+0x8dc>
c00191f1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00191f7:	c1 ea 0e             	shr    edx,0xe
c00191fa:	80 fa 05             	cmp    dl,0x5
c00191fd:	75 7b                	jne    c001927a <CPU::detectFeatures()+0x7d4>
c00191ff:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019205:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001920a:	66 81 fa 00 01       	cmp    dx,0x100
c001920f:	75 0c                	jne    c001921d <CPU::detectFeatures()+0x777>
c0019211:	51                   	push   ecx
c0019212:	51                   	push   ecx
c0019213:	68 17 b0 02 c0       	push   0xc002b017
c0019218:	e9 dc 01 00 00       	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c001921d:	66 81 fa 00 02       	cmp    dx,0x200
c0019222:	75 0c                	jne    c0019230 <CPU::detectFeatures()+0x78a>
c0019224:	52                   	push   edx
c0019225:	52                   	push   edx
c0019226:	68 2a b0 02 c0       	push   0xc002b02a
c001922b:	e9 c9 01 00 00       	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c0019230:	66 81 fa 40 02       	cmp    dx,0x240
c0019235:	75 0c                	jne    c0019243 <CPU::detectFeatures()+0x79d>
c0019237:	50                   	push   eax
c0019238:	50                   	push   eax
c0019239:	68 3c b0 02 c0       	push   0xc002b03c
c001923e:	e9 b6 01 00 00       	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c0019243:	83 f8 06             	cmp    eax,0x6
c0019246:	75 0c                	jne    c0019254 <CPU::detectFeatures()+0x7ae>
c0019248:	50                   	push   eax
c0019249:	50                   	push   eax
c001924a:	68 4e b0 02 c0       	push   0xc002b04e
c001924f:	e9 a5 01 00 00       	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c0019254:	83 f8 04             	cmp    eax,0x4
c0019257:	75 0c                	jne    c0019265 <CPU::detectFeatures()+0x7bf>
c0019259:	50                   	push   eax
c001925a:	50                   	push   eax
c001925b:	68 5a b0 02 c0       	push   0xc002b05a
c0019260:	e9 94 01 00 00       	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c0019265:	83 f8 03             	cmp    eax,0x3
c0019268:	0f 85 19 02 00 00    	jne    c0019487 <CPU::detectFeatures()+0x9e1>
c001926e:	50                   	push   eax
c001926f:	50                   	push   eax
c0019270:	68 62 b0 02 c0       	push   0xc002b062
c0019275:	e9 7f 01 00 00       	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c001927a:	80 fa 06             	cmp    dl,0x6
c001927d:	0f 85 db 00 00 00    	jne    c001935e <CPU::detectFeatures()+0x8b8>
c0019283:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019289:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001928e:	66 81 fa 80 01       	cmp    dx,0x180
c0019293:	75 0c                	jne    c00192a1 <CPU::detectFeatures()+0x7fb>
c0019295:	50                   	push   eax
c0019296:	50                   	push   eax
c0019297:	68 6d b0 02 c0       	push   0xc002b06d
c001929c:	e9 58 01 00 00       	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c00192a1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00192a7:	66 f7 c1 80 ff       	test   cx,0xff80
c00192ac:	75 0c                	jne    c00192ba <CPU::detectFeatures()+0x814>
c00192ae:	50                   	push   eax
c00192af:	50                   	push   eax
c00192b0:	68 7d b0 02 c0       	push   0xc002b07d
c00192b5:	e9 3f 01 00 00       	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c00192ba:	66 81 fa 40 02       	cmp    dx,0x240
c00192bf:	75 0c                	jne    c00192cd <CPU::detectFeatures()+0x827>
c00192c1:	55                   	push   ebp
c00192c2:	55                   	push   ebp
c00192c3:	68 84 b0 02 c0       	push   0xc002b084
c00192c8:	e9 2c 01 00 00       	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c00192cd:	66 81 fa 80 02       	cmp    dx,0x280
c00192d2:	75 0c                	jne    c00192e0 <CPU::detectFeatures()+0x83a>
c00192d4:	57                   	push   edi
c00192d5:	57                   	push   edi
c00192d6:	68 8d b0 02 c0       	push   0xc002b08d
c00192db:	e9 19 01 00 00       	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c00192e0:	66 81 fa 40 03       	cmp    dx,0x340
c00192e5:	74 ed                	je     c00192d4 <CPU::detectFeatures()+0x82e>
c00192e7:	66 81 fa c0 03       	cmp    dx,0x3c0
c00192ec:	75 0c                	jne    c00192fa <CPU::detectFeatures()+0x854>
c00192ee:	56                   	push   esi
c00192ef:	56                   	push   esi
c00192f0:	68 94 b0 02 c0       	push   0xc002b094
c00192f5:	e9 ff 00 00 00       	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c00192fa:	83 f8 06             	cmp    eax,0x6
c00192fd:	0f 84 45 ff ff ff    	je     c0019248 <CPU::detectFeatures()+0x7a2>
c0019303:	83 f8 04             	cmp    eax,0x4
c0019306:	0f 84 4d ff ff ff    	je     c0019259 <CPU::detectFeatures()+0x7b3>
c001930c:	83 f8 03             	cmp    eax,0x3
c001930f:	0f 85 72 01 00 00    	jne    c0019487 <CPU::detectFeatures()+0x9e1>
c0019315:	51                   	push   ecx
c0019316:	51                   	push   ecx
c0019317:	68 9d b0 02 c0       	push   0xc002b09d
c001931c:	53                   	push   ebx
c001931d:	e8 ce ab ff ff       	call   c0013ef0 <Device::setName(char const*)>
c0019322:	b1 c1                	mov    cl,0xc1
c0019324:	88 c8                	mov    al,cl
c0019326:	e6 22                	out    0x22,al
c0019328:	e4 23                	in     al,0x23
c001932a:	88 c2                	mov    dl,al
c001932c:	88 c8                	mov    al,cl
c001932e:	e6 22                	out    0x22,al
c0019330:	88 d0                	mov    al,dl
c0019332:	83 c8 10             	or     eax,0x10
c0019335:	e6 23                	out    0x23,al
c0019337:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001933e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019341:	89 d0                	mov    eax,edx
c0019343:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019349:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001934d:	40                   	inc    eax
c001934e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019354:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019359:	e9 a1 00 00 00       	jmp    c00193ff <CPU::detectFeatures()+0x959>
c001935e:	83 f8 06             	cmp    eax,0x6
c0019361:	0f 84 e1 fe ff ff    	je     c0019248 <CPU::detectFeatures()+0x7a2>
c0019367:	83 f8 04             	cmp    eax,0x4
c001936a:	0f 84 e9 fe ff ff    	je     c0019259 <CPU::detectFeatures()+0x7b3>
c0019370:	83 f8 03             	cmp    eax,0x3
c0019373:	0f 85 0e 01 00 00    	jne    c0019487 <CPU::detectFeatures()+0x9e1>
c0019379:	52                   	push   edx
c001937a:	52                   	push   edx
c001937b:	68 a8 b0 02 c0       	push   0xc002b0a8
c0019380:	eb 77                	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c0019382:	83 f8 07             	cmp    eax,0x7
c0019385:	75 09                	jne    c0019390 <CPU::detectFeatures()+0x8ea>
c0019387:	50                   	push   eax
c0019388:	50                   	push   eax
c0019389:	68 b2 b0 02 c0       	push   0xc002b0b2
c001938e:	eb 69                	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c0019390:	83 f8 0a             	cmp    eax,0xa
c0019393:	75 09                	jne    c001939e <CPU::detectFeatures()+0x8f8>
c0019395:	50                   	push   eax
c0019396:	50                   	push   eax
c0019397:	68 bd b0 02 c0       	push   0xc002b0bd
c001939c:	eb 5b                	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c001939e:	83 f8 0b             	cmp    eax,0xb
c00193a1:	75 09                	jne    c00193ac <CPU::detectFeatures()+0x906>
c00193a3:	50                   	push   eax
c00193a4:	50                   	push   eax
c00193a5:	68 c5 b0 02 c0       	push   0xc002b0c5
c00193aa:	eb 4d                	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c00193ac:	83 f8 08             	cmp    eax,0x8
c00193af:	75 09                	jne    c00193ba <CPU::detectFeatures()+0x914>
c00193b1:	50                   	push   eax
c00193b2:	50                   	push   eax
c00193b3:	68 ce b0 02 c0       	push   0xc002b0ce
c00193b8:	eb 3f                	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c00193ba:	83 f8 09             	cmp    eax,0x9
c00193bd:	75 09                	jne    c00193c8 <CPU::detectFeatures()+0x922>
c00193bf:	50                   	push   eax
c00193c0:	50                   	push   eax
c00193c1:	68 d6 b0 02 c0       	push   0xc002b0d6
c00193c6:	eb 31                	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c00193c8:	83 f8 05             	cmp    eax,0x5
c00193cb:	75 09                	jne    c00193d6 <CPU::detectFeatures()+0x930>
c00193cd:	50                   	push   eax
c00193ce:	50                   	push   eax
c00193cf:	68 de b0 02 c0       	push   0xc002b0de
c00193d4:	eb 23                	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c00193d6:	83 f8 0c             	cmp    eax,0xc
c00193d9:	75 09                	jne    c00193e4 <CPU::detectFeatures()+0x93e>
c00193db:	55                   	push   ebp
c00193dc:	55                   	push   ebp
c00193dd:	68 ec b0 02 c0       	push   0xc002b0ec
c00193e2:	eb 15                	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c00193e4:	83 f8 0d             	cmp    eax,0xd
c00193e7:	75 09                	jne    c00193f2 <CPU::detectFeatures()+0x94c>
c00193e9:	57                   	push   edi
c00193ea:	57                   	push   edi
c00193eb:	68 f7 b0 02 c0       	push   0xc002b0f7
c00193f0:	eb 07                	jmp    c00193f9 <CPU::detectFeatures()+0x953>
c00193f2:	56                   	push   esi
c00193f3:	56                   	push   esi
c00193f4:	68 0b b1 02 c0       	push   0xc002b10b
c00193f9:	53                   	push   ebx
c00193fa:	e8 f1 aa ff ff       	call   c0013ef0 <Device::setName(char const*)>
c00193ff:	83 c4 10             	add    esp,0x10
c0019402:	e9 80 00 00 00       	jmp    c0019487 <CPU::detectFeatures()+0x9e1>
c0019407:	51                   	push   ecx
c0019408:	51                   	push   ecx
c0019409:	68 57 af 02 c0       	push   0xc002af57
c001940e:	57                   	push   edi
c001940f:	e8 43 73 fe ff       	call   c0000757 <strcpy>
c0019414:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001941e:	e8 8b 6e fe ff       	call   c00002ae <is486>
c0019423:	83 c4 10             	add    esp,0x10
c0019426:	85 c0                	test   eax,eax
c0019428:	74 2b                	je     c0019455 <CPU::detectFeatures()+0x9af>
c001942a:	52                   	push   edx
c001942b:	52                   	push   edx
c001942c:	68 17 b1 02 c0       	push   0xc002b117
c0019431:	53                   	push   ebx
c0019432:	e8 b9 aa ff ff       	call   c0013ef0 <Device::setName(char const*)>
c0019437:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001943e:	0f 20 c0             	mov    eax,cr0
c0019441:	83 e0 14             	and    eax,0x14
c0019444:	83 c4 10             	add    esp,0x10
c0019447:	83 f8 04             	cmp    eax,0x4
c001944a:	75 1f                	jne    c001946b <CPU::detectFeatures()+0x9c5>
c001944c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019453:	eb 32                	jmp    c0019487 <CPU::detectFeatures()+0x9e1>
c0019455:	50                   	push   eax
c0019456:	50                   	push   eax
c0019457:	68 22 b1 02 c0       	push   0xc002b122
c001945c:	53                   	push   ebx
c001945d:	e8 8e aa ff ff       	call   c0013ef0 <Device::setName(char const*)>
c0019462:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019469:	eb d3                	jmp    c001943e <CPU::detectFeatures()+0x998>
c001946b:	e8 19 6e fe ff       	call   c0000289 <hasLegacyFPU>
c0019470:	83 e0 01             	and    eax,0x1
c0019473:	8d 14 00             	lea    edx,[eax+eax*1]
c0019476:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001947c:	83 e0 fd             	and    eax,0xfffffffd
c001947f:	09 d0                	or     eax,edx
c0019481:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019487:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001948e:	83 c4 4c             	add    esp,0x4c
c0019491:	5b                   	pop    ebx
c0019492:	5e                   	pop    esi
c0019493:	5f                   	pop    edi
c0019494:	5d                   	pop    ebp
c0019495:	c3                   	ret    

c0019496 <CPU::setupSMEP()>:
c0019496:	0f 20 e0             	mov    eax,cr4
c0019499:	0d 00 00 10 00       	or     eax,0x100000
c001949e:	0f 22 e0             	mov    cr4,eax
c00194a1:	c3                   	ret    

c00194a2 <CPU::setupUMIP()>:
c00194a2:	0f 20 e0             	mov    eax,cr4
c00194a5:	80 cc 08             	or     ah,0x8
c00194a8:	0f 22 e0             	mov    cr4,eax
c00194ab:	c3                   	ret    

c00194ac <CPU::setupTSC()>:
c00194ac:	0f 20 e0             	mov    eax,cr4
c00194af:	83 c8 04             	or     eax,0x4
c00194b2:	0f 22 e0             	mov    cr4,eax
c00194b5:	c3                   	ret    

c00194b6 <CPU::setupLargePages()>:
c00194b6:	0f 20 e0             	mov    eax,cr4
c00194b9:	83 c8 10             	or     eax,0x10
c00194bc:	0f 22 e0             	mov    cr4,eax
c00194bf:	c3                   	ret    

c00194c0 <CPU::setupPAT()>:
c00194c0:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00194c5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00194cc:	74 2c                	je     c00194fa <CPU::setupPAT()+0x3a>
c00194ce:	53                   	push   ebx
c00194cf:	83 ec 10             	sub    esp,0x10
c00194d2:	68 77 02 00 00       	push   0x277
c00194d7:	50                   	push   eax
c00194d8:	e8 e3 56 ff ff       	call   c000ebc0 <Computer::rdmsr(unsigned int)>
c00194dd:	83 e2 f8             	and    edx,0xfffffff8
c00194e0:	83 ca 01             	or     edx,0x1
c00194e3:	52                   	push   edx
c00194e4:	50                   	push   eax
c00194e5:	68 77 02 00 00       	push   0x277
c00194ea:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c00194f0:	e8 f7 56 ff ff       	call   c000ebec <Computer::wrmsr(unsigned int, unsigned long long)>
c00194f5:	83 c4 28             	add    esp,0x28
c00194f8:	5b                   	pop    ebx
c00194f9:	c3                   	ret    
c00194fa:	c3                   	ret    
c00194fb:	90                   	nop

c00194fc <CPU::setupMTRR()>:
c00194fc:	c3                   	ret    
c00194fd:	90                   	nop

c00194fe <CPU::setupGlobalPages()>:
c00194fe:	0f 20 e0             	mov    eax,cr4
c0019501:	0c 80                	or     al,0x80
c0019503:	0f 22 e0             	mov    cr4,eax
c0019506:	c3                   	ret    
c0019507:	90                   	nop

c0019508 <CPU::allowUsermodeDataAccess()>:
c0019508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001950c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019513:	74 03                	je     c0019518 <CPU::allowUsermodeDataAccess()+0x10>
c0019515:	0f 01 cb             	stac   
c0019518:	c3                   	ret    
c0019519:	90                   	nop

c001951a <CPU::prohibitUsermodeDataAccess()>:
c001951a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001951e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019525:	74 03                	je     c001952a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019527:	0f 01 ca             	clac   
c001952a:	c3                   	ret    
c001952b:	90                   	nop

c001952c <CPU::setupSMAP()>:
c001952c:	0f 20 e0             	mov    eax,cr4
c001952f:	0d 00 00 20 00       	or     eax,0x200000
c0019534:	0f 22 e0             	mov    cr4,eax
c0019537:	eb e1                	jmp    c001951a <CPU::prohibitUsermodeDataAccess()>
c0019539:	90                   	nop

c001953a <CPU::setupFeatures()>:
c001953a:	83 ec 0c             	sub    esp,0xc
c001953d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019541:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019548:	74 07                	je     c0019551 <CPU::setupFeatures()+0x17>
c001954a:	52                   	push   edx
c001954b:	e8 46 ff ff ff       	call   c0019496 <CPU::setupSMEP()>
c0019550:	58                   	pop    eax
c0019551:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019558:	74 07                	je     c0019561 <CPU::setupFeatures()+0x27>
c001955a:	52                   	push   edx
c001955b:	e8 cc ff ff ff       	call   c001952c <CPU::setupSMAP()>
c0019560:	58                   	pop    eax
c0019561:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019568:	74 07                	je     c0019571 <CPU::setupFeatures()+0x37>
c001956a:	52                   	push   edx
c001956b:	e8 32 ff ff ff       	call   c00194a2 <CPU::setupUMIP()>
c0019570:	58                   	pop    eax
c0019571:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019578:	74 07                	je     c0019581 <CPU::setupFeatures()+0x47>
c001957a:	52                   	push   edx
c001957b:	e8 2c ff ff ff       	call   c00194ac <CPU::setupTSC()>
c0019580:	58                   	pop    eax
c0019581:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019588:	74 07                	je     c0019591 <CPU::setupFeatures()+0x57>
c001958a:	52                   	push   edx
c001958b:	e8 26 ff ff ff       	call   c00194b6 <CPU::setupLargePages()>
c0019590:	59                   	pop    ecx
c0019591:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019598:	74 07                	je     c00195a1 <CPU::setupFeatures()+0x67>
c001959a:	52                   	push   edx
c001959b:	e8 5e ff ff ff       	call   c00194fe <CPU::setupGlobalPages()>
c00195a0:	58                   	pop    eax
c00195a1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00195a8:	74 0c                	je     c00195b6 <CPU::setupFeatures()+0x7c>
c00195aa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00195ae:	83 c4 0c             	add    esp,0xc
c00195b1:	e9 0a ff ff ff       	jmp    c00194c0 <CPU::setupPAT()>
c00195b6:	83 c4 0c             	add    esp,0xc
c00195b9:	c3                   	ret    

c00195ba <CPU::open(int, int, void*)>:
c00195ba:	57                   	push   edi
c00195bb:	56                   	push   esi
c00195bc:	53                   	push   ebx
c00195bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00195c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00195c5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00195cb:	83 ec 0c             	sub    esp,0xc
c00195ce:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00195d4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00195da:	50                   	push   eax
c00195db:	e8 cc 58 ff ff       	call   c000eeac <GDT::setup()>
c00195e0:	83 c4 0c             	add    esp,0xc
c00195e3:	6a 00                	push   0x0
c00195e5:	68 ef be ad de       	push   0xdeadbeef
c00195ea:	57                   	push   edi
c00195eb:	e8 78 7c ff ff       	call   c0011268 <TSS::setup(unsigned long, unsigned long)>
c00195f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00195f3:	e8 50 7c ff ff       	call   c0011248 <TSS::flush()>
c00195f8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00195fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0019601:	e8 02 5b ff ff       	call   c000f108 <IDT::setup()>
c0019606:	b8 00 04 00 00       	mov    eax,0x400
c001960b:	0f 23 f8             	mov    db7,eax
c001960e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019618:	e8 98 66 ff ff       	call   c000fcb5 <Phys::allocatePage()>
c001961d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019623:	89 30                	mov    DWORD PTR [eax],esi
c0019625:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001962b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001962e:	58                   	pop    eax
c001962f:	5a                   	pop    edx
c0019630:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019636:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001963a:	e8 5b 8c ff ff       	call   c001229a <VAS::setCPUSpecific(unsigned long)>
c001963f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019642:	e8 5f f4 ff ff       	call   c0018aa6 <CPU::detectFeatures()>
c0019647:	e8 6d bc ff ff       	call   c00152b9 <setupInterruptController()>
c001964c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019652:	a1 e0 da 02 c0       	mov    eax,ds:0xc002dae0
c0019657:	83 e0 10             	and    eax,0x10
c001965a:	83 f8 01             	cmp    eax,0x1
c001965d:	19 c0                	sbb    eax,eax
c001965f:	83 e0 46             	and    eax,0x46
c0019662:	83 c0 1e             	add    eax,0x1e
c0019665:	89 04 24             	mov    DWORD PTR [esp],eax
c0019668:	e8 2b d1 ff ff       	call   c0016798 <setupTimer(int)>
c001966d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019673:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019676:	e8 bf fe ff ff       	call   c001953a <CPU::setupFeatures()>
c001967b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001967e:	e8 a7 f1 ff ff       	call   c001882a <CPU::displayFeatures()>
c0019683:	83 c4 10             	add    esp,0x10
c0019686:	31 c0                	xor    eax,eax
c0019688:	5b                   	pop    ebx
c0019689:	5e                   	pop    esi
c001968a:	5f                   	pop    edi
c001968b:	c3                   	ret    

c001968c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001968c:	57                   	push   edi
c001968d:	56                   	push   esi
c001968e:	53                   	push   ebx
c001968f:	51                   	push   ecx
c0019690:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019694:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019697:	0f 02 c0             	lar    eax,ax
c001969a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001969d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00196a1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00196a4:	88 ca                	mov    dl,cl
c00196a6:	c0 ea 06             	shr    dl,0x6
c00196a9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00196ad:	89 ca                	mov    edx,ecx
c00196af:	66 c1 ea 03          	shr    dx,0x3
c00196b3:	83 e2 07             	and    edx,0x7
c00196b6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00196bb:	88 17                	mov    BYTE PTR [edi],dl
c00196bd:	0f 84 a6 01 00 00    	je     c0019869 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00196c3:	83 e1 07             	and    ecx,0x7
c00196c6:	80 f9 04             	cmp    cl,0x4
c00196c9:	0f 84 98 00 00 00    	je     c0019767 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00196cf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196d4:	0f 95 c0             	setne  al
c00196d7:	80 f9 05             	cmp    cl,0x5
c00196da:	0f 95 c2             	setne  dl
c00196dd:	08 c2                	or     dl,al
c00196df:	74 79                	je     c001975a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00196e1:	84 c9                	test   cl,cl
c00196e3:	75 05                	jne    c00196ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00196e5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00196e8:	eb 3c                	jmp    c0019726 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196ea:	80 f9 01             	cmp    cl,0x1
c00196ed:	75 05                	jne    c00196f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00196ef:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196f2:	eb 32                	jmp    c0019726 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196f4:	80 f9 02             	cmp    cl,0x2
c00196f7:	75 05                	jne    c00196fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00196f9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00196fc:	eb 28                	jmp    c0019726 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196fe:	31 c0                	xor    eax,eax
c0019700:	80 f9 03             	cmp    cl,0x3
c0019703:	75 05                	jne    c001970a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019705:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019708:	eb 1c                	jmp    c0019726 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001970a:	80 f9 05             	cmp    cl,0x5
c001970d:	75 05                	jne    c0019714 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001970f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019712:	eb 12                	jmp    c0019726 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019714:	80 f9 06             	cmp    cl,0x6
c0019717:	75 05                	jne    c001971e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019719:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001971c:	eb 08                	jmp    c0019726 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001971e:	80 f9 07             	cmp    cl,0x7
c0019721:	75 03                	jne    c0019726 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019723:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019726:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001972b:	75 10                	jne    c001973d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001972d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019731:	b9 03 00 00 00       	mov    ecx,0x3
c0019736:	01 d0                	add    eax,edx
c0019738:	e9 37 01 00 00       	jmp    c0019874 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001973d:	b9 02 00 00 00       	mov    ecx,0x2
c0019742:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019747:	0f 85 27 01 00 00    	jne    c0019874 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001974d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019750:	b9 06 00 00 00       	mov    ecx,0x6
c0019755:	e9 1a 01 00 00       	jmp    c0019874 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001975a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001975d:	b9 06 00 00 00       	mov    ecx,0x6
c0019762:	e9 0f 01 00 00       	jmp    c0019876 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019767:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001976a:	88 ca                	mov    dl,cl
c001976c:	c0 ea 06             	shr    dl,0x6
c001976f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019773:	89 ca                	mov    edx,ecx
c0019775:	66 c1 ea 03          	shr    dx,0x3
c0019779:	83 e2 07             	and    edx,0x7
c001977c:	80 e1 07             	and    cl,0x7
c001977f:	75 05                	jne    c0019786 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019781:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019784:	eb 4c                	jmp    c00197d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019786:	80 f9 01             	cmp    cl,0x1
c0019789:	75 05                	jne    c0019790 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001978b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001978e:	eb 42                	jmp    c00197d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019790:	80 f9 02             	cmp    cl,0x2
c0019793:	75 05                	jne    c001979a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019795:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019798:	eb 38                	jmp    c00197d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001979a:	80 f9 03             	cmp    cl,0x3
c001979d:	75 05                	jne    c00197a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001979f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00197a2:	eb 2e                	jmp    c00197d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197a4:	80 f9 04             	cmp    cl,0x4
c00197a7:	75 12                	jne    c00197bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00197a9:	f6 c4 60             	test   ah,0x60
c00197ac:	75 08                	jne    c00197b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00197ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00197b1:	8d 78 14             	lea    edi,[eax+0x14]
c00197b4:	eb 1c                	jmp    c00197d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197b6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00197b9:	eb 17                	jmp    c00197d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197bb:	80 f9 05             	cmp    cl,0x5
c00197be:	75 05                	jne    c00197c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00197c0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00197c3:	eb 0d                	jmp    c00197d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197c5:	80 f9 06             	cmp    cl,0x6
c00197c8:	75 05                	jne    c00197cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00197ca:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00197cd:	eb 03                	jmp    c00197d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197cf:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00197d2:	84 d2                	test   dl,dl
c00197d4:	75 05                	jne    c00197db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00197d6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00197d9:	eb 3c                	jmp    c0019817 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197db:	80 fa 01             	cmp    dl,0x1
c00197de:	75 05                	jne    c00197e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00197e0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00197e3:	eb 32                	jmp    c0019817 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197e5:	80 fa 02             	cmp    dl,0x2
c00197e8:	75 05                	jne    c00197ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00197ea:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00197ed:	eb 28                	jmp    c0019817 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197ef:	80 fa 03             	cmp    dl,0x3
c00197f2:	75 05                	jne    c00197f9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00197f4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00197f7:	eb 1e                	jmp    c0019817 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197f9:	31 c0                	xor    eax,eax
c00197fb:	80 fa 04             	cmp    dl,0x4
c00197fe:	74 17                	je     c0019817 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019800:	80 fa 05             	cmp    dl,0x5
c0019803:	75 05                	jne    c001980a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019805:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019808:	eb 0d                	jmp    c0019817 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001980a:	80 fa 06             	cmp    dl,0x6
c001980d:	75 05                	jne    c0019814 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001980f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019812:	eb 03                	jmp    c0019817 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019814:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019817:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001981c:	0f 94 c2             	sete   dl
c001981f:	80 f9 05             	cmp    cl,0x5
c0019822:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019826:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001982b:	d3 e0                	shl    eax,cl
c001982d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019831:	74 0a                	je     c001983d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019833:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019836:	b9 07 00 00 00       	mov    ecx,0x7
c001983b:	eb 37                	jmp    c0019874 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001983d:	01 f8                	add    eax,edi
c001983f:	b9 03 00 00 00       	mov    ecx,0x3
c0019844:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019849:	74 2b                	je     c0019876 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001984b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019850:	75 0d                	jne    c001985f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019852:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019856:	01 c8                	add    eax,ecx
c0019858:	b9 04 00 00 00       	mov    ecx,0x4
c001985d:	eb 17                	jmp    c0019876 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001985f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019862:	b9 07 00 00 00       	mov    ecx,0x7
c0019867:	eb 0d                	jmp    c0019876 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019869:	b9 02 00 00 00       	mov    ecx,0x2
c001986e:	b2 01                	mov    dl,0x1
c0019870:	31 c0                	xor    eax,eax
c0019872:	eb 02                	jmp    c0019876 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019874:	31 d2                	xor    edx,edx
c0019876:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001987a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001987c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019880:	88 11                	mov    BYTE PTR [ecx],dl
c0019882:	5a                   	pop    edx
c0019883:	5b                   	pop    ebx
c0019884:	5e                   	pop    esi
c0019885:	5f                   	pop    edi
c0019886:	c3                   	ret    
c0019887:	90                   	nop

c0019888 <EnvVarContainer::getEnv(char const*)>:
c0019888:	57                   	push   edi
c0019889:	56                   	push   esi
c001988a:	53                   	push   ebx
c001988b:	31 db                	xor    ebx,ebx
c001988d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019891:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019893:	7e 2b                	jle    c00198c0 <EnvVarContainer::getEnv(char const*)+0x38>
c0019895:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001989c:	50                   	push   eax
c001989d:	50                   	push   eax
c001989e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198a8:	e8 fb 6e fe ff       	call   c00007a8 <strcmp>
c00198ad:	83 c4 10             	add    esp,0x10
c00198b0:	85 c0                	test   eax,eax
c00198b2:	75 09                	jne    c00198bd <EnvVarContainer::getEnv(char const*)+0x35>
c00198b4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198b7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00198bb:	eb 05                	jmp    c00198c2 <EnvVarContainer::getEnv(char const*)+0x3a>
c00198bd:	43                   	inc    ebx
c00198be:	eb d1                	jmp    c0019891 <EnvVarContainer::getEnv(char const*)+0x9>
c00198c0:	31 c0                	xor    eax,eax
c00198c2:	5b                   	pop    ebx
c00198c3:	5e                   	pop    esi
c00198c4:	5f                   	pop    edi
c00198c5:	c3                   	ret    

c00198c6 <EnvVarContainer::setEnv(char const*, char const*)>:
c00198c6:	57                   	push   edi
c00198c7:	56                   	push   esi
c00198c8:	53                   	push   ebx
c00198c9:	83 ec 1c             	sub    esp,0x1c
c00198cc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00198d0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00198d4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00198d8:	57                   	push   edi
c00198d9:	e8 f7 6d fe ff       	call   c00006d5 <strlen>
c00198de:	40                   	inc    eax
c00198df:	89 04 24             	mov    DWORD PTR [esp],eax
c00198e2:	e8 31 5d ff ff       	call   c000f618 <malloc>
c00198e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00198ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00198ee:	e8 e2 6d fe ff       	call   c00006d5 <strlen>
c00198f3:	40                   	inc    eax
c00198f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00198f7:	e8 1c 5d ff ff       	call   c000f618 <malloc>
c00198fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00198ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019903:	e8 cd 6d fe ff       	call   c00006d5 <strlen>
c0019908:	83 c4 0c             	add    esp,0xc
c001990b:	40                   	inc    eax
c001990c:	50                   	push   eax
c001990d:	6a 00                	push   0x0
c001990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019913:	e8 a0 6d fe ff       	call   c00006b8 <memset>
c0019918:	89 3c 24             	mov    DWORD PTR [esp],edi
c001991b:	e8 b5 6d fe ff       	call   c00006d5 <strlen>
c0019920:	83 c4 0c             	add    esp,0xc
c0019923:	40                   	inc    eax
c0019924:	50                   	push   eax
c0019925:	57                   	push   edi
c0019926:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001992a:	e8 71 6d fe ff       	call   c00006a0 <memcpy>
c001992f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019932:	e8 9e 6d fe ff       	call   c00006d5 <strlen>
c0019937:	83 c4 0c             	add    esp,0xc
c001993a:	40                   	inc    eax
c001993b:	50                   	push   eax
c001993c:	6a 00                	push   0x0
c001993e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019942:	e8 71 6d fe ff       	call   c00006b8 <memset>
c0019947:	89 34 24             	mov    DWORD PTR [esp],esi
c001994a:	e8 86 6d fe ff       	call   c00006d5 <strlen>
c001994f:	83 c4 0c             	add    esp,0xc
c0019952:	40                   	inc    eax
c0019953:	50                   	push   eax
c0019954:	56                   	push   esi
c0019955:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019959:	e8 42 6d fe ff       	call   c00006a0 <memcpy>
c001995e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019960:	40                   	inc    eax
c0019961:	89 03                	mov    DWORD PTR [ebx],eax
c0019963:	c1 e0 03             	shl    eax,0x3
c0019966:	5a                   	pop    edx
c0019967:	59                   	pop    ecx
c0019968:	50                   	push   eax
c0019969:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001996c:	e8 93 5c ff ff       	call   c000f604 <realloc>
c0019971:	83 c4 0c             	add    esp,0xc
c0019974:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019977:	6a 08                	push   0x8
c0019979:	8d 54 24 10          	lea    edx,[esp+0x10]
c001997d:	52                   	push   edx
c001997e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019980:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019984:	50                   	push   eax
c0019985:	e8 16 6d fe ff       	call   c00006a0 <memcpy>
c001998a:	83 c4 20             	add    esp,0x20
c001998d:	5b                   	pop    ebx
c001998e:	5e                   	pop    esi
c001998f:	5f                   	pop    edi
c0019990:	c3                   	ret    
c0019991:	90                   	nop

c0019992 <EnvVarContainer::deleteEnv(char const*)>:
c0019992:	c3                   	ret    
c0019993:	90                   	nop

c0019994 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019994:	55                   	push   ebp
c0019995:	57                   	push   edi
c0019996:	56                   	push   esi
c0019997:	53                   	push   ebx
c0019998:	81 ec 38 01 00 00    	sub    esp,0x138
c001999e:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00199a5:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00199ac:	68 14 01 00 00       	push   0x114
c00199b1:	e8 62 5c ff ff       	call   c000f618 <malloc>
c00199b6:	83 c4 0c             	add    esp,0xc
c00199b9:	89 c7                	mov    edi,eax
c00199bb:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00199be:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00199c5:	50                   	push   eax
c00199c6:	e8 75 94 ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c00199cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00199ce:	e8 3f 97 ff ff       	call   c0013112 <File::exists()>
c00199d3:	83 c4 10             	add    esp,0x10
c00199d6:	84 c0                	test   al,al
c00199d8:	75 31                	jne    c0019a0b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00199da:	51                   	push   ecx
c00199db:	51                   	push   ecx
c00199dc:	6a 12                	push   0x12
c00199de:	57                   	push   edi
c00199df:	e8 c0 94 ff ff       	call   c0012ea4 <File::open(FileOpenMode)>
c00199e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00199e6:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00199e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00199ec:	e8 e4 6c fe ff       	call   c00006d5 <strlen>
c00199f1:	5a                   	pop    edx
c00199f2:	31 d2                	xor    edx,edx
c00199f4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00199f8:	51                   	push   ecx
c00199f9:	55                   	push   ebp
c00199fa:	52                   	push   edx
c00199fb:	50                   	push   eax
c00199fc:	57                   	push   edi
c00199fd:	ff d3                	call   ebx
c00199ff:	83 c4 14             	add    esp,0x14
c0019a02:	57                   	push   edi
c0019a03:	e8 fa 94 ff ff       	call   c0012f02 <File::close()>
c0019a08:	83 c4 10             	add    esp,0x10
c0019a0b:	31 db                	xor    ebx,ebx
c0019a0d:	50                   	push   eax
c0019a0e:	31 ed                	xor    ebp,ebp
c0019a10:	68 00 01 00 00       	push   0x100
c0019a15:	6a 00                	push   0x0
c0019a17:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a1b:	50                   	push   eax
c0019a1c:	e8 97 6c fe ff       	call   c00006b8 <memset>
c0019a21:	58                   	pop    eax
c0019a22:	5a                   	pop    edx
c0019a23:	6a 01                	push   0x1
c0019a25:	57                   	push   edi
c0019a26:	e8 79 94 ff ff       	call   c0012ea4 <File::open(FileOpenMode)>
c0019a2b:	83 c4 10             	add    esp,0x10
c0019a2e:	83 ec 0c             	sub    esp,0xc
c0019a31:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a33:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a37:	51                   	push   ecx
c0019a38:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a3c:	52                   	push   edx
c0019a3d:	6a 00                	push   0x0
c0019a3f:	6a 01                	push   0x1
c0019a41:	57                   	push   edi
c0019a42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a45:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a49:	83 c4 20             	add    esp,0x20
c0019a4c:	3c 0d                	cmp    al,0xd
c0019a4e:	0f 84 12 01 00 00    	je     c0019b66 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019a54:	85 db                	test   ebx,ebx
c0019a56:	0f 84 fd 00 00 00    	je     c0019b59 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019a5c:	3c 0a                	cmp    al,0xa
c0019a5e:	74 13                	je     c0019a73 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019a60:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a65:	74 0c                	je     c0019a73 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019a67:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019a6d:	0f 8e e6 00 00 00    	jle    c0019b59 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019a73:	83 ec 0c             	sub    esp,0xc
c0019a76:	8d 53 01             	lea    edx,[ebx+0x1]
c0019a79:	29 dd                	sub    ebp,ebx
c0019a7b:	52                   	push   edx
c0019a7c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019a80:	e8 93 5b ff ff       	call   c000f618 <malloc>
c0019a85:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019a88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019a8c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019a8f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019a93:	e8 80 5b ff ff       	call   c000f618 <malloc>
c0019a98:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019a9c:	83 c4 0c             	add    esp,0xc
c0019a9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019aa3:	52                   	push   edx
c0019aa4:	6a 00                	push   0x0
c0019aa6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019aaa:	e8 09 6c fe ff       	call   c00006b8 <memset>
c0019aaf:	83 c4 0c             	add    esp,0xc
c0019ab2:	53                   	push   ebx
c0019ab3:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019ab7:	55                   	push   ebp
c0019ab8:	01 eb                	add    ebx,ebp
c0019aba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019abe:	e8 dd 6b fe ff       	call   c00006a0 <memcpy>
c0019ac3:	83 c4 0c             	add    esp,0xc
c0019ac6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019aca:	51                   	push   ecx
c0019acb:	6a 00                	push   0x0
c0019acd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ad1:	e8 e2 6b fe ff       	call   c00006b8 <memset>
c0019ad6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ad9:	e8 f7 6b fe ff       	call   c00006d5 <strlen>
c0019ade:	83 c4 0c             	add    esp,0xc
c0019ae1:	50                   	push   eax
c0019ae2:	53                   	push   ebx
c0019ae3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ae7:	e8 b4 6b fe ff       	call   c00006a0 <memcpy>
c0019aec:	5b                   	pop    ebx
c0019aed:	58                   	pop    eax
c0019aee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019af2:	68 5c b1 02 c0       	push   0xc002b15c
c0019af7:	e8 eb 8d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0019afc:	8b 06                	mov    eax,DWORD PTR [esi]
c0019afe:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019b01:	40                   	inc    eax
c0019b02:	83 c4 10             	add    esp,0x10
c0019b05:	89 06                	mov    DWORD PTR [esi],eax
c0019b07:	85 d2                	test   edx,edx
c0019b09:	75 0c                	jne    c0019b17 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019b0b:	83 ec 0c             	sub    esp,0xc
c0019b0e:	6a 08                	push   0x8
c0019b10:	e8 03 5b ff ff       	call   c000f618 <malloc>
c0019b15:	eb 0c                	jmp    c0019b23 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019b17:	c1 e0 03             	shl    eax,0x3
c0019b1a:	51                   	push   ecx
c0019b1b:	51                   	push   ecx
c0019b1c:	50                   	push   eax
c0019b1d:	52                   	push   edx
c0019b1e:	e8 e1 5a ff ff       	call   c000f604 <realloc>
c0019b23:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019b26:	83 c4 10             	add    esp,0x10
c0019b29:	31 db                	xor    ebx,ebx
c0019b2b:	52                   	push   edx
c0019b2c:	6a 08                	push   0x8
c0019b2e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b32:	50                   	push   eax
c0019b33:	8b 16                	mov    edx,DWORD PTR [esi]
c0019b35:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019b38:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019b3c:	50                   	push   eax
c0019b3d:	e8 5e 6b fe ff       	call   c00006a0 <memcpy>
c0019b42:	83 c4 0c             	add    esp,0xc
c0019b45:	68 00 01 00 00       	push   0x100
c0019b4a:	6a 00                	push   0x0
c0019b4c:	55                   	push   ebp
c0019b4d:	31 ed                	xor    ebp,ebp
c0019b4f:	e8 64 6b fe ff       	call   c00006b8 <memset>
c0019b54:	83 c4 10             	add    esp,0x10
c0019b57:	eb 0d                	jmp    c0019b66 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019b59:	3c 3d                	cmp    al,0x3d
c0019b5b:	74 07                	je     c0019b64 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019b5d:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019b61:	45                   	inc    ebp
c0019b62:	eb 02                	jmp    c0019b66 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019b64:	89 eb                	mov    ebx,ebp
c0019b66:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b6b:	0f 85 bd fe ff ff    	jne    c0019a2e <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019b71:	50                   	push   eax
c0019b72:	50                   	push   eax
c0019b73:	ff 36                	push   DWORD PTR [esi]
c0019b75:	68 6a b1 02 c0       	push   0xc002b16a
c0019b7a:	e8 68 8d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0019b7f:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019b85:	5b                   	pop    ebx
c0019b86:	5e                   	pop    esi
c0019b87:	5f                   	pop    edi
c0019b88:	5d                   	pop    ebp
c0019b89:	c3                   	ret    

c0019b8a <EnvVarContainer::__loadSystem()>:
c0019b8a:	83 ec 10             	sub    esp,0x10
c0019b8d:	68 00 d0 02 c0       	push   0xc002d000
c0019b92:	68 95 b1 02 c0       	push   0xc002b195
c0019b97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b9b:	e8 f4 fd ff ff       	call   c0019994 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019ba0:	83 c4 1c             	add    esp,0x1c
c0019ba3:	c3                   	ret    

c0019ba4 <EnvVarContainer::__loadUser()>:
c0019ba4:	c3                   	ret    
c0019ba5:	90                   	nop

c0019ba6 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019ba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019baa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bb8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019bbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bc6:	90                   	nop
c0019bc7:	c3                   	ret    

c0019bc8 <EnvVarContainer::~EnvVarContainer()>:
c0019bc8:	83 ec 0c             	sub    esp,0xc
c0019bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bcf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bd2:	85 c0                	test   eax,eax
c0019bd4:	74 1d                	je     c0019bf3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bda:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bdc:	85 c0                	test   eax,eax
c0019bde:	74 13                	je     c0019bf3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019be7:	83 ec 0c             	sub    esp,0xc
c0019bea:	50                   	push   eax
c0019beb:	e8 38 5a ff ff       	call   c000f628 <free>
c0019bf0:	83 c4 10             	add    esp,0x10
c0019bf3:	90                   	nop
c0019bf4:	83 c4 0c             	add    esp,0xc
c0019bf7:	c3                   	ret    

c0019bf8 <Krnl::getEnv(Process*, char const*)>:
c0019bf8:	53                   	push   ebx
c0019bf9:	83 ec 08             	sub    esp,0x8
c0019bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c04:	39 05 34 10 03 c0    	cmp    DWORD PTR ds:0xc0031034,eax
c0019c0a:	74 04                	je     c0019c10 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c0c:	85 c0                	test   eax,eax
c0019c0e:	75 0b                	jne    c0019c1b <Krnl::getEnv(Process*, char const*)+0x23>
c0019c10:	a1 10 06 03 c0       	mov    eax,ds:0xc0030610
c0019c15:	85 c0                	test   eax,eax
c0019c17:	75 19                	jne    c0019c32 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c19:	eb 27                	jmp    c0019c42 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c1b:	52                   	push   edx
c0019c1c:	52                   	push   edx
c0019c1d:	53                   	push   ebx
c0019c1e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c24:	e8 5f fc ff ff       	call   c0019888 <EnvVarContainer::getEnv(char const*)>
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	85 c0                	test   eax,eax
c0019c2e:	75 28                	jne    c0019c58 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c30:	eb de                	jmp    c0019c10 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c32:	52                   	push   edx
c0019c33:	52                   	push   edx
c0019c34:	53                   	push   ebx
c0019c35:	50                   	push   eax
c0019c36:	e8 4d fc ff ff       	call   c0019888 <EnvVarContainer::getEnv(char const*)>
c0019c3b:	83 c4 10             	add    esp,0x10
c0019c3e:	85 c0                	test   eax,eax
c0019c40:	75 16                	jne    c0019c58 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c42:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c46:	a1 14 06 03 c0       	mov    eax,ds:0xc0030614
c0019c4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c4f:	83 c4 08             	add    esp,0x8
c0019c52:	5b                   	pop    ebx
c0019c53:	e9 30 fc ff ff       	jmp    c0019888 <EnvVarContainer::getEnv(char const*)>
c0019c58:	83 c4 08             	add    esp,0x8
c0019c5b:	5b                   	pop    ebx
c0019c5c:	c3                   	ret    

c0019c5d <Krnl::setEnvSystem(char const*, char const*)>:
c0019c5d:	83 ec 10             	sub    esp,0x10
c0019c60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c68:	ff 35 14 06 03 c0    	push   DWORD PTR ds:0xc0030614
c0019c6e:	e8 53 fc ff ff       	call   c00198c6 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c73:	83 c4 1c             	add    esp,0x1c
c0019c76:	c3                   	ret    

c0019c77 <Krnl::setEnvUser(char const*, char const*)>:
c0019c77:	a1 10 06 03 c0       	mov    eax,ds:0xc0030610
c0019c7c:	85 c0                	test   eax,eax
c0019c7e:	74 15                	je     c0019c95 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019c80:	83 ec 10             	sub    esp,0x10
c0019c83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c8b:	50                   	push   eax
c0019c8c:	e8 35 fc ff ff       	call   c00198c6 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c91:	83 c4 1c             	add    esp,0x1c
c0019c94:	c3                   	ret    
c0019c95:	c3                   	ret    

c0019c96 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c9a:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ca4:	e9 1d fc ff ff       	jmp    c00198c6 <EnvVarContainer::setEnv(char const*, char const*)>

c0019ca9 <Krnl::deleteEnvSystem(char const*)>:
c0019ca9:	c3                   	ret    

c0019caa <Krnl::deleteEnvUser(char const*)>:
c0019caa:	c3                   	ret    

c0019cab <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019cab:	c3                   	ret    

c0019cac <Krnl::newProcessEnv(Process*)>:
c0019cac:	83 ec 28             	sub    esp,0x28
c0019caf:	6a 0c                	push   0xc
c0019cb1:	e8 62 59 ff ff       	call   c000f618 <malloc>
c0019cb6:	5a                   	pop    edx
c0019cb7:	59                   	pop    ecx
c0019cb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cbc:	50                   	push   eax
c0019cbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cc1:	e8 e0 fe ff ff       	call   c0019ba6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019cc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cca:	83 c4 2c             	add    esp,0x2c
c0019ccd:	c3                   	ret    

c0019cce <Krnl::copyProcessEnv(Process*, Process*)>:
c0019cce:	56                   	push   esi
c0019ccf:	53                   	push   ebx
c0019cd0:	83 ec 10             	sub    esp,0x10
c0019cd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cd7:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019cdd:	6a 0c                	push   0xc
c0019cdf:	e8 34 59 ff ff       	call   c000f618 <malloc>
c0019ce4:	89 c3                	mov    ebx,eax
c0019ce6:	58                   	pop    eax
c0019ce7:	5a                   	pop    edx
c0019ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019cec:	53                   	push   ebx
c0019ced:	e8 b4 fe ff ff       	call   c0019ba6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019cf2:	8b 06                	mov    eax,DWORD PTR [esi]
c0019cf4:	89 03                	mov    DWORD PTR [ebx],eax
c0019cf6:	c1 e0 03             	shl    eax,0x3
c0019cf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cfc:	e8 17 59 ff ff       	call   c000f618 <malloc>
c0019d01:	83 c4 0c             	add    esp,0xc
c0019d04:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d07:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019d09:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019d10:	52                   	push   edx
c0019d11:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019d14:	50                   	push   eax
c0019d15:	e8 86 69 fe ff       	call   c00006a0 <memcpy>
c0019d1a:	89 d8                	mov    eax,ebx
c0019d1c:	83 c4 14             	add    esp,0x14
c0019d1f:	5b                   	pop    ebx
c0019d20:	5e                   	pop    esi
c0019d21:	c3                   	ret    

c0019d22 <Krnl::loadSystemEnv()>:
c0019d22:	53                   	push   ebx
c0019d23:	83 ec 14             	sub    esp,0x14
c0019d26:	6a 0c                	push   0xc
c0019d28:	e8 eb 58 ff ff       	call   c000f618 <malloc>
c0019d2d:	89 c3                	mov    ebx,eax
c0019d2f:	58                   	pop    eax
c0019d30:	5a                   	pop    edx
c0019d31:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c0019d37:	53                   	push   ebx
c0019d38:	e8 69 fe ff ff       	call   c0019ba6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d40:	89 1d 14 06 03 c0    	mov    DWORD PTR ds:0xc0030614,ebx
c0019d46:	e8 3f fe ff ff       	call   c0019b8a <EnvVarContainer::__loadSystem()>
c0019d4b:	83 c4 18             	add    esp,0x18
c0019d4e:	5b                   	pop    ebx
c0019d4f:	c3                   	ret    

c0019d50 <Krnl::loadUserEnv()>:
c0019d50:	53                   	push   ebx
c0019d51:	83 ec 14             	sub    esp,0x14
c0019d54:	6a 0c                	push   0xc
c0019d56:	e8 bd 58 ff ff       	call   c000f618 <malloc>
c0019d5b:	89 c3                	mov    ebx,eax
c0019d5d:	58                   	pop    eax
c0019d5e:	5a                   	pop    edx
c0019d5f:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c0019d65:	53                   	push   ebx
c0019d66:	e8 3b fe ff ff       	call   c0019ba6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d6b:	89 1d 10 06 03 c0    	mov    DWORD PTR ds:0xc0030610,ebx
c0019d71:	83 c4 18             	add    esp,0x18
c0019d74:	5b                   	pop    ebx
c0019d75:	c3                   	ret    

c0019d76 <Krnl::flushEnv()>:
c0019d76:	c3                   	ret    

c0019d77 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d7b:	8b 15 10 06 03 c0    	mov    edx,DWORD PTR ds:0xc0030610
c0019d81:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d87:	a1 14 06 03 c0       	mov    eax,ds:0xc0030614
c0019d8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d8e:	03 01                	add    eax,DWORD PTR [ecx]
c0019d90:	85 d2                	test   edx,edx
c0019d92:	74 02                	je     c0019d96 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019d94:	03 02                	add    eax,DWORD PTR [edx]
c0019d96:	c3                   	ret    

c0019d97 <Krnl::getProcessEnvPair(Process*, int)>:
c0019d97:	57                   	push   edi
c0019d98:	8b 0d 10 06 03 c0    	mov    ecx,DWORD PTR ds:0xc0030610
c0019d9e:	56                   	push   esi
c0019d9f:	85 c9                	test   ecx,ecx
c0019da1:	53                   	push   ebx
c0019da2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019da6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019daa:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019db0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019db4:	8b 02                	mov    eax,DWORD PTR [edx]
c0019db6:	75 47                	jne    c0019dff <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019db8:	39 c3                	cmp    ebx,eax
c0019dba:	7c 47                	jl     c0019e03 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019dbc:	8b 15 14 06 03 c0    	mov    edx,DWORD PTR ds:0xc0030614
c0019dc2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dc4:	01 c1                	add    ecx,eax
c0019dc6:	39 d9                	cmp    ecx,ebx
c0019dc8:	7e 6c                	jle    c0019e36 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019dca:	51                   	push   ecx
c0019dcb:	89 d9                	mov    ecx,ebx
c0019dcd:	29 c1                	sub    ecx,eax
c0019dcf:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019dd2:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019dd6:	53                   	push   ebx
c0019dd7:	68 b7 b1 02 c0       	push   0xc002b1b7
c0019ddc:	e8 06 8b ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0019de1:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019de7:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019de9:	a1 14 06 03 c0       	mov    eax,ds:0xc0030614
c0019dee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019df1:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019df5:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019df8:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019dfb:	89 06                	mov    DWORD PTR [esi],eax
c0019dfd:	eb 51                	jmp    c0019e50 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019dff:	39 c3                	cmp    ebx,eax
c0019e01:	7d 05                	jge    c0019e08 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019e03:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019e06:	eb 20                	jmp    c0019e28 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019e08:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019e0a:	8d 14 07             	lea    edx,[edi+eax*1]
c0019e0d:	39 da                	cmp    edx,ebx
c0019e0f:	7e 04                	jle    c0019e15 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019e11:	29 c3                	sub    ebx,eax
c0019e13:	eb 10                	jmp    c0019e25 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019e15:	8b 0d 14 06 03 c0    	mov    ecx,DWORD PTR ds:0xc0030614
c0019e1b:	03 11                	add    edx,DWORD PTR [ecx]
c0019e1d:	39 da                	cmp    edx,ebx
c0019e1f:	7e 15                	jle    c0019e36 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019e21:	29 c3                	sub    ebx,eax
c0019e23:	29 fb                	sub    ebx,edi
c0019e25:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019e28:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019e2c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019e2f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019e32:	89 06                	mov    DWORD PTR [esi],eax
c0019e34:	eb 1d                	jmp    c0019e53 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019e36:	83 ec 0c             	sub    esp,0xc
c0019e39:	68 cb b1 02 c0       	push   0xc002b1cb
c0019e3e:	e8 18 00 00 00       	call   c0019e5b <Krnl::panic(char const*)>
c0019e43:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019e49:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019e50:	83 c4 10             	add    esp,0x10
c0019e53:	89 f0                	mov    eax,esi
c0019e55:	5b                   	pop    ebx
c0019e56:	5e                   	pop    esi
c0019e57:	5f                   	pop    edi
c0019e58:	c2 04 00             	ret    0x4

c0019e5b <Krnl::panic(char const*)>:
c0019e5b:	55                   	push   ebp
c0019e5c:	89 e5                	mov    ebp,esp
c0019e5e:	53                   	push   ebx
c0019e5f:	83 ec 0c             	sub    esp,0xc
c0019e62:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e65:	fa                   	cli    
c0019e66:	c6 05 20 06 03 c0 01 	mov    BYTE PTR ds:0xc0030620,0x1
c0019e6d:	53                   	push   ebx
c0019e6e:	c6 05 04 ca 02 c0 00 	mov    BYTE PTR ds:0xc002ca04,0x0
c0019e75:	68 e5 b1 02 c0       	push   0xc002b1e5
c0019e7a:	e8 68 8a ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0019e7f:	58                   	pop    eax
c0019e80:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019e85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e8b:	e8 19 6c ff ff       	call   c0010aa9 <setActiveTerminal(VgaText*)>
c0019e90:	83 c4 0c             	add    esp,0xc
c0019e93:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019e98:	6a 01                	push   0x1
c0019e9a:	6a 0f                	push   0xf
c0019e9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea2:	e8 33 66 ff ff       	call   c00104da <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019ea7:	58                   	pop    eax
c0019ea8:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019ead:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb3:	e8 92 6e ff ff       	call   c0010d4a <VgaText::clearScreen()>
c0019eb8:	58                   	pop    eax
c0019eb9:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019ebe:	5a                   	pop    edx
c0019ebf:	68 fe b1 02 c0       	push   0xc002b1fe
c0019ec4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eca:	e8 f9 6f ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019ecf:	59                   	pop    ecx
c0019ed0:	58                   	pop    eax
c0019ed1:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019ed6:	68 a4 b2 02 c0       	push   0xc002b2a4
c0019edb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee1:	e8 e2 6f ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019ee6:	58                   	pop    eax
c0019ee7:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019eec:	5a                   	pop    edx
c0019eed:	68 1a b2 02 c0       	push   0xc002b21a
c0019ef2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ef8:	e8 cb 6f ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019efd:	59                   	pop    ecx
c0019efe:	58                   	pop    eax
c0019eff:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019f04:	53                   	push   ebx
c0019f05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f0b:	e8 b8 6f ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019f10:	58                   	pop    eax
c0019f11:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019f16:	5a                   	pop    edx
c0019f17:	68 3a b2 02 c0       	push   0xc002b23a
c0019f1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f22:	e8 a1 6f ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019f27:	a1 1c 06 03 c0       	mov    eax,ds:0xc003061c
c0019f2c:	83 c4 10             	add    esp,0x10
c0019f2f:	85 c0                	test   eax,eax
c0019f31:	74 02                	je     c0019f35 <Krnl::panic(char const*)+0xda>
c0019f33:	ff d0                	call   eax
c0019f35:	83 ec 0c             	sub    esp,0xc
c0019f38:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f3b:	e8 b2 2e 00 00       	call   c001cdf2 <Thr::getDriverNameFromAddress(unsigned long)>
c0019f40:	83 c4 10             	add    esp,0x10
c0019f43:	89 c3                	mov    ebx,eax
c0019f45:	85 c0                	test   eax,eax
c0019f47:	0f 84 50 02 00 00    	je     c001a19d <Krnl::panic(char const*)+0x342>
c0019f4d:	83 ec 08             	sub    esp,0x8
c0019f50:	8b 15 34 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031034
c0019f56:	68 e0 b2 02 c0       	push   0xc002b2e0
c0019f5b:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019f61:	e8 62 6f ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019f66:	58                   	pop    eax
c0019f67:	5a                   	pop    edx
c0019f68:	8b 15 34 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031034
c0019f6e:	68 1a b2 02 c0       	push   0xc002b21a
c0019f73:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019f79:	e8 4a 6f ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019f7e:	59                   	pop    ecx
c0019f7f:	58                   	pop    eax
c0019f80:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019f85:	53                   	push   ebx
c0019f86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f8c:	e8 37 6f ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019f91:	83 c4 10             	add    esp,0x10
c0019f94:	83 ec 08             	sub    esp,0x8
c0019f97:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019f9c:	68 39 b2 02 c0       	push   0xc002b239
c0019fa1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fa7:	e8 1c 6f ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019fac:	58                   	pop    eax
c0019fad:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019fb2:	5a                   	pop    edx
c0019fb3:	68 38 b3 02 c0       	push   0xc002b338
c0019fb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fbe:	e8 05 6f ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019fc3:	59                   	pop    ecx
c0019fc4:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019fc9:	5b                   	pop    ebx
c0019fca:	68 78 b3 02 c0       	push   0xc002b378
c0019fcf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd5:	e8 ee 6e ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019fda:	58                   	pop    eax
c0019fdb:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019fe0:	5a                   	pop    edx
c0019fe1:	68 25 b2 02 c0       	push   0xc002b225
c0019fe6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fec:	e8 d7 6e ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c0019ff1:	59                   	pop    ecx
c0019ff2:	5b                   	pop    ebx
c0019ff3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ff6:	68 3d b2 02 c0       	push   0xc002b23d
c0019ffb:	e8 e7 88 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001a000:	58                   	pop    eax
c001a001:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a004:	5a                   	pop    edx
c001a005:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a008:	68 46 b2 02 c0       	push   0xc002b246
c001a00d:	e8 d5 88 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001a012:	59                   	pop    ecx
c001a013:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a016:	5b                   	pop    ebx
c001a017:	8b 00                	mov    eax,DWORD PTR [eax]
c001a019:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a01c:	68 4f b2 02 c0       	push   0xc002b24f
c001a021:	e8 c1 88 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001a026:	58                   	pop    eax
c001a027:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a02c:	5a                   	pop    edx
c001a02d:	68 bc b3 02 c0       	push   0xc002b3bc
c001a032:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a038:	e8 8b 6e ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001a03d:	59                   	pop    ecx
c001a03e:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a043:	5b                   	pop    ebx
c001a044:	68 58 b2 02 c0       	push   0xc002b258
c001a049:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a04f:	e8 74 6e ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001a054:	0f 20 c0             	mov    eax,cr0
c001a057:	5a                   	pop    edx
c001a058:	59                   	pop    ecx
c001a059:	50                   	push   eax
c001a05a:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a05f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a065:	e8 84 6e ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c001a06a:	5b                   	pop    ebx
c001a06b:	58                   	pop    eax
c001a06c:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a071:	68 62 b2 02 c0       	push   0xc002b262
c001a076:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a07c:	e8 47 6e ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001a081:	0f 20 d0             	mov    eax,cr2
c001a084:	5a                   	pop    edx
c001a085:	59                   	pop    ecx
c001a086:	50                   	push   eax
c001a087:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a08c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a092:	e8 57 6e ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c001a097:	5b                   	pop    ebx
c001a098:	58                   	pop    eax
c001a099:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a09e:	68 6c b2 02 c0       	push   0xc002b26c
c001a0a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0a9:	e8 1a 6e ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001a0ae:	0f 20 d8             	mov    eax,cr3
c001a0b1:	5a                   	pop    edx
c001a0b2:	59                   	pop    ecx
c001a0b3:	50                   	push   eax
c001a0b4:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a0b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0bf:	e8 2a 6e ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c001a0c4:	5b                   	pop    ebx
c001a0c5:	58                   	pop    eax
c001a0c6:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a0cb:	68 7f b2 02 c0       	push   0xc002b27f
c001a0d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0d6:	e8 ed 6d ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001a0db:	0f 20 e0             	mov    eax,cr4
c001a0de:	5a                   	pop    edx
c001a0df:	59                   	pop    ecx
c001a0e0:	50                   	push   eax
c001a0e1:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a0e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0ec:	e8 fd 6d ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c001a0f1:	5b                   	pop    ebx
c001a0f2:	58                   	pop    eax
c001a0f3:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a0f8:	68 89 b2 02 c0       	push   0xc002b289
c001a0fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a103:	e8 c0 6d ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001a108:	5a                   	pop    edx
c001a109:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a10e:	59                   	pop    ecx
c001a10f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a115:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a118:	50                   	push   eax
c001a119:	e8 d0 6d ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c001a11e:	5b                   	pop    ebx
c001a11f:	58                   	pop    eax
c001a120:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a125:	68 a0 b2 02 c0       	push   0xc002b2a0
c001a12a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a130:	e8 93 6d ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001a135:	5a                   	pop    edx
c001a136:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a13b:	59                   	pop    ecx
c001a13c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a142:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a145:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a148:	50                   	push   eax
c001a149:	e8 a0 6d ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c001a14e:	5b                   	pop    ebx
c001a14f:	58                   	pop    eax
c001a150:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a155:	68 a0 b2 02 c0       	push   0xc002b2a0
c001a15a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a160:	e8 63 6d ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001a165:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a16a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a16d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a173:	8b 12                	mov    edx,DWORD PTR [edx]
c001a175:	59                   	pop    ecx
c001a176:	5b                   	pop    ebx
c001a177:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a17a:	50                   	push   eax
c001a17b:	e8 6e 6d ff ff       	call   c0010eee <VgaText::putx(unsigned int)>
c001a180:	83 c4 10             	add    esp,0x10
c001a183:	b2 fe                	mov    dl,0xfe
c001a185:	e4 60                	in     al,0x60
c001a187:	3c 1c                	cmp    al,0x1c
c001a189:	74 04                	je     c001a18f <Krnl::panic(char const*)+0x334>
c001a18b:	3c 5a                	cmp    al,0x5a
c001a18d:	75 f6                	jne    c001a185 <Krnl::panic(char const*)+0x32a>
c001a18f:	e4 64                	in     al,0x64
c001a191:	a8 02                	test   al,0x2
c001a193:	75 fa                	jne    c001a18f <Krnl::panic(char const*)+0x334>
c001a195:	88 d0                	mov    al,dl
c001a197:	e6 64                	out    0x64,al
c001a199:	fa                   	cli    
c001a19a:	f4                   	hlt    
c001a19b:	eb e8                	jmp    c001a185 <Krnl::panic(char const*)+0x32a>
c001a19d:	50                   	push   eax
c001a19e:	50                   	push   eax
c001a19f:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a1a4:	68 0c b3 02 c0       	push   0xc002b30c
c001a1a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1af:	e8 14 6d ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001a1b4:	58                   	pop    eax
c001a1b5:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a1ba:	5a                   	pop    edx
c001a1bb:	68 1a b2 02 c0       	push   0xc002b21a
c001a1c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1c6:	e8 fd 6c ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001a1cb:	59                   	pop    ecx
c001a1cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1d1:	5b                   	pop    ebx
c001a1d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a1d5:	83 c0 0c             	add    eax,0xc
c001a1d8:	50                   	push   eax
c001a1d9:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a1de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1e4:	e8 df 6c ff ff       	call   c0010ec8 <VgaText::puts(char const*)>
c001a1e9:	83 c4 10             	add    esp,0x10
c001a1ec:	e9 a3 fd ff ff       	jmp    c0019f94 <Krnl::panic(char const*)+0x139>

c001a1f1 <Net::switchEndian16(unsigned short)>:
c001a1f1:	83 ec 04             	sub    esp,0x4
c001a1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1f8:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a1fc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a200:	c1 f8 08             	sar    eax,0x8
c001a203:	89 c2                	mov    edx,eax
c001a205:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a209:	c1 e0 08             	shl    eax,0x8
c001a20c:	09 d0                	or     eax,edx
c001a20e:	83 c4 04             	add    esp,0x4
c001a211:	c3                   	ret    

c001a212 <Net::switchEndian32(unsigned int)>:
c001a212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a216:	c1 e8 18             	shr    eax,0x18
c001a219:	89 c2                	mov    edx,eax
c001a21b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a21f:	c1 e0 08             	shl    eax,0x8
c001a222:	25 00 00 ff 00       	and    eax,0xff0000
c001a227:	09 c2                	or     edx,eax
c001a229:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a22d:	c1 e8 08             	shr    eax,0x8
c001a230:	25 00 ff 00 00       	and    eax,0xff00
c001a235:	09 c2                	or     edx,eax
c001a237:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a23b:	c1 e0 18             	shl    eax,0x18
c001a23e:	09 d0                	or     eax,edx
c001a240:	c3                   	ret    

c001a241 <Net::crc32Calc(unsigned char*, int)>:
c001a241:	83 ec 10             	sub    esp,0x10
c001a244:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a249:	75 07                	jne    c001a252 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a24b:	b8 00 00 00 00       	mov    eax,0x0
c001a250:	eb 7c                	jmp    c001a2ce <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a252:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a257:	7f 07                	jg     c001a260 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a259:	b8 00 00 00 00       	mov    eax,0x0
c001a25e:	eb 6e                	jmp    c001a2ce <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a260:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a268:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a274:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a278:	7d 4e                	jge    c001a2c8 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a27a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a27e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a282:	01 d0                	add    eax,edx
c001a284:	8a 00                	mov    al,BYTE PTR [eax]
c001a286:	0f b6 c0             	movzx  eax,al
c001a289:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a28d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a295:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a29a:	7f 26                	jg     c001a2c2 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a29c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2a0:	83 e0 01             	and    eax,0x1
c001a2a3:	74 0d                	je     c001a2b2 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a2a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2a9:	d1 e8                	shr    eax,1
c001a2ab:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a2b0:	eb 06                	jmp    c001a2b8 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a2b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2b6:	d1 e8                	shr    eax,1
c001a2b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2bc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2c0:	eb d3                	jmp    c001a295 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a2c2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a2c6:	eb a8                	jmp    c001a270 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a2c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2cc:	f7 d0                	not    eax
c001a2ce:	83 c4 10             	add    esp,0x10
c001a2d1:	c3                   	ret    

c001a2d2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a2d2:	83 ec 1c             	sub    esp,0x1c
c001a2d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a2dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a2e5:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a2ea:	7f 14                	jg     c001a300 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a2ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2f0:	8d 50 01             	lea    edx,[eax+0x1]
c001a2f3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a2f7:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a2fa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2fe:	eb e5                	jmp    c001a2e5 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a300:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a304:	8d 50 01             	lea    edx,[eax+0x1]
c001a307:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a30b:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a30e:	83 ec 04             	sub    esp,0x4
c001a311:	6a 06                	push   0x6
c001a313:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a317:	50                   	push   eax
c001a318:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a31c:	e8 7f 63 fe ff       	call   c00006a0 <memcpy>
c001a321:	83 c4 10             	add    esp,0x10
c001a324:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a329:	83 ec 04             	sub    esp,0x4
c001a32c:	6a 06                	push   0x6
c001a32e:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a332:	50                   	push   eax
c001a333:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a337:	e8 64 63 fe ff       	call   c00006a0 <memcpy>
c001a33c:	83 c4 10             	add    esp,0x10
c001a33f:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a344:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a348:	0f b7 c0             	movzx  eax,ax
c001a34b:	c1 f8 08             	sar    eax,0x8
c001a34e:	89 c1                	mov    ecx,eax
c001a350:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a354:	8d 50 01             	lea    edx,[eax+0x1]
c001a357:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a35b:	88 ca                	mov    dl,cl
c001a35d:	88 10                	mov    BYTE PTR [eax],dl
c001a35f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a363:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a367:	8d 48 01             	lea    ecx,[eax+0x1]
c001a36a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a36e:	88 10                	mov    BYTE PTR [eax],dl
c001a370:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a378:	83 ec 04             	sub    esp,0x4
c001a37b:	52                   	push   edx
c001a37c:	50                   	push   eax
c001a37d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a381:	e8 1a 63 fe ff       	call   c00006a0 <memcpy>
c001a386:	83 c4 10             	add    esp,0x10
c001a389:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a38d:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a391:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a395:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a399:	83 ec 08             	sub    esp,0x8
c001a39c:	50                   	push   eax
c001a39d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a3a1:	e8 9b fe ff ff       	call   c001a241 <Net::crc32Calc(unsigned char*, int)>
c001a3a6:	83 c4 10             	add    esp,0x10
c001a3a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3b1:	c1 e8 18             	shr    eax,0x18
c001a3b4:	89 c1                	mov    ecx,eax
c001a3b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3ba:	8d 50 01             	lea    edx,[eax+0x1]
c001a3bd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a3c1:	88 ca                	mov    dl,cl
c001a3c3:	88 10                	mov    BYTE PTR [eax],dl
c001a3c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3c9:	c1 e8 10             	shr    eax,0x10
c001a3cc:	89 c1                	mov    ecx,eax
c001a3ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3d2:	8d 50 01             	lea    edx,[eax+0x1]
c001a3d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a3d9:	88 ca                	mov    dl,cl
c001a3db:	88 10                	mov    BYTE PTR [eax],dl
c001a3dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3e1:	c1 e8 08             	shr    eax,0x8
c001a3e4:	89 c1                	mov    ecx,eax
c001a3e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3ea:	8d 50 01             	lea    edx,[eax+0x1]
c001a3ed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a3f1:	88 ca                	mov    dl,cl
c001a3f3:	88 10                	mov    BYTE PTR [eax],dl
c001a3f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3f9:	8d 50 01             	lea    edx,[eax+0x1]
c001a3fc:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a400:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a404:	88 10                	mov    BYTE PTR [eax],dl
c001a406:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a40a:	83 c4 1c             	add    esp,0x1c
c001a40d:	c3                   	ret    

c001a40e <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a40e:	83 ec 2c             	sub    esp,0x2c
c001a411:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a419:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a41e:	83 ec 04             	sub    esp,0x4
c001a421:	6a 06                	push   0x6
c001a423:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a427:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a42b:	83 c0 0e             	add    eax,0xe
c001a42e:	50                   	push   eax
c001a42f:	e8 6c 62 fe ff       	call   c00006a0 <memcpy>
c001a434:	83 c4 10             	add    esp,0x10
c001a437:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a43c:	83 ec 04             	sub    esp,0x4
c001a43f:	6a 06                	push   0x6
c001a441:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a445:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a449:	83 c0 08             	add    eax,0x8
c001a44c:	50                   	push   eax
c001a44d:	e8 4e 62 fe ff       	call   c00006a0 <memcpy>
c001a452:	83 c4 10             	add    esp,0x10
c001a455:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a45a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a45e:	8d 50 01             	lea    edx,[eax+0x1]
c001a461:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a465:	8a 00                	mov    al,BYTE PTR [eax]
c001a467:	0f b6 c0             	movzx  eax,al
c001a46a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a46f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a473:	8d 50 01             	lea    edx,[eax+0x1]
c001a476:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a47a:	8a 00                	mov    al,BYTE PTR [eax]
c001a47c:	0f b6 c0             	movzx  eax,al
c001a47f:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a484:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a489:	c1 e0 08             	shl    eax,0x8
c001a48c:	89 c2                	mov    edx,eax
c001a48e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a492:	09 d0                	or     eax,edx
c001a494:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a498:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a49c:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a4a1:	75 3a                	jne    c001a4dd <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a4a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4a7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4aa:	66 3d dc 05          	cmp    ax,0x5dc
c001a4ae:	77 10                	ja     c001a4c0 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a4b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4b7:	0f b7 c0             	movzx  eax,ax
c001a4ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a4be:	eb 1d                	jmp    c001a4dd <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a4c0:	83 ec 0c             	sub    esp,0xc
c001a4c3:	68 e4 b3 02 c0       	push   0xc002b3e4
c001a4c8:	e8 1a 84 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001a4cd:	83 c4 10             	add    esp,0x10
c001a4d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4d4:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a4d8:	e9 c0 00 00 00       	jmp    c001a59d <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a4dd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a4e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4e7:	83 ec 04             	sub    esp,0x4
c001a4ea:	52                   	push   edx
c001a4eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a4ef:	50                   	push   eax
c001a4f0:	e8 ab 61 fe ff       	call   c00006a0 <memcpy>
c001a4f5:	83 c4 10             	add    esp,0x10
c001a4f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4fc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a500:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a504:	8d 50 01             	lea    edx,[eax+0x1]
c001a507:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a50b:	8a 00                	mov    al,BYTE PTR [eax]
c001a50d:	0f b6 c0             	movzx  eax,al
c001a510:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a514:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a518:	8d 50 01             	lea    edx,[eax+0x1]
c001a51b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a51f:	8a 00                	mov    al,BYTE PTR [eax]
c001a521:	0f b6 c0             	movzx  eax,al
c001a524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a528:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a52c:	8d 50 01             	lea    edx,[eax+0x1]
c001a52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a533:	8a 00                	mov    al,BYTE PTR [eax]
c001a535:	0f b6 c0             	movzx  eax,al
c001a538:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a53c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a540:	8d 50 01             	lea    edx,[eax+0x1]
c001a543:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a547:	8a 00                	mov    al,BYTE PTR [eax]
c001a549:	0f b6 c0             	movzx  eax,al
c001a54c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a550:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a554:	c1 e0 18             	shl    eax,0x18
c001a557:	89 c2                	mov    edx,eax
c001a559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a55d:	c1 e0 10             	shl    eax,0x10
c001a560:	09 c2                	or     edx,eax
c001a562:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a566:	c1 e0 08             	shl    eax,0x8
c001a569:	09 d0                	or     eax,edx
c001a56b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a56f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a573:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a577:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a57b:	83 e8 04             	sub    eax,0x4
c001a57e:	83 ec 08             	sub    esp,0x8
c001a581:	50                   	push   eax
c001a582:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a586:	e8 b6 fc ff ff       	call   c001a241 <Net::crc32Calc(unsigned char*, int)>
c001a58b:	83 c4 10             	add    esp,0x10
c001a58e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a592:	0f 94 c2             	sete   dl
c001a595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a599:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a59c:	90                   	nop
c001a59d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5a1:	83 c4 2c             	add    esp,0x2c
c001a5a4:	c2 04 00             	ret    0x4

c001a5a7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a5a7:	55                   	push   ebp
c001a5a8:	57                   	push   edi
c001a5a9:	56                   	push   esi
c001a5aa:	53                   	push   ebx
c001a5ab:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a5b1:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a5b8:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a5ba:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a5bd:	80 fb 40             	cmp    bl,0x40
c001a5c0:	75 1b                	jne    c001a5dd <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a5c2:	8a 16                	mov    dl,BYTE PTR [esi]
c001a5c4:	84 d2                	test   dl,dl
c001a5c6:	0f 84 f1 00 00 00    	je     c001a6bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a5cc:	8d 46 01             	lea    eax,[esi+0x1]
c001a5cf:	80 fa 3a             	cmp    dl,0x3a
c001a5d2:	74 04                	je     c001a5d8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a5d4:	89 c6                	mov    esi,eax
c001a5d6:	eb ea                	jmp    c001a5c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a5d8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a5db:	89 c6                	mov    esi,eax
c001a5dd:	50                   	push   eax
c001a5de:	6a 40                	push   0x40
c001a5e0:	6a 00                	push   0x0
c001a5e2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a5e6:	50                   	push   eax
c001a5e7:	e8 cc 60 fe ff       	call   c00006b8 <memset>
c001a5ec:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a5f3:	31 c0                	xor    eax,eax
c001a5f5:	83 c4 10             	add    esp,0x10
c001a5f8:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a5fa:	84 c9                	test   cl,cl
c001a5fc:	0f 84 bb 00 00 00    	je     c001a6bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a602:	3d c7 00 00 00       	cmp    eax,0xc7
c001a607:	0f 8f b0 00 00 00    	jg     c001a6bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a60d:	80 f9 0a             	cmp    cl,0xa
c001a610:	0f 85 98 00 00 00    	jne    c001a6ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a616:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a61b:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a61f:	a8 df                	test   al,0xdf
c001a621:	0f 94 c1             	sete   cl
c001a624:	3c 23                	cmp    al,0x23
c001a626:	0f 94 c2             	sete   dl
c001a629:	08 d1                	or     cl,dl
c001a62b:	75 4a                	jne    c001a677 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a62d:	8d 50 f7             	lea    edx,[eax-0x9]
c001a630:	80 fa 01             	cmp    dl,0x1
c001a633:	76 42                	jbe    c001a677 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a635:	3c 5b                	cmp    al,0x5b
c001a637:	75 42                	jne    c001a67b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a639:	80 fb 40             	cmp    bl,0x40
c001a63c:	75 39                	jne    c001a677 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a63e:	83 ec 0c             	sub    esp,0xc
c001a641:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a645:	52                   	push   edx
c001a646:	e8 8a 60 fe ff       	call   c00006d5 <strlen>
c001a64b:	83 c4 10             	add    esp,0x10
c001a64e:	83 f8 3f             	cmp    eax,0x3f
c001a651:	77 6a                	ja     c001a6bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a653:	50                   	push   eax
c001a654:	50                   	push   eax
c001a655:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a659:	52                   	push   edx
c001a65a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a65e:	52                   	push   edx
c001a65f:	e8 f3 60 fe ff       	call   c0000757 <strcpy>
c001a664:	58                   	pop    eax
c001a665:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a669:	52                   	push   edx
c001a66a:	e8 66 60 fe ff       	call   c00006d5 <strlen>
c001a66f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a674:	83 c4 10             	add    esp,0x10
c001a677:	31 d2                	xor    edx,edx
c001a679:	eb 3a                	jmp    c001a6b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a67b:	80 fb 40             	cmp    bl,0x40
c001a67e:	74 06                	je     c001a686 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a680:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a684:	eb 20                	jmp    c001a6a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a686:	50                   	push   eax
c001a687:	50                   	push   eax
c001a688:	55                   	push   ebp
c001a689:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a68d:	50                   	push   eax
c001a68e:	e8 15 61 fe ff       	call   c00007a8 <strcmp>
c001a693:	83 c4 10             	add    esp,0x10
c001a696:	85 c0                	test   eax,eax
c001a698:	75 dd                	jne    c001a677 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a69a:	eb e4                	jmp    c001a680 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a69c:	8d 50 01             	lea    edx,[eax+0x1]
c001a69f:	80 f9 3d             	cmp    cl,0x3d
c001a6a2:	74 1d                	je     c001a6c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a6a4:	89 d0                	mov    eax,edx
c001a6a6:	8a 08                	mov    cl,BYTE PTR [eax]
c001a6a8:	84 c9                	test   cl,cl
c001a6aa:	75 f0                	jne    c001a69c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a6ac:	eb 0f                	jmp    c001a6bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6ae:	8d 50 01             	lea    edx,[eax+0x1]
c001a6b1:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a6b5:	47                   	inc    edi
c001a6b6:	89 d0                	mov    eax,edx
c001a6b8:	e9 3b ff ff ff       	jmp    c001a5f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a6bd:	31 c0                	xor    eax,eax
c001a6bf:	eb 33                	jmp    c001a6f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a6c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6c5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a6c8:	50                   	push   eax
c001a6c9:	50                   	push   eax
c001a6ca:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a6ce:	50                   	push   eax
c001a6cf:	56                   	push   esi
c001a6d0:	e8 d3 60 fe ff       	call   c00007a8 <strcmp>
c001a6d5:	83 c4 10             	add    esp,0x10
c001a6d8:	85 c0                	test   eax,eax
c001a6da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a6de:	75 97                	jne    c001a677 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6e0:	51                   	push   ecx
c001a6e1:	51                   	push   ecx
c001a6e2:	52                   	push   edx
c001a6e3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a6ea:	e8 68 60 fe ff       	call   c0000757 <strcpy>
c001a6ef:	83 c4 10             	add    esp,0x10
c001a6f2:	b0 01                	mov    al,0x1
c001a6f4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a6fa:	5b                   	pop    ebx
c001a6fb:	5e                   	pop    esi
c001a6fc:	5f                   	pop    edi
c001a6fd:	5d                   	pop    ebp
c001a6fe:	c3                   	ret    

c001a6ff <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a6ff:	57                   	push   edi
c001a700:	56                   	push   esi
c001a701:	53                   	push   ebx
c001a702:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a708:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a70f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a716:	53                   	push   ebx
c001a717:	e8 b9 5f fe ff       	call   c00006d5 <strlen>
c001a71c:	89 34 24             	mov    DWORD PTR [esp],esi
c001a71f:	89 c7                	mov    edi,eax
c001a721:	e8 af 5f fe ff       	call   c00006d5 <strlen>
c001a726:	83 c4 10             	add    esp,0x10
c001a729:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a72d:	3d ff 00 00 00       	cmp    eax,0xff
c001a732:	0f 87 d3 00 00 00    	ja     c001a80b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a738:	57                   	push   edi
c001a739:	57                   	push   edi
c001a73a:	56                   	push   esi
c001a73b:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a73f:	56                   	push   esi
c001a740:	e8 12 60 fe ff       	call   c0000757 <strcpy>
c001a745:	58                   	pop    eax
c001a746:	5a                   	pop    edx
c001a747:	68 2f b8 02 c0       	push   0xc002b82f
c001a74c:	56                   	push   esi
c001a74d:	e8 bc 60 fe ff       	call   c000080e <strcat>
c001a752:	59                   	pop    ecx
c001a753:	5f                   	pop    edi
c001a754:	53                   	push   ebx
c001a755:	56                   	push   esi
c001a756:	e8 b3 60 fe ff       	call   c000080e <strcat>
c001a75b:	58                   	pop    eax
c001a75c:	5a                   	pop    edx
c001a75d:	68 30 b4 02 c0       	push   0xc002b430
c001a762:	56                   	push   esi
c001a763:	e8 a6 60 fe ff       	call   c000080e <strcat>
c001a768:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a76f:	e8 a4 4e ff ff       	call   c000f618 <malloc>
c001a774:	83 c4 0c             	add    esp,0xc
c001a777:	89 c3                	mov    ebx,eax
c001a779:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c001a77f:	56                   	push   esi
c001a780:	50                   	push   eax
c001a781:	e8 ba 86 ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001a786:	83 c4 10             	add    esp,0x10
c001a789:	85 db                	test   ebx,ebx
c001a78b:	74 7e                	je     c001a80b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a78d:	51                   	push   ecx
c001a78e:	51                   	push   ecx
c001a78f:	6a 01                	push   0x1
c001a791:	53                   	push   ebx
c001a792:	e8 0d 87 ff ff       	call   c0012ea4 <File::open(FileOpenMode)>
c001a797:	83 c4 10             	add    esp,0x10
c001a79a:	85 c0                	test   eax,eax
c001a79c:	74 08                	je     c001a7a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a79e:	83 ec 0c             	sub    esp,0xc
c001a7a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7a3:	53                   	push   ebx
c001a7a4:	eb 5f                	jmp    c001a805 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a7a6:	52                   	push   edx
c001a7a7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a7ab:	50                   	push   eax
c001a7ac:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a7b0:	50                   	push   eax
c001a7b1:	53                   	push   ebx
c001a7b2:	e8 99 89 ff ff       	call   c0013150 <File::stat(unsigned long long*, bool*)>
c001a7b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7bb:	83 c4 10             	add    esp,0x10
c001a7be:	89 c1                	mov    ecx,eax
c001a7c0:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a7c4:	74 31                	je     c001a7f7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7c6:	83 ec 0c             	sub    esp,0xc
c001a7c9:	50                   	push   eax
c001a7ca:	e8 49 4e ff ff       	call   c000f618 <malloc>
c001a7cf:	89 c6                	mov    esi,eax
c001a7d1:	58                   	pop    eax
c001a7d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7d4:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a7d8:	52                   	push   edx
c001a7d9:	56                   	push   esi
c001a7da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7e2:	53                   	push   ebx
c001a7e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a7e6:	83 c4 20             	add    esp,0x20
c001a7e9:	85 c0                	test   eax,eax
c001a7eb:	75 0a                	jne    c001a7f7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7f1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a7f5:	74 18                	je     c001a80f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a7f7:	83 ec 0c             	sub    esp,0xc
c001a7fa:	53                   	push   ebx
c001a7fb:	e8 02 87 ff ff       	call   c0012f02 <File::close()>
c001a800:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a802:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a805:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a808:	83 c4 10             	add    esp,0x10
c001a80b:	31 c0                	xor    eax,eax
c001a80d:	eb 3b                	jmp    c001a84a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a80f:	83 ec 0c             	sub    esp,0xc
c001a812:	53                   	push   ebx
c001a813:	e8 ea 86 ff ff       	call   c0012f02 <File::close()>
c001a818:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a81a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a81d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a820:	83 c4 0c             	add    esp,0xc
c001a823:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a82a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a831:	56                   	push   esi
c001a832:	e8 70 fd ff ff       	call   c001a5a7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a837:	89 34 24             	mov    DWORD PTR [esp],esi
c001a83a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a83e:	e8 e5 4d ff ff       	call   c000f628 <free>
c001a843:	83 c4 10             	add    esp,0x10
c001a846:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a84a:	81 c4 20 01 00 00    	add    esp,0x120
c001a850:	5b                   	pop    ebx
c001a851:	5e                   	pop    esi
c001a852:	5f                   	pop    edi
c001a853:	c3                   	ret    

c001a854 <Reg::getLine(char*, char*, char*)>:
c001a854:	57                   	push   edi
c001a855:	56                   	push   esi
c001a856:	53                   	push   ebx
c001a857:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a85b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a85f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a863:	57                   	push   edi
c001a864:	56                   	push   esi
c001a865:	53                   	push   ebx
c001a866:	68 35 b4 02 c0       	push   0xc002b435
c001a86b:	e8 8f fe ff ff       	call   c001a6ff <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a870:	83 c4 10             	add    esp,0x10
c001a873:	84 c0                	test   al,al
c001a875:	75 10                	jne    c001a887 <Reg::getLine(char*, char*, char*)+0x33>
c001a877:	57                   	push   edi
c001a878:	56                   	push   esi
c001a879:	53                   	push   ebx
c001a87a:	68 5a b4 02 c0       	push   0xc002b45a
c001a87f:	e8 7b fe ff ff       	call   c001a6ff <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a884:	83 c4 10             	add    esp,0x10
c001a887:	5b                   	pop    ebx
c001a888:	5e                   	pop    esi
c001a889:	5f                   	pop    edi
c001a88a:	c3                   	ret    

c001a88b <Reg::readInt(char*, char*, int*)>:
c001a88b:	55                   	push   ebp
c001a88c:	57                   	push   edi
c001a88d:	56                   	push   esi
c001a88e:	53                   	push   ebx
c001a88f:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a895:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a899:	57                   	push   edi
c001a89a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8a1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8a8:	e8 a7 ff ff ff       	call   c001a854 <Reg::getLine(char*, char*, char*)>
c001a8ad:	83 c4 10             	add    esp,0x10
c001a8b0:	84 c0                	test   al,al
c001a8b2:	0f 84 b3 00 00 00    	je     c001a96b <Reg::readInt(char*, char*, int*)+0xe0>
c001a8b8:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a8bc:	80 fa 2b             	cmp    dl,0x2b
c001a8bf:	74 0c                	je     c001a8cd <Reg::readInt(char*, char*, int*)+0x42>
c001a8c1:	80 fa 2d             	cmp    dl,0x2d
c001a8c4:	75 0e                	jne    c001a8d4 <Reg::readInt(char*, char*, int*)+0x49>
c001a8c6:	ba 01 00 00 00       	mov    edx,0x1
c001a8cb:	eb 0b                	jmp    c001a8d8 <Reg::readInt(char*, char*, int*)+0x4d>
c001a8cd:	ba 01 00 00 00       	mov    edx,0x1
c001a8d2:	eb 02                	jmp    c001a8d6 <Reg::readInt(char*, char*, int*)+0x4b>
c001a8d4:	31 d2                	xor    edx,edx
c001a8d6:	31 c0                	xor    eax,eax
c001a8d8:	be 0a 00 00 00       	mov    esi,0xa
c001a8dd:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a8e2:	75 20                	jne    c001a904 <Reg::readInt(char*, char*, int*)+0x79>
c001a8e4:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a8e8:	80 f9 78             	cmp    cl,0x78
c001a8eb:	75 0a                	jne    c001a8f7 <Reg::readInt(char*, char*, int*)+0x6c>
c001a8ed:	83 c2 02             	add    edx,0x2
c001a8f0:	be 10 00 00 00       	mov    esi,0x10
c001a8f5:	eb 0d                	jmp    c001a904 <Reg::readInt(char*, char*, int*)+0x79>
c001a8f7:	80 f9 62             	cmp    cl,0x62
c001a8fa:	75 08                	jne    c001a904 <Reg::readInt(char*, char*, int*)+0x79>
c001a8fc:	83 c2 02             	add    edx,0x2
c001a8ff:	be 02 00 00 00       	mov    esi,0x2
c001a904:	01 d7                	add    edi,edx
c001a906:	31 d2                	xor    edx,edx
c001a908:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a90a:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a90e:	80 fb 0d             	cmp    bl,0xd
c001a911:	0f 94 c3             	sete   bl
c001a914:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a919:	0f 94 c1             	sete   cl
c001a91c:	08 cb                	or     bl,cl
c001a91e:	75 3a                	jne    c001a95a <Reg::readInt(char*, char*, int*)+0xcf>
c001a920:	0f af d6             	imul   edx,esi
c001a923:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a928:	83 fe 10             	cmp    esi,0x10
c001a92b:	75 26                	jne    c001a953 <Reg::readInt(char*, char*, int*)+0xc8>
c001a92d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a931:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a934:	89 e9                	mov    ecx,ebp
c001a936:	80 f9 05             	cmp    cl,0x5
c001a939:	77 06                	ja     c001a941 <Reg::readInt(char*, char*, int*)+0xb6>
c001a93b:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a93f:	eb 16                	jmp    c001a957 <Reg::readInt(char*, char*, int*)+0xcc>
c001a941:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a945:	83 e9 61             	sub    ecx,0x61
c001a948:	80 f9 05             	cmp    cl,0x5
c001a94b:	77 06                	ja     c001a953 <Reg::readInt(char*, char*, int*)+0xc8>
c001a94d:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a951:	eb 04                	jmp    c001a957 <Reg::readInt(char*, char*, int*)+0xcc>
c001a953:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a957:	47                   	inc    edi
c001a958:	eb ae                	jmp    c001a908 <Reg::readInt(char*, char*, int*)+0x7d>
c001a95a:	84 c0                	test   al,al
c001a95c:	74 02                	je     c001a960 <Reg::readInt(char*, char*, int*)+0xd5>
c001a95e:	f7 da                	neg    edx
c001a960:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a967:	89 10                	mov    DWORD PTR [eax],edx
c001a969:	88 d8                	mov    al,bl
c001a96b:	81 c4 ec 00 00 00    	add    esp,0xec
c001a971:	5b                   	pop    ebx
c001a972:	5e                   	pop    esi
c001a973:	5f                   	pop    edi
c001a974:	5d                   	pop    ebp
c001a975:	c3                   	ret    

c001a976 <Reg::readString(char*, char*, char*, int)>:
c001a976:	57                   	push   edi
c001a977:	56                   	push   esi
c001a978:	53                   	push   ebx
c001a979:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a97f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a986:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a98a:	57                   	push   edi
c001a98b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a992:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a999:	e8 b6 fe ff ff       	call   c001a854 <Reg::getLine(char*, char*, char*)>
c001a99e:	83 c4 10             	add    esp,0x10
c001a9a1:	89 c6                	mov    esi,eax
c001a9a3:	84 c0                	test   al,al
c001a9a5:	74 44                	je     c001a9eb <Reg::readString(char*, char*, char*, int)+0x75>
c001a9a7:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a9ae:	31 c0                	xor    eax,eax
c001a9b0:	4a                   	dec    edx
c001a9b1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a9b4:	84 c9                	test   cl,cl
c001a9b6:	74 0f                	je     c001a9c7 <Reg::readString(char*, char*, char*, int)+0x51>
c001a9b8:	39 c2                	cmp    edx,eax
c001a9ba:	7e 0b                	jle    c001a9c7 <Reg::readString(char*, char*, char*, int)+0x51>
c001a9bc:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a9bf:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a9c4:	40                   	inc    eax
c001a9c5:	eb ea                	jmp    c001a9b1 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a9c7:	83 ec 0c             	sub    esp,0xc
c001a9ca:	53                   	push   ebx
c001a9cb:	e8 05 5d fe ff       	call   c00006d5 <strlen>
c001a9d0:	83 c4 10             	add    esp,0x10
c001a9d3:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a9d8:	75 11                	jne    c001a9eb <Reg::readString(char*, char*, char*, int)+0x75>
c001a9da:	83 ec 0c             	sub    esp,0xc
c001a9dd:	53                   	push   ebx
c001a9de:	e8 f2 5c fe ff       	call   c00006d5 <strlen>
c001a9e3:	83 c4 10             	add    esp,0x10
c001a9e6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a9eb:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a9f1:	89 f0                	mov    eax,esi
c001a9f3:	5b                   	pop    ebx
c001a9f4:	5e                   	pop    esi
c001a9f5:	5f                   	pop    edi
c001a9f6:	c3                   	ret    

c001a9f7 <Reg::readBool(char*, char*, bool*)>:
c001a9f7:	83 ec 20             	sub    esp,0x20
c001a9fa:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a9fe:	50                   	push   eax
c001a9ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa07:	e8 7f fe ff ff       	call   c001a88b <Reg::readInt(char*, char*, int*)>
c001aa0c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aa11:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aa15:	0f 95 02             	setne  BYTE PTR [edx]
c001aa18:	83 c4 2c             	add    esp,0x2c
c001aa1b:	c3                   	ret    

c001aa1c <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aa1c:	53                   	push   ebx
c001aa1d:	83 ec 1c             	sub    esp,0x1c
c001aa20:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aa24:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aa28:	50                   	push   eax
c001aa29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa31:	e8 c1 ff ff ff       	call   c001a9f7 <Reg::readBool(char*, char*, bool*)>
c001aa36:	83 c4 10             	add    esp,0x10
c001aa39:	84 c0                	test   al,al
c001aa3b:	74 04                	je     c001aa41 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aa3d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aa41:	88 d8                	mov    al,bl
c001aa43:	83 c4 18             	add    esp,0x18
c001aa46:	5b                   	pop    ebx
c001aa47:	c3                   	ret    

c001aa48 <Reg::readIntWithDefault(char*, char*, int)>:
c001aa48:	53                   	push   ebx
c001aa49:	83 ec 1c             	sub    esp,0x1c
c001aa4c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aa50:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa54:	50                   	push   eax
c001aa55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa5d:	e8 29 fe ff ff       	call   c001a88b <Reg::readInt(char*, char*, int*)>
c001aa62:	83 c4 10             	add    esp,0x10
c001aa65:	84 c0                	test   al,al
c001aa67:	74 04                	je     c001aa6d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001aa69:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aa6d:	89 d8                	mov    eax,ebx
c001aa6f:	83 c4 18             	add    esp,0x18
c001aa72:	5b                   	pop    ebx
c001aa73:	c3                   	ret    

c001aa74 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001aa74:	57                   	push   edi
c001aa75:	56                   	push   esi
c001aa76:	53                   	push   ebx
c001aa77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa7b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aa7f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aa83:	56                   	push   esi
c001aa84:	53                   	push   ebx
c001aa85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa8d:	e8 e4 fe ff ff       	call   c001a976 <Reg::readString(char*, char*, char*, int)>
c001aa92:	83 c4 10             	add    esp,0x10
c001aa95:	84 c0                	test   al,al
c001aa97:	75 1b                	jne    c001aab4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001aa99:	50                   	push   eax
c001aa9a:	56                   	push   esi
c001aa9b:	4e                   	dec    esi
c001aa9c:	6a 00                	push   0x0
c001aa9e:	53                   	push   ebx
c001aa9f:	e8 14 5c fe ff       	call   c00006b8 <memset>
c001aaa4:	83 c4 0c             	add    esp,0xc
c001aaa7:	56                   	push   esi
c001aaa8:	57                   	push   edi
c001aaa9:	53                   	push   ebx
c001aaaa:	89 fb                	mov    ebx,edi
c001aaac:	e8 ef 5b fe ff       	call   c00006a0 <memcpy>
c001aab1:	83 c4 10             	add    esp,0x10
c001aab4:	89 d8                	mov    eax,ebx
c001aab6:	5b                   	pop    ebx
c001aab7:	5e                   	pop    esi
c001aab8:	5f                   	pop    edi
c001aab9:	c3                   	ret    

c001aaba <Sys::eject(regs*)>:
c001aaba:	83 ec 0c             	sub    esp,0xc
c001aabd:	83 ca ff             	or     edx,0xffffffff
c001aac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aac4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001aac7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aacc:	83 e9 41             	sub    ecx,0x41
c001aacf:	83 f9 19             	cmp    ecx,0x19
c001aad2:	77 18                	ja     c001aaec <Sys::eject(regs*)+0x32>
c001aad4:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c001aadb:	85 c9                	test   ecx,ecx
c001aadd:	74 0d                	je     c001aaec <Sys::eject(regs*)+0x32>
c001aadf:	83 ec 0c             	sub    esp,0xc
c001aae2:	51                   	push   ecx
c001aae3:	e8 52 b5 ff ff       	call   c001603a <LogicalDisk::eject()>
c001aae8:	83 c4 10             	add    esp,0x10
c001aaeb:	99                   	cdq    
c001aaec:	83 c4 0c             	add    esp,0xc
c001aaef:	c3                   	ret    

c001aaf0 <Sys::exit(regs*)>:
c001aaf0:	83 ec 18             	sub    esp,0x18
c001aaf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aaf7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aafa:	e8 fa 33 00 00       	call   c001def9 <terminateTask(int)>
c001aaff:	83 c8 ff             	or     eax,0xffffffff
c001ab02:	83 c4 1c             	add    esp,0x1c
c001ab05:	89 c2                	mov    edx,eax
c001ab07:	c3                   	ret    

c001ab08 <Sys::getCwd(regs*)>:
c001ab08:	83 ec 10             	sub    esp,0x10
c001ab0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab0f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ab12:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ab15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab1a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab1d:	e8 20 81 ff ff       	call   c0012c42 <Fs::getcwd(Process*, char*, int)>
c001ab22:	83 c4 1c             	add    esp,0x1c
c001ab25:	99                   	cdq    
c001ab26:	c3                   	ret    

c001ab27 <Sys::getPID(regs*)>:
c001ab27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab31:	99                   	cdq    
c001ab32:	c3                   	ret    

c001ab33 <Sys::loadDLL(regs*)>:
c001ab33:	56                   	push   esi
c001ab34:	53                   	push   ebx
c001ab35:	31 d2                	xor    edx,edx
c001ab37:	51                   	push   ecx
c001ab38:	b8 01 00 00 00       	mov    eax,0x1
c001ab3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab41:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ab45:	0f 84 8c 00 00 00    	je     c001abd7 <Sys::loadDLL(regs*)+0xa4>
c001ab4b:	83 ec 0c             	sub    esp,0xc
c001ab4e:	68 14 01 00 00       	push   0x114
c001ab53:	e8 c0 4a ff ff       	call   c000f618 <malloc>
c001ab58:	83 c4 0c             	add    esp,0xc
c001ab5b:	89 c3                	mov    ebx,eax
c001ab5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab62:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab65:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ab68:	53                   	push   ebx
c001ab69:	e8 d2 82 ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001ab6e:	83 c4 10             	add    esp,0x10
c001ab71:	31 d2                	xor    edx,edx
c001ab73:	b8 02 00 00 00       	mov    eax,0x2
c001ab78:	85 db                	test   ebx,ebx
c001ab7a:	74 5b                	je     c001abd7 <Sys::loadDLL(regs*)+0xa4>
c001ab7c:	83 ec 0c             	sub    esp,0xc
c001ab7f:	53                   	push   ebx
c001ab80:	e8 8d 85 ff ff       	call   c0013112 <File::exists()>
c001ab85:	83 c4 10             	add    esp,0x10
c001ab88:	84 c0                	test   al,al
c001ab8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab8c:	75 11                	jne    c001ab9f <Sys::loadDLL(regs*)+0x6c>
c001ab8e:	83 ec 0c             	sub    esp,0xc
c001ab91:	53                   	push   ebx
c001ab92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab95:	83 c4 10             	add    esp,0x10
c001ab98:	b8 03 00 00 00       	mov    eax,0x3
c001ab9d:	eb 36                	jmp    c001abd5 <Sys::loadDLL(regs*)+0xa2>
c001ab9f:	83 ec 0c             	sub    esp,0xc
c001aba2:	53                   	push   ebx
c001aba3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aba6:	58                   	pop    eax
c001aba7:	5a                   	pop    edx
c001aba8:	6a 00                	push   0x0
c001abaa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001abad:	e8 91 22 00 00       	call   c001ce43 <Thr::loadDLL(char const*, bool)>
c001abb2:	83 c4 10             	add    esp,0x10
c001abb5:	89 c1                	mov    ecx,eax
c001abb7:	31 d2                	xor    edx,edx
c001abb9:	b8 04 00 00 00       	mov    eax,0x4
c001abbe:	85 c9                	test   ecx,ecx
c001abc0:	74 15                	je     c001abd7 <Sys::loadDLL(regs*)+0xa4>
c001abc2:	53                   	push   ebx
c001abc3:	53                   	push   ebx
c001abc4:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c001abca:	51                   	push   ecx
c001abcb:	e8 82 24 00 00       	call   c001d052 <Thr::executeDLL(unsigned long, void*)>
c001abd0:	83 c4 10             	add    esp,0x10
c001abd3:	31 c0                	xor    eax,eax
c001abd5:	31 d2                	xor    edx,edx
c001abd7:	59                   	pop    ecx
c001abd8:	5b                   	pop    ebx
c001abd9:	5e                   	pop    esi
c001abda:	c3                   	ret    

c001abdb <Sys::read(regs*)>:
c001abdb:	57                   	push   edi
c001abdc:	56                   	push   esi
c001abdd:	53                   	push   ebx
c001abde:	83 ec 10             	sub    esp,0x10
c001abe1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001abe5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001abe8:	83 f8 02             	cmp    eax,0x2
c001abeb:	77 10                	ja     c001abfd <Sys::read(regs*)+0x22>
c001abed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abf2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001abf5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001abfb:	eb 0e                	jmp    c001ac0b <Sys::read(regs*)+0x30>
c001abfd:	83 ec 0c             	sub    esp,0xc
c001ac00:	50                   	push   eax
c001ac01:	e8 9b 6b ff ff       	call   c00117a1 <getFromFileDescriptor(int)>
c001ac06:	83 c4 10             	add    esp,0x10
c001ac09:	89 c1                	mov    ecx,eax
c001ac0b:	83 c8 ff             	or     eax,0xffffffff
c001ac0e:	85 c9                	test   ecx,ecx
c001ac10:	89 c2                	mov    edx,eax
c001ac12:	74 28                	je     c001ac3c <Sys::read(regs*)+0x61>
c001ac14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac1c:	31 ff                	xor    edi,edi
c001ac1e:	83 ec 0c             	sub    esp,0xc
c001ac21:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac23:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ac27:	52                   	push   edx
c001ac28:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac2b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ac2e:	57                   	push   edi
c001ac2f:	56                   	push   esi
c001ac30:	51                   	push   ecx
c001ac31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ac34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ac38:	83 c4 20             	add    esp,0x20
c001ac3b:	99                   	cdq    
c001ac3c:	83 c4 10             	add    esp,0x10
c001ac3f:	5b                   	pop    ebx
c001ac40:	5e                   	pop    esi
c001ac41:	5f                   	pop    edi
c001ac42:	c3                   	ret    

c001ac43 <Sys::sbrk(regs*)>:
c001ac43:	56                   	push   esi
c001ac44:	53                   	push   ebx
c001ac45:	50                   	push   eax
c001ac46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac4f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac52:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ac55:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ac5b:	85 db                	test   ebx,ebx
c001ac5d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ac60:	74 02                	je     c001ac64 <Sys::sbrk(regs*)+0x21>
c001ac62:	79 06                	jns    c001ac6a <Sys::sbrk(regs*)+0x27>
c001ac64:	89 f0                	mov    eax,esi
c001ac66:	31 d2                	xor    edx,edx
c001ac68:	eb 2a                	jmp    c001ac94 <Sys::sbrk(regs*)+0x51>
c001ac6a:	83 c8 ff             	or     eax,0xffffffff
c001ac6d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ac73:	89 c2                	mov    edx,eax
c001ac75:	77 1d                	ja     c001ac94 <Sys::sbrk(regs*)+0x51>
c001ac77:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ac7d:	50                   	push   eax
c001ac7e:	c1 ea 0c             	shr    edx,0xc
c001ac81:	68 07 04 00 00       	push   0x407
c001ac86:	52                   	push   edx
c001ac87:	51                   	push   ecx
c001ac88:	e8 35 74 ff ff       	call   c00120c2 <VAS::allocatePages(int, int)>
c001ac8d:	89 f0                	mov    eax,esi
c001ac8f:	31 d2                	xor    edx,edx
c001ac91:	83 c4 10             	add    esp,0x10
c001ac94:	59                   	pop    ecx
c001ac95:	5b                   	pop    ebx
c001ac96:	5e                   	pop    esi
c001ac97:	c3                   	ret    

c001ac98 <Sys::setCwd(regs*)>:
c001ac98:	83 ec 14             	sub    esp,0x14
c001ac9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac9f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aca2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aca7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acaa:	e8 02 85 ff ff       	call   c00131b1 <Fs::setcwd(Process*, char*)>
c001acaf:	83 c4 1c             	add    esp,0x1c
c001acb2:	99                   	cdq    
c001acb3:	c3                   	ret    

c001acb4 <Sys::setTime(regs*)>:
c001acb4:	55                   	push   ebp
c001acb5:	31 d2                	xor    edx,edx
c001acb7:	57                   	push   edi
c001acb8:	bf 18 00 00 00       	mov    edi,0x18
c001acbd:	56                   	push   esi
c001acbe:	53                   	push   ebx
c001acbf:	bb 3c 00 00 00       	mov    ebx,0x3c
c001acc4:	83 ec 30             	sub    esp,0x30
c001acc7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001accb:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001acce:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001acd1:	f7 f3                	div    ebx
c001acd3:	89 d6                	mov    esi,edx
c001acd5:	31 d2                	xor    edx,edx
c001acd7:	f7 f3                	div    ebx
c001acd9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001acdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ace0:	bb 10 0e 00 00       	mov    ebx,0xe10
c001ace5:	31 d2                	xor    edx,edx
c001ace7:	f7 f3                	div    ebx
c001ace9:	31 d2                	xor    edx,edx
c001aceb:	bb 0c 00 00 00       	mov    ebx,0xc
c001acf0:	f7 f7                	div    edi
c001acf2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001acf5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001acf9:	0f b7 cd             	movzx  ecx,bp
c001acfc:	56                   	push   esi
c001acfd:	89 c7                	mov    edi,eax
c001acff:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ad03:	c1 e6 10             	shl    esi,0x10
c001ad06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad0a:	83 e7 1f             	and    edi,0x1f
c001ad0d:	51                   	push   ecx
c001ad0e:	47                   	inc    edi
c001ad0f:	c1 e8 05             	shr    eax,0x5
c001ad12:	31 d2                	xor    edx,edx
c001ad14:	f7 f3                	div    ebx
c001ad16:	31 db                	xor    ebx,ebx
c001ad18:	52                   	push   edx
c001ad19:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001ad1d:	57                   	push   edi
c001ad1e:	68 75 b4 02 c0       	push   0xc002b475
c001ad23:	e8 bf 7b ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ad28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad2c:	89 f8                	mov    eax,edi
c001ad2e:	31 c9                	xor    ecx,ecx
c001ad30:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ad34:	88 c1                	mov    cl,al
c001ad36:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001ad3c:	88 d5                	mov    ch,dl
c001ad3e:	c1 e0 10             	shl    eax,0x10
c001ad41:	0f b7 d1             	movzx  edx,cx
c001ad44:	09 c2                	or     edx,eax
c001ad46:	89 d8                	mov    eax,ebx
c001ad48:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001ad4d:	09 f0                	or     eax,esi
c001ad4f:	89 c3                	mov    ebx,eax
c001ad51:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001ad55:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ad59:	83 c4 18             	add    esp,0x18
c001ad5c:	53                   	push   ebx
c001ad5d:	52                   	push   edx
c001ad5e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ad62:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ad66:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ad6a:	e8 5c 8b ff ff       	call   c00138cb <datetimeToSeconds(datetime_t)>
c001ad6f:	83 c4 0c             	add    esp,0xc
c001ad72:	52                   	push   edx
c001ad73:	50                   	push   eax
c001ad74:	56                   	push   esi
c001ad75:	e8 d8 8c ff ff       	call   c0013a52 <secondsToDatetime(unsigned long long)>
c001ad7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ad82:	51                   	push   ecx
c001ad83:	89 d6                	mov    esi,edx
c001ad85:	51                   	push   ecx
c001ad86:	c1 ee 10             	shr    esi,0x10
c001ad89:	89 f3                	mov    ebx,esi
c001ad8b:	0f b6 f3             	movzx  esi,bl
c001ad8e:	56                   	push   esi
c001ad8f:	0f b6 f6             	movzx  esi,dh
c001ad92:	0f b6 d2             	movzx  edx,dl
c001ad95:	56                   	push   esi
c001ad96:	52                   	push   edx
c001ad97:	89 c2                	mov    edx,eax
c001ad99:	c1 ea 10             	shr    edx,0x10
c001ad9c:	52                   	push   edx
c001ad9d:	0f b6 d4             	movzx  edx,ah
c001ada0:	0f b6 c0             	movzx  eax,al
c001ada3:	52                   	push   edx
c001ada4:	50                   	push   eax
c001ada5:	68 91 b4 02 c0       	push   0xc002b491
c001adaa:	e8 38 7b ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001adaf:	83 c4 2c             	add    esp,0x2c
c001adb2:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001adb7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001adbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001adbf:	53                   	push   ebx
c001adc0:	51                   	push   ecx
c001adc1:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001adc7:	e8 26 8c ff ff       	call   c00139f2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001adcc:	83 f0 01             	xor    eax,0x1
c001adcf:	31 d2                	xor    edx,edx
c001add1:	0f b6 c0             	movzx  eax,al
c001add4:	83 c4 3c             	add    esp,0x3c
c001add7:	5b                   	pop    ebx
c001add8:	5e                   	pop    esi
c001add9:	5f                   	pop    edi
c001adda:	5d                   	pop    ebp
c001addb:	c3                   	ret    

c001addc <Sys::timezone(regs*)>:
c001addc:	53                   	push   ebx
c001addd:	83 ec 08             	sub    esp,0x8
c001ade0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ade4:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001ade8:	75 17                	jne    c001ae01 <Sys::timezone(regs*)+0x25>
c001adea:	83 ec 0c             	sub    esp,0xc
c001aded:	68 ad b4 02 c0       	push   0xc002b4ad
c001adf2:	e8 f0 7a ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001adf7:	83 c8 ff             	or     eax,0xffffffff
c001adfa:	83 c4 10             	add    esp,0x10
c001adfd:	89 c2                	mov    edx,eax
c001adff:	eb 20                	jmp    c001ae21 <Sys::timezone(regs*)+0x45>
c001ae01:	83 ec 0c             	sub    esp,0xc
c001ae04:	68 e5 b4 02 c0       	push   0xc002b4e5
c001ae09:	e8 d9 7a ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ae0e:	58                   	pop    eax
c001ae0f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001ae12:	e8 3d 89 ff ff       	call   c0013754 <User::loadClockSettings(int)>
c001ae17:	83 c4 10             	add    esp,0x10
c001ae1a:	b8 01 00 00 00       	mov    eax,0x1
c001ae1f:	31 d2                	xor    edx,edx
c001ae21:	83 c4 08             	add    esp,0x8
c001ae24:	5b                   	pop    ebx
c001ae25:	c3                   	ret    

c001ae26 <Sys::write(regs*)>:
c001ae26:	57                   	push   edi
c001ae27:	56                   	push   esi
c001ae28:	53                   	push   ebx
c001ae29:	83 ec 10             	sub    esp,0x10
c001ae2c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae33:	83 f8 02             	cmp    eax,0x2
c001ae36:	77 10                	ja     c001ae48 <Sys::write(regs*)+0x22>
c001ae38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae3d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae40:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae46:	eb 0e                	jmp    c001ae56 <Sys::write(regs*)+0x30>
c001ae48:	83 ec 0c             	sub    esp,0xc
c001ae4b:	50                   	push   eax
c001ae4c:	e8 50 69 ff ff       	call   c00117a1 <getFromFileDescriptor(int)>
c001ae51:	83 c4 10             	add    esp,0x10
c001ae54:	89 c1                	mov    ecx,eax
c001ae56:	83 c8 ff             	or     eax,0xffffffff
c001ae59:	85 c9                	test   ecx,ecx
c001ae5b:	89 c2                	mov    edx,eax
c001ae5d:	74 28                	je     c001ae87 <Sys::write(regs*)+0x61>
c001ae5f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae67:	31 ff                	xor    edi,edi
c001ae69:	83 ec 0c             	sub    esp,0xc
c001ae6c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae6e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae72:	52                   	push   edx
c001ae73:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae76:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae79:	57                   	push   edi
c001ae7a:	56                   	push   esi
c001ae7b:	51                   	push   ecx
c001ae7c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ae7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae83:	83 c4 20             	add    esp,0x20
c001ae86:	99                   	cdq    
c001ae87:	83 c4 10             	add    esp,0x10
c001ae8a:	5b                   	pop    ebx
c001ae8b:	5e                   	pop    esi
c001ae8c:	5f                   	pop    edi
c001ae8d:	c3                   	ret    

c001ae8e <Sys::yield(regs*)>:
c001ae8e:	57                   	push   edi
c001ae8f:	56                   	push   esi
c001ae90:	53                   	push   ebx
c001ae91:	e8 20 26 00 00       	call   c001d4b6 <lockScheduler()>
c001ae96:	e8 57 29 00 00       	call   c001d7f2 <schedule()>
c001ae9b:	e8 18 26 00 00       	call   c001d4b8 <unlockScheduler()>
c001aea0:	8b 35 50 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e150
c001aea6:	8b 3d 54 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e154
c001aeac:	89 f0                	mov    eax,esi
c001aeae:	89 fb                	mov    ebx,edi
c001aeb0:	89 f1                	mov    ecx,esi
c001aeb2:	c1 e0 07             	shl    eax,0x7
c001aeb5:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001aeb9:	25 80 30 0f 00       	and    eax,0xf3080
c001aebe:	c1 eb 17             	shr    ebx,0x17
c001aec1:	31 c8                	xor    eax,ecx
c001aec3:	89 da                	mov    edx,ebx
c001aec5:	5b                   	pop    ebx
c001aec6:	5e                   	pop    esi
c001aec7:	5f                   	pop    edi
c001aec8:	c3                   	ret    

c001aec9 <sysCallSeekDir(regs*)>:
c001aec9:	31 c0                	xor    eax,eax
c001aecb:	31 d2                	xor    edx,edx
c001aecd:	c3                   	ret    

c001aece <sysCallTellDir(regs*)>:
c001aece:	31 c0                	xor    eax,eax
c001aed0:	31 d2                	xor    edx,edx
c001aed2:	c3                   	ret    

c001aed3 <sysCallVerify(regs*)>:
c001aed3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aed7:	31 d2                	xor    edx,edx
c001aed9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aedc:	c3                   	ret    

c001aedd <sysCallGetArgc(regs*)>:
c001aedd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aee2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aee5:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001aeeb:	99                   	cdq    
c001aeec:	c3                   	ret    

c001aeed <sysFormatDisk(regs*)>:
c001aeed:	56                   	push   esi
c001aeee:	53                   	push   ebx
c001aeef:	53                   	push   ebx
c001aef0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aef4:	8b 1d 48 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc48
c001aefa:	eb 25                	jmp    c001af21 <sysFormatDisk(regs*)+0x34>
c001aefc:	83 ec 0c             	sub    esp,0xc
c001aeff:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af02:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af04:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001af07:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af0a:	50                   	push   eax
c001af0b:	ff 34 85 e0 e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd1f20]
c001af12:	53                   	push   ebx
c001af13:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001af16:	83 c4 20             	add    esp,0x20
c001af19:	83 f8 08             	cmp    eax,0x8
c001af1c:	75 12                	jne    c001af30 <sysFormatDisk(regs*)+0x43>
c001af1e:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001af21:	85 db                	test   ebx,ebx
c001af23:	75 d7                	jne    c001aefc <sysFormatDisk(regs*)+0xf>
c001af25:	59                   	pop    ecx
c001af26:	b8 03 00 00 00       	mov    eax,0x3
c001af2b:	31 d2                	xor    edx,edx
c001af2d:	5b                   	pop    ebx
c001af2e:	5e                   	pop    esi
c001af2f:	c3                   	ret    
c001af30:	85 c0                	test   eax,eax
c001af32:	74 1b                	je     c001af4f <sysFormatDisk(regs*)+0x62>
c001af34:	83 f8 09             	cmp    eax,0x9
c001af37:	74 0b                	je     c001af44 <sysFormatDisk(regs*)+0x57>
c001af39:	59                   	pop    ecx
c001af3a:	b8 02 00 00 00       	mov    eax,0x2
c001af3f:	31 d2                	xor    edx,edx
c001af41:	5b                   	pop    ebx
c001af42:	5e                   	pop    esi
c001af43:	c3                   	ret    
c001af44:	59                   	pop    ecx
c001af45:	b8 01 00 00 00       	mov    eax,0x1
c001af4a:	31 d2                	xor    edx,edx
c001af4c:	5b                   	pop    ebx
c001af4d:	5e                   	pop    esi
c001af4e:	c3                   	ret    
c001af4f:	59                   	pop    ecx
c001af50:	31 c0                	xor    eax,eax
c001af52:	31 d2                	xor    edx,edx
c001af54:	5b                   	pop    ebx
c001af55:	5e                   	pop    esi
c001af56:	c3                   	ret    

c001af57 <sysSetDiskVolumeLabel(regs*)>:
c001af57:	56                   	push   esi
c001af58:	53                   	push   ebx
c001af59:	53                   	push   ebx
c001af5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af5e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001af61:	83 f8 19             	cmp    eax,0x19
c001af64:	77 29                	ja     c001af8f <sysSetDiskVolumeLabel(regs*)+0x38>
c001af66:	8b 0c 85 e0 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f20]
c001af6d:	85 c9                	test   ecx,ecx
c001af6f:	74 1e                	je     c001af8f <sysSetDiskVolumeLabel(regs*)+0x38>
c001af71:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001af74:	85 d2                	test   edx,edx
c001af76:	74 17                	je     c001af8f <sysSetDiskVolumeLabel(regs*)+0x38>
c001af78:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001af7e:	8b 33                	mov    esi,DWORD PTR [ebx]
c001af80:	52                   	push   edx
c001af81:	50                   	push   eax
c001af82:	51                   	push   ecx
c001af83:	53                   	push   ebx
c001af84:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001af87:	83 c4 10             	add    esp,0x10
c001af8a:	99                   	cdq    
c001af8b:	59                   	pop    ecx
c001af8c:	5b                   	pop    ebx
c001af8d:	5e                   	pop    esi
c001af8e:	c3                   	ret    
c001af8f:	59                   	pop    ecx
c001af90:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001af95:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af9a:	5b                   	pop    ebx
c001af9b:	5e                   	pop    esi
c001af9c:	c3                   	ret    

c001af9d <sysGetDiskVolumeLabel(regs*)>:
c001af9d:	57                   	push   edi
c001af9e:	56                   	push   esi
c001af9f:	53                   	push   ebx
c001afa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001afa7:	83 fa 19             	cmp    edx,0x19
c001afaa:	77 34                	ja     c001afe0 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afac:	8b 0c 95 e0 e0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1f20]
c001afb3:	85 c9                	test   ecx,ecx
c001afb5:	74 29                	je     c001afe0 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afb7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001afba:	85 db                	test   ebx,ebx
c001afbc:	74 22                	je     c001afe0 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afbe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001afc1:	85 c0                	test   eax,eax
c001afc3:	74 1b                	je     c001afe0 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afc5:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001afcb:	83 ec 0c             	sub    esp,0xc
c001afce:	8b 3e                	mov    edi,DWORD PTR [esi]
c001afd0:	50                   	push   eax
c001afd1:	53                   	push   ebx
c001afd2:	52                   	push   edx
c001afd3:	51                   	push   ecx
c001afd4:	56                   	push   esi
c001afd5:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001afd8:	83 c4 20             	add    esp,0x20
c001afdb:	99                   	cdq    
c001afdc:	5b                   	pop    ebx
c001afdd:	5e                   	pop    esi
c001afde:	5f                   	pop    edi
c001afdf:	c3                   	ret    
c001afe0:	5b                   	pop    ebx
c001afe1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001afe6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afeb:	5e                   	pop    esi
c001afec:	5f                   	pop    edi
c001afed:	c3                   	ret    

c001afee <sysShutdown(regs*)>:
c001afee:	83 ec 0c             	sub    esp,0xc
c001aff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aff8:	85 c0                	test   eax,eax
c001affa:	74 18                	je     c001b014 <sysShutdown(regs*)+0x26>
c001affc:	83 f8 01             	cmp    eax,0x1
c001afff:	74 38                	je     c001b039 <sysShutdown(regs*)+0x4b>
c001b001:	83 f8 02             	cmp    eax,0x2
c001b004:	74 24                	je     c001b02a <sysShutdown(regs*)+0x3c>
c001b006:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b00b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b010:	83 c4 0c             	add    esp,0xc
c001b013:	c3                   	ret    
c001b014:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001b019:	8b 10                	mov    edx,DWORD PTR [eax]
c001b01b:	6a 00                	push   0x0
c001b01d:	6a 00                	push   0x0
c001b01f:	6a 00                	push   0x0
c001b021:	50                   	push   eax
c001b022:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b025:	83 c4 10             	add    esp,0x10
c001b028:	eb dc                	jmp    c001b006 <sysShutdown(regs*)+0x18>
c001b02a:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001b02f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b031:	6a 00                	push   0x0
c001b033:	6a 00                	push   0x0
c001b035:	6a 01                	push   0x1
c001b037:	eb e8                	jmp    c001b021 <sysShutdown(regs*)+0x33>
c001b039:	a1 80 01 03 c0       	mov    eax,ds:0xc0030180
c001b03e:	85 c0                	test   eax,eax
c001b040:	74 02                	je     c001b044 <sysShutdown(regs*)+0x56>
c001b042:	ff d0                	call   eax
c001b044:	31 c0                	xor    eax,eax
c001b046:	31 d2                	xor    edx,edx
c001b048:	83 c4 0c             	add    esp,0xc
c001b04b:	c3                   	ret    

c001b04c <sysCallRealpath(regs*)>:
c001b04c:	83 ec 0c             	sub    esp,0xc
c001b04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b053:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b056:	85 d2                	test   edx,edx
c001b058:	74 07                	je     c001b061 <sysCallRealpath(regs*)+0x15>
c001b05a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b05d:	85 c0                	test   eax,eax
c001b05f:	75 0b                	jne    c001b06c <sysCallRealpath(regs*)+0x20>
c001b061:	b8 01 00 00 00       	mov    eax,0x1
c001b066:	31 d2                	xor    edx,edx
c001b068:	83 c4 0c             	add    esp,0xc
c001b06b:	c3                   	ret    
c001b06c:	51                   	push   ecx
c001b06d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b073:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b076:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b07c:	51                   	push   ecx
c001b07d:	52                   	push   edx
c001b07e:	50                   	push   eax
c001b07f:	e8 12 7c ff ff       	call   c0012c96 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	31 c0                	xor    eax,eax
c001b089:	31 d2                	xor    edx,edx
c001b08b:	83 c4 0c             	add    esp,0xc
c001b08e:	c3                   	ret    

c001b08f <sysCallReadDir(regs*)>:
c001b08f:	53                   	push   ebx
c001b090:	83 ec 18             	sub    esp,0x18
c001b093:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b097:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b09a:	83 f8 02             	cmp    eax,0x2
c001b09d:	76 53                	jbe    c001b0f2 <sysCallReadDir(regs*)+0x63>
c001b09f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b0a2:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b0a8:	77 4f                	ja     c001b0f9 <sysCallReadDir(regs*)+0x6a>
c001b0aa:	83 ec 0c             	sub    esp,0xc
c001b0ad:	50                   	push   eax
c001b0ae:	e8 ee 66 ff ff       	call   c00117a1 <getFromFileDescriptor(int)>
c001b0b3:	83 c4 10             	add    esp,0x10
c001b0b6:	85 c0                	test   eax,eax
c001b0b8:	74 50                	je     c001b10a <sysCallReadDir(regs*)+0x7b>
c001b0ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0c2:	83 ec 0c             	sub    esp,0xc
c001b0c5:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0c7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b0cb:	51                   	push   ecx
c001b0cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b0cf:	6a 00                	push   0x0
c001b0d1:	68 10 01 00 00       	push   0x110
c001b0d6:	50                   	push   eax
c001b0d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b0da:	83 c4 20             	add    esp,0x20
c001b0dd:	85 c0                	test   eax,eax
c001b0df:	74 38                	je     c001b119 <sysCallReadDir(regs*)+0x8a>
c001b0e1:	83 f8 07             	cmp    eax,0x7
c001b0e4:	74 0c                	je     c001b0f2 <sysCallReadDir(regs*)+0x63>
c001b0e6:	b8 02 00 00 00       	mov    eax,0x2
c001b0eb:	31 d2                	xor    edx,edx
c001b0ed:	83 c4 18             	add    esp,0x18
c001b0f0:	5b                   	pop    ebx
c001b0f1:	c3                   	ret    
c001b0f2:	b8 01 00 00 00       	mov    eax,0x1
c001b0f7:	eb f2                	jmp    c001b0eb <sysCallReadDir(regs*)+0x5c>
c001b0f9:	83 ec 08             	sub    esp,0x8
c001b0fc:	52                   	push   edx
c001b0fd:	68 24 b5 02 c0       	push   0xc002b524
c001b102:	e8 e0 77 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001b107:	83 c4 10             	add    esp,0x10
c001b10a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b10f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b114:	83 c4 18             	add    esp,0x18
c001b117:	5b                   	pop    ebx
c001b118:	c3                   	ret    
c001b119:	31 c0                	xor    eax,eax
c001b11b:	eb ce                	jmp    c001b0eb <sysCallReadDir(regs*)+0x5c>

c001b11d <sysCallIsATTY(regs*)>:
c001b11d:	83 ec 0c             	sub    esp,0xc
c001b120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b124:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b127:	83 f8 02             	cmp    eax,0x2
c001b12a:	76 07                	jbe    c001b133 <sysCallIsATTY(regs*)+0x16>
c001b12c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b131:	75 26                	jne    c001b159 <sysCallIsATTY(regs*)+0x3c>
c001b133:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b138:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b13b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b141:	85 c0                	test   eax,eax
c001b143:	74 24                	je     c001b169 <sysCallIsATTY(regs*)+0x4c>
c001b145:	83 ec 0c             	sub    esp,0xc
c001b148:	8b 10                	mov    edx,DWORD PTR [eax]
c001b14a:	50                   	push   eax
c001b14b:	ff 12                	call   DWORD PTR [edx]
c001b14d:	31 d2                	xor    edx,edx
c001b14f:	0f b6 c0             	movzx  eax,al
c001b152:	83 c4 10             	add    esp,0x10
c001b155:	83 c4 0c             	add    esp,0xc
c001b158:	c3                   	ret    
c001b159:	83 ec 0c             	sub    esp,0xc
c001b15c:	50                   	push   eax
c001b15d:	e8 3f 66 ff ff       	call   c00117a1 <getFromFileDescriptor(int)>
c001b162:	83 c4 10             	add    esp,0x10
c001b165:	85 c0                	test   eax,eax
c001b167:	75 dc                	jne    c001b145 <sysCallIsATTY(regs*)+0x28>
c001b169:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b16e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b173:	83 c4 0c             	add    esp,0xc
c001b176:	c3                   	ret    

c001b177 <sysCallSeek(regs*)>:
c001b177:	53                   	push   ebx
c001b178:	83 ec 08             	sub    esp,0x8
c001b17b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b17f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b182:	83 f8 02             	cmp    eax,0x2
c001b185:	76 4a                	jbe    c001b1d1 <sysCallSeek(regs*)+0x5a>
c001b187:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b18c:	77 32                	ja     c001b1c0 <sysCallSeek(regs*)+0x49>
c001b18e:	83 ec 0c             	sub    esp,0xc
c001b191:	50                   	push   eax
c001b192:	e8 0a 66 ff ff       	call   c00117a1 <getFromFileDescriptor(int)>
c001b197:	83 c4 0c             	add    esp,0xc
c001b19a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b19d:	31 db                	xor    ebx,ebx
c001b19f:	53                   	push   ebx
c001b1a0:	51                   	push   ecx
c001b1a1:	50                   	push   eax
c001b1a2:	e8 bb 7d ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001b1a7:	83 c4 10             	add    esp,0x10
c001b1aa:	85 c0                	test   eax,eax
c001b1ac:	0f 95 c0             	setne  al
c001b1af:	31 d2                	xor    edx,edx
c001b1b1:	0f b6 c0             	movzx  eax,al
c001b1b4:	f7 d8                	neg    eax
c001b1b6:	83 d2 00             	adc    edx,0x0
c001b1b9:	83 c4 08             	add    esp,0x8
c001b1bc:	f7 da                	neg    edx
c001b1be:	5b                   	pop    ebx
c001b1bf:	c3                   	ret    
c001b1c0:	83 ec 08             	sub    esp,0x8
c001b1c3:	50                   	push   eax
c001b1c4:	68 93 b5 02 c0       	push   0xc002b593
c001b1c9:	e8 19 77 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001b1ce:	83 c4 10             	add    esp,0x10
c001b1d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1db:	83 c4 08             	add    esp,0x8
c001b1de:	5b                   	pop    ebx
c001b1df:	c3                   	ret    

c001b1e0 <sysCallTell(regs*)>:
c001b1e0:	53                   	push   ebx
c001b1e1:	83 ec 08             	sub    esp,0x8
c001b1e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1eb:	83 f8 02             	cmp    eax,0x2
c001b1ee:	76 5e                	jbe    c001b24e <sysCallTell(regs*)+0x6e>
c001b1f0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b1f5:	77 2d                	ja     c001b224 <sysCallTell(regs*)+0x44>
c001b1f7:	83 ec 0c             	sub    esp,0xc
c001b1fa:	50                   	push   eax
c001b1fb:	e8 a1 65 ff ff       	call   c00117a1 <getFromFileDescriptor(int)>
c001b200:	5a                   	pop    edx
c001b201:	59                   	pop    ecx
c001b202:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b205:	50                   	push   eax
c001b206:	e8 ad 7d ff ff       	call   c0012fb8 <File::tell(unsigned long long*)>
c001b20b:	83 c4 10             	add    esp,0x10
c001b20e:	85 c0                	test   eax,eax
c001b210:	0f 95 c0             	setne  al
c001b213:	31 d2                	xor    edx,edx
c001b215:	0f b6 c0             	movzx  eax,al
c001b218:	f7 d8                	neg    eax
c001b21a:	83 d2 00             	adc    edx,0x0
c001b21d:	83 c4 08             	add    esp,0x8
c001b220:	f7 da                	neg    edx
c001b222:	5b                   	pop    ebx
c001b223:	c3                   	ret    
c001b224:	83 ec 08             	sub    esp,0x8
c001b227:	50                   	push   eax
c001b228:	68 ad b5 02 c0       	push   0xc002b5ad
c001b22d:	e8 b5 76 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001b232:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b235:	83 c4 10             	add    esp,0x10
c001b238:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b23e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b245:	31 d2                	xor    edx,edx
c001b247:	31 c0                	xor    eax,eax
c001b249:	83 c4 08             	add    esp,0x8
c001b24c:	5b                   	pop    ebx
c001b24d:	c3                   	ret    
c001b24e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b253:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b258:	83 c4 08             	add    esp,0x8
c001b25b:	5b                   	pop    ebx
c001b25c:	c3                   	ret    

c001b25d <sysCallSize(regs*)>:
c001b25d:	53                   	push   ebx
c001b25e:	83 ec 18             	sub    esp,0x18
c001b261:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b265:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b268:	83 f8 02             	cmp    eax,0x2
c001b26b:	76 64                	jbe    c001b2d1 <sysCallSize(regs*)+0x74>
c001b26d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b272:	77 33                	ja     c001b2a7 <sysCallSize(regs*)+0x4a>
c001b274:	83 ec 0c             	sub    esp,0xc
c001b277:	50                   	push   eax
c001b278:	e8 24 65 ff ff       	call   c00117a1 <getFromFileDescriptor(int)>
c001b27d:	83 c4 0c             	add    esp,0xc
c001b280:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b284:	52                   	push   edx
c001b285:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b288:	50                   	push   eax
c001b289:	e8 c2 7e ff ff       	call   c0013150 <File::stat(unsigned long long*, bool*)>
c001b28e:	83 c4 10             	add    esp,0x10
c001b291:	85 c0                	test   eax,eax
c001b293:	0f 95 c0             	setne  al
c001b296:	31 d2                	xor    edx,edx
c001b298:	0f b6 c0             	movzx  eax,al
c001b29b:	f7 d8                	neg    eax
c001b29d:	83 d2 00             	adc    edx,0x0
c001b2a0:	83 c4 18             	add    esp,0x18
c001b2a3:	f7 da                	neg    edx
c001b2a5:	5b                   	pop    ebx
c001b2a6:	c3                   	ret    
c001b2a7:	83 ec 08             	sub    esp,0x8
c001b2aa:	50                   	push   eax
c001b2ab:	68 c7 b5 02 c0       	push   0xc002b5c7
c001b2b0:	e8 32 76 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001b2b5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2b8:	83 c4 10             	add    esp,0x10
c001b2bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b2c8:	31 d2                	xor    edx,edx
c001b2ca:	31 c0                	xor    eax,eax
c001b2cc:	83 c4 18             	add    esp,0x18
c001b2cf:	5b                   	pop    ebx
c001b2d0:	c3                   	ret    
c001b2d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2db:	83 c4 18             	add    esp,0x18
c001b2de:	5b                   	pop    ebx
c001b2df:	c3                   	ret    

c001b2e0 <sysCallSizeFromFilename(regs*)>:
c001b2e0:	57                   	push   edi
c001b2e1:	56                   	push   esi
c001b2e2:	53                   	push   ebx
c001b2e3:	83 ec 20             	sub    esp,0x20
c001b2e6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b2ea:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b2ed:	83 fb 02             	cmp    ebx,0x2
c001b2f0:	0f 86 99 00 00 00    	jbe    c001b38f <sysCallSizeFromFilename(regs*)+0xaf>
c001b2f6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b2fc:	77 65                	ja     c001b363 <sysCallSizeFromFilename(regs*)+0x83>
c001b2fe:	83 ec 0c             	sub    esp,0xc
c001b301:	68 14 01 00 00       	push   0x114
c001b306:	e8 0d 43 ff ff       	call   c000f618 <malloc>
c001b30b:	83 c4 0c             	add    esp,0xc
c001b30e:	89 c6                	mov    esi,eax
c001b310:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b315:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b318:	53                   	push   ebx
c001b319:	56                   	push   esi
c001b31a:	e8 21 7b ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001b31f:	83 c4 0c             	add    esp,0xc
c001b322:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b326:	50                   	push   eax
c001b327:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b32a:	56                   	push   esi
c001b32b:	e8 20 7e ff ff       	call   c0013150 <File::stat(unsigned long long*, bool*)>
c001b330:	83 c4 10             	add    esp,0x10
c001b333:	85 f6                	test   esi,esi
c001b335:	74 14                	je     c001b34b <sysCallSizeFromFilename(regs*)+0x6b>
c001b337:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b33b:	8b 16                	mov    edx,DWORD PTR [esi]
c001b33d:	83 ec 0c             	sub    esp,0xc
c001b340:	56                   	push   esi
c001b341:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b344:	83 c4 10             	add    esp,0x10
c001b347:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b34b:	85 c0                	test   eax,eax
c001b34d:	0f 95 c0             	setne  al
c001b350:	31 d2                	xor    edx,edx
c001b352:	0f b6 c0             	movzx  eax,al
c001b355:	f7 d8                	neg    eax
c001b357:	83 d2 00             	adc    edx,0x0
c001b35a:	83 c4 20             	add    esp,0x20
c001b35d:	f7 da                	neg    edx
c001b35f:	5b                   	pop    ebx
c001b360:	5e                   	pop    esi
c001b361:	5f                   	pop    edi
c001b362:	c3                   	ret    
c001b363:	83 ec 08             	sub    esp,0x8
c001b366:	53                   	push   ebx
c001b367:	68 c7 b5 02 c0       	push   0xc002b5c7
c001b36c:	e8 76 75 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001b371:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b374:	83 c4 10             	add    esp,0x10
c001b377:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b37d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b384:	31 d2                	xor    edx,edx
c001b386:	83 c4 20             	add    esp,0x20
c001b389:	31 c0                	xor    eax,eax
c001b38b:	5b                   	pop    ebx
c001b38c:	5e                   	pop    esi
c001b38d:	5f                   	pop    edi
c001b38e:	c3                   	ret    
c001b38f:	83 c4 20             	add    esp,0x20
c001b392:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b397:	5b                   	pop    ebx
c001b398:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b39d:	5e                   	pop    esi
c001b39e:	5f                   	pop    edi
c001b39f:	c3                   	ret    

c001b3a0 <sysCallClose(regs*)>:
c001b3a0:	53                   	push   ebx
c001b3a1:	83 ec 08             	sub    esp,0x8
c001b3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3ab:	83 f8 02             	cmp    eax,0x2
c001b3ae:	76 50                	jbe    c001b400 <sysCallClose(regs*)+0x60>
c001b3b0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b3b5:	74 58                	je     c001b40f <sysCallClose(regs*)+0x6f>
c001b3b7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3bc:	74 60                	je     c001b41e <sysCallClose(regs*)+0x7e>
c001b3be:	77 2f                	ja     c001b3ef <sysCallClose(regs*)+0x4f>
c001b3c0:	83 ec 0c             	sub    esp,0xc
c001b3c3:	50                   	push   eax
c001b3c4:	e8 d8 63 ff ff       	call   c00117a1 <getFromFileDescriptor(int)>
c001b3c9:	89 c3                	mov    ebx,eax
c001b3cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3ce:	e8 2f 7b ff ff       	call   c0012f02 <File::close()>
c001b3d3:	83 c4 10             	add    esp,0x10
c001b3d6:	85 db                	test   ebx,ebx
c001b3d8:	74 0c                	je     c001b3e6 <sysCallClose(regs*)+0x46>
c001b3da:	83 ec 0c             	sub    esp,0xc
c001b3dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3df:	53                   	push   ebx
c001b3e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3e3:	83 c4 10             	add    esp,0x10
c001b3e6:	31 c0                	xor    eax,eax
c001b3e8:	31 d2                	xor    edx,edx
c001b3ea:	83 c4 08             	add    esp,0x8
c001b3ed:	5b                   	pop    ebx
c001b3ee:	c3                   	ret    
c001b3ef:	83 ec 08             	sub    esp,0x8
c001b3f2:	50                   	push   eax
c001b3f3:	68 48 b5 02 c0       	push   0xc002b548
c001b3f8:	e8 ea 74 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b405:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b40a:	83 c4 08             	add    esp,0x8
c001b40d:	5b                   	pop    ebx
c001b40e:	c3                   	ret    
c001b40f:	83 ec 0c             	sub    esp,0xc
c001b412:	68 e2 b5 02 c0       	push   0xc002b5e2
c001b417:	e8 cb 74 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001b41c:	eb c5                	jmp    c001b3e3 <sysCallClose(regs*)+0x43>
c001b41e:	83 ec 0c             	sub    esp,0xc
c001b421:	68 f0 b5 02 c0       	push   0xc002b5f0
c001b426:	eb ef                	jmp    c001b417 <sysCallClose(regs*)+0x77>

c001b428 <sysCallOpenDir(regs*)>:
c001b428:	56                   	push   esi
c001b429:	53                   	push   ebx
c001b42a:	53                   	push   ebx
c001b42b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b42f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b432:	85 f6                	test   esi,esi
c001b434:	74 59                	je     c001b48f <sysCallOpenDir(regs*)+0x67>
c001b436:	83 ec 0c             	sub    esp,0xc
c001b439:	68 14 01 00 00       	push   0x114
c001b43e:	e8 d5 41 ff ff       	call   c000f618 <malloc>
c001b443:	83 c4 0c             	add    esp,0xc
c001b446:	89 c6                	mov    esi,eax
c001b448:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b44d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b450:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b453:	56                   	push   esi
c001b454:	e8 93 7e ff ff       	call   c00132ec <Directory::Directory(char const*, Process*)>
c001b459:	83 c4 10             	add    esp,0x10
c001b45c:	85 f6                	test   esi,esi
c001b45e:	74 2f                	je     c001b48f <sysCallOpenDir(regs*)+0x67>
c001b460:	83 ec 0c             	sub    esp,0xc
c001b463:	56                   	push   esi
c001b464:	e8 e7 7e ff ff       	call   c0013350 <Directory::open()>
c001b469:	83 c4 10             	add    esp,0x10
c001b46c:	85 c0                	test   eax,eax
c001b46e:	75 1f                	jne    c001b48f <sysCallOpenDir(regs*)+0x67>
c001b470:	83 ec 0c             	sub    esp,0xc
c001b473:	56                   	push   esi
c001b474:	e8 33 60 ff ff       	call   c00114ac <UnixFile::getFileDescriptor()>
c001b479:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b47c:	83 c4 10             	add    esp,0x10
c001b47f:	89 02                	mov    DWORD PTR [edx],eax
c001b481:	c1 f8 1f             	sar    eax,0x1f
c001b484:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b487:	31 c0                	xor    eax,eax
c001b489:	59                   	pop    ecx
c001b48a:	31 d2                	xor    edx,edx
c001b48c:	5b                   	pop    ebx
c001b48d:	5e                   	pop    esi
c001b48e:	c3                   	ret    
c001b48f:	59                   	pop    ecx
c001b490:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b495:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b49a:	5b                   	pop    ebx
c001b49b:	5e                   	pop    esi
c001b49c:	c3                   	ret    

c001b49d <sysCallCloseDir(regs*)>:
c001b49d:	53                   	push   ebx
c001b49e:	83 ec 08             	sub    esp,0x8
c001b4a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4a5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4a8:	83 f8 02             	cmp    eax,0x2
c001b4ab:	76 47                	jbe    c001b4f4 <sysCallCloseDir(regs*)+0x57>
c001b4ad:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b4b2:	77 2f                	ja     c001b4e3 <sysCallCloseDir(regs*)+0x46>
c001b4b4:	83 ec 0c             	sub    esp,0xc
c001b4b7:	50                   	push   eax
c001b4b8:	e8 e4 62 ff ff       	call   c00117a1 <getFromFileDescriptor(int)>
c001b4bd:	89 c3                	mov    ebx,eax
c001b4bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4c2:	e8 e5 7e ff ff       	call   c00133ac <Directory::close()>
c001b4c7:	83 c4 10             	add    esp,0x10
c001b4ca:	85 db                	test   ebx,ebx
c001b4cc:	74 0c                	je     c001b4da <sysCallCloseDir(regs*)+0x3d>
c001b4ce:	83 ec 0c             	sub    esp,0xc
c001b4d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4d3:	53                   	push   ebx
c001b4d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4d7:	83 c4 10             	add    esp,0x10
c001b4da:	31 c0                	xor    eax,eax
c001b4dc:	31 d2                	xor    edx,edx
c001b4de:	83 c4 08             	add    esp,0x8
c001b4e1:	5b                   	pop    ebx
c001b4e2:	c3                   	ret    
c001b4e3:	83 ec 08             	sub    esp,0x8
c001b4e6:	50                   	push   eax
c001b4e7:	68 70 b5 02 c0       	push   0xc002b570
c001b4ec:	e8 f6 73 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001b4f1:	83 c4 10             	add    esp,0x10
c001b4f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4fe:	83 c4 08             	add    esp,0x8
c001b501:	5b                   	pop    ebx
c001b502:	c3                   	ret    

c001b503 <sysCallMakeDir(regs*)>:
c001b503:	56                   	push   esi
c001b504:	53                   	push   ebx
c001b505:	83 ec 10             	sub    esp,0x10
c001b508:	68 14 01 00 00       	push   0x114
c001b50d:	e8 06 41 ff ff       	call   c000f618 <malloc>
c001b512:	83 c4 0c             	add    esp,0xc
c001b515:	89 c3                	mov    ebx,eax
c001b517:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b51c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b51f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b523:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b526:	53                   	push   ebx
c001b527:	e8 c0 7d ff ff       	call   c00132ec <Directory::Directory(char const*, Process*)>
c001b52c:	83 c4 10             	add    esp,0x10
c001b52f:	85 db                	test   ebx,ebx
c001b531:	74 32                	je     c001b565 <sysCallMakeDir(regs*)+0x62>
c001b533:	83 ec 0c             	sub    esp,0xc
c001b536:	53                   	push   ebx
c001b537:	e8 f4 7f ff ff       	call   c0013530 <Directory::create()>
c001b53c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b53f:	89 c6                	mov    esi,eax
c001b541:	e8 66 7e ff ff       	call   c00133ac <Directory::close()>
c001b546:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b548:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b54b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b54e:	83 c4 10             	add    esp,0x10
c001b551:	31 c0                	xor    eax,eax
c001b553:	59                   	pop    ecx
c001b554:	85 f6                	test   esi,esi
c001b556:	5b                   	pop    ebx
c001b557:	0f 95 c0             	setne  al
c001b55a:	5e                   	pop    esi
c001b55b:	31 d2                	xor    edx,edx
c001b55d:	f7 d8                	neg    eax
c001b55f:	83 d2 00             	adc    edx,0x0
c001b562:	f7 da                	neg    edx
c001b564:	c3                   	ret    
c001b565:	59                   	pop    ecx
c001b566:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b56b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b570:	5b                   	pop    ebx
c001b571:	5e                   	pop    esi
c001b572:	c3                   	ret    

c001b573 <sysCallWait(regs*)>:
c001b573:	83 ec 10             	sub    esp,0x10
c001b576:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b57a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b57d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b580:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b583:	e8 e5 23 00 00       	call   c001d96d <waitTask(int, int*, int)>
c001b588:	83 c4 1c             	add    esp,0x1c
c001b58b:	99                   	cdq    
c001b58c:	c3                   	ret    

c001b58d <sysCallNotImpl(regs*)>:
c001b58d:	83 ec 18             	sub    esp,0x18
c001b590:	68 fe b5 02 c0       	push   0xc002b5fe
c001b595:	e8 c1 e8 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001b59a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b59f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5a4:	83 c4 1c             	add    esp,0x1c
c001b5a7:	c3                   	ret    

c001b5a8 <sysPanic(regs*)>:
c001b5a8:	83 ec 18             	sub    esp,0x18
c001b5ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b5af:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5b2:	e8 a4 e8 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001b5b7:	c7 04 24 18 b6 02 c0 	mov    DWORD PTR [esp],0xc002b618
c001b5be:	e8 98 e8 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001b5c3:	b8 01 00 00 00       	mov    eax,0x1
c001b5c8:	31 d2                	xor    edx,edx
c001b5ca:	83 c4 1c             	add    esp,0x1c
c001b5cd:	c3                   	ret    

c001b5ce <sysCallRmdir(regs*)>:
c001b5ce:	56                   	push   esi
c001b5cf:	53                   	push   ebx
c001b5d0:	83 ec 20             	sub    esp,0x20
c001b5d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5d7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b5da:	68 14 01 00 00       	push   0x114
c001b5df:	e8 34 40 ff ff       	call   c000f618 <malloc>
c001b5e4:	83 c4 0c             	add    esp,0xc
c001b5e7:	89 c3                	mov    ebx,eax
c001b5e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5ee:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5f1:	56                   	push   esi
c001b5f2:	53                   	push   ebx
c001b5f3:	e8 48 78 ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001b5f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5fb:	e8 1c 7a ff ff       	call   c001301c <File::unlink()>
c001b600:	83 c4 10             	add    esp,0x10
c001b603:	85 db                	test   ebx,ebx
c001b605:	74 14                	je     c001b61b <sysCallRmdir(regs*)+0x4d>
c001b607:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b60b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b60d:	83 ec 0c             	sub    esp,0xc
c001b610:	53                   	push   ebx
c001b611:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b614:	83 c4 10             	add    esp,0x10
c001b617:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b61b:	85 c0                	test   eax,eax
c001b61d:	0f 95 c0             	setne  al
c001b620:	31 d2                	xor    edx,edx
c001b622:	0f b6 c0             	movzx  eax,al
c001b625:	f7 d8                	neg    eax
c001b627:	83 d2 00             	adc    edx,0x0
c001b62a:	83 c4 14             	add    esp,0x14
c001b62d:	f7 da                	neg    edx
c001b62f:	5b                   	pop    ebx
c001b630:	5e                   	pop    esi
c001b631:	c3                   	ret    

c001b632 <sysCallUnlink(regs*)>:
c001b632:	56                   	push   esi
c001b633:	53                   	push   ebx
c001b634:	83 ec 20             	sub    esp,0x20
c001b637:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b63b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b63e:	68 14 01 00 00       	push   0x114
c001b643:	e8 d0 3f ff ff       	call   c000f618 <malloc>
c001b648:	83 c4 0c             	add    esp,0xc
c001b64b:	89 c3                	mov    ebx,eax
c001b64d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b652:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b655:	56                   	push   esi
c001b656:	53                   	push   ebx
c001b657:	e8 e4 77 ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001b65c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b65f:	e8 b8 79 ff ff       	call   c001301c <File::unlink()>
c001b664:	83 c4 10             	add    esp,0x10
c001b667:	85 db                	test   ebx,ebx
c001b669:	74 14                	je     c001b67f <sysCallUnlink(regs*)+0x4d>
c001b66b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b66f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b671:	83 ec 0c             	sub    esp,0xc
c001b674:	53                   	push   ebx
c001b675:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b678:	83 c4 10             	add    esp,0x10
c001b67b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b67f:	85 c0                	test   eax,eax
c001b681:	0f 95 c0             	setne  al
c001b684:	31 d2                	xor    edx,edx
c001b686:	0f b6 c0             	movzx  eax,al
c001b689:	f7 d8                	neg    eax
c001b68b:	83 d2 00             	adc    edx,0x0
c001b68e:	83 c4 14             	add    esp,0x14
c001b691:	f7 da                	neg    edx
c001b693:	5b                   	pop    ebx
c001b694:	5e                   	pop    esi
c001b695:	c3                   	ret    

c001b696 <sysCallGetArgv(regs*)>:
c001b696:	83 ec 0c             	sub    esp,0xc
c001b699:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b69d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6a0:	85 c0                	test   eax,eax
c001b6a2:	78 2b                	js     c001b6cf <sysCallGetArgv(regs*)+0x39>
c001b6a4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b6aa:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b6ad:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b6b3:	7d 1a                	jge    c001b6cf <sysCallGetArgv(regs*)+0x39>
c001b6b5:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b6bc:	85 c0                	test   eax,eax
c001b6be:	74 17                	je     c001b6d7 <sysCallGetArgv(regs*)+0x41>
c001b6c0:	83 ec 08             	sub    esp,0x8
c001b6c3:	50                   	push   eax
c001b6c4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b6c7:	e8 8b 50 fe ff       	call   c0000757 <strcpy>
c001b6cc:	83 c4 10             	add    esp,0x10
c001b6cf:	31 c0                	xor    eax,eax
c001b6d1:	31 d2                	xor    edx,edx
c001b6d3:	83 c4 0c             	add    esp,0xc
c001b6d6:	c3                   	ret    
c001b6d7:	b8 01 00 00 00       	mov    eax,0x1
c001b6dc:	31 d2                	xor    edx,edx
c001b6de:	83 c4 0c             	add    esp,0xc
c001b6e1:	c3                   	ret    

c001b6e2 <sysCallTTYName(regs*)>:
c001b6e2:	56                   	push   esi
c001b6e3:	53                   	push   ebx
c001b6e4:	53                   	push   ebx
c001b6e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6e9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b6ec:	85 c0                	test   eax,eax
c001b6ee:	74 5f                	je     c001b74f <sysCallTTYName(regs*)+0x6d>
c001b6f0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b6f3:	83 f8 02             	cmp    eax,0x2
c001b6f6:	77 3e                	ja     c001b736 <sysCallTTYName(regs*)+0x54>
c001b6f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b700:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b706:	85 db                	test   ebx,ebx
c001b708:	74 45                	je     c001b74f <sysCallTTYName(regs*)+0x6d>
c001b70a:	83 ec 0c             	sub    esp,0xc
c001b70d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b70f:	53                   	push   ebx
c001b710:	ff 10                	call   DWORD PTR [eax]
c001b712:	83 c4 10             	add    esp,0x10
c001b715:	84 c0                	test   al,al
c001b717:	74 41                	je     c001b75a <sysCallTTYName(regs*)+0x78>
c001b719:	83 ec 08             	sub    esp,0x8
c001b71c:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b722:	53                   	push   ebx
c001b723:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b726:	e8 2c 50 fe ff       	call   c0000757 <strcpy>
c001b72b:	83 c4 10             	add    esp,0x10
c001b72e:	31 c0                	xor    eax,eax
c001b730:	59                   	pop    ecx
c001b731:	31 d2                	xor    edx,edx
c001b733:	5b                   	pop    ebx
c001b734:	5e                   	pop    esi
c001b735:	c3                   	ret    
c001b736:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b73b:	74 bb                	je     c001b6f8 <sysCallTTYName(regs*)+0x16>
c001b73d:	83 ec 0c             	sub    esp,0xc
c001b740:	50                   	push   eax
c001b741:	e8 5b 60 ff ff       	call   c00117a1 <getFromFileDescriptor(int)>
c001b746:	83 c4 10             	add    esp,0x10
c001b749:	89 c3                	mov    ebx,eax
c001b74b:	85 db                	test   ebx,ebx
c001b74d:	75 bb                	jne    c001b70a <sysCallTTYName(regs*)+0x28>
c001b74f:	59                   	pop    ecx
c001b750:	b8 01 00 00 00       	mov    eax,0x1
c001b755:	31 d2                	xor    edx,edx
c001b757:	5b                   	pop    ebx
c001b758:	5e                   	pop    esi
c001b759:	c3                   	ret    
c001b75a:	59                   	pop    ecx
c001b75b:	b8 02 00 00 00       	mov    eax,0x2
c001b760:	31 d2                	xor    edx,edx
c001b762:	5b                   	pop    ebx
c001b763:	5e                   	pop    esi
c001b764:	c3                   	ret    

c001b765 <sysCallUSleep(regs*)>:
c001b765:	83 ec 14             	sub    esp,0x14
c001b768:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b76d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b771:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b778:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b77b:	01 ca                	add    edx,ecx
c001b77d:	52                   	push   edx
c001b77e:	50                   	push   eax
c001b77f:	e8 82 22 00 00       	call   c001da06 <nanoSleep(unsigned long long)>
c001b784:	31 c0                	xor    eax,eax
c001b786:	31 d2                	xor    edx,edx
c001b788:	83 c4 1c             	add    esp,0x1c
c001b78b:	c3                   	ret    

c001b78c <sysCallSpawn(regs*)>:
c001b78c:	56                   	push   esi
c001b78d:	53                   	push   ebx
c001b78e:	53                   	push   ebx
c001b78f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b793:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b796:	85 f6                	test   esi,esi
c001b798:	75 08                	jne    c001b7a2 <sysCallSpawn(regs*)+0x16>
c001b79a:	59                   	pop    ecx
c001b79b:	31 c0                	xor    eax,eax
c001b79d:	31 d2                	xor    edx,edx
c001b79f:	5b                   	pop    ebx
c001b7a0:	5e                   	pop    esi
c001b7a1:	c3                   	ret    
c001b7a2:	83 ec 0c             	sub    esp,0xc
c001b7a5:	68 3f 07 00 00       	push   0x73f
c001b7aa:	e8 69 3e ff ff       	call   c000f618 <malloc>
c001b7af:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b7b2:	89 c6                	mov    esi,eax
c001b7b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7b9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7bc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7bf:	56                   	push   esi
c001b7c0:	e8 41 19 00 00       	call   c001d106 <Process::Process(char const*, Process*, char**)>
c001b7c5:	83 c4 20             	add    esp,0x20
c001b7c8:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b7cf:	75 c9                	jne    c001b79a <sysCallSpawn(regs*)+0xe>
c001b7d1:	83 ec 0c             	sub    esp,0xc
c001b7d4:	56                   	push   esi
c001b7d5:	e8 f2 1e 00 00       	call   c001d6cc <Process::createUserThread()>
c001b7da:	8b 06                	mov    eax,DWORD PTR [esi]
c001b7dc:	83 c4 10             	add    esp,0x10
c001b7df:	99                   	cdq    
c001b7e0:	59                   	pop    ecx
c001b7e1:	5b                   	pop    ebx
c001b7e2:	5e                   	pop    esi
c001b7e3:	c3                   	ret    

c001b7e4 <sysCallGetEnv(regs*)>:
c001b7e4:	57                   	push   edi
c001b7e5:	56                   	push   esi
c001b7e6:	53                   	push   ebx
c001b7e7:	83 ec 1c             	sub    esp,0x1c
c001b7ea:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b7ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7f3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b7f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b7f9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7fc:	e8 76 e5 ff ff       	call   c0019d77 <Krnl::getProcessTotalEnvCount(Process*)>
c001b801:	83 c4 10             	add    esp,0x10
c001b804:	39 c7                	cmp    edi,eax
c001b806:	7c 14                	jl     c001b81c <sysCallGetEnv(regs*)+0x38>
c001b808:	85 f6                	test   esi,esi
c001b80a:	75 0b                	jne    c001b817 <sysCallGetEnv(regs*)+0x33>
c001b80c:	83 c4 10             	add    esp,0x10
c001b80f:	31 c0                	xor    eax,eax
c001b811:	5b                   	pop    ebx
c001b812:	31 d2                	xor    edx,edx
c001b814:	5e                   	pop    esi
c001b815:	5f                   	pop    edi
c001b816:	c3                   	ret    
c001b817:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b81a:	eb f0                	jmp    c001b80c <sysCallGetEnv(regs*)+0x28>
c001b81c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b820:	52                   	push   edx
c001b821:	57                   	push   edi
c001b822:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b828:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b82b:	50                   	push   eax
c001b82c:	e8 66 e5 ff ff       	call   c0019d97 <Krnl::getProcessEnvPair(Process*, int)>
c001b831:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b834:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b838:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b83c:	83 c4 0c             	add    esp,0xc
c001b83f:	85 c9                	test   ecx,ecx
c001b841:	75 23                	jne    c001b866 <sysCallGetEnv(regs*)+0x82>
c001b843:	83 ec 0c             	sub    esp,0xc
c001b846:	50                   	push   eax
c001b847:	e8 89 4e fe ff       	call   c00006d5 <strlen>
c001b84c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b84f:	89 c3                	mov    ebx,eax
c001b851:	e8 7f 4e fe ff       	call   c00006d5 <strlen>
c001b856:	83 c4 10             	add    esp,0x10
c001b859:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b85d:	83 c4 10             	add    esp,0x10
c001b860:	31 d2                	xor    edx,edx
c001b862:	5b                   	pop    ebx
c001b863:	5e                   	pop    esi
c001b864:	5f                   	pop    edi
c001b865:	c3                   	ret    
c001b866:	83 ec 08             	sub    esp,0x8
c001b869:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b86c:	50                   	push   eax
c001b86d:	56                   	push   esi
c001b86e:	e8 e4 4e fe ff       	call   c0000757 <strcpy>
c001b873:	58                   	pop    eax
c001b874:	5a                   	pop    edx
c001b875:	68 27 b6 02 c0       	push   0xc002b627
c001b87a:	56                   	push   esi
c001b87b:	e8 8e 4f fe ff       	call   c000080e <strcat>
c001b880:	59                   	pop    ecx
c001b881:	5b                   	pop    ebx
c001b882:	57                   	push   edi
c001b883:	56                   	push   esi
c001b884:	e8 85 4f fe ff       	call   c000080e <strcat>
c001b889:	83 c4 10             	add    esp,0x10
c001b88c:	e9 7b ff ff ff       	jmp    c001b80c <sysCallGetEnv(regs*)+0x28>

c001b891 <sysAppSettings(regs*)>:
c001b891:	53                   	push   ebx
c001b892:	83 ec 08             	sub    esp,0x8
c001b895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b899:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b89c:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b8a2:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b8a7:	66 3d c0 09          	cmp    ax,0x9c0
c001b8ab:	75 2f                	jne    c001b8dc <sysAppSettings(regs*)+0x4b>
c001b8ad:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b8b3:	83 e0 1f             	and    eax,0x1f
c001b8b6:	3c 01                	cmp    al,0x1
c001b8b8:	74 2e                	je     c001b8e8 <sysAppSettings(regs*)+0x57>
c001b8ba:	3c 07                	cmp    al,0x7
c001b8bc:	0f 84 bd 00 00 00    	je     c001b97f <sysAppSettings(regs*)+0xee>
c001b8c2:	84 c0                	test   al,al
c001b8c4:	0f 84 dc 00 00 00    	je     c001b9a6 <sysAppSettings(regs*)+0x115>
c001b8ca:	3c 08                	cmp    al,0x8
c001b8cc:	74 6d                	je     c001b93b <sysAppSettings(regs*)+0xaa>
c001b8ce:	0f b6 c0             	movzx  eax,al
c001b8d1:	83 c4 08             	add    esp,0x8
c001b8d4:	05 e8 03 00 00       	add    eax,0x3e8
c001b8d9:	5b                   	pop    ebx
c001b8da:	99                   	cdq    
c001b8db:	c3                   	ret    
c001b8dc:	b8 01 00 00 00       	mov    eax,0x1
c001b8e1:	31 d2                	xor    edx,edx
c001b8e3:	83 c4 08             	add    esp,0x8
c001b8e6:	5b                   	pop    ebx
c001b8e7:	c3                   	ret    
c001b8e8:	51                   	push   ecx
c001b8e9:	68 00 01 00 00       	push   0x100
c001b8ee:	6a 00                	push   0x0
c001b8f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8f8:	83 c0 0c             	add    eax,0xc
c001b8fb:	50                   	push   eax
c001b8fc:	e8 b7 4d fe ff       	call   c00006b8 <memset>
c001b901:	83 c4 0c             	add    esp,0xc
c001b904:	68 ff 00 00 00       	push   0xff
c001b909:	53                   	push   ebx
c001b90a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b90f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b912:	83 c0 0c             	add    eax,0xc
c001b915:	50                   	push   eax
c001b916:	e8 85 4d fe ff       	call   c00006a0 <memcpy>
c001b91b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b920:	5b                   	pop    ebx
c001b921:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b924:	5a                   	pop    edx
c001b925:	8d 50 0c             	lea    edx,[eax+0xc]
c001b928:	52                   	push   edx
c001b929:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b92f:	e8 e8 4f ff ff       	call   c001091c <VgaText::setTitle(char*)>
c001b934:	83 c4 10             	add    esp,0x10
c001b937:	31 c0                	xor    eax,eax
c001b939:	eb a6                	jmp    c001b8e1 <sysAppSettings(regs*)+0x50>
c001b93b:	83 ec 08             	sub    esp,0x8
c001b93e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b944:	83 e0 0f             	and    eax,0xf
c001b947:	50                   	push   eax
c001b948:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b94d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b950:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b956:	e8 b1 4f ff ff       	call   c001090c <VgaText::setTitleColour(VgaColour)>
c001b95b:	58                   	pop    eax
c001b95c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b962:	5a                   	pop    edx
c001b963:	c1 e8 04             	shr    eax,0x4
c001b966:	83 e0 0f             	and    eax,0xf
c001b969:	50                   	push   eax
c001b96a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b96f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b972:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b978:	e8 7f 4f ff ff       	call   c00108fc <VgaText::setTitleTextColour(VgaColour)>
c001b97d:	eb b5                	jmp    c001b934 <sysAppSettings(regs*)+0xa3>
c001b97f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b984:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b987:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b98d:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b993:	c0 e8 06             	shr    al,0x6
c001b996:	83 e0 01             	and    eax,0x1
c001b999:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b99f:	31 c0                	xor    eax,eax
c001b9a1:	e9 3b ff ff ff       	jmp    c001b8e1 <sysAppSettings(regs*)+0x50>
c001b9a6:	b8 02 00 00 00       	mov    eax,0x2
c001b9ab:	e9 31 ff ff ff       	jmp    c001b8e1 <sysAppSettings(regs*)+0x50>

c001b9b0 <sysSetFatAttrib(regs*)>:
c001b9b0:	57                   	push   edi
c001b9b1:	56                   	push   esi
c001b9b2:	53                   	push   ebx
c001b9b3:	83 ec 1c             	sub    esp,0x1c
c001b9b6:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b9ba:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b9bd:	68 14 01 00 00       	push   0x114
c001b9c2:	e8 51 3c ff ff       	call   c000f618 <malloc>
c001b9c7:	83 c4 0c             	add    esp,0xc
c001b9ca:	89 c3                	mov    ebx,eax
c001b9cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9d1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9d4:	57                   	push   edi
c001b9d5:	53                   	push   ebx
c001b9d6:	e8 65 74 ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001b9db:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b9de:	83 c4 0c             	add    esp,0xc
c001b9e1:	0f b6 d4             	movzx  edx,ah
c001b9e4:	0f b6 c0             	movzx  eax,al
c001b9e7:	52                   	push   edx
c001b9e8:	50                   	push   eax
c001b9e9:	53                   	push   ebx
c001b9ea:	e8 c7 76 ff ff       	call   c00130b6 <File::chfatattr(unsigned char, unsigned char)>
c001b9ef:	83 c4 10             	add    esp,0x10
c001b9f2:	85 db                	test   ebx,ebx
c001b9f4:	74 14                	je     c001ba0a <sysSetFatAttrib(regs*)+0x5a>
c001b9f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9fa:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b9fc:	83 ec 0c             	sub    esp,0xc
c001b9ff:	53                   	push   ebx
c001ba00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba0a:	85 c0                	test   eax,eax
c001ba0c:	0f 95 c0             	setne  al
c001ba0f:	31 d2                	xor    edx,edx
c001ba11:	0f b6 c0             	movzx  eax,al
c001ba14:	f7 d8                	neg    eax
c001ba16:	83 d2 00             	adc    edx,0x0
c001ba19:	83 c4 10             	add    esp,0x10
c001ba1c:	f7 da                	neg    edx
c001ba1e:	5b                   	pop    ebx
c001ba1f:	5e                   	pop    esi
c001ba20:	5f                   	pop    edi
c001ba21:	c3                   	ret    

c001ba22 <sysPipe(regs*)>:
c001ba22:	57                   	push   edi
c001ba23:	56                   	push   esi
c001ba24:	53                   	push   ebx
c001ba25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba29:	83 ec 0c             	sub    esp,0xc
c001ba2c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001ba2f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001ba32:	6a 20                	push   0x20
c001ba34:	e8 df 3b ff ff       	call   c000f618 <malloc>
c001ba39:	89 c3                	mov    ebx,eax
c001ba3b:	58                   	pop    eax
c001ba3c:	5a                   	pop    edx
c001ba3d:	68 00 50 00 00       	push   0x5000
c001ba42:	53                   	push   ebx
c001ba43:	e8 04 48 ff ff       	call   c001024c <Pipe::Pipe(int)>
c001ba48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba4b:	e8 5c 5a ff ff       	call   c00114ac <UnixFile::getFileDescriptor()>
c001ba50:	89 07                	mov    DWORD PTR [edi],eax
c001ba52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba55:	e8 52 5a ff ff       	call   c00114ac <UnixFile::getFileDescriptor()>
c001ba5a:	83 c4 10             	add    esp,0x10
c001ba5d:	89 06                	mov    DWORD PTR [esi],eax
c001ba5f:	31 d2                	xor    edx,edx
c001ba61:	5b                   	pop    ebx
c001ba62:	31 c0                	xor    eax,eax
c001ba64:	5e                   	pop    esi
c001ba65:	5f                   	pop    edi
c001ba66:	c3                   	ret    

c001ba67 <sysGetUnixTime(regs*)>:
c001ba67:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001ba6c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba76:	e9 af 7d ff ff       	jmp    c001382a <Clock::timeInSecondsLocal()>

c001ba7b <string_ends_with(char const*, char const*)>:
c001ba7b:	57                   	push   edi
c001ba7c:	56                   	push   esi
c001ba7d:	53                   	push   ebx
c001ba7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba82:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba86:	83 ec 0c             	sub    esp,0xc
c001ba89:	53                   	push   ebx
c001ba8a:	e8 46 4c fe ff       	call   c00006d5 <strlen>
c001ba8f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba92:	89 c6                	mov    esi,eax
c001ba94:	e8 3c 4c fe ff       	call   c00006d5 <strlen>
c001ba99:	83 c4 10             	add    esp,0x10
c001ba9c:	39 c6                	cmp    esi,eax
c001ba9e:	7d 06                	jge    c001baa6 <string_ends_with(char const*, char const*)+0x2b>
c001baa0:	5b                   	pop    ebx
c001baa1:	31 c0                	xor    eax,eax
c001baa3:	5e                   	pop    esi
c001baa4:	5f                   	pop    edi
c001baa5:	c3                   	ret    
c001baa6:	83 ec 08             	sub    esp,0x8
c001baa9:	29 c6                	sub    esi,eax
c001baab:	57                   	push   edi
c001baac:	01 f3                	add    ebx,esi
c001baae:	53                   	push   ebx
c001baaf:	e8 f4 4c fe ff       	call   c00007a8 <strcmp>
c001bab4:	83 c4 10             	add    esp,0x10
c001bab7:	85 c0                	test   eax,eax
c001bab9:	5b                   	pop    ebx
c001baba:	0f 94 c0             	sete   al
c001babd:	5e                   	pop    esi
c001babe:	0f b6 c0             	movzx  eax,al
c001bac1:	5f                   	pop    edi
c001bac2:	c3                   	ret    

c001bac3 <sysCallOpen(regs*)>:
c001bac3:	56                   	push   esi
c001bac4:	53                   	push   ebx
c001bac5:	81 ec 04 01 00 00    	sub    esp,0x104
c001bacb:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bad2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bad5:	85 c9                	test   ecx,ecx
c001bad7:	0f 84 b3 00 00 00    	je     c001bb90 <sysCallOpen(regs*)+0xcd>
c001badd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bae0:	85 c0                	test   eax,eax
c001bae2:	0f 84 a8 00 00 00    	je     c001bb90 <sysCallOpen(regs*)+0xcd>
c001bae8:	52                   	push   edx
c001bae9:	68 29 b6 02 c0       	push   0xc002b629
c001baee:	50                   	push   eax
c001baef:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001baf3:	56                   	push   esi
c001baf4:	e8 9d 71 ff ff       	call   c0012c96 <Fs::standardiseFiles(char*, char const*, char const*)>
c001baf9:	89 34 24             	mov    DWORD PTR [esp],esi
c001bafc:	e8 d4 4b fe ff       	call   c00006d5 <strlen>
c001bb01:	83 c4 10             	add    esp,0x10
c001bb04:	48                   	dec    eax
c001bb05:	74 1d                	je     c001bb24 <sysCallOpen(regs*)+0x61>
c001bb07:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bb0a:	eb 0f                	jmp    c001bb1b <sysCallOpen(regs*)+0x58>
c001bb0c:	80 fa 3a             	cmp    dl,0x3a
c001bb0f:	74 0f                	je     c001bb20 <sysCallOpen(regs*)+0x5d>
c001bb11:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bb15:	48                   	dec    eax
c001bb16:	74 0c                	je     c001bb24 <sysCallOpen(regs*)+0x61>
c001bb18:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bb1b:	80 fa 2e             	cmp    dl,0x2e
c001bb1e:	75 ec                	jne    c001bb0c <sysCallOpen(regs*)+0x49>
c001bb20:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bb24:	83 ec 08             	sub    esp,0x8
c001bb27:	68 2d b6 02 c0       	push   0xc002b62d
c001bb2c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb2f:	e8 47 ff ff ff       	call   c001ba7b <string_ends_with(char const*, char const*)>
c001bb34:	83 c4 10             	add    esp,0x10
c001bb37:	85 c0                	test   eax,eax
c001bb39:	75 17                	jne    c001bb52 <sysCallOpen(regs*)+0x8f>
c001bb3b:	83 ec 08             	sub    esp,0x8
c001bb3e:	68 4e b6 02 c0       	push   0xc002b64e
c001bb43:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb46:	e8 30 ff ff ff       	call   c001ba7b <string_ends_with(char const*, char const*)>
c001bb4b:	83 c4 10             	add    esp,0x10
c001bb4e:	85 c0                	test   eax,eax
c001bb50:	74 51                	je     c001bba3 <sysCallOpen(regs*)+0xe0>
c001bb52:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb55:	83 ec 08             	sub    esp,0x8
c001bb58:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bb5e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb65:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb68:	ff 30                	push   DWORD PTR [eax]
c001bb6a:	68 32 b6 02 c0       	push   0xc002b632
c001bb6f:	e8 73 6d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001bb74:	c7 04 24 41 b6 02 c0 	mov    DWORD PTR [esp],0xc002b641
c001bb7b:	e8 67 6d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001bb80:	83 c4 10             	add    esp,0x10
c001bb83:	81 c4 04 01 00 00    	add    esp,0x104
c001bb89:	31 c0                	xor    eax,eax
c001bb8b:	31 d2                	xor    edx,edx
c001bb8d:	5b                   	pop    ebx
c001bb8e:	5e                   	pop    esi
c001bb8f:	c3                   	ret    
c001bb90:	81 c4 04 01 00 00    	add    esp,0x104
c001bb96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb9b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bba0:	5b                   	pop    ebx
c001bba1:	5e                   	pop    esi
c001bba2:	c3                   	ret    
c001bba3:	83 ec 08             	sub    esp,0x8
c001bba6:	68 2e b6 02 c0       	push   0xc002b62e
c001bbab:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbae:	e8 f5 4b fe ff       	call   c00007a8 <strcmp>
c001bbb3:	83 c4 10             	add    esp,0x10
c001bbb6:	85 c0                	test   eax,eax
c001bbb8:	74 98                	je     c001bb52 <sysCallOpen(regs*)+0x8f>
c001bbba:	83 ec 08             	sub    esp,0x8
c001bbbd:	68 2d b6 02 c0       	push   0xc002b62d
c001bbc2:	56                   	push   esi
c001bbc3:	e8 b3 fe ff ff       	call   c001ba7b <string_ends_with(char const*, char const*)>
c001bbc8:	83 c4 10             	add    esp,0x10
c001bbcb:	85 c0                	test   eax,eax
c001bbcd:	75 83                	jne    c001bb52 <sysCallOpen(regs*)+0x8f>
c001bbcf:	83 ec 08             	sub    esp,0x8
c001bbd2:	68 53 b6 02 c0       	push   0xc002b653
c001bbd7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbda:	e8 9c fe ff ff       	call   c001ba7b <string_ends_with(char const*, char const*)>
c001bbdf:	83 c4 10             	add    esp,0x10
c001bbe2:	85 c0                	test   eax,eax
c001bbe4:	0f 85 d9 00 00 00    	jne    c001bcc3 <sysCallOpen(regs*)+0x200>
c001bbea:	83 ec 08             	sub    esp,0x8
c001bbed:	68 58 b6 02 c0       	push   0xc002b658
c001bbf2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbf5:	e8 81 fe ff ff       	call   c001ba7b <string_ends_with(char const*, char const*)>
c001bbfa:	83 c4 10             	add    esp,0x10
c001bbfd:	85 c0                	test   eax,eax
c001bbff:	0f 85 be 00 00 00    	jne    c001bcc3 <sysCallOpen(regs*)+0x200>
c001bc05:	83 ec 08             	sub    esp,0x8
c001bc08:	68 54 b6 02 c0       	push   0xc002b654
c001bc0d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc10:	e8 93 4b fe ff       	call   c00007a8 <strcmp>
c001bc15:	83 c4 10             	add    esp,0x10
c001bc18:	85 c0                	test   eax,eax
c001bc1a:	0f 84 a3 00 00 00    	je     c001bcc3 <sysCallOpen(regs*)+0x200>
c001bc20:	83 ec 08             	sub    esp,0x8
c001bc23:	68 53 b6 02 c0       	push   0xc002b653
c001bc28:	56                   	push   esi
c001bc29:	e8 4d fe ff ff       	call   c001ba7b <string_ends_with(char const*, char const*)>
c001bc2e:	83 c4 10             	add    esp,0x10
c001bc31:	85 c0                	test   eax,eax
c001bc33:	0f 85 8a 00 00 00    	jne    c001bcc3 <sysCallOpen(regs*)+0x200>
c001bc39:	83 ec 0c             	sub    esp,0xc
c001bc3c:	68 14 01 00 00       	push   0x114
c001bc41:	e8 d2 39 ff ff       	call   c000f618 <malloc>
c001bc46:	83 c4 0c             	add    esp,0xc
c001bc49:	89 c6                	mov    esi,eax
c001bc4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc50:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc53:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc56:	56                   	push   esi
c001bc57:	e8 e4 71 ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001bc5c:	83 c4 10             	add    esp,0x10
c001bc5f:	85 f6                	test   esi,esi
c001bc61:	0f 84 29 ff ff ff    	je     c001bb90 <sysCallOpen(regs*)+0xcd>
c001bc67:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bc6a:	0f b6 c2             	movzx  eax,dl
c001bc6d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bc70:	89 d0                	mov    eax,edx
c001bc72:	83 e0 01             	and    eax,0x1
c001bc75:	f6 c2 02             	test   dl,0x2
c001bc78:	74 03                	je     c001bc7d <sysCallOpen(regs*)+0x1ba>
c001bc7a:	83 c8 02             	or     eax,0x2
c001bc7d:	f6 c2 04             	test   dl,0x4
c001bc80:	74 03                	je     c001bc85 <sysCallOpen(regs*)+0x1c2>
c001bc82:	83 c8 04             	or     eax,0x4
c001bc85:	f6 c2 08             	test   dl,0x8
c001bc88:	74 03                	je     c001bc8d <sysCallOpen(regs*)+0x1ca>
c001bc8a:	83 c8 0a             	or     eax,0xa
c001bc8d:	83 e2 10             	and    edx,0x10
c001bc90:	74 03                	je     c001bc95 <sysCallOpen(regs*)+0x1d2>
c001bc92:	83 c8 12             	or     eax,0x12
c001bc95:	83 ec 08             	sub    esp,0x8
c001bc98:	50                   	push   eax
c001bc99:	56                   	push   esi
c001bc9a:	e8 05 72 ff ff       	call   c0012ea4 <File::open(FileOpenMode)>
c001bc9f:	83 c4 10             	add    esp,0x10
c001bca2:	85 c0                	test   eax,eax
c001bca4:	0f 85 e6 fe ff ff    	jne    c001bb90 <sysCallOpen(regs*)+0xcd>
c001bcaa:	83 ec 0c             	sub    esp,0xc
c001bcad:	56                   	push   esi
c001bcae:	e8 f9 57 ff ff       	call   c00114ac <UnixFile::getFileDescriptor()>
c001bcb3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcb6:	89 02                	mov    DWORD PTR [edx],eax
c001bcb8:	c1 f8 1f             	sar    eax,0x1f
c001bcbb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcbe:	e9 bd fe ff ff       	jmp    c001bb80 <sysCallOpen(regs*)+0xbd>
c001bcc3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcc6:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bccc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcd3:	e9 ab fe ff ff       	jmp    c001bb83 <sysCallOpen(regs*)+0xc0>

c001bcd8 <Sys::loadSyscalls()>:
c001bcd8:	c7 05 40 06 03 c0 8e ae 01 c0 	mov    DWORD PTR ds:0xc0030640,0xc001ae8e
c001bce2:	c7 05 44 06 03 c0 f0 aa 01 c0 	mov    DWORD PTR ds:0xc0030644,0xc001aaf0
c001bcec:	c7 05 48 06 03 c0 43 ac 01 c0 	mov    DWORD PTR ds:0xc0030648,0xc001ac43
c001bcf6:	c7 05 4c 06 03 c0 26 ae 01 c0 	mov    DWORD PTR ds:0xc003064c,0xc001ae26
c001bd00:	c7 05 50 06 03 c0 db ab 01 c0 	mov    DWORD PTR ds:0xc0030650,0xc001abdb
c001bd0a:	c7 05 54 06 03 c0 27 ab 01 c0 	mov    DWORD PTR ds:0xc0030654,0xc001ab27
c001bd14:	c7 05 58 06 03 c0 08 ab 01 c0 	mov    DWORD PTR ds:0xc0030658,0xc001ab08
c001bd1e:	c7 05 5c 06 03 c0 98 ac 01 c0 	mov    DWORD PTR ds:0xc003065c,0xc001ac98
c001bd28:	c7 05 64 06 03 c0 a0 b3 01 c0 	mov    DWORD PTR ds:0xc0030664,0xc001b3a0
c001bd32:	c7 05 60 06 03 c0 c3 ba 01 c0 	mov    DWORD PTR ds:0xc0030660,0xc001bac3
c001bd3c:	c7 05 68 06 03 c0 28 b4 01 c0 	mov    DWORD PTR ds:0xc0030668,0xc001b428
c001bd46:	c7 05 6c 06 03 c0 8f b0 01 c0 	mov    DWORD PTR ds:0xc003066c,0xc001b08f
c001bd50:	c7 05 70 06 03 c0 c9 ae 01 c0 	mov    DWORD PTR ds:0xc0030670,0xc001aec9
c001bd5a:	c7 05 74 06 03 c0 ce ae 01 c0 	mov    DWORD PTR ds:0xc0030674,0xc001aece
c001bd64:	c7 05 78 06 03 c0 03 b5 01 c0 	mov    DWORD PTR ds:0xc0030678,0xc001b503
c001bd6e:	c7 05 7c 06 03 c0 9d b4 01 c0 	mov    DWORD PTR ds:0xc003067c,0xc001b49d
c001bd78:	c7 05 80 06 03 c0 77 b1 01 c0 	mov    DWORD PTR ds:0xc0030680,0xc001b177
c001bd82:	c7 05 84 06 03 c0 e0 b1 01 c0 	mov    DWORD PTR ds:0xc0030684,0xc001b1e0
c001bd8c:	c7 05 88 06 03 c0 5d b2 01 c0 	mov    DWORD PTR ds:0xc0030688,0xc001b25d
c001bd96:	c7 05 8c 06 03 c0 d3 ae 01 c0 	mov    DWORD PTR ds:0xc003068c,0xc001aed3
c001bda0:	c7 05 90 06 03 c0 73 b5 01 c0 	mov    DWORD PTR ds:0xc0030690,0xc001b573
c001bdaa:	c7 05 94 06 03 c0 8d b5 01 c0 	mov    DWORD PTR ds:0xc0030694,0xc001b58d
c001bdb4:	c7 05 98 06 03 c0 8d b5 01 c0 	mov    DWORD PTR ds:0xc0030698,0xc001b58d
c001bdbe:	c7 05 9c 06 03 c0 ce b5 01 c0 	mov    DWORD PTR ds:0xc003069c,0xc001b5ce
c001bdc8:	c7 05 a0 06 03 c0 32 b6 01 c0 	mov    DWORD PTR ds:0xc00306a0,0xc001b632
c001bdd2:	c7 05 a4 06 03 c0 dd ae 01 c0 	mov    DWORD PTR ds:0xc00306a4,0xc001aedd
c001bddc:	c7 05 a8 06 03 c0 96 b6 01 c0 	mov    DWORD PTR ds:0xc00306a8,0xc001b696
c001bde6:	c7 05 ac 06 03 c0 4c b0 01 c0 	mov    DWORD PTR ds:0xc00306ac,0xc001b04c
c001bdf0:	c7 05 b0 06 03 c0 e2 b6 01 c0 	mov    DWORD PTR ds:0xc00306b0,0xc001b6e2
c001bdfa:	c7 05 b4 06 03 c0 1d b1 01 c0 	mov    DWORD PTR ds:0xc00306b4,0xc001b11d
c001be04:	c7 05 b8 06 03 c0 65 b7 01 c0 	mov    DWORD PTR ds:0xc00306b8,0xc001b765
c001be0e:	c7 05 bc 06 03 c0 e0 b2 01 c0 	mov    DWORD PTR ds:0xc00306bc,0xc001b2e0
c001be18:	c7 05 c0 06 03 c0 8c b7 01 c0 	mov    DWORD PTR ds:0xc00306c0,0xc001b78c
c001be22:	c7 05 c4 06 03 c0 e4 b7 01 c0 	mov    DWORD PTR ds:0xc00306c4,0xc001b7e4
c001be2c:	c7 05 c8 06 03 c0 91 b8 01 c0 	mov    DWORD PTR ds:0xc00306c8,0xc001b891
c001be36:	c7 05 cc 06 03 c0 ed ae 01 c0 	mov    DWORD PTR ds:0xc00306cc,0xc001aeed
c001be40:	c7 05 d0 06 03 c0 57 af 01 c0 	mov    DWORD PTR ds:0xc00306d0,0xc001af57
c001be4a:	c7 05 d4 06 03 c0 9d af 01 c0 	mov    DWORD PTR ds:0xc00306d4,0xc001af9d
c001be54:	c7 05 d8 06 03 c0 b0 b9 01 c0 	mov    DWORD PTR ds:0xc00306d8,0xc001b9b0
c001be5e:	c7 05 dc 06 03 c0 a8 b5 01 c0 	mov    DWORD PTR ds:0xc00306dc,0xc001b5a8
c001be68:	c7 05 e0 06 03 c0 ee af 01 c0 	mov    DWORD PTR ds:0xc00306e0,0xc001afee
c001be72:	c7 05 e4 06 03 c0 22 ba 01 c0 	mov    DWORD PTR ds:0xc00306e4,0xc001ba22
c001be7c:	c7 05 e8 06 03 c0 67 ba 01 c0 	mov    DWORD PTR ds:0xc00306e8,0xc001ba67
c001be86:	c7 05 ec 06 03 c0 33 ab 01 c0 	mov    DWORD PTR ds:0xc00306ec,0xc001ab33
c001be90:	c7 05 f0 06 03 c0 b4 ac 01 c0 	mov    DWORD PTR ds:0xc00306f0,0xc001acb4
c001be9a:	c7 05 f4 06 03 c0 dc ad 01 c0 	mov    DWORD PTR ds:0xc00306f4,0xc001addc
c001bea4:	c7 05 f8 06 03 c0 ba aa 01 c0 	mov    DWORD PTR ds:0xc00306f8,0xc001aaba
c001beae:	c3                   	ret    

c001beaf <Sys::systemCall(regs*, void*)>:
c001beaf:	53                   	push   ebx
c001beb0:	83 ec 08             	sub    esp,0x8
c001beb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001beb7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001beba:	83 f8 7f             	cmp    eax,0x7f
c001bebd:	77 16                	ja     c001bed5 <Sys::systemCall(regs*, void*)+0x26>
c001bebf:	8b 14 85 40 06 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf9c0]
c001bec6:	85 d2                	test   edx,edx
c001bec8:	74 0b                	je     c001bed5 <Sys::systemCall(regs*, void*)+0x26>
c001beca:	83 ec 0c             	sub    esp,0xc
c001becd:	53                   	push   ebx
c001bece:	ff d2                	call   edx
c001bed0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bed3:	eb 0d                	jmp    c001bee2 <Sys::systemCall(regs*, void*)+0x33>
c001bed5:	52                   	push   edx
c001bed6:	52                   	push   edx
c001bed7:	50                   	push   eax
c001bed8:	68 5d b6 02 c0       	push   0xc002b65d
c001bedd:	e8 05 6a ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001bee2:	83 c4 10             	add    esp,0x10
c001bee5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001beea:	31 d2                	xor    edx,edx
c001beec:	83 c4 08             	add    esp,0x8
c001beef:	5b                   	pop    ebx
c001bef0:	c3                   	ret    

c001bef1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bef1:	55                   	push   ebp
c001bef2:	89 e5                	mov    ebp,esp
c001bef4:	57                   	push   edi
c001bef5:	56                   	push   esi
c001bef6:	53                   	push   ebx
c001bef7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001befd:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001bf00:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001bf03:	85 c0                	test   eax,eax
c001bf05:	0f 95 c1             	setne  cl
c001bf08:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001bf0c:	0f 94 c2             	sete   dl
c001bf0f:	84 d1                	test   cl,dl
c001bf11:	74 26                	je     c001bf39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bf13:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001bf1a:	74 1d                	je     c001bf39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bf1c:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001bf1f:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001bf25:	89 d6                	mov    esi,edx
c001bf27:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001bf2d:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001bf33:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bf36:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001bf39:	83 ec 0c             	sub    esp,0xc
c001bf3c:	05 ff 0f 00 00       	add    eax,0xfff
c001bf41:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bf44:	6a 01                	push   0x1
c001bf46:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001bf4c:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001bf52:	e8 a0 59 ff ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c001bf57:	83 c4 10             	add    esp,0x10
c001bf5a:	89 c6                	mov    esi,eax
c001bf5c:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001bf62:	0f 86 21 01 00 00    	jbe    c001c089 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001bf68:	c1 eb 0c             	shr    ebx,0xc
c001bf6b:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001bf75:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001bf7b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bf7e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bf81:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001bf87:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001bf8a:	29 d8                	sub    eax,ebx
c001bf8c:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001bf92:	0f 83 f4 00 00 00    	jae    c001c08c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001bf98:	83 ec 0c             	sub    esp,0xc
c001bf9b:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001bfa1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bfa4:	3d 00 10 00 00       	cmp    eax,0x1000
c001bfa9:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001bfab:	52                   	push   edx
c001bfac:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001bfb2:	52                   	push   edx
c001bfb3:	76 05                	jbe    c001bfba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001bfb5:	b8 00 10 00 00       	mov    eax,0x1000
c001bfba:	31 d2                	xor    edx,edx
c001bfbc:	52                   	push   edx
c001bfbd:	50                   	push   eax
c001bfbe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001bfc1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfc4:	83 c4 20             	add    esp,0x20
c001bfc7:	85 c0                	test   eax,eax
c001bfc9:	74 1f                	je     c001bfea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001bfcb:	51                   	push   ecx
c001bfcc:	51                   	push   ecx
c001bfcd:	50                   	push   eax
c001bfce:	68 71 b6 02 c0       	push   0xc002b671
c001bfd3:	e8 0f 69 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001bfd8:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfdb:	e8 7b 5c ff ff       	call   c0011c5b <Virt::freeKernelVirtualPages(unsigned long)>
c001bfe0:	83 c4 10             	add    esp,0x10
c001bfe3:	31 c0                	xor    eax,eax
c001bfe5:	e9 7c 01 00 00       	jmp    c001c166 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001bfea:	e8 c7 14 00 00       	call   c001d4b6 <lockScheduler()>
c001bfef:	e8 c1 3c ff ff       	call   c000fcb5 <Phys::allocatePage()>
c001bff4:	6a 07                	push   0x7
c001bff6:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001bffc:	56                   	push   esi
c001bffd:	50                   	push   eax
c001bffe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c004:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c007:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c00d:	e8 b0 5f ff ff       	call   c0011fc2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c012:	83 c4 0c             	add    esp,0xc
c001c015:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c01b:	6a 00                	push   0x0
c001c01d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c023:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c026:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c02c:	e8 fb 5d ff ff       	call   c0011e2c <VAS::mapOtherVASIn(bool, VAS*)>
c001c031:	58                   	pop    eax
c001c032:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001c038:	5a                   	pop    edx
c001c039:	68 07 04 00 00       	push   0x407
c001c03e:	53                   	push   ebx
c001c03f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c045:	50                   	push   eax
c001c046:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c04c:	6a 00                	push   0x0
c001c04e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c053:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c056:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c05c:	e8 1b 63 ff ff       	call   c001237c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c061:	83 c4 1c             	add    esp,0x1c
c001c064:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001c06a:	68 00 10 00 00       	push   0x1000
c001c06f:	50                   	push   eax
c001c070:	56                   	push   esi
c001c071:	e8 2a 46 fe ff       	call   c00006a0 <memcpy>
c001c076:	e8 3d 14 00 00       	call   c001d4b8 <unlockScheduler()>
c001c07b:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001c081:	83 c4 10             	add    esp,0x10
c001c084:	e9 f5 fe ff ff       	jmp    c001bf7e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001c089:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c08c:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001c096:	0f 86 bc 00 00 00    	jbe    c001c158 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001c09c:	e8 15 14 00 00       	call   c001d4b6 <lockScheduler()>
c001c0a1:	51                   	push   ecx
c001c0a2:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c0a8:	6a 00                	push   0x0
c001c0aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0b2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0b8:	e8 6f 5d ff ff       	call   c0011e2c <VAS::mapOtherVASIn(bool, VAS*)>
c001c0bd:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001c0c3:	83 c4 10             	add    esp,0x10
c001c0c6:	c1 e8 0c             	shr    eax,0xc
c001c0c9:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001c0d3:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001c0d9:	e8 d7 3b ff ff       	call   c000fcb5 <Phys::allocatePage()>
c001c0de:	6a 07                	push   0x7
c001c0e0:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001c0e6:	56                   	push   esi
c001c0e7:	50                   	push   eax
c001c0e8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c0ee:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c0f1:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001c0f7:	e8 c6 5e ff ff       	call   c0011fc2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c0fc:	58                   	pop    eax
c001c0fd:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001c103:	5a                   	pop    edx
c001c104:	68 07 04 00 00       	push   0x407
c001c109:	53                   	push   ebx
c001c10a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c110:	50                   	push   eax
c001c111:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c117:	6a 00                	push   0x0
c001c119:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c11e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c121:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c127:	e8 50 62 ff ff       	call   c001237c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c12c:	83 c4 1c             	add    esp,0x1c
c001c12f:	68 00 10 00 00       	push   0x1000
c001c134:	6a 00                	push   0x0
c001c136:	56                   	push   esi
c001c137:	e8 7c 45 fe ff       	call   c00006b8 <memset>
c001c13c:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001c142:	83 c4 10             	add    esp,0x10
c001c145:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001c14b:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001c151:	77 86                	ja     c001c0d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001c153:	e8 60 13 00 00       	call   c001d4b8 <unlockScheduler()>
c001c158:	83 ec 0c             	sub    esp,0xc
c001c15b:	56                   	push   esi
c001c15c:	e8 fa 5a ff ff       	call   c0011c5b <Virt::freeKernelVirtualPages(unsigned long)>
c001c161:	83 c4 10             	add    esp,0x10
c001c164:	b0 01                	mov    al,0x1
c001c166:	8d 65 f4             	lea    esp,[ebp-0xc]
c001c169:	5b                   	pop    ebx
c001c16a:	5e                   	pop    esi
c001c16b:	5f                   	pop    edi
c001c16c:	5d                   	pop    ebp
c001c16d:	c3                   	ret    

c001c16e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c16e:	55                   	push   ebp
c001c16f:	57                   	push   edi
c001c170:	56                   	push   esi
c001c171:	53                   	push   ebx
c001c172:	83 ec 48             	sub    esp,0x48
c001c175:	68 14 01 00 00       	push   0x114
c001c17a:	e8 99 34 ff ff       	call   c000f618 <malloc>
c001c17f:	83 c4 0c             	add    esp,0xc
c001c182:	89 c6                	mov    esi,eax
c001c184:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c188:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c18c:	50                   	push   eax
c001c18d:	e8 ae 6c ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001c192:	58                   	pop    eax
c001c193:	5a                   	pop    edx
c001c194:	6a 01                	push   0x1
c001c196:	56                   	push   esi
c001c197:	e8 08 6d ff ff       	call   c0012ea4 <File::open(FileOpenMode)>
c001c19c:	83 c4 10             	add    esp,0x10
c001c19f:	85 c0                	test   eax,eax
c001c1a1:	0f 85 47 01 00 00    	jne    c001c2ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1a7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c1af:	83 ec 0c             	sub    esp,0xc
c001c1b2:	6a 34                	push   0x34
c001c1b4:	e8 5f 34 ff ff       	call   c000f618 <malloc>
c001c1b9:	89 c3                	mov    ebx,eax
c001c1bb:	58                   	pop    eax
c001c1bc:	8b 06                	mov    eax,DWORD PTR [esi]
c001c1be:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c1c2:	57                   	push   edi
c001c1c3:	53                   	push   ebx
c001c1c4:	6a 00                	push   0x0
c001c1c6:	6a 34                	push   0x34
c001c1c8:	56                   	push   esi
c001c1c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1cc:	83 c4 20             	add    esp,0x20
c001c1cf:	85 c0                	test   eax,eax
c001c1d1:	0f 85 17 01 00 00    	jne    c001c2ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1d7:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c1dd:	0f 85 0b 01 00 00    	jne    c001c2ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c1e6:	85 c0                	test   eax,eax
c001c1e8:	0f 84 00 01 00 00    	je     c001c2ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1ee:	31 d2                	xor    edx,edx
c001c1f0:	55                   	push   ebp
c001c1f1:	52                   	push   edx
c001c1f2:	50                   	push   eax
c001c1f3:	56                   	push   esi
c001c1f4:	e8 69 6d ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001c1f9:	83 c4 10             	add    esp,0x10
c001c1fc:	85 c0                	test   eax,eax
c001c1fe:	0f 85 ea 00 00 00    	jne    c001c2ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c204:	83 ec 0c             	sub    esp,0xc
c001c207:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c20a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c20e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c212:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c216:	0f af c2             	imul   eax,edx
c001c219:	50                   	push   eax
c001c21a:	e8 f9 33 ff ff       	call   c000f618 <malloc>
c001c21f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c221:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c225:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c228:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c22c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c230:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c234:	0f af c2             	imul   eax,edx
c001c237:	99                   	cdq    
c001c238:	52                   	push   edx
c001c239:	50                   	push   eax
c001c23a:	56                   	push   esi
c001c23b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c23e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c241:	83 c4 20             	add    esp,0x20
c001c244:	85 c0                	test   eax,eax
c001c246:	0f 84 a2 00 00 00    	je     c001c2ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c24c:	31 d2                	xor    edx,edx
c001c24e:	51                   	push   ecx
c001c24f:	52                   	push   edx
c001c250:	50                   	push   eax
c001c251:	56                   	push   esi
c001c252:	e8 0b 6d ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001c257:	83 c4 10             	add    esp,0x10
c001c25a:	85 c0                	test   eax,eax
c001c25c:	0f 85 8c 00 00 00    	jne    c001c2ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c262:	83 ec 0c             	sub    esp,0xc
c001c265:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c269:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c26d:	31 ed                	xor    ebp,ebp
c001c26f:	0f af c2             	imul   eax,edx
c001c272:	50                   	push   eax
c001c273:	e8 a0 33 ff ff       	call   c000f618 <malloc>
c001c278:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c27a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c27e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c285:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c289:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c28d:	0f af c2             	imul   eax,edx
c001c290:	99                   	cdq    
c001c291:	52                   	push   edx
c001c292:	50                   	push   eax
c001c293:	56                   	push   esi
c001c294:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c297:	83 c4 20             	add    esp,0x20
c001c29a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c2a2:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c2a6:	0f 86 80 00 00 00    	jbe    c001c32c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c2ac:	0f b7 fd             	movzx  edi,bp
c001c2af:	c1 e7 05             	shl    edi,0x5
c001c2b2:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c2b6:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c2b9:	75 6b                	jne    c001c326 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c2bb:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c2be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c2c2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2c9:	52                   	push   edx
c001c2ca:	31 d2                	xor    edx,edx
c001c2cc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c2cf:	52                   	push   edx
c001c2d0:	50                   	push   eax
c001c2d1:	56                   	push   esi
c001c2d2:	e8 8b 6c ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001c2d7:	83 c4 10             	add    esp,0x10
c001c2da:	85 c0                	test   eax,eax
c001c2dc:	74 17                	je     c001c2f5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c2de:	83 ec 0c             	sub    esp,0xc
c001c2e1:	68 9c b6 02 c0       	push   0xc002b69c
c001c2e6:	e8 fc 65 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001c2eb:	83 c4 10             	add    esp,0x10
c001c2ee:	31 c0                	xor    eax,eax
c001c2f0:	e9 87 00 00 00       	jmp    c001c37c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c2f5:	83 ec 0c             	sub    esp,0xc
c001c2f8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c2fb:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c2fe:	50                   	push   eax
c001c2ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c303:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c307:	56                   	push   esi
c001c308:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c30c:	e8 e0 fb ff ff       	call   c001bef1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c311:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c315:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c319:	83 c4 20             	add    esp,0x20
c001c31c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c320:	73 04                	jae    c001c326 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c322:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c326:	45                   	inc    ebp
c001c327:	e9 76 ff ff ff       	jmp    c001c2a2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c32c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c330:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c334:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c338:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c33e:	83 ec 0c             	sub    esp,0xc
c001c341:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c347:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c34c:	05 00 10 00 00       	add    eax,0x1000
c001c351:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c358:	e8 cb 32 ff ff       	call   c000f628 <free>
c001c35d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c360:	e8 c3 32 ff ff       	call   c000f628 <free>
c001c365:	58                   	pop    eax
c001c366:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c36a:	e8 b9 32 ff ff       	call   c000f628 <free>
c001c36f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c372:	e8 8b 6b ff ff       	call   c0012f02 <File::close()>
c001c377:	83 c4 10             	add    esp,0x10
c001c37a:	b0 01                	mov    al,0x1
c001c37c:	83 c4 3c             	add    esp,0x3c
c001c37f:	5b                   	pop    ebx
c001c380:	5e                   	pop    esi
c001c381:	5f                   	pop    edi
c001c382:	5d                   	pop    ebp
c001c383:	c3                   	ret    

c001c384 <Thr::runtimeReferenceHelper()>:
c001c384:	83 ec 18             	sub    esp,0x18
c001c387:	68 a4 b6 02 c0       	push   0xc002b6a4
c001c38c:	e8 56 65 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001c391:	fa                   	cli    
c001c392:	83 c4 10             	add    esp,0x10
c001c395:	eb fe                	jmp    c001c395 <Thr::runtimeReferenceHelper()+0x11>

c001c397 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c397:	57                   	push   edi
c001c398:	56                   	push   esi
c001c399:	53                   	push   ebx
c001c39a:	31 db                	xor    ebx,ebx
c001c39c:	39 1d e0 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fe0,ebx
c001c3a2:	7e 3c                	jle    c001c3e0 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c3a4:	8b 34 9d 60 0f 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf0a0]
c001c3ab:	31 ff                	xor    edi,edi
c001c3ad:	39 3c 9d 60 0e 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf1a0],edi
c001c3b4:	7e 27                	jle    c001c3dd <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c3b6:	50                   	push   eax
c001c3b7:	50                   	push   eax
c001c3b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c3bc:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3be:	03 04 9d e0 0e 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf120]
c001c3c5:	50                   	push   eax
c001c3c6:	e8 dd 43 fe ff       	call   c00007a8 <strcmp>
c001c3cb:	83 c4 10             	add    esp,0x10
c001c3ce:	85 c0                	test   eax,eax
c001c3d0:	75 05                	jne    c001c3d7 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c3d2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c3d5:	eb 0b                	jmp    c001c3e2 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c3d7:	83 c6 10             	add    esi,0x10
c001c3da:	47                   	inc    edi
c001c3db:	eb d0                	jmp    c001c3ad <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c3dd:	43                   	inc    ebx
c001c3de:	eb bc                	jmp    c001c39c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c3e0:	31 c0                	xor    eax,eax
c001c3e2:	5b                   	pop    ebx
c001c3e3:	5e                   	pop    esi
c001c3e4:	5f                   	pop    edi
c001c3e5:	c3                   	ret    

c001c3e6 <Thr::loadKernelSymbolTable(char const*)>:
c001c3e6:	55                   	push   ebp
c001c3e7:	57                   	push   edi
c001c3e8:	56                   	push   esi
c001c3e9:	53                   	push   ebx
c001c3ea:	83 ec 68             	sub    esp,0x68
c001c3ed:	8b 35 34 10 03 c0    	mov    esi,DWORD PTR ds:0xc0031034
c001c3f3:	68 14 01 00 00       	push   0x114
c001c3f8:	e8 1b 32 ff ff       	call   c000f618 <malloc>
c001c3fd:	83 c4 0c             	add    esp,0xc
c001c400:	89 c3                	mov    ebx,eax
c001c402:	56                   	push   esi
c001c403:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c407:	50                   	push   eax
c001c408:	e8 33 6a ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001c40d:	5e                   	pop    esi
c001c40e:	5f                   	pop    edi
c001c40f:	6a 01                	push   0x1
c001c411:	53                   	push   ebx
c001c412:	e8 8d 6a ff ff       	call   c0012ea4 <File::open(FileOpenMode)>
c001c417:	83 c4 10             	add    esp,0x10
c001c41a:	85 c0                	test   eax,eax
c001c41c:	74 0a                	je     c001c428 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c41e:	83 ec 0c             	sub    esp,0xc
c001c421:	68 c6 b6 02 c0       	push   0xc002b6c6
c001c426:	eb 34                	jmp    c001c45c <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c428:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c430:	83 ec 0c             	sub    esp,0xc
c001c433:	6a 34                	push   0x34
c001c435:	e8 de 31 ff ff       	call   c000f618 <malloc>
c001c43a:	59                   	pop    ecx
c001c43b:	89 c7                	mov    edi,eax
c001c43d:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c441:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c443:	56                   	push   esi
c001c444:	57                   	push   edi
c001c445:	6a 00                	push   0x0
c001c447:	6a 34                	push   0x34
c001c449:	53                   	push   ebx
c001c44a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c44d:	83 c4 20             	add    esp,0x20
c001c450:	85 c0                	test   eax,eax
c001c452:	74 17                	je     c001c46b <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c454:	83 ec 0c             	sub    esp,0xc
c001c457:	68 dd b6 02 c0       	push   0xc002b6dd
c001c45c:	e8 fa d9 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001c461:	83 c4 10             	add    esp,0x10
c001c464:	31 c0                	xor    eax,eax
c001c466:	e9 31 02 00 00       	jmp    c001c69c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c46b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c471:	75 e1                	jne    c001c454 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c473:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c476:	85 c0                	test   eax,eax
c001c478:	74 da                	je     c001c454 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c47a:	52                   	push   edx
c001c47b:	31 d2                	xor    edx,edx
c001c47d:	52                   	push   edx
c001c47e:	50                   	push   eax
c001c47f:	53                   	push   ebx
c001c480:	e8 dd 6a ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001c485:	83 c4 10             	add    esp,0x10
c001c488:	85 c0                	test   eax,eax
c001c48a:	75 c8                	jne    c001c454 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c48c:	83 ec 0c             	sub    esp,0xc
c001c48f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c493:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c497:	31 ed                	xor    ebp,ebp
c001c499:	0f af c2             	imul   eax,edx
c001c49c:	50                   	push   eax
c001c49d:	e8 76 31 ff ff       	call   c000f618 <malloc>
c001c4a2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c4a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4a8:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4af:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4b3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4b7:	0f af c2             	imul   eax,edx
c001c4ba:	99                   	cdq    
c001c4bb:	52                   	push   edx
c001c4bc:	50                   	push   eax
c001c4bd:	53                   	push   ebx
c001c4be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4c1:	83 c4 20             	add    esp,0x20
c001c4c4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c4cc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c4d4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c4e4:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c4e8:	0f 86 aa 00 00 00    	jbe    c001c598 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c4ee:	0f b7 f5             	movzx  esi,bp
c001c4f1:	6b f6 28             	imul   esi,esi,0x28
c001c4f4:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c4f8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c4fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4ff:	50                   	push   eax
c001c500:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c504:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c508:	8b 16                	mov    edx,DWORD PTR [esi]
c001c50a:	6b c0 28             	imul   eax,eax,0x28
c001c50d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c511:	89 d0                	mov    eax,edx
c001c513:	31 d2                	xor    edx,edx
c001c515:	52                   	push   edx
c001c516:	50                   	push   eax
c001c517:	53                   	push   ebx
c001c518:	e8 45 6a ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001c51d:	83 c4 0c             	add    esp,0xc
c001c520:	6a 20                	push   0x20
c001c522:	6a 00                	push   0x0
c001c524:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c528:	52                   	push   edx
c001c529:	e8 8a 41 fe ff       	call   c00006b8 <memset>
c001c52e:	58                   	pop    eax
c001c52f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c531:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c535:	51                   	push   ecx
c001c536:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c53a:	52                   	push   edx
c001c53b:	6a 00                	push   0x0
c001c53d:	6a 1f                	push   0x1f
c001c53f:	53                   	push   ebx
c001c540:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c543:	83 c4 18             	add    esp,0x18
c001c546:	68 f4 b6 02 c0       	push   0xc002b6f4
c001c54b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c54f:	52                   	push   edx
c001c550:	e8 53 42 fe ff       	call   c00007a8 <strcmp>
c001c555:	83 c4 10             	add    esp,0x10
c001c558:	85 c0                	test   eax,eax
c001c55a:	75 0f                	jne    c001c56b <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c55c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c55f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c563:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c56b:	50                   	push   eax
c001c56c:	50                   	push   eax
c001c56d:	68 fc b6 02 c0       	push   0xc002b6fc
c001c572:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c576:	50                   	push   eax
c001c577:	e8 2c 42 fe ff       	call   c00007a8 <strcmp>
c001c57c:	83 c4 10             	add    esp,0x10
c001c57f:	85 c0                	test   eax,eax
c001c581:	75 0f                	jne    c001c592 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c583:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c586:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c58a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c58e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c592:	45                   	inc    ebp
c001c593:	e9 4c ff ff ff       	jmp    c001c4e4 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c598:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c59d:	75 10                	jne    c001c5af <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c59f:	83 ec 0c             	sub    esp,0xc
c001c5a2:	68 04 b7 02 c0       	push   0xc002b704
c001c5a7:	e8 af d8 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001c5ac:	83 c4 10             	add    esp,0x10
c001c5af:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c5b4:	75 10                	jne    c001c5c6 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c5b6:	83 ec 0c             	sub    esp,0xc
c001c5b9:	68 04 b7 02 c0       	push   0xc002b704
c001c5be:	e8 98 d8 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001c5c3:	83 c4 10             	add    esp,0x10
c001c5c6:	31 d2                	xor    edx,edx
c001c5c8:	50                   	push   eax
c001c5c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5cd:	52                   	push   edx
c001c5ce:	50                   	push   eax
c001c5cf:	53                   	push   ebx
c001c5d0:	e8 8d 69 ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001c5d5:	5a                   	pop    edx
c001c5d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c5da:	e8 39 30 ff ff       	call   c000f618 <malloc>
c001c5df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5e7:	31 c9                	xor    ecx,ecx
c001c5e9:	5e                   	pop    esi
c001c5ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5ec:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c5f0:	55                   	push   ebp
c001c5f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5f5:	51                   	push   ecx
c001c5f6:	52                   	push   edx
c001c5f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c5fb:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c5ff:	53                   	push   ebx
c001c600:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c603:	83 c4 14             	add    esp,0x14
c001c606:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c60a:	e8 09 30 ff ff       	call   c000f618 <malloc>
c001c60f:	89 c6                	mov    esi,eax
c001c611:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c613:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c616:	56                   	push   esi
c001c617:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c61b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c61f:	51                   	push   ecx
c001c620:	52                   	push   edx
c001c621:	53                   	push   ebx
c001c622:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c625:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c629:	8b 15 e0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fe0
c001c62f:	83 c4 1c             	add    esp,0x1c
c001c632:	c1 e8 04             	shr    eax,0x4
c001c635:	89 04 95 60 0e 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf1a0],eax
c001c63c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c640:	31 d2                	xor    edx,edx
c001c642:	52                   	push   edx
c001c643:	50                   	push   eax
c001c644:	53                   	push   ebx
c001c645:	e8 18 69 ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001c64a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c64c:	31 d2                	xor    edx,edx
c001c64e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c651:	56                   	push   esi
c001c652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c656:	52                   	push   edx
c001c657:	50                   	push   eax
c001c658:	53                   	push   ebx
c001c659:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c65c:	83 c4 14             	add    esp,0x14
c001c65f:	53                   	push   ebx
c001c660:	e8 9d 68 ff ff       	call   c0012f02 <File::close()>
c001c665:	5d                   	pop    ebp
c001c666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c66a:	e8 b9 2f ff ff       	call   c000f628 <free>
c001c66f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c672:	e8 b1 2f ff ff       	call   c000f628 <free>
c001c677:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c001c67c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c680:	8d 50 01             	lea    edx,[eax+0x1]
c001c683:	89 0c 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],ecx
c001c68a:	89 34 85 e0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf120],esi
c001c691:	89 15 e0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fe0,edx
c001c697:	83 c4 10             	add    esp,0x10
c001c69a:	b0 01                	mov    al,0x1
c001c69c:	83 c4 5c             	add    esp,0x5c
c001c69f:	5b                   	pop    ebx
c001c6a0:	5e                   	pop    esi
c001c6a1:	5f                   	pop    edi
c001c6a2:	5d                   	pop    ebp
c001c6a3:	c3                   	ret    

c001c6a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c6a4:	55                   	push   ebp
c001c6a5:	57                   	push   edi
c001c6a6:	56                   	push   esi
c001c6a7:	53                   	push   ebx
c001c6a8:	81 ec 68 03 00 00    	sub    esp,0x368
c001c6ae:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c6b5:	8b 1d 34 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031034
c001c6bb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c6bf:	68 14 01 00 00       	push   0x114
c001c6c4:	e8 4f 2f ff ff       	call   c000f618 <malloc>
c001c6c9:	83 c4 0c             	add    esp,0xc
c001c6cc:	89 c5                	mov    ebp,eax
c001c6ce:	53                   	push   ebx
c001c6cf:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c6d6:	50                   	push   eax
c001c6d7:	e8 64 67 ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001c6dc:	5e                   	pop    esi
c001c6dd:	5f                   	pop    edi
c001c6de:	6a 01                	push   0x1
c001c6e0:	55                   	push   ebp
c001c6e1:	e8 be 67 ff ff       	call   c0012ea4 <File::open(FileOpenMode)>
c001c6e6:	83 c4 10             	add    esp,0x10
c001c6e9:	85 c0                	test   eax,eax
c001c6eb:	0f 85 8d 06 00 00    	jne    c001cd7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c6f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6f9:	83 ec 0c             	sub    esp,0xc
c001c6fc:	6a 34                	push   0x34
c001c6fe:	e8 15 2f ff ff       	call   c000f618 <malloc>
c001c703:	5b                   	pop    ebx
c001c704:	89 c7                	mov    edi,eax
c001c706:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c70a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c70d:	53                   	push   ebx
c001c70e:	57                   	push   edi
c001c70f:	6a 00                	push   0x0
c001c711:	6a 34                	push   0x34
c001c713:	55                   	push   ebp
c001c714:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c717:	83 c4 20             	add    esp,0x20
c001c71a:	85 c0                	test   eax,eax
c001c71c:	0f 85 5c 06 00 00    	jne    c001cd7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c722:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c728:	0f 85 50 06 00 00    	jne    c001cd7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c72e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c731:	85 c0                	test   eax,eax
c001c733:	0f 84 45 06 00 00    	je     c001cd7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c739:	31 d2                	xor    edx,edx
c001c73b:	51                   	push   ecx
c001c73c:	52                   	push   edx
c001c73d:	50                   	push   eax
c001c73e:	55                   	push   ebp
c001c73f:	e8 1e 68 ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001c744:	83 c4 10             	add    esp,0x10
c001c747:	85 c0                	test   eax,eax
c001c749:	0f 85 2f 06 00 00    	jne    c001cd7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c74f:	83 ec 0c             	sub    esp,0xc
c001c752:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c755:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c759:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c75d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c761:	0f af c2             	imul   eax,edx
c001c764:	50                   	push   eax
c001c765:	e8 ae 2e ff ff       	call   c000f618 <malloc>
c001c76a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c76d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c771:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c774:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c778:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c77c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c780:	0f af c2             	imul   eax,edx
c001c783:	99                   	cdq    
c001c784:	52                   	push   edx
c001c785:	50                   	push   eax
c001c786:	55                   	push   ebp
c001c787:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c78a:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c78d:	83 c4 20             	add    esp,0x20
c001c790:	85 c0                	test   eax,eax
c001c792:	0f 84 e6 05 00 00    	je     c001cd7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c798:	52                   	push   edx
c001c799:	31 d2                	xor    edx,edx
c001c79b:	52                   	push   edx
c001c79c:	50                   	push   eax
c001c79d:	55                   	push   ebp
c001c79e:	e8 bf 67 ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001c7a3:	83 c4 10             	add    esp,0x10
c001c7a6:	85 c0                	test   eax,eax
c001c7a8:	0f 85 d0 05 00 00    	jne    c001cd7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c7ae:	83 ec 0c             	sub    esp,0xc
c001c7b1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7b5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7b9:	31 f6                	xor    esi,esi
c001c7bb:	0f af c2             	imul   eax,edx
c001c7be:	50                   	push   eax
c001c7bf:	e8 54 2e ff ff       	call   c000f618 <malloc>
c001c7c4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7d2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7d6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7da:	0f af c2             	imul   eax,edx
c001c7dd:	99                   	cdq    
c001c7de:	52                   	push   edx
c001c7df:	50                   	push   eax
c001c7e0:	55                   	push   ebp
c001c7e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7e4:	83 c4 20             	add    esp,0x20
c001c7e7:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c7eb:	0f 86 8a 00 00 00    	jbe    c001c87b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c7f1:	0f b7 de             	movzx  ebx,si
c001c7f4:	c1 e3 05             	shl    ebx,0x5
c001c7f7:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c7fb:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c7fe:	75 75                	jne    c001c875 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c800:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c803:	31 d2                	xor    edx,edx
c001c805:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c809:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c80c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c810:	50                   	push   eax
c001c811:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c814:	52                   	push   edx
c001c815:	50                   	push   eax
c001c816:	55                   	push   ebp
c001c817:	e8 46 67 ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001c81c:	83 c4 10             	add    esp,0x10
c001c81f:	85 c0                	test   eax,eax
c001c821:	0f 85 57 05 00 00    	jne    c001cd7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c827:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c82e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c831:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c835:	31 d2                	xor    edx,edx
c001c837:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c83b:	83 ec 0c             	sub    esp,0xc
c001c83e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c842:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c849:	50                   	push   eax
c001c84a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c84e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c852:	52                   	push   edx
c001c853:	50                   	push   eax
c001c854:	55                   	push   ebp
c001c855:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c858:	83 c4 1c             	add    esp,0x1c
c001c85b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c85e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c861:	50                   	push   eax
c001c862:	6a 00                	push   0x0
c001c864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c868:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c86c:	50                   	push   eax
c001c86d:	e8 46 3e fe ff       	call   c00006b8 <memset>
c001c872:	83 c4 10             	add    esp,0x10
c001c875:	46                   	inc    esi
c001c876:	e9 6c ff ff ff       	jmp    c001c7e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c87b:	53                   	push   ebx
c001c87c:	31 db                	xor    ebx,ebx
c001c87e:	68 00 01 00 00       	push   0x100
c001c883:	6a 00                	push   0x0
c001c885:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c889:	50                   	push   eax
c001c88a:	e8 29 3e fe ff       	call   c00006b8 <memset>
c001c88f:	83 c4 0c             	add    esp,0xc
c001c892:	68 00 01 00 00       	push   0x100
c001c897:	6a 00                	push   0x0
c001c899:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c8a0:	50                   	push   eax
c001c8a1:	e8 12 3e fe ff       	call   c00006b8 <memset>
c001c8a6:	83 c4 10             	add    esp,0x10
c001c8a9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c8b1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c8b9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c8c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c8c9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c8d1:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c8d5:	0f 86 30 01 00 00    	jbe    c001ca0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c8db:	0f b7 f3             	movzx  esi,bx
c001c8de:	6b f6 28             	imul   esi,esi,0x28
c001c8e1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c8e5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c8e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8ec:	52                   	push   edx
c001c8ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8f1:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c8f5:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8f7:	6b d2 28             	imul   edx,edx,0x28
c001c8fa:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c8fe:	31 d2                	xor    edx,edx
c001c900:	52                   	push   edx
c001c901:	50                   	push   eax
c001c902:	55                   	push   ebp
c001c903:	e8 5a 66 ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001c908:	83 c4 0c             	add    esp,0xc
c001c90b:	6a 20                	push   0x20
c001c90d:	6a 00                	push   0x0
c001c90f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c916:	51                   	push   ecx
c001c917:	e8 9c 3d fe ff       	call   c00006b8 <memset>
c001c91c:	59                   	pop    ecx
c001c91d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c920:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c924:	52                   	push   edx
c001c925:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c92c:	51                   	push   ecx
c001c92d:	6a 00                	push   0x0
c001c92f:	6a 1f                	push   0x1f
c001c931:	55                   	push   ebp
c001c932:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c935:	83 c4 1c             	add    esp,0x1c
c001c938:	6a 09                	push   0x9
c001c93a:	68 1e b7 02 c0       	push   0xc002b71e
c001c93f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c946:	51                   	push   ecx
c001c947:	e8 f1 3c fe ff       	call   c000063d <memcmp>
c001c94c:	83 c4 10             	add    esp,0x10
c001c94f:	85 c0                	test   eax,eax
c001c951:	75 21                	jne    c001c974 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c953:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c957:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c95b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c95f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c963:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c966:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c96d:	89 d0                	mov    eax,edx
c001c96f:	40                   	inc    eax
c001c970:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c974:	50                   	push   eax
c001c975:	6a 09                	push   0x9
c001c977:	68 28 b7 02 c0       	push   0xc002b728
c001c97c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c983:	50                   	push   eax
c001c984:	e8 b4 3c fe ff       	call   c000063d <memcmp>
c001c989:	83 c4 10             	add    esp,0x10
c001c98c:	85 c0                	test   eax,eax
c001c98e:	75 21                	jne    c001c9b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c994:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c998:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c99c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9a0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9a3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c9aa:	89 d0                	mov    eax,edx
c001c9ac:	40                   	inc    eax
c001c9ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9b1:	50                   	push   eax
c001c9b2:	50                   	push   eax
c001c9b3:	68 f4 b6 02 c0       	push   0xc002b6f4
c001c9b8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9bf:	50                   	push   eax
c001c9c0:	e8 e3 3d fe ff       	call   c00007a8 <strcmp>
c001c9c5:	83 c4 10             	add    esp,0x10
c001c9c8:	85 c0                	test   eax,eax
c001c9ca:	75 0f                	jne    c001c9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c9cc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c9d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9db:	50                   	push   eax
c001c9dc:	50                   	push   eax
c001c9dd:	68 fc b6 02 c0       	push   0xc002b6fc
c001c9e2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9e9:	50                   	push   eax
c001c9ea:	e8 b9 3d fe ff       	call   c00007a8 <strcmp>
c001c9ef:	83 c4 10             	add    esp,0x10
c001c9f2:	85 c0                	test   eax,eax
c001c9f4:	75 0f                	jne    c001ca05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c9f6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca01:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ca05:	43                   	inc    ebx
c001ca06:	e9 c6 fe ff ff       	jmp    c001c8d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001ca0b:	31 d2                	xor    edx,edx
c001ca0d:	50                   	push   eax
c001ca0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca12:	52                   	push   edx
c001ca13:	50                   	push   eax
c001ca14:	55                   	push   ebp
c001ca15:	e8 48 65 ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001ca1a:	58                   	pop    eax
c001ca1b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca1f:	e8 f4 2b ff ff       	call   c000f618 <malloc>
c001ca24:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca27:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ca2b:	31 d2                	xor    edx,edx
c001ca2d:	58                   	pop    eax
c001ca2e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ca32:	53                   	push   ebx
c001ca33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ca37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca3b:	52                   	push   edx
c001ca3c:	50                   	push   eax
c001ca3d:	55                   	push   ebp
c001ca3e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca41:	83 c4 14             	add    esp,0x14
c001ca44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca48:	e8 cb 2b ff ff       	call   c000f618 <malloc>
c001ca4d:	31 d2                	xor    edx,edx
c001ca4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca53:	83 c4 0c             	add    esp,0xc
c001ca56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca5a:	52                   	push   edx
c001ca5b:	50                   	push   eax
c001ca5c:	55                   	push   ebp
c001ca5d:	e8 00 65 ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001ca62:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca65:	31 d2                	xor    edx,edx
c001ca67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca6a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ca6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca72:	52                   	push   edx
c001ca73:	50                   	push   eax
c001ca74:	55                   	push   ebp
c001ca75:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca78:	83 c4 20             	add    esp,0x20
c001ca7b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca83:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ca87:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ca8b:	0f 84 f1 02 00 00    	je     c001cd82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001ca91:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001ca98:	31 d2                	xor    edx,edx
c001ca9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca9e:	c1 e8 03             	shr    eax,0x3
c001caa1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001caa5:	51                   	push   ecx
c001caa6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caaa:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001caae:	52                   	push   edx
c001caaf:	50                   	push   eax
c001cab0:	55                   	push   ebp
c001cab1:	e8 ac 64 ff ff       	call   c0012f62 <File::seek(unsigned long long)>
c001cab6:	5b                   	pop    ebx
c001cab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cabb:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cac2:	e8 51 2b ff ff       	call   c000f618 <malloc>
c001cac7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001caca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cace:	31 d2                	xor    edx,edx
c001cad0:	5e                   	pop    esi
c001cad1:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cad5:	50                   	push   eax
c001cad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cada:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cade:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cae5:	52                   	push   edx
c001cae6:	50                   	push   eax
c001cae7:	55                   	push   ebp
c001cae8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001caeb:	83 c4 20             	add    esp,0x20
c001caee:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001caf6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cafa:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cafe:	0f 8d 62 02 00 00    	jge    c001cd66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001cb04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb0c:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cb11:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cb14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cb18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb1c:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cb20:	89 d8                	mov    eax,ebx
c001cb22:	c1 e8 08             	shr    eax,0x8
c001cb25:	89 c6                	mov    esi,eax
c001cb27:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb2b:	c1 e6 04             	shl    esi,0x4
c001cb2e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cb32:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cb35:	85 d2                	test   edx,edx
c001cb37:	0f 85 bf 00 00 00    	jne    c001cbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb3d:	83 ec 0c             	sub    esp,0xc
c001cb40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb44:	03 06                	add    eax,DWORD PTR [esi]
c001cb46:	50                   	push   eax
c001cb47:	e8 4b f8 ff ff       	call   c001c397 <Thr::getAddressOfKernelSymbol(char const*)>
c001cb4c:	83 c4 10             	add    esp,0x10
c001cb4f:	89 c2                	mov    edx,eax
c001cb51:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cb56:	85 c0                	test   eax,eax
c001cb58:	0f 85 9e 00 00 00    	jne    c001cbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb5e:	83 ec 0c             	sub    esp,0xc
c001cb61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb65:	03 06                	add    eax,DWORD PTR [esi]
c001cb67:	50                   	push   eax
c001cb68:	e8 65 17 ff ff       	call   c000e2d2 <Krnl::resolveCompatibilitySymbol(char*)>
c001cb6d:	83 c4 10             	add    esp,0x10
c001cb70:	89 c2                	mov    edx,eax
c001cb72:	85 c0                	test   eax,eax
c001cb74:	0f 85 82 00 00 00    	jne    c001cbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb7a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cb7e:	50                   	push   eax
c001cb7f:	50                   	push   eax
c001cb80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb84:	03 06                	add    eax,DWORD PTR [esi]
c001cb86:	50                   	push   eax
c001cb87:	68 32 b7 02 c0       	push   0xc002b732
c001cb8c:	e8 56 5d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001cb91:	58                   	pop    eax
c001cb92:	5a                   	pop    edx
c001cb93:	68 4c b7 02 c0       	push   0xc002b74c
c001cb98:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb9f:	50                   	push   eax
c001cba0:	e8 b2 3b fe ff       	call   c0000757 <strcpy>
c001cba5:	59                   	pop    ecx
c001cba6:	58                   	pop    eax
c001cba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbab:	03 06                	add    eax,DWORD PTR [esi]
c001cbad:	50                   	push   eax
c001cbae:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbb5:	50                   	push   eax
c001cbb6:	e8 53 3c fe ff       	call   c000080e <strcat>
c001cbbb:	58                   	pop    eax
c001cbbc:	5a                   	pop    edx
c001cbbd:	68 e2 b7 02 c0       	push   0xc002b7e2
c001cbc2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbc9:	50                   	push   eax
c001cbca:	e8 3f 3c fe ff       	call   c000080e <strcat>
c001cbcf:	83 c4 10             	add    esp,0x10
c001cbd2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cbd7:	0f 84 43 01 00 00    	je     c001cd20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cbdd:	83 ec 0c             	sub    esp,0xc
c001cbe0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbe7:	50                   	push   eax
c001cbe8:	e8 6e d2 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001cbed:	83 c4 10             	add    esp,0x10
c001cbf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cbf4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cbf8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cbfc:	80 fb 01             	cmp    bl,0x1
c001cbff:	75 7d                	jne    c001cc7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001cc01:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cc08:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc0c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cc10:	01 ce                	add    esi,ecx
c001cc12:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cc18:	0f 94 c0             	sete   al
c001cc1b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cc21:	0f 94 c3             	sete   bl
c001cc24:	09 c3                	or     ebx,eax
c001cc26:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc28:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cc2d:	74 36                	je     c001cc65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001cc2f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cc32:	84 db                	test   bl,bl
c001cc34:	75 0a                	jne    c001cc40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001cc36:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc3a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc3e:	76 37                	jbe    c001cc77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc40:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cc44:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc49:	0f 84 d1 00 00 00    	je     c001cd20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cc4f:	83 ec 0c             	sub    esp,0xc
c001cc52:	68 63 b7 02 c0       	push   0xc002b763
c001cc57:	e8 ff d1 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001cc5c:	83 c4 10             	add    esp,0x10
c001cc5f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc63:	eb 12                	jmp    c001cc77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc65:	01 c1                	add    ecx,eax
c001cc67:	84 db                	test   bl,bl
c001cc69:	75 0c                	jne    c001cc77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc6b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc6f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc73:	77 02                	ja     c001cc77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc75:	01 d1                	add    ecx,edx
c001cc77:	89 0e                	mov    DWORD PTR [esi],ecx
c001cc79:	e9 df 00 00 00       	jmp    c001cd5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cc7e:	80 fb 02             	cmp    bl,0x2
c001cc81:	75 71                	jne    c001ccf4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001cc83:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cc8a:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cc8e:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cc92:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cc98:	74 15                	je     c001ccaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001cc9a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cca0:	74 0d                	je     c001ccaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001cca2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cca6:	83 e8 04             	sub    eax,0x4
c001cca9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ccad:	76 1f                	jbe    c001ccce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001ccaf:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ccb3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccb8:	74 66                	je     c001cd20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ccba:	83 ec 0c             	sub    esp,0xc
c001ccbd:	68 7f b7 02 c0       	push   0xc002b77f
c001ccc2:	e8 94 d1 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccce:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccd0:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ccd5:	74 13                	je     c001ccea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001ccd7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ccdb:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cce2:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cce6:	01 c8                	add    eax,ecx
c001cce8:	eb 04                	jmp    c001ccee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001ccea:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ccee:	01 c2                	add    edx,eax
c001ccf0:	89 16                	mov    DWORD PTR [esi],edx
c001ccf2:	eb 69                	jmp    c001cd5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ccf4:	0f b6 db             	movzx  ebx,bl
c001ccf7:	50                   	push   eax
c001ccf8:	50                   	push   eax
c001ccf9:	53                   	push   ebx
c001ccfa:	68 9b b7 02 c0       	push   0xc002b79b
c001ccff:	e8 e3 5b ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001cd04:	83 c4 10             	add    esp,0x10
c001cd07:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd0c:	74 12                	je     c001cd20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cd0e:	83 ec 0c             	sub    esp,0xc
c001cd11:	68 a6 b7 02 c0       	push   0xc002b7a6
c001cd16:	e8 40 d1 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001cd1b:	83 c4 10             	add    esp,0x10
c001cd1e:	eb 3d                	jmp    c001cd5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cd20:	83 ec 0c             	sub    esp,0xc
c001cd23:	55                   	push   ebp
c001cd24:	e8 d9 61 ff ff       	call   c0012f02 <File::close()>
c001cd29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd2c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd32:	59                   	pop    ecx
c001cd33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd37:	e8 ec 28 ff ff       	call   c000f628 <free>
c001cd3c:	5b                   	pop    ebx
c001cd3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd41:	e8 e2 28 ff ff       	call   c000f628 <free>
c001cd46:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd49:	e8 da 28 ff ff       	call   c000f628 <free>
c001cd4e:	5e                   	pop    esi
c001cd4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd53:	e8 d0 28 ff ff       	call   c000f628 <free>
c001cd58:	83 c4 10             	add    esp,0x10
c001cd5b:	eb 21                	jmp    c001cd7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cd5d:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cd61:	e9 90 fd ff ff       	jmp    c001caf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cd66:	83 ec 0c             	sub    esp,0xc
c001cd69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd6d:	e8 b6 28 ff ff       	call   c000f628 <free>
c001cd72:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cd76:	83 c4 10             	add    esp,0x10
c001cd79:	e9 05 fd ff ff       	jmp    c001ca83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cd7e:	31 c0                	xor    eax,eax
c001cd80:	eb 33                	jmp    c001cdb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001cd82:	83 ec 0c             	sub    esp,0xc
c001cd85:	55                   	push   ebp
c001cd86:	e8 77 61 ff ff       	call   c0012f02 <File::close()>
c001cd8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd8e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd91:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd94:	58                   	pop    eax
c001cd95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd99:	e8 8a 28 ff ff       	call   c000f628 <free>
c001cd9e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cda1:	e8 82 28 ff ff       	call   c000f628 <free>
c001cda6:	5a                   	pop    edx
c001cda7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdab:	e8 78 28 ff ff       	call   c000f628 <free>
c001cdb0:	83 c4 10             	add    esp,0x10
c001cdb3:	b0 01                	mov    al,0x1
c001cdb5:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cdbb:	5b                   	pop    ebx
c001cdbc:	5e                   	pop    esi
c001cdbd:	5f                   	pop    edi
c001cdbe:	5d                   	pop    ebp
c001cdbf:	c3                   	ret    

c001cdc0 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cdc0:	56                   	push   esi
c001cdc1:	31 d2                	xor    edx,edx
c001cdc3:	53                   	push   ebx
c001cdc4:	8b 1d 40 08 03 c0    	mov    ebx,DWORD PTR ds:0xc0030840
c001cdca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdce:	39 d3                	cmp    ebx,edx
c001cdd0:	7e 1b                	jle    c001cded <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cdd2:	8b 04 95 60 0a 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf5a0]
c001cdd9:	39 c8                	cmp    eax,ecx
c001cddb:	77 0d                	ja     c001cdea <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cddd:	8b 34 95 60 08 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf7a0]
c001cde4:	01 c6                	add    esi,eax
c001cde6:	39 ce                	cmp    esi,ecx
c001cde8:	77 05                	ja     c001cdef <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cdea:	42                   	inc    edx
c001cdeb:	eb e1                	jmp    c001cdce <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cded:	31 c0                	xor    eax,eax
c001cdef:	5b                   	pop    ebx
c001cdf0:	5e                   	pop    esi
c001cdf1:	c3                   	ret    

c001cdf2 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cdf2:	53                   	push   ebx
c001cdf3:	31 c0                	xor    eax,eax
c001cdf5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cdf9:	8b 1d 40 08 03 c0    	mov    ebx,DWORD PTR ds:0xc0030840
c001cdff:	39 c3                	cmp    ebx,eax
c001ce01:	7e 22                	jle    c001ce25 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001ce03:	8b 14 85 60 0a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf5a0]
c001ce0a:	39 ca                	cmp    edx,ecx
c001ce0c:	77 14                	ja     c001ce22 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce0e:	03 14 85 60 08 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf7a0]
c001ce15:	39 ca                	cmp    edx,ecx
c001ce17:	76 09                	jbe    c001ce22 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce19:	8b 04 85 60 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3a0]
c001ce20:	eb 05                	jmp    c001ce27 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001ce22:	40                   	inc    eax
c001ce23:	eb da                	jmp    c001cdff <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001ce25:	31 c0                	xor    eax,eax
c001ce27:	5b                   	pop    ebx
c001ce28:	c3                   	ret    

c001ce29 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001ce29:	53                   	push   ebx
c001ce2a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ce2e:	53                   	push   ebx
c001ce2f:	e8 8c ff ff ff       	call   c001cdc0 <Thr::getDriverBaseFromAddress(unsigned long)>
c001ce34:	5a                   	pop    edx
c001ce35:	31 d2                	xor    edx,edx
c001ce37:	85 c0                	test   eax,eax
c001ce39:	74 04                	je     c001ce3f <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001ce3b:	89 da                	mov    edx,ebx
c001ce3d:	29 c2                	sub    edx,eax
c001ce3f:	89 d0                	mov    eax,edx
c001ce41:	5b                   	pop    ebx
c001ce42:	c3                   	ret    

c001ce43 <Thr::loadDLL(char const*, bool)>:
c001ce43:	55                   	push   ebp
c001ce44:	57                   	push   edi
c001ce45:	56                   	push   esi
c001ce46:	53                   	push   ebx
c001ce47:	81 ec 34 01 00 00    	sub    esp,0x134
c001ce4d:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001ce54:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001ce5b:	56                   	push   esi
c001ce5c:	68 be b7 02 c0       	push   0xc002b7be
c001ce61:	e8 81 5a ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ce66:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ce6d:	e8 a6 27 ff ff       	call   c000f618 <malloc>
c001ce72:	83 c4 0c             	add    esp,0xc
c001ce75:	89 c3                	mov    ebx,eax
c001ce77:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c001ce7d:	56                   	push   esi
c001ce7e:	50                   	push   eax
c001ce7f:	e8 bc 5f ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001ce84:	83 c4 10             	add    esp,0x10
c001ce87:	85 db                	test   ebx,ebx
c001ce89:	75 3c                	jne    c001cec7 <Thr::loadDLL(char const*, bool)+0x84>
c001ce8b:	89 e8                	mov    eax,ebp
c001ce8d:	84 c0                	test   al,al
c001ce8f:	0f 84 b0 01 00 00    	je     c001d045 <Thr::loadDLL(char const*, bool)+0x202>
c001ce95:	50                   	push   eax
c001ce96:	50                   	push   eax
c001ce97:	68 cf b7 02 c0       	push   0xc002b7cf
c001ce9c:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001cea0:	57                   	push   edi
c001cea1:	e8 b1 38 fe ff       	call   c0000757 <strcpy>
c001cea6:	58                   	pop    eax
c001cea7:	5a                   	pop    edx
c001cea8:	56                   	push   esi
c001cea9:	57                   	push   edi
c001ceaa:	e8 5f 39 fe ff       	call   c000080e <strcat>
c001ceaf:	59                   	pop    ecx
c001ceb0:	58                   	pop    eax
c001ceb1:	68 e2 b7 02 c0       	push   0xc002b7e2
c001ceb6:	57                   	push   edi
c001ceb7:	e8 52 39 fe ff       	call   c000080e <strcat>
c001cebc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cebf:	e8 97 cf ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001cec4:	83 c4 10             	add    esp,0x10
c001cec7:	50                   	push   eax
c001cec8:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cecc:	50                   	push   eax
c001cecd:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ced1:	50                   	push   eax
c001ced2:	53                   	push   ebx
c001ced3:	e8 78 62 ff ff       	call   c0013150 <File::stat(unsigned long long*, bool*)>
c001ced8:	83 c4 10             	add    esp,0x10
c001cedb:	85 db                	test   ebx,ebx
c001cedd:	74 0c                	je     c001ceeb <Thr::loadDLL(char const*, bool)+0xa8>
c001cedf:	83 ec 0c             	sub    esp,0xc
c001cee2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cee4:	53                   	push   ebx
c001cee5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cee8:	83 c4 10             	add    esp,0x10
c001ceeb:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cef0:	75 0a                	jne    c001cefc <Thr::loadDLL(char const*, bool)+0xb9>
c001cef2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cef6:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cefa:	75 3c                	jne    c001cf38 <Thr::loadDLL(char const*, bool)+0xf5>
c001cefc:	89 e8                	mov    eax,ebp
c001cefe:	84 c0                	test   al,al
c001cf00:	0f 84 3d 01 00 00    	je     c001d043 <Thr::loadDLL(char const*, bool)+0x200>
c001cf06:	50                   	push   eax
c001cf07:	50                   	push   eax
c001cf08:	68 cf b7 02 c0       	push   0xc002b7cf
c001cf0d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cf11:	53                   	push   ebx
c001cf12:	e8 40 38 fe ff       	call   c0000757 <strcpy>
c001cf17:	58                   	pop    eax
c001cf18:	5a                   	pop    edx
c001cf19:	56                   	push   esi
c001cf1a:	53                   	push   ebx
c001cf1b:	e8 ee 38 fe ff       	call   c000080e <strcat>
c001cf20:	59                   	pop    ecx
c001cf21:	5f                   	pop    edi
c001cf22:	68 e2 b7 02 c0       	push   0xc002b7e2
c001cf27:	53                   	push   ebx
c001cf28:	e8 e1 38 fe ff       	call   c000080e <strcat>
c001cf2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf30:	e8 26 cf ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001cf35:	83 c4 10             	add    esp,0x10
c001cf38:	e8 4a 4b ff ff       	call   c0011a87 <Virt::getAKernelVAS()>
c001cf3d:	51                   	push   ecx
c001cf3e:	6a 03                	push   0x3
c001cf40:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cf44:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cf48:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001cf4e:	83 d3 00             	adc    ebx,0x0
c001cf51:	89 ca                	mov    edx,ecx
c001cf53:	89 d1                	mov    ecx,edx
c001cf55:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001cf59:	51                   	push   ecx
c001cf5a:	50                   	push   eax
c001cf5b:	e8 62 51 ff ff       	call   c00120c2 <VAS::allocatePages(int, int)>
c001cf60:	89 34 24             	mov    DWORD PTR [esp],esi
c001cf63:	89 c3                	mov    ebx,eax
c001cf65:	e8 6b 37 fe ff       	call   c00006d5 <strlen>
c001cf6a:	8b 3d 40 08 03 c0    	mov    edi,DWORD PTR ds:0xc0030840
c001cf70:	40                   	inc    eax
c001cf71:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf74:	e8 9f 26 ff ff       	call   c000f618 <malloc>
c001cf79:	89 04 bd 60 0c 03 c0 	mov    DWORD PTR [edi*4-0x3ffcf3a0],eax
c001cf80:	5f                   	pop    edi
c001cf81:	58                   	pop    eax
c001cf82:	a1 40 08 03 c0       	mov    eax,ds:0xc0030840
c001cf87:	56                   	push   esi
c001cf88:	ff 34 85 60 0c 03 c0 	push   DWORD PTR [eax*4-0x3ffcf3a0]
c001cf8f:	e8 c3 37 fe ff       	call   c0000757 <strcpy>
c001cf94:	a1 40 08 03 c0       	mov    eax,ds:0xc0030840
c001cf99:	8d 50 01             	lea    edx,[eax+0x1]
c001cf9c:	89 1c 85 60 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf5a0],ebx
c001cfa3:	89 15 40 08 03 c0    	mov    DWORD PTR ds:0xc0030840,edx
c001cfa9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cfad:	83 c4 0c             	add    esp,0xc
c001cfb0:	89 14 85 60 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf7a0],edx
c001cfb7:	6a 01                	push   0x1
c001cfb9:	53                   	push   ebx
c001cfba:	56                   	push   esi
c001cfbb:	e8 e4 f6 ff ff       	call   c001c6a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cfc0:	83 c4 10             	add    esp,0x10
c001cfc3:	89 c7                	mov    edi,eax
c001cfc5:	fe c8                	dec    al
c001cfc7:	74 16                	je     c001cfdf <Thr::loadDLL(char const*, bool)+0x19c>
c001cfc9:	89 e8                	mov    eax,ebp
c001cfcb:	84 c0                	test   al,al
c001cfcd:	74 10                	je     c001cfdf <Thr::loadDLL(char const*, bool)+0x19c>
c001cfcf:	83 ec 0c             	sub    esp,0xc
c001cfd2:	68 e4 b7 02 c0       	push   0xc002b7e4
c001cfd7:	e8 7f ce ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001cfdc:	83 c4 10             	add    esp,0x10
c001cfdf:	31 f6                	xor    esi,esi
c001cfe1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cfe5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cfe9:	05 ff 0f 00 00       	add    eax,0xfff
c001cfee:	83 d2 00             	adc    edx,0x0
c001cff1:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cff5:	c1 ea 0c             	shr    edx,0xc
c001cff8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cffc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d000:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d004:	ba 00 00 00 00       	mov    edx,0x0
c001d009:	89 d0                	mov    eax,edx
c001d00b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d00f:	73 2c                	jae    c001d03d <Thr::loadDLL(char const*, bool)+0x1fa>
c001d011:	e8 71 4a ff ff       	call   c0011a87 <Virt::getAKernelVAS()>
c001d016:	89 f5                	mov    ebp,esi
c001d018:	c1 e5 0c             	shl    ebp,0xc
c001d01b:	52                   	push   edx
c001d01c:	01 dd                	add    ebp,ebx
c001d01e:	52                   	push   edx
c001d01f:	55                   	push   ebp
c001d020:	50                   	push   eax
c001d021:	e8 16 4c ff ff       	call   c0011c3c <VAS::getPageTableEntry(unsigned long)>
c001d026:	83 c4 10             	add    esp,0x10
c001d029:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d02c:	75 0c                	jne    c001d03a <Thr::loadDLL(char const*, bool)+0x1f7>
c001d02e:	83 ec 0c             	sub    esp,0xc
c001d031:	55                   	push   ebp
c001d032:	e8 f4 2b ff ff       	call   c000fc2b <Phys::freePage(unsigned long)>
c001d037:	83 c4 10             	add    esp,0x10
c001d03a:	46                   	inc    esi
c001d03b:	eb a4                	jmp    c001cfe1 <Thr::loadDLL(char const*, bool)+0x19e>
c001d03d:	89 f8                	mov    eax,edi
c001d03f:	84 c0                	test   al,al
c001d041:	75 02                	jne    c001d045 <Thr::loadDLL(char const*, bool)+0x202>
c001d043:	31 db                	xor    ebx,ebx
c001d045:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d04b:	89 d8                	mov    eax,ebx
c001d04d:	5b                   	pop    ebx
c001d04e:	5e                   	pop    esi
c001d04f:	5f                   	pop    edi
c001d050:	5d                   	pop    ebp
c001d051:	c3                   	ret    

c001d052 <Thr::executeDLL(unsigned long, void*)>:
c001d052:	56                   	push   esi
c001d053:	53                   	push   ebx
c001d054:	51                   	push   ecx
c001d055:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d059:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d05d:	85 db                	test   ebx,ebx
c001d05f:	75 10                	jne    c001d071 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d061:	83 ec 0c             	sub    esp,0xc
c001d064:	68 03 b8 02 c0       	push   0xc002b803
c001d069:	e8 ed cd ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001d06e:	83 c4 10             	add    esp,0x10
c001d071:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001d075:	89 d8                	mov    eax,ebx
c001d077:	5a                   	pop    edx
c001d078:	5b                   	pop    ebx
c001d079:	5e                   	pop    esi
c001d07a:	ff e0                	jmp    eax

c001d07c <changeTSS>:
c001d07c:	83 ec 14             	sub    esp,0x14
c001d07f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d084:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d087:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d08c:	c1 e2 15             	shl    edx,0x15
c001d08f:	29 d0                	sub    eax,edx
c001d091:	50                   	push   eax
c001d092:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001d097:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d09d:	05 7c 11 00 00       	add    eax,0x117c
c001d0a2:	50                   	push   eax
c001d0a3:	e8 8e 41 ff ff       	call   c0011236 <TSS::setESP(unsigned long)>
c001d0a8:	83 c4 1c             	add    esp,0x1c
c001d0ab:	c3                   	ret    

c001d0ac <Process::addArgs(char**)>:
c001d0ac:	57                   	push   edi
c001d0ad:	56                   	push   esi
c001d0ae:	53                   	push   ebx
c001d0af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d0b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d0b7:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d0c1:	85 ff                	test   edi,edi
c001d0c3:	74 3d                	je     c001d102 <Process::addArgs(char**)+0x56>
c001d0c5:	8b 07                	mov    eax,DWORD PTR [edi]
c001d0c7:	85 c0                	test   eax,eax
c001d0c9:	74 37                	je     c001d102 <Process::addArgs(char**)+0x56>
c001d0cb:	31 db                	xor    ebx,ebx
c001d0cd:	83 ec 0c             	sub    esp,0xc
c001d0d0:	50                   	push   eax
c001d0d1:	e8 ff 35 fe ff       	call   c00006d5 <strlen>
c001d0d6:	40                   	inc    eax
c001d0d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0da:	e8 39 25 ff ff       	call   c000f618 <malloc>
c001d0df:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d0e6:	5a                   	pop    edx
c001d0e7:	59                   	pop    ecx
c001d0e8:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d0eb:	43                   	inc    ebx
c001d0ec:	50                   	push   eax
c001d0ed:	e8 65 36 fe ff       	call   c0000757 <strcpy>
c001d0f2:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d0f8:	83 c4 10             	add    esp,0x10
c001d0fb:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d0fe:	85 c0                	test   eax,eax
c001d100:	75 cb                	jne    c001d0cd <Process::addArgs(char**)+0x21>
c001d102:	5b                   	pop    ebx
c001d103:	5e                   	pop    esi
c001d104:	5f                   	pop    edi
c001d105:	c3                   	ret    

c001d106 <Process::Process(char const*, Process*, char**)>:
c001d106:	56                   	push   esi
c001d107:	53                   	push   ebx
c001d108:	83 ec 14             	sub    esp,0x14
c001d10b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d10f:	05 0c 02 00 00       	add    eax,0x20c
c001d114:	bb 07 00 00 00       	mov    ebx,0x7
c001d119:	89 c6                	mov    esi,eax
c001d11b:	85 db                	test   ebx,ebx
c001d11d:	78 12                	js     c001d131 <Process::Process(char const*, Process*, char**)+0x2b>
c001d11f:	83 ec 0c             	sub    esp,0xc
c001d122:	56                   	push   esi
c001d123:	e8 da b2 00 00       	call   c0028402 <ThreadControlBlock::ThreadControlBlock()>
c001d128:	83 c4 10             	add    esp,0x10
c001d12b:	83 c6 63             	add    esi,0x63
c001d12e:	4b                   	dec    ebx
c001d12f:	eb ea                	jmp    c001d11b <Process::Process(char const*, Process*, char**)+0x15>
c001d131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d135:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d13c:	83 ec 0c             	sub    esp,0xc
c001d13f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d143:	e8 64 cb ff ff       	call   c0019cac <Krnl::newProcessEnv(Process*)>
c001d148:	83 c4 10             	add    esp,0x10
c001d14b:	89 c2                	mov    edx,eax
c001d14d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d151:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d15b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d164:	a1 50 d0 02 c0       	mov    eax,ds:0xc002d050
c001d169:	8d 50 01             	lea    edx,[eax+0x1]
c001d16c:	89 15 50 d0 02 c0    	mov    DWORD PTR ds:0xc002d050,edx
c001d172:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d176:	89 02                	mov    DWORD PTR [edx],eax
c001d178:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d180:	83 ec 0c             	sub    esp,0xc
c001d183:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d187:	e8 8c 24 ff ff       	call   c000f618 <malloc>
c001d18c:	83 c4 10             	add    esp,0x10
c001d18f:	89 c3                	mov    ebx,eax
c001d191:	83 ec 08             	sub    esp,0x8
c001d194:	6a 00                	push   0x0
c001d196:	53                   	push   ebx
c001d197:	e8 ce 52 ff ff       	call   c001246a <VAS::VAS(bool)>
c001d19c:	83 c4 10             	add    esp,0x10
c001d19f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1a3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d1a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1ad:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d1b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1bf:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d1c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1c9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d1cf:	85 c0                	test   eax,eax
c001d1d1:	74 42                	je     c001d215 <Process::Process(char const*, Process*, char**)+0x10f>
c001d1d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1d7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d1dd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d1e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1e7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d1ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1f1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d1f7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d1fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d201:	05 0c 01 00 00       	add    eax,0x10c
c001d206:	83 ec 08             	sub    esp,0x8
c001d209:	52                   	push   edx
c001d20a:	50                   	push   eax
c001d20b:	e8 47 35 fe ff       	call   c0000757 <strcpy>
c001d210:	83 c4 10             	add    esp,0x10
c001d213:	eb 63                	jmp    c001d278 <Process::Process(char const*, Process*, char**)+0x172>
c001d215:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d21d:	83 ec 0c             	sub    esp,0xc
c001d220:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d224:	e8 ef 23 ff ff       	call   c000f618 <malloc>
c001d229:	83 c4 10             	add    esp,0x10
c001d22c:	89 c3                	mov    ebx,eax
c001d22e:	83 ec 08             	sub    esp,0x8
c001d231:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d235:	53                   	push   ebx
c001d236:	e8 f9 3c ff ff       	call   c0010f34 <VgaText::VgaText(char const*)>
c001d23b:	83 c4 10             	add    esp,0x10
c001d23e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d242:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d24c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d252:	83 ec 0c             	sub    esp,0xc
c001d255:	50                   	push   eax
c001d256:	e8 cc 30 ff ff       	call   c0010327 <addToTerminalCycle(VgaText*)>
c001d25b:	83 c4 10             	add    esp,0x10
c001d25e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d262:	05 0c 01 00 00       	add    eax,0x10c
c001d267:	83 ec 08             	sub    esp,0x8
c001d26a:	68 2d b8 02 c0       	push   0xc002b82d
c001d26f:	50                   	push   eax
c001d270:	e8 e2 34 fe ff       	call   c0000757 <strcpy>
c001d275:	83 c4 10             	add    esp,0x10
c001d278:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d27c:	83 c0 0c             	add    eax,0xc
c001d27f:	83 ec 08             	sub    esp,0x8
c001d282:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d286:	50                   	push   eax
c001d287:	e8 cb 34 fe ff       	call   c0000757 <strcpy>
c001d28c:	83 c4 10             	add    esp,0x10
c001d28f:	83 ec 08             	sub    esp,0x8
c001d292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d296:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d29a:	e8 0d fe ff ff       	call   c001d0ac <Process::addArgs(char**)>
c001d29f:	83 c4 10             	add    esp,0x10
c001d2a2:	83 ec 08             	sub    esp,0x8
c001d2a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2ad:	e8 bc ee ff ff       	call   c001c16e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d2b2:	83 c4 10             	add    esp,0x10
c001d2b5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d2b9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d2bd:	83 f0 01             	xor    eax,0x1
c001d2c0:	88 c2                	mov    dl,al
c001d2c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c6:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d2cc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d2d1:	83 ec 08             	sub    esp,0x8
c001d2d4:	50                   	push   eax
c001d2d5:	68 28 b9 02 c0       	push   0xc002b928
c001d2da:	e8 08 56 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001d2df:	83 c4 10             	add    esp,0x10
c001d2e2:	90                   	nop
c001d2e3:	83 c4 14             	add    esp,0x14
c001d2e6:	5b                   	pop    ebx
c001d2e7:	5e                   	pop    esi
c001d2e8:	c3                   	ret    
c001d2e9:	90                   	nop

c001d2ea <Process::Process(bool, char const*, Process*, char**)>:
c001d2ea:	56                   	push   esi
c001d2eb:	53                   	push   ebx
c001d2ec:	83 ec 24             	sub    esp,0x24
c001d2ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2f3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d2f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d2fb:	05 0c 02 00 00       	add    eax,0x20c
c001d300:	bb 07 00 00 00       	mov    ebx,0x7
c001d305:	89 c6                	mov    esi,eax
c001d307:	85 db                	test   ebx,ebx
c001d309:	78 12                	js     c001d31d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d30b:	83 ec 0c             	sub    esp,0xc
c001d30e:	56                   	push   esi
c001d30f:	e8 ee b0 00 00       	call   c0028402 <ThreadControlBlock::ThreadControlBlock()>
c001d314:	83 c4 10             	add    esp,0x10
c001d317:	83 c6 63             	add    esi,0x63
c001d31a:	4b                   	dec    ebx
c001d31b:	eb ea                	jmp    c001d307 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d31d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d321:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d328:	83 ec 0c             	sub    esp,0xc
c001d32b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d32f:	e8 78 c9 ff ff       	call   c0019cac <Krnl::newProcessEnv(Process*)>
c001d334:	83 c4 10             	add    esp,0x10
c001d337:	89 c2                	mov    edx,eax
c001d339:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d33d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d343:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d347:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d350:	a1 50 d0 02 c0       	mov    eax,ds:0xc002d050
c001d355:	8d 50 01             	lea    edx,[eax+0x1]
c001d358:	89 15 50 d0 02 c0    	mov    DWORD PTR ds:0xc002d050,edx
c001d35e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d362:	89 02                	mov    DWORD PTR [edx],eax
c001d364:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d36c:	83 ec 0c             	sub    esp,0xc
c001d36f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d373:	e8 a0 22 ff ff       	call   c000f618 <malloc>
c001d378:	83 c4 10             	add    esp,0x10
c001d37b:	89 c3                	mov    ebx,eax
c001d37d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d382:	83 ec 08             	sub    esp,0x8
c001d385:	50                   	push   eax
c001d386:	53                   	push   ebx
c001d387:	e8 de 50 ff ff       	call   c001246a <VAS::VAS(bool)>
c001d38c:	83 c4 10             	add    esp,0x10
c001d38f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d393:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d399:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d39d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d3a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3ab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d3af:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d3b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3b9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3bf:	85 c0                	test   eax,eax
c001d3c1:	74 42                	je     c001d405 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d3c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3c7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3cd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d3d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3d7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d3dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3e1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3e7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d3ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3f1:	05 0c 01 00 00       	add    eax,0x10c
c001d3f6:	83 ec 08             	sub    esp,0x8
c001d3f9:	52                   	push   edx
c001d3fa:	50                   	push   eax
c001d3fb:	e8 57 33 fe ff       	call   c0000757 <strcpy>
c001d400:	83 c4 10             	add    esp,0x10
c001d403:	eb 63                	jmp    c001d468 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d405:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d40d:	83 ec 0c             	sub    esp,0xc
c001d410:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d414:	e8 ff 21 ff ff       	call   c000f618 <malloc>
c001d419:	83 c4 10             	add    esp,0x10
c001d41c:	89 c3                	mov    ebx,eax
c001d41e:	83 ec 08             	sub    esp,0x8
c001d421:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d425:	53                   	push   ebx
c001d426:	e8 09 3b ff ff       	call   c0010f34 <VgaText::VgaText(char const*)>
c001d42b:	83 c4 10             	add    esp,0x10
c001d42e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d432:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d438:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d43c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d442:	83 ec 0c             	sub    esp,0xc
c001d445:	50                   	push   eax
c001d446:	e8 dc 2e ff ff       	call   c0010327 <addToTerminalCycle(VgaText*)>
c001d44b:	83 c4 10             	add    esp,0x10
c001d44e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d452:	05 0c 01 00 00       	add    eax,0x10c
c001d457:	83 ec 08             	sub    esp,0x8
c001d45a:	68 2d b8 02 c0       	push   0xc002b82d
c001d45f:	50                   	push   eax
c001d460:	e8 f2 32 fe ff       	call   c0000757 <strcpy>
c001d465:	83 c4 10             	add    esp,0x10
c001d468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d46c:	83 c0 0c             	add    eax,0xc
c001d46f:	83 ec 08             	sub    esp,0x8
c001d472:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d476:	50                   	push   eax
c001d477:	e8 db 32 fe ff       	call   c0000757 <strcpy>
c001d47c:	83 c4 10             	add    esp,0x10
c001d47f:	83 ec 08             	sub    esp,0x8
c001d482:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d486:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d48a:	e8 1d fc ff ff       	call   c001d0ac <Process::addArgs(char**)>
c001d48f:	83 c4 10             	add    esp,0x10
c001d492:	90                   	nop
c001d493:	83 c4 24             	add    esp,0x24
c001d496:	5b                   	pop    ebx
c001d497:	5e                   	pop    esi
c001d498:	c3                   	ret    

c001d499 <disableIRQs()>:
c001d499:	fa                   	cli    
c001d49a:	ff 05 0c 10 03 c0    	inc    DWORD PTR ds:0xc003100c
c001d4a0:	c3                   	ret    

c001d4a1 <getIRQNestingLevel()>:
c001d4a1:	a1 0c 10 03 c0       	mov    eax,ds:0xc003100c
c001d4a6:	c3                   	ret    

c001d4a7 <enableIRQs()>:
c001d4a7:	a1 0c 10 03 c0       	mov    eax,ds:0xc003100c
c001d4ac:	48                   	dec    eax
c001d4ad:	a3 0c 10 03 c0       	mov    ds:0xc003100c,eax
c001d4b2:	75 01                	jne    c001d4b5 <enableIRQs()+0xe>
c001d4b4:	fb                   	sti    
c001d4b5:	c3                   	ret    

c001d4b6 <lockScheduler()>:
c001d4b6:	eb e1                	jmp    c001d499 <disableIRQs()>

c001d4b8 <unlockScheduler()>:
c001d4b8:	eb ed                	jmp    c001d4a7 <enableIRQs()>

c001d4ba <userModeEntryPoint(void*)>:
c001d4ba:	83 ec 0c             	sub    esp,0xc
c001d4bd:	e8 f6 ff ff ff       	call   c001d4b8 <unlockScheduler()>
c001d4c2:	fb                   	sti    
c001d4c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d4c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d4cb:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d4d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d4d5:	83 c4 0c             	add    esp,0xc
c001d4d8:	e9 4d 2e fe ff       	jmp    c000032a <goToUsermode>

c001d4dd <lockStuff()>:
c001d4dd:	e8 b7 ff ff ff       	call   c001d499 <disableIRQs()>
c001d4e2:	ff 05 08 10 03 c0    	inc    DWORD PTR ds:0xc0031008
c001d4e8:	c3                   	ret    

c001d4e9 <taskStartupFunction>:
c001d4e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d4ee:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d4f1:	c3                   	ret    

c001d4f2 <updateTimeUsed()>:
c001d4f2:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001d4f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d4fd:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d504:	74 50                	je     c001d556 <updateTimeUsed()+0x64>
c001d506:	57                   	push   edi
c001d507:	56                   	push   esi
c001d508:	53                   	push   ebx
c001d509:	0f 31                	rdtsc  
c001d50b:	89 c1                	mov    ecx,eax
c001d50d:	a3 48 10 03 c0       	mov    ds:0xc0031048,eax
c001d512:	2b 0d 38 10 03 c0    	sub    ecx,DWORD PTR ds:0xc0031038
c001d518:	89 d3                	mov    ebx,edx
c001d51a:	89 0d 40 10 03 c0    	mov    DWORD PTR ds:0xc0031040,ecx
c001d520:	1b 1d 3c 10 03 c0    	sbb    ebx,DWORD PTR ds:0xc003103c
c001d526:	a3 38 10 03 c0       	mov    ds:0xc0031038,eax
c001d52b:	89 1d 44 10 03 c0    	mov    DWORD PTR ds:0xc0031044,ebx
c001d531:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d536:	89 15 4c 10 03 c0    	mov    DWORD PTR ds:0xc003104c,edx
c001d53c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d53f:	89 15 3c 10 03 c0    	mov    DWORD PTR ds:0xc003103c,edx
c001d545:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d548:	01 f1                	add    ecx,esi
c001d54a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d54d:	11 fb                	adc    ebx,edi
c001d54f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d552:	5b                   	pop    ebx
c001d553:	5e                   	pop    esi
c001d554:	5f                   	pop    edi
c001d555:	c3                   	ret    
c001d556:	c3                   	ret    

c001d557 <switchToThread(ThreadControlBlock*)>:
c001d557:	53                   	push   ebx
c001d558:	83 ec 08             	sub    esp,0x8
c001d55b:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c001d560:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d564:	85 c0                	test   eax,eax
c001d566:	75 30                	jne    c001d598 <switchToThread(ThreadControlBlock*)+0x41>
c001d568:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d56b:	3c ff                	cmp    al,0xff
c001d56d:	74 25                	je     c001d594 <switchToThread(ThreadControlBlock*)+0x3d>
c001d56f:	0f b6 d0             	movzx  edx,al
c001d572:	b8 84 03 00 00       	mov    eax,0x384
c001d577:	29 d0                	sub    eax,edx
c001d579:	c1 e0 10             	shl    eax,0x10
c001d57c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d57f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d582:	e8 6b ff ff ff       	call   c001d4f2 <updateTimeUsed()>
c001d587:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d58b:	83 c4 08             	add    esp,0x8
c001d58e:	5b                   	pop    ebx
c001d58f:	e9 ce 2d fe ff       	jmp    c0000362 <switchToThreadASM>
c001d594:	31 c0                	xor    eax,eax
c001d596:	eb e7                	jmp    c001d57f <switchToThread(ThreadControlBlock*)+0x28>
c001d598:	c7 05 04 10 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031004,0x1
c001d5a2:	83 c4 08             	add    esp,0x8
c001d5a5:	5b                   	pop    ebx
c001d5a6:	c3                   	ret    
c001d5a7:	90                   	nop

c001d5a8 <Semaphore::Semaphore(int)>:
c001d5a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5b0:	89 10                	mov    DWORD PTR [eax],edx
c001d5b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5b6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d5c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d5d3:	90                   	nop
c001d5d4:	c3                   	ret    
c001d5d5:	90                   	nop

c001d5d6 <Mutex::Mutex()>:
c001d5d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5da:	6a 01                	push   0x1
c001d5dc:	50                   	push   eax
c001d5dd:	e8 c6 ff ff ff       	call   c001d5a8 <Semaphore::Semaphore(int)>
c001d5e2:	83 c4 08             	add    esp,0x8
c001d5e5:	90                   	nop
c001d5e6:	c3                   	ret    
c001d5e7:	90                   	nop

c001d5e8 <Process::createThread(void (*)(void*), void*, int)>:
c001d5e8:	55                   	push   ebp
c001d5e9:	31 c9                	xor    ecx,ecx
c001d5eb:	57                   	push   edi
c001d5ec:	56                   	push   esi
c001d5ed:	53                   	push   ebx
c001d5ee:	83 ec 1c             	sub    esp,0x1c
c001d5f1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5f5:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d5fc:	89 f2                	mov    edx,esi
c001d5fe:	0f b7 c2             	movzx  eax,dx
c001d601:	83 e2 01             	and    edx,0x1
c001d604:	74 14                	je     c001d61a <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d606:	d1 f8                	sar    eax,1
c001d608:	41                   	inc    ecx
c001d609:	89 c2                	mov    edx,eax
c001d60b:	83 f9 10             	cmp    ecx,0x10
c001d60e:	75 ee                	jne    c001d5fe <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d610:	83 c4 1c             	add    esp,0x1c
c001d613:	31 c0                	xor    eax,eax
c001d615:	5b                   	pop    ebx
c001d616:	5e                   	pop    esi
c001d617:	5f                   	pop    edi
c001d618:	5d                   	pop    ebp
c001d619:	c3                   	ret    
c001d61a:	83 ec 08             	sub    esp,0x8
c001d61d:	b8 01 00 00 00       	mov    eax,0x1
c001d622:	d3 e0                	shl    eax,cl
c001d624:	09 c6                	or     esi,eax
c001d626:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d62c:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d633:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d636:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d639:	01 ce                	add    esi,ecx
c001d63b:	89 f0                	mov    eax,esi
c001d63d:	c1 e0 05             	shl    eax,0x5
c001d640:	01 c6                	add    esi,eax
c001d642:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d645:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d64b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d651:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d655:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d65b:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d661:	89 ca                	mov    edx,ecx
c001d663:	f7 da                	neg    edx
c001d665:	c1 e2 15             	shl    edx,0x15
c001d668:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d66e:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d674:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d678:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d682:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d688:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d68c:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d692:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d69c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d6a6:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d6ad:	50                   	push   eax
c001d6ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6b2:	68 28 10 03 c0       	push   0xc0031028
c001d6b7:	e8 d4 ab 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6bc:	83 c4 10             	add    esp,0x10
c001d6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6c3:	83 c4 1c             	add    esp,0x1c
c001d6c6:	5b                   	pop    ebx
c001d6c7:	5e                   	pop    esi
c001d6c8:	5f                   	pop    edi
c001d6c9:	5d                   	pop    ebp
c001d6ca:	c3                   	ret    
c001d6cb:	90                   	nop

c001d6cc <Process::createUserThread()>:
c001d6cc:	83 ec 0c             	sub    esp,0xc
c001d6cf:	68 80 00 00 00       	push   0x80
c001d6d4:	6a 00                	push   0x0
c001d6d6:	68 ba d4 01 c0       	push   0xc001d4ba
c001d6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6df:	e8 04 ff ff ff       	call   c001d5e8 <Process::createThread(void (*)(void*), void*, int)>
c001d6e4:	83 c4 1c             	add    esp,0x1c
c001d6e7:	c3                   	ret    

c001d6e8 <setupMultitasking(void (*)())>:
c001d6e8:	56                   	push   esi
c001d6e9:	53                   	push   ebx
c001d6ea:	53                   	push   ebx
c001d6eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6ef:	eb 10                	jmp    c001d701 <setupMultitasking(void (*)())+0x19>
c001d6f1:	83 ec 0c             	sub    esp,0xc
c001d6f4:	68 28 10 03 c0       	push   0xc0031028
c001d6f9:	e8 e4 aa 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d6fe:	83 c4 10             	add    esp,0x10
c001d701:	83 ec 0c             	sub    esp,0xc
c001d704:	68 28 10 03 c0       	push   0xc0031028
c001d709:	e8 b8 aa 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d70e:	83 c4 10             	add    esp,0x10
c001d711:	84 c0                	test   al,al
c001d713:	74 dc                	je     c001d6f1 <setupMultitasking(void (*)())+0x9>
c001d715:	83 ec 0c             	sub    esp,0xc
c001d718:	68 3f 07 00 00       	push   0x73f
c001d71d:	e8 f6 1e ff ff       	call   c000f618 <malloc>
c001d722:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d729:	89 c3                	mov    ebx,eax
c001d72b:	6a 00                	push   0x0
c001d72d:	68 31 b8 02 c0       	push   0xc002b831
c001d732:	6a 01                	push   0x1
c001d734:	50                   	push   eax
c001d735:	e8 b0 fb ff ff       	call   c001d2ea <Process::Process(bool, char const*, Process*, char**)>
c001d73a:	83 c4 18             	add    esp,0x18
c001d73d:	89 1d 34 10 03 c0    	mov    DWORD PTR ds:0xc0031034,ebx
c001d743:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d749:	68 50 b9 02 c0       	push   0xc002b950
c001d74e:	e8 94 51 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001d753:	58                   	pop    eax
c001d754:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d75a:	e8 4a 33 ff ff       	call   c0010aa9 <setActiveTerminal(VgaText*)>
c001d75f:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d767:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d76d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d770:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d77a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d780:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d786:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d790:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d79a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d7a4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d7aa:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d7b0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d7ba:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d7c0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d7ca:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d7d0:	5a                   	pop    edx
c001d7d1:	59                   	pop    ecx
c001d7d2:	68 2d b8 02 c0       	push   0xc002b82d
c001d7d7:	50                   	push   eax
c001d7d8:	e8 7a 2f fe ff       	call   c0000757 <strcpy>
c001d7dd:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d7e4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d7e8:	83 c4 14             	add    esp,0x14
c001d7eb:	5b                   	pop    ebx
c001d7ec:	5e                   	pop    esi
c001d7ed:	e9 62 2b fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d7f2 <schedule()>:
c001d7f2:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c001d7f7:	85 c0                	test   eax,eax
c001d7f9:	74 0b                	je     c001d806 <schedule()+0x14>
c001d7fb:	c7 05 04 10 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031004,0x1
c001d805:	c3                   	ret    
c001d806:	53                   	push   ebx
c001d807:	83 ec 14             	sub    esp,0x14
c001d80a:	68 28 10 03 c0       	push   0xc0031028
c001d80f:	e8 b2 a9 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d814:	83 c4 10             	add    esp,0x10
c001d817:	84 c0                	test   al,al
c001d819:	75 38                	jne    c001d853 <schedule()+0x61>
c001d81b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d820:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d823:	4a                   	dec    edx
c001d824:	74 32                	je     c001d858 <schedule()+0x66>
c001d826:	83 ec 0c             	sub    esp,0xc
c001d829:	68 28 10 03 c0       	push   0xc0031028
c001d82e:	e8 8b a9 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d833:	c7 04 24 28 10 03 c0 	mov    DWORD PTR [esp],0xc0031028
c001d83a:	89 c3                	mov    ebx,eax
c001d83c:	e8 a1 a9 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d841:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d848:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d84b:	e8 07 fd ff ff       	call   c001d557 <switchToThread(ThreadControlBlock*)>
c001d850:	83 c4 10             	add    esp,0x10
c001d853:	83 c4 08             	add    esp,0x8
c001d856:	5b                   	pop    ebx
c001d857:	c3                   	ret    
c001d858:	83 ec 08             	sub    esp,0x8
c001d85b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d862:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d868:	68 28 10 03 c0       	push   0xc0031028
c001d86d:	e8 1e aa 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d872:	83 c4 10             	add    esp,0x10
c001d875:	eb af                	jmp    c001d826 <schedule()+0x34>

c001d877 <unlockStuff()>:
c001d877:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c001d87c:	48                   	dec    eax
c001d87d:	a3 08 10 03 c0       	mov    ds:0xc0031008,eax
c001d882:	75 09                	jne    c001d88d <unlockStuff()+0x16>
c001d884:	a1 04 10 03 c0       	mov    eax,ds:0xc0031004
c001d889:	85 c0                	test   eax,eax
c001d88b:	75 05                	jne    c001d892 <unlockStuff()+0x1b>
c001d88d:	e9 15 fc ff ff       	jmp    c001d4a7 <enableIRQs()>
c001d892:	83 ec 0c             	sub    esp,0xc
c001d895:	c7 05 04 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031004,0x0
c001d89f:	e8 4e ff ff ff       	call   c001d7f2 <schedule()>
c001d8a4:	83 c4 0c             	add    esp,0xc
c001d8a7:	e9 fb fb ff ff       	jmp    c001d4a7 <enableIRQs()>

c001d8ac <Semaphore::tryAcquire()>:
c001d8ac:	83 ec 0c             	sub    esp,0xc
c001d8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8b3:	e8 25 fc ff ff       	call   c001d4dd <lockStuff()>
c001d8b8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d8bb:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d8bd:	7c 0b                	jl     c001d8ca <Semaphore::tryAcquire()+0x1e>
c001d8bf:	e8 b3 ff ff ff       	call   c001d877 <unlockStuff()>
c001d8c4:	31 c0                	xor    eax,eax
c001d8c6:	83 c4 0c             	add    esp,0xc
c001d8c9:	c3                   	ret    
c001d8ca:	42                   	inc    edx
c001d8cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d8ce:	e8 a4 ff ff ff       	call   c001d877 <unlockStuff()>
c001d8d3:	b0 01                	mov    al,0x1
c001d8d5:	83 c4 0c             	add    esp,0xc
c001d8d8:	c3                   	ret    
c001d8d9:	90                   	nop

c001d8da <Semaphore::assertLocked(char const*)>:
c001d8da:	83 ec 0c             	sub    esp,0xc
c001d8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d8e5:	e8 f3 fb ff ff       	call   c001d4dd <lockStuff()>
c001d8ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d8ec:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d8ef:	7c 05                	jl     c001d8f6 <Semaphore::assertLocked(char const*)+0x1c>
c001d8f1:	83 c4 0c             	add    esp,0xc
c001d8f4:	eb 81                	jmp    c001d877 <unlockStuff()>
c001d8f6:	83 ec 0c             	sub    esp,0xc
c001d8f9:	52                   	push   edx
c001d8fa:	e8 5c c5 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001d8ff:	83 c4 10             	add    esp,0x10
c001d902:	83 c4 0c             	add    esp,0xc
c001d905:	e9 6d ff ff ff       	jmp    c001d877 <unlockStuff()>

c001d90a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d90a:	83 ec 0c             	sub    esp,0xc
c001d90d:	e8 8f fb ff ff       	call   c001d4a1 <getIRQNestingLevel()>
c001d912:	83 ec 08             	sub    esp,0x8
c001d915:	50                   	push   eax
c001d916:	68 84 b9 02 c0       	push   0xc002b984
c001d91b:	e8 c7 4f ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001d920:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d924:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d929:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d92c:	e8 c1 fe ff ff       	call   c001d7f2 <schedule()>
c001d931:	e8 82 fb ff ff       	call   c001d4b8 <unlockScheduler()>
c001d936:	e8 66 fb ff ff       	call   c001d4a1 <getIRQNestingLevel()>
c001d93b:	5a                   	pop    edx
c001d93c:	59                   	pop    ecx
c001d93d:	50                   	push   eax
c001d93e:	68 b8 b9 02 c0       	push   0xc002b9b8
c001d943:	e8 9f 4f ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001d948:	83 c4 1c             	add    esp,0x1c
c001d94b:	c3                   	ret    

c001d94c <blockTask(TaskState)>:
c001d94c:	83 ec 0c             	sub    esp,0xc
c001d94f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d953:	e8 5e fb ff ff       	call   c001d4b6 <lockScheduler()>
c001d958:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d95d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d960:	e8 8d fe ff ff       	call   c001d7f2 <schedule()>
c001d965:	83 c4 0c             	add    esp,0xc
c001d968:	e9 4b fb ff ff       	jmp    c001d4b8 <unlockScheduler()>

c001d96d <waitTask(int, int*, int)>:
c001d96d:	83 ec 18             	sub    esp,0x18
c001d970:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d975:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d979:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d97c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d980:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d985:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d988:	6a 07                	push   0x7
c001d98a:	e8 bd ff ff ff       	call   c001d94c <blockTask(TaskState)>
c001d98f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d994:	83 c4 10             	add    esp,0x10
c001d997:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d99a:	85 d2                	test   edx,edx
c001d99c:	74 0a                	je     c001d9a8 <waitTask(int, int*, int)+0x3b>
c001d99e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d9a1:	89 02                	mov    DWORD PTR [edx],eax
c001d9a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9a8:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d9ab:	83 c4 0c             	add    esp,0xc
c001d9ae:	c3                   	ret    

c001d9af <nanoSleepUntil(unsigned long long)>:
c001d9af:	83 ec 0c             	sub    esp,0xc
c001d9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d9ba:	3b 05 50 e1 02 c0    	cmp    eax,DWORD PTR ds:0xc002e150
c001d9c0:	89 d1                	mov    ecx,edx
c001d9c2:	1b 0d 54 e1 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e154
c001d9c8:	73 04                	jae    c001d9ce <nanoSleepUntil(unsigned long long)+0x1f>
c001d9ca:	83 c4 0c             	add    esp,0xc
c001d9cd:	c3                   	ret    
c001d9ce:	e8 0a fb ff ff       	call   c001d4dd <lockStuff()>
c001d9d3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d9d9:	83 ec 08             	sub    esp,0x8
c001d9dc:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d9df:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d9e2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d9e8:	68 1c 10 03 c0       	push   0xc003101c
c001d9ed:	e8 9e a8 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d9f2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d9f9:	e8 4e ff ff ff       	call   c001d94c <blockTask(TaskState)>
c001d9fe:	83 c4 1c             	add    esp,0x1c
c001da01:	e9 71 fe ff ff       	jmp    c001d877 <unlockStuff()>

c001da06 <nanoSleep(unsigned long long)>:
c001da06:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c001da0b:	8b 15 54 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e154
c001da11:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001da15:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001da19:	eb 94                	jmp    c001d9af <nanoSleepUntil(unsigned long long)>

c001da1b <sleep(unsigned long long)>:
c001da1b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001da23:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001da28:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001da2c:	01 ca                	add    edx,ecx
c001da2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001da36:	eb ce                	jmp    c001da06 <nanoSleep(unsigned long long)>

c001da38 <Semaphore::acquire()>:
c001da38:	83 ec 0c             	sub    esp,0xc
c001da3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da3f:	e8 99 fa ff ff       	call   c001d4dd <lockStuff()>
c001da44:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001da47:	3b 10                	cmp    edx,DWORD PTR [eax]
c001da49:	7d 0c                	jge    c001da57 <Semaphore::acquire()+0x1f>
c001da4b:	42                   	inc    edx
c001da4c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001da4f:	83 c4 0c             	add    esp,0xc
c001da52:	e9 20 fe ff ff       	jmp    c001d877 <unlockStuff()>
c001da57:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001da5d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001da64:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001da67:	85 d2                	test   edx,edx
c001da69:	74 2a                	je     c001da95 <Semaphore::acquire()+0x5d>
c001da6b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001da6e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001da74:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001da77:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001da7d:	83 ec 0c             	sub    esp,0xc
c001da80:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001da83:	6a 05                	push   0x5
c001da85:	e8 c2 fe ff ff       	call   c001d94c <blockTask(TaskState)>
c001da8a:	83 c4 10             	add    esp,0x10
c001da8d:	83 c4 0c             	add    esp,0xc
c001da90:	e9 e2 fd ff ff       	jmp    c001d877 <unlockStuff()>
c001da95:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001da9b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001da9e:	eb d7                	jmp    c001da77 <Semaphore::acquire()+0x3f>

c001daa0 <taskReturned>:
c001daa0:	83 ec 18             	sub    esp,0x18
c001daa3:	68 ec b9 02 c0       	push   0xc002b9ec
c001daa8:	e8 ae c3 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001daad:	83 c4 10             	add    esp,0x10
c001dab0:	83 ec 0c             	sub    esp,0xc
c001dab3:	6a 02                	push   0x2
c001dab5:	e8 92 fe ff ff       	call   c001d94c <blockTask(TaskState)>
c001daba:	e8 f7 f9 ff ff       	call   c001d4b6 <lockScheduler()>
c001dabf:	e8 2e fd ff ff       	call   c001d7f2 <schedule()>
c001dac4:	e8 ef f9 ff ff       	call   c001d4b8 <unlockScheduler()>
c001dac9:	83 c4 10             	add    esp,0x10
c001dacc:	eb e2                	jmp    c001dab0 <taskReturned+0x10>

c001dace <unblockTask(ThreadControlBlock*)>:
c001dace:	53                   	push   ebx
c001dacf:	83 ec 08             	sub    esp,0x8
c001dad2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dad6:	e8 db f9 ff ff       	call   c001d4b6 <lockScheduler()>
c001dadb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dade:	85 c0                	test   eax,eax
c001dae0:	74 5c                	je     c001db3e <unblockTask(ThreadControlBlock*)+0x70>
c001dae2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dae5:	48                   	dec    eax
c001dae6:	74 31                	je     c001db19 <unblockTask(ThreadControlBlock*)+0x4b>
c001dae8:	83 ec 0c             	sub    esp,0xc
c001daeb:	68 28 10 03 c0       	push   0xc0031028
c001daf0:	e8 c9 a6 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001daf5:	83 c4 10             	add    esp,0x10
c001daf8:	85 c0                	test   eax,eax
c001dafa:	75 17                	jne    c001db13 <unblockTask(ThreadControlBlock*)+0x45>
c001dafc:	eb 65                	jmp    c001db63 <unblockTask(ThreadControlBlock*)+0x95>
c001dafe:	83 ec 08             	sub    esp,0x8
c001db01:	50                   	push   eax
c001db02:	68 28 10 03 c0       	push   0xc0031028
c001db07:	e8 8c a9 00 00       	call   c0028498 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001db0c:	83 c4 10             	add    esp,0x10
c001db0f:	85 c0                	test   eax,eax
c001db11:	74 50                	je     c001db63 <unblockTask(ThreadControlBlock*)+0x95>
c001db13:	39 c3                	cmp    ebx,eax
c001db15:	75 e7                	jne    c001dafe <unblockTask(ThreadControlBlock*)+0x30>
c001db17:	eb 1c                	jmp    c001db35 <unblockTask(ThreadControlBlock*)+0x67>
c001db19:	83 ec 0c             	sub    esp,0xc
c001db1c:	68 dc ba 02 c0       	push   0xc002badc
c001db21:	e8 c1 4d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001db26:	c7 04 24 68 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba68
c001db2d:	e8 b5 4d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001db32:	83 c4 10             	add    esp,0x10
c001db35:	83 c4 08             	add    esp,0x8
c001db38:	5b                   	pop    ebx
c001db39:	e9 7a f9 ff ff       	jmp    c001d4b8 <unlockScheduler()>
c001db3e:	83 ec 0c             	sub    esp,0xc
c001db41:	68 20 ba 02 c0       	push   0xc002ba20
c001db46:	e8 9c 4d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001db4b:	c7 04 24 68 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba68
c001db52:	e8 90 4d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001db57:	83 c4 10             	add    esp,0x10
c001db5a:	83 c4 08             	add    esp,0x8
c001db5d:	5b                   	pop    ebx
c001db5e:	e9 55 f9 ff ff       	jmp    c001d4b8 <unlockScheduler()>
c001db63:	83 ec 08             	sub    esp,0x8
c001db66:	53                   	push   ebx
c001db67:	68 28 10 03 c0       	push   0xc0031028
c001db6c:	e8 1f a7 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db71:	83 c4 10             	add    esp,0x10
c001db74:	83 c4 08             	add    esp,0x8
c001db77:	5b                   	pop    ebx
c001db78:	e9 3b f9 ff ff       	jmp    c001d4b8 <unlockScheduler()>

c001db7d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001db7d:	55                   	push   ebp
c001db7e:	57                   	push   edi
c001db7f:	56                   	push   esi
c001db80:	53                   	push   ebx
c001db81:	83 ec 1c             	sub    esp,0x1c
c001db84:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db88:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001db8b:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001db91:	85 ff                	test   edi,edi
c001db93:	7e 20                	jle    c001dbb5 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001db95:	31 f6                	xor    esi,esi
c001db97:	83 ec 0c             	sub    esp,0xc
c001db9a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dba1:	46                   	inc    esi
c001dba2:	e8 81 1a ff ff       	call   c000f628 <free>
c001dba7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dbaa:	83 c4 10             	add    esp,0x10
c001dbad:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dbb3:	7f e2                	jg     c001db97 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dbb5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbbf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dbc4:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dbc7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dbca:	d3 c0                	rol    eax,cl
c001dbcc:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dbd3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dbd6:	89 f7                	mov    edi,esi
c001dbd8:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dbe0:	0f 85 74 01 00 00    	jne    c001dd5a <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001dbe6:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dbec:	85 ed                	test   ebp,ebp
c001dbee:	74 1b                	je     c001dc0b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dbf0:	83 ec 0c             	sub    esp,0xc
c001dbf3:	55                   	push   ebp
c001dbf4:	e8 cf bf ff ff       	call   c0019bc8 <EnvVarContainer::~EnvVarContainer()>
c001dbf9:	59                   	pop    ecx
c001dbfa:	5e                   	pop    esi
c001dbfb:	6a 0c                	push   0xc
c001dbfd:	55                   	push   ebp
c001dbfe:	e8 04 4c ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c001dc03:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dc06:	83 c4 10             	add    esp,0x10
c001dc09:	89 f7                	mov    edi,esi
c001dc0b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dc11:	85 c0                	test   eax,eax
c001dc13:	0f 84 aa 00 00 00    	je     c001dcc3 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dc19:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001dc1c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dc20:	31 c9                	xor    ecx,ecx
c001dc22:	eb 10                	jmp    c001dc34 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001dc24:	41                   	inc    ecx
c001dc25:	83 f9 10             	cmp    ecx,0x10
c001dc28:	0f 84 95 00 00 00    	je     c001dcc3 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dc2e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dc34:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dc3b:	d3 fa                	sar    edx,cl
c001dc3d:	83 e2 01             	and    edx,0x1
c001dc40:	74 e2                	je     c001dc24 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dc42:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dc45:	01 ca                	add    edx,ecx
c001dc47:	89 d5                	mov    ebp,edx
c001dc49:	c1 e5 05             	shl    ebp,0x5
c001dc4c:	01 ea                	add    edx,ebp
c001dc4e:	01 d0                	add    eax,edx
c001dc50:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dc56:	83 fd 07             	cmp    ebp,0x7
c001dc59:	75 c9                	jne    c001dc24 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dc5b:	05 40 02 00 00       	add    eax,0x240
c001dc60:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dc63:	83 fd ff             	cmp    ebp,0xffffffff
c001dc66:	0f 8c 08 01 00 00    	jl     c001dd74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001dc6c:	0f 84 b9 01 00 00    	je     c001de2b <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001dc72:	85 ed                	test   ebp,ebp
c001dc74:	0f 84 a0 01 00 00    	je     c001de1a <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001dc7a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dc7c:	75 a6                	jne    c001dc24 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dc7e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dc84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dc88:	01 d0                	add    eax,edx
c001dc8a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dc8e:	83 ec 0c             	sub    esp,0xc
c001dc91:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dc97:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dc9a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dca0:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001dca7:	50                   	push   eax
c001dca8:	e8 21 fe ff ff       	call   c001dace <unblockTask(ThreadControlBlock*)>
c001dcad:	83 c4 10             	add    esp,0x10
c001dcb0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dcb3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcb7:	89 f7                	mov    edi,esi
c001dcb9:	41                   	inc    ecx
c001dcba:	83 f9 10             	cmp    ecx,0x10
c001dcbd:	0f 85 6b ff ff ff    	jne    c001dc2e <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001dcc3:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001dcc9:	85 c0                	test   eax,eax
c001dccb:	74 5d                	je     c001dd2a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dccd:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001dcd3:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001dcd9:	74 4f                	je     c001dd2a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dcdb:	83 ec 0c             	sub    esp,0xc
c001dcde:	68 28 10 03 c0       	push   0xc0031028
c001dce3:	e8 d6 a4 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dce8:	c7 04 24 28 10 03 c0 	mov    DWORD PTR [esp],0xc0031028
c001dcef:	89 c7                	mov    edi,eax
c001dcf1:	e8 d0 a4 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dcf6:	83 c4 10             	add    esp,0x10
c001dcf9:	84 c0                	test   al,al
c001dcfb:	0f 84 e4 00 00 00    	je     c001dde5 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001dd01:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd04:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd0a:	85 d2                	test   edx,edx
c001dd0c:	74 0f                	je     c001dd1d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001dd0e:	83 ec 0c             	sub    esp,0xc
c001dd11:	8b 02                	mov    eax,DWORD PTR [edx]
c001dd13:	52                   	push   edx
c001dd14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd17:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd1a:	83 c4 10             	add    esp,0x10
c001dd1d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001dd27:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001dd2a:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001dd30:	85 db                	test   ebx,ebx
c001dd32:	74 16                	je     c001dd4a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dd34:	83 ec 0c             	sub    esp,0xc
c001dd37:	53                   	push   ebx
c001dd38:	e8 19 41 ff ff       	call   c0011e56 <VAS::~VAS()>
c001dd3d:	58                   	pop    eax
c001dd3e:	5a                   	pop    edx
c001dd3f:	6a 10                	push   0x10
c001dd41:	53                   	push   ebx
c001dd42:	e8 c0 4a ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c001dd47:	83 c4 10             	add    esp,0x10
c001dd4a:	83 ec 0c             	sub    esp,0xc
c001dd4d:	68 38 b8 02 c0       	push   0xc002b838
c001dd52:	e8 90 4b ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001dd57:	83 c4 10             	add    esp,0x10
c001dd5a:	83 ec 08             	sub    esp,0x8
c001dd5d:	68 3f 07 00 00       	push   0x73f
c001dd62:	68 46 b8 02 c0       	push   0xc002b846
c001dd67:	e8 7b 4b ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001dd6c:	83 c4 2c             	add    esp,0x2c
c001dd6f:	5b                   	pop    ebx
c001dd70:	5e                   	pop    esi
c001dd71:	5f                   	pop    edi
c001dd72:	5d                   	pop    ebp
c001dd73:	c3                   	ret    
c001dd74:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dd78:	83 ec 0c             	sub    esp,0xc
c001dd7b:	68 20 bb 02 c0       	push   0xc002bb20
c001dd80:	e8 d6 c0 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001dd85:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dd88:	83 c4 10             	add    esp,0x10
c001dd8b:	89 f7                	mov    edi,esi
c001dd8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd91:	e9 8e fe ff ff       	jmp    c001dc24 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dd96:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd9c:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001dda2:	75 1c                	jne    c001ddc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001dda4:	83 ec 0c             	sub    esp,0xc
c001dda7:	68 88 bb 02 c0       	push   0xc002bb88
c001ddac:	e8 36 4b ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ddb1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ddb8:	e8 8f fb ff ff       	call   c001d94c <blockTask(TaskState)>
c001ddbd:	83 c4 10             	add    esp,0x10
c001ddc0:	83 ec 08             	sub    esp,0x8
c001ddc3:	56                   	push   esi
c001ddc4:	68 28 10 03 c0       	push   0xc0031028
c001ddc9:	e8 c2 a4 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddce:	c7 04 24 28 10 03 c0 	mov    DWORD PTR [esp],0xc0031028
c001ddd5:	e8 e4 a3 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddda:	83 c4 10             	add    esp,0x10
c001dddd:	39 f8                	cmp    eax,edi
c001dddf:	0f 84 1c ff ff ff    	je     c001dd01 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001dde5:	83 ec 0c             	sub    esp,0xc
c001dde8:	68 28 10 03 c0       	push   0xc0031028
c001dded:	e8 cc a3 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddf2:	c7 04 24 28 10 03 c0 	mov    DWORD PTR [esp],0xc0031028
c001ddf9:	89 c6                	mov    esi,eax
c001ddfb:	e8 e2 a3 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de00:	83 c4 10             	add    esp,0x10
c001de03:	39 f3                	cmp    ebx,esi
c001de05:	74 b9                	je     c001ddc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001de07:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001de0a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de0d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001de13:	75 ab                	jne    c001ddc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001de15:	e9 7c ff ff ff       	jmp    c001dd96 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001de1a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de1e:	83 ec 0c             	sub    esp,0xc
c001de21:	68 54 bb 02 c0       	push   0xc002bb54
c001de26:	e9 55 ff ff ff       	jmp    c001dd80 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001de2b:	8b 36                	mov    esi,DWORD PTR [esi]
c001de2d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de31:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001de34:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de37:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001de3d:	01 d7                	add    edi,edx
c001de3f:	89 f8                	mov    eax,edi
c001de41:	e9 44 fe ff ff       	jmp    c001dc8a <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001de46 <cleanerTaskFunction(void*)>:
c001de46:	53                   	push   ebx
c001de47:	83 ec 08             	sub    esp,0x8
c001de4a:	e8 69 f6 ff ff       	call   c001d4b8 <unlockScheduler()>
c001de4f:	e8 62 f6 ff ff       	call   c001d4b6 <lockScheduler()>
c001de54:	80 3d ec 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fec,0x0
c001de5b:	0f 85 8e 00 00 00    	jne    c001deef <cleanerTaskFunction(void*)+0xa9>
c001de61:	83 ec 0c             	sub    esp,0xc
c001de64:	6a 02                	push   0x2
c001de66:	e8 9f fa ff ff       	call   c001d90a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001de6b:	83 c4 10             	add    esp,0x10
c001de6e:	c6 05 ec 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030fec,0x0
c001de75:	e8 63 f6 ff ff       	call   c001d4dd <lockStuff()>
c001de7a:	e8 37 f6 ff ff       	call   c001d4b6 <lockScheduler()>
c001de7f:	83 ec 0c             	sub    esp,0xc
c001de82:	68 10 10 03 c0       	push   0xc0031010
c001de87:	e8 3a a3 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de8c:	83 c4 10             	add    esp,0x10
c001de8f:	84 c0                	test   al,al
c001de91:	75 40                	jne    c001ded3 <cleanerTaskFunction(void*)+0x8d>
c001de93:	83 ec 0c             	sub    esp,0xc
c001de96:	68 10 10 03 c0       	push   0xc0031010
c001de9b:	e8 1e a3 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dea0:	c7 04 24 10 10 03 c0 	mov    DWORD PTR [esp],0xc0031010
c001dea7:	89 c3                	mov    ebx,eax
c001dea9:	e8 34 a3 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001deae:	c7 04 24 5c b8 02 c0 	mov    DWORD PTR [esp],0xc002b85c
c001deb5:	e8 2d 4a ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001deba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001debd:	e8 bb fc ff ff       	call   c001db7d <cleanupTerminatedTask(ThreadControlBlock*)>
c001dec2:	c7 04 24 75 b8 02 c0 	mov    DWORD PTR [esp],0xc002b875
c001dec9:	e8 19 4a ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001dece:	83 c4 10             	add    esp,0x10
c001ded1:	eb ac                	jmp    c001de7f <cleanerTaskFunction(void*)+0x39>
c001ded3:	e8 e0 f5 ff ff       	call   c001d4b8 <unlockScheduler()>
c001ded8:	e8 9a f9 ff ff       	call   c001d877 <unlockStuff()>
c001dedd:	e8 d4 f5 ff ff       	call   c001d4b6 <lockScheduler()>
c001dee2:	80 3d ec 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fec,0x0
c001dee9:	0f 84 72 ff ff ff    	je     c001de61 <cleanerTaskFunction(void*)+0x1b>
c001deef:	e8 c4 f5 ff ff       	call   c001d4b8 <unlockScheduler()>
c001def4:	e9 75 ff ff ff       	jmp    c001de6e <cleanerTaskFunction(void*)+0x28>

c001def9 <terminateTask(int)>:
c001def9:	83 ec 14             	sub    esp,0x14
c001defc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df01:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001df04:	83 c0 0c             	add    eax,0xc
c001df07:	50                   	push   eax
c001df08:	68 b0 bb 02 c0       	push   0xc002bbb0
c001df0d:	e8 d5 49 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001df12:	e8 c6 f5 ff ff       	call   c001d4dd <lockStuff()>
c001df17:	e8 9a f5 ff ff       	call   c001d4b6 <lockScheduler()>
c001df1c:	c7 04 24 88 b8 02 c0 	mov    DWORD PTR [esp],0xc002b888
c001df23:	e8 bf 49 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001df28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df31:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001df34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df39:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001df3c:	5a                   	pop    edx
c001df3d:	59                   	pop    ecx
c001df3e:	50                   	push   eax
c001df3f:	68 10 10 03 c0       	push   0xc0031010
c001df44:	e8 47 a3 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df4e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001df55:	c7 04 24 a2 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8a2
c001df5c:	e8 86 49 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001df61:	83 c4 10             	add    esp,0x10
c001df64:	a1 e8 0f 03 c0       	mov    eax,ds:0xc0030fe8
c001df69:	85 c0                	test   eax,eax
c001df6b:	74 5a                	je     c001dfc7 <terminateTask(int)+0xce>
c001df6d:	83 ec 0c             	sub    esp,0xc
c001df70:	68 bc b8 02 c0       	push   0xc002b8bc
c001df75:	e8 6d 49 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001df7a:	58                   	pop    eax
c001df7b:	c6 05 ec 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fec,0x1
c001df82:	ff 35 e8 0f 03 c0    	push   DWORD PTR ds:0xc0030fe8
c001df88:	e8 41 fb ff ff       	call   c001dace <unblockTask(ThreadControlBlock*)>
c001df8d:	c7 04 24 d6 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8d6
c001df94:	e8 4e 49 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001df99:	83 c4 10             	add    esp,0x10
c001df9c:	e8 17 f5 ff ff       	call   c001d4b8 <unlockScheduler()>
c001dfa1:	e8 d1 f8 ff ff       	call   c001d877 <unlockStuff()>
c001dfa6:	83 ec 0c             	sub    esp,0xc
c001dfa9:	68 0e b9 02 c0       	push   0xc002b90e
c001dfae:	e8 34 49 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001dfb3:	83 c4 10             	add    esp,0x10
c001dfb6:	e8 fb f4 ff ff       	call   c001d4b6 <lockScheduler()>
c001dfbb:	e8 32 f8 ff ff       	call   c001d7f2 <schedule()>
c001dfc0:	e8 f3 f4 ff ff       	call   c001d4b8 <unlockScheduler()>
c001dfc5:	eb ef                	jmp    c001dfb6 <terminateTask(int)+0xbd>
c001dfc7:	83 ec 0c             	sub    esp,0xc
c001dfca:	68 f0 b8 02 c0       	push   0xc002b8f0
c001dfcf:	e8 13 49 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001dfd4:	83 c4 10             	add    esp,0x10
c001dfd7:	eb c3                	jmp    c001df9c <terminateTask(int)+0xa3>

c001dfd9 <Thr::terminateFromIRQ(int)>:
c001dfd9:	83 ec 18             	sub    esp,0x18
c001dfdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfe0:	e8 14 ff ff ff       	call   c001def9 <terminateTask(int)>
c001dfe5:	90                   	nop

c001dfe6 <Semaphore::release()>:
c001dfe6:	83 ec 0c             	sub    esp,0xc
c001dfe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfed:	e8 eb f4 ff ff       	call   c001d4dd <lockStuff()>
c001dff2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dff5:	85 d2                	test   edx,edx
c001dff7:	74 1a                	je     c001e013 <Semaphore::release()+0x2d>
c001dff9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001dffc:	83 ec 0c             	sub    esp,0xc
c001dfff:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e002:	52                   	push   edx
c001e003:	e8 c6 fa ff ff       	call   c001dace <unblockTask(ThreadControlBlock*)>
c001e008:	83 c4 10             	add    esp,0x10
c001e00b:	83 c4 0c             	add    esp,0xc
c001e00e:	e9 64 f8 ff ff       	jmp    c001d877 <unlockStuff()>
c001e013:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e016:	83 c4 0c             	add    esp,0xc
c001e019:	e9 59 f8 ff ff       	jmp    c001d877 <unlockStuff()>

c001e01e <__static_initialization_and_destruction_0(int, int)>:
c001e01e:	83 ec 0c             	sub    esp,0xc
c001e021:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e026:	0f 85 88 00 00 00    	jne    c001e0b4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e02c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e034:	75 7e                	jne    c001e0b4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e036:	83 ec 0c             	sub    esp,0xc
c001e039:	68 28 10 03 c0       	push   0xc0031028
c001e03e:	e8 fd a3 00 00       	call   c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e043:	83 c4 10             	add    esp,0x10
c001e046:	83 ec 04             	sub    esp,0x4
c001e049:	68 ec c9 02 c0       	push   0xc002c9ec
c001e04e:	68 28 10 03 c0       	push   0xc0031028
c001e053:	68 00 84 02 c0       	push   0xc0028400
c001e058:	e8 24 47 ff ff       	call   c0012781 <__cxa_atexit>
c001e05d:	83 c4 10             	add    esp,0x10
c001e060:	83 ec 0c             	sub    esp,0xc
c001e063:	68 1c 10 03 c0       	push   0xc003101c
c001e068:	e8 d3 a3 00 00       	call   c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e06d:	83 c4 10             	add    esp,0x10
c001e070:	83 ec 04             	sub    esp,0x4
c001e073:	68 ec c9 02 c0       	push   0xc002c9ec
c001e078:	68 1c 10 03 c0       	push   0xc003101c
c001e07d:	68 00 84 02 c0       	push   0xc0028400
c001e082:	e8 fa 46 ff ff       	call   c0012781 <__cxa_atexit>
c001e087:	83 c4 10             	add    esp,0x10
c001e08a:	83 ec 0c             	sub    esp,0xc
c001e08d:	68 10 10 03 c0       	push   0xc0031010
c001e092:	e8 a9 a3 00 00       	call   c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e097:	83 c4 10             	add    esp,0x10
c001e09a:	83 ec 04             	sub    esp,0x4
c001e09d:	68 ec c9 02 c0       	push   0xc002c9ec
c001e0a2:	68 10 10 03 c0       	push   0xc0031010
c001e0a7:	68 00 84 02 c0       	push   0xc0028400
c001e0ac:	e8 d0 46 ff ff       	call   c0012781 <__cxa_atexit>
c001e0b1:	83 c4 10             	add    esp,0x10
c001e0b4:	90                   	nop
c001e0b5:	83 c4 0c             	add    esp,0xc
c001e0b8:	c3                   	ret    

c001e0b9 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e0b9:	83 ec 0c             	sub    esp,0xc
c001e0bc:	83 ec 08             	sub    esp,0x8
c001e0bf:	68 ff ff 00 00       	push   0xffff
c001e0c4:	6a 01                	push   0x1
c001e0c6:	e8 53 ff ff ff       	call   c001e01e <__static_initialization_and_destruction_0(int, int)>
c001e0cb:	83 c4 10             	add    esp,0x10
c001e0ce:	83 c4 0c             	add    esp,0xc
c001e0d1:	c3                   	ret    

c001e0d2 <Vm::inbv(unsigned short)>:
c001e0d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e0d6:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e0db:	75 06                	jne    c001e0e3 <Vm::inbv(unsigned short)+0x11>
c001e0dd:	a0 6c 10 03 c0       	mov    al,ds:0xc003106c
c001e0e2:	c3                   	ret    
c001e0e3:	ec                   	in     al,dx
c001e0e4:	c3                   	ret    

c001e0e5 <Vm::outbv(unsigned short, unsigned char)>:
c001e0e5:	53                   	push   ebx
c001e0e6:	83 ec 08             	sub    esp,0x8
c001e0e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e0f1:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e0f6:	75 38                	jne    c001e130 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e0f8:	0f b6 c3             	movzx  eax,bl
c001e0fb:	51                   	push   ecx
c001e0fc:	51                   	push   ecx
c001e0fd:	50                   	push   eax
c001e0fe:	68 cf bb 02 c0       	push   0xc002bbcf
c001e103:	e8 df 47 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e108:	8b 15 6c 10 03 c0    	mov    edx,DWORD PTR ds:0xc003106c
c001e10e:	83 c4 10             	add    esp,0x10
c001e111:	8d 42 01             	lea    eax,[edx+0x1]
c001e114:	88 9a 80 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef80],bl
c001e11a:	a3 6c 10 03 c0       	mov    ds:0xc003106c,eax
c001e11f:	83 f8 20             	cmp    eax,0x20
c001e122:	75 0f                	jne    c001e133 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e124:	c7 05 6c 10 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003106c,0x1f
c001e12e:	eb 03                	jmp    c001e133 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e130:	88 d8                	mov    al,bl
c001e132:	ee                   	out    dx,al
c001e133:	83 c4 08             	add    esp,0x8
c001e136:	5b                   	pop    ebx
c001e137:	c3                   	ret    

c001e138 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e138:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e13d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e142:	c1 e0 04             	shl    eax,0x4
c001e145:	01 d0                	add    eax,edx
c001e147:	c3                   	ret    

c001e148 <Vm::getSegment(unsigned int)>:
c001e148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e14c:	c1 e8 10             	shr    eax,0x10
c001e14f:	c3                   	ret    

c001e150 <Vm::getOffset(unsigned int)>:
c001e150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e154:	c3                   	ret    

c001e155 <Vm::mainloop2()>:
c001e155:	83 ec 0c             	sub    esp,0xc
c001e158:	e8 59 f3 ff ff       	call   c001d4b6 <lockScheduler()>
c001e15d:	83 ec 0c             	sub    esp,0xc
c001e160:	c6 05 65 10 03 c0 01 	mov    BYTE PTR ds:0xc0031065,0x1
c001e167:	6a 02                	push   0x2
c001e169:	e8 9c f7 ff ff       	call   c001d90a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e16e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e173:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e177:	52                   	push   edx
c001e178:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e17c:	52                   	push   edx
c001e17d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e181:	52                   	push   edx
c001e182:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e186:	50                   	push   eax
c001e187:	e8 6e 21 fe ff       	call   c00002fa <goToVM86>
c001e18c:	83 c4 2c             	add    esp,0x2c
c001e18f:	c3                   	ret    

c001e190 <Vm::mainVm8086Loop(void*)>:
c001e190:	83 ec 0c             	sub    esp,0xc
c001e193:	e8 20 f3 ff ff       	call   c001d4b8 <unlockScheduler()>
c001e198:	83 c4 0c             	add    esp,0xc
c001e19b:	eb b8                	jmp    c001e155 <Vm::mainloop2()>

c001e19d <Vm::mainloop3(unsigned long)>:
c001e19d:	53                   	push   ebx
c001e19e:	83 ec 08             	sub    esp,0x8
c001e1a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e1a5:	e8 0c f3 ff ff       	call   c001d4b6 <lockScheduler()>
c001e1aa:	83 ec 0c             	sub    esp,0xc
c001e1ad:	89 1d 60 10 03 c0    	mov    DWORD PTR ds:0xc0031060,ebx
c001e1b3:	6a 02                	push   0x2
c001e1b5:	c6 05 64 10 03 c0 01 	mov    BYTE PTR ds:0xc0031064,0x1
c001e1bc:	e8 49 f7 ff ff       	call   c001d90a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e1c1:	83 c4 18             	add    esp,0x18
c001e1c4:	5b                   	pop    ebx
c001e1c5:	eb 8e                	jmp    c001e155 <Vm::mainloop2()>

c001e1c7 <Vm::initialise8086()>:
c001e1c7:	83 ec 0c             	sub    esp,0xc
c001e1ca:	68 80 00 00 00       	push   0x80
c001e1cf:	6a 00                	push   0x0
c001e1d1:	68 90 e1 01 c0       	push   0xc001e190
c001e1d6:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c001e1dc:	e8 07 f4 ff ff       	call   c001d5e8 <Process::createThread(void (*)(void*), void*, int)>
c001e1e1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e1e8:	a3 68 10 03 c0       	mov    ds:0xc0031068,eax
c001e1ed:	68 00 01 00 00       	push   0x100
c001e1f2:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001e1f7:	6a 00                	push   0x0
c001e1f9:	6a 00                	push   0x0
c001e1fb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e201:	e8 b0 40 ff ff       	call   c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e206:	83 c4 2c             	add    esp,0x2c
c001e209:	c3                   	ret    

c001e20a <Vm::finish8086()>:
c001e20a:	53                   	push   ebx
c001e20b:	83 ec 08             	sub    esp,0x8
c001e20e:	e8 a3 f2 ff ff       	call   c001d4b6 <lockScheduler()>
c001e213:	80 3d 64 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031064,0x0
c001e21a:	75 0c                	jne    c001e228 <Vm::finish8086()+0x1e>
c001e21c:	e8 d1 f5 ff ff       	call   c001d7f2 <schedule()>
c001e221:	e8 92 f2 ff ff       	call   c001d4b8 <unlockScheduler()>
c001e226:	eb e6                	jmp    c001e20e <Vm::finish8086()+0x4>
c001e228:	83 ec 0c             	sub    esp,0xc
c001e22b:	8b 1d 60 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031060
c001e231:	ff 35 68 10 03 c0    	push   DWORD PTR ds:0xc0031068
c001e237:	c6 05 64 10 03 c0 00 	mov    BYTE PTR ds:0xc0031064,0x0
c001e23e:	e8 8b f8 ff ff       	call   c001dace <unblockTask(ThreadControlBlock*)>
c001e243:	e8 70 f2 ff ff       	call   c001d4b8 <unlockScheduler()>
c001e248:	89 d8                	mov    eax,ebx
c001e24a:	83 c4 18             	add    esp,0x18
c001e24d:	5b                   	pop    ebx
c001e24e:	c3                   	ret    

c001e24f <Vm::getOutput8086(unsigned char*)>:
c001e24f:	83 ec 10             	sub    esp,0x10
c001e252:	ff 35 6c 10 03 c0    	push   DWORD PTR ds:0xc003106c
c001e258:	68 80 10 03 c0       	push   0xc0031080
c001e25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e261:	e8 3a 24 fe ff       	call   c00006a0 <memcpy>
c001e266:	a1 6c 10 03 c0       	mov    eax,ds:0xc003106c
c001e26b:	c7 05 6c 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003106c,0x0
c001e275:	83 c4 1c             	add    esp,0x1c
c001e278:	c3                   	ret    

c001e279 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e279:	55                   	push   ebp
c001e27a:	57                   	push   edi
c001e27b:	56                   	push   esi
c001e27c:	53                   	push   ebx
c001e27d:	83 ec 2c             	sub    esp,0x2c
c001e280:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e284:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e288:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e28c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e290:	e8 21 f2 ff ff       	call   c001d4b6 <lockScheduler()>
c001e295:	a0 65 10 03 c0       	mov    al,ds:0xc0031065
c001e29a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e29e:	84 c0                	test   al,al
c001e2a0:	75 0c                	jne    c001e2ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e2a2:	e8 4b f5 ff ff       	call   c001d7f2 <schedule()>
c001e2a7:	e8 0c f2 ff ff       	call   c001d4b8 <unlockScheduler()>
c001e2ac:	eb e2                	jmp    c001e290 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e2ae:	a1 68 10 03 c0       	mov    eax,ds:0xc0031068
c001e2b3:	c7 05 6c 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003106c,0x0
c001e2bd:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e2c1:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e2c5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e2c9:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e2cd:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e2d1:	50                   	push   eax
c001e2d2:	6a 20                	push   0x20
c001e2d4:	6a 00                	push   0x0
c001e2d6:	68 80 10 03 c0       	push   0xc0031080
c001e2db:	e8 d8 23 fe ff       	call   c00006b8 <memset>
c001e2e0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e2e7:	e8 2c 13 ff ff       	call   c000f618 <malloc>
c001e2ec:	83 c4 0c             	add    esp,0xc
c001e2ef:	89 c7                	mov    edi,eax
c001e2f1:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c001e2f7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e2fb:	50                   	push   eax
c001e2fc:	e8 3f 4b ff ff       	call   c0012e40 <File::File(char const*, Process*)>
c001e301:	83 c4 10             	add    esp,0x10
c001e304:	85 ff                	test   edi,edi
c001e306:	75 0a                	jne    c001e312 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e308:	83 ec 0c             	sub    esp,0xc
c001e30b:	68 eb bb 02 c0       	push   0xc002bbeb
c001e310:	eb 27                	jmp    c001e339 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e312:	50                   	push   eax
c001e313:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e317:	50                   	push   eax
c001e318:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e31c:	50                   	push   eax
c001e31d:	57                   	push   edi
c001e31e:	e8 2d 4e ff ff       	call   c0013150 <File::stat(unsigned long long*, bool*)>
c001e323:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e328:	83 c4 10             	add    esp,0x10
c001e32b:	89 e8                	mov    eax,ebp
c001e32d:	84 c0                	test   al,al
c001e32f:	74 19                	je     c001e34a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e331:	83 ec 0c             	sub    esp,0xc
c001e334:	68 ff bb 02 c0       	push   0xc002bbff
c001e339:	e8 1d bb ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001e33e:	31 ed                	xor    ebp,ebp
c001e340:	e8 73 f1 ff ff       	call   c001d4b8 <unlockScheduler()>
c001e345:	83 c4 10             	add    esp,0x10
c001e348:	eb 75                	jmp    c001e3bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e34a:	50                   	push   eax
c001e34b:	50                   	push   eax
c001e34c:	6a 01                	push   0x1
c001e34e:	57                   	push   edi
c001e34f:	e8 50 4b ff ff       	call   c0012ea4 <File::open(FileOpenMode)>
c001e354:	83 c4 10             	add    esp,0x10
c001e357:	85 c0                	test   eax,eax
c001e359:	74 17                	je     c001e372 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e35b:	83 ec 0c             	sub    esp,0xc
c001e35e:	68 18 bc 02 c0       	push   0xc002bc18
c001e363:	e8 f3 ba ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001e368:	e8 4b f1 ff ff       	call   c001d4b8 <unlockScheduler()>
c001e36d:	83 c4 10             	add    esp,0x10
c001e370:	eb 4d                	jmp    c001e3bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e372:	0f b7 f6             	movzx  esi,si
c001e375:	50                   	push   eax
c001e376:	0f b7 db             	movzx  ebx,bx
c001e379:	50                   	push   eax
c001e37a:	56                   	push   esi
c001e37b:	53                   	push   ebx
c001e37c:	e8 b7 fd ff ff       	call   c001e138 <Vm::realToLinear(unsigned short, unsigned short)>
c001e381:	5a                   	pop    edx
c001e382:	8b 17                	mov    edx,DWORD PTR [edi]
c001e384:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e388:	51                   	push   ecx
c001e389:	50                   	push   eax
c001e38a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e38e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e392:	57                   	push   edi
c001e393:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e396:	83 c4 14             	add    esp,0x14
c001e399:	57                   	push   edi
c001e39a:	e8 63 4b ff ff       	call   c0012f02 <File::close()>
c001e39f:	c6 05 65 10 03 c0 00 	mov    BYTE PTR ds:0xc0031065,0x0
c001e3a6:	e8 0d f1 ff ff       	call   c001d4b8 <unlockScheduler()>
c001e3ab:	59                   	pop    ecx
c001e3ac:	ff 35 68 10 03 c0    	push   DWORD PTR ds:0xc0031068
c001e3b2:	e8 17 f7 ff ff       	call   c001dace <unblockTask(ThreadControlBlock*)>
c001e3b7:	83 c4 10             	add    esp,0x10
c001e3ba:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e3bf:	83 c4 2c             	add    esp,0x2c
c001e3c2:	89 e8                	mov    eax,ebp
c001e3c4:	5b                   	pop    ebx
c001e3c5:	5e                   	pop    esi
c001e3c6:	5f                   	pop    edi
c001e3c7:	5d                   	pop    ebp
c001e3c8:	c3                   	ret    

c001e3c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e3c9:	57                   	push   edi
c001e3ca:	56                   	push   esi
c001e3cb:	53                   	push   ebx
c001e3cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e3d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e3d8:	83 e8 06             	sub    eax,0x6
c001e3db:	0f b7 c0             	movzx  eax,ax
c001e3de:	50                   	push   eax
c001e3df:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e3e4:	50                   	push   eax
c001e3e5:	e8 4e fd ff ff       	call   c001e138 <Vm::realToLinear(unsigned short, unsigned short)>
c001e3ea:	5a                   	pop    edx
c001e3eb:	5e                   	pop    esi
c001e3ec:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e3ef:	8d 56 fa             	lea    edx,[esi-0x6]
c001e3f2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e3f8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e3fb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e3fe:	83 c2 02             	add    edx,0x2
c001e401:	66 89 10             	mov    WORD PTR [eax],dx
c001e404:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e407:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e40b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e40e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e412:	89 d6                	mov    esi,edx
c001e414:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e41a:	66 81 e6 ff fd       	and    si,0xfdff
c001e41f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e423:	74 07                	je     c001e42c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e425:	89 d6                	mov    esi,edx
c001e427:	66 81 ce 00 02       	or     si,0x200
c001e42c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e435:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e439:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e441:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e444:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e44c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e44f:	5b                   	pop    ebx
c001e450:	5e                   	pop    esi
c001e451:	5f                   	pop    edi
c001e452:	c3                   	ret    

c001e453 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e453:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e458:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e45d:	c1 e0 04             	shl    eax,0x4
c001e460:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e463:	c3                   	ret    

c001e464 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e464:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e469:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e46e:	c1 e0 04             	shl    eax,0x4
c001e471:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e475:	c3                   	ret    

c001e476 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e476:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e47b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e480:	c1 e0 04             	shl    eax,0x4
c001e483:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e486:	c3                   	ret    

c001e487 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e487:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e48c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e491:	c1 e0 04             	shl    eax,0x4
c001e494:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e498:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e49b:	c3                   	ret    

c001e49c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e49c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4a1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4a6:	c1 e0 04             	shl    eax,0x4
c001e4a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4ad:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e4b1:	c3                   	ret    

c001e4b2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e4b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4bc:	c1 e0 04             	shl    eax,0x4
c001e4bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4c3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e4c6:	c3                   	ret    

c001e4c7 <Vm::faultHandler(regs*)>:
c001e4c7:	55                   	push   ebp
c001e4c8:	57                   	push   edi
c001e4c9:	56                   	push   esi
c001e4ca:	53                   	push   ebx
c001e4cb:	83 ec 1c             	sub    esp,0x1c
c001e4ce:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e4d2:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e4d5:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e4d8:	0f b7 c1             	movzx  eax,cx
c001e4db:	50                   	push   eax
c001e4dc:	0f b7 c3             	movzx  eax,bx
c001e4df:	c1 e3 04             	shl    ebx,0x4
c001e4e2:	50                   	push   eax
c001e4e3:	e8 50 fc ff ff       	call   c001e138 <Vm::realToLinear(unsigned short, unsigned short)>
c001e4e8:	5a                   	pop    edx
c001e4e9:	89 c5                	mov    ebp,eax
c001e4eb:	5e                   	pop    esi
c001e4ec:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e4f0:	50                   	push   eax
c001e4f1:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e4f5:	50                   	push   eax
c001e4f6:	e8 3d fc ff ff       	call   c001e138 <Vm::realToLinear(unsigned short, unsigned short)>
c001e4fb:	01 cb                	add    ebx,ecx
c001e4fd:	89 c6                	mov    esi,eax
c001e4ff:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e503:	50                   	push   eax
c001e504:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e508:	50                   	push   eax
c001e509:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e50d:	50                   	push   eax
c001e50e:	55                   	push   ebp
c001e50f:	53                   	push   ebx
c001e510:	b3 06                	mov    bl,0x6
c001e512:	68 31 bc 02 c0       	push   0xc002bc31
c001e517:	e8 cb 43 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e51c:	83 c4 20             	add    esp,0x20
c001e51f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e524:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e529:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e52d:	3c 9d                	cmp    al,0x9d
c001e52f:	0f 84 d7 02 00 00    	je     c001e80c <Vm::faultHandler(regs*)+0x345>
c001e535:	0f 87 a3 00 00 00    	ja     c001e5de <Vm::faultHandler(regs*)+0x117>
c001e53b:	3c 66                	cmp    al,0x66
c001e53d:	0f 84 15 02 00 00    	je     c001e758 <Vm::faultHandler(regs*)+0x291>
c001e543:	77 5f                	ja     c001e5a4 <Vm::faultHandler(regs*)+0xdd>
c001e545:	3c 36                	cmp    al,0x36
c001e547:	0f 84 f1 01 00 00    	je     c001e73e <Vm::faultHandler(regs*)+0x277>
c001e54d:	77 28                	ja     c001e577 <Vm::faultHandler(regs*)+0xb0>
c001e54f:	3c 26                	cmp    al,0x26
c001e551:	0f 84 99 01 00 00    	je     c001e6f0 <Vm::faultHandler(regs*)+0x229>
c001e557:	3c 2e                	cmp    al,0x2e
c001e559:	0f 85 3b 07 00 00    	jne    c001ec9a <Vm::faultHandler(regs*)+0x7d3>
c001e55f:	83 ec 0c             	sub    esp,0xc
c001e562:	31 db                	xor    ebx,ebx
c001e564:	68 46 bc 02 c0       	push   0xc002bc46
c001e569:	e8 79 43 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e56e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e571:	83 c4 10             	add    esp,0x10
c001e574:	45                   	inc    ebp
c001e575:	eb b2                	jmp    c001e529 <Vm::faultHandler(regs*)+0x62>
c001e577:	3c 64                	cmp    al,0x64
c001e579:	0f 84 8b 01 00 00    	je     c001e70a <Vm::faultHandler(regs*)+0x243>
c001e57f:	0f 87 9f 01 00 00    	ja     c001e724 <Vm::faultHandler(regs*)+0x25d>
c001e585:	3c 3e                	cmp    al,0x3e
c001e587:	0f 85 0d 07 00 00    	jne    c001ec9a <Vm::faultHandler(regs*)+0x7d3>
c001e58d:	83 ec 0c             	sub    esp,0xc
c001e590:	b3 01                	mov    bl,0x1
c001e592:	68 4a bc 02 c0       	push   0xc002bc4a
c001e597:	e8 4b 43 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e59c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e59f:	83 c4 10             	add    esp,0x10
c001e5a2:	eb d0                	jmp    c001e574 <Vm::faultHandler(regs*)+0xad>
c001e5a4:	3c 6d                	cmp    al,0x6d
c001e5a6:	0f 84 af 03 00 00    	je     c001e95b <Vm::faultHandler(regs*)+0x494>
c001e5ac:	77 15                	ja     c001e5c3 <Vm::faultHandler(regs*)+0xfc>
c001e5ae:	3c 67                	cmp    al,0x67
c001e5b0:	0f 84 bf 01 00 00    	je     c001e775 <Vm::faultHandler(regs*)+0x2ae>
c001e5b6:	3c 6c                	cmp    al,0x6c
c001e5b8:	0f 84 3f 03 00 00    	je     c001e8fd <Vm::faultHandler(regs*)+0x436>
c001e5be:	e9 d7 06 00 00       	jmp    c001ec9a <Vm::faultHandler(regs*)+0x7d3>
c001e5c3:	3c 6f                	cmp    al,0x6f
c001e5c5:	0f 84 a4 04 00 00    	je     c001ea6f <Vm::faultHandler(regs*)+0x5a8>
c001e5cb:	0f 82 11 04 00 00    	jb     c001e9e2 <Vm::faultHandler(regs*)+0x51b>
c001e5d1:	3c 9c                	cmp    al,0x9c
c001e5d3:	0f 84 ba 01 00 00    	je     c001e793 <Vm::faultHandler(regs*)+0x2cc>
c001e5d9:	e9 bc 06 00 00       	jmp    c001ec9a <Vm::faultHandler(regs*)+0x7d3>
c001e5de:	3c ec                	cmp    al,0xec
c001e5e0:	0f 84 24 06 00 00    	je     c001ec0a <Vm::faultHandler(regs*)+0x743>
c001e5e6:	0f 87 93 00 00 00    	ja     c001e67f <Vm::faultHandler(regs*)+0x1b8>
c001e5ec:	3c e4                	cmp    al,0xe4
c001e5ee:	0f 84 5c 05 00 00    	je     c001eb50 <Vm::faultHandler(regs*)+0x689>
c001e5f4:	77 6a                	ja     c001e660 <Vm::faultHandler(regs*)+0x199>
c001e5f6:	3c cd                	cmp    al,0xcd
c001e5f8:	0f 84 7e 02 00 00    	je     c001e87c <Vm::faultHandler(regs*)+0x3b5>
c001e5fe:	3c cf                	cmp    al,0xcf
c001e600:	0f 85 94 06 00 00    	jne    c001ec9a <Vm::faultHandler(regs*)+0x7d3>
c001e606:	83 ec 0c             	sub    esp,0xc
c001e609:	68 8e bc 02 c0       	push   0xc002bc8e
c001e60e:	e8 d4 42 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e613:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e616:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e619:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e61d:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e620:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e624:	0d 00 02 02 00       	or     eax,0x20200
c001e629:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e62c:	56                   	push   esi
c001e62d:	53                   	push   ebx
c001e62e:	52                   	push   edx
c001e62f:	68 94 bc 02 c0       	push   0xc002bc94
c001e634:	e8 ae 42 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e639:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e63d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e643:	66 c1 e8 09          	shr    ax,0x9
c001e647:	83 e0 01             	and    eax,0x1
c001e64a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e64d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e650:	83 c0 06             	add    eax,0x6
c001e653:	25 ff ff 00 00       	and    eax,0xffff
c001e658:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e65b:	e9 95 02 00 00       	jmp    c001e8f5 <Vm::faultHandler(regs*)+0x42e>
c001e660:	3c e6                	cmp    al,0xe6
c001e662:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e666:	0f 84 4e 05 00 00    	je     c001ebba <Vm::faultHandler(regs*)+0x6f3>
c001e66c:	0f 82 0a 05 00 00    	jb     c001eb7c <Vm::faultHandler(regs*)+0x6b5>
c001e672:	3c e7                	cmp    al,0xe7
c001e674:	0f 84 69 05 00 00    	je     c001ebe3 <Vm::faultHandler(regs*)+0x71c>
c001e67a:	e9 1b 06 00 00       	jmp    c001ec9a <Vm::faultHandler(regs*)+0x7d3>
c001e67f:	3c ef                	cmp    al,0xef
c001e681:	0f 84 e6 05 00 00    	je     c001ec6d <Vm::faultHandler(regs*)+0x7a6>
c001e687:	77 37                	ja     c001e6c0 <Vm::faultHandler(regs*)+0x1f9>
c001e689:	3c ed                	cmp    al,0xed
c001e68b:	0f 84 a3 05 00 00    	je     c001ec34 <Vm::faultHandler(regs*)+0x76d>
c001e691:	3c ee                	cmp    al,0xee
c001e693:	0f 85 01 06 00 00    	jne    c001ec9a <Vm::faultHandler(regs*)+0x7d3>
c001e699:	52                   	push   edx
c001e69a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e69d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e6a0:	68 2f bd 02 c0       	push   0xc002bd2f
c001e6a5:	e8 3d 42 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e6aa:	59                   	pop    ecx
c001e6ab:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e6af:	5b                   	pop    ebx
c001e6b0:	50                   	push   eax
c001e6b1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e6b5:	50                   	push   eax
c001e6b6:	e8 2a fa ff ff       	call   c001e0e5 <Vm::outbv(unsigned short, unsigned char)>
c001e6bb:	e9 a5 05 00 00       	jmp    c001ec65 <Vm::faultHandler(regs*)+0x79e>
c001e6c0:	3c fa                	cmp    al,0xfa
c001e6c2:	0f 84 f7 01 00 00    	je     c001e8bf <Vm::faultHandler(regs*)+0x3f8>
c001e6c8:	3c fb                	cmp    al,0xfb
c001e6ca:	0f 84 0a 02 00 00    	je     c001e8da <Vm::faultHandler(regs*)+0x413>
c001e6d0:	3c f3                	cmp    al,0xf3
c001e6d2:	0f 85 c2 05 00 00    	jne    c001ec9a <Vm::faultHandler(regs*)+0x7d3>
c001e6d8:	83 ec 0c             	sub    esp,0xc
c001e6db:	68 67 bc 02 c0       	push   0xc002bc67
c001e6e0:	e8 02 42 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e6e5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e6e8:	83 c4 10             	add    esp,0x10
c001e6eb:	e9 84 fe ff ff       	jmp    c001e574 <Vm::faultHandler(regs*)+0xad>
c001e6f0:	83 ec 0c             	sub    esp,0xc
c001e6f3:	b3 02                	mov    bl,0x2
c001e6f5:	68 42 bc 02 c0       	push   0xc002bc42
c001e6fa:	e8 e8 41 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e6ff:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e702:	83 c4 10             	add    esp,0x10
c001e705:	e9 6a fe ff ff       	jmp    c001e574 <Vm::faultHandler(regs*)+0xad>
c001e70a:	83 ec 0c             	sub    esp,0xc
c001e70d:	b3 03                	mov    bl,0x3
c001e70f:	68 4e bc 02 c0       	push   0xc002bc4e
c001e714:	e8 ce 41 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e719:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e71c:	83 c4 10             	add    esp,0x10
c001e71f:	e9 50 fe ff ff       	jmp    c001e574 <Vm::faultHandler(regs*)+0xad>
c001e724:	83 ec 0c             	sub    esp,0xc
c001e727:	b3 04                	mov    bl,0x4
c001e729:	68 52 bc 02 c0       	push   0xc002bc52
c001e72e:	e8 b4 41 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e733:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e736:	83 c4 10             	add    esp,0x10
c001e739:	e9 36 fe ff ff       	jmp    c001e574 <Vm::faultHandler(regs*)+0xad>
c001e73e:	83 ec 0c             	sub    esp,0xc
c001e741:	b3 05                	mov    bl,0x5
c001e743:	68 56 bc 02 c0       	push   0xc002bc56
c001e748:	e8 9a 41 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e74d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e750:	83 c4 10             	add    esp,0x10
c001e753:	e9 1c fe ff ff       	jmp    c001e574 <Vm::faultHandler(regs*)+0xad>
c001e758:	83 ec 0c             	sub    esp,0xc
c001e75b:	68 5a bc 02 c0       	push   0xc002bc5a
c001e760:	e8 82 41 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e765:	83 c4 10             	add    esp,0x10
c001e768:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e76b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e770:	e9 ff fd ff ff       	jmp    c001e574 <Vm::faultHandler(regs*)+0xad>
c001e775:	50                   	push   eax
c001e776:	50                   	push   eax
c001e777:	6a 01                	push   0x1
c001e779:	68 5f bc 02 c0       	push   0xc002bc5f
c001e77e:	e8 64 41 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e783:	83 c4 10             	add    esp,0x10
c001e786:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e789:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e78e:	e9 e1 fd ff ff       	jmp    c001e574 <Vm::faultHandler(regs*)+0xad>
c001e793:	83 ec 0c             	sub    esp,0xc
c001e796:	68 6d bc 02 c0       	push   0xc002bc6d
c001e79b:	e8 47 41 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e7a0:	83 c4 10             	add    esp,0x10
c001e7a3:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e7a6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e7ab:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e7ae:	74 2f                	je     c001e7df <Vm::faultHandler(regs*)+0x318>
c001e7b0:	83 ea 04             	sub    edx,0x4
c001e7b3:	25 ff 0d 00 00       	and    eax,0xdff
c001e7b8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e7be:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e7c1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e7c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e7ca:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e7ce:	0f 84 bf 04 00 00    	je     c001ec93 <Vm::faultHandler(regs*)+0x7cc>
c001e7d4:	80 cc 02             	or     ah,0x2
c001e7d7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e7da:	e9 b4 04 00 00       	jmp    c001ec93 <Vm::faultHandler(regs*)+0x7cc>
c001e7df:	83 ea 02             	sub    edx,0x2
c001e7e2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e7e8:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e7eb:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e7ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e7f5:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e7f9:	74 05                	je     c001e800 <Vm::faultHandler(regs*)+0x339>
c001e7fb:	80 cc 02             	or     ah,0x2
c001e7fe:	eb 03                	jmp    c001e803 <Vm::faultHandler(regs*)+0x33c>
c001e800:	80 e4 fd             	and    ah,0xfd
c001e803:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e807:	e9 87 04 00 00       	jmp    c001ec93 <Vm::faultHandler(regs*)+0x7cc>
c001e80c:	83 ec 0c             	sub    esp,0xc
c001e80f:	68 74 bc 02 c0       	push   0xc002bc74
c001e814:	e8 ce 40 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e819:	83 c4 10             	add    esp,0x10
c001e81c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e821:	74 28                	je     c001e84b <Vm::faultHandler(regs*)+0x384>
c001e823:	8b 06                	mov    eax,DWORD PTR [esi]
c001e825:	25 ff 0d 00 00       	and    eax,0xdff
c001e82a:	0d 00 02 02 00       	or     eax,0x20200
c001e82f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e832:	8b 06                	mov    eax,DWORD PTR [esi]
c001e834:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e83a:	c1 e8 09             	shr    eax,0x9
c001e83d:	83 e0 01             	and    eax,0x1
c001e840:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e843:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e846:	83 c0 04             	add    eax,0x4
c001e849:	eb 24                	jmp    c001e86f <Vm::faultHandler(regs*)+0x3a8>
c001e84b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e84e:	0d 00 02 02 00       	or     eax,0x20200
c001e853:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e856:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e859:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e85f:	66 c1 e8 09          	shr    ax,0x9
c001e863:	83 e0 01             	and    eax,0x1
c001e866:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e869:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e86c:	83 c0 02             	add    eax,0x2
c001e86f:	25 ff ff 00 00       	and    eax,0xffff
c001e874:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e877:	e9 17 04 00 00       	jmp    c001ec93 <Vm::faultHandler(regs*)+0x7cc>
c001e87c:	53                   	push   ebx
c001e87d:	53                   	push   ebx
c001e87e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e882:	50                   	push   eax
c001e883:	68 7a bc 02 c0       	push   0xc002bc7a
c001e888:	e8 5a 40 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e88d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e891:	83 c4 10             	add    esp,0x10
c001e894:	3c ee                	cmp    al,0xee
c001e896:	75 10                	jne    c001e8a8 <Vm::faultHandler(regs*)+0x3e1>
c001e898:	83 ec 0c             	sub    esp,0xc
c001e89b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e89e:	e8 fa f8 ff ff       	call   c001e19d <Vm::mainloop3(unsigned long)>
c001e8a3:	e9 c0 03 00 00       	jmp    c001ec68 <Vm::faultHandler(regs*)+0x7a1>
c001e8a8:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e8ac:	83 ec 0c             	sub    esp,0xc
c001e8af:	53                   	push   ebx
c001e8b0:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e8b4:	53                   	push   ebx
c001e8b5:	55                   	push   ebp
c001e8b6:	50                   	push   eax
c001e8b7:	57                   	push   edi
c001e8b8:	e8 0c fb ff ff       	call   c001e3c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e8bd:	eb 36                	jmp    c001e8f5 <Vm::faultHandler(regs*)+0x42e>
c001e8bf:	83 ec 0c             	sub    esp,0xc
c001e8c2:	68 84 bc 02 c0       	push   0xc002bc84
c001e8c7:	e8 1b 40 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e8cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8d1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e8d5:	e9 8b 03 00 00       	jmp    c001ec65 <Vm::faultHandler(regs*)+0x79e>
c001e8da:	83 ec 0c             	sub    esp,0xc
c001e8dd:	68 89 bc 02 c0       	push   0xc002bc89
c001e8e2:	e8 00 40 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e8e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8ec:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e8f0:	e9 70 03 00 00       	jmp    c001ec65 <Vm::faultHandler(regs*)+0x79e>
c001e8f5:	83 c4 20             	add    esp,0x20
c001e8f8:	e9 99 03 00 00       	jmp    c001ec96 <Vm::faultHandler(regs*)+0x7cf>
c001e8fd:	83 ec 0c             	sub    esp,0xc
c001e900:	68 c7 bc 02 c0       	push   0xc002bcc7
c001e905:	e8 dd 3f ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e90a:	83 c4 10             	add    esp,0x10
c001e90d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e910:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e915:	74 0d                	je     c001e924 <Vm::faultHandler(regs*)+0x45d>
c001e917:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e91e:	0f 87 9e 01 00 00    	ja     c001eac2 <Vm::faultHandler(regs*)+0x5fb>
c001e924:	83 ec 0c             	sub    esp,0xc
c001e927:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e92b:	0f b7 db             	movzx  ebx,bx
c001e92e:	50                   	push   eax
c001e92f:	e8 9e f7 ff ff       	call   c001e0d2 <Vm::inbv(unsigned short)>
c001e934:	83 c4 0c             	add    esp,0xc
c001e937:	0f b6 c0             	movzx  eax,al
c001e93a:	50                   	push   eax
c001e93b:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e93f:	50                   	push   eax
c001e940:	53                   	push   ebx
c001e941:	e8 41 fb ff ff       	call   c001e487 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e946:	83 c4 10             	add    esp,0x10
c001e949:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e94c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e950:	74 03                	je     c001e955 <Vm::faultHandler(regs*)+0x48e>
c001e952:	48                   	dec    eax
c001e953:	eb 01                	jmp    c001e956 <Vm::faultHandler(regs*)+0x48f>
c001e955:	40                   	inc    eax
c001e956:	0f b7 c0             	movzx  eax,ax
c001e959:	eb 7f                	jmp    c001e9da <Vm::faultHandler(regs*)+0x513>
c001e95b:	83 ec 0c             	sub    esp,0xc
c001e95e:	68 f9 bc 02 c0       	push   0xc002bcf9
c001e963:	e8 7f 3f ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e968:	83 c4 10             	add    esp,0x10
c001e96b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e96e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e973:	74 0d                	je     c001e982 <Vm::faultHandler(regs*)+0x4bb>
c001e975:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e97c:	0f 87 40 01 00 00    	ja     c001eac2 <Vm::faultHandler(regs*)+0x5fb>
c001e982:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e985:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e989:	0f b7 db             	movzx  ebx,bx
c001e98c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e991:	74 20                	je     c001e9b3 <Vm::faultHandler(regs*)+0x4ec>
c001e993:	ed                   	in     eax,dx
c001e994:	51                   	push   ecx
c001e995:	50                   	push   eax
c001e996:	56                   	push   esi
c001e997:	53                   	push   ebx
c001e998:	e8 15 fb ff ff       	call   c001e4b2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e99d:	83 c4 10             	add    esp,0x10
c001e9a0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e9a3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e9a7:	74 05                	je     c001e9ae <Vm::faultHandler(regs*)+0x4e7>
c001e9a9:	83 e8 04             	sub    eax,0x4
c001e9ac:	eb 27                	jmp    c001e9d5 <Vm::faultHandler(regs*)+0x50e>
c001e9ae:	83 c0 04             	add    eax,0x4
c001e9b1:	eb 22                	jmp    c001e9d5 <Vm::faultHandler(regs*)+0x50e>
c001e9b3:	66 ed                	in     ax,dx
c001e9b5:	0f b7 c0             	movzx  eax,ax
c001e9b8:	52                   	push   edx
c001e9b9:	50                   	push   eax
c001e9ba:	56                   	push   esi
c001e9bb:	53                   	push   ebx
c001e9bc:	e8 db fa ff ff       	call   c001e49c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e9c1:	83 c4 10             	add    esp,0x10
c001e9c4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e9c7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e9cb:	74 05                	je     c001e9d2 <Vm::faultHandler(regs*)+0x50b>
c001e9cd:	83 e8 02             	sub    eax,0x2
c001e9d0:	eb 03                	jmp    c001e9d5 <Vm::faultHandler(regs*)+0x50e>
c001e9d2:	83 c0 02             	add    eax,0x2
c001e9d5:	25 ff ff 00 00       	and    eax,0xffff
c001e9da:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e9dd:	e9 b1 02 00 00       	jmp    c001ec93 <Vm::faultHandler(regs*)+0x7cc>
c001e9e2:	83 ec 0c             	sub    esp,0xc
c001e9e5:	4b                   	dec    ebx
c001e9e6:	68 ff bc 02 c0       	push   0xc002bcff
c001e9eb:	e8 f7 3e ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001e9f0:	83 c4 10             	add    esp,0x10
c001e9f3:	80 fb 05             	cmp    bl,0x5
c001e9f6:	77 0a                	ja     c001ea02 <Vm::faultHandler(regs*)+0x53b>
c001e9f8:	0f b6 db             	movzx  ebx,bl
c001e9fb:	ff 24 9d 70 bd 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4290]
c001ea02:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ea06:	eb 1b                	jmp    c001ea23 <Vm::faultHandler(regs*)+0x55c>
c001ea08:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ea0c:	eb 15                	jmp    c001ea23 <Vm::faultHandler(regs*)+0x55c>
c001ea0e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ea12:	eb 0f                	jmp    c001ea23 <Vm::faultHandler(regs*)+0x55c>
c001ea14:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ea18:	eb 09                	jmp    c001ea23 <Vm::faultHandler(regs*)+0x55c>
c001ea1a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ea1d:	eb 04                	jmp    c001ea23 <Vm::faultHandler(regs*)+0x55c>
c001ea1f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ea23:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ea28:	74 0d                	je     c001ea37 <Vm::faultHandler(regs*)+0x570>
c001ea2a:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001ea31:	0f 87 8b 00 00 00    	ja     c001eac2 <Vm::faultHandler(regs*)+0x5fb>
c001ea37:	53                   	push   ebx
c001ea38:	53                   	push   ebx
c001ea39:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001ea3d:	52                   	push   edx
c001ea3e:	50                   	push   eax
c001ea3f:	e8 0f fa ff ff       	call   c001e453 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ea44:	5e                   	pop    esi
c001ea45:	0f b6 c0             	movzx  eax,al
c001ea48:	5d                   	pop    ebp
c001ea49:	50                   	push   eax
c001ea4a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ea4e:	50                   	push   eax
c001ea4f:	e8 91 f6 ff ff       	call   c001e0e5 <Vm::outbv(unsigned short, unsigned char)>
c001ea54:	83 c4 10             	add    esp,0x10
c001ea57:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ea5a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ea5e:	74 03                	je     c001ea63 <Vm::faultHandler(regs*)+0x59c>
c001ea60:	48                   	dec    eax
c001ea61:	eb 01                	jmp    c001ea64 <Vm::faultHandler(regs*)+0x59d>
c001ea63:	40                   	inc    eax
c001ea64:	0f b7 c0             	movzx  eax,ax
c001ea67:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001ea6a:	e9 24 02 00 00       	jmp    c001ec93 <Vm::faultHandler(regs*)+0x7cc>
c001ea6f:	83 ec 0c             	sub    esp,0xc
c001ea72:	4b                   	dec    ebx
c001ea73:	68 ff bc 02 c0       	push   0xc002bcff
c001ea78:	e8 6a 3e ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ea7d:	83 c4 10             	add    esp,0x10
c001ea80:	80 fb 05             	cmp    bl,0x5
c001ea83:	77 0a                	ja     c001ea8f <Vm::faultHandler(regs*)+0x5c8>
c001ea85:	0f b6 db             	movzx  ebx,bl
c001ea88:	ff 24 9d 88 bd 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4278]
c001ea8f:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ea93:	eb 1b                	jmp    c001eab0 <Vm::faultHandler(regs*)+0x5e9>
c001ea95:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ea99:	eb 15                	jmp    c001eab0 <Vm::faultHandler(regs*)+0x5e9>
c001ea9b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ea9f:	eb 0f                	jmp    c001eab0 <Vm::faultHandler(regs*)+0x5e9>
c001eaa1:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001eaa5:	eb 09                	jmp    c001eab0 <Vm::faultHandler(regs*)+0x5e9>
c001eaa7:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001eaaa:	eb 04                	jmp    c001eab0 <Vm::faultHandler(regs*)+0x5e9>
c001eaac:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eab0:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001eab3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eab8:	74 39                	je     c001eaf3 <Vm::faultHandler(regs*)+0x62c>
c001eaba:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001eac0:	76 31                	jbe    c001eaf3 <Vm::faultHandler(regs*)+0x62c>
c001eac2:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001eac6:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eaca:	51                   	push   ecx
c001eacb:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001eacf:	51                   	push   ecx
c001ead0:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ead4:	51                   	push   ecx
c001ead5:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ead9:	51                   	push   ecx
c001eada:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001eade:	52                   	push   edx
c001eadf:	50                   	push   eax
c001eae0:	50                   	push   eax
c001eae1:	68 cc bc 02 c0       	push   0xc002bccc
c001eae6:	e8 fc 3d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001eaeb:	83 c4 20             	add    esp,0x20
c001eaee:	e9 fb 01 00 00       	jmp    c001ecee <Vm::faultHandler(regs*)+0x827>
c001eaf3:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001eaf6:	0f b7 d3             	movzx  edx,bx
c001eaf9:	81 e6 00 04 00 00    	and    esi,0x400
c001eaff:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001eb02:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eb07:	74 1d                	je     c001eb26 <Vm::faultHandler(regs*)+0x65f>
c001eb09:	51                   	push   ecx
c001eb0a:	51                   	push   ecx
c001eb0b:	52                   	push   edx
c001eb0c:	50                   	push   eax
c001eb0d:	e8 64 f9 ff ff       	call   c001e476 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001eb12:	83 c4 10             	add    esp,0x10
c001eb15:	89 ea                	mov    edx,ebp
c001eb17:	ef                   	out    dx,eax
c001eb18:	85 f6                	test   esi,esi
c001eb1a:	74 05                	je     c001eb21 <Vm::faultHandler(regs*)+0x65a>
c001eb1c:	83 eb 04             	sub    ebx,0x4
c001eb1f:	eb 21                	jmp    c001eb42 <Vm::faultHandler(regs*)+0x67b>
c001eb21:	83 c3 04             	add    ebx,0x4
c001eb24:	eb 1c                	jmp    c001eb42 <Vm::faultHandler(regs*)+0x67b>
c001eb26:	51                   	push   ecx
c001eb27:	51                   	push   ecx
c001eb28:	52                   	push   edx
c001eb29:	50                   	push   eax
c001eb2a:	e8 35 f9 ff ff       	call   c001e464 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001eb2f:	83 c4 10             	add    esp,0x10
c001eb32:	89 ea                	mov    edx,ebp
c001eb34:	66 ef                	out    dx,ax
c001eb36:	85 f6                	test   esi,esi
c001eb38:	74 05                	je     c001eb3f <Vm::faultHandler(regs*)+0x678>
c001eb3a:	83 eb 02             	sub    ebx,0x2
c001eb3d:	eb 03                	jmp    c001eb42 <Vm::faultHandler(regs*)+0x67b>
c001eb3f:	83 c3 02             	add    ebx,0x2
c001eb42:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001eb48:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001eb4b:	e9 43 01 00 00       	jmp    c001ec93 <Vm::faultHandler(regs*)+0x7cc>
c001eb50:	53                   	push   ebx
c001eb51:	53                   	push   ebx
c001eb52:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb56:	50                   	push   eax
c001eb57:	68 05 bd 02 c0       	push   0xc002bd05
c001eb5c:	e8 86 3d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001eb61:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001eb68:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb6c:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb6f:	e8 5e f5 ff ff       	call   c001e0d2 <Vm::inbv(unsigned short)>
c001eb74:	0f b6 c0             	movzx  eax,al
c001eb77:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001eb7a:	eb 5e                	jmp    c001ebda <Vm::faultHandler(regs*)+0x713>
c001eb7c:	51                   	push   ecx
c001eb7d:	51                   	push   ecx
c001eb7e:	53                   	push   ebx
c001eb7f:	68 0b bd 02 c0       	push   0xc002bd0b
c001eb84:	e8 5e 3d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001eb89:	83 c4 10             	add    esp,0x10
c001eb8c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eb91:	74 07                	je     c001eb9a <Vm::faultHandler(regs*)+0x6d3>
c001eb93:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001eb97:	ed                   	in     eax,dx
c001eb98:	eb 14                	jmp    c001ebae <Vm::faultHandler(regs*)+0x6e7>
c001eb9a:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001eb9d:	66 31 db             	xor    bx,bx
c001eba0:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001eba3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001eba7:	66 ed                	in     ax,dx
c001eba9:	0f b7 c0             	movzx  eax,ax
c001ebac:	09 d8                	or     eax,ebx
c001ebae:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ebb1:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ebb5:	e9 dc 00 00 00       	jmp    c001ec96 <Vm::faultHandler(regs*)+0x7cf>
c001ebba:	50                   	push   eax
c001ebbb:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ebbe:	53                   	push   ebx
c001ebbf:	68 11 bd 02 c0       	push   0xc002bd11
c001ebc4:	e8 1e 3d ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ebc9:	58                   	pop    eax
c001ebca:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ebce:	5a                   	pop    edx
c001ebcf:	50                   	push   eax
c001ebd0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ebd4:	50                   	push   eax
c001ebd5:	e8 0b f5 ff ff       	call   c001e0e5 <Vm::outbv(unsigned short, unsigned char)>
c001ebda:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ebde:	e9 85 00 00 00       	jmp    c001ec68 <Vm::faultHandler(regs*)+0x7a1>
c001ebe3:	50                   	push   eax
c001ebe4:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ebe7:	53                   	push   ebx
c001ebe8:	68 1a bd 02 c0       	push   0xc002bd1a
c001ebed:	e8 f5 3c ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ebf2:	83 c4 10             	add    esp,0x10
c001ebf5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ebf9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ebfe:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ec01:	74 03                	je     c001ec06 <Vm::faultHandler(regs*)+0x73f>
c001ec03:	ef                   	out    dx,eax
c001ec04:	eb ab                	jmp    c001ebb1 <Vm::faultHandler(regs*)+0x6ea>
c001ec06:	66 ef                	out    dx,ax
c001ec08:	eb a7                	jmp    c001ebb1 <Vm::faultHandler(regs*)+0x6ea>
c001ec0a:	55                   	push   ebp
c001ec0b:	55                   	push   ebp
c001ec0c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec0f:	68 23 bd 02 c0       	push   0xc002bd23
c001ec14:	e8 ce 3c ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ec19:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001ec20:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ec24:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec27:	e8 a6 f4 ff ff       	call   c001e0d2 <Vm::inbv(unsigned short)>
c001ec2c:	0f b6 c0             	movzx  eax,al
c001ec2f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001ec32:	eb 31                	jmp    c001ec65 <Vm::faultHandler(regs*)+0x79e>
c001ec34:	56                   	push   esi
c001ec35:	56                   	push   esi
c001ec36:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec39:	68 29 bd 02 c0       	push   0xc002bd29
c001ec3e:	e8 a4 3c ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ec43:	83 c4 10             	add    esp,0x10
c001ec46:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ec49:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec4e:	74 03                	je     c001ec53 <Vm::faultHandler(regs*)+0x78c>
c001ec50:	ed                   	in     eax,dx
c001ec51:	eb 0d                	jmp    c001ec60 <Vm::faultHandler(regs*)+0x799>
c001ec53:	66 ed                	in     ax,dx
c001ec55:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001ec58:	0f b7 c0             	movzx  eax,ax
c001ec5b:	66 31 d2             	xor    dx,dx
c001ec5e:	09 d0                	or     eax,edx
c001ec60:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ec63:	eb 2e                	jmp    c001ec93 <Vm::faultHandler(regs*)+0x7cc>
c001ec65:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec68:	83 c4 10             	add    esp,0x10
c001ec6b:	eb 29                	jmp    c001ec96 <Vm::faultHandler(regs*)+0x7cf>
c001ec6d:	50                   	push   eax
c001ec6e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ec71:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec74:	68 38 bd 02 c0       	push   0xc002bd38
c001ec79:	e8 69 3c ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ec7e:	83 c4 10             	add    esp,0x10
c001ec81:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ec84:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec89:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ec8c:	74 03                	je     c001ec91 <Vm::faultHandler(regs*)+0x7ca>
c001ec8e:	ef                   	out    dx,eax
c001ec8f:	eb 02                	jmp    c001ec93 <Vm::faultHandler(regs*)+0x7cc>
c001ec91:	66 ef                	out    dx,ax
c001ec93:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec96:	b0 01                	mov    al,0x1
c001ec98:	eb 56                	jmp    c001ecf0 <Vm::faultHandler(regs*)+0x829>
c001ec9a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ec9e:	51                   	push   ecx
c001ec9f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001eca3:	51                   	push   ecx
c001eca4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001eca8:	51                   	push   ecx
c001eca9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ecad:	51                   	push   ecx
c001ecae:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ecb2:	52                   	push   edx
c001ecb3:	50                   	push   eax
c001ecb4:	50                   	push   eax
c001ecb5:	68 41 bd 02 c0       	push   0xc002bd41
c001ecba:	e8 28 3c ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ecbf:	83 c4 20             	add    esp,0x20
c001ecc2:	83 ec 0c             	sub    esp,0xc
c001ecc5:	6a 60                	push   0x60
c001ecc7:	e8 06 f4 ff ff       	call   c001e0d2 <Vm::inbv(unsigned short)>
c001eccc:	83 c4 10             	add    esp,0x10
c001eccf:	3c 1c                	cmp    al,0x1c
c001ecd1:	74 04                	je     c001ecd7 <Vm::faultHandler(regs*)+0x810>
c001ecd3:	3c 5a                	cmp    al,0x5a
c001ecd5:	75 eb                	jne    c001ecc2 <Vm::faultHandler(regs*)+0x7fb>
c001ecd7:	3c 1c                	cmp    al,0x1c
c001ecd9:	74 04                	je     c001ecdf <Vm::faultHandler(regs*)+0x818>
c001ecdb:	3c 5a                	cmp    al,0x5a
c001ecdd:	75 0f                	jne    c001ecee <Vm::faultHandler(regs*)+0x827>
c001ecdf:	83 ec 0c             	sub    esp,0xc
c001ece2:	6a 60                	push   0x60
c001ece4:	e8 e9 f3 ff ff       	call   c001e0d2 <Vm::inbv(unsigned short)>
c001ece9:	83 c4 10             	add    esp,0x10
c001ecec:	eb e9                	jmp    c001ecd7 <Vm::faultHandler(regs*)+0x810>
c001ecee:	31 c0                	xor    eax,eax
c001ecf0:	83 c4 1c             	add    esp,0x1c
c001ecf3:	5b                   	pop    ebx
c001ecf4:	5e                   	pop    esi
c001ecf5:	5f                   	pop    edi
c001ecf6:	5d                   	pop    ebp
c001ecf7:	c3                   	ret    

c001ecf8 <Vm::fpuInternalTo32(unsigned long long)>:
c001ecf8:	57                   	push   edi
c001ecf9:	56                   	push   esi
c001ecfa:	53                   	push   ebx
c001ecfb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed03:	89 d6                	mov    esi,edx
c001ed05:	89 d7                	mov    edi,edx
c001ed07:	89 c1                	mov    ecx,eax
c001ed09:	c1 ef 14             	shr    edi,0x14
c001ed0c:	89 d3                	mov    ebx,edx
c001ed0e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ed14:	31 d2                	xor    edx,edx
c001ed16:	89 f8                	mov    eax,edi
c001ed18:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ed1e:	bf ff 00 00 00       	mov    edi,0xff
c001ed23:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ed28:	83 d2 ff             	adc    edx,0xffffffff
c001ed2b:	39 c7                	cmp    edi,eax
c001ed2d:	bf 00 00 00 00       	mov    edi,0x0
c001ed32:	19 d7                	sbb    edi,edx
c001ed34:	72 15                	jb     c001ed4b <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ed36:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ed3a:	c1 e0 17             	shl    eax,0x17
c001ed3d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ed43:	09 f1                	or     ecx,esi
c001ed45:	09 c1                	or     ecx,eax
c001ed47:	89 cf                	mov    edi,ecx
c001ed49:	eb 02                	jmp    c001ed4d <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ed4b:	31 ff                	xor    edi,edi
c001ed4d:	89 f8                	mov    eax,edi
c001ed4f:	5b                   	pop    ebx
c001ed50:	5e                   	pop    esi
c001ed51:	5f                   	pop    edi
c001ed52:	c3                   	ret    

c001ed53 <Vm::fpuInternalTo64(unsigned long long)>:
c001ed53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed5b:	c3                   	ret    

c001ed5c <Vm::fpu32ToInternal(unsigned int)>:
c001ed5c:	57                   	push   edi
c001ed5d:	31 ff                	xor    edi,edi
c001ed5f:	56                   	push   esi
c001ed60:	53                   	push   ebx
c001ed61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed65:	89 cb                	mov    ebx,ecx
c001ed67:	89 ce                	mov    esi,ecx
c001ed69:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ed6f:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ed75:	c1 e9 17             	shr    ecx,0x17
c001ed78:	89 f0                	mov    eax,esi
c001ed7a:	0f b6 d1             	movzx  edx,cl
c001ed7d:	81 c2 80 03 00 00    	add    edx,0x380
c001ed83:	89 d1                	mov    ecx,edx
c001ed85:	89 fa                	mov    edx,edi
c001ed87:	c1 e1 14             	shl    ecx,0x14
c001ed8a:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ed8e:	c1 e0 1d             	shl    eax,0x1d
c001ed91:	89 d7                	mov    edi,edx
c001ed93:	89 c6                	mov    esi,eax
c001ed95:	89 ca                	mov    edx,ecx
c001ed97:	89 f0                	mov    eax,esi
c001ed99:	09 fa                	or     edx,edi
c001ed9b:	09 da                	or     edx,ebx
c001ed9d:	5b                   	pop    ebx
c001ed9e:	5e                   	pop    esi
c001ed9f:	5f                   	pop    edi
c001eda0:	c3                   	ret    

c001eda1 <Vm::fpu64ToInternal(unsigned long long)>:
c001eda1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eda5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eda9:	c3                   	ret    

c001edaa <Vm::fpuFloatToLong(unsigned long long)>:
c001edaa:	57                   	push   edi
c001edab:	31 c0                	xor    eax,eax
c001edad:	56                   	push   esi
c001edae:	31 d2                	xor    edx,edx
c001edb0:	53                   	push   ebx
c001edb1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001edb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001edb9:	89 d9                	mov    ecx,ebx
c001edbb:	c1 e9 14             	shr    ecx,0x14
c001edbe:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001edc4:	89 cf                	mov    edi,ecx
c001edc6:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001edcc:	78 33                	js     c001ee01 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001edce:	89 d9                	mov    ecx,ebx
c001edd0:	89 f0                	mov    eax,esi
c001edd2:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001edd8:	81 c9 00 00 10 00    	or     ecx,0x100000
c001edde:	89 ca                	mov    edx,ecx
c001ede0:	b9 34 00 00 00       	mov    ecx,0x34
c001ede5:	29 f9                	sub    ecx,edi
c001ede7:	0f ad d0             	shrd   eax,edx,cl
c001edea:	d3 fa                	sar    edx,cl
c001edec:	f6 c1 20             	test   cl,0x20
c001edef:	74 05                	je     c001edf6 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001edf1:	89 d0                	mov    eax,edx
c001edf3:	c1 fa 1f             	sar    edx,0x1f
c001edf6:	85 db                	test   ebx,ebx
c001edf8:	79 07                	jns    c001ee01 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001edfa:	f7 d8                	neg    eax
c001edfc:	83 d2 00             	adc    edx,0x0
c001edff:	f7 da                	neg    edx
c001ee01:	5b                   	pop    ebx
c001ee02:	5e                   	pop    esi
c001ee03:	5f                   	pop    edi
c001ee04:	c3                   	ret    

c001ee05 <Vm::fpuULongToFloat(unsigned long long)>:
c001ee05:	57                   	push   edi
c001ee06:	31 c9                	xor    ecx,ecx
c001ee08:	56                   	push   esi
c001ee09:	53                   	push   ebx
c001ee0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee0e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ee12:	0f ba e7 14          	bt     edi,0x14
c001ee16:	72 07                	jb     c001ee1f <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ee18:	01 f6                	add    esi,esi
c001ee1a:	11 ff                	adc    edi,edi
c001ee1c:	41                   	inc    ecx
c001ee1d:	eb f3                	jmp    c001ee12 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ee1f:	89 fa                	mov    edx,edi
c001ee21:	89 f0                	mov    eax,esi
c001ee23:	bb 33 04 00 00       	mov    ebx,0x433
c001ee28:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ee2e:	29 cb                	sub    ebx,ecx
c001ee30:	89 d9                	mov    ecx,ebx
c001ee32:	5b                   	pop    ebx
c001ee33:	c1 e1 14             	shl    ecx,0x14
c001ee36:	5e                   	pop    esi
c001ee37:	09 ca                	or     edx,ecx
c001ee39:	5f                   	pop    edi
c001ee3a:	c3                   	ret    

c001ee3b <Vm::fpuLongToFloat(long long)>:
c001ee3b:	56                   	push   esi
c001ee3c:	31 c0                	xor    eax,eax
c001ee3e:	53                   	push   ebx
c001ee3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ee47:	39 c8                	cmp    eax,ecx
c001ee49:	19 d8                	sbb    eax,ebx
c001ee4b:	7d 04                	jge    c001ee51 <Vm::fpuLongToFloat(long long)+0x16>
c001ee4d:	31 f6                	xor    esi,esi
c001ee4f:	eb 0c                	jmp    c001ee5d <Vm::fpuLongToFloat(long long)+0x22>
c001ee51:	f7 d9                	neg    ecx
c001ee53:	be 01 00 00 00       	mov    esi,0x1
c001ee58:	83 d3 00             	adc    ebx,0x0
c001ee5b:	f7 db                	neg    ebx
c001ee5d:	31 c0                	xor    eax,eax
c001ee5f:	0f ba e3 14          	bt     ebx,0x14
c001ee63:	72 07                	jb     c001ee6c <Vm::fpuLongToFloat(long long)+0x31>
c001ee65:	01 c9                	add    ecx,ecx
c001ee67:	11 db                	adc    ebx,ebx
c001ee69:	40                   	inc    eax
c001ee6a:	eb f3                	jmp    c001ee5f <Vm::fpuLongToFloat(long long)+0x24>
c001ee6c:	ba 33 04 00 00       	mov    edx,0x433
c001ee71:	29 c2                	sub    edx,eax
c001ee73:	89 c8                	mov    eax,ecx
c001ee75:	c1 e2 14             	shl    edx,0x14
c001ee78:	89 d9                	mov    ecx,ebx
c001ee7a:	89 f3                	mov    ebx,esi
c001ee7c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ee82:	09 ca                	or     edx,ecx
c001ee84:	84 db                	test   bl,bl
c001ee86:	74 06                	je     c001ee8e <Vm::fpuLongToFloat(long long)+0x53>
c001ee88:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ee8e:	5b                   	pop    ebx
c001ee8f:	5e                   	pop    esi
c001ee90:	c3                   	ret    

c001ee91 <Vm::fpuGet0()>:
c001ee91:	31 c0                	xor    eax,eax
c001ee93:	31 d2                	xor    edx,edx
c001ee95:	c3                   	ret    

c001ee96 <Vm::fpuGet1()>:
c001ee96:	b8 01 00 00 00       	mov    eax,0x1
c001ee9b:	31 d2                	xor    edx,edx
c001ee9d:	c3                   	ret    

c001ee9e <Vm::fpuGetPi()>:
c001ee9e:	b8 03 00 00 00       	mov    eax,0x3
c001eea3:	31 d2                	xor    edx,edx
c001eea5:	c3                   	ret    

c001eea6 <Vm::fpuGetLog2E()>:
c001eea6:	83 ec 18             	sub    esp,0x18
c001eea9:	68 a0 bd 02 c0       	push   0xc002bda0
c001eeae:	e8 a8 af ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001eeb3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eeb8:	31 d2                	xor    edx,edx
c001eeba:	83 c4 1c             	add    esp,0x1c
c001eebd:	c3                   	ret    

c001eebe <Vm::fpuGetLogE2()>:
c001eebe:	83 ec 18             	sub    esp,0x18
c001eec1:	68 ac bd 02 c0       	push   0xc002bdac
c001eec6:	e8 90 af ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001eecb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eed0:	31 d2                	xor    edx,edx
c001eed2:	83 c4 1c             	add    esp,0x1c
c001eed5:	c3                   	ret    

c001eed6 <Vm::fpuGetLog210()>:
c001eed6:	83 ec 18             	sub    esp,0x18
c001eed9:	68 b8 bd 02 c0       	push   0xc002bdb8
c001eede:	e8 78 af ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001eee3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eee8:	31 d2                	xor    edx,edx
c001eeea:	83 c4 1c             	add    esp,0x1c
c001eeed:	c3                   	ret    

c001eeee <Vm::fpuGetLog102()>:
c001eeee:	83 ec 18             	sub    esp,0x18
c001eef1:	68 c5 bd 02 c0       	push   0xc002bdc5
c001eef6:	e8 60 af ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001eefb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef00:	31 d2                	xor    edx,edx
c001ef02:	83 c4 1c             	add    esp,0x1c
c001ef05:	c3                   	ret    

c001ef06 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ef06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef0a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ef0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef12:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ef16:	0f 92 c0             	setb   al
c001ef19:	c3                   	ret    

c001ef1a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ef1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ef1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef22:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ef26:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ef2a:	09 c2                	or     edx,eax
c001ef2c:	0f 94 c0             	sete   al
c001ef2f:	c3                   	ret    

c001ef30 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ef30:	57                   	push   edi
c001ef31:	56                   	push   esi
c001ef32:	53                   	push   ebx
c001ef33:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef37:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef3b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ef3f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef43:	57                   	push   edi
c001ef44:	56                   	push   esi
c001ef45:	53                   	push   ebx
c001ef46:	51                   	push   ecx
c001ef47:	e8 ce ff ff ff       	call   c001ef1a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ef4c:	83 c4 10             	add    esp,0x10
c001ef4f:	88 c2                	mov    dl,al
c001ef51:	31 c0                	xor    eax,eax
c001ef53:	84 d2                	test   dl,dl
c001ef55:	75 0c                	jne    c001ef63 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ef57:	57                   	push   edi
c001ef58:	56                   	push   esi
c001ef59:	53                   	push   ebx
c001ef5a:	51                   	push   ecx
c001ef5b:	e8 a6 ff ff ff       	call   c001ef06 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ef60:	83 c4 10             	add    esp,0x10
c001ef63:	83 e0 01             	and    eax,0x1
c001ef66:	5b                   	pop    ebx
c001ef67:	88 c1                	mov    cl,al
c001ef69:	83 e2 01             	and    edx,0x1
c001ef6c:	a0 a1 10 03 c0       	mov    al,ds:0xc00310a1
c001ef71:	c1 e2 06             	shl    edx,0x6
c001ef74:	83 e0 ba             	and    eax,0xffffffba
c001ef77:	5e                   	pop    esi
c001ef78:	09 c8                	or     eax,ecx
c001ef7a:	5f                   	pop    edi
c001ef7b:	09 d0                	or     eax,edx
c001ef7d:	a2 a1 10 03 c0       	mov    ds:0xc00310a1,al
c001ef82:	c3                   	ret    

c001ef83 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ef83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef8b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ef8f:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ef93:	c3                   	ret    

c001ef94 <Vm::fpuAbs(unsigned long long)>:
c001ef94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef9c:	c3                   	ret    

c001ef9d <Vm::fpuChs(unsigned long long)>:
c001ef9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efa5:	f7 d8                	neg    eax
c001efa7:	83 d2 00             	adc    edx,0x0
c001efaa:	f7 da                	neg    edx
c001efac:	c3                   	ret    

c001efad <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001efad:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001efb1:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001efb6:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001efba:	eb c7                	jmp    c001ef83 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001efbc <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001efbc:	53                   	push   ebx
c001efbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001efc1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efc5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001efc9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efcd:	0f af ca             	imul   ecx,edx
c001efd0:	0f af d8             	imul   ebx,eax
c001efd3:	f7 e2                	mul    edx
c001efd5:	01 d9                	add    ecx,ebx
c001efd7:	5b                   	pop    ebx
c001efd8:	01 ca                	add    edx,ecx
c001efda:	c3                   	ret    

c001efdb <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001efdb:	83 ec 0c             	sub    esp,0xc
c001efde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efee:	e8 59 71 00 00       	call   c002614c <__udivdi3>
c001eff3:	83 c4 1c             	add    esp,0x1c
c001eff6:	c3                   	ret    

c001eff7 <Vm::fpuSquare(unsigned long long)>:
c001eff7:	50                   	push   eax
c001eff8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001effc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f000:	52                   	push   edx
c001f001:	50                   	push   eax
c001f002:	52                   	push   edx
c001f003:	50                   	push   eax
c001f004:	e8 b3 ff ff ff       	call   c001efbc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f009:	83 c4 14             	add    esp,0x14
c001f00c:	c3                   	ret    

c001f00d <Vm::fpuGetReg(int)>:
c001f00d:	83 ec 0c             	sub    esp,0xc
c001f010:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f015:	76 10                	jbe    c001f027 <Vm::fpuGetReg(int)+0x1a>
c001f017:	83 ec 0c             	sub    esp,0xc
c001f01a:	68 d2 bd 02 c0       	push   0xc002bdd2
c001f01f:	e8 37 ae ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001f024:	83 c4 10             	add    esp,0x10
c001f027:	a0 a1 10 03 c0       	mov    al,ds:0xc00310a1
c001f02c:	b9 08 00 00 00       	mov    ecx,0x8
c001f031:	c0 e8 03             	shr    al,0x3
c001f034:	83 e0 07             	and    eax,0x7
c001f037:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f03b:	99                   	cdq    
c001f03c:	f7 f9                	idiv   ecx
c001f03e:	8b 04 d5 a4 10 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcef5c]
c001f045:	8b 14 d5 a8 10 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcef58]
c001f04c:	83 c4 0c             	add    esp,0xc
c001f04f:	c3                   	ret    

c001f050 <Vm::fpuSetReg(int, unsigned long long)>:
c001f050:	57                   	push   edi
c001f051:	56                   	push   esi
c001f052:	52                   	push   edx
c001f053:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f057:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f05b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f060:	76 10                	jbe    c001f072 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f062:	83 ec 0c             	sub    esp,0xc
c001f065:	68 e5 bd 02 c0       	push   0xc002bde5
c001f06a:	e8 ec ad ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c001f06f:	83 c4 10             	add    esp,0x10
c001f072:	a0 a1 10 03 c0       	mov    al,ds:0xc00310a1
c001f077:	b9 08 00 00 00       	mov    ecx,0x8
c001f07c:	c0 e8 03             	shr    al,0x3
c001f07f:	83 e0 07             	and    eax,0x7
c001f082:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f086:	99                   	cdq    
c001f087:	f7 f9                	idiv   ecx
c001f089:	89 34 d5 a4 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcef5c],esi
c001f090:	89 3c d5 a8 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcef58],edi
c001f097:	58                   	pop    eax
c001f098:	5e                   	pop    esi
c001f099:	5f                   	pop    edi
c001f09a:	c3                   	ret    

c001f09b <Vm::fpuPush(unsigned long long)>:
c001f09b:	a0 a1 10 03 c0       	mov    al,ds:0xc00310a1
c001f0a0:	c0 e8 03             	shr    al,0x3
c001f0a3:	83 e0 07             	and    eax,0x7
c001f0a6:	83 c0 07             	add    eax,0x7
c001f0a9:	88 c2                	mov    dl,al
c001f0ab:	83 e0 07             	and    eax,0x7
c001f0ae:	83 e2 07             	and    edx,0x7
c001f0b1:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f0b8:	8a 15 a1 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310a1
c001f0be:	83 e2 c7             	and    edx,0xffffffc7
c001f0c1:	09 ca                	or     edx,ecx
c001f0c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f0c7:	88 15 a1 10 03 c0    	mov    BYTE PTR ds:0xc00310a1,dl
c001f0cd:	89 0c c5 a8 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef58],ecx
c001f0d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f0d8:	89 14 c5 a4 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef5c],edx
c001f0df:	a1 e4 10 03 c0       	mov    eax,ds:0xc00310e4
c001f0e4:	83 f8 08             	cmp    eax,0x8
c001f0e7:	75 08                	jne    c001f0f1 <Vm::fpuPush(unsigned long long)+0x56>
c001f0e9:	80 0d a0 10 03 c0 40 	or     BYTE PTR ds:0xc00310a0,0x40
c001f0f0:	c3                   	ret    
c001f0f1:	40                   	inc    eax
c001f0f2:	a3 e4 10 03 c0       	mov    ds:0xc00310e4,eax
c001f0f7:	c3                   	ret    

c001f0f8 <Vm::fpuPop()>:
c001f0f8:	8a 0d a1 10 03 c0    	mov    cl,BYTE PTR ds:0xc00310a1
c001f0fe:	53                   	push   ebx
c001f0ff:	c0 e9 03             	shr    cl,0x3
c001f102:	8a 1d a1 10 03 c0    	mov    bl,BYTE PTR ds:0xc00310a1
c001f108:	83 e1 07             	and    ecx,0x7
c001f10b:	83 e3 c7             	and    ebx,0xffffffc7
c001f10e:	8b 04 cd a4 10 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcef5c]
c001f115:	8b 14 cd a8 10 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcef58]
c001f11c:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f123:	83 e1 38             	and    ecx,0x38
c001f126:	09 d9                	or     ecx,ebx
c001f128:	88 0d a1 10 03 c0    	mov    BYTE PTR ds:0xc00310a1,cl
c001f12e:	8b 0d e4 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310e4
c001f134:	85 c9                	test   ecx,ecx
c001f136:	74 09                	je     c001f141 <Vm::fpuPop()+0x49>
c001f138:	49                   	dec    ecx
c001f139:	89 0d e4 10 03 c0    	mov    DWORD PTR ds:0xc00310e4,ecx
c001f13f:	eb 07                	jmp    c001f148 <Vm::fpuPop()+0x50>
c001f141:	80 0d a0 10 03 c0 40 	or     BYTE PTR ds:0xc00310a0,0x40
c001f148:	5b                   	pop    ebx
c001f149:	c3                   	ret    

c001f14a <Vm::x87Handler(regs*)>:
c001f14a:	55                   	push   ebp
c001f14b:	57                   	push   edi
c001f14c:	56                   	push   esi
c001f14d:	53                   	push   ebx
c001f14e:	83 ec 1c             	sub    esp,0x1c
c001f151:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f155:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f15a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f15d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f165:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f169:	50                   	push   eax
c001f16a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f16e:	50                   	push   eax
c001f16f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f173:	50                   	push   eax
c001f174:	53                   	push   ebx
c001f175:	e8 12 a5 ff ff       	call   c001968c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f17a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f17d:	83 c4 10             	add    esp,0x10
c001f180:	89 c6                	mov    esi,eax
c001f182:	80 fa d9             	cmp    dl,0xd9
c001f185:	0f 85 52 01 00 00    	jne    c001f2dd <Vm::x87Handler(regs*)+0x193>
c001f18b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f18f:	8d 50 20             	lea    edx,[eax+0x20]
c001f192:	80 fa 0e             	cmp    dl,0xe
c001f195:	0f 87 86 00 00 00    	ja     c001f221 <Vm::x87Handler(regs*)+0xd7>
c001f19b:	0f b6 d2             	movzx  edx,dl
c001f19e:	ff 24 95 f8 bd 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd4208]
c001f1a5:	e8 e7 fc ff ff       	call   c001ee91 <Vm::fpuGet0()>
c001f1aa:	eb 05                	jmp    c001f1b1 <Vm::x87Handler(regs*)+0x67>
c001f1ac:	e8 e5 fc ff ff       	call   c001ee96 <Vm::fpuGet1()>
c001f1b1:	57                   	push   edi
c001f1b2:	57                   	push   edi
c001f1b3:	52                   	push   edx
c001f1b4:	50                   	push   eax
c001f1b5:	e8 e1 fe ff ff       	call   c001f09b <Vm::fpuPush(unsigned long long)>
c001f1ba:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f1be:	83 c4 10             	add    esp,0x10
c001f1c1:	b0 01                	mov    al,0x1
c001f1c3:	e9 e3 09 00 00       	jmp    c001fbab <Vm::x87Handler(regs*)+0xa61>
c001f1c8:	83 ec 0c             	sub    esp,0xc
c001f1cb:	6a 00                	push   0x0
c001f1cd:	e8 3b fe ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f1d2:	59                   	pop    ecx
c001f1d3:	5e                   	pop    esi
c001f1d4:	52                   	push   edx
c001f1d5:	50                   	push   eax
c001f1d6:	e8 c2 fd ff ff       	call   c001ef9d <Vm::fpuChs(unsigned long long)>
c001f1db:	eb 13                	jmp    c001f1f0 <Vm::x87Handler(regs*)+0xa6>
c001f1dd:	83 ec 0c             	sub    esp,0xc
c001f1e0:	6a 00                	push   0x0
c001f1e2:	e8 26 fe ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f1e7:	5f                   	pop    edi
c001f1e8:	5d                   	pop    ebp
c001f1e9:	52                   	push   edx
c001f1ea:	50                   	push   eax
c001f1eb:	e8 a4 fd ff ff       	call   c001ef94 <Vm::fpuAbs(unsigned long long)>
c001f1f0:	83 c4 0c             	add    esp,0xc
c001f1f3:	52                   	push   edx
c001f1f4:	50                   	push   eax
c001f1f5:	6a 00                	push   0x0
c001f1f7:	e8 54 fe ff ff       	call   c001f050 <Vm::fpuSetReg(int, unsigned long long)>
c001f1fc:	eb bc                	jmp    c001f1ba <Vm::x87Handler(regs*)+0x70>
c001f1fe:	e8 d3 fc ff ff       	call   c001eed6 <Vm::fpuGetLog210()>
c001f203:	eb ac                	jmp    c001f1b1 <Vm::x87Handler(regs*)+0x67>
c001f205:	e8 9c fc ff ff       	call   c001eea6 <Vm::fpuGetLog2E()>
c001f20a:	eb a5                	jmp    c001f1b1 <Vm::x87Handler(regs*)+0x67>
c001f20c:	e8 8d fc ff ff       	call   c001ee9e <Vm::fpuGetPi()>
c001f211:	eb 9e                	jmp    c001f1b1 <Vm::x87Handler(regs*)+0x67>
c001f213:	e8 d6 fc ff ff       	call   c001eeee <Vm::fpuGetLog102()>
c001f218:	eb 97                	jmp    c001f1b1 <Vm::x87Handler(regs*)+0x67>
c001f21a:	e8 9f fc ff ff       	call   c001eebe <Vm::fpuGetLogE2()>
c001f21f:	eb 90                	jmp    c001f1b1 <Vm::x87Handler(regs*)+0x67>
c001f221:	8d 50 40             	lea    edx,[eax+0x40]
c001f224:	80 fa 07             	cmp    dl,0x7
c001f227:	77 15                	ja     c001f23e <Vm::x87Handler(regs*)+0xf4>
c001f229:	83 ec 0c             	sub    esp,0xc
c001f22c:	2d c0 00 00 00       	sub    eax,0xc0
c001f231:	50                   	push   eax
c001f232:	e8 d6 fd ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f237:	59                   	pop    ecx
c001f238:	5e                   	pop    esi
c001f239:	e9 75 ff ff ff       	jmp    c001f1b3 <Vm::x87Handler(regs*)+0x69>
c001f23e:	8d 50 38             	lea    edx,[eax+0x38]
c001f241:	80 fa 07             	cmp    dl,0x7
c001f244:	77 3c                	ja     c001f282 <Vm::x87Handler(regs*)+0x138>
c001f246:	83 ec 0c             	sub    esp,0xc
c001f249:	2d c8 00 00 00       	sub    eax,0xc8
c001f24e:	50                   	push   eax
c001f24f:	e8 b9 fd ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f254:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f25b:	89 c6                	mov    esi,eax
c001f25d:	89 d7                	mov    edi,edx
c001f25f:	e8 a9 fd ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f264:	83 c4 0c             	add    esp,0xc
c001f267:	52                   	push   edx
c001f268:	50                   	push   eax
c001f269:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f26d:	2d c8 00 00 00       	sub    eax,0xc8
c001f272:	50                   	push   eax
c001f273:	e8 d8 fd ff ff       	call   c001f050 <Vm::fpuSetReg(int, unsigned long long)>
c001f278:	83 c4 0c             	add    esp,0xc
c001f27b:	57                   	push   edi
c001f27c:	56                   	push   esi
c001f27d:	e9 73 ff ff ff       	jmp    c001f1f5 <Vm::x87Handler(regs*)+0xab>
c001f282:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f286:	84 d2                	test   dl,dl
c001f288:	75 0f                	jne    c001f299 <Vm::x87Handler(regs*)+0x14f>
c001f28a:	83 ec 0c             	sub    esp,0xc
c001f28d:	ff 36                	push   DWORD PTR [esi]
c001f28f:	e8 c8 fa ff ff       	call   c001ed5c <Vm::fpu32ToInternal(unsigned int)>
c001f294:	e9 bf 00 00 00       	jmp    c001f358 <Vm::x87Handler(regs*)+0x20e>
c001f299:	80 fa 03             	cmp    dl,0x3
c001f29c:	75 13                	jne    c001f2b1 <Vm::x87Handler(regs*)+0x167>
c001f29e:	e8 55 fe ff ff       	call   c001f0f8 <Vm::fpuPop()>
c001f2a3:	55                   	push   ebp
c001f2a4:	55                   	push   ebp
c001f2a5:	52                   	push   edx
c001f2a6:	50                   	push   eax
c001f2a7:	e8 4c fa ff ff       	call   c001ecf8 <Vm::fpuInternalTo32(unsigned long long)>
c001f2ac:	e9 88 00 00 00       	jmp    c001f339 <Vm::x87Handler(regs*)+0x1ef>
c001f2b1:	80 fa 05             	cmp    dl,0x5
c001f2b4:	75 0e                	jne    c001f2c4 <Vm::x87Handler(regs*)+0x17a>
c001f2b6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f2b9:	66 a3 a2 10 03 c0    	mov    ds:0xc00310a2,ax
c001f2bf:	e9 df 00 00 00       	jmp    c001f3a3 <Vm::x87Handler(regs*)+0x259>
c001f2c4:	31 c0                	xor    eax,eax
c001f2c6:	80 fa 07             	cmp    dl,0x7
c001f2c9:	0f 85 dc 08 00 00    	jne    c001fbab <Vm::x87Handler(regs*)+0xa61>
c001f2cf:	66 a1 a2 10 03 c0    	mov    ax,ds:0xc00310a2
c001f2d5:	66 89 06             	mov    WORD PTR [esi],ax
c001f2d8:	e9 c6 00 00 00       	jmp    c001f3a3 <Vm::x87Handler(regs*)+0x259>
c001f2dd:	80 fa d8             	cmp    dl,0xd8
c001f2e0:	0f 84 c9 00 00 00    	je     c001f3af <Vm::x87Handler(regs*)+0x265>
c001f2e6:	80 fa dc             	cmp    dl,0xdc
c001f2e9:	0f 84 0d 02 00 00    	je     c001f4fc <Vm::x87Handler(regs*)+0x3b2>
c001f2ef:	80 fa de             	cmp    dl,0xde
c001f2f2:	0f 84 cd 02 00 00    	je     c001f5c5 <Vm::x87Handler(regs*)+0x47b>
c001f2f8:	80 fa dd             	cmp    dl,0xdd
c001f2fb:	0f 84 5f 04 00 00    	je     c001f760 <Vm::x87Handler(regs*)+0x616>
c001f301:	80 fa da             	cmp    dl,0xda
c001f304:	0f 84 24 05 00 00    	je     c001f82e <Vm::x87Handler(regs*)+0x6e4>
c001f30a:	80 fa df             	cmp    dl,0xdf
c001f30d:	0f 84 68 05 00 00    	je     c001f87b <Vm::x87Handler(regs*)+0x731>
c001f313:	31 c0                	xor    eax,eax
c001f315:	80 fa db             	cmp    dl,0xdb
c001f318:	0f 85 8d 08 00 00    	jne    c001fbab <Vm::x87Handler(regs*)+0xa61>
c001f31e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f322:	80 fa 03             	cmp    dl,0x3
c001f325:	0f 85 70 06 00 00    	jne    c001f99b <Vm::x87Handler(regs*)+0x851>
c001f32b:	e8 c8 fd ff ff       	call   c001f0f8 <Vm::fpuPop()>
c001f330:	55                   	push   ebp
c001f331:	55                   	push   ebp
c001f332:	52                   	push   edx
c001f333:	50                   	push   eax
c001f334:	e8 71 fa ff ff       	call   c001edaa <Vm::fpuFloatToLong(unsigned long long)>
c001f339:	83 c4 10             	add    esp,0x10
c001f33c:	89 06                	mov    DWORD PTR [esi],eax
c001f33e:	eb 63                	jmp    c001f3a3 <Vm::x87Handler(regs*)+0x259>
c001f340:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f344:	84 d2                	test   dl,dl
c001f346:	0f 85 e6 05 00 00    	jne    c001f932 <Vm::x87Handler(regs*)+0x7e8>
c001f34c:	57                   	push   edi
c001f34d:	57                   	push   edi
c001f34e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f351:	ff 36                	push   DWORD PTR [esi]
c001f353:	e8 49 fa ff ff       	call   c001eda1 <Vm::fpu64ToInternal(unsigned long long)>
c001f358:	5e                   	pop    esi
c001f359:	5f                   	pop    edi
c001f35a:	52                   	push   edx
c001f35b:	50                   	push   eax
c001f35c:	e8 3a fd ff ff       	call   c001f09b <Vm::fpuPush(unsigned long long)>
c001f361:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f365:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f368:	e9 51 fe ff ff       	jmp    c001f1be <Vm::x87Handler(regs*)+0x74>
c001f36d:	80 fa 03             	cmp    dl,0x3
c001f370:	0f 85 d7 06 00 00    	jne    c001fa4d <Vm::x87Handler(regs*)+0x903>
c001f376:	57                   	push   edi
c001f377:	57                   	push   edi
c001f378:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f37b:	ff 36                	push   DWORD PTR [esi]
c001f37d:	e8 1f fa ff ff       	call   c001eda1 <Vm::fpu64ToInternal(unsigned long long)>
c001f382:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f389:	89 c6                	mov    esi,eax
c001f38b:	89 d7                	mov    edi,edx
c001f38d:	e8 7b fc ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f392:	57                   	push   edi
c001f393:	56                   	push   esi
c001f394:	52                   	push   edx
c001f395:	50                   	push   eax
c001f396:	e8 95 fb ff ff       	call   c001ef30 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f39b:	83 c4 20             	add    esp,0x20
c001f39e:	e8 55 fd ff ff       	call   c001f0f8 <Vm::fpuPop()>
c001f3a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3a7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f3aa:	e9 12 fe ff ff       	jmp    c001f1c1 <Vm::x87Handler(regs*)+0x77>
c001f3af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3b3:	8d 50 40             	lea    edx,[eax+0x40]
c001f3b6:	80 fa 07             	cmp    dl,0x7
c001f3b9:	77 29                	ja     c001f3e4 <Vm::x87Handler(regs*)+0x29a>
c001f3bb:	83 ec 0c             	sub    esp,0xc
c001f3be:	2d c0 00 00 00       	sub    eax,0xc0
c001f3c3:	50                   	push   eax
c001f3c4:	e8 44 fc ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f3c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3d0:	89 c6                	mov    esi,eax
c001f3d2:	89 d7                	mov    edi,edx
c001f3d4:	e8 34 fc ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f3d9:	57                   	push   edi
c001f3da:	56                   	push   esi
c001f3db:	52                   	push   edx
c001f3dc:	50                   	push   eax
c001f3dd:	e8 a1 fb ff ff       	call   c001ef83 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f3e2:	eb 2f                	jmp    c001f413 <Vm::x87Handler(regs*)+0x2c9>
c001f3e4:	8d 50 38             	lea    edx,[eax+0x38]
c001f3e7:	80 fa 07             	cmp    dl,0x7
c001f3ea:	77 2f                	ja     c001f41b <Vm::x87Handler(regs*)+0x2d1>
c001f3ec:	83 ec 0c             	sub    esp,0xc
c001f3ef:	2d c8 00 00 00       	sub    eax,0xc8
c001f3f4:	50                   	push   eax
c001f3f5:	e8 13 fc ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f3fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f401:	89 c6                	mov    esi,eax
c001f403:	89 d7                	mov    edi,edx
c001f405:	e8 03 fc ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f40a:	57                   	push   edi
c001f40b:	56                   	push   esi
c001f40c:	52                   	push   edx
c001f40d:	50                   	push   eax
c001f40e:	e8 a9 fb ff ff       	call   c001efbc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f413:	83 c4 1c             	add    esp,0x1c
c001f416:	e9 d8 fd ff ff       	jmp    c001f1f3 <Vm::x87Handler(regs*)+0xa9>
c001f41b:	8d 50 30             	lea    edx,[eax+0x30]
c001f41e:	80 fa 07             	cmp    dl,0x7
c001f421:	77 0d                	ja     c001f430 <Vm::x87Handler(regs*)+0x2e6>
c001f423:	83 ec 0c             	sub    esp,0xc
c001f426:	2d d0 00 00 00       	sub    eax,0xd0
c001f42b:	e9 99 03 00 00       	jmp    c001f7c9 <Vm::x87Handler(regs*)+0x67f>
c001f430:	8d 50 28             	lea    edx,[eax+0x28]
c001f433:	80 fa 07             	cmp    dl,0x7
c001f436:	77 0d                	ja     c001f445 <Vm::x87Handler(regs*)+0x2fb>
c001f438:	83 ec 0c             	sub    esp,0xc
c001f43b:	2d d8 00 00 00       	sub    eax,0xd8
c001f440:	e9 c0 03 00 00       	jmp    c001f805 <Vm::x87Handler(regs*)+0x6bb>
c001f445:	8d 50 20             	lea    edx,[eax+0x20]
c001f448:	80 fa 07             	cmp    dl,0x7
c001f44b:	77 1b                	ja     c001f468 <Vm::x87Handler(regs*)+0x31e>
c001f44d:	83 ec 0c             	sub    esp,0xc
c001f450:	2d e0 00 00 00       	sub    eax,0xe0
c001f455:	50                   	push   eax
c001f456:	e8 b2 fb ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f45b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f462:	89 c6                	mov    esi,eax
c001f464:	89 d7                	mov    edi,edx
c001f466:	eb 22                	jmp    c001f48a <Vm::x87Handler(regs*)+0x340>
c001f468:	8d 50 18             	lea    edx,[eax+0x18]
c001f46b:	80 fa 07             	cmp    dl,0x7
c001f46e:	77 2d                	ja     c001f49d <Vm::x87Handler(regs*)+0x353>
c001f470:	83 ec 0c             	sub    esp,0xc
c001f473:	6a 00                	push   0x0
c001f475:	e8 93 fb ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f47a:	89 c6                	mov    esi,eax
c001f47c:	89 d7                	mov    edi,edx
c001f47e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f482:	2d e8 00 00 00       	sub    eax,0xe8
c001f487:	89 04 24             	mov    DWORD PTR [esp],eax
c001f48a:	e8 7e fb ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f48f:	57                   	push   edi
c001f490:	56                   	push   esi
c001f491:	52                   	push   edx
c001f492:	50                   	push   eax
c001f493:	e8 15 fb ff ff       	call   c001efad <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f498:	e9 76 ff ff ff       	jmp    c001f413 <Vm::x87Handler(regs*)+0x2c9>
c001f49d:	8d 50 10             	lea    edx,[eax+0x10]
c001f4a0:	80 fa 07             	cmp    dl,0x7
c001f4a3:	77 1b                	ja     c001f4c0 <Vm::x87Handler(regs*)+0x376>
c001f4a5:	83 ec 0c             	sub    esp,0xc
c001f4a8:	2d f0 00 00 00       	sub    eax,0xf0
c001f4ad:	50                   	push   eax
c001f4ae:	e8 5a fb ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f4b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4ba:	89 c6                	mov    esi,eax
c001f4bc:	89 d7                	mov    edi,edx
c001f4be:	eb 22                	jmp    c001f4e2 <Vm::x87Handler(regs*)+0x398>
c001f4c0:	3c f7                	cmp    al,0xf7
c001f4c2:	0f 86 d1 03 00 00    	jbe    c001f899 <Vm::x87Handler(regs*)+0x74f>
c001f4c8:	83 ec 0c             	sub    esp,0xc
c001f4cb:	6a 00                	push   0x0
c001f4cd:	e8 3b fb ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f4d2:	89 c6                	mov    esi,eax
c001f4d4:	89 d7                	mov    edi,edx
c001f4d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4da:	2d f8 00 00 00       	sub    eax,0xf8
c001f4df:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4e2:	e8 26 fb ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f4e7:	57                   	push   edi
c001f4e8:	56                   	push   esi
c001f4e9:	52                   	push   edx
c001f4ea:	50                   	push   eax
c001f4eb:	e8 eb fa ff ff       	call   c001efdb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f4f0:	83 c4 1c             	add    esp,0x1c
c001f4f3:	52                   	push   edx
c001f4f4:	50                   	push   eax
c001f4f5:	6a 00                	push   0x0
c001f4f7:	e9 51 02 00 00       	jmp    c001f74d <Vm::x87Handler(regs*)+0x603>
c001f4fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f500:	8d 50 40             	lea    edx,[eax+0x40]
c001f503:	80 fa 07             	cmp    dl,0x7
c001f506:	77 37                	ja     c001f53f <Vm::x87Handler(regs*)+0x3f5>
c001f508:	83 ec 0c             	sub    esp,0xc
c001f50b:	2d c0 00 00 00       	sub    eax,0xc0
c001f510:	50                   	push   eax
c001f511:	e8 f7 fa ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f516:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f51d:	89 c6                	mov    esi,eax
c001f51f:	89 d7                	mov    edi,edx
c001f521:	e8 e7 fa ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f526:	57                   	push   edi
c001f527:	56                   	push   esi
c001f528:	52                   	push   edx
c001f529:	50                   	push   eax
c001f52a:	e8 54 fa ff ff       	call   c001ef83 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f52f:	83 c4 1c             	add    esp,0x1c
c001f532:	52                   	push   edx
c001f533:	50                   	push   eax
c001f534:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f538:	2d c0 00 00 00       	sub    eax,0xc0
c001f53d:	eb 3d                	jmp    c001f57c <Vm::x87Handler(regs*)+0x432>
c001f53f:	8d 50 38             	lea    edx,[eax+0x38]
c001f542:	80 fa 07             	cmp    dl,0x7
c001f545:	77 3b                	ja     c001f582 <Vm::x87Handler(regs*)+0x438>
c001f547:	83 ec 0c             	sub    esp,0xc
c001f54a:	2d c8 00 00 00       	sub    eax,0xc8
c001f54f:	50                   	push   eax
c001f550:	e8 b8 fa ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f555:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f55c:	89 c6                	mov    esi,eax
c001f55e:	89 d7                	mov    edi,edx
c001f560:	e8 a8 fa ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f565:	57                   	push   edi
c001f566:	56                   	push   esi
c001f567:	52                   	push   edx
c001f568:	50                   	push   eax
c001f569:	e8 4e fa ff ff       	call   c001efbc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f56e:	83 c4 1c             	add    esp,0x1c
c001f571:	52                   	push   edx
c001f572:	50                   	push   eax
c001f573:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f577:	2d c8 00 00 00       	sub    eax,0xc8
c001f57c:	50                   	push   eax
c001f57d:	e9 75 fc ff ff       	jmp    c001f1f7 <Vm::x87Handler(regs*)+0xad>
c001f582:	83 c0 18             	add    eax,0x18
c001f585:	3c 07                	cmp    al,0x7
c001f587:	0f 87 3b 04 00 00    	ja     c001f9c8 <Vm::x87Handler(regs*)+0x87e>
c001f58d:	83 ec 0c             	sub    esp,0xc
c001f590:	6a 00                	push   0x0
c001f592:	e8 76 fa ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f597:	89 c6                	mov    esi,eax
c001f599:	89 d7                	mov    edi,edx
c001f59b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f59f:	2d e8 00 00 00       	sub    eax,0xe8
c001f5a4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5a7:	e8 61 fa ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f5ac:	57                   	push   edi
c001f5ad:	56                   	push   esi
c001f5ae:	52                   	push   edx
c001f5af:	50                   	push   eax
c001f5b0:	e8 f8 f9 ff ff       	call   c001efad <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f5b5:	83 c4 1c             	add    esp,0x1c
c001f5b8:	52                   	push   edx
c001f5b9:	50                   	push   eax
c001f5ba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5be:	2d e8 00 00 00       	sub    eax,0xe8
c001f5c3:	eb b7                	jmp    c001f57c <Vm::x87Handler(regs*)+0x432>
c001f5c5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5c9:	8d 50 40             	lea    edx,[eax+0x40]
c001f5cc:	80 fa 07             	cmp    dl,0x7
c001f5cf:	77 3a                	ja     c001f60b <Vm::x87Handler(regs*)+0x4c1>
c001f5d1:	83 ec 0c             	sub    esp,0xc
c001f5d4:	2d c0 00 00 00       	sub    eax,0xc0
c001f5d9:	50                   	push   eax
c001f5da:	e8 2e fa ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f5df:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5e6:	89 c6                	mov    esi,eax
c001f5e8:	89 d7                	mov    edi,edx
c001f5ea:	e8 1e fa ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f5ef:	57                   	push   edi
c001f5f0:	56                   	push   esi
c001f5f1:	52                   	push   edx
c001f5f2:	50                   	push   eax
c001f5f3:	e8 8b f9 ff ff       	call   c001ef83 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f5f8:	83 c4 1c             	add    esp,0x1c
c001f5fb:	52                   	push   edx
c001f5fc:	50                   	push   eax
c001f5fd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f601:	2d c0 00 00 00       	sub    eax,0xc0
c001f606:	e9 9e 01 00 00       	jmp    c001f7a9 <Vm::x87Handler(regs*)+0x65f>
c001f60b:	8d 50 20             	lea    edx,[eax+0x20]
c001f60e:	80 fa 07             	cmp    dl,0x7
c001f611:	77 3a                	ja     c001f64d <Vm::x87Handler(regs*)+0x503>
c001f613:	83 ec 0c             	sub    esp,0xc
c001f616:	2d e0 00 00 00       	sub    eax,0xe0
c001f61b:	50                   	push   eax
c001f61c:	e8 ec f9 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f621:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f628:	89 c6                	mov    esi,eax
c001f62a:	89 d7                	mov    edi,edx
c001f62c:	e8 dc f9 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f631:	57                   	push   edi
c001f632:	56                   	push   esi
c001f633:	52                   	push   edx
c001f634:	50                   	push   eax
c001f635:	e8 73 f9 ff ff       	call   c001efad <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f63a:	83 c4 1c             	add    esp,0x1c
c001f63d:	52                   	push   edx
c001f63e:	50                   	push   eax
c001f63f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f643:	2d e0 00 00 00       	sub    eax,0xe0
c001f648:	e9 5c 01 00 00       	jmp    c001f7a9 <Vm::x87Handler(regs*)+0x65f>
c001f64d:	8d 50 18             	lea    edx,[eax+0x18]
c001f650:	80 fa 07             	cmp    dl,0x7
c001f653:	77 3b                	ja     c001f690 <Vm::x87Handler(regs*)+0x546>
c001f655:	83 ec 0c             	sub    esp,0xc
c001f658:	6a 00                	push   0x0
c001f65a:	e8 ae f9 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f65f:	89 c6                	mov    esi,eax
c001f661:	89 d7                	mov    edi,edx
c001f663:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f667:	2d e8 00 00 00       	sub    eax,0xe8
c001f66c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f66f:	e8 99 f9 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f674:	57                   	push   edi
c001f675:	56                   	push   esi
c001f676:	52                   	push   edx
c001f677:	50                   	push   eax
c001f678:	e8 30 f9 ff ff       	call   c001efad <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f67d:	83 c4 1c             	add    esp,0x1c
c001f680:	52                   	push   edx
c001f681:	50                   	push   eax
c001f682:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f686:	2d e8 00 00 00       	sub    eax,0xe8
c001f68b:	e9 19 01 00 00       	jmp    c001f7a9 <Vm::x87Handler(regs*)+0x65f>
c001f690:	8d 50 38             	lea    edx,[eax+0x38]
c001f693:	80 fa 07             	cmp    dl,0x7
c001f696:	77 37                	ja     c001f6cf <Vm::x87Handler(regs*)+0x585>
c001f698:	83 ec 0c             	sub    esp,0xc
c001f69b:	2d c8 00 00 00       	sub    eax,0xc8
c001f6a0:	50                   	push   eax
c001f6a1:	e8 67 f9 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f6a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6ad:	89 c6                	mov    esi,eax
c001f6af:	89 d7                	mov    edi,edx
c001f6b1:	e8 57 f9 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f6b6:	57                   	push   edi
c001f6b7:	56                   	push   esi
c001f6b8:	52                   	push   edx
c001f6b9:	50                   	push   eax
c001f6ba:	e8 fd f8 ff ff       	call   c001efbc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f6bf:	83 c4 1c             	add    esp,0x1c
c001f6c2:	52                   	push   edx
c001f6c3:	50                   	push   eax
c001f6c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6c8:	2d c8 00 00 00       	sub    eax,0xc8
c001f6cd:	eb 7d                	jmp    c001f74c <Vm::x87Handler(regs*)+0x602>
c001f6cf:	3c f7                	cmp    al,0xf7
c001f6d1:	76 38                	jbe    c001f70b <Vm::x87Handler(regs*)+0x5c1>
c001f6d3:	83 ec 0c             	sub    esp,0xc
c001f6d6:	6a 00                	push   0x0
c001f6d8:	e8 30 f9 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f6dd:	89 c6                	mov    esi,eax
c001f6df:	89 d7                	mov    edi,edx
c001f6e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6e5:	2d f8 00 00 00       	sub    eax,0xf8
c001f6ea:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6ed:	e8 1b f9 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f6f2:	57                   	push   edi
c001f6f3:	56                   	push   esi
c001f6f4:	52                   	push   edx
c001f6f5:	50                   	push   eax
c001f6f6:	e8 e0 f8 ff ff       	call   c001efdb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f6fb:	83 c4 1c             	add    esp,0x1c
c001f6fe:	52                   	push   edx
c001f6ff:	50                   	push   eax
c001f700:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f704:	2d f8 00 00 00       	sub    eax,0xf8
c001f709:	eb 41                	jmp    c001f74c <Vm::x87Handler(regs*)+0x602>
c001f70b:	8d 50 10             	lea    edx,[eax+0x10]
c001f70e:	80 fa 07             	cmp    dl,0x7
c001f711:	0f 87 5a 01 00 00    	ja     c001f871 <Vm::x87Handler(regs*)+0x727>
c001f717:	83 ec 0c             	sub    esp,0xc
c001f71a:	2d f0 00 00 00       	sub    eax,0xf0
c001f71f:	50                   	push   eax
c001f720:	e8 e8 f8 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f725:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f72c:	89 c6                	mov    esi,eax
c001f72e:	89 d7                	mov    edi,edx
c001f730:	e8 d8 f8 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f735:	57                   	push   edi
c001f736:	56                   	push   esi
c001f737:	52                   	push   edx
c001f738:	50                   	push   eax
c001f739:	e8 9d f8 ff ff       	call   c001efdb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f73e:	83 c4 1c             	add    esp,0x1c
c001f741:	52                   	push   edx
c001f742:	50                   	push   eax
c001f743:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f747:	2d f0 00 00 00       	sub    eax,0xf0
c001f74c:	50                   	push   eax
c001f74d:	e8 fe f8 ff ff       	call   c001f050 <Vm::fpuSetReg(int, unsigned long long)>
c001f752:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f756:	e8 9d f9 ff ff       	call   c001f0f8 <Vm::fpuPop()>
c001f75b:	e9 5e fa ff ff       	jmp    c001f1be <Vm::x87Handler(regs*)+0x74>
c001f760:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f764:	8d 50 30             	lea    edx,[eax+0x30]
c001f767:	80 fa 07             	cmp    dl,0x7
c001f76a:	77 1d                	ja     c001f789 <Vm::x87Handler(regs*)+0x63f>
c001f76c:	83 ec 0c             	sub    esp,0xc
c001f76f:	6a 00                	push   0x0
c001f771:	e8 97 f8 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f776:	83 c4 0c             	add    esp,0xc
c001f779:	52                   	push   edx
c001f77a:	50                   	push   eax
c001f77b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f77f:	2d d0 00 00 00       	sub    eax,0xd0
c001f784:	e9 f3 fd ff ff       	jmp    c001f57c <Vm::x87Handler(regs*)+0x432>
c001f789:	8d 50 28             	lea    edx,[eax+0x28]
c001f78c:	80 fa 07             	cmp    dl,0x7
c001f78f:	77 28                	ja     c001f7b9 <Vm::x87Handler(regs*)+0x66f>
c001f791:	83 ec 0c             	sub    esp,0xc
c001f794:	6a 00                	push   0x0
c001f796:	e8 72 f8 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f79b:	83 c4 0c             	add    esp,0xc
c001f79e:	52                   	push   edx
c001f79f:	50                   	push   eax
c001f7a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7a4:	2d d8 00 00 00       	sub    eax,0xd8
c001f7a9:	50                   	push   eax
c001f7aa:	e8 a1 f8 ff ff       	call   c001f050 <Vm::fpuSetReg(int, unsigned long long)>
c001f7af:	e8 44 f9 ff ff       	call   c001f0f8 <Vm::fpuPop()>
c001f7b4:	e9 01 fa ff ff       	jmp    c001f1ba <Vm::x87Handler(regs*)+0x70>
c001f7b9:	8d 50 20             	lea    edx,[eax+0x20]
c001f7bc:	80 fa 07             	cmp    dl,0x7
c001f7bf:	77 30                	ja     c001f7f1 <Vm::x87Handler(regs*)+0x6a7>
c001f7c1:	83 ec 0c             	sub    esp,0xc
c001f7c4:	2d e0 00 00 00       	sub    eax,0xe0
c001f7c9:	50                   	push   eax
c001f7ca:	e8 3e f8 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f7cf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7d6:	89 c6                	mov    esi,eax
c001f7d8:	89 d7                	mov    edi,edx
c001f7da:	e8 2e f8 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f7df:	57                   	push   edi
c001f7e0:	56                   	push   esi
c001f7e1:	52                   	push   edx
c001f7e2:	50                   	push   eax
c001f7e3:	e8 48 f7 ff ff       	call   c001ef30 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f7e8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f7ec:	e9 54 02 00 00       	jmp    c001fa45 <Vm::x87Handler(regs*)+0x8fb>
c001f7f1:	8d 50 18             	lea    edx,[eax+0x18]
c001f7f4:	80 fa 07             	cmp    dl,0x7
c001f7f7:	0f 87 43 fb ff ff    	ja     c001f340 <Vm::x87Handler(regs*)+0x1f6>
c001f7fd:	83 ec 0c             	sub    esp,0xc
c001f800:	2d e8 00 00 00       	sub    eax,0xe8
c001f805:	50                   	push   eax
c001f806:	e8 02 f8 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f80b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f812:	89 c6                	mov    esi,eax
c001f814:	89 d7                	mov    edi,edx
c001f816:	e8 f2 f7 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f81b:	57                   	push   edi
c001f81c:	56                   	push   esi
c001f81d:	52                   	push   edx
c001f81e:	50                   	push   eax
c001f81f:	e8 0c f7 ff ff       	call   c001ef30 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f824:	83 c4 20             	add    esp,0x20
c001f827:	e8 cc f8 ff ff       	call   c001f0f8 <Vm::fpuPop()>
c001f82c:	eb 62                	jmp    c001f890 <Vm::x87Handler(regs*)+0x746>
c001f82e:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f832:	0f 85 0f 01 00 00    	jne    c001f947 <Vm::x87Handler(regs*)+0x7fd>
c001f838:	83 ec 0c             	sub    esp,0xc
c001f83b:	6a 01                	push   0x1
c001f83d:	e8 cb f7 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f842:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f849:	89 c6                	mov    esi,eax
c001f84b:	89 d7                	mov    edi,edx
c001f84d:	e8 bb f7 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f852:	57                   	push   edi
c001f853:	56                   	push   esi
c001f854:	52                   	push   edx
c001f855:	50                   	push   eax
c001f856:	e8 d5 f6 ff ff       	call   c001ef30 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f85b:	83 c4 20             	add    esp,0x20
c001f85e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f862:	e8 91 f8 ff ff       	call   c001f0f8 <Vm::fpuPop()>
c001f867:	e8 8c f8 ff ff       	call   c001f0f8 <Vm::fpuPop()>
c001f86c:	e9 50 f9 ff ff       	jmp    c001f1c1 <Vm::x87Handler(regs*)+0x77>
c001f871:	3c d9                	cmp    al,0xd9
c001f873:	0f 85 b5 02 00 00    	jne    c001fb2e <Vm::x87Handler(regs*)+0x9e4>
c001f879:	eb bd                	jmp    c001f838 <Vm::x87Handler(regs*)+0x6ee>
c001f87b:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f87f:	0f 85 ea 02 00 00    	jne    c001fb6f <Vm::x87Handler(regs*)+0xa25>
c001f885:	0f b7 05 a0 10 03 c0 	movzx  eax,WORD PTR ds:0xc00310a0
c001f88c:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f890:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f894:	e9 28 f9 ff ff       	jmp    c001f1c1 <Vm::x87Handler(regs*)+0x77>
c001f899:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f89d:	84 d2                	test   dl,dl
c001f89f:	75 0f                	jne    c001f8b0 <Vm::x87Handler(regs*)+0x766>
c001f8a1:	83 ec 0c             	sub    esp,0xc
c001f8a4:	ff 36                	push   DWORD PTR [esi]
c001f8a6:	e8 b1 f4 ff ff       	call   c001ed5c <Vm::fpu32ToInternal(unsigned int)>
c001f8ab:	e9 2c 01 00 00       	jmp    c001f9dc <Vm::x87Handler(regs*)+0x892>
c001f8b0:	80 fa 01             	cmp    dl,0x1
c001f8b3:	75 0f                	jne    c001f8c4 <Vm::x87Handler(regs*)+0x77a>
c001f8b5:	83 ec 0c             	sub    esp,0xc
c001f8b8:	ff 36                	push   DWORD PTR [esi]
c001f8ba:	e8 9d f4 ff ff       	call   c001ed5c <Vm::fpu32ToInternal(unsigned int)>
c001f8bf:	e9 81 02 00 00       	jmp    c001fb45 <Vm::x87Handler(regs*)+0x9fb>
c001f8c4:	80 fa 04             	cmp    dl,0x4
c001f8c7:	75 0f                	jne    c001f8d8 <Vm::x87Handler(regs*)+0x78e>
c001f8c9:	83 ec 0c             	sub    esp,0xc
c001f8cc:	ff 36                	push   DWORD PTR [esi]
c001f8ce:	e8 89 f4 ff ff       	call   c001ed5c <Vm::fpu32ToInternal(unsigned int)>
c001f8d3:	e9 86 01 00 00       	jmp    c001fa5e <Vm::x87Handler(regs*)+0x914>
c001f8d8:	80 fa 05             	cmp    dl,0x5
c001f8db:	75 1b                	jne    c001f8f8 <Vm::x87Handler(regs*)+0x7ae>
c001f8dd:	83 ec 0c             	sub    esp,0xc
c001f8e0:	6a 00                	push   0x0
c001f8e2:	e8 26 f7 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f8e7:	89 c7                	mov    edi,eax
c001f8e9:	89 d5                	mov    ebp,edx
c001f8eb:	58                   	pop    eax
c001f8ec:	ff 36                	push   DWORD PTR [esi]
c001f8ee:	e8 69 f4 ff ff       	call   c001ed5c <Vm::fpu32ToInternal(unsigned int)>
c001f8f3:	e9 a3 01 00 00       	jmp    c001fa9b <Vm::x87Handler(regs*)+0x951>
c001f8f8:	80 fa 06             	cmp    dl,0x6
c001f8fb:	75 0f                	jne    c001f90c <Vm::x87Handler(regs*)+0x7c2>
c001f8fd:	83 ec 0c             	sub    esp,0xc
c001f900:	ff 36                	push   DWORD PTR [esi]
c001f902:	e8 55 f4 ff ff       	call   c001ed5c <Vm::fpu32ToInternal(unsigned int)>
c001f907:	e9 ae 01 00 00       	jmp    c001faba <Vm::x87Handler(regs*)+0x970>
c001f90c:	31 c0                	xor    eax,eax
c001f90e:	80 fa 07             	cmp    dl,0x7
c001f911:	0f 85 94 02 00 00    	jne    c001fbab <Vm::x87Handler(regs*)+0xa61>
c001f917:	83 ec 0c             	sub    esp,0xc
c001f91a:	6a 00                	push   0x0
c001f91c:	e8 ec f6 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f921:	89 c7                	mov    edi,eax
c001f923:	89 d5                	mov    ebp,edx
c001f925:	58                   	pop    eax
c001f926:	ff 36                	push   DWORD PTR [esi]
c001f928:	e8 2f f4 ff ff       	call   c001ed5c <Vm::fpu32ToInternal(unsigned int)>
c001f92d:	e9 cb 01 00 00       	jmp    c001fafd <Vm::x87Handler(regs*)+0x9b3>
c001f932:	80 fa 03             	cmp    dl,0x3
c001f935:	0f 85 d3 01 00 00    	jne    c001fb0e <Vm::x87Handler(regs*)+0x9c4>
c001f93b:	e8 b8 f7 ff ff       	call   c001f0f8 <Vm::fpuPop()>
c001f940:	51                   	push   ecx
c001f941:	51                   	push   ecx
c001f942:	e9 de 01 00 00       	jmp    c001fb25 <Vm::x87Handler(regs*)+0x9db>
c001f947:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f94b:	80 fa 01             	cmp    dl,0x1
c001f94e:	75 09                	jne    c001f959 <Vm::x87Handler(regs*)+0x80f>
c001f950:	57                   	push   edi
c001f951:	57                   	push   edi
c001f952:	8b 06                	mov    eax,DWORD PTR [esi]
c001f954:	e9 e3 01 00 00       	jmp    c001fb3c <Vm::x87Handler(regs*)+0x9f2>
c001f959:	80 fa 04             	cmp    dl,0x4
c001f95c:	75 12                	jne    c001f970 <Vm::x87Handler(regs*)+0x826>
c001f95e:	31 d2                	xor    edx,edx
c001f960:	51                   	push   ecx
c001f961:	51                   	push   ecx
c001f962:	8b 06                	mov    eax,DWORD PTR [esi]
c001f964:	52                   	push   edx
c001f965:	50                   	push   eax
c001f966:	e8 d0 f4 ff ff       	call   c001ee3b <Vm::fpuLongToFloat(long long)>
c001f96b:	e9 ee 00 00 00       	jmp    c001fa5e <Vm::x87Handler(regs*)+0x914>
c001f970:	31 c0                	xor    eax,eax
c001f972:	80 fa 07             	cmp    dl,0x7
c001f975:	0f 85 30 02 00 00    	jne    c001fbab <Vm::x87Handler(regs*)+0xa61>
c001f97b:	83 ec 0c             	sub    esp,0xc
c001f97e:	6a 00                	push   0x0
c001f980:	e8 88 f6 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f985:	89 c7                	mov    edi,eax
c001f987:	89 d5                	mov    ebp,edx
c001f989:	58                   	pop    eax
c001f98a:	8b 06                	mov    eax,DWORD PTR [esi]
c001f98c:	5a                   	pop    edx
c001f98d:	31 d2                	xor    edx,edx
c001f98f:	52                   	push   edx
c001f990:	50                   	push   eax
c001f991:	e8 a5 f4 ff ff       	call   c001ee3b <Vm::fpuLongToFloat(long long)>
c001f996:	e9 62 01 00 00       	jmp    c001fafd <Vm::x87Handler(regs*)+0x9b3>
c001f99b:	84 d2                	test   dl,dl
c001f99d:	75 0d                	jne    c001f9ac <Vm::x87Handler(regs*)+0x862>
c001f99f:	31 d2                	xor    edx,edx
c001f9a1:	55                   	push   ebp
c001f9a2:	55                   	push   ebp
c001f9a3:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9a5:	52                   	push   edx
c001f9a6:	50                   	push   eax
c001f9a7:	e9 d3 01 00 00       	jmp    c001fb7f <Vm::x87Handler(regs*)+0xa35>
c001f9ac:	31 c0                	xor    eax,eax
c001f9ae:	80 fa 02             	cmp    dl,0x2
c001f9b1:	0f 85 f4 01 00 00    	jne    c001fbab <Vm::x87Handler(regs*)+0xa61>
c001f9b7:	83 ec 0c             	sub    esp,0xc
c001f9ba:	6a 00                	push   0x0
c001f9bc:	e8 4c f6 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f9c1:	59                   	pop    ecx
c001f9c2:	5f                   	pop    edi
c001f9c3:	e9 6a f9 ff ff       	jmp    c001f332 <Vm::x87Handler(regs*)+0x1e8>
c001f9c8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f9cc:	84 d2                	test   dl,dl
c001f9ce:	75 2a                	jne    c001f9fa <Vm::x87Handler(regs*)+0x8b0>
c001f9d0:	50                   	push   eax
c001f9d1:	50                   	push   eax
c001f9d2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f9d5:	ff 36                	push   DWORD PTR [esi]
c001f9d7:	e8 c5 f3 ff ff       	call   c001eda1 <Vm::fpu64ToInternal(unsigned long long)>
c001f9dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9e3:	89 c6                	mov    esi,eax
c001f9e5:	89 d7                	mov    edi,edx
c001f9e7:	e8 21 f6 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001f9ec:	57                   	push   edi
c001f9ed:	56                   	push   esi
c001f9ee:	52                   	push   edx
c001f9ef:	50                   	push   eax
c001f9f0:	e8 8e f5 ff ff       	call   c001ef83 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f9f5:	e9 64 01 00 00       	jmp    c001fb5e <Vm::x87Handler(regs*)+0xa14>
c001f9fa:	80 fa 01             	cmp    dl,0x1
c001f9fd:	75 11                	jne    c001fa10 <Vm::x87Handler(regs*)+0x8c6>
c001f9ff:	50                   	push   eax
c001fa00:	50                   	push   eax
c001fa01:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa04:	ff 36                	push   DWORD PTR [esi]
c001fa06:	e8 96 f3 ff ff       	call   c001eda1 <Vm::fpu64ToInternal(unsigned long long)>
c001fa0b:	e9 35 01 00 00       	jmp    c001fb45 <Vm::x87Handler(regs*)+0x9fb>
c001fa10:	80 fa 02             	cmp    dl,0x2
c001fa13:	0f 85 54 f9 ff ff    	jne    c001f36d <Vm::x87Handler(regs*)+0x223>
c001fa19:	55                   	push   ebp
c001fa1a:	55                   	push   ebp
c001fa1b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa1e:	ff 36                	push   DWORD PTR [esi]
c001fa20:	e8 7c f3 ff ff       	call   c001eda1 <Vm::fpu64ToInternal(unsigned long long)>
c001fa25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa2c:	89 c6                	mov    esi,eax
c001fa2e:	89 d7                	mov    edi,edx
c001fa30:	e8 d8 f5 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001fa35:	57                   	push   edi
c001fa36:	56                   	push   esi
c001fa37:	52                   	push   edx
c001fa38:	50                   	push   eax
c001fa39:	e8 f2 f4 ff ff       	call   c001ef30 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fa42:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fa45:	83 c4 20             	add    esp,0x20
c001fa48:	e9 74 f7 ff ff       	jmp    c001f1c1 <Vm::x87Handler(regs*)+0x77>
c001fa4d:	80 fa 04             	cmp    dl,0x4
c001fa50:	75 2a                	jne    c001fa7c <Vm::x87Handler(regs*)+0x932>
c001fa52:	51                   	push   ecx
c001fa53:	51                   	push   ecx
c001fa54:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa57:	ff 36                	push   DWORD PTR [esi]
c001fa59:	e8 43 f3 ff ff       	call   c001eda1 <Vm::fpu64ToInternal(unsigned long long)>
c001fa5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa65:	89 c6                	mov    esi,eax
c001fa67:	89 d7                	mov    edi,edx
c001fa69:	e8 9f f5 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001fa6e:	57                   	push   edi
c001fa6f:	56                   	push   esi
c001fa70:	52                   	push   edx
c001fa71:	50                   	push   eax
c001fa72:	e8 36 f5 ff ff       	call   c001efad <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa77:	e9 e2 00 00 00       	jmp    c001fb5e <Vm::x87Handler(regs*)+0xa14>
c001fa7c:	80 fa 05             	cmp    dl,0x5
c001fa7f:	75 28                	jne    c001faa9 <Vm::x87Handler(regs*)+0x95f>
c001fa81:	83 ec 0c             	sub    esp,0xc
c001fa84:	6a 00                	push   0x0
c001fa86:	e8 82 f5 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001fa8b:	89 c7                	mov    edi,eax
c001fa8d:	89 d5                	mov    ebp,edx
c001fa8f:	58                   	pop    eax
c001fa90:	5a                   	pop    edx
c001fa91:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa94:	ff 36                	push   DWORD PTR [esi]
c001fa96:	e8 06 f3 ff ff       	call   c001eda1 <Vm::fpu64ToInternal(unsigned long long)>
c001fa9b:	83 c4 10             	add    esp,0x10
c001fa9e:	55                   	push   ebp
c001fa9f:	57                   	push   edi
c001faa0:	52                   	push   edx
c001faa1:	50                   	push   eax
c001faa2:	e8 06 f5 ff ff       	call   c001efad <Vm::fpuSub(unsigned long long, unsigned long long)>
c001faa7:	eb 60                	jmp    c001fb09 <Vm::x87Handler(regs*)+0x9bf>
c001faa9:	80 fa 06             	cmp    dl,0x6
c001faac:	75 2a                	jne    c001fad8 <Vm::x87Handler(regs*)+0x98e>
c001faae:	51                   	push   ecx
c001faaf:	51                   	push   ecx
c001fab0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fab3:	ff 36                	push   DWORD PTR [esi]
c001fab5:	e8 e7 f2 ff ff       	call   c001eda1 <Vm::fpu64ToInternal(unsigned long long)>
c001faba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fac1:	89 c6                	mov    esi,eax
c001fac3:	89 d7                	mov    edi,edx
c001fac5:	e8 43 f5 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001faca:	57                   	push   edi
c001facb:	56                   	push   esi
c001facc:	52                   	push   edx
c001facd:	50                   	push   eax
c001face:	e8 08 f5 ff ff       	call   c001efdb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fad3:	e9 86 00 00 00       	jmp    c001fb5e <Vm::x87Handler(regs*)+0xa14>
c001fad8:	31 c0                	xor    eax,eax
c001fada:	80 fa 07             	cmp    dl,0x7
c001fadd:	0f 85 c8 00 00 00    	jne    c001fbab <Vm::x87Handler(regs*)+0xa61>
c001fae3:	83 ec 0c             	sub    esp,0xc
c001fae6:	6a 00                	push   0x0
c001fae8:	e8 20 f5 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001faed:	89 c7                	mov    edi,eax
c001faef:	89 d5                	mov    ebp,edx
c001faf1:	58                   	pop    eax
c001faf2:	5a                   	pop    edx
c001faf3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001faf6:	ff 36                	push   DWORD PTR [esi]
c001faf8:	e8 a4 f2 ff ff       	call   c001eda1 <Vm::fpu64ToInternal(unsigned long long)>
c001fafd:	83 c4 10             	add    esp,0x10
c001fb00:	55                   	push   ebp
c001fb01:	57                   	push   edi
c001fb02:	52                   	push   edx
c001fb03:	50                   	push   eax
c001fb04:	e8 d2 f4 ff ff       	call   c001efdb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb09:	83 c4 0c             	add    esp,0xc
c001fb0c:	eb 53                	jmp    c001fb61 <Vm::x87Handler(regs*)+0xa17>
c001fb0e:	31 c0                	xor    eax,eax
c001fb10:	80 fa 02             	cmp    dl,0x2
c001fb13:	0f 85 92 00 00 00    	jne    c001fbab <Vm::x87Handler(regs*)+0xa61>
c001fb19:	83 ec 0c             	sub    esp,0xc
c001fb1c:	6a 00                	push   0x0
c001fb1e:	e8 ea f4 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001fb23:	59                   	pop    ecx
c001fb24:	5f                   	pop    edi
c001fb25:	52                   	push   edx
c001fb26:	50                   	push   eax
c001fb27:	e8 27 f2 ff ff       	call   c001ed53 <Vm::fpuInternalTo64(unsigned long long)>
c001fb2c:	eb 70                	jmp    c001fb9e <Vm::x87Handler(regs*)+0xa54>
c001fb2e:	31 c0                	xor    eax,eax
c001fb30:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fb35:	75 74                	jne    c001fbab <Vm::x87Handler(regs*)+0xa61>
c001fb37:	50                   	push   eax
c001fb38:	50                   	push   eax
c001fb39:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fb3c:	31 d2                	xor    edx,edx
c001fb3e:	52                   	push   edx
c001fb3f:	50                   	push   eax
c001fb40:	e8 f6 f2 ff ff       	call   c001ee3b <Vm::fpuLongToFloat(long long)>
c001fb45:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb4c:	89 c6                	mov    esi,eax
c001fb4e:	89 d7                	mov    edi,edx
c001fb50:	e8 b8 f4 ff ff       	call   c001f00d <Vm::fpuGetReg(int)>
c001fb55:	57                   	push   edi
c001fb56:	56                   	push   esi
c001fb57:	52                   	push   edx
c001fb58:	50                   	push   eax
c001fb59:	e8 5e f4 ff ff       	call   c001efbc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb5e:	83 c4 1c             	add    esp,0x1c
c001fb61:	52                   	push   edx
c001fb62:	50                   	push   eax
c001fb63:	6a 00                	push   0x0
c001fb65:	e8 e6 f4 ff ff       	call   c001f050 <Vm::fpuSetReg(int, unsigned long long)>
c001fb6a:	e9 f2 f7 ff ff       	jmp    c001f361 <Vm::x87Handler(regs*)+0x217>
c001fb6f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb73:	80 fa 05             	cmp    dl,0x5
c001fb76:	75 11                	jne    c001fb89 <Vm::x87Handler(regs*)+0xa3f>
c001fb78:	55                   	push   ebp
c001fb79:	55                   	push   ebp
c001fb7a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb7d:	ff 36                	push   DWORD PTR [esi]
c001fb7f:	e8 81 f2 ff ff       	call   c001ee05 <Vm::fpuULongToFloat(unsigned long long)>
c001fb84:	e9 cf f7 ff ff       	jmp    c001f358 <Vm::x87Handler(regs*)+0x20e>
c001fb89:	31 c0                	xor    eax,eax
c001fb8b:	80 fa 07             	cmp    dl,0x7
c001fb8e:	75 1b                	jne    c001fbab <Vm::x87Handler(regs*)+0xa61>
c001fb90:	e8 63 f5 ff ff       	call   c001f0f8 <Vm::fpuPop()>
c001fb95:	51                   	push   ecx
c001fb96:	51                   	push   ecx
c001fb97:	52                   	push   edx
c001fb98:	50                   	push   eax
c001fb99:	e8 0c f2 ff ff       	call   c001edaa <Vm::fpuFloatToLong(unsigned long long)>
c001fb9e:	83 c4 10             	add    esp,0x10
c001fba1:	89 06                	mov    DWORD PTR [esi],eax
c001fba3:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fba6:	e9 f8 f7 ff ff       	jmp    c001f3a3 <Vm::x87Handler(regs*)+0x259>
c001fbab:	83 c4 1c             	add    esp,0x1c
c001fbae:	5b                   	pop    ebx
c001fbaf:	5e                   	pop    esi
c001fbb0:	5f                   	pop    edi
c001fbb1:	5d                   	pop    ebp
c001fbb2:	c3                   	ret    

c001fbb3 <__static_initialization_and_destruction_0(int, int)>:
c001fbb3:	83 ec 0c             	sub    esp,0xc
c001fbb6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fbbb:	75 1a                	jne    c001fbd7 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fbbd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fbc5:	75 10                	jne    c001fbd7 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fbc7:	83 ec 0c             	sub    esp,0xc
c001fbca:	68 a0 10 03 c0       	push   0xc00310a0
c001fbcf:	e8 cc 88 00 00       	call   c00284a0 <Vm::_FPUState::_FPUState()>
c001fbd4:	83 c4 10             	add    esp,0x10
c001fbd7:	90                   	nop
c001fbd8:	83 c4 0c             	add    esp,0xc
c001fbdb:	c3                   	ret    

c001fbdc <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fbdc:	83 ec 0c             	sub    esp,0xc
c001fbdf:	83 ec 08             	sub    esp,0x8
c001fbe2:	68 ff ff 00 00       	push   0xffff
c001fbe7:	6a 01                	push   0x1
c001fbe9:	e8 c5 ff ff ff       	call   c001fbb3 <__static_initialization_and_destruction_0(int, int)>
c001fbee:	83 c4 10             	add    esp,0x10
c001fbf1:	83 c4 0c             	add    esp,0xc
c001fbf4:	c3                   	ret    
c001fbf5:	90                   	nop

c001fbf6 <FAT::getName()>:
c001fbf6:	b8 34 be 02 c0       	mov    eax,0xc002be34
c001fbfb:	c3                   	ret    

c001fbfc <FAT::tell(void*, unsigned long long*)>:
c001fbfc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc01:	75 06                	jne    c001fc09 <FAT::tell(void*, unsigned long long*)+0xd>
c001fc03:	b8 04 00 00 00       	mov    eax,0x4
c001fc08:	c3                   	ret    
c001fc09:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc0e:	75 06                	jne    c001fc16 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fc10:	b8 04 00 00 00       	mov    eax,0x4
c001fc15:	c3                   	ret    
c001fc16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc1a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fc1d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fc20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc24:	89 01                	mov    DWORD PTR [ecx],eax
c001fc26:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fc29:	b8 00 00 00 00       	mov    eax,0x0
c001fc2e:	c3                   	ret    
c001fc2f:	90                   	nop

c001fc30 <FAT::stat(void*, unsigned long long*)>:
c001fc30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc35:	75 06                	jne    c001fc3d <FAT::stat(void*, unsigned long long*)+0xd>
c001fc37:	b8 04 00 00 00       	mov    eax,0x4
c001fc3c:	c3                   	ret    
c001fc3d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc42:	75 06                	jne    c001fc4a <FAT::stat(void*, unsigned long long*)+0x1a>
c001fc44:	b8 04 00 00 00       	mov    eax,0x4
c001fc49:	c3                   	ret    
c001fc4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc4e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fc51:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fc54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc58:	89 01                	mov    DWORD PTR [ecx],eax
c001fc5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fc5d:	b8 00 00 00 00       	mov    eax,0x0
c001fc62:	c3                   	ret    
c001fc63:	90                   	nop

c001fc64 <FAT::~FAT()>:
c001fc64:	83 ec 0c             	sub    esp,0xc
c001fc67:	ba b8 be 02 c0       	mov    edx,0xc002beb8
c001fc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc70:	89 10                	mov    DWORD PTR [eax],edx
c001fc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc76:	83 ec 0c             	sub    esp,0xc
c001fc79:	50                   	push   eax
c001fc7a:	e8 91 2f ff ff       	call   c0012c10 <Filesystem::~Filesystem()>
c001fc7f:	83 c4 10             	add    esp,0x10
c001fc82:	90                   	nop
c001fc83:	83 c4 0c             	add    esp,0xc
c001fc86:	c3                   	ret    
c001fc87:	90                   	nop

c001fc88 <FAT::~FAT()>:
c001fc88:	83 ec 0c             	sub    esp,0xc
c001fc8b:	83 ec 0c             	sub    esp,0xc
c001fc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc92:	e8 cd ff ff ff       	call   c001fc64 <FAT::~FAT()>
c001fc97:	83 c4 10             	add    esp,0x10
c001fc9a:	83 ec 08             	sub    esp,0x8
c001fc9d:	6a 08                	push   0x8
c001fc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca3:	e8 5f 2b ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c001fca8:	83 c4 10             	add    esp,0x10
c001fcab:	83 c4 0c             	add    esp,0xc
c001fcae:	c3                   	ret    
c001fcaf:	90                   	nop

c001fcb0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fcb0:	83 ec 1c             	sub    esp,0x1c
c001fcb3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fcba:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fcbf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fcc3:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001fcca:	83 f8 ff             	cmp    eax,0xffffffff
c001fccd:	75 34                	jne    c001fd03 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fccf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fcd3:	88 c2                	mov    dl,al
c001fcd5:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001fcda:	01 d0                	add    eax,edx
c001fcdc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fce0:	8b 15 00 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031100
c001fce6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fcea:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001fcf1:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001fcf6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fcfa:	89 14 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],edx
c001fd01:	eb 17                	jmp    c001fd1a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fd03:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd07:	88 c2                	mov    dl,al
c001fd09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd0d:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001fd14:	01 d0                	add    eax,edx
c001fd16:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd1a:	83 ec 04             	sub    esp,0x4
c001fd1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd25:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fd29:	50                   	push   eax
c001fd2a:	e8 e6 6d fe ff       	call   c0006b15 <f_getlabel>
c001fd2f:	83 c4 10             	add    esp,0x10
c001fd32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd36:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd3b:	75 07                	jne    c001fd44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fd3d:	b8 00 00 00 00       	mov    eax,0x0
c001fd42:	eb 05                	jmp    c001fd49 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fd44:	b8 01 00 00 00       	mov    eax,0x1
c001fd49:	83 c4 1c             	add    esp,0x1c
c001fd4c:	c3                   	ret    
c001fd4d:	90                   	nop

c001fd4e <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fd4e:	57                   	push   edi
c001fd4f:	83 ec 58             	sub    esp,0x58
c001fd52:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fd5a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fd5e:	b9 0f 00 00 00       	mov    ecx,0xf
c001fd63:	b8 00 00 00 00       	mov    eax,0x0
c001fd68:	fc                   	cld    
c001fd69:	89 d7                	mov    edi,edx
c001fd6b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fd6d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fd71:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001fd78:	83 f8 ff             	cmp    eax,0xffffffff
c001fd7b:	75 34                	jne    c001fdb1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fd7d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fd81:	88 c2                	mov    dl,al
c001fd83:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001fd88:	01 d0                	add    eax,edx
c001fd8a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd8e:	8b 15 00 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031100
c001fd94:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fd98:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001fd9f:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001fda4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fda8:	89 14 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],edx
c001fdaf:	eb 17                	jmp    c001fdc8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fdb1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fdb5:	88 c2                	mov    dl,al
c001fdb7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fdbb:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001fdc2:	01 d0                	add    eax,edx
c001fdc4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fdc8:	83 ec 08             	sub    esp,0x8
c001fdcb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fdcf:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fdd3:	50                   	push   eax
c001fdd4:	e8 35 0a fe ff       	call   c000080e <strcat>
c001fdd9:	83 c4 10             	add    esp,0x10
c001fddc:	83 ec 0c             	sub    esp,0xc
c001fddf:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fde3:	50                   	push   eax
c001fde4:	e8 1a 6f fe ff       	call   c0006d03 <f_setlabel>
c001fde9:	83 c4 10             	add    esp,0x10
c001fdec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fdf0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fdf5:	75 07                	jne    c001fdfe <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fdf7:	b8 00 00 00 00       	mov    eax,0x0
c001fdfc:	eb 05                	jmp    c001fe03 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fdfe:	b8 01 00 00 00       	mov    eax,0x1
c001fe03:	83 c4 58             	add    esp,0x58
c001fe06:	5f                   	pop    edi
c001fe07:	c3                   	ret    

c001fe08 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fe08:	83 ec 2c             	sub    esp,0x2c
c001fe0b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fe13:	83 ec 08             	sub    esp,0x8
c001fe16:	68 58 be 02 c0       	push   0xc002be58
c001fe1b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe1f:	e8 84 09 fe ff       	call   c00007a8 <strcmp>
c001fe24:	83 c4 10             	add    esp,0x10
c001fe27:	85 c0                	test   eax,eax
c001fe29:	0f 94 c0             	sete   al
c001fe2c:	84 c0                	test   al,al
c001fe2e:	74 0d                	je     c001fe3d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fe30:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe38:	e9 a6 00 00 00       	jmp    c001fee3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe3d:	83 ec 08             	sub    esp,0x8
c001fe40:	68 4a be 02 c0       	push   0xc002be4a
c001fe45:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe49:	e8 5a 09 fe ff       	call   c00007a8 <strcmp>
c001fe4e:	83 c4 10             	add    esp,0x10
c001fe51:	85 c0                	test   eax,eax
c001fe53:	0f 94 c0             	sete   al
c001fe56:	84 c0                	test   al,al
c001fe58:	74 0a                	je     c001fe64 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fe5a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe62:	eb 7f                	jmp    c001fee3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe64:	83 ec 08             	sub    esp,0x8
c001fe67:	68 50 be 02 c0       	push   0xc002be50
c001fe6c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe70:	e8 33 09 fe ff       	call   c00007a8 <strcmp>
c001fe75:	83 c4 10             	add    esp,0x10
c001fe78:	85 c0                	test   eax,eax
c001fe7a:	0f 94 c0             	sete   al
c001fe7d:	84 c0                	test   al,al
c001fe7f:	74 0a                	je     c001fe8b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001fe81:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe89:	eb 58                	jmp    c001fee3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe8b:	83 ec 08             	sub    esp,0x8
c001fe8e:	68 0c 8c 02 c0       	push   0xc0028c0c
c001fe93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe97:	e8 0c 09 fe ff       	call   c00007a8 <strcmp>
c001fe9c:	83 c4 10             	add    esp,0x10
c001fe9f:	85 c0                	test   eax,eax
c001fea1:	0f 94 c0             	sete   al
c001fea4:	84 c0                	test   al,al
c001fea6:	74 0a                	je     c001feb2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001fea8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001feb0:	eb 31                	jmp    c001fee3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001feb2:	83 ec 08             	sub    esp,0x8
c001feb5:	68 56 be 02 c0       	push   0xc002be56
c001feba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001febe:	e8 e5 08 fe ff       	call   c00007a8 <strcmp>
c001fec3:	83 c4 10             	add    esp,0x10
c001fec6:	85 c0                	test   eax,eax
c001fec8:	0f 94 c0             	sete   al
c001fecb:	84 c0                	test   al,al
c001fecd:	74 0a                	je     c001fed9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001fecf:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001fed7:	eb 0a                	jmp    c001fee3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fed9:	b8 08 00 00 00       	mov    eax,0x8
c001fede:	e9 04 01 00 00       	jmp    c001ffe7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fee3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001feea:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001feef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fef3:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001fefa:	83 f8 ff             	cmp    eax,0xffffffff
c001fefd:	75 34                	jne    c001ff33 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001feff:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff03:	88 c2                	mov    dl,al
c001ff05:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001ff0a:	01 d0                	add    eax,edx
c001ff0c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff10:	8b 15 00 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031100
c001ff16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff1a:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001ff21:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001ff26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ff2a:	89 14 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],edx
c001ff31:	eb 17                	jmp    c001ff4a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001ff33:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff37:	88 c2                	mov    dl,al
c001ff39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff3d:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001ff44:	01 d0                	add    eax,edx
c001ff46:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff4e:	88 04 24             	mov    BYTE PTR [esp],al
c001ff51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ff55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff59:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ff61:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ff66:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ff6e:	83 ec 0c             	sub    esp,0xc
c001ff71:	68 00 20 00 00       	push   0x2000
c001ff76:	e8 9d f6 fe ff       	call   c000f618 <malloc>
c001ff7b:	83 c4 10             	add    esp,0x10
c001ff7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ff82:	68 00 20 00 00       	push   0x2000
c001ff87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ff8f:	50                   	push   eax
c001ff90:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ff94:	50                   	push   eax
c001ff95:	e8 b4 71 fe ff       	call   c000714e <f_mkfs>
c001ff9a:	83 c4 10             	add    esp,0x10
c001ff9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ffa1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ffa6:	75 07                	jne    c001ffaf <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001ffa8:	b8 00 00 00 00       	mov    eax,0x0
c001ffad:	eb 38                	jmp    c001ffe7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ffaf:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ffb4:	75 17                	jne    c001ffcd <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001ffb6:	83 ec 0c             	sub    esp,0xc
c001ffb9:	68 88 be 02 c0       	push   0xc002be88
c001ffbe:	e8 24 29 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ffc3:	83 c4 10             	add    esp,0x10
c001ffc6:	b8 09 00 00 00       	mov    eax,0x9
c001ffcb:	eb 1a                	jmp    c001ffe7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ffcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ffd1:	83 ec 08             	sub    esp,0x8
c001ffd4:	50                   	push   eax
c001ffd5:	68 5c be 02 c0       	push   0xc002be5c
c001ffda:	e8 08 29 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c001ffdf:	83 c4 10             	add    esp,0x10
c001ffe2:	b8 01 00 00 00       	mov    eax,0x1
c001ffe7:	83 c4 2c             	add    esp,0x2c
c001ffea:	c3                   	ret    
c001ffeb:	90                   	nop

c001ffec <FAT::tryMount(LogicalDisk*, int)>:
c001ffec:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001fff2:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001fff7:	83 f8 14             	cmp    eax,0x14
c001fffa:	75 17                	jne    c0020013 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001fffc:	83 ec 0c             	sub    esp,0xc
c001ffff:	68 6e be 02 c0       	push   0xc002be6e
c0020004:	e8 52 9e ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0020009:	83 c4 10             	add    esp,0x10
c002000c:	b0 00                	mov    al,0x0
c002000e:	e9 d7 01 00 00       	jmp    c00201ea <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020013:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002001a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020020:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020026:	3d 00 02 00 00       	cmp    eax,0x200
c002002b:	74 07                	je     c0020034 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002002d:	b0 00                	mov    al,0x0
c002002f:	e9 b6 01 00 00       	jmp    c00201ea <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020034:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002003c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020043:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c002004a:	83 f8 ff             	cmp    eax,0xffffffff
c002004d:	74 07                	je     c0020056 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002004f:	b0 01                	mov    al,0x1
c0020051:	e9 94 01 00 00       	jmp    c00201ea <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020056:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020060:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020068:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002006f:	88 c2                	mov    dl,al
c0020071:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c0020076:	01 d0                	add    eax,edx
c0020078:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002007f:	8b 15 00 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031100
c0020085:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002008c:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c0020093:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c0020098:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002009f:	89 14 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],edx
c00200a6:	83 ec 0c             	sub    esp,0xc
c00200a9:	68 54 02 00 00       	push   0x254
c00200ae:	e8 65 f5 fe ff       	call   c000f618 <malloc>
c00200b3:	83 c4 10             	add    esp,0x10
c00200b6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00200bd:	83 ec 04             	sub    esp,0x4
c00200c0:	6a 00                	push   0x0
c00200c2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00200c9:	50                   	push   eax
c00200ca:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00200d1:	e8 36 4c fe ff       	call   c0004d0c <f_mount>
c00200d6:	83 c4 10             	add    esp,0x10
c00200d9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00200e0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00200e8:	74 19                	je     c0020103 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00200ea:	83 ec 0c             	sub    esp,0xc
c00200ed:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00200f4:	e8 3f f5 fe ff       	call   c000f638 <rfree>
c00200f9:	83 c4 10             	add    esp,0x10
c00200fc:	b0 00                	mov    al,0x0
c00200fe:	e9 e7 00 00 00       	jmp    c00201ea <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020103:	83 ec 04             	sub    esp,0x4
c0020106:	68 00 01 00 00       	push   0x100
c002010b:	6a 00                	push   0x0
c002010d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020114:	50                   	push   eax
c0020115:	e8 9e 05 fe ff       	call   c00006b8 <memset>
c002011a:	83 c4 10             	add    esp,0x10
c002011d:	83 ec 08             	sub    esp,0x8
c0020120:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020127:	50                   	push   eax
c0020128:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002012f:	50                   	push   eax
c0020130:	e8 d9 06 fe ff       	call   c000080e <strcat>
c0020135:	83 c4 10             	add    esp,0x10
c0020138:	83 ec 08             	sub    esp,0x8
c002013b:	68 7c be 02 c0       	push   0xc002be7c
c0020140:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020147:	50                   	push   eax
c0020148:	e8 c1 06 fe ff       	call   c000080e <strcat>
c002014d:	83 c4 10             	add    esp,0x10
c0020150:	83 ec 04             	sub    esp,0x4
c0020153:	6a 01                	push   0x1
c0020155:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002015c:	50                   	push   eax
c002015d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020161:	50                   	push   eax
c0020162:	e8 07 4c fe ff       	call   c0004d6e <f_open>
c0020167:	83 c4 10             	add    esp,0x10
c002016a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020171:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020178:	85 c0                	test   eax,eax
c002017a:	74 0a                	je     c0020186 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002017c:	78 2d                	js     c00201ab <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002017e:	83 e8 04             	sub    eax,0x4
c0020181:	83 f8 01             	cmp    eax,0x1
c0020184:	77 25                	ja     c00201ab <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020186:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002018e:	83 ec 0c             	sub    esp,0xc
c0020191:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020195:	50                   	push   eax
c0020196:	e8 25 57 fe ff       	call   c00058c0 <f_close>
c002019b:	83 c4 10             	add    esp,0x10
c002019e:	90                   	nop
c002019f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00201a7:	74 3a                	je     c00201e3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00201a9:	eb 2d                	jmp    c00201d8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00201ab:	83 ec 0c             	sub    esp,0xc
c00201ae:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00201b5:	e8 7e f4 fe ff       	call   c000f638 <rfree>
c00201ba:	83 c4 10             	add    esp,0x10
c00201bd:	83 ec 04             	sub    esp,0x4
c00201c0:	6a 00                	push   0x0
c00201c2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00201c9:	50                   	push   eax
c00201ca:	6a 00                	push   0x0
c00201cc:	e8 3b 4b fe ff       	call   c0004d0c <f_mount>
c00201d1:	83 c4 10             	add    esp,0x10
c00201d4:	b0 00                	mov    al,0x0
c00201d6:	eb 12                	jmp    c00201ea <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00201d8:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c00201dd:	40                   	inc    eax
c00201de:	a3 00 11 03 c0       	mov    ds:0xc0031100,eax
c00201e3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00201ea:	81 c4 6c 03 00 00    	add    esp,0x36c
c00201f0:	c3                   	ret    
c00201f1:	90                   	nop

c00201f2 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00201f2:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00201f8:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020200:	74 0a                	je     c002020c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020202:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c002020a:	75 0a                	jne    c0020216 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c002020c:	b8 04 00 00 00       	mov    eax,0x4
c0020211:	e9 db 00 00 00       	jmp    c00202f1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020216:	83 ec 08             	sub    esp,0x8
c0020219:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020220:	50                   	push   eax
c0020221:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020228:	e8 9d 5c fe ff       	call   c0005eca <f_readdir>
c002022d:	83 c4 10             	add    esp,0x10
c0020230:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020237:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c002023d:	83 ec 0c             	sub    esp,0xc
c0020240:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020247:	83 c0 1a             	add    eax,0x1a
c002024a:	50                   	push   eax
c002024b:	e8 85 04 fe ff       	call   c00006d5 <strlen>
c0020250:	83 c4 10             	add    esp,0x10
c0020253:	ba 00 00 00 00       	mov    edx,0x0
c0020258:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002025c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020260:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020267:	0f b6 c0             	movzx  eax,al
c002026a:	83 e0 10             	and    eax,0x10
c002026d:	74 07                	je     c0020276 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c002026f:	b8 02 00 00 00       	mov    eax,0x2
c0020274:	eb 05                	jmp    c002027b <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020276:	b8 01 00 00 00       	mov    eax,0x1
c002027b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002027f:	83 ec 08             	sub    esp,0x8
c0020282:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020289:	83 c0 1a             	add    eax,0x1a
c002028c:	50                   	push   eax
c002028d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020291:	83 c0 10             	add    eax,0x10
c0020294:	50                   	push   eax
c0020295:	e8 bd 04 fe ff       	call   c0000757 <strcpy>
c002029a:	83 c4 10             	add    esp,0x10
c002029d:	83 ec 04             	sub    esp,0x4
c00202a0:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00202a7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00202ab:	50                   	push   eax
c00202ac:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00202b3:	e8 e8 03 fe ff       	call   c00006a0 <memcpy>
c00202b8:	83 c4 10             	add    esp,0x10
c00202bb:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00202c2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00202c8:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00202cf:	84 c0                	test   al,al
c00202d1:	75 07                	jne    c00202da <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c00202d3:	b8 07 00 00 00       	mov    eax,0x7
c00202d8:	eb 17                	jmp    c00202f1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00202da:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00202e1:	85 c0                	test   eax,eax
c00202e3:	75 07                	jne    c00202ec <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00202e5:	b8 00 00 00 00       	mov    eax,0x0
c00202ea:	eb 05                	jmp    c00202f1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00202ec:	b8 01 00 00 00       	mov    eax,0x1
c00202f1:	81 c4 3c 02 00 00    	add    esp,0x23c
c00202f7:	c3                   	ret    

c00202f8 <FAT::read(void*, unsigned long, void*, int*)>:
c00202f8:	83 ec 1c             	sub    esp,0x1c
c00202fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020300:	74 07                	je     c0020309 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020302:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020307:	75 07                	jne    c0020310 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020309:	b8 04 00 00 00       	mov    eax,0x4
c002030e:	eb 3d                	jmp    c002034d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020310:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020314:	50                   	push   eax
c0020315:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020319:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002031d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020321:	e8 84 4e fe ff       	call   c00051aa <f_read>
c0020326:	83 c4 10             	add    esp,0x10
c0020329:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002032d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020331:	89 c2                	mov    edx,eax
c0020333:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020337:	89 10                	mov    DWORD PTR [eax],edx
c0020339:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002033d:	85 c0                	test   eax,eax
c002033f:	75 07                	jne    c0020348 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020341:	b8 00 00 00 00       	mov    eax,0x0
c0020346:	eb 05                	jmp    c002034d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020348:	b8 01 00 00 00       	mov    eax,0x1
c002034d:	83 c4 1c             	add    esp,0x1c
c0020350:	c3                   	ret    
c0020351:	90                   	nop

c0020352 <FAT::write(void*, unsigned long, void*, int*)>:
c0020352:	83 ec 1c             	sub    esp,0x1c
c0020355:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002035a:	74 07                	je     c0020363 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002035c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020361:	75 07                	jne    c002036a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020363:	b8 04 00 00 00       	mov    eax,0x4
c0020368:	eb 3d                	jmp    c00203a7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002036a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002036e:	50                   	push   eax
c002036f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020373:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020377:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002037b:	e8 aa 50 fe ff       	call   c000542a <f_write>
c0020380:	83 c4 10             	add    esp,0x10
c0020383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020387:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002038b:	89 c2                	mov    edx,eax
c002038d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020391:	89 10                	mov    DWORD PTR [eax],edx
c0020393:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020397:	85 c0                	test   eax,eax
c0020399:	75 07                	jne    c00203a2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002039b:	b8 00 00 00 00       	mov    eax,0x0
c00203a0:	eb 05                	jmp    c00203a7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00203a2:	b8 01 00 00 00       	mov    eax,0x1
c00203a7:	83 c4 1c             	add    esp,0x1c
c00203aa:	c3                   	ret    
c00203ab:	90                   	nop

c00203ac <FAT::close(void*)>:
c00203ac:	83 ec 1c             	sub    esp,0x1c
c00203af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00203b4:	75 07                	jne    c00203bd <FAT::close(void*)+0x11>
c00203b6:	b8 04 00 00 00       	mov    eax,0x4
c00203bb:	eb 36                	jmp    c00203f3 <FAT::close(void*)+0x47>
c00203bd:	83 ec 0c             	sub    esp,0xc
c00203c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00203c4:	e8 f7 54 fe ff       	call   c00058c0 <f_close>
c00203c9:	83 c4 10             	add    esp,0x10
c00203cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00203d0:	83 ec 0c             	sub    esp,0xc
c00203d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00203d7:	e8 4c f2 fe ff       	call   c000f628 <free>
c00203dc:	83 c4 10             	add    esp,0x10
c00203df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00203e3:	85 c0                	test   eax,eax
c00203e5:	75 07                	jne    c00203ee <FAT::close(void*)+0x42>
c00203e7:	b8 00 00 00 00       	mov    eax,0x0
c00203ec:	eb 05                	jmp    c00203f3 <FAT::close(void*)+0x47>
c00203ee:	b8 01 00 00 00       	mov    eax,0x1
c00203f3:	83 c4 1c             	add    esp,0x1c
c00203f6:	c3                   	ret    
c00203f7:	90                   	nop

c00203f8 <FAT::closeDir(void*)>:
c00203f8:	83 ec 1c             	sub    esp,0x1c
c00203fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020400:	75 07                	jne    c0020409 <FAT::closeDir(void*)+0x11>
c0020402:	b8 04 00 00 00       	mov    eax,0x4
c0020407:	eb 36                	jmp    c002043f <FAT::closeDir(void*)+0x47>
c0020409:	83 ec 0c             	sub    esp,0xc
c002040c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020410:	e8 93 5a fe ff       	call   c0005ea8 <f_closedir>
c0020415:	83 c4 10             	add    esp,0x10
c0020418:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002041c:	83 ec 0c             	sub    esp,0xc
c002041f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020423:	e8 00 f2 fe ff       	call   c000f628 <free>
c0020428:	83 c4 10             	add    esp,0x10
c002042b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002042f:	85 c0                	test   eax,eax
c0020431:	75 07                	jne    c002043a <FAT::closeDir(void*)+0x42>
c0020433:	b8 00 00 00 00       	mov    eax,0x0
c0020438:	eb 05                	jmp    c002043f <FAT::closeDir(void*)+0x47>
c002043a:	b8 01 00 00 00       	mov    eax,0x1
c002043f:	83 c4 1c             	add    esp,0x1c
c0020442:	c3                   	ret    
c0020443:	90                   	nop

c0020444 <FAT::seek(void*, unsigned long long)>:
c0020444:	83 ec 2c             	sub    esp,0x2c
c0020447:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002044b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002044f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020453:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020457:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002045c:	75 07                	jne    c0020465 <FAT::seek(void*, unsigned long long)+0x21>
c002045e:	b8 04 00 00 00       	mov    eax,0x4
c0020463:	eb 2f                	jmp    c0020494 <FAT::seek(void*, unsigned long long)+0x50>
c0020465:	83 ec 04             	sub    esp,0x4
c0020468:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002046c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020470:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020474:	e8 76 54 fe ff       	call   c00058ef <f_lseek>
c0020479:	83 c4 10             	add    esp,0x10
c002047c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020484:	85 c0                	test   eax,eax
c0020486:	75 07                	jne    c002048f <FAT::seek(void*, unsigned long long)+0x4b>
c0020488:	b8 00 00 00 00       	mov    eax,0x0
c002048d:	eb 05                	jmp    c0020494 <FAT::seek(void*, unsigned long long)+0x50>
c002048f:	b8 01 00 00 00       	mov    eax,0x1
c0020494:	83 c4 2c             	add    esp,0x2c
c0020497:	c3                   	ret    

c0020498 <fatWrapperReadDisk>:
c0020498:	83 ec 1c             	sub    esp,0x1c
c002049b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002049f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00204a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00204aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00204ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00204b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00204b7:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c00204be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00204c2:	83 ec 0c             	sub    esp,0xc
c00204c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204c9:	52                   	push   edx
c00204ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00204ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00204d2:	50                   	push   eax
c00204d3:	e8 cc 5b ff ff       	call   c00160a4 <LogicalDisk::read(unsigned long long, int, void*)>
c00204d8:	83 c4 20             	add    esp,0x20
c00204db:	83 c4 1c             	add    esp,0x1c
c00204de:	c3                   	ret    

c00204df <fatWrapperWriteDisk>:
c00204df:	83 ec 1c             	sub    esp,0x1c
c00204e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204e6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00204ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00204f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00204f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00204f9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00204fe:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0020505:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020509:	83 ec 0c             	sub    esp,0xc
c002050c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020510:	52                   	push   edx
c0020511:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020515:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020519:	50                   	push   eax
c002051a:	e8 f1 5b ff ff       	call   c0016110 <LogicalDisk::write(unsigned long long, int, void*)>
c002051f:	83 c4 20             	add    esp,0x20
c0020522:	83 c4 1c             	add    esp,0x1c
c0020525:	c3                   	ret    

c0020526 <fatWrapperIoctl>:
c0020526:	53                   	push   ebx
c0020527:	83 ec 28             	sub    esp,0x28
c002052a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002052e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020532:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020536:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002053a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002053f:	75 31                	jne    c0020572 <fatWrapperIoctl+0x4c>
c0020541:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020545:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020549:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002054e:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0020555:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002055b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020561:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020565:	66 89 02             	mov    WORD PTR [edx],ax
c0020568:	b8 00 00 00 00       	mov    eax,0x0
c002056d:	e9 b2 00 00 00       	jmp    c0020624 <fatWrapperIoctl+0xfe>
c0020572:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020577:	75 6a                	jne    c00205e3 <fatWrapperIoctl+0xbd>
c0020579:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002057d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020581:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020586:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c002058d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020593:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020599:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002059f:	89 c8                	mov    eax,ecx
c00205a1:	89 da                	mov    edx,ebx
c00205a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00205a7:	c1 e0 0a             	shl    eax,0xa
c00205aa:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00205af:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c00205b6:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00205bc:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00205c2:	89 cb                	mov    ebx,ecx
c00205c4:	c1 fb 1f             	sar    ebx,0x1f
c00205c7:	53                   	push   ebx
c00205c8:	51                   	push   ecx
c00205c9:	52                   	push   edx
c00205ca:	50                   	push   eax
c00205cb:	e8 7c 5b 00 00       	call   c002614c <__udivdi3>
c00205d0:	83 c4 10             	add    esp,0x10
c00205d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00205d7:	89 01                	mov    DWORD PTR [ecx],eax
c00205d9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205dc:	b8 00 00 00 00       	mov    eax,0x0
c00205e1:	eb 41                	jmp    c0020624 <fatWrapperIoctl+0xfe>
c00205e3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00205e8:	75 07                	jne    c00205f1 <fatWrapperIoctl+0xcb>
c00205ea:	b8 00 00 00 00       	mov    eax,0x0
c00205ef:	eb 33                	jmp    c0020624 <fatWrapperIoctl+0xfe>
c00205f1:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00205f6:	75 19                	jne    c0020611 <fatWrapperIoctl+0xeb>
c00205f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00205fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020600:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020604:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002060a:	b8 00 00 00 00       	mov    eax,0x0
c002060f:	eb 13                	jmp    c0020624 <fatWrapperIoctl+0xfe>
c0020611:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020616:	75 07                	jne    c002061f <fatWrapperIoctl+0xf9>
c0020618:	b8 00 00 00 00       	mov    eax,0x0
c002061d:	eb 05                	jmp    c0020624 <fatWrapperIoctl+0xfe>
c002061f:	b8 04 00 00 00       	mov    eax,0x4
c0020624:	83 c4 28             	add    esp,0x28
c0020627:	5b                   	pop    ebx
c0020628:	c3                   	ret    
c0020629:	90                   	nop

c002062a <FAT::FAT()>:
c002062a:	83 ec 1c             	sub    esp,0x1c
c002062d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020631:	83 ec 0c             	sub    esp,0xc
c0020634:	50                   	push   eax
c0020635:	e8 b2 25 ff ff       	call   c0012bec <Filesystem::Filesystem()>
c002063a:	83 c4 10             	add    esp,0x10
c002063d:	ba b8 be 02 c0       	mov    edx,0xc002beb8
c0020642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020646:	89 10                	mov    DWORD PTR [eax],edx
c0020648:	c7 05 00 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031100,0x0
c0020652:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002065a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002065f:	7f 15                	jg     c0020676 <FAT::FAT()+0x4c>
c0020661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020665:	c7 04 85 20 11 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffceee0],0xffffffff
c0020670:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020674:	eb e4                	jmp    c002065a <FAT::FAT()+0x30>
c0020676:	90                   	nop
c0020677:	83 c4 1c             	add    esp,0x1c
c002067a:	c3                   	ret    
c002067b:	90                   	nop

c002067c <FAT::fixFilepath(char*)>:
c002067c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020680:	8a 00                	mov    al,BYTE PTR [eax]
c0020682:	3c 40                	cmp    al,0x40
c0020684:	7e 2c                	jle    c00206b2 <FAT::fixFilepath(char*)+0x36>
c0020686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002068a:	8a 00                	mov    al,BYTE PTR [eax]
c002068c:	83 e8 41             	sub    eax,0x41
c002068f:	88 c2                	mov    dl,al
c0020691:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020695:	88 10                	mov    BYTE PTR [eax],dl
c0020697:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002069b:	8a 00                	mov    al,BYTE PTR [eax]
c002069d:	0f be c0             	movsx  eax,al
c00206a0:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c00206a7:	83 c0 30             	add    eax,0x30
c00206aa:	88 c2                	mov    dl,al
c00206ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206b0:	88 10                	mov    BYTE PTR [eax],dl
c00206b2:	90                   	nop
c00206b3:	c3                   	ret    

c00206b4 <FAT::open(char const*, void**, FileOpenMode)>:
c00206b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00206ba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00206c2:	74 0a                	je     c00206ce <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00206c4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00206cc:	75 0a                	jne    c00206d8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00206ce:	b8 04 00 00 00       	mov    eax,0x4
c00206d3:	e9 fd 00 00 00       	jmp    c00207d5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00206d8:	83 ec 08             	sub    esp,0x8
c00206db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00206e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00206e6:	50                   	push   eax
c00206e7:	e8 6b 00 fe ff       	call   c0000757 <strcpy>
c00206ec:	83 c4 10             	add    esp,0x10
c00206ef:	83 ec 08             	sub    esp,0x8
c00206f2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00206f6:	50                   	push   eax
c00206f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00206fe:	e8 79 ff ff ff       	call   c002067c <FAT::fixFilepath(char*)>
c0020703:	83 c4 10             	add    esp,0x10
c0020706:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002070e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020715:	83 e0 01             	and    eax,0x1
c0020718:	74 08                	je     c0020722 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002071a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020722:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020729:	83 e0 04             	and    eax,0x4
c002072c:	74 10                	je     c002073e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002072e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020736:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002073e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020745:	83 e0 02             	and    eax,0x2
c0020748:	74 08                	je     c0020752 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002074a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020752:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020759:	83 e0 08             	and    eax,0x8
c002075c:	74 08                	je     c0020766 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002075e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020766:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002076d:	83 e0 10             	and    eax,0x10
c0020770:	74 08                	je     c002077a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020772:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002077a:	83 ec 0c             	sub    esp,0xc
c002077d:	68 50 02 00 00       	push   0x250
c0020782:	e8 91 ee fe ff       	call   c000f618 <malloc>
c0020787:	83 c4 10             	add    esp,0x10
c002078a:	89 c2                	mov    edx,eax
c002078c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020793:	89 10                	mov    DWORD PTR [eax],edx
c0020795:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002079d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00207a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00207a6:	83 ec 04             	sub    esp,0x4
c00207a9:	52                   	push   edx
c00207aa:	8d 54 24 10          	lea    edx,[esp+0x10]
c00207ae:	52                   	push   edx
c00207af:	50                   	push   eax
c00207b0:	e8 b9 45 fe ff       	call   c0004d6e <f_open>
c00207b5:	83 c4 10             	add    esp,0x10
c00207b8:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00207bf:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00207c7:	74 07                	je     c00207d0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00207c9:	b8 01 00 00 00       	mov    eax,0x1
c00207ce:	eb 05                	jmp    c00207d5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00207d0:	b8 00 00 00 00       	mov    eax,0x0
c00207d5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00207db:	c3                   	ret    

c00207dc <FAT::openDir(char const*, void**)>:
c00207dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00207e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00207ea:	74 0a                	je     c00207f6 <FAT::openDir(char const*, void**)+0x1a>
c00207ec:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00207f4:	75 07                	jne    c00207fd <FAT::openDir(char const*, void**)+0x21>
c00207f6:	b8 04 00 00 00       	mov    eax,0x4
c00207fb:	eb 7d                	jmp    c002087a <FAT::openDir(char const*, void**)+0x9e>
c00207fd:	83 ec 08             	sub    esp,0x8
c0020800:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020807:	8d 44 24 18          	lea    eax,[esp+0x18]
c002080b:	50                   	push   eax
c002080c:	e8 46 ff fd ff       	call   c0000757 <strcpy>
c0020811:	83 c4 10             	add    esp,0x10
c0020814:	83 ec 08             	sub    esp,0x8
c0020817:	8d 44 24 14          	lea    eax,[esp+0x14]
c002081b:	50                   	push   eax
c002081c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020823:	e8 54 fe ff ff       	call   c002067c <FAT::fixFilepath(char*)>
c0020828:	83 c4 10             	add    esp,0x10
c002082b:	83 ec 0c             	sub    esp,0xc
c002082e:	6a 4c                	push   0x4c
c0020830:	e8 e3 ed fe ff       	call   c000f618 <malloc>
c0020835:	83 c4 10             	add    esp,0x10
c0020838:	89 c2                	mov    edx,eax
c002083a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020841:	89 10                	mov    DWORD PTR [eax],edx
c0020843:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002084a:	8b 00                	mov    eax,DWORD PTR [eax]
c002084c:	83 ec 08             	sub    esp,0x8
c002084f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020853:	52                   	push   edx
c0020854:	50                   	push   eax
c0020855:	e8 4c 55 fe ff       	call   c0005da6 <f_opendir>
c002085a:	83 c4 10             	add    esp,0x10
c002085d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020864:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002086c:	74 07                	je     c0020875 <FAT::openDir(char const*, void**)+0x99>
c002086e:	b8 01 00 00 00       	mov    eax,0x1
c0020873:	eb 05                	jmp    c002087a <FAT::openDir(char const*, void**)+0x9e>
c0020875:	b8 00 00 00 00       	mov    eax,0x0
c002087a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020880:	c3                   	ret    
c0020881:	90                   	nop

c0020882 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020882:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020888:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020890:	75 0a                	jne    c002089c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020892:	b8 04 00 00 00       	mov    eax,0x4
c0020897:	e9 c9 00 00 00       	jmp    c0020965 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002089c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00208a4:	75 0a                	jne    c00208b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00208a6:	b8 04 00 00 00       	mov    eax,0x4
c00208ab:	e9 b5 00 00 00       	jmp    c0020965 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00208b0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00208b8:	75 0a                	jne    c00208c4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00208ba:	b8 04 00 00 00       	mov    eax,0x4
c00208bf:	e9 a1 00 00 00       	jmp    c0020965 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00208c4:	83 ec 08             	sub    esp,0x8
c00208c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00208ce:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00208d5:	50                   	push   eax
c00208d6:	e8 7c fe fd ff       	call   c0000757 <strcpy>
c00208db:	83 c4 10             	add    esp,0x10
c00208de:	83 ec 08             	sub    esp,0x8
c00208e1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00208e8:	50                   	push   eax
c00208e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00208f0:	e8 87 fd ff ff       	call   c002067c <FAT::fixFilepath(char*)>
c00208f5:	83 c4 10             	add    esp,0x10
c00208f8:	83 ec 08             	sub    esp,0x8
c00208fb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208ff:	50                   	push   eax
c0020900:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020907:	50                   	push   eax
c0020908:	e8 58 56 fe ff       	call   c0005f65 <f_stat>
c002090d:	83 c4 10             	add    esp,0x10
c0020910:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020917:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002091e:	85 c0                	test   eax,eax
c0020920:	74 07                	je     c0020929 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020922:	83 f8 04             	cmp    eax,0x4
c0020925:	74 32                	je     c0020959 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020927:	eb 37                	jmp    c0020960 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020929:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002092d:	0f b6 c0             	movzx  eax,al
c0020930:	83 e0 10             	and    eax,0x10
c0020933:	0f 95 c2             	setne  dl
c0020936:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002093d:	88 10                	mov    BYTE PTR [eax],dl
c002093f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020942:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020946:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002094d:	89 01                	mov    DWORD PTR [ecx],eax
c002094f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020952:	b8 00 00 00 00       	mov    eax,0x0
c0020957:	eb 0c                	jmp    c0020965 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020959:	b8 02 00 00 00       	mov    eax,0x2
c002095e:	eb 05                	jmp    c0020965 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020960:	b8 01 00 00 00       	mov    eax,0x1
c0020965:	81 c4 2c 02 00 00    	add    esp,0x22c
c002096b:	c3                   	ret    

c002096c <FAT::unlink(char const*)>:
c002096c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020972:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002097a:	75 07                	jne    c0020983 <FAT::unlink(char const*)+0x17>
c002097c:	b8 04 00 00 00       	mov    eax,0x4
c0020981:	eb 5c                	jmp    c00209df <FAT::unlink(char const*)+0x73>
c0020983:	83 ec 08             	sub    esp,0x8
c0020986:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002098d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020991:	50                   	push   eax
c0020992:	e8 c0 fd fd ff       	call   c0000757 <strcpy>
c0020997:	83 c4 10             	add    esp,0x10
c002099a:	83 ec 08             	sub    esp,0x8
c002099d:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209a1:	50                   	push   eax
c00209a2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209a9:	e8 ce fc ff ff       	call   c002067c <FAT::fixFilepath(char*)>
c00209ae:	83 c4 10             	add    esp,0x10
c00209b1:	83 ec 0c             	sub    esp,0xc
c00209b4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209b8:	50                   	push   eax
c00209b9:	e8 f9 58 fe ff       	call   c00062b7 <f_unlink>
c00209be:	83 c4 10             	add    esp,0x10
c00209c1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00209c8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00209cf:	85 c0                	test   eax,eax
c00209d1:	75 07                	jne    c00209da <FAT::unlink(char const*)+0x6e>
c00209d3:	b8 00 00 00 00       	mov    eax,0x0
c00209d8:	eb 05                	jmp    c00209df <FAT::unlink(char const*)+0x73>
c00209da:	b8 01 00 00 00       	mov    eax,0x1
c00209df:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209e5:	c3                   	ret    

c00209e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00209e6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00209ec:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00209f3:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00209fa:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00209fe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020a02:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020a0a:	75 0a                	jne    c0020a16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020a0c:	b8 04 00 00 00       	mov    eax,0x4
c0020a11:	e9 1c 01 00 00       	jmp    c0020b32 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020a16:	83 ec 08             	sub    esp,0x8
c0020a19:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020a20:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020a24:	50                   	push   eax
c0020a25:	e8 2d fd fd ff       	call   c0000757 <strcpy>
c0020a2a:	83 c4 10             	add    esp,0x10
c0020a2d:	83 ec 08             	sub    esp,0x8
c0020a30:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020a34:	50                   	push   eax
c0020a35:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020a3c:	e8 3b fc ff ff       	call   c002067c <FAT::fixFilepath(char*)>
c0020a41:	83 c4 10             	add    esp,0x10
c0020a44:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020a4c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020a54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a59:	83 e0 01             	and    eax,0x1
c0020a5c:	74 08                	je     c0020a66 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020a5e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020a66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a6b:	83 e0 02             	and    eax,0x2
c0020a6e:	74 08                	je     c0020a78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020a70:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020a78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a7d:	83 e0 04             	and    eax,0x4
c0020a80:	74 08                	je     c0020a8a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020a82:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020a8a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a8f:	83 e0 08             	and    eax,0x8
c0020a92:	74 08                	je     c0020a9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020a94:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020a9c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020aa1:	83 e0 01             	and    eax,0x1
c0020aa4:	74 08                	je     c0020aae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020aa6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020aae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ab3:	83 e0 02             	and    eax,0x2
c0020ab6:	74 08                	je     c0020ac0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020ab8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020ac0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ac5:	83 e0 04             	and    eax,0x4
c0020ac8:	74 08                	je     c0020ad2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020aca:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020ad2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ad7:	83 e0 08             	and    eax,0x8
c0020ada:	74 08                	je     c0020ae4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020adc:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020ae4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020aeb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020af2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020afa:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020b02:	83 ec 04             	sub    esp,0x4
c0020b05:	52                   	push   edx
c0020b06:	50                   	push   eax
c0020b07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020b0b:	50                   	push   eax
c0020b0c:	e8 48 5e fe ff       	call   c0006959 <f_chmod>
c0020b11:	83 c4 10             	add    esp,0x10
c0020b14:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020b1b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020b22:	85 c0                	test   eax,eax
c0020b24:	75 07                	jne    c0020b2d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020b26:	b8 00 00 00 00       	mov    eax,0x0
c0020b2b:	eb 05                	jmp    c0020b32 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020b2d:	b8 01 00 00 00       	mov    eax,0x1
c0020b32:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020b38:	c3                   	ret    
c0020b39:	90                   	nop

c0020b3a <FAT::rename(char const*, char const*)>:
c0020b3a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020b40:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020b48:	74 0a                	je     c0020b54 <FAT::rename(char const*, char const*)+0x1a>
c0020b4a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020b52:	75 0a                	jne    c0020b5e <FAT::rename(char const*, char const*)+0x24>
c0020b54:	b8 04 00 00 00       	mov    eax,0x4
c0020b59:	e9 98 00 00 00       	jmp    c0020bf6 <FAT::rename(char const*, char const*)+0xbc>
c0020b5e:	83 ec 08             	sub    esp,0x8
c0020b61:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020b68:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b6f:	50                   	push   eax
c0020b70:	e8 e2 fb fd ff       	call   c0000757 <strcpy>
c0020b75:	83 c4 10             	add    esp,0x10
c0020b78:	83 ec 08             	sub    esp,0x8
c0020b7b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020b82:	50                   	push   eax
c0020b83:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020b8a:	e8 ed fa ff ff       	call   c002067c <FAT::fixFilepath(char*)>
c0020b8f:	83 c4 10             	add    esp,0x10
c0020b92:	83 ec 08             	sub    esp,0x8
c0020b95:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020b9c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ba0:	50                   	push   eax
c0020ba1:	e8 b1 fb fd ff       	call   c0000757 <strcpy>
c0020ba6:	83 c4 10             	add    esp,0x10
c0020ba9:	83 ec 08             	sub    esp,0x8
c0020bac:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bb0:	50                   	push   eax
c0020bb1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020bb8:	e8 bf fa ff ff       	call   c002067c <FAT::fixFilepath(char*)>
c0020bbd:	83 c4 10             	add    esp,0x10
c0020bc0:	83 ec 08             	sub    esp,0x8
c0020bc3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bc7:	50                   	push   eax
c0020bc8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bcf:	50                   	push   eax
c0020bd0:	e8 91 5a fe ff       	call   c0006666 <f_rename>
c0020bd5:	83 c4 10             	add    esp,0x10
c0020bd8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020bdf:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020be6:	85 c0                	test   eax,eax
c0020be8:	75 07                	jne    c0020bf1 <FAT::rename(char const*, char const*)+0xb7>
c0020bea:	b8 00 00 00 00       	mov    eax,0x0
c0020bef:	eb 05                	jmp    c0020bf6 <FAT::rename(char const*, char const*)+0xbc>
c0020bf1:	b8 01 00 00 00       	mov    eax,0x1
c0020bf6:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020bfc:	c3                   	ret    
c0020bfd:	90                   	nop

c0020bfe <FAT::mkdir(char const*)>:
c0020bfe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c04:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c0c:	75 07                	jne    c0020c15 <FAT::mkdir(char const*)+0x17>
c0020c0e:	b8 04 00 00 00       	mov    eax,0x4
c0020c13:	eb 5c                	jmp    c0020c71 <FAT::mkdir(char const*)+0x73>
c0020c15:	83 ec 08             	sub    esp,0x8
c0020c18:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c1f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c23:	50                   	push   eax
c0020c24:	e8 2e fb fd ff       	call   c0000757 <strcpy>
c0020c29:	83 c4 10             	add    esp,0x10
c0020c2c:	83 ec 08             	sub    esp,0x8
c0020c2f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c33:	50                   	push   eax
c0020c34:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c3b:	e8 3c fa ff ff       	call   c002067c <FAT::fixFilepath(char*)>
c0020c40:	83 c4 10             	add    esp,0x10
c0020c43:	83 ec 0c             	sub    esp,0xc
c0020c46:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c4a:	50                   	push   eax
c0020c4b:	e8 ea 57 fe ff       	call   c000643a <f_mkdir>
c0020c50:	83 c4 10             	add    esp,0x10
c0020c53:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020c5a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020c61:	85 c0                	test   eax,eax
c0020c63:	75 07                	jne    c0020c6c <FAT::mkdir(char const*)+0x6e>
c0020c65:	b8 00 00 00 00       	mov    eax,0x0
c0020c6a:	eb 05                	jmp    c0020c71 <FAT::mkdir(char const*)+0x73>
c0020c6c:	b8 01 00 00 00       	mov    eax,0x1
c0020c71:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c77:	c3                   	ret    

c0020c78 <FAT::exists(char const*)>:
c0020c78:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020c7e:	83 ec 08             	sub    esp,0x8
c0020c81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c8c:	50                   	push   eax
c0020c8d:	e8 c5 fa fd ff       	call   c0000757 <strcpy>
c0020c92:	83 c4 10             	add    esp,0x10
c0020c95:	83 ec 08             	sub    esp,0x8
c0020c98:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c9c:	50                   	push   eax
c0020c9d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ca4:	e8 d3 f9 ff ff       	call   c002067c <FAT::fixFilepath(char*)>
c0020ca9:	83 c4 10             	add    esp,0x10
c0020cac:	83 ec 08             	sub    esp,0x8
c0020caf:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020cb6:	50                   	push   eax
c0020cb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020cbb:	50                   	push   eax
c0020cbc:	e8 a4 52 fe ff       	call   c0005f65 <f_stat>
c0020cc1:	83 c4 10             	add    esp,0x10
c0020cc4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020ccb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020cd2:	85 c0                	test   eax,eax
c0020cd4:	75 04                	jne    c0020cda <FAT::exists(char const*)+0x62>
c0020cd6:	b0 01                	mov    al,0x1
c0020cd8:	eb 02                	jmp    c0020cdc <FAT::exists(char const*)+0x64>
c0020cda:	b0 00                	mov    al,0x0
c0020cdc:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ce2:	c3                   	ret    
c0020ce3:	90                   	nop

c0020ce4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020ce4:	b8 08 00 00 00       	mov    eax,0x8
c0020ce9:	c3                   	ret    

c0020cea <ISO9660::seek(void*, unsigned long long)>:
c0020cea:	53                   	push   ebx
c0020ceb:	b8 04 00 00 00       	mov    eax,0x4
c0020cf0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020cf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020cf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020cfc:	85 d2                	test   edx,edx
c0020cfe:	74 17                	je     c0020d17 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020d00:	89 c8                	mov    eax,ecx
c0020d02:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020d05:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020d08:	b8 01 00 00 00       	mov    eax,0x1
c0020d0d:	73 08                	jae    c0020d17 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020d0f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020d12:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020d15:	31 c0                	xor    eax,eax
c0020d17:	5b                   	pop    ebx
c0020d18:	c3                   	ret    
c0020d19:	90                   	nop

c0020d1a <ISO9660::tell(void*, unsigned long long*)>:
c0020d1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d22:	85 d2                	test   edx,edx
c0020d24:	74 12                	je     c0020d38 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020d26:	85 c0                	test   eax,eax
c0020d28:	74 0e                	je     c0020d38 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020d2a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020d2d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020d30:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020d33:	89 10                	mov    DWORD PTR [eax],edx
c0020d35:	31 c0                	xor    eax,eax
c0020d37:	c3                   	ret    
c0020d38:	b8 04 00 00 00       	mov    eax,0x4
c0020d3d:	c3                   	ret    

c0020d3e <ISO9660::getName()>:
c0020d3e:	b8 14 bf 02 c0       	mov    eax,0xc002bf14
c0020d43:	c3                   	ret    

c0020d44 <ISO9660::stat(void*, unsigned long long*)>:
c0020d44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d4c:	85 d2                	test   edx,edx
c0020d4e:	74 12                	je     c0020d62 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020d50:	85 c0                	test   eax,eax
c0020d52:	74 0e                	je     c0020d62 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020d54:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020d57:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020d5a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020d5d:	89 10                	mov    DWORD PTR [eax],edx
c0020d5f:	31 c0                	xor    eax,eax
c0020d61:	c3                   	ret    
c0020d62:	b8 04 00 00 00       	mov    eax,0x4
c0020d67:	c3                   	ret    

c0020d68 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020d68:	b8 01 00 00 00       	mov    eax,0x1
c0020d6d:	c3                   	ret    

c0020d6e <ISO9660::unlink(char const*)>:
c0020d6e:	b8 01 00 00 00       	mov    eax,0x1
c0020d73:	c3                   	ret    

c0020d74 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020d74:	b8 01 00 00 00       	mov    eax,0x1
c0020d79:	c3                   	ret    

c0020d7a <ISO9660::rename(char const*, char const*)>:
c0020d7a:	b8 01 00 00 00       	mov    eax,0x1
c0020d7f:	c3                   	ret    

c0020d80 <ISO9660::mkdir(char const*)>:
c0020d80:	b8 01 00 00 00       	mov    eax,0x1
c0020d85:	c3                   	ret    

c0020d86 <ISO9660::close(void*)>:
c0020d86:	83 ec 0c             	sub    esp,0xc
c0020d89:	b8 04 00 00 00       	mov    eax,0x4
c0020d8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020d92:	85 d2                	test   edx,edx
c0020d94:	74 0e                	je     c0020da4 <ISO9660::close(void*)+0x1e>
c0020d96:	83 ec 0c             	sub    esp,0xc
c0020d99:	52                   	push   edx
c0020d9a:	e8 89 e8 fe ff       	call   c000f628 <free>
c0020d9f:	83 c4 10             	add    esp,0x10
c0020da2:	31 c0                	xor    eax,eax
c0020da4:	83 c4 0c             	add    esp,0xc
c0020da7:	c3                   	ret    

c0020da8 <ISO9660::closeDir(void*)>:
c0020da8:	83 ec 0c             	sub    esp,0xc
c0020dab:	b8 04 00 00 00       	mov    eax,0x4
c0020db0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020db4:	85 d2                	test   edx,edx
c0020db6:	74 0e                	je     c0020dc6 <ISO9660::closeDir(void*)+0x1e>
c0020db8:	83 ec 0c             	sub    esp,0xc
c0020dbb:	52                   	push   edx
c0020dbc:	e8 67 e8 fe ff       	call   c000f628 <free>
c0020dc1:	83 c4 10             	add    esp,0x10
c0020dc4:	31 c0                	xor    eax,eax
c0020dc6:	83 c4 0c             	add    esp,0xc
c0020dc9:	c3                   	ret    

c0020dca <ISO9660::~ISO9660()>:
c0020dca:	83 ec 0c             	sub    esp,0xc
c0020dcd:	ba 78 bf 02 c0       	mov    edx,0xc002bf78
c0020dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dd6:	89 10                	mov    DWORD PTR [eax],edx
c0020dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ddc:	83 ec 0c             	sub    esp,0xc
c0020ddf:	50                   	push   eax
c0020de0:	e8 2b 1e ff ff       	call   c0012c10 <Filesystem::~Filesystem()>
c0020de5:	83 c4 10             	add    esp,0x10
c0020de8:	90                   	nop
c0020de9:	83 c4 0c             	add    esp,0xc
c0020dec:	c3                   	ret    
c0020ded:	90                   	nop

c0020dee <ISO9660::~ISO9660()>:
c0020dee:	83 ec 0c             	sub    esp,0xc
c0020df1:	83 ec 0c             	sub    esp,0xc
c0020df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020df8:	e8 cd ff ff ff       	call   c0020dca <ISO9660::~ISO9660()>
c0020dfd:	83 c4 10             	add    esp,0x10
c0020e00:	83 ec 08             	sub    esp,0x8
c0020e03:	6a 08                	push   0x8
c0020e05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e09:	e8 f9 19 ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0020e0e:	83 c4 10             	add    esp,0x10
c0020e11:	83 c4 0c             	add    esp,0xc
c0020e14:	c3                   	ret    

c0020e15 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020e15:	55                   	push   ebp
c0020e16:	31 c9                	xor    ecx,ecx
c0020e18:	57                   	push   edi
c0020e19:	56                   	push   esi
c0020e1a:	53                   	push   ebx
c0020e1b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020e1f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020e23:	89 eb                	mov    ebx,ebp
c0020e25:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020e29:	39 ce                	cmp    esi,ecx
c0020e2b:	7e 17                	jle    c0020e44 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020e2d:	31 d2                	xor    edx,edx
c0020e2f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020e33:	7d 13                	jge    c0020e48 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020e35:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020e39:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020e3c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020e3f:	75 0d                	jne    c0020e4e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020e41:	42                   	inc    edx
c0020e42:	eb eb                	jmp    c0020e2f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020e44:	31 c0                	xor    eax,eax
c0020e46:	eb 0a                	jmp    c0020e52 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020e48:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020e4c:	eb 04                	jmp    c0020e52 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020e4e:	41                   	inc    ecx
c0020e4f:	43                   	inc    ebx
c0020e50:	eb d7                	jmp    c0020e29 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020e52:	5b                   	pop    ebx
c0020e53:	5e                   	pop    esi
c0020e54:	5f                   	pop    edi
c0020e55:	5d                   	pop    ebp
c0020e56:	c3                   	ret    

c0020e57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020e57:	56                   	push   esi
c0020e58:	53                   	push   ebx
c0020e59:	52                   	push   edx
c0020e5a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e5e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020e62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e66:	39 0d 00 12 03 c0    	cmp    DWORD PTR ds:0xc0031200,ecx
c0020e6c:	75 08                	jne    c0020e76 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020e6e:	38 05 54 d0 02 c0    	cmp    BYTE PTR ds:0xc002d054,al
c0020e74:	74 2b                	je     c0020ea1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020e76:	83 ec 0c             	sub    esp,0xc
c0020e79:	a2 54 d0 02 c0       	mov    ds:0xc002d054,al
c0020e7e:	68 20 12 03 c0       	push   0xc0031220
c0020e83:	0f be c0             	movsx  eax,al
c0020e86:	6a 01                	push   0x1
c0020e88:	89 0d 00 12 03 c0    	mov    DWORD PTR ds:0xc0031200,ecx
c0020e8e:	31 db                	xor    ebx,ebx
c0020e90:	53                   	push   ebx
c0020e91:	51                   	push   ecx
c0020e92:	ff 34 85 dc df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2024]
c0020e99:	e8 06 52 ff ff       	call   c00160a4 <LogicalDisk::read(unsigned long long, int, void*)>
c0020e9e:	83 c4 20             	add    esp,0x20
c0020ea1:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020ea9:	c7 44 24 14 20 12 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031220
c0020eb1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020eb5:	58                   	pop    eax
c0020eb6:	5b                   	pop    ebx
c0020eb7:	5e                   	pop    esi
c0020eb8:	e9 e3 f7 fd ff       	jmp    c00006a0 <memcpy>
c0020ebd:	90                   	nop

c0020ebe <ISO9660::tryMount(LogicalDisk*, int)>:
c0020ebe:	81 ec 10 08 00 00    	sub    esp,0x810
c0020ec4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020ecb:	83 c0 41             	add    eax,0x41
c0020ece:	0f be c0             	movsx  eax,al
c0020ed1:	50                   	push   eax
c0020ed2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ed6:	50                   	push   eax
c0020ed7:	6a 10                	push   0x10
c0020ed9:	e8 79 ff ff ff       	call   c0020e57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020ede:	83 c4 10             	add    esp,0x10
c0020ee1:	31 c0                	xor    eax,eax
c0020ee3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020ee8:	75 1d                	jne    c0020f07 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020eea:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020eef:	75 16                	jne    c0020f07 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020ef1:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020ef6:	75 0f                	jne    c0020f07 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020ef8:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020efd:	75 08                	jne    c0020f07 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020eff:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020f04:	0f 94 c0             	sete   al
c0020f07:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020f0d:	c3                   	ret    

c0020f0e <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020f0e:	55                   	push   ebp
c0020f0f:	57                   	push   edi
c0020f10:	56                   	push   esi
c0020f11:	53                   	push   ebx
c0020f12:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0020f18:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0020f1f:	85 ed                	test   ebp,ebp
c0020f21:	0f 84 d6 01 00 00    	je     c00210fd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020f27:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020f2f:	0f 84 c8 01 00 00    	je     c00210fd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020f35:	b8 01 00 00 00       	mov    eax,0x1
c0020f3a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020f3e:	0f 85 be 01 00 00    	jne    c0021102 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020f44:	31 d2                	xor    edx,edx
c0020f46:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020f4d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020f50:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020f53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020f57:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0020f5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020f61:	01 f0                	add    eax,esi
c0020f63:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020f66:	11 fa                	adc    edx,edi
c0020f68:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020f6c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020f70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020f74:	19 d1                	sbb    ecx,edx
c0020f76:	72 0a                	jb     c0020f82 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0020f78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020f80:	eb 13                	jmp    c0020f95 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020f82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020f8a:	29 f0                	sub    eax,esi
c0020f8c:	19 fa                	sbb    edx,edi
c0020f8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f91:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020f95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020f98:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020f9b:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020f9f:	51                   	push   ecx
c0020fa0:	c1 e0 0b             	shl    eax,0xb
c0020fa3:	01 c6                	add    esi,eax
c0020fa5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020fa9:	11 d7                	adc    edi,edx
c0020fab:	50                   	push   eax
c0020fac:	89 fa                	mov    edx,edi
c0020fae:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0020fb2:	89 f0                	mov    eax,esi
c0020fb4:	53                   	push   ebx
c0020fb5:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020fb9:	50                   	push   eax
c0020fba:	e8 98 fe ff ff       	call   c0020e57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020fbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020fc3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020fc6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020fca:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020fd0:	83 c4 10             	add    esp,0x10
c0020fd3:	b8 00 08 00 00       	mov    eax,0x800
c0020fd8:	29 d0                	sub    eax,edx
c0020fda:	39 c1                	cmp    ecx,eax
c0020fdc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0020fe0:	83 d9 00             	sbb    ecx,0x0
c0020fe3:	7d 1c                	jge    c0021001 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0020fe5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020fea:	75 12                	jne    c0020ffe <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0020fec:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020ff3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020ff9:	e9 fb 00 00 00       	jmp    c00210f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0020ffe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021001:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021004:	31 d2                	xor    edx,edx
c0021006:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002100a:	39 c2                	cmp    edx,eax
c002100c:	7d 14                	jge    c0021022 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002100e:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021015:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021019:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002101c:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002101f:	42                   	inc    edx
c0021020:	eb e8                	jmp    c002100a <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021022:	89 c3                	mov    ebx,eax
c0021024:	85 c0                	test   eax,eax
c0021026:	79 02                	jns    c002102a <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021028:	31 db                	xor    ebx,ebx
c002102a:	99                   	cdq    
c002102b:	01 c3                	add    ebx,eax
c002102d:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021034:	01 c6                	add    esi,eax
c0021036:	11 d7                	adc    edi,edx
c0021038:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002103c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021040:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021043:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021047:	29 c6                	sub    esi,eax
c0021049:	19 d7                	sbb    edi,edx
c002104b:	89 34 24             	mov    DWORD PTR [esp],esi
c002104e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021052:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021057:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002105a:	b8 00 00 00 00       	mov    eax,0x0
c002105f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021063:	7d 3e                	jge    c00210a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021065:	52                   	push   edx
c0021066:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002106a:	50                   	push   eax
c002106b:	53                   	push   ebx
c002106c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021070:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021074:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021078:	50                   	push   eax
c0021079:	e8 d9 fd ff ff       	call   c0020e57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002107e:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021086:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002108b:	81 c3 00 08 00 00    	add    ebx,0x800
c0021091:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021099:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002109e:	83 c4 10             	add    esp,0x10
c00210a1:	eb af                	jmp    c0021052 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00210a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210a7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00210aa:	74 32                	je     c00210de <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00210ac:	50                   	push   eax
c00210ad:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00210b1:	50                   	push   eax
c00210b2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00210b6:	50                   	push   eax
c00210b7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00210bb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00210bf:	0f ac fe 0b          	shrd   esi,edi,0xb
c00210c3:	56                   	push   esi
c00210c4:	e8 8e fd ff ff       	call   c0020e57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210c9:	83 c4 0c             	add    esp,0xc
c00210cc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00210d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00210d4:	50                   	push   eax
c00210d5:	53                   	push   ebx
c00210d6:	e8 c5 f5 fd ff       	call   c00006a0 <memcpy>
c00210db:	83 c4 10             	add    esp,0x10
c00210de:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00210e5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00210e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00210ed:	89 38                	mov    DWORD PTR [eax],edi
c00210ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210f3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00210f6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00210f9:	31 c0                	xor    eax,eax
c00210fb:	eb 05                	jmp    c0021102 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00210fd:	b8 04 00 00 00       	mov    eax,0x4
c0021102:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021108:	5b                   	pop    ebx
c0021109:	5e                   	pop    esi
c002110a:	5f                   	pop    edi
c002110b:	5d                   	pop    ebp
c002110c:	c3                   	ret    
c002110d:	90                   	nop

c002110e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002110e:	55                   	push   ebp
c002110f:	57                   	push   edi
c0021110:	56                   	push   esi
c0021111:	53                   	push   ebx
c0021112:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021118:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c002111f:	85 f6                	test   esi,esi
c0021121:	0f 84 64 02 00 00    	je     c002138b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021127:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002112f:	0f 84 56 02 00 00    	je     c002138b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021135:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021138:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c002113b:	75 0a                	jne    c0021147 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002113d:	b8 07 00 00 00       	mov    eax,0x7
c0021142:	e9 49 02 00 00       	jmp    c0021390 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021147:	50                   	push   eax
c0021148:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002114c:	50                   	push   eax
c002114d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021154:	53                   	push   ebx
c0021155:	8b 06                	mov    eax,DWORD PTR [esi]
c0021157:	c1 e0 0b             	shl    eax,0xb
c002115a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c002115d:	c1 e8 0b             	shr    eax,0xb
c0021160:	50                   	push   eax
c0021161:	e8 f1 fc ff ff       	call   c0020e57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021166:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021169:	83 c4 10             	add    esp,0x10
c002116c:	89 c1                	mov    ecx,eax
c002116e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021171:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021177:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002117a:	84 db                	test   bl,bl
c002117c:	0f 85 90 00 00 00    	jne    c0021212 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021182:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021188:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002118e:	29 c7                	sub    edi,eax
c0021190:	89 fb                	mov    ebx,edi
c0021192:	c1 fb 1f             	sar    ebx,0x1f
c0021195:	01 f8                	add    eax,edi
c0021197:	11 da                	adc    edx,ebx
c0021199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002119d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00211a1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00211a4:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00211a7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00211aa:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00211ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00211b0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00211b4:	89 d8                	mov    eax,ebx
c00211b6:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00211b9:	ba 00 00 00 00       	mov    edx,0x0
c00211be:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00211c2:	b8 00 00 00 00       	mov    eax,0x0
c00211c7:	73 0b                	jae    c00211d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00211c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00211cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00211d0:	29 f8                	sub    eax,edi
c00211d2:	19 da                	sbb    edx,ebx
c00211d4:	89 d3                	mov    ebx,edx
c00211d6:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00211d9:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00211dc:	09 c3                	or     ebx,eax
c00211de:	0f 84 59 ff ff ff    	je     c002113d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00211e4:	55                   	push   ebp
c00211e5:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00211e9:	50                   	push   eax
c00211ea:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00211f1:	53                   	push   ebx
c00211f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00211f4:	c1 e0 0b             	shl    eax,0xb
c00211f7:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00211fb:	c1 e8 0b             	shr    eax,0xb
c00211fe:	50                   	push   eax
c00211ff:	e8 53 fc ff ff       	call   c0020e57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021204:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021207:	83 c4 10             	add    esp,0x10
c002120a:	25 ff 07 00 00       	and    eax,0x7ff
c002120f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021212:	57                   	push   edi
c0021213:	6a 28                	push   0x28
c0021215:	6a 00                	push   0x0
c0021217:	8d 44 24 24          	lea    eax,[esp+0x24]
c002121b:	50                   	push   eax
c002121c:	e8 97 f4 fd ff       	call   c00006b8 <memset>
c0021221:	31 d2                	xor    edx,edx
c0021223:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021226:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002122c:	89 f8                	mov    eax,edi
c002122e:	83 c0 21             	add    eax,0x21
c0021231:	83 d2 00             	adc    edx,0x0
c0021234:	89 c7                	mov    edi,eax
c0021236:	89 d5                	mov    ebp,edx
c0021238:	83 c4 10             	add    esp,0x10
c002123b:	31 c9                	xor    ecx,ecx
c002123d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021244:	83 f9 28             	cmp    ecx,0x28
c0021247:	88 04 24             	mov    BYTE PTR [esp],al
c002124a:	0f 94 c2             	sete   dl
c002124d:	88 d0                	mov    al,dl
c002124f:	ba ff 07 00 00       	mov    edx,0x7ff
c0021254:	39 fa                	cmp    edx,edi
c0021256:	ba 00 00 00 00       	mov    edx,0x0
c002125b:	19 ea                	sbb    edx,ebp
c002125d:	0f 92 c2             	setb   dl
c0021260:	09 c2                	or     edx,eax
c0021262:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021266:	0f 94 c0             	sete   al
c0021269:	08 d0                	or     al,dl
c002126b:	75 16                	jne    c0021283 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c002126d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021271:	74 10                	je     c0021283 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021273:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021276:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002127a:	41                   	inc    ecx
c002127b:	83 c7 01             	add    edi,0x1
c002127e:	83 d5 00             	adc    ebp,0x0
c0021281:	eb ba                	jmp    c002123d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021283:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002128a:	83 ec 0c             	sub    esp,0xc
c002128d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021291:	57                   	push   edi
c0021292:	e8 3e f4 fd ff       	call   c00006d5 <strlen>
c0021297:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002129f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00212a3:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c00212aa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00212ad:	5a                   	pop    edx
c00212ae:	25 ff 07 00 00       	and    eax,0x7ff
c00212b3:	01 c8                	add    eax,ecx
c00212b5:	59                   	pop    ecx
c00212b6:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00212bc:	83 e0 02             	and    eax,0x2
c00212bf:	3c 01                	cmp    al,0x1
c00212c1:	19 c0                	sbb    eax,eax
c00212c3:	83 c0 02             	add    eax,0x2
c00212c6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00212ca:	57                   	push   edi
c00212cb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00212cf:	50                   	push   eax
c00212d0:	e8 82 f4 fd ff       	call   c0000757 <strcpy>
c00212d5:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00212d9:	83 c4 10             	add    esp,0x10
c00212dc:	84 c0                	test   al,al
c00212de:	75 21                	jne    c0021301 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c00212e0:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00212e8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00212f0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00212f8:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00212ff:	eb 28                	jmp    c0021329 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021301:	fe c8                	dec    al
c0021303:	75 24                	jne    c0021329 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021305:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002130d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021315:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002131d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021324:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021329:	0f b6 fb             	movzx  edi,bl
c002132c:	31 db                	xor    ebx,ebx
c002132e:	50                   	push   eax
c002132f:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021336:	8d 44 24 48          	lea    eax,[esp+0x48]
c002133a:	50                   	push   eax
c002133b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021342:	e8 59 f3 fd ff       	call   c00006a0 <memcpy>
c0021347:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c002134e:	89 f9                	mov    ecx,edi
c0021350:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021356:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021359:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c002135c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c002135f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021362:	83 c4 10             	add    esp,0x10
c0021365:	39 c7                	cmp    edi,eax
c0021367:	89 df                	mov    edi,ebx
c0021369:	19 d7                	sbb    edi,edx
c002136b:	72 10                	jb     c002137d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002136d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c002137b:	eb 0a                	jmp    c0021387 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c002137d:	29 c8                	sub    eax,ecx
c002137f:	19 da                	sbb    edx,ebx
c0021381:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021384:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021387:	31 c0                	xor    eax,eax
c0021389:	eb 05                	jmp    c0021390 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002138b:	b8 04 00 00 00       	mov    eax,0x4
c0021390:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021396:	5b                   	pop    ebx
c0021397:	5e                   	pop    esi
c0021398:	5f                   	pop    edi
c0021399:	5d                   	pop    ebp
c002139a:	c3                   	ret    

c002139b <readRoot(unsigned int*, unsigned int*, char)>:
c002139b:	81 ec 40 08 00 00    	sub    esp,0x840
c00213a1:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00213a9:	50                   	push   eax
c00213aa:	8d 44 24 38          	lea    eax,[esp+0x38]
c00213ae:	50                   	push   eax
c00213af:	6a 10                	push   0x10
c00213b1:	e8 a1 fa ff ff       	call   c0020e57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213b6:	83 c4 0c             	add    esp,0xc
c00213b9:	6a 22                	push   0x22
c00213bb:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c00213c2:	50                   	push   eax
c00213c3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00213c7:	50                   	push   eax
c00213c8:	e8 d3 f2 fd ff       	call   c00006a0 <memcpy>
c00213cd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00213d8:	89 10                	mov    DWORD PTR [eax],edx
c00213da:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00213e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00213e5:	89 10                	mov    DWORD PTR [eax],edx
c00213e7:	b0 01                	mov    al,0x1
c00213e9:	81 c4 4c 08 00 00    	add    esp,0x84c
c00213ef:	c3                   	ret    

c00213f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00213f0:	55                   	push   ebp
c00213f1:	57                   	push   edi
c00213f2:	56                   	push   esi
c00213f3:	53                   	push   ebx
c00213f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213fa:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021401:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021408:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002140c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021410:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021414:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021418:	75 03                	jne    c002141d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002141a:	83 c3 02             	add    ebx,0x2
c002141d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021420:	75 03                	jne    c0021425 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021422:	43                   	inc    ebx
c0021423:	eb f8                	jmp    c002141d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021425:	51                   	push   ecx
c0021426:	68 00 01 00 00       	push   0x100
c002142b:	6a 00                	push   0x0
c002142d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021431:	50                   	push   eax
c0021432:	e8 81 f2 fd ff       	call   c00006b8 <memset>
c0021437:	83 c4 10             	add    esp,0x10
c002143a:	31 d2                	xor    edx,edx
c002143c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002143f:	84 c0                	test   al,al
c0021441:	74 21                	je     c0021464 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021443:	3c 2f                	cmp    al,0x2f
c0021445:	75 0b                	jne    c0021452 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021447:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002144b:	bd 01 00 00 00       	mov    ebp,0x1
c0021450:	eb 14                	jmp    c0021466 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021452:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021455:	80 f9 19             	cmp    cl,0x19
c0021458:	77 03                	ja     c002145d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002145a:	83 e8 20             	sub    eax,0x20
c002145d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021461:	42                   	inc    edx
c0021462:	eb d8                	jmp    c002143c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021464:	31 ed                	xor    ebp,ebp
c0021466:	83 ec 0c             	sub    esp,0xc
c0021469:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021470:	e8 a3 e1 fe ff       	call   c000f618 <malloc>
c0021475:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002147c:	89 c6                	mov    esi,eax
c002147e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021484:	c1 ef 0b             	shr    edi,0xb
c0021487:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002148e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021492:	83 c4 10             	add    esp,0x10
c0021495:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002149a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002149e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00214a5:	74 28                	je     c00214cf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00214a7:	52                   	push   edx
c00214a8:	57                   	push   edi
c00214a9:	50                   	push   eax
c00214aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00214ae:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00214b5:	e8 9d f9 ff ff       	call   c0020e57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214be:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00214c5:	05 00 08 00 00       	add    eax,0x800
c00214ca:	83 c4 10             	add    esp,0x10
c00214cd:	eb cb                	jmp    c002149a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00214cf:	83 ec 0c             	sub    esp,0xc
c00214d2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00214d6:	57                   	push   edi
c00214d7:	e8 f9 f1 fd ff       	call   c00006d5 <strlen>
c00214dc:	50                   	push   eax
c00214dd:	57                   	push   edi
c00214de:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00214e5:	56                   	push   esi
c00214e6:	e8 2a f9 ff ff       	call   c0020e15 <__memmem(unsigned char*, int, unsigned char*, int)>
c00214eb:	83 c4 20             	add    esp,0x20
c00214ee:	85 c0                	test   eax,eax
c00214f0:	75 13                	jne    c0021505 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00214f2:	83 ec 0c             	sub    esp,0xc
c00214f5:	56                   	push   esi
c00214f6:	e8 2d e1 fe ff       	call   c000f628 <free>
c00214fb:	83 c4 10             	add    esp,0x10
c00214fe:	31 c0                	xor    eax,eax
c0021500:	e9 b3 00 00 00       	jmp    c00215b8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021505:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021509:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002150d:	c1 e7 08             	shl    edi,0x8
c0021510:	c1 e2 10             	shl    edx,0x10
c0021513:	09 d7                	or     edi,edx
c0021515:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021519:	09 d7                	or     edi,edx
c002151b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002151f:	c1 e2 18             	shl    edx,0x18
c0021522:	09 d7                	or     edi,edx
c0021524:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021528:	89 d1                	mov    ecx,edx
c002152a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002152e:	c1 e1 08             	shl    ecx,0x8
c0021531:	c1 e2 10             	shl    edx,0x10
c0021534:	09 ca                	or     edx,ecx
c0021536:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002153a:	09 ca                	or     edx,ecx
c002153c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021540:	c1 e1 18             	shl    ecx,0x18
c0021543:	09 ca                	or     edx,ecx
c0021545:	89 e9                	mov    ecx,ebp
c0021547:	84 c9                	test   cl,cl
c0021549:	74 3c                	je     c0021587 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002154b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002154f:	83 ec 0c             	sub    esp,0xc
c0021552:	56                   	push   esi
c0021553:	e8 d0 e0 fe ff       	call   c000f628 <free>
c0021558:	83 c4 0c             	add    esp,0xc
c002155b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021562:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021567:	50                   	push   eax
c0021568:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002156f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021576:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002157a:	52                   	push   edx
c002157b:	57                   	push   edi
c002157c:	53                   	push   ebx
c002157d:	e8 6e fe ff ff       	call   c00213f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021582:	83 c4 20             	add    esp,0x20
c0021585:	eb 31                	jmp    c00215b8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021587:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002158a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021591:	d0 e8                	shr    al,1
c0021593:	89 3b                	mov    DWORD PTR [ebx],edi
c0021595:	83 e0 01             	and    eax,0x1
c0021598:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002159f:	83 ec 0c             	sub    esp,0xc
c00215a2:	89 13                	mov    DWORD PTR [ebx],edx
c00215a4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00215ab:	89 03                	mov    DWORD PTR [ebx],eax
c00215ad:	56                   	push   esi
c00215ae:	e8 75 e0 fe ff       	call   c000f628 <free>
c00215b3:	83 c4 10             	add    esp,0x10
c00215b6:	b0 01                	mov    al,0x1
c00215b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215be:	5b                   	pop    ebx
c00215bf:	5e                   	pop    esi
c00215c0:	5f                   	pop    edi
c00215c1:	5d                   	pop    ebp
c00215c2:	c3                   	ret    

c00215c3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00215c3:	55                   	push   ebp
c00215c4:	57                   	push   edi
c00215c5:	56                   	push   esi
c00215c6:	53                   	push   ebx
c00215c7:	83 ec 20             	sub    esp,0x20
c00215ca:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00215ce:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00215d2:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00215d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00215de:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00215e6:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00215eb:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00215f1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00215f7:	57                   	push   edi
c00215f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215fc:	50                   	push   eax
c00215fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021601:	50                   	push   eax
c0021602:	e8 94 fd ff ff       	call   c002139b <readRoot(unsigned int*, unsigned int*, char)>
c0021607:	5a                   	pop    edx
c0021608:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002160c:	e8 c4 f0 fd ff       	call   c00006d5 <strlen>
c0021611:	83 c4 10             	add    esp,0x10
c0021614:	83 f8 03             	cmp    eax,0x3
c0021617:	77 17                	ja     c0021630 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021619:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002161d:	89 03                	mov    DWORD PTR [ebx],eax
c002161f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021623:	89 06                	mov    DWORD PTR [esi],eax
c0021625:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002162c:	b0 01                	mov    al,0x1
c002162e:	eb 19                	jmp    c0021649 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021630:	50                   	push   eax
c0021631:	55                   	push   ebp
c0021632:	57                   	push   edi
c0021633:	56                   	push   esi
c0021634:	53                   	push   ebx
c0021635:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021639:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002163d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021641:	e8 aa fd ff ff       	call   c00213f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021646:	83 c4 20             	add    esp,0x20
c0021649:	83 c4 1c             	add    esp,0x1c
c002164c:	5b                   	pop    ebx
c002164d:	5e                   	pop    esi
c002164e:	5f                   	pop    edi
c002164f:	5d                   	pop    ebp
c0021650:	c3                   	ret    
c0021651:	90                   	nop

c0021652 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021652:	57                   	push   edi
c0021653:	56                   	push   esi
c0021654:	53                   	push   ebx
c0021655:	83 ec 10             	sub    esp,0x10
c0021658:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002165c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021660:	85 ff                	test   edi,edi
c0021662:	0f 84 9d 00 00 00    	je     c0021705 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021668:	85 f6                	test   esi,esi
c002166a:	0f 84 95 00 00 00    	je     c0021705 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021670:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021675:	74 17                	je     c002168e <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021677:	83 ec 0c             	sub    esp,0xc
c002167a:	68 2f bf 02 c0       	push   0xc002bf2f
c002167f:	e8 63 12 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0021684:	83 c4 10             	add    esp,0x10
c0021687:	b8 03 00 00 00       	mov    eax,0x3
c002168c:	eb 7c                	jmp    c002170a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002168e:	83 ec 0c             	sub    esp,0xc
c0021691:	6a 1c                	push   0x1c
c0021693:	e8 80 df fe ff       	call   c000f618 <malloc>
c0021698:	89 07                	mov    DWORD PTR [edi],eax
c002169a:	89 c3                	mov    ebx,eax
c002169c:	58                   	pop    eax
c002169d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216a1:	50                   	push   eax
c00216a2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00216a5:	50                   	push   eax
c00216a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216aa:	50                   	push   eax
c00216ab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216af:	50                   	push   eax
c00216b0:	56                   	push   esi
c00216b1:	e8 0d ff ff ff       	call   c00215c3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00216b6:	83 c4 20             	add    esp,0x20
c00216b9:	84 c0                	test   al,al
c00216bb:	74 07                	je     c00216c4 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00216bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00216c2:	74 0b                	je     c00216cf <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00216c4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00216c8:	b8 01 00 00 00       	mov    eax,0x1
c00216cd:	eb 3b                	jmp    c002170a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00216cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216d3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00216d7:	89 03                	mov    DWORD PTR [ebx],eax
c00216d9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00216e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216e4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00216eb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00216f2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00216f5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00216fc:	8a 06                	mov    al,BYTE PTR [esi]
c00216fe:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021701:	31 c0                	xor    eax,eax
c0021703:	eb 05                	jmp    c002170a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021705:	b8 04 00 00 00       	mov    eax,0x4
c002170a:	83 c4 10             	add    esp,0x10
c002170d:	5b                   	pop    ebx
c002170e:	5e                   	pop    esi
c002170f:	5f                   	pop    edi
c0021710:	c3                   	ret    
c0021711:	90                   	nop

c0021712 <ISO9660::exists(char const*)>:
c0021712:	83 ec 28             	sub    esp,0x28
c0021715:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021719:	8d 54 24 18          	lea    edx,[esp+0x18]
c002171d:	52                   	push   edx
c002171e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021721:	52                   	push   edx
c0021722:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021726:	52                   	push   edx
c0021727:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002172b:	52                   	push   edx
c002172c:	50                   	push   eax
c002172d:	e8 91 fe ff ff       	call   c00215c3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021732:	83 c4 3c             	add    esp,0x3c
c0021735:	c3                   	ret    

c0021736 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021736:	56                   	push   esi
c0021737:	53                   	push   ebx
c0021738:	83 ec 14             	sub    esp,0x14
c002173b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002173f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021743:	85 db                	test   ebx,ebx
c0021745:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021749:	0f 94 c2             	sete   dl
c002174c:	85 f6                	test   esi,esi
c002174e:	0f 94 c0             	sete   al
c0021751:	08 c2                	or     dl,al
c0021753:	75 68                	jne    c00217bd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021755:	85 c9                	test   ecx,ecx
c0021757:	74 64                	je     c00217bd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021759:	83 ec 0c             	sub    esp,0xc
c002175c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002175f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021763:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021769:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021770:	50                   	push   eax
c0021771:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021774:	50                   	push   eax
c0021775:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021779:	50                   	push   eax
c002177a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002177e:	50                   	push   eax
c002177f:	51                   	push   ecx
c0021780:	e8 3e fe ff ff       	call   c00215c3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021785:	83 c4 20             	add    esp,0x20
c0021788:	ba 01 00 00 00       	mov    edx,0x1
c002178d:	84 c0                	test   al,al
c002178f:	74 31                	je     c00217c2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021791:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021795:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002179c:	89 03                	mov    DWORD PTR [ebx],eax
c002179e:	ba 00 00 00 00       	mov    edx,0x0
c00217a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217a7:	85 c0                	test   eax,eax
c00217a9:	0f 95 06             	setne  BYTE PTR [esi]
c00217ac:	74 14                	je     c00217c2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00217ae:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00217b4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00217bb:	eb 05                	jmp    c00217c2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00217bd:	ba 04 00 00 00       	mov    edx,0x4
c00217c2:	83 c4 14             	add    esp,0x14
c00217c5:	89 d0                	mov    eax,edx
c00217c7:	5b                   	pop    ebx
c00217c8:	5e                   	pop    esi
c00217c9:	c3                   	ret    

c00217ca <ISO9660::openDir(char const*, void**)>:
c00217ca:	57                   	push   edi
c00217cb:	56                   	push   esi
c00217cc:	53                   	push   ebx
c00217cd:	83 ec 10             	sub    esp,0x10
c00217d0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00217d4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00217d8:	85 ff                	test   edi,edi
c00217da:	0f 84 95 00 00 00    	je     c0021875 <ISO9660::openDir(char const*, void**)+0xab>
c00217e0:	85 f6                	test   esi,esi
c00217e2:	0f 84 8d 00 00 00    	je     c0021875 <ISO9660::openDir(char const*, void**)+0xab>
c00217e8:	83 ec 0c             	sub    esp,0xc
c00217eb:	6a 1c                	push   0x1c
c00217ed:	e8 26 de fe ff       	call   c000f618 <malloc>
c00217f2:	89 07                	mov    DWORD PTR [edi],eax
c00217f4:	89 c3                	mov    ebx,eax
c00217f6:	59                   	pop    ecx
c00217f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00217fb:	50                   	push   eax
c00217fc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00217ff:	50                   	push   eax
c0021800:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021804:	50                   	push   eax
c0021805:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021809:	50                   	push   eax
c002180a:	56                   	push   esi
c002180b:	e8 b3 fd ff ff       	call   c00215c3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021810:	83 c4 20             	add    esp,0x20
c0021813:	84 c0                	test   al,al
c0021815:	74 07                	je     c002181e <ISO9660::openDir(char const*, void**)+0x54>
c0021817:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002181c:	75 21                	jne    c002183f <ISO9660::openDir(char const*, void**)+0x75>
c002181e:	0f b6 c0             	movzx  eax,al
c0021821:	52                   	push   edx
c0021822:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021826:	50                   	push   eax
c0021827:	68 55 bf 02 c0       	push   0xc002bf55
c002182c:	e8 b6 10 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0021831:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021835:	83 c4 10             	add    esp,0x10
c0021838:	b8 01 00 00 00       	mov    eax,0x1
c002183d:	eb 3b                	jmp    c002187a <ISO9660::openDir(char const*, void**)+0xb0>
c002183f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021843:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021847:	89 03                	mov    DWORD PTR [ebx],eax
c0021849:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021850:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021854:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002185b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021862:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021865:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002186c:	8a 06                	mov    al,BYTE PTR [esi]
c002186e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021871:	31 c0                	xor    eax,eax
c0021873:	eb 05                	jmp    c002187a <ISO9660::openDir(char const*, void**)+0xb0>
c0021875:	b8 04 00 00 00       	mov    eax,0x4
c002187a:	83 c4 10             	add    esp,0x10
c002187d:	5b                   	pop    ebx
c002187e:	5e                   	pop    esi
c002187f:	5f                   	pop    edi
c0021880:	c3                   	ret    
c0021881:	90                   	nop

c0021882 <ISO9660::ISO9660()>:
c0021882:	83 ec 0c             	sub    esp,0xc
c0021885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021889:	83 ec 0c             	sub    esp,0xc
c002188c:	50                   	push   eax
c002188d:	e8 5a 13 ff ff       	call   c0012bec <Filesystem::Filesystem()>
c0021892:	83 c4 10             	add    esp,0x10
c0021895:	ba 78 bf 02 c0       	mov    edx,0xc002bf78
c002189a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002189e:	89 10                	mov    DWORD PTR [eax],edx
c00218a0:	90                   	nop
c00218a1:	83 c4 0c             	add    esp,0xc
c00218a4:	c3                   	ret    
c00218a5:	90                   	nop

c00218a6 <SoundChannel::~SoundChannel()>:
c00218a6:	83 ec 0c             	sub    esp,0xc
c00218a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00218b0:	83 ec 0c             	sub    esp,0xc
c00218b3:	50                   	push   eax
c00218b4:	e8 6f dd fe ff       	call   c000f628 <free>
c00218b9:	83 c4 10             	add    esp,0x10
c00218bc:	90                   	nop
c00218bd:	83 c4 0c             	add    esp,0xc
c00218c0:	c3                   	ret    
c00218c1:	90                   	nop

c00218c2 <SoundChannel::setSpeed(float)>:
c00218c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00218ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00218cd:	c3                   	ret    

c00218ce <SoundChannel::getSpeed()>:
c00218ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218d2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00218d5:	c3                   	ret    

c00218d6 <SoundChannel::setVolume(int)>:
c00218d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218da:	83 f8 64             	cmp    eax,0x64
c00218dd:	7e 05                	jle    c00218e4 <SoundChannel::setVolume(int)+0xe>
c00218df:	b8 64 00 00 00       	mov    eax,0x64
c00218e4:	85 c0                	test   eax,eax
c00218e6:	79 02                	jns    c00218ea <SoundChannel::setVolume(int)+0x14>
c00218e8:	31 c0                	xor    eax,eax
c00218ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00218ee:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00218f1:	c3                   	ret    

c00218f2 <SoundChannel::getVolume()>:
c00218f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218f6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00218f9:	c3                   	ret    

c00218fa <SoundChannel::pause()>:
c00218fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218fe:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021902:	c3                   	ret    
c0021903:	90                   	nop

c0021904 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021904:	83 ec 1c             	sub    esp,0x1c
c0021907:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002190b:	e8 ea ff ff ff       	call   c00218fa <SoundChannel::pause()>
c0021910:	83 c4 04             	add    esp,0x4
c0021913:	6a 50                	push   0x50
c0021915:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021919:	e8 b8 ff ff ff       	call   c00218d6 <SoundChannel::setVolume(int)>
c002191e:	83 c4 08             	add    esp,0x8
c0021921:	a1 f0 bf 02 c0       	mov    eax,ds:0xc002bff0
c0021926:	50                   	push   eax
c0021927:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002192b:	e8 92 ff ff ff       	call   c00218c2 <SoundChannel::setSpeed(float)>
c0021930:	83 c4 08             	add    esp,0x8
c0021933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021937:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002193b:	89 10                	mov    DWORD PTR [eax],edx
c002193d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021941:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021945:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002194c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021950:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021953:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021958:	75 23                	jne    c002197d <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002195a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002195e:	8b 10                	mov    edx,DWORD PTR [eax]
c0021960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021964:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021967:	0f af c2             	imul   eax,edx
c002196a:	85 c0                	test   eax,eax
c002196c:	79 03                	jns    c0021971 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002196e:	83 c0 03             	add    eax,0x3
c0021971:	c1 f8 02             	sar    eax,0x2
c0021974:	05 a0 0f 00 00       	add    eax,0xfa0
c0021979:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002197d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021981:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021985:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002198c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021997:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002199e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219a2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00219a5:	c1 e0 02             	shl    eax,0x2
c00219a8:	83 ec 0c             	sub    esp,0xc
c00219ab:	50                   	push   eax
c00219ac:	e8 67 dc fe ff       	call   c000f618 <malloc>
c00219b1:	83 c4 10             	add    esp,0x10
c00219b4:	89 c2                	mov    edx,eax
c00219b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219ba:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00219bd:	83 ec 04             	sub    esp,0x4
c00219c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00219c4:	50                   	push   eax
c00219c5:	6a 01                	push   0x1
c00219c7:	6a 04                	push   0x4
c00219c9:	e8 ae 6f fe ff       	call   c000897c <src_new>
c00219ce:	83 c4 10             	add    esp,0x10
c00219d1:	89 c2                	mov    edx,eax
c00219d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00219da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219de:	85 c0                	test   eax,eax
c00219e0:	74 10                	je     c00219f2 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00219e2:	83 ec 0c             	sub    esp,0xc
c00219e5:	68 d4 bf 02 c0       	push   0xc002bfd4
c00219ea:	e8 6c 84 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c00219ef:	83 c4 10             	add    esp,0x10
c00219f2:	a0 20 1e 03 c0       	mov    al,ds:0xc0031e20
c00219f7:	83 f0 01             	xor    eax,0x1
c00219fa:	84 c0                	test   al,al
c00219fc:	74 57                	je     c0021a55 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00219fe:	a1 f4 bf 02 c0       	mov    eax,ds:0xc002bff4
c0021a03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a07:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a0f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021a17:	7f 35                	jg     c0021a4e <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021a19:	83 ec 0c             	sub    esp,0xc
c0021a1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a20:	e8 52 50 00 00       	call   c0026a77 <__floatsisf>
c0021a25:	83 c4 10             	add    esp,0x10
c0021a28:	8b 15 f4 bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bff4
c0021a2e:	83 ec 08             	sub    esp,0x8
c0021a31:	52                   	push   edx
c0021a32:	50                   	push   eax
c0021a33:	e8 51 4c 00 00       	call   c0026689 <__mulsf3>
c0021a38:	83 c4 10             	add    esp,0x10
c0021a3b:	89 c2                	mov    edx,eax
c0021a3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a41:	89 14 85 20 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5e0],edx
c0021a48:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021a4c:	eb c1                	jmp    c0021a0f <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021a4e:	c6 05 20 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e20,0x1
c0021a55:	90                   	nop
c0021a56:	83 c4 1c             	add    esp,0x1c
c0021a59:	c3                   	ret    

c0021a5a <SoundChannel::play()>:
c0021a5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a5e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021a62:	c3                   	ret    
c0021a63:	90                   	nop

c0021a64 <SoundChannel::paused()>:
c0021a64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a68:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021a6b:	c3                   	ret    

c0021a6c <SoundChannel::getSampleRate()>:
c0021a6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a70:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a72:	c3                   	ret    
c0021a73:	90                   	nop

c0021a74 <SoundChannel::getBits()>:
c0021a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a7b:	c3                   	ret    

c0021a7c <SoundChannel::getBufferUsed()>:
c0021a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a80:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021a83:	c3                   	ret    

c0021a84 <SoundChannel::getBufferSize()>:
c0021a84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021a8b:	c3                   	ret    

c0021a8c <SoundChannel::unbuffer(float*, int, int)>:
c0021a8c:	56                   	push   esi
c0021a8d:	53                   	push   ebx
c0021a8e:	83 ec 40             	sub    esp,0x40
c0021a91:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021a95:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021a98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021a9c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021a9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021aa3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021aa7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021aab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021aaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021ab3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021ab7:	e8 bb 4f 00 00       	call   c0026a77 <__floatsisf>
c0021abc:	5a                   	pop    edx
c0021abd:	89 c6                	mov    esi,eax
c0021abf:	ff 33                	push   DWORD PTR [ebx]
c0021ac1:	e8 b1 4f 00 00       	call   c0026a77 <__floatsisf>
c0021ac6:	59                   	pop    ecx
c0021ac7:	5a                   	pop    edx
c0021ac8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021acb:	50                   	push   eax
c0021acc:	e8 b8 4b 00 00       	call   c0026689 <__mulsf3>
c0021ad1:	59                   	pop    ecx
c0021ad2:	5a                   	pop    edx
c0021ad3:	50                   	push   eax
c0021ad4:	56                   	push   esi
c0021ad5:	e8 72 4d 00 00       	call   c002684c <__divsf3>
c0021ada:	89 04 24             	mov    DWORD PTR [esp],eax
c0021add:	e8 65 62 00 00       	call   c0027d47 <__extendsfdf2>
c0021ae2:	59                   	pop    ecx
c0021ae3:	5e                   	pop    esi
c0021ae4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021ae8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021aec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021af4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021af8:	50                   	push   eax
c0021af9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021afc:	e8 70 6a fe ff       	call   c0008571 <src_process>
c0021b01:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b05:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021b08:	83 c4 0c             	add    esp,0xc
c0021b0b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021b0e:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021b11:	29 d0                	sub    eax,edx
c0021b13:	c1 e0 02             	shl    eax,0x2
c0021b16:	50                   	push   eax
c0021b17:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021b1a:	50                   	push   eax
c0021b1b:	51                   	push   ecx
c0021b1c:	e8 47 eb fd ff       	call   c0000668 <memmove>
c0021b21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b25:	83 c4 44             	add    esp,0x44
c0021b28:	5b                   	pop    ebx
c0021b29:	5e                   	pop    esi
c0021b2a:	c3                   	ret    
c0021b2b:	90                   	nop

c0021b2c <SoundChannel::buffer8(unsigned char*, int)>:
c0021b2c:	55                   	push   ebp
c0021b2d:	57                   	push   edi
c0021b2e:	56                   	push   esi
c0021b2f:	53                   	push   ebx
c0021b30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b34:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021b38:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021b3b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021b3f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021b42:	74 7a                	je     c0021bbe <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021b44:	85 ff                	test   edi,edi
c0021b46:	7e 76                	jle    c0021bbe <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021b48:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021b4c:	8d 70 01             	lea    esi,[eax+0x1]
c0021b4f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021b52:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021b55:	8b 1c 9d 20 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce5e0]
c0021b5c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021b5f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021b62:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021b65:	74 5e                	je     c0021bc5 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021b67:	83 ff 01             	cmp    edi,0x1
c0021b6a:	74 4b                	je     c0021bb7 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021b6c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021b70:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021b73:	8d 70 01             	lea    esi,[eax+0x1]
c0021b76:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021b79:	8b 1c 9d 20 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce5e0]
c0021b80:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021b83:	b8 02 00 00 00       	mov    eax,0x2
c0021b88:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021b8b:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021b8e:	75 23                	jne    c0021bb3 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021b90:	eb 27                	jmp    c0021bb9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021b92:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021b97:	8d 71 01             	lea    esi,[ecx+0x1]
c0021b9a:	40                   	inc    eax
c0021b9b:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021b9e:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021ba1:	8b 1c 9d 20 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce5e0]
c0021ba8:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021bab:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021bae:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021bb1:	74 06                	je     c0021bb9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021bb3:	39 c7                	cmp    edi,eax
c0021bb5:	75 db                	jne    c0021b92 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021bb7:	89 f8                	mov    eax,edi
c0021bb9:	5b                   	pop    ebx
c0021bba:	5e                   	pop    esi
c0021bbb:	5f                   	pop    edi
c0021bbc:	5d                   	pop    ebp
c0021bbd:	c3                   	ret    
c0021bbe:	5b                   	pop    ebx
c0021bbf:	31 c0                	xor    eax,eax
c0021bc1:	5e                   	pop    esi
c0021bc2:	5f                   	pop    edi
c0021bc3:	5d                   	pop    ebp
c0021bc4:	c3                   	ret    
c0021bc5:	b8 01 00 00 00       	mov    eax,0x1
c0021bca:	eb ed                	jmp    c0021bb9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021bcc <SoundDevice::SoundDevice(char const*)>:
c0021bcc:	83 ec 1c             	sub    esp,0x1c
c0021bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bd3:	83 ec 08             	sub    esp,0x8
c0021bd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021bda:	50                   	push   eax
c0021bdb:	e8 1e 23 ff ff       	call   c0013efe <Device::Device(char const*)>
c0021be0:	83 c4 10             	add    esp,0x10
c0021be3:	ba 00 c0 02 c0       	mov    edx,0xc002c000
c0021be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bec:	89 10                	mov    DWORD PTR [eax],edx
c0021bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf2:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c00:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021c0a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c12:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021c17:	7f 19                	jg     c0021c32 <SoundDevice::SoundDevice(char const*)+0x66>
c0021c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c21:	83 c2 54             	add    edx,0x54
c0021c24:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021c2c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c30:	eb e0                	jmp    c0021c12 <SoundDevice::SoundDevice(char const*)+0x46>
c0021c32:	90                   	nop
c0021c33:	83 c4 1c             	add    esp,0x1c
c0021c36:	c3                   	ret    
c0021c37:	90                   	nop

c0021c38 <SoundDevice::~SoundDevice()>:
c0021c38:	53                   	push   ebx
c0021c39:	83 ec 18             	sub    esp,0x18
c0021c3c:	ba 00 c0 02 c0       	mov    edx,0xc002c000
c0021c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c45:	89 10                	mov    DWORD PTR [eax],edx
c0021c47:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c4f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021c54:	7f 46                	jg     c0021c9c <SoundDevice::~SoundDevice()+0x64>
c0021c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c5e:	83 c2 54             	add    edx,0x54
c0021c61:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021c65:	85 c0                	test   eax,eax
c0021c67:	74 2d                	je     c0021c96 <SoundDevice::~SoundDevice()+0x5e>
c0021c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c71:	83 c2 54             	add    edx,0x54
c0021c74:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021c78:	85 db                	test   ebx,ebx
c0021c7a:	74 1a                	je     c0021c96 <SoundDevice::~SoundDevice()+0x5e>
c0021c7c:	83 ec 0c             	sub    esp,0xc
c0021c7f:	53                   	push   ebx
c0021c80:	e8 21 fc ff ff       	call   c00218a6 <SoundChannel::~SoundChannel()>
c0021c85:	83 c4 10             	add    esp,0x10
c0021c88:	83 ec 08             	sub    esp,0x8
c0021c8b:	6a 2c                	push   0x2c
c0021c8d:	53                   	push   ebx
c0021c8e:	e8 74 0b ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0021c93:	83 c4 10             	add    esp,0x10
c0021c96:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c9a:	eb b3                	jmp    c0021c4f <SoundDevice::~SoundDevice()+0x17>
c0021c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ca0:	83 ec 0c             	sub    esp,0xc
c0021ca3:	50                   	push   eax
c0021ca4:	e8 37 1f ff ff       	call   c0013be0 <Device::~Device()>
c0021ca9:	83 c4 10             	add    esp,0x10
c0021cac:	90                   	nop
c0021cad:	83 c4 18             	add    esp,0x18
c0021cb0:	5b                   	pop    ebx
c0021cb1:	c3                   	ret    

c0021cb2 <SoundDevice::~SoundDevice()>:
c0021cb2:	83 ec 0c             	sub    esp,0xc
c0021cb5:	83 ec 0c             	sub    esp,0xc
c0021cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cbc:	e8 77 ff ff ff       	call   c0021c38 <SoundDevice::~SoundDevice()>
c0021cc1:	83 c4 10             	add    esp,0x10
c0021cc4:	83 ec 08             	sub    esp,0x8
c0021cc7:	68 e4 01 00 00       	push   0x1e4
c0021ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cd0:	e8 32 0b ff ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0021cd5:	83 c4 10             	add    esp,0x10
c0021cd8:	83 c4 0c             	add    esp,0xc
c0021cdb:	c3                   	ret    

c0021cdc <SoundDevice::getFreeChannelNum()>:
c0021cdc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ce0:	31 c0                	xor    eax,eax
c0021ce2:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021cea:	74 09                	je     c0021cf5 <SoundDevice::getFreeChannelNum()+0x19>
c0021cec:	40                   	inc    eax
c0021ced:	83 f8 20             	cmp    eax,0x20
c0021cf0:	75 f0                	jne    c0021ce2 <SoundDevice::getFreeChannelNum()+0x6>
c0021cf2:	83 c8 ff             	or     eax,0xffffffff
c0021cf5:	c3                   	ret    

c0021cf6 <SoundDevice::addChannel(SoundChannel*)>:
c0021cf6:	56                   	push   esi
c0021cf7:	53                   	push   ebx
c0021cf8:	51                   	push   ecx
c0021cf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021cfd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021d01:	53                   	push   ebx
c0021d02:	e8 d5 ff ff ff       	call   c0021cdc <SoundDevice::getFreeChannelNum()>
c0021d07:	5a                   	pop    edx
c0021d08:	83 f8 ff             	cmp    eax,0xffffffff
c0021d0b:	74 51                	je     c0021d5e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021d0d:	85 f6                	test   esi,esi
c0021d0f:	74 4d                	je     c0021d5e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021d11:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021d18:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021d1f:	75 30                	jne    c0021d51 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021d21:	83 ec 0c             	sub    esp,0xc
c0021d24:	56                   	push   esi
c0021d25:	e8 42 fd ff ff       	call   c0021a6c <SoundChannel::getSampleRate()>
c0021d2a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021d30:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d33:	e8 3c fd ff ff       	call   c0021a74 <SoundChannel::getBits()>
c0021d38:	83 c4 0c             	add    esp,0xc
c0021d3b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021d41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021d43:	50                   	push   eax
c0021d44:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021d4a:	53                   	push   ebx
c0021d4b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021d4e:	83 c4 10             	add    esp,0x10
c0021d51:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021d57:	b8 01 00 00 00       	mov    eax,0x1
c0021d5c:	eb 03                	jmp    c0021d61 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021d5e:	83 c8 ff             	or     eax,0xffffffff
c0021d61:	5a                   	pop    edx
c0021d62:	5b                   	pop    ebx
c0021d63:	5e                   	pop    esi
c0021d64:	c3                   	ret    
c0021d65:	90                   	nop

c0021d66 <SoundDevice::removeChannel(int)>:
c0021d66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d6e:	83 fa 1f             	cmp    edx,0x1f
c0021d71:	77 23                	ja     c0021d96 <SoundDevice::removeChannel(int)+0x30>
c0021d73:	8d 14 90             	lea    edx,[eax+edx*4]
c0021d76:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021d7d:	74 17                	je     c0021d96 <SoundDevice::removeChannel(int)+0x30>
c0021d7f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021d89:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021d8f:	75 05                	jne    c0021d96 <SoundDevice::removeChannel(int)+0x30>
c0021d91:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d93:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021d96:	c3                   	ret    
c0021d97:	90                   	nop

c0021d98 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021d98:	57                   	push   edi
c0021d99:	56                   	push   esi
c0021d9a:	53                   	push   ebx
c0021d9b:	31 db                	xor    ebx,ebx
c0021d9d:	83 ec 10             	sub    esp,0x10
c0021da0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021da4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021da8:	0f 8d cb 00 00 00    	jge    c0021e79 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021dae:	83 ec 0c             	sub    esp,0xc
c0021db1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021db5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021db8:	e8 8a 5f 00 00       	call   c0027d47 <__extendsfdf2>
c0021dbd:	83 c4 10             	add    esp,0x10
c0021dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021dc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021dc8:	68 00 00 f0 3f       	push   0x3ff00000
c0021dcd:	6a 00                	push   0x0
c0021dcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dd7:	e8 f7 4e 00 00       	call   c0026cd3 <__adddf3>
c0021ddc:	83 c4 10             	add    esp,0x10
c0021ddf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021de3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021de7:	68 00 00 e0 3f       	push   0x3fe00000
c0021dec:	6a 00                	push   0x0
c0021dee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021df2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021df6:	e8 55 55 00 00       	call   c0027350 <__muldf3>
c0021dfb:	83 c4 10             	add    esp,0x10
c0021dfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021e02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021e06:	68 00 00 60 40       	push   0x40600000
c0021e0b:	6a 00                	push   0x0
c0021e0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e15:	e8 36 55 00 00       	call   c0027350 <__muldf3>
c0021e1a:	59                   	pop    ecx
c0021e1b:	5f                   	pop    edi
c0021e1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021e20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021e24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e2c:	e8 f2 5d 00 00       	call   c0027c23 <__truncdfsf2>
c0021e31:	5a                   	pop    edx
c0021e32:	89 c7                	mov    edi,eax
c0021e34:	59                   	pop    ecx
c0021e35:	68 00 00 fe 42       	push   0x42fe0000
c0021e3a:	50                   	push   eax
c0021e3b:	e8 8d 4e 00 00       	call   c0026ccd <__gesf2>
c0021e40:	83 c4 10             	add    esp,0x10
c0021e43:	85 c0                	test   eax,eax
c0021e45:	78 06                	js     c0021e4d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021e47:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021e4b:	eb 26                	jmp    c0021e73 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021e4d:	50                   	push   eax
c0021e4e:	50                   	push   eax
c0021e4f:	6a 00                	push   0x0
c0021e51:	57                   	push   edi
c0021e52:	e8 7a 4e 00 00       	call   c0026cd1 <__lesf2>
c0021e57:	83 c4 10             	add    esp,0x10
c0021e5a:	85 c0                	test   eax,eax
c0021e5c:	7f 06                	jg     c0021e64 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021e5e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021e62:	eb 0f                	jmp    c0021e73 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021e64:	83 ec 0c             	sub    esp,0xc
c0021e67:	57                   	push   edi
c0021e68:	e8 6f 5f 00 00       	call   c0027ddc <lrintf>
c0021e6d:	83 c4 10             	add    esp,0x10
c0021e70:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021e73:	43                   	inc    ebx
c0021e74:	e9 2b ff ff ff       	jmp    c0021da4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021e79:	83 c4 10             	add    esp,0x10
c0021e7c:	5b                   	pop    ebx
c0021e7d:	5e                   	pop    esi
c0021e7e:	5f                   	pop    edi
c0021e7f:	c3                   	ret    

c0021e80 <SoundDevice::getAudio(int, float*, float*)>:
c0021e80:	55                   	push   ebp
c0021e81:	57                   	push   edi
c0021e82:	56                   	push   esi
c0021e83:	53                   	push   ebx
c0021e84:	31 db                	xor    ebx,ebx
c0021e86:	83 ec 20             	sub    esp,0x20
c0021e89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021e8d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021e91:	c1 e0 02             	shl    eax,0x2
c0021e94:	50                   	push   eax
c0021e95:	6a 00                	push   0x0
c0021e97:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021e9b:	e8 18 e8 fd ff       	call   c00006b8 <memset>
c0021ea0:	83 c4 10             	add    esp,0x10
c0021ea3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021ea7:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021eae:	85 c0                	test   eax,eax
c0021eb0:	0f 84 d7 00 00 00    	je     c0021f8d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021eb6:	83 ec 0c             	sub    esp,0xc
c0021eb9:	50                   	push   eax
c0021eba:	e8 a5 fb ff ff       	call   c0021a64 <SoundChannel::paused()>
c0021ebf:	83 c4 10             	add    esp,0x10
c0021ec2:	84 c0                	test   al,al
c0021ec4:	0f 85 c3 00 00 00    	jne    c0021f8d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021eca:	83 ec 0c             	sub    esp,0xc
c0021ecd:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021ed4:	e8 19 fa ff ff       	call   c00218f2 <SoundChannel::getVolume()>
c0021ed9:	83 c4 10             	add    esp,0x10
c0021edc:	85 c0                	test   eax,eax
c0021ede:	0f 84 a9 00 00 00    	je     c0021f8d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021ee4:	83 ec 0c             	sub    esp,0xc
c0021ee7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021eee:	e8 ff f9 ff ff       	call   c00218f2 <SoundChannel::getVolume()>
c0021ef3:	83 ec 0c             	sub    esp,0xc
c0021ef6:	50                   	push   eax
c0021ef7:	e8 7b 4b 00 00       	call   c0026a77 <__floatsisf>
c0021efc:	59                   	pop    ecx
c0021efd:	5d                   	pop    ebp
c0021efe:	31 ed                	xor    ebp,ebp
c0021f00:	68 00 00 c8 42       	push   0x42c80000
c0021f05:	50                   	push   eax
c0021f06:	e8 41 49 00 00       	call   c002684c <__divsf3>
c0021f0b:	83 c4 10             	add    esp,0x10
c0021f0e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021f12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021f16:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0021f1c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021f20:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021f27:	e8 60 fb ff ff       	call   c0021a8c <SoundChannel::unbuffer(float*, int, int)>
c0021f2c:	83 c4 20             	add    esp,0x20
c0021f2f:	89 c1                	mov    ecx,eax
c0021f31:	39 cd                	cmp    ebp,ecx
c0021f33:	7d 52                	jge    c0021f87 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021f35:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021f39:	50                   	push   eax
c0021f3a:	50                   	push   eax
c0021f3b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021f3f:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021f42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f46:	e8 3e 47 00 00       	call   c0026689 <__mulsf3>
c0021f4b:	5a                   	pop    edx
c0021f4c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021f50:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021f56:	e8 1c 4b 00 00       	call   c0026a77 <__floatsisf>
c0021f5b:	59                   	pop    ecx
c0021f5c:	5a                   	pop    edx
c0021f5d:	50                   	push   eax
c0021f5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f62:	e8 e5 48 00 00       	call   c002684c <__divsf3>
c0021f67:	59                   	pop    ecx
c0021f68:	5a                   	pop    edx
c0021f69:	50                   	push   eax
c0021f6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021f6e:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021f71:	e8 f0 43 00 00       	call   c0026366 <__addsf3>
c0021f76:	83 c4 10             	add    esp,0x10
c0021f79:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021f81:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021f84:	45                   	inc    ebp
c0021f85:	eb aa                	jmp    c0021f31 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021f87:	39 cf                	cmp    edi,ecx
c0021f89:	7e 02                	jle    c0021f8d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021f8b:	89 cf                	mov    edi,ecx
c0021f8d:	43                   	inc    ebx
c0021f8e:	83 fb 20             	cmp    ebx,0x20
c0021f91:	0f 85 10 ff ff ff    	jne    c0021ea7 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021f97:	83 c4 1c             	add    esp,0x1c
c0021f9a:	89 f8                	mov    eax,edi
c0021f9c:	5b                   	pop    ebx
c0021f9d:	5e                   	pop    esi
c0021f9e:	5f                   	pop    edi
c0021f9f:	5d                   	pop    ebp
c0021fa0:	c3                   	ret    
c0021fa1:	90                   	nop

c0021fa2 <PCI::open(int, int, void*)>:
c0021fa2:	83 ec 18             	sub    esp,0x18
c0021fa5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fa9:	8b 10                	mov    edx,DWORD PTR [eax]
c0021fab:	50                   	push   eax
c0021fac:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021faf:	31 c0                	xor    eax,eax
c0021fb1:	83 c4 1c             	add    esp,0x1c
c0021fb4:	c3                   	ret    
c0021fb5:	90                   	nop

c0021fb6 <PCI::close(int, int, void*)>:
c0021fb6:	31 c0                	xor    eax,eax
c0021fb8:	c3                   	ret    
c0021fb9:	90                   	nop

c0021fba <PCI::PCI()>:
c0021fba:	83 ec 0c             	sub    esp,0xc
c0021fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc1:	83 ec 08             	sub    esp,0x8
c0021fc4:	68 30 c0 02 c0       	push   0xc002c030
c0021fc9:	50                   	push   eax
c0021fca:	e8 b3 15 ff ff       	call   c0013582 <Bus::Bus(char const*)>
c0021fcf:	83 c4 10             	add    esp,0x10
c0021fd2:	ba 9c c0 02 c0       	mov    edx,0xc002c09c
c0021fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fdb:	89 10                	mov    DWORD PTR [eax],edx
c0021fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021fe7:	0f b6 d0             	movzx  edx,al
c0021fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fee:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021fff:	0f b6 d0             	movzx  edx,al
c0022002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022006:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002200b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022015:	8d 50 01             	lea    edx,[eax+0x1]
c0022018:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002201c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022022:	0f b6 d0             	movzx  edx,al
c0022025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022029:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002202d:	83 c9 c0             	or     ecx,0xffffffc0
c0022030:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022034:	90                   	nop
c0022035:	83 c4 0c             	add    esp,0xc
c0022038:	c3                   	ret    
c0022039:	90                   	nop

c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002203a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002203e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022043:	89 ca                	mov    edx,ecx
c0022045:	c1 e0 10             	shl    eax,0x10
c0022048:	81 e2 fc 00 00 00    	and    edx,0xfc
c002204e:	09 d0                	or     eax,edx
c0022050:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022055:	c1 e2 08             	shl    edx,0x8
c0022058:	09 d0                	or     eax,edx
c002205a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002205f:	c1 e2 0b             	shl    edx,0xb
c0022062:	09 d0                	or     eax,edx
c0022064:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022069:	0d 00 00 00 80       	or     eax,0x80000000
c002206e:	ef                   	out    dx,eax
c002206f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022074:	ed                   	in     eax,dx
c0022075:	83 e1 02             	and    ecx,0x2
c0022078:	0f b6 c9             	movzx  ecx,cl
c002207b:	c1 e1 03             	shl    ecx,0x3
c002207e:	d3 e8                	shr    eax,cl
c0022080:	c3                   	ret    
c0022081:	90                   	nop

c0022082 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022082:	6a 00                	push   0x0
c0022084:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022089:	50                   	push   eax
c002208a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002208f:	50                   	push   eax
c0022090:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022095:	50                   	push   eax
c0022096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002209a:	e8 9b ff ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002209f:	83 c4 14             	add    esp,0x14
c00220a2:	c3                   	ret    
c00220a3:	90                   	nop

c00220a4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00220a4:	6a 0e                	push   0xe
c00220a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220ab:	50                   	push   eax
c00220ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220b1:	50                   	push   eax
c00220b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220b7:	50                   	push   eax
c00220b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220bc:	e8 79 ff ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220c1:	83 c4 14             	add    esp,0x14
c00220c4:	0f b6 c0             	movzx  eax,al
c00220c7:	c3                   	ret    

c00220c8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00220c8:	55                   	push   ebp
c00220c9:	57                   	push   edi
c00220ca:	56                   	push   esi
c00220cb:	53                   	push   ebx
c00220cc:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00220d1:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00220d6:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00220db:	6a 0a                	push   0xa
c00220dd:	56                   	push   esi
c00220de:	55                   	push   ebp
c00220df:	57                   	push   edi
c00220e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00220e4:	e8 51 ff ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220e9:	6a 0a                	push   0xa
c00220eb:	89 c3                	mov    ebx,eax
c00220ed:	56                   	push   esi
c00220ee:	0f b6 db             	movzx  ebx,bl
c00220f1:	55                   	push   ebp
c00220f2:	57                   	push   edi
c00220f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00220f7:	e8 3e ff ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220fc:	83 c4 28             	add    esp,0x28
c00220ff:	25 00 ff 00 00       	and    eax,0xff00
c0022104:	09 d8                	or     eax,ebx
c0022106:	5b                   	pop    ebx
c0022107:	5e                   	pop    esi
c0022108:	5f                   	pop    edi
c0022109:	5d                   	pop    ebp
c002210a:	c3                   	ret    
c002210b:	90                   	nop

c002210c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002210c:	6a 08                	push   0x8
c002210e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022113:	50                   	push   eax
c0022114:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022119:	50                   	push   eax
c002211a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002211f:	50                   	push   eax
c0022120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022124:	e8 11 ff ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022129:	83 c4 14             	add    esp,0x14
c002212c:	0f b6 c4             	movzx  eax,ah
c002212f:	c3                   	ret    

c0022130 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022130:	6a 08                	push   0x8
c0022132:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022137:	50                   	push   eax
c0022138:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002213d:	50                   	push   eax
c002213e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022143:	50                   	push   eax
c0022144:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022148:	e8 ed fe ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002214d:	83 c4 14             	add    esp,0x14
c0022150:	c3                   	ret    
c0022151:	90                   	nop

c0022152 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022152:	6a 3c                	push   0x3c
c0022154:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022159:	50                   	push   eax
c002215a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002215f:	50                   	push   eax
c0022160:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022165:	50                   	push   eax
c0022166:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002216a:	e8 cb fe ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002216f:	83 c4 14             	add    esp,0x14
c0022172:	c3                   	ret    
c0022173:	90                   	nop

c0022174 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022174:	6a 18                	push   0x18
c0022176:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002217b:	50                   	push   eax
c002217c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022181:	50                   	push   eax
c0022182:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022187:	50                   	push   eax
c0022188:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002218c:	e8 a9 fe ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022191:	83 c4 14             	add    esp,0x14
c0022194:	0f b6 c4             	movzx  eax,ah
c0022197:	c3                   	ret    

c0022198 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022198:	55                   	push   ebp
c0022199:	57                   	push   edi
c002219a:	56                   	push   esi
c002219b:	53                   	push   ebx
c002219c:	50                   	push   eax
c002219d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00221a1:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00221a6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00221ab:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00221b0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00221b7:	8d 43 12             	lea    eax,[ebx+0x12]
c00221ba:	83 c3 10             	add    ebx,0x10
c00221bd:	0f b6 c0             	movzx  eax,al
c00221c0:	0f b6 db             	movzx  ebx,bl
c00221c3:	50                   	push   eax
c00221c4:	51                   	push   ecx
c00221c5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00221c9:	57                   	push   edi
c00221ca:	55                   	push   ebp
c00221cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00221cf:	e8 66 fe ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221d4:	53                   	push   ebx
c00221d5:	89 c6                	mov    esi,eax
c00221d7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00221db:	c1 e6 10             	shl    esi,0x10
c00221de:	51                   	push   ecx
c00221df:	57                   	push   edi
c00221e0:	55                   	push   ebp
c00221e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00221e5:	e8 50 fe ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221ea:	83 c4 2c             	add    esp,0x2c
c00221ed:	0f b7 c0             	movzx  eax,ax
c00221f0:	5b                   	pop    ebx
c00221f1:	09 f0                	or     eax,esi
c00221f3:	5e                   	pop    esi
c00221f4:	5f                   	pop    edi
c00221f5:	5d                   	pop    ebp
c00221f6:	c3                   	ret    
c00221f7:	90                   	nop

c00221f8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00221f8:	53                   	push   ebx
c00221f9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00221fe:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022203:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022207:	c1 e1 10             	shl    ecx,0x10
c002220a:	25 fc 00 00 00       	and    eax,0xfc
c002220f:	09 c1                	or     ecx,eax
c0022211:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022216:	c1 e0 08             	shl    eax,0x8
c0022219:	09 c1                	or     ecx,eax
c002221b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022220:	c1 e0 0b             	shl    eax,0xb
c0022223:	09 c1                	or     ecx,eax
c0022225:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002222b:	89 c8                	mov    eax,ecx
c002222d:	ef                   	out    dx,eax
c002222e:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022233:	ed                   	in     eax,dx
c0022234:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022239:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002223e:	74 0a                	je     c002224a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022240:	0f b7 d8             	movzx  ebx,ax
c0022243:	89 d0                	mov    eax,edx
c0022245:	c1 e0 10             	shl    eax,0x10
c0022248:	eb 05                	jmp    c002224f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002224a:	66 31 c0             	xor    ax,ax
c002224d:	89 d3                	mov    ebx,edx
c002224f:	09 c3                	or     ebx,eax
c0022251:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022256:	89 c8                	mov    eax,ecx
c0022258:	ef                   	out    dx,eax
c0022259:	ba fc 0c 00 00       	mov    edx,0xcfc
c002225e:	89 d8                	mov    eax,ebx
c0022260:	ef                   	out    dx,eax
c0022261:	5b                   	pop    ebx
c0022262:	c3                   	ret    
c0022263:	90                   	nop

c0022264 <PCI::checkBus(unsigned char)>:
c0022264:	56                   	push   esi
c0022265:	53                   	push   ebx
c0022266:	31 db                	xor    ebx,ebx
c0022268:	51                   	push   ecx
c0022269:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002226e:	52                   	push   edx
c002226f:	53                   	push   ebx
c0022270:	43                   	inc    ebx
c0022271:	56                   	push   esi
c0022272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022276:	e8 2b 03 00 00       	call   c00225a6 <PCI::checkDevice(unsigned char, unsigned char)>
c002227b:	83 c4 10             	add    esp,0x10
c002227e:	83 fb 20             	cmp    ebx,0x20
c0022281:	75 eb                	jne    c002226e <PCI::checkBus(unsigned char)+0xa>
c0022283:	58                   	pop    eax
c0022284:	5b                   	pop    ebx
c0022285:	5e                   	pop    esi
c0022286:	c3                   	ret    
c0022287:	90                   	nop

c0022288 <PCI::foundDevice(PCIDeviceInfo)>:
c0022288:	55                   	push   ebp
c0022289:	57                   	push   edi
c002228a:	56                   	push   esi
c002228b:	53                   	push   ebx
c002228c:	83 ec 1c             	sub    esp,0x1c
c002228f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022293:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022299:	0f 84 52 01 00 00    	je     c00223f1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002229f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00222a3:	66 81 f9 06 04       	cmp    cx,0x406
c00222a8:	75 2c                	jne    c00222d6 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00222aa:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00222af:	50                   	push   eax
c00222b0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00222b5:	50                   	push   eax
c00222b6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00222bb:	50                   	push   eax
c00222bc:	56                   	push   esi
c00222bd:	e8 b2 fe ff ff       	call   c0022174 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00222c2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00222c6:	0f b6 c0             	movzx  eax,al
c00222c9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00222cd:	83 c4 2c             	add    esp,0x2c
c00222d0:	5b                   	pop    ebx
c00222d1:	5e                   	pop    esi
c00222d2:	5f                   	pop    edi
c00222d3:	5d                   	pop    ebp
c00222d4:	eb 8e                	jmp    c0022264 <PCI::checkBus(unsigned char)>
c00222d6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00222da:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00222e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222e4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00222e8:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00222ec:	88 d3                	mov    bl,dl
c00222ee:	85 c0                	test   eax,eax
c00222f0:	74 33                	je     c0022325 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00222f2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00222f5:	85 d2                	test   edx,edx
c00222f7:	74 28                	je     c0022321 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00222f9:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00222ff:	31 ef                	xor    edi,ebp
c0022301:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022307:	75 18                	jne    c0022321 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022309:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002230d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022313:	75 0c                	jne    c0022321 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022315:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002231b:	0f 84 d0 00 00 00    	je     c00223f1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022321:	8b 00                	mov    eax,DWORD PTR [eax]
c0022323:	eb c9                	jmp    c00222ee <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022325:	66 81 f9 01 06       	cmp    cx,0x601
c002232a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002232e:	75 19                	jne    c0022349 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022330:	83 ec 0c             	sub    esp,0xc
c0022333:	68 64 01 00 00       	push   0x164
c0022338:	e8 db d2 fe ff       	call   c000f618 <malloc>
c002233d:	89 c5                	mov    ebp,eax
c002233f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022342:	e8 95 0f 00 00       	call   c00232dc <SATABus::SATABus()>
c0022347:	eb 1e                	jmp    c0022367 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022349:	66 81 f9 01 01       	cmp    cx,0x101
c002234e:	75 60                	jne    c00223b0 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022350:	83 ec 0c             	sub    esp,0xc
c0022353:	68 70 02 00 00       	push   0x270
c0022358:	e8 bb d2 fe ff       	call   c000f618 <malloc>
c002235d:	89 c5                	mov    ebp,eax
c002235f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022362:	e8 03 03 00 00       	call   c002266a <IDE::IDE()>
c0022367:	58                   	pop    eax
c0022368:	5a                   	pop    edx
c0022369:	55                   	push   ebp
c002236a:	56                   	push   esi
c002236b:	e8 9e 19 ff ff       	call   c0013d0e <Device::addChild(Device*)>
c0022370:	83 ec 1c             	sub    esp,0x1c
c0022373:	b9 09 00 00 00       	mov    ecx,0x9
c0022378:	fc                   	cld    
c0022379:	89 e7                	mov    edi,esp
c002237b:	89 de                	mov    esi,ebx
c002237d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002237f:	55                   	push   ebp
c0022380:	e8 93 18 ff ff       	call   c0013c18 <Device::preOpenPCI(PCIDeviceInfo)>
c0022385:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022388:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002238c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022394:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002239c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00223a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00223a7:	83 c4 4c             	add    esp,0x4c
c00223aa:	5b                   	pop    ebx
c00223ab:	5e                   	pop    esi
c00223ac:	5f                   	pop    edi
c00223ad:	5d                   	pop    ebp
c00223ae:	ff e0                	jmp    eax
c00223b0:	83 ec 0c             	sub    esp,0xc
c00223b3:	68 58 01 00 00       	push   0x158
c00223b8:	e8 5b d2 fe ff       	call   c000f618 <malloc>
c00223bd:	89 c5                	mov    ebp,eax
c00223bf:	58                   	pop    eax
c00223c0:	5a                   	pop    edx
c00223c1:	68 38 c0 02 c0       	push   0xc002c038
c00223c6:	55                   	push   ebp
c00223c7:	e8 38 1c ff ff       	call   c0014004 <DriverlessDevice::DriverlessDevice(char const*)>
c00223cc:	59                   	pop    ecx
c00223cd:	5f                   	pop    edi
c00223ce:	55                   	push   ebp
c00223cf:	56                   	push   esi
c00223d0:	e8 39 19 ff ff       	call   c0013d0e <Device::addChild(Device*)>
c00223d5:	b9 09 00 00 00       	mov    ecx,0x9
c00223da:	fc                   	cld    
c00223db:	89 df                	mov    edi,ebx
c00223dd:	89 de                	mov    esi,ebx
c00223df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00223e1:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00223e5:	83 c4 2c             	add    esp,0x2c
c00223e8:	5b                   	pop    ebx
c00223e9:	5e                   	pop    esi
c00223ea:	5f                   	pop    edi
c00223eb:	5d                   	pop    ebp
c00223ec:	e9 27 18 ff ff       	jmp    c0013c18 <Device::preOpenPCI(PCIDeviceInfo)>
c00223f1:	83 c4 1c             	add    esp,0x1c
c00223f4:	5b                   	pop    ebx
c00223f5:	5e                   	pop    esi
c00223f6:	5f                   	pop    edi
c00223f7:	5d                   	pop    ebp
c00223f8:	c3                   	ret    
c00223f9:	90                   	nop

c00223fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00223fa:	55                   	push   ebp
c00223fb:	57                   	push   edi
c00223fc:	56                   	push   esi
c00223fd:	53                   	push   ebx
c00223fe:	83 ec 5c             	sub    esp,0x5c
c0022401:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022405:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022409:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002240d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022416:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002241a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c002241f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022423:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022428:	6a 0c                	push   0xc
c002242a:	55                   	push   ebp
c002242b:	53                   	push   ebx
c002242c:	57                   	push   edi
c002242d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022434:	e8 01 fc ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022439:	55                   	push   ebp
c002243a:	53                   	push   ebx
c002243b:	57                   	push   edi
c002243c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022443:	e8 80 fc ff ff       	call   c00220c8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022448:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c002244d:	83 c4 24             	add    esp,0x24
c0022450:	55                   	push   ebp
c0022451:	53                   	push   ebx
c0022452:	57                   	push   edi
c0022453:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022457:	e8 f6 fc ff ff       	call   c0022152 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002245c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022460:	6a 3c                	push   0x3c
c0022462:	55                   	push   ebp
c0022463:	53                   	push   ebx
c0022464:	57                   	push   edi
c0022465:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002246c:	e8 c9 fb ff ff       	call   c002203a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022471:	0f b6 c4             	movzx  eax,ah
c0022474:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022478:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002247c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022480:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0022485:	83 c4 24             	add    esp,0x24
c0022488:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002248e:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022495:	74 6c                	je     c0022503 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022497:	31 f6                	xor    esi,esi
c0022499:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c002249f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00224a5:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00224ab:	7e 56                	jle    c0022503 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00224ad:	8d 14 f2             	lea    edx,[edx+esi*8]
c00224b0:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00224b7:	39 cb                	cmp    ebx,ecx
c00224b9:	75 45                	jne    c0022500 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00224bb:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00224c2:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00224c6:	75 38                	jne    c0022500 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00224c8:	83 ec 0c             	sub    esp,0xc
c00224cb:	68 52 c0 02 c0       	push   0xc002c052
c00224d0:	e8 12 04 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00224d5:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c00224db:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00224e1:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00224e9:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00224ed:	52                   	push   edx
c00224ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00224f2:	53                   	push   ebx
c00224f3:	68 77 c0 02 c0       	push   0xc002c077
c00224f8:	e8 ea 03 ff ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00224fd:	83 c4 20             	add    esp,0x20
c0022500:	46                   	inc    esi
c0022501:	eb 96                	jmp    c0022499 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022503:	31 d2                	xor    edx,edx
c0022505:	83 ec 0c             	sub    esp,0xc
c0022508:	55                   	push   ebp
c0022509:	53                   	push   ebx
c002250a:	57                   	push   edi
c002250b:	52                   	push   edx
c002250c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022510:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022517:	e8 7c fc ff ff       	call   c0022198 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002251c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022520:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022524:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022528:	42                   	inc    edx
c0022529:	83 c4 20             	add    esp,0x20
c002252c:	83 fa 06             	cmp    edx,0x6
c002252f:	75 d4                	jne    c0022505 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022531:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022535:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022539:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002253d:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022541:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022545:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022549:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002254e:	86 e0                	xchg   al,ah
c0022550:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022555:	55                   	push   ebp
c0022556:	53                   	push   ebx
c0022557:	57                   	push   edi
c0022558:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002255c:	e8 ab fb ff ff       	call   c002210c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022561:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022565:	55                   	push   ebp
c0022566:	53                   	push   ebx
c0022567:	57                   	push   edi
c0022568:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002256f:	e8 0e fb ff ff       	call   c0022082 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022574:	83 ec 0c             	sub    esp,0xc
c0022577:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c002257c:	b9 09 00 00 00       	mov    ecx,0x9
c0022581:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022585:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022589:	fc                   	cld    
c002258a:	89 e7                	mov    edi,esp
c002258c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002258e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022595:	e8 ee fc ff ff       	call   c0022288 <PCI::foundDevice(PCIDeviceInfo)>
c002259a:	81 c4 8c 00 00 00    	add    esp,0x8c
c00225a0:	5b                   	pop    ebx
c00225a1:	5e                   	pop    esi
c00225a2:	5f                   	pop    edi
c00225a3:	5d                   	pop    ebp
c00225a4:	c3                   	ret    
c00225a5:	90                   	nop

c00225a6 <PCI::checkDevice(unsigned char, unsigned char)>:
c00225a6:	55                   	push   ebp
c00225a7:	57                   	push   edi
c00225a8:	56                   	push   esi
c00225a9:	53                   	push   ebx
c00225aa:	83 ec 0c             	sub    esp,0xc
c00225ad:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00225b1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00225b6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00225bb:	6a 00                	push   0x0
c00225bd:	56                   	push   esi
c00225be:	57                   	push   edi
c00225bf:	55                   	push   ebp
c00225c0:	e8 bd fa ff ff       	call   c0022082 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00225c5:	6a 00                	push   0x0
c00225c7:	56                   	push   esi
c00225c8:	57                   	push   edi
c00225c9:	55                   	push   ebp
c00225ca:	e8 2b fe ff ff       	call   c00223fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00225cf:	83 c4 20             	add    esp,0x20
c00225d2:	6a 00                	push   0x0
c00225d4:	56                   	push   esi
c00225d5:	57                   	push   edi
c00225d6:	55                   	push   ebp
c00225d7:	e8 c8 fa ff ff       	call   c00220a4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00225dc:	83 c4 10             	add    esp,0x10
c00225df:	84 c0                	test   al,al
c00225e1:	79 27                	jns    c002260a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00225e3:	bb 01 00 00 00       	mov    ebx,0x1
c00225e8:	53                   	push   ebx
c00225e9:	56                   	push   esi
c00225ea:	57                   	push   edi
c00225eb:	55                   	push   ebp
c00225ec:	e8 91 fa ff ff       	call   c0022082 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00225f1:	83 c4 10             	add    esp,0x10
c00225f4:	66 40                	inc    ax
c00225f6:	74 0c                	je     c0022604 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00225f8:	53                   	push   ebx
c00225f9:	56                   	push   esi
c00225fa:	57                   	push   edi
c00225fb:	55                   	push   ebp
c00225fc:	e8 f9 fd ff ff       	call   c00223fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022601:	83 c4 10             	add    esp,0x10
c0022604:	43                   	inc    ebx
c0022605:	83 fb 08             	cmp    ebx,0x8
c0022608:	75 de                	jne    c00225e8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002260a:	83 c4 0c             	add    esp,0xc
c002260d:	5b                   	pop    ebx
c002260e:	5e                   	pop    esi
c002260f:	5f                   	pop    edi
c0022610:	5d                   	pop    ebp
c0022611:	c3                   	ret    

c0022612 <PCI::detect()>:
c0022612:	56                   	push   esi
c0022613:	53                   	push   ebx
c0022614:	53                   	push   ebx
c0022615:	31 db                	xor    ebx,ebx
c0022617:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002261b:	6a 00                	push   0x0
c002261d:	6a 00                	push   0x0
c002261f:	6a 00                	push   0x0
c0022621:	56                   	push   esi
c0022622:	e8 7d fa ff ff       	call   c00220a4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022627:	83 c4 10             	add    esp,0x10
c002262a:	a8 80                	test   al,0x80
c002262c:	75 21                	jne    c002264f <PCI::detect()+0x3d>
c002262e:	51                   	push   ecx
c002262f:	51                   	push   ecx
c0022630:	6a 00                	push   0x0
c0022632:	56                   	push   esi
c0022633:	e8 2c fc ff ff       	call   c0022264 <PCI::checkBus(unsigned char)>
c0022638:	83 c4 10             	add    esp,0x10
c002263b:	eb 24                	jmp    c0022661 <PCI::detect()+0x4f>
c002263d:	52                   	push   edx
c002263e:	52                   	push   edx
c002263f:	53                   	push   ebx
c0022640:	43                   	inc    ebx
c0022641:	56                   	push   esi
c0022642:	e8 1d fc ff ff       	call   c0022264 <PCI::checkBus(unsigned char)>
c0022647:	83 c4 10             	add    esp,0x10
c002264a:	83 fb 08             	cmp    ebx,0x8
c002264d:	74 12                	je     c0022661 <PCI::detect()+0x4f>
c002264f:	53                   	push   ebx
c0022650:	6a 00                	push   0x0
c0022652:	6a 00                	push   0x0
c0022654:	56                   	push   esi
c0022655:	e8 28 fa ff ff       	call   c0022082 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002265a:	83 c4 10             	add    esp,0x10
c002265d:	66 40                	inc    ax
c002265f:	74 dc                	je     c002263d <PCI::detect()+0x2b>
c0022661:	58                   	pop    eax
c0022662:	5b                   	pop    ebx
c0022663:	5e                   	pop    esi
c0022664:	c3                   	ret    
c0022665:	90                   	nop

c0022666 <IDE::close(int, int, void*)>:
c0022666:	83 c8 ff             	or     eax,0xffffffff
c0022669:	c3                   	ret    

c002266a <IDE::IDE()>:
c002266a:	83 ec 0c             	sub    esp,0xc
c002266d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022671:	83 ec 08             	sub    esp,0x8
c0022674:	68 c0 c0 02 c0       	push   0xc002c0c0
c0022679:	50                   	push   eax
c002267a:	e8 1b 1a ff ff       	call   c001409a <HardDiskController::HardDiskController(char const*)>
c002267f:	83 c4 10             	add    esp,0x10
c0022682:	ba 00 c3 02 c0       	mov    edx,0xc002c300
c0022687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002268b:	89 10                	mov    DWORD PTR [eax],edx
c002268d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022691:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022698:	90                   	nop
c0022699:	83 c4 0c             	add    esp,0xc
c002269c:	c3                   	ret    
c002269d:	90                   	nop

c002269e <IDE::prepareInterrupt(unsigned char)>:
c002269e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00226a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226a7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00226af:	c3                   	ret    

c00226b0 <selectDrive(unsigned char, unsigned char)>:
c00226b0:	c3                   	ret    
c00226b1:	90                   	nop

c00226b2 <IDE::getBase(unsigned char)>:
c00226b2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00226b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226bb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00226c3:	c3                   	ret    

c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00226c4:	55                   	push   ebp
c00226c5:	57                   	push   edi
c00226c6:	56                   	push   esi
c00226c7:	53                   	push   ebx
c00226c8:	83 ec 1c             	sub    esp,0x1c
c00226cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00226cf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00226d3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00226d6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00226da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00226de:	80 f9 03             	cmp    cl,0x3
c00226e1:	77 51                	ja     c0022734 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00226e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00226e7:	0f b6 f2             	movzx  esi,dl
c00226ea:	0f b6 db             	movzx  ebx,bl
c00226ed:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00226f0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00226f4:	83 ca 80             	or     edx,0xffffff80
c00226f7:	0f b6 d2             	movzx  edx,dl
c00226fa:	52                   	push   edx
c00226fb:	6a 0c                	push   0xc
c00226fd:	56                   	push   esi
c00226fe:	57                   	push   edi
c00226ff:	e8 c0 ff ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022704:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022709:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002270d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022711:	ee                   	out    dx,al
c0022712:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022717:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002271b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002271f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022723:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002272b:	83 c4 2c             	add    esp,0x2c
c002272e:	5b                   	pop    ebx
c002272f:	5e                   	pop    esi
c0022730:	5f                   	pop    edi
c0022731:	5d                   	pop    ebp
c0022732:	eb 90                	jmp    c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022734:	80 fb 07             	cmp    bl,0x7
c0022737:	77 12                	ja     c002274b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022739:	0f b6 d2             	movzx  edx,dl
c002273c:	0f b6 db             	movzx  ebx,bl
c002273f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022747:	89 da                	mov    edx,ebx
c0022749:	eb 2f                	jmp    c002277a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002274b:	80 fb 0d             	cmp    bl,0xd
c002274e:	77 13                	ja     c0022763 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022750:	0f b6 d2             	movzx  edx,dl
c0022753:	0f b6 db             	movzx  ebx,bl
c0022756:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002275d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022761:	eb 17                	jmp    c002277a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022763:	80 fb 15             	cmp    bl,0x15
c0022766:	77 13                	ja     c002277b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022768:	0f b6 d2             	movzx  edx,dl
c002276b:	0f b6 db             	movzx  ebx,bl
c002276e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022776:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002277a:	ee                   	out    dx,al
c002277b:	83 c4 1c             	add    esp,0x1c
c002277e:	5b                   	pop    ebx
c002277f:	5e                   	pop    esi
c0022780:	5f                   	pop    edi
c0022781:	5d                   	pop    ebp
c0022782:	c3                   	ret    
c0022783:	90                   	nop

c0022784 <IDE::read(unsigned char, unsigned char)>:
c0022784:	55                   	push   ebp
c0022785:	57                   	push   edi
c0022786:	56                   	push   esi
c0022787:	53                   	push   ebx
c0022788:	83 ec 1c             	sub    esp,0x1c
c002278b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002278f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022793:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022796:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002279a:	3c 03                	cmp    al,0x3
c002279c:	77 43                	ja     c00227e1 <IDE::read(unsigned char, unsigned char)+0x5d>
c002279e:	0f b6 f2             	movzx  esi,dl
c00227a1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00227a4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00227a8:	83 c8 80             	or     eax,0xffffff80
c00227ab:	0f b6 c0             	movzx  eax,al
c00227ae:	50                   	push   eax
c00227af:	6a 0c                	push   0xc
c00227b1:	56                   	push   esi
c00227b2:	57                   	push   edi
c00227b3:	e8 0c ff ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227b8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00227bd:	0f b6 c3             	movzx  eax,bl
c00227c0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00227c4:	ec                   	in     al,dx
c00227c5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00227c9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00227ce:	52                   	push   edx
c00227cf:	6a 0c                	push   0xc
c00227d1:	56                   	push   esi
c00227d2:	57                   	push   edi
c00227d3:	e8 ec fe ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227d8:	83 c4 20             	add    esp,0x20
c00227db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00227df:	eb 49                	jmp    c002282a <IDE::read(unsigned char, unsigned char)+0xa6>
c00227e1:	80 fb 07             	cmp    bl,0x7
c00227e4:	77 12                	ja     c00227f8 <IDE::read(unsigned char, unsigned char)+0x74>
c00227e6:	0f b6 d2             	movzx  edx,dl
c00227e9:	0f b6 c3             	movzx  eax,bl
c00227ec:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00227f4:	89 c2                	mov    edx,eax
c00227f6:	eb 31                	jmp    c0022829 <IDE::read(unsigned char, unsigned char)+0xa5>
c00227f8:	80 fb 0d             	cmp    bl,0xd
c00227fb:	77 13                	ja     c0022810 <IDE::read(unsigned char, unsigned char)+0x8c>
c00227fd:	0f b6 d2             	movzx  edx,dl
c0022800:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022807:	0f b6 d3             	movzx  edx,bl
c002280a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002280e:	eb 19                	jmp    c0022829 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022810:	31 c0                	xor    eax,eax
c0022812:	80 fb 15             	cmp    bl,0x15
c0022815:	77 13                	ja     c002282a <IDE::read(unsigned char, unsigned char)+0xa6>
c0022817:	0f b6 d2             	movzx  edx,dl
c002281a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022822:	0f b6 d3             	movzx  edx,bl
c0022825:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022829:	ec                   	in     al,dx
c002282a:	83 c4 1c             	add    esp,0x1c
c002282d:	5b                   	pop    ebx
c002282e:	5e                   	pop    esi
c002282f:	5f                   	pop    edi
c0022830:	5d                   	pop    ebp
c0022831:	c3                   	ret    

c0022832 <IDE::waitInterrupt(unsigned char)>:
c0022832:	55                   	push   ebp
c0022833:	57                   	push   edi
c0022834:	56                   	push   esi
c0022835:	53                   	push   ebx
c0022836:	31 db                	xor    ebx,ebx
c0022838:	83 ec 0c             	sub    esp,0xc
c002283b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002283f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022844:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002284c:	89 e8                	mov    eax,ebp
c002284e:	84 c0                	test   al,al
c0022850:	75 34                	jne    c0022886 <IDE::waitInterrupt(unsigned char)+0x54>
c0022852:	52                   	push   edx
c0022853:	6a 0c                	push   0xc
c0022855:	56                   	push   esi
c0022856:	57                   	push   edi
c0022857:	e8 28 ff ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c002285c:	83 c4 10             	add    esp,0x10
c002285f:	a8 01                	test   al,0x1
c0022861:	75 2b                	jne    c002288e <IDE::waitInterrupt(unsigned char)+0x5c>
c0022863:	f6 c3 04             	test   bl,0x4
c0022866:	75 16                	jne    c002287e <IDE::waitInterrupt(unsigned char)+0x4c>
c0022868:	83 fb 32             	cmp    ebx,0x32
c002286b:	7e 11                	jle    c002287e <IDE::waitInterrupt(unsigned char)+0x4c>
c002286d:	50                   	push   eax
c002286e:	50                   	push   eax
c002286f:	6a 00                	push   0x0
c0022871:	68 80 96 98 00       	push   0x989680
c0022876:	e8 8b b1 ff ff       	call   c001da06 <nanoSleep(unsigned long long)>
c002287b:	83 c4 10             	add    esp,0x10
c002287e:	83 fb 3c             	cmp    ebx,0x3c
c0022881:	74 0b                	je     c002288e <IDE::waitInterrupt(unsigned char)+0x5c>
c0022883:	43                   	inc    ebx
c0022884:	eb be                	jmp    c0022844 <IDE::waitInterrupt(unsigned char)+0x12>
c0022886:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002288e:	83 c4 0c             	add    esp,0xc
c0022891:	89 e8                	mov    eax,ebp
c0022893:	5b                   	pop    ebx
c0022894:	5e                   	pop    esi
c0022895:	5f                   	pop    edi
c0022896:	5d                   	pop    ebp
c0022897:	c3                   	ret    

c0022898 <ideChannel0IRQHandler(regs*, void*)>:
c0022898:	83 ec 10             	sub    esp,0x10
c002289b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002289f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00228a6:	6a 07                	push   0x7
c00228a8:	6a 00                	push   0x0
c00228aa:	50                   	push   eax
c00228ab:	e8 d4 fe ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c00228b0:	83 c4 1c             	add    esp,0x1c
c00228b3:	c3                   	ret    

c00228b4 <ideChannel1IRQHandler(regs*, void*)>:
c00228b4:	83 ec 10             	sub    esp,0x10
c00228b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00228bb:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00228c2:	6a 07                	push   0x7
c00228c4:	6a 01                	push   0x1
c00228c6:	50                   	push   eax
c00228c7:	e8 b8 fe ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c00228cc:	83 c4 1c             	add    esp,0x1c
c00228cf:	c3                   	ret    

c00228d0 <IDE::enableIRQs(unsigned char, bool)>:
c00228d0:	57                   	push   edi
c00228d1:	56                   	push   esi
c00228d2:	be 04 00 00 00       	mov    esi,0x4
c00228d7:	53                   	push   ebx
c00228d8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00228dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00228e1:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00228e6:	0f 94 c0             	sete   al
c00228e9:	d1 e0                	shl    eax,1
c00228eb:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00228f2:	0f b6 c0             	movzx  eax,al
c00228f5:	50                   	push   eax
c00228f6:	6a 0c                	push   0xc
c00228f8:	57                   	push   edi
c00228f9:	53                   	push   ebx
c00228fa:	e8 c5 fd ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00228ff:	83 c4 10             	add    esp,0x10
c0022902:	50                   	push   eax
c0022903:	6a 0c                	push   0xc
c0022905:	57                   	push   edi
c0022906:	53                   	push   ebx
c0022907:	e8 78 fe ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c002290c:	83 c4 10             	add    esp,0x10
c002290f:	4e                   	dec    esi
c0022910:	75 f0                	jne    c0022902 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022912:	5b                   	pop    ebx
c0022913:	5e                   	pop    esi
c0022914:	5f                   	pop    edi
c0022915:	c3                   	ret    

c0022916 <IDE::open(int, int, void*)>:
c0022916:	55                   	push   ebp
c0022917:	57                   	push   edi
c0022918:	56                   	push   esi
c0022919:	53                   	push   ebx
c002291a:	83 ec 1c             	sub    esp,0x1c
c002291d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022921:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002292a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022933:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002293a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022941:	0f 85 b0 02 00 00    	jne    c0022bf7 <IDE::open(int, int, void*)+0x2e1>
c0022947:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002294d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022951:	83 e0 7f             	and    eax,0x7f
c0022954:	3c 05                	cmp    al,0x5
c0022956:	74 04                	je     c002295c <IDE::open(int, int, void*)+0x46>
c0022958:	3c 0f                	cmp    al,0xf
c002295a:	75 32                	jne    c002298e <IDE::open(int, int, void*)+0x78>
c002295c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022962:	83 e0 fc             	and    eax,0xfffffffc
c0022965:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002296c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022972:	83 e0 fc             	and    eax,0xfffffffc
c0022975:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002297c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022982:	83 e0 fc             	and    eax,0xfffffffc
c0022985:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002298c:	eb 14                	jmp    c00229a2 <IDE::open(int, int, void*)+0x8c>
c002298e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022998:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00229a2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00229a9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00229b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00229b4:	89 c6                	mov    esi,eax
c00229b6:	bf f8 0c 00 00       	mov    edi,0xcf8
c00229bb:	c1 e6 10             	shl    esi,0x10
c00229be:	89 e8                	mov    eax,ebp
c00229c0:	89 fa                	mov    edx,edi
c00229c2:	c1 e0 0b             	shl    eax,0xb
c00229c5:	09 f0                	or     eax,esi
c00229c7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00229ce:	c1 e6 08             	shl    esi,0x8
c00229d1:	09 c6                	or     esi,eax
c00229d3:	89 f0                	mov    eax,esi
c00229d5:	0d 08 00 00 80       	or     eax,0x80000008
c00229da:	ef                   	out    dx,eax
c00229db:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00229e0:	89 ca                	mov    edx,ecx
c00229e2:	ed                   	in     eax,dx
c00229e3:	c1 e8 10             	shr    eax,0x10
c00229e6:	3d ff ff 00 00       	cmp    eax,0xffff
c00229eb:	0f 84 f5 00 00 00    	je     c0022ae6 <IDE::open(int, int, void*)+0x1d0>
c00229f1:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00229f7:	89 fa                	mov    edx,edi
c00229f9:	89 f0                	mov    eax,esi
c00229fb:	ef                   	out    dx,eax
c00229fc:	b0 fe                	mov    al,0xfe
c00229fe:	89 ca                	mov    edx,ecx
c0022a00:	ee                   	out    dx,al
c0022a01:	89 f0                	mov    eax,esi
c0022a03:	89 fa                	mov    edx,edi
c0022a05:	ef                   	out    dx,eax
c0022a06:	89 ca                	mov    edx,ecx
c0022a08:	ed                   	in     eax,dx
c0022a09:	3c fe                	cmp    al,0xfe
c0022a0b:	0f 85 a9 00 00 00    	jne    c0022aba <IDE::open(int, int, void*)+0x1a4>
c0022a11:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c0022a17:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022a1e:	74 33                	je     c0022a53 <IDE::open(int, int, void*)+0x13d>
c0022a20:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022a26:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022a2a:	40                   	inc    eax
c0022a2b:	83 ec 0c             	sub    esp,0xc
c0022a2e:	0f b6 c0             	movzx  eax,al
c0022a31:	50                   	push   eax
c0022a32:	55                   	push   ebp
c0022a33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022a37:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022a3d:	51                   	push   ecx
c0022a3e:	e8 db 51 ff ff       	call   c0017c1e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022a43:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022a48:	83 c4 1c             	add    esp,0x1c
c0022a4b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022a51:	eb 0a                	jmp    c0022a5d <IDE::open(int, int, void*)+0x147>
c0022a53:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022a5d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022a64:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022a6b:	c1 e1 10             	shl    ecx,0x10
c0022a6e:	c1 e0 08             	shl    eax,0x8
c0022a71:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022a76:	09 c1                	or     ecx,eax
c0022a78:	89 fa                	mov    edx,edi
c0022a7a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022a81:	c1 e0 0b             	shl    eax,0xb
c0022a84:	09 c1                	or     ecx,eax
c0022a86:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022a8c:	89 c8                	mov    eax,ecx
c0022a8e:	ef                   	out    dx,eax
c0022a8f:	be fc 0c 00 00       	mov    esi,0xcfc
c0022a94:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022a9a:	89 f2                	mov    edx,esi
c0022a9c:	ee                   	out    dx,al
c0022a9d:	89 c8                	mov    eax,ecx
c0022a9f:	89 fa                	mov    edx,edi
c0022aa1:	ef                   	out    dx,eax
c0022aa2:	89 f2                	mov    edx,esi
c0022aa4:	ed                   	in     eax,dx
c0022aa5:	0f b6 c0             	movzx  eax,al
c0022aa8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022aae:	74 46                	je     c0022af6 <IDE::open(int, int, void*)+0x1e0>
c0022ab0:	83 ec 0c             	sub    esp,0xc
c0022ab3:	68 d8 c0 02 c0       	push   0xc002c0d8
c0022ab8:	eb 34                	jmp    c0022aee <IDE::open(int, int, void*)+0x1d8>
c0022aba:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022ac3:	75 17                	jne    c0022adc <IDE::open(int, int, void*)+0x1c6>
c0022ac5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022aca:	74 07                	je     c0022ad3 <IDE::open(int, int, void*)+0x1bd>
c0022acc:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022ad1:	75 09                	jne    c0022adc <IDE::open(int, int, void*)+0x1c6>
c0022ad3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022ada:	eb 1a                	jmp    c0022af6 <IDE::open(int, int, void*)+0x1e0>
c0022adc:	83 ec 0c             	sub    esp,0xc
c0022adf:	68 e0 c0 02 c0       	push   0xc002c0e0
c0022ae4:	eb 08                	jmp    c0022aee <IDE::open(int, int, void*)+0x1d8>
c0022ae6:	83 ec 0c             	sub    esp,0xc
c0022ae9:	68 11 c1 02 c0       	push   0xc002c111
c0022aee:	e8 68 73 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0022af3:	83 c4 10             	add    esp,0x10
c0022af6:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022afd:	79 1a                	jns    c0022b19 <IDE::open(int, int, void*)+0x203>
c0022aff:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022b05:	83 e0 fc             	and    eax,0xfffffffc
c0022b08:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022b0f:	83 c0 08             	add    eax,0x8
c0022b12:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022b19:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022b1f:	89 c2                	mov    edx,eax
c0022b21:	83 e2 0f             	and    edx,0xf
c0022b24:	66 83 fa 08          	cmp    dx,0x8
c0022b28:	75 0a                	jne    c0022b34 <IDE::open(int, int, void*)+0x21e>
c0022b2a:	83 e8 02             	sub    eax,0x2
c0022b2d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022b34:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022b3a:	89 c2                	mov    edx,eax
c0022b3c:	83 e2 0f             	and    edx,0xf
c0022b3f:	66 83 fa 08          	cmp    dx,0x8
c0022b43:	75 0a                	jne    c0022b4f <IDE::open(int, int, void*)+0x239>
c0022b45:	83 e8 02             	sub    eax,0x2
c0022b48:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022b4f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022b56:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022b5d:	89 d0                	mov    eax,edx
c0022b5f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022b62:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022b66:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022b6a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022b6d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022b72:	0f b6 c9             	movzx  ecx,cl
c0022b75:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022b7c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022b7f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022b83:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022b87:	8d 50 02             	lea    edx,[eax+0x2]
c0022b8a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022b8f:	0f b6 d2             	movzx  edx,dl
c0022b92:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022b98:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022b9b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022b9f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022ba3:	8d 48 03             	lea    ecx,[eax+0x3]
c0022ba6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022bab:	0f b6 c9             	movzx  ecx,cl
c0022bae:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022bb4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022bb7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022bbb:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022bbf:	8d 50 04             	lea    edx,[eax+0x4]
c0022bc2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022bc8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022bcd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022bd4:	66 85 f6             	test   si,si
c0022bd7:	74 3e                	je     c0022c17 <IDE::open(int, int, void*)+0x301>
c0022bd9:	0f b6 d2             	movzx  edx,dl
c0022bdc:	83 c0 05             	add    eax,0x5
c0022bdf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022be2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022be6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022bea:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022bf0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022bf5:	eb 20                	jmp    c0022c17 <IDE::open(int, int, void*)+0x301>
c0022bf7:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022c01:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022c0b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022c12:	e9 02 ff ff ff       	jmp    c0022b19 <IDE::open(int, int, void*)+0x203>
c0022c17:	52                   	push   edx
c0022c18:	52                   	push   edx
c0022c19:	6a 00                	push   0x0
c0022c1b:	53                   	push   ebx
c0022c1c:	e8 7d fa ff ff       	call   c002269e <IDE::prepareInterrupt(unsigned char)>
c0022c21:	59                   	pop    ecx
c0022c22:	5e                   	pop    esi
c0022c23:	6a 01                	push   0x1
c0022c25:	53                   	push   ebx
c0022c26:	e8 73 fa ff ff       	call   c002269e <IDE::prepareInterrupt(unsigned char)>
c0022c2b:	83 c4 0c             	add    esp,0xc
c0022c2e:	6a 00                	push   0x0
c0022c30:	6a 00                	push   0x0
c0022c32:	53                   	push   ebx
c0022c33:	e8 98 fc ff ff       	call   c00228d0 <IDE::enableIRQs(unsigned char, bool)>
c0022c38:	83 c4 0c             	add    esp,0xc
c0022c3b:	6a 00                	push   0x0
c0022c3d:	6a 01                	push   0x1
c0022c3f:	53                   	push   ebx
c0022c40:	e8 8b fc ff ff       	call   c00228d0 <IDE::enableIRQs(unsigned char, bool)>
c0022c45:	83 c4 10             	add    esp,0x10
c0022c48:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022c4f:	74 40                	je     c0022c91 <IDE::open(int, int, void*)+0x37b>
c0022c51:	83 ec 0c             	sub    esp,0xc
c0022c54:	68 3b c1 02 c0       	push   0xc002c13b
c0022c59:	e8 89 fc fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0022c5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c61:	6a 01                	push   0x1
c0022c63:	68 98 28 02 c0       	push   0xc0022898
c0022c68:	6a 0e                	push   0xe
c0022c6a:	53                   	push   ebx
c0022c6b:	e8 22 10 ff ff       	call   c0013c92 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022c70:	83 c4 14             	add    esp,0x14
c0022c73:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022c79:	53                   	push   ebx
c0022c7a:	6a 01                	push   0x1
c0022c7c:	68 b4 28 02 c0       	push   0xc00228b4
c0022c81:	6a 0f                	push   0xf
c0022c83:	53                   	push   ebx
c0022c84:	e8 09 10 ff ff       	call   c0013c92 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022c89:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022c8f:	eb 4a                	jmp    c0022cdb <IDE::open(int, int, void*)+0x3c5>
c0022c91:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022c9b:	50                   	push   eax
c0022c9c:	6a 0f                	push   0xf
c0022c9e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022ca4:	68 57 c1 02 c0       	push   0xc002c157
c0022ca9:	e8 39 fc fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0022cae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022cb1:	6a 00                	push   0x0
c0022cb3:	68 98 28 02 c0       	push   0xc0022898
c0022cb8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022cbe:	53                   	push   ebx
c0022cbf:	e8 ce 0f ff ff       	call   c0013c92 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022cc4:	83 c4 14             	add    esp,0x14
c0022cc7:	53                   	push   ebx
c0022cc8:	6a 00                	push   0x0
c0022cca:	68 b4 28 02 c0       	push   0xc00228b4
c0022ccf:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022cd5:	53                   	push   ebx
c0022cd6:	e8 b7 0f ff ff       	call   c0013c92 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022cdb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022cdd:	83 c4 20             	add    esp,0x20
c0022ce0:	83 ec 0c             	sub    esp,0xc
c0022ce3:	53                   	push   ebx
c0022ce4:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022ce7:	83 c4 0c             	add    esp,0xc
c0022cea:	6a 07                	push   0x7
c0022cec:	6a 00                	push   0x0
c0022cee:	53                   	push   ebx
c0022cef:	e8 90 fa ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022cf4:	83 c4 0c             	add    esp,0xc
c0022cf7:	6a 07                	push   0x7
c0022cf9:	6a 01                	push   0x1
c0022cfb:	53                   	push   ebx
c0022cfc:	e8 83 fa ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022d01:	83 c4 0c             	add    esp,0xc
c0022d04:	6a 01                	push   0x1
c0022d06:	6a 00                	push   0x0
c0022d08:	53                   	push   ebx
c0022d09:	e8 c2 fb ff ff       	call   c00228d0 <IDE::enableIRQs(unsigned char, bool)>
c0022d0e:	83 c4 0c             	add    esp,0xc
c0022d11:	6a 01                	push   0x1
c0022d13:	6a 01                	push   0x1
c0022d15:	53                   	push   ebx
c0022d16:	e8 b5 fb ff ff       	call   c00228d0 <IDE::enableIRQs(unsigned char, bool)>
c0022d1b:	83 c4 2c             	add    esp,0x2c
c0022d1e:	31 c0                	xor    eax,eax
c0022d20:	5b                   	pop    ebx
c0022d21:	5e                   	pop    esi
c0022d22:	5f                   	pop    edi
c0022d23:	5d                   	pop    ebp
c0022d24:	c3                   	ret    
c0022d25:	90                   	nop

c0022d26 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022d26:	55                   	push   ebp
c0022d27:	57                   	push   edi
c0022d28:	56                   	push   esi
c0022d29:	53                   	push   ebx
c0022d2a:	83 ec 1c             	sub    esp,0x1c
c0022d2d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022d31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d35:	8d 50 f8             	lea    edx,[eax-0x8]
c0022d38:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d3c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022d40:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022d44:	80 fa 03             	cmp    dl,0x3
c0022d47:	77 5d                	ja     c0022da6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022d49:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022d4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d51:	0f b6 db             	movzx  ebx,bl
c0022d54:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022d57:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022d5b:	83 ca 80             	or     edx,0xffffff80
c0022d5e:	0f b6 d2             	movzx  edx,dl
c0022d61:	52                   	push   edx
c0022d62:	6a 0c                	push   0xc
c0022d64:	53                   	push   ebx
c0022d65:	56                   	push   esi
c0022d66:	e8 59 f9 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d6b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022d70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022d74:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022d78:	0f b6 c0             	movzx  eax,al
c0022d7b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022d7f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022d81:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022d86:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022d8a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022d8e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022d92:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022d9a:	83 c4 2c             	add    esp,0x2c
c0022d9d:	5b                   	pop    ebx
c0022d9e:	5e                   	pop    esi
c0022d9f:	5f                   	pop    edi
c0022da0:	5d                   	pop    ebp
c0022da1:	e9 1e f9 ff ff       	jmp    c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022da6:	3c 07                	cmp    al,0x7
c0022da8:	77 10                	ja     c0022dba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022daa:	0f b6 db             	movzx  ebx,bl
c0022dad:	0f b6 d0             	movzx  edx,al
c0022db0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022db8:	eb 2d                	jmp    c0022de7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022dba:	3c 0d                	cmp    al,0xd
c0022dbc:	77 13                	ja     c0022dd1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022dbe:	0f b6 db             	movzx  ebx,bl
c0022dc1:	0f b6 c0             	movzx  eax,al
c0022dc4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022dcb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022dcf:	eb 16                	jmp    c0022de7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022dd1:	3c 15                	cmp    al,0x15
c0022dd3:	77 14                	ja     c0022de9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022dd5:	0f b6 db             	movzx  ebx,bl
c0022dd8:	0f b6 c0             	movzx  eax,al
c0022ddb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022de3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022de7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022de9:	83 c4 1c             	add    esp,0x1c
c0022dec:	5b                   	pop    ebx
c0022ded:	5e                   	pop    esi
c0022dee:	5f                   	pop    edi
c0022def:	5d                   	pop    ebp
c0022df0:	c3                   	ret    
c0022df1:	90                   	nop

c0022df2 <IDE::detect()>:
c0022df2:	55                   	push   ebp
c0022df3:	57                   	push   edi
c0022df4:	56                   	push   esi
c0022df5:	53                   	push   ebx
c0022df6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022dfc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022e03:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0022e0a:	0f 85 be 02 00 00    	jne    c00230ce <IDE::detect()+0x2dc>
c0022e10:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022e17:	31 f6                	xor    esi,esi
c0022e19:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022e21:	31 ed                	xor    ebp,ebp
c0022e23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e27:	c1 e0 06             	shl    eax,0x6
c0022e2a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022e32:	89 e8                	mov    eax,ebp
c0022e34:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022e38:	c1 e0 04             	shl    eax,0x4
c0022e3b:	83 c8 a0             	or     eax,0xffffffa0
c0022e3e:	0f b6 c0             	movzx  eax,al
c0022e41:	50                   	push   eax
c0022e42:	6a 06                	push   0x6
c0022e44:	56                   	push   esi
c0022e45:	53                   	push   ebx
c0022e46:	e8 79 f8 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e4b:	83 c4 0c             	add    esp,0xc
c0022e4e:	6a 0c                	push   0xc
c0022e50:	56                   	push   esi
c0022e51:	53                   	push   ebx
c0022e52:	e8 2d f9 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022e57:	83 c4 0c             	add    esp,0xc
c0022e5a:	6a 0c                	push   0xc
c0022e5c:	56                   	push   esi
c0022e5d:	53                   	push   ebx
c0022e5e:	e8 21 f9 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022e63:	83 c4 0c             	add    esp,0xc
c0022e66:	6a 0c                	push   0xc
c0022e68:	56                   	push   esi
c0022e69:	53                   	push   ebx
c0022e6a:	e8 15 f9 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022e6f:	83 c4 0c             	add    esp,0xc
c0022e72:	6a 0c                	push   0xc
c0022e74:	56                   	push   esi
c0022e75:	53                   	push   ebx
c0022e76:	e8 09 f9 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022e7b:	68 ec 00 00 00       	push   0xec
c0022e80:	6a 07                	push   0x7
c0022e82:	56                   	push   esi
c0022e83:	53                   	push   ebx
c0022e84:	e8 3b f8 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e89:	83 c4 1c             	add    esp,0x1c
c0022e8c:	6a 0c                	push   0xc
c0022e8e:	56                   	push   esi
c0022e8f:	53                   	push   ebx
c0022e90:	e8 ef f8 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022e95:	83 c4 0c             	add    esp,0xc
c0022e98:	6a 0c                	push   0xc
c0022e9a:	56                   	push   esi
c0022e9b:	53                   	push   ebx
c0022e9c:	e8 e3 f8 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022ea1:	83 c4 0c             	add    esp,0xc
c0022ea4:	6a 0c                	push   0xc
c0022ea6:	56                   	push   esi
c0022ea7:	53                   	push   ebx
c0022ea8:	e8 d7 f8 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022ead:	83 c4 0c             	add    esp,0xc
c0022eb0:	6a 0c                	push   0xc
c0022eb2:	56                   	push   esi
c0022eb3:	53                   	push   ebx
c0022eb4:	e8 cb f8 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022eb9:	83 c4 0c             	add    esp,0xc
c0022ebc:	6a 0c                	push   0xc
c0022ebe:	56                   	push   esi
c0022ebf:	53                   	push   ebx
c0022ec0:	e8 bf f8 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022ec5:	83 c4 10             	add    esp,0x10
c0022ec8:	84 c0                	test   al,al
c0022eca:	0f 84 8b 01 00 00    	je     c002305b <IDE::detect()+0x269>
c0022ed0:	31 ff                	xor    edi,edi
c0022ed2:	50                   	push   eax
c0022ed3:	6a 0c                	push   0xc
c0022ed5:	56                   	push   esi
c0022ed6:	53                   	push   ebx
c0022ed7:	e8 a8 f8 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0022edc:	83 c4 10             	add    esp,0x10
c0022edf:	a8 01                	test   al,0x1
c0022ee1:	0f 85 8e 01 00 00    	jne    c0023075 <IDE::detect()+0x283>
c0022ee7:	84 c0                	test   al,al
c0022ee9:	78 04                	js     c0022eef <IDE::detect()+0xfd>
c0022eeb:	a8 08                	test   al,0x8
c0022eed:	75 27                	jne    c0022f16 <IDE::detect()+0x124>
c0022eef:	47                   	inc    edi
c0022ef0:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022ef6:	7e da                	jle    c0022ed2 <IDE::detect()+0xe0>
c0022ef8:	50                   	push   eax
c0022ef9:	50                   	push   eax
c0022efa:	6a 00                	push   0x0
c0022efc:	68 40 4b 4c 00       	push   0x4c4b40
c0022f01:	e8 00 ab ff ff       	call   c001da06 <nanoSleep(unsigned long long)>
c0022f06:	83 c4 10             	add    esp,0x10
c0022f09:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022f0f:	75 c1                	jne    c0022ed2 <IDE::detect()+0xe0>
c0022f11:	e9 5f 01 00 00       	jmp    c0023075 <IDE::detect()+0x283>
c0022f16:	31 c9                	xor    ecx,ecx
c0022f18:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0022f1c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022f20:	83 ec 0c             	sub    esp,0xc
c0022f23:	68 80 00 00 00       	push   0x80
c0022f28:	57                   	push   edi
c0022f29:	6a 00                	push   0x0
c0022f2b:	56                   	push   esi
c0022f2c:	53                   	push   ebx
c0022f2d:	e8 f4 fd ff ff       	call   c0022d26 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022f32:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022f37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022f3b:	89 d1                	mov    ecx,edx
c0022f3d:	c1 e0 06             	shl    eax,0x6
c0022f40:	01 d8                	add    eax,ebx
c0022f42:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022f49:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022f50:	89 f2                	mov    edx,esi
c0022f52:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022f58:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022f5c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022f62:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022f66:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022f6d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022f75:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022f7c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022f84:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022f8a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022f91:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022f97:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022f9b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022f9f:	83 c4 20             	add    esp,0x20
c0022fa2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022fa5:	83 c0 02             	add    eax,0x2
c0022fa8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022fae:	83 c7 02             	add    edi,0x2
c0022fb1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022fb4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022fba:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022fbe:	75 e2                	jne    c0022fa2 <IDE::detect()+0x1b0>
c0022fc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fc4:	c1 e0 06             	shl    eax,0x6
c0022fc7:	01 d8                	add    eax,ebx
c0022fc9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022fcf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022fd6:	66 c1 ea 09          	shr    dx,0x9
c0022fda:	83 e2 01             	and    edx,0x1
c0022fdd:	84 c9                	test   cl,cl
c0022fdf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022fe5:	75 2f                	jne    c0023016 <IDE::detect()+0x224>
c0022fe7:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022fed:	85 c0                	test   eax,eax
c0022fef:	74 66                	je     c0023057 <IDE::detect()+0x265>
c0022ff1:	50                   	push   eax
c0022ff2:	55                   	push   ebp
c0022ff3:	56                   	push   esi
c0022ff4:	68 73 c1 02 c0       	push   0xc002c173
c0022ff9:	e8 e9 f8 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0022ffe:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023005:	e8 0e c6 fe ff       	call   c000f618 <malloc>
c002300a:	89 c7                	mov    edi,eax
c002300c:	89 04 24             	mov    DWORD PTR [esp],eax
c002300f:	e8 78 06 00 00       	call   c002368c <ATA::ATA()>
c0023014:	eb 28                	jmp    c002303e <IDE::detect()+0x24c>
c0023016:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002301c:	55                   	push   ebp
c002301d:	56                   	push   esi
c002301e:	68 a2 c1 02 c0       	push   0xc002c1a2
c0023023:	e8 bf f8 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023028:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002302f:	e8 e4 c5 fe ff       	call   c000f618 <malloc>
c0023034:	89 c7                	mov    edi,eax
c0023036:	89 04 24             	mov    DWORD PTR [esp],eax
c0023039:	e8 16 0d 00 00       	call   c0023d54 <ATAPI::ATAPI()>
c002303e:	5a                   	pop    edx
c002303f:	59                   	pop    ecx
c0023040:	57                   	push   edi
c0023041:	53                   	push   ebx
c0023042:	e8 c7 0c ff ff       	call   c0013d0e <Device::addChild(Device*)>
c0023047:	8b 07                	mov    eax,DWORD PTR [edi]
c0023049:	53                   	push   ebx
c002304a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002304e:	6a 00                	push   0x0
c0023050:	57                   	push   edi
c0023051:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023054:	83 c4 20             	add    esp,0x20
c0023057:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002305b:	4d                   	dec    ebp
c002305c:	74 0a                	je     c0023068 <IDE::detect()+0x276>
c002305e:	bd 01 00 00 00       	mov    ebp,0x1
c0023063:	e9 bb fd ff ff       	jmp    c0022e23 <IDE::detect()+0x31>
c0023068:	4e                   	dec    esi
c0023069:	74 63                	je     c00230ce <IDE::detect()+0x2dc>
c002306b:	be 01 00 00 00       	mov    esi,0x1
c0023070:	e9 ac fd ff ff       	jmp    c0022e21 <IDE::detect()+0x2f>
c0023075:	50                   	push   eax
c0023076:	6a 04                	push   0x4
c0023078:	56                   	push   esi
c0023079:	53                   	push   ebx
c002307a:	e8 05 f7 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c002307f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023083:	83 c4 0c             	add    esp,0xc
c0023086:	6a 05                	push   0x5
c0023088:	56                   	push   esi
c0023089:	53                   	push   ebx
c002308a:	e8 f5 f6 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c002308f:	83 c4 10             	add    esp,0x10
c0023092:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023096:	80 fa 14             	cmp    dl,0x14
c0023099:	75 04                	jne    c002309f <IDE::detect()+0x2ad>
c002309b:	3c eb                	cmp    al,0xeb
c002309d:	eb 07                	jmp    c00230a6 <IDE::detect()+0x2b4>
c002309f:	3c 96                	cmp    al,0x96
c00230a1:	75 b8                	jne    c002305b <IDE::detect()+0x269>
c00230a3:	80 fa 69             	cmp    dl,0x69
c00230a6:	75 b3                	jne    c002305b <IDE::detect()+0x269>
c00230a8:	68 a1 00 00 00       	push   0xa1
c00230ad:	6a 07                	push   0x7
c00230af:	56                   	push   esi
c00230b0:	53                   	push   ebx
c00230b1:	e8 0e f6 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230b6:	5f                   	pop    edi
c00230b7:	58                   	pop    eax
c00230b8:	6a 00                	push   0x0
c00230ba:	68 40 42 0f 00       	push   0xf4240
c00230bf:	e8 42 a9 ff ff       	call   c001da06 <nanoSleep(unsigned long long)>
c00230c4:	83 c4 10             	add    esp,0x10
c00230c7:	b1 01                	mov    cl,0x1
c00230c9:	e9 4a fe ff ff       	jmp    c0022f18 <IDE::detect()+0x126>
c00230ce:	81 c4 1c 02 00 00    	add    esp,0x21c
c00230d4:	5b                   	pop    ebx
c00230d5:	5e                   	pop    esi
c00230d6:	5f                   	pop    edi
c00230d7:	5d                   	pop    ebp
c00230d8:	c3                   	ret    
c00230d9:	90                   	nop

c00230da <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00230da:	55                   	push   ebp
c00230db:	57                   	push   edi
c00230dc:	56                   	push   esi
c00230dd:	53                   	push   ebx
c00230de:	83 ec 1c             	sub    esp,0x1c
c00230e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230e9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00230ed:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00230f1:	88 c3                	mov    bl,al
c00230f3:	84 c0                	test   al,al
c00230f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230f9:	0f 84 67 01 00 00    	je     c0023266 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00230ff:	83 ec 0c             	sub    esp,0xc
c0023102:	68 d3 c1 02 c0       	push   0xc002c1d3
c0023107:	e8 db f7 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c002310c:	83 c4 10             	add    esp,0x10
c002310f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023113:	3c 01                	cmp    al,0x1
c0023115:	75 17                	jne    c002312e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023117:	83 ec 0c             	sub    esp,0xc
c002311a:	b3 13                	mov    bl,0x13
c002311c:	68 df c1 02 c0       	push   0xc002c1df
c0023121:	e8 c1 f7 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023126:	83 c4 10             	add    esp,0x10
c0023129:	e9 25 01 00 00       	jmp    c0023253 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002312e:	3c 02                	cmp    al,0x2
c0023130:	0f 85 ef 00 00 00    	jne    c0023225 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023136:	d1 e6                	shl    esi,1
c0023138:	09 ee                	or     esi,ebp
c002313a:	52                   	push   edx
c002313b:	89 f0                	mov    eax,esi
c002313d:	6a 01                	push   0x1
c002313f:	0f b6 f0             	movzx  esi,al
c0023142:	c1 e6 06             	shl    esi,0x6
c0023145:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002314d:	50                   	push   eax
c002314e:	57                   	push   edi
c002314f:	e8 30 f6 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0023154:	83 c4 10             	add    esp,0x10
c0023157:	89 c6                	mov    esi,eax
c0023159:	a8 01                	test   al,0x1
c002315b:	74 12                	je     c002316f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002315d:	83 ec 0c             	sub    esp,0xc
c0023160:	b3 07                	mov    bl,0x7
c0023162:	68 f4 c1 02 c0       	push   0xc002c1f4
c0023167:	e8 7b f7 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c002316c:	83 c4 10             	add    esp,0x10
c002316f:	f7 c6 02 00 00 00    	test   esi,0x2
c0023175:	74 12                	je     c0023189 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023177:	83 ec 0c             	sub    esp,0xc
c002317a:	b3 03                	mov    bl,0x3
c002317c:	68 12 c2 02 c0       	push   0xc002c212
c0023181:	e8 61 f7 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023186:	83 c4 10             	add    esp,0x10
c0023189:	f7 c6 04 00 00 00    	test   esi,0x4
c002318f:	74 12                	je     c00231a3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023191:	83 ec 0c             	sub    esp,0xc
c0023194:	b3 14                	mov    bl,0x14
c0023196:	68 32 c2 02 c0       	push   0xc002c232
c002319b:	e8 47 f7 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00231a0:	83 c4 10             	add    esp,0x10
c00231a3:	f7 c6 08 00 00 00    	test   esi,0x8
c00231a9:	74 12                	je     c00231bd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00231ab:	83 ec 0c             	sub    esp,0xc
c00231ae:	b3 03                	mov    bl,0x3
c00231b0:	68 12 c2 02 c0       	push   0xc002c212
c00231b5:	e8 2d f7 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00231ba:	83 c4 10             	add    esp,0x10
c00231bd:	f7 c6 10 00 00 00    	test   esi,0x10
c00231c3:	74 12                	je     c00231d7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00231c5:	83 ec 0c             	sub    esp,0xc
c00231c8:	b3 15                	mov    bl,0x15
c00231ca:	68 4a c2 02 c0       	push   0xc002c24a
c00231cf:	e8 13 f7 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00231d4:	83 c4 10             	add    esp,0x10
c00231d7:	f7 c6 20 00 00 00    	test   esi,0x20
c00231dd:	74 12                	je     c00231f1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00231df:	83 ec 0c             	sub    esp,0xc
c00231e2:	b3 03                	mov    bl,0x3
c00231e4:	68 12 c2 02 c0       	push   0xc002c212
c00231e9:	e8 f9 f6 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00231ee:	83 c4 10             	add    esp,0x10
c00231f1:	f7 c6 40 00 00 00    	test   esi,0x40
c00231f7:	74 12                	je     c002320b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00231f9:	83 ec 0c             	sub    esp,0xc
c00231fc:	b3 16                	mov    bl,0x16
c00231fe:	68 64 c2 02 c0       	push   0xc002c264
c0023203:	e8 df f6 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023208:	83 c4 10             	add    esp,0x10
c002320b:	89 f0                	mov    eax,esi
c002320d:	84 c0                	test   al,al
c002320f:	79 42                	jns    c0023253 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023211:	83 ec 0c             	sub    esp,0xc
c0023214:	b3 0d                	mov    bl,0xd
c0023216:	68 85 c2 02 c0       	push   0xc002c285
c002321b:	e8 c7 f6 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023220:	83 c4 10             	add    esp,0x10
c0023223:	eb 2e                	jmp    c0023253 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023225:	3c 03                	cmp    al,0x3
c0023227:	75 14                	jne    c002323d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023229:	83 ec 0c             	sub    esp,0xc
c002322c:	b3 17                	mov    bl,0x17
c002322e:	68 99 c2 02 c0       	push   0xc002c299
c0023233:	e8 af f6 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023238:	83 c4 10             	add    esp,0x10
c002323b:	eb 16                	jmp    c0023253 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002323d:	3c 04                	cmp    al,0x4
c002323f:	75 12                	jne    c0023253 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023241:	83 ec 0c             	sub    esp,0xc
c0023244:	b3 08                	mov    bl,0x8
c0023246:	68 af c2 02 c0       	push   0xc002c2af
c002324b:	e8 97 f6 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023250:	83 c4 10             	add    esp,0x10
c0023253:	50                   	push   eax
c0023254:	50                   	push   eax
c0023255:	0f b6 c3             	movzx  eax,bl
c0023258:	50                   	push   eax
c0023259:	68 c7 c2 02 c0       	push   0xc002c2c7
c002325e:	e8 84 f6 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023263:	83 c4 10             	add    esp,0x10
c0023266:	83 c4 1c             	add    esp,0x1c
c0023269:	88 d8                	mov    al,bl
c002326b:	5b                   	pop    ebx
c002326c:	5e                   	pop    esi
c002326d:	5f                   	pop    edi
c002326e:	5d                   	pop    ebp
c002326f:	c3                   	ret    

c0023270 <IDE::polling(unsigned char, unsigned int)>:
c0023270:	57                   	push   edi
c0023271:	56                   	push   esi
c0023272:	53                   	push   ebx
c0023273:	bb 04 00 00 00       	mov    ebx,0x4
c0023278:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002327c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023281:	52                   	push   edx
c0023282:	6a 0c                	push   0xc
c0023284:	56                   	push   esi
c0023285:	57                   	push   edi
c0023286:	e8 f9 f4 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c002328b:	83 c4 10             	add    esp,0x10
c002328e:	4b                   	dec    ebx
c002328f:	75 f0                	jne    c0023281 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023291:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023296:	50                   	push   eax
c0023297:	6a 0c                	push   0xc
c0023299:	56                   	push   esi
c002329a:	57                   	push   edi
c002329b:	e8 e4 f4 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c00232a0:	83 c4 10             	add    esp,0x10
c00232a3:	a8 01                	test   al,0x1
c00232a5:	74 12                	je     c00232b9 <IDE::polling(unsigned char, unsigned int)+0x49>
c00232a7:	83 ec 0c             	sub    esp,0xc
c00232aa:	68 e1 c2 02 c0       	push   0xc002c2e1
c00232af:	e8 33 f6 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00232b4:	83 c4 10             	add    esp,0x10
c00232b7:	eb 17                	jmp    c00232d0 <IDE::polling(unsigned char, unsigned int)+0x60>
c00232b9:	a8 20                	test   al,0x20
c00232bb:	75 0f                	jne    c00232cc <IDE::polling(unsigned char, unsigned int)+0x5c>
c00232bd:	4b                   	dec    ebx
c00232be:	74 10                	je     c00232d0 <IDE::polling(unsigned char, unsigned int)+0x60>
c00232c0:	84 c0                	test   al,al
c00232c2:	78 d2                	js     c0023296 <IDE::polling(unsigned char, unsigned int)+0x26>
c00232c4:	a8 08                	test   al,0x8
c00232c6:	74 ce                	je     c0023296 <IDE::polling(unsigned char, unsigned int)+0x26>
c00232c8:	31 c0                	xor    eax,eax
c00232ca:	eb 06                	jmp    c00232d2 <IDE::polling(unsigned char, unsigned int)+0x62>
c00232cc:	b0 01                	mov    al,0x1
c00232ce:	eb 02                	jmp    c00232d2 <IDE::polling(unsigned char, unsigned int)+0x62>
c00232d0:	b0 02                	mov    al,0x2
c00232d2:	5b                   	pop    ebx
c00232d3:	5e                   	pop    esi
c00232d4:	5f                   	pop    edi
c00232d5:	c3                   	ret    

c00232d6 <SATABus::close(int, int, void*)>:
c00232d6:	31 c0                	xor    eax,eax
c00232d8:	c3                   	ret    
c00232d9:	90                   	nop

c00232da <SATABus::detect()>:
c00232da:	c3                   	ret    
c00232db:	90                   	nop

c00232dc <SATABus::SATABus()>:
c00232dc:	83 ec 0c             	sub    esp,0xc
c00232df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e3:	83 ec 08             	sub    esp,0x8
c00232e6:	68 24 c3 02 c0       	push   0xc002c324
c00232eb:	50                   	push   eax
c00232ec:	e8 a9 0d ff ff       	call   c001409a <HardDiskController::HardDiskController(char const*)>
c00232f1:	83 c4 10             	add    esp,0x10
c00232f4:	ba e0 c3 02 c0       	mov    edx,0xc002c3e0
c00232f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232fd:	89 10                	mov    DWORD PTR [eax],edx
c00232ff:	83 ec 0c             	sub    esp,0xc
c0023302:	6a 50                	push   0x50
c0023304:	e8 74 ca fe ff       	call   c000fd7d <Phys::allocateContiguousPages(int)>
c0023309:	83 c4 10             	add    esp,0x10
c002330c:	89 c2                	mov    edx,eax
c002330e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023312:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023318:	83 ec 0c             	sub    esp,0xc
c002331b:	6a 50                	push   0x50
c002331d:	e8 d5 e5 fe ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c0023322:	83 c4 10             	add    esp,0x10
c0023325:	89 c2                	mov    edx,eax
c0023327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023331:	e8 51 e7 fe ff       	call   c0011a87 <Virt::getAKernelVAS()>
c0023336:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002333a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023340:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023344:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002334a:	83 ec 0c             	sub    esp,0xc
c002334d:	6a 03                	push   0x3
c002334f:	6a 50                	push   0x50
c0023351:	51                   	push   ecx
c0023352:	52                   	push   edx
c0023353:	50                   	push   eax
c0023354:	e8 5d ef fe ff       	call   c00122b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023359:	83 c4 20             	add    esp,0x20
c002335c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023360:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002336a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023370:	83 ec 04             	sub    esp,0x4
c0023373:	52                   	push   edx
c0023374:	50                   	push   eax
c0023375:	68 48 c3 02 c0       	push   0xc002c348
c002337a:	e8 68 f5 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c002337f:	83 c4 10             	add    esp,0x10
c0023382:	90                   	nop
c0023383:	83 c4 0c             	add    esp,0xc
c0023386:	c3                   	ret    
c0023387:	90                   	nop

c0023388 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023388:	83 ec 0c             	sub    esp,0xc
c002338b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002338f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023392:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023395:	09 c2                	or     edx,eax
c0023397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002339b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00233a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00233a3:	31 c0                	xor    eax,eax
c00233a5:	c1 e9 08             	shr    ecx,0x8
c00233a8:	83 e1 0f             	and    ecx,0xf
c00233ab:	39 c8                	cmp    eax,ecx
c00233ad:	74 0a                	je     c00233b9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00233af:	f6 c2 01             	test   dl,0x1
c00233b2:	74 18                	je     c00233cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00233b4:	d1 ea                	shr    edx,1
c00233b6:	40                   	inc    eax
c00233b7:	eb f2                	jmp    c00233ab <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00233b9:	83 ec 0c             	sub    esp,0xc
c00233bc:	68 6c c3 02 c0       	push   0xc002c36c
c00233c1:	e8 95 6a ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c00233c6:	83 c4 10             	add    esp,0x10
c00233c9:	83 c8 ff             	or     eax,0xffffffff
c00233cc:	83 c4 0c             	add    esp,0xc
c00233cf:	c3                   	ret    

c00233d0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00233d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00233d4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00233d7:	89 c2                	mov    edx,eax
c00233d9:	c1 ea 08             	shr    edx,0x8
c00233dc:	83 e2 0f             	and    edx,0xf
c00233df:	fe ca                	dec    dl
c00233e1:	75 31                	jne    c0023414 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00233e3:	83 e0 0f             	and    eax,0xf
c00233e6:	3c 03                	cmp    al,0x3
c00233e8:	75 2a                	jne    c0023414 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00233ea:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00233ed:	b8 02 00 00 00       	mov    eax,0x2
c00233f2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00233f8:	74 1c                	je     c0023416 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00233fa:	b8 04 00 00 00       	mov    eax,0x4
c00233ff:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023405:	74 0f                	je     c0023416 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023407:	31 c0                	xor    eax,eax
c0023409:	83 fa 03             	cmp    edx,0x3
c002340c:	0f 94 c0             	sete   al
c002340f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023413:	c3                   	ret    
c0023414:	31 c0                	xor    eax,eax
c0023416:	c3                   	ret    
c0023417:	90                   	nop

c0023418 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023418:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002341c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002341f:	0f ba e2 0f          	bt     edx,0xf
c0023423:	72 f7                	jb     c002341c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023425:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023428:	83 ca 10             	or     edx,0x10
c002342b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002342e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023431:	83 ca 01             	or     edx,0x1
c0023434:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023437:	c3                   	ret    

c0023438 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002343c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002343f:	83 e2 fe             	and    edx,0xfffffffe
c0023442:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023445:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023448:	83 e2 ef             	and    edx,0xffffffef
c002344b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002344e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023451:	0f ba e2 0e          	bt     edx,0xe
c0023455:	72 f7                	jb     c002344e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023457:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002345a:	0f ba e2 0f          	bt     edx,0xf
c002345e:	72 ee                	jb     c002344e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023460:	c3                   	ret    
c0023461:	90                   	nop

c0023462 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023462:	55                   	push   ebp
c0023463:	57                   	push   edi
c0023464:	56                   	push   esi
c0023465:	53                   	push   ebx
c0023466:	83 ec 1c             	sub    esp,0x1c
c0023469:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002346d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023471:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023475:	53                   	push   ebx
c0023476:	89 fd                	mov    ebp,edi
c0023478:	56                   	push   esi
c0023479:	c1 e5 0a             	shl    ebp,0xa
c002347c:	e8 b7 ff ff ff       	call   c0023438 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023481:	83 ec 0c             	sub    esp,0xc
c0023484:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002348a:	01 e8                	add    eax,ebp
c002348c:	89 03                	mov    DWORD PTR [ebx],eax
c002348e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023490:	68 00 04 00 00       	push   0x400
c0023495:	6a 00                	push   0x0
c0023497:	50                   	push   eax
c0023498:	e8 1b d2 fd ff       	call   c00006b8 <memset>
c002349d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00234a3:	89 fa                	mov    edx,edi
c00234a5:	01 e8                	add    eax,ebp
c00234a7:	c1 e7 0d             	shl    edi,0xd
c00234aa:	89 03                	mov    DWORD PTR [ebx],eax
c00234ac:	c1 e2 08             	shl    edx,0x8
c00234af:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00234b6:	81 c2 00 80 00 00    	add    edx,0x8000
c00234bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00234c0:	89 d0                	mov    eax,edx
c00234c2:	83 c4 1c             	add    esp,0x1c
c00234c5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00234cb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00234ce:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00234d1:	68 00 01 00 00       	push   0x100
c00234d6:	6a 00                	push   0x0
c00234d8:	50                   	push   eax
c00234d9:	e8 da d1 fd ff       	call   c00006b8 <memset>
c00234de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00234e2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00234e8:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00234ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00234f2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00234f5:	83 c4 10             	add    esp,0x10
c00234f8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00234ff:	31 ff                	xor    edi,edi
c0023501:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023507:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002350d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023511:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023517:	83 c5 20             	add    ebp,0x20
c002351a:	01 f8                	add    eax,edi
c002351c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002351f:	52                   	push   edx
c0023520:	68 00 01 00 00       	push   0x100
c0023525:	6a 00                	push   0x0
c0023527:	50                   	push   eax
c0023528:	e8 8b d1 fd ff       	call   c00006b8 <memset>
c002352d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023531:	83 c4 10             	add    esp,0x10
c0023534:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002353a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023541:	01 f8                	add    eax,edi
c0023543:	81 c7 00 01 00 00    	add    edi,0x100
c0023549:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002354c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023552:	75 b3                	jne    c0023507 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023554:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023558:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002355c:	83 c4 1c             	add    esp,0x1c
c002355f:	5b                   	pop    ebx
c0023560:	5e                   	pop    esi
c0023561:	5f                   	pop    edi
c0023562:	5d                   	pop    ebp
c0023563:	e9 b0 fe ff ff       	jmp    c0023418 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023568 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023568:	55                   	push   ebp
c0023569:	57                   	push   edi
c002356a:	56                   	push   esi
c002356b:	53                   	push   ebx
c002356c:	31 db                	xor    ebx,ebx
c002356e:	83 ec 0c             	sub    esp,0xc
c0023571:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023575:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023579:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002357c:	f7 c7 01 00 00 00    	test   edi,0x1
c0023582:	0f 84 aa 00 00 00    	je     c0023632 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023588:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002358c:	89 d8                	mov    eax,ebx
c002358e:	c1 e0 07             	shl    eax,0x7
c0023591:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023598:	55                   	push   ebp
c0023599:	56                   	push   esi
c002359a:	e8 31 fe ff ff       	call   c00233d0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002359f:	5a                   	pop    edx
c00235a0:	83 f8 01             	cmp    eax,0x1
c00235a3:	59                   	pop    ecx
c00235a4:	75 30                	jne    c00235d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00235a6:	50                   	push   eax
c00235a7:	50                   	push   eax
c00235a8:	53                   	push   ebx
c00235a9:	68 91 c3 02 c0       	push   0xc002c391
c00235ae:	e8 34 f3 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00235b3:	83 c4 0c             	add    esp,0xc
c00235b6:	53                   	push   ebx
c00235b7:	55                   	push   ebp
c00235b8:	56                   	push   esi
c00235b9:	e8 a4 fe ff ff       	call   c0023462 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00235be:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00235c5:	e8 4e c0 fe ff       	call   c000f618 <malloc>
c00235ca:	89 c5                	mov    ebp,eax
c00235cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00235cf:	e8 e8 0d 00 00       	call   c00243bc <SATA::SATA()>
c00235d4:	eb 33                	jmp    c0023609 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00235d6:	83 f8 04             	cmp    eax,0x4
c00235d9:	75 47                	jne    c0023622 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00235db:	50                   	push   eax
c00235dc:	50                   	push   eax
c00235dd:	53                   	push   ebx
c00235de:	68 a8 c3 02 c0       	push   0xc002c3a8
c00235e3:	e8 ff f2 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00235e8:	83 c4 0c             	add    esp,0xc
c00235eb:	53                   	push   ebx
c00235ec:	55                   	push   ebp
c00235ed:	56                   	push   esi
c00235ee:	e8 6f fe ff ff       	call   c0023462 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00235f3:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00235fa:	e8 19 c0 fe ff       	call   c000f618 <malloc>
c00235ff:	89 c5                	mov    ebp,eax
c0023601:	89 04 24             	mov    DWORD PTR [esp],eax
c0023604:	e8 8b 11 00 00       	call   c0024794 <SATAPI::SATAPI()>
c0023609:	5a                   	pop    edx
c002360a:	59                   	pop    ecx
c002360b:	55                   	push   ebp
c002360c:	56                   	push   esi
c002360d:	e8 fc 06 ff ff       	call   c0013d0e <Device::addChild(Device*)>
c0023612:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023615:	56                   	push   esi
c0023616:	6a 00                	push   0x0
c0023618:	53                   	push   ebx
c0023619:	55                   	push   ebp
c002361a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002361d:	83 c4 20             	add    esp,0x20
c0023620:	eb 10                	jmp    c0023632 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023622:	50                   	push   eax
c0023623:	50                   	push   eax
c0023624:	53                   	push   ebx
c0023625:	68 c1 c3 02 c0       	push   0xc002c3c1
c002362a:	e8 b8 f2 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c002362f:	83 c4 10             	add    esp,0x10
c0023632:	d1 ef                	shr    edi,1
c0023634:	43                   	inc    ebx
c0023635:	83 fb 20             	cmp    ebx,0x20
c0023638:	0f 85 3e ff ff ff    	jne    c002357c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002363e:	83 c4 0c             	add    esp,0xc
c0023641:	5b                   	pop    ebx
c0023642:	5e                   	pop    esi
c0023643:	5f                   	pop    edi
c0023644:	5d                   	pop    ebp
c0023645:	c3                   	ret    

c0023646 <SATABus::open(int, int, void*)>:
c0023646:	83 ec 14             	sub    esp,0x14
c0023649:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002364d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023653:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023659:	52                   	push   edx
c002365a:	50                   	push   eax
c002365b:	e8 08 ff ff ff       	call   c0023568 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023660:	31 c0                	xor    eax,eax
c0023662:	83 c4 1c             	add    esp,0x1c
c0023665:	c3                   	ret    

c0023666 <ATA::close(int, int, void*)>:
c0023666:	83 ec 0c             	sub    esp,0xc
c0023669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002366d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023673:	85 c0                	test   eax,eax
c0023675:	74 0c                	je     c0023683 <ATA::close(int, int, void*)+0x1d>
c0023677:	83 ec 0c             	sub    esp,0xc
c002367a:	8b 10                	mov    edx,DWORD PTR [eax]
c002367c:	50                   	push   eax
c002367d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023680:	83 c4 10             	add    esp,0x10
c0023683:	31 c0                	xor    eax,eax
c0023685:	83 c4 0c             	add    esp,0xc
c0023688:	c3                   	ret    
c0023689:	90                   	nop

c002368a <ATA::powerSaving(PowerSavingLevel)>:
c002368a:	c3                   	ret    
c002368b:	90                   	nop

c002368c <ATA::ATA()>:
c002368c:	83 ec 0c             	sub    esp,0xc
c002368f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023693:	83 ec 04             	sub    esp,0x4
c0023696:	68 00 02 00 00       	push   0x200
c002369b:	68 65 c5 02 c0       	push   0xc002c565
c00236a0:	50                   	push   eax
c00236a1:	e8 8c 0a ff ff       	call   c0014132 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00236a6:	83 c4 10             	add    esp,0x10
c00236a9:	ba e8 c4 02 c0       	mov    edx,0xc002c4e8
c00236ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b2:	89 10                	mov    DWORD PTR [eax],edx
c00236b4:	90                   	nop
c00236b5:	83 c4 0c             	add    esp,0xc
c00236b8:	c3                   	ret    
c00236b9:	90                   	nop

c00236ba <ATA::flush(bool)>:
c00236ba:	53                   	push   ebx
c00236bb:	83 ec 08             	sub    esp,0x8
c00236be:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00236c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00236c7:	19 c0                	sbb    eax,eax
c00236c9:	83 e0 fd             	and    eax,0xfffffffd
c00236cc:	05 ea 00 00 00       	add    eax,0xea
c00236d1:	50                   	push   eax
c00236d2:	6a 07                	push   0x7
c00236d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236db:	50                   	push   eax
c00236dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236e2:	e8 dd ef ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236e7:	83 c4 0c             	add    esp,0xc
c00236ea:	6a 00                	push   0x0
c00236ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236f3:	50                   	push   eax
c00236f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236fa:	e8 71 fb ff ff       	call   c0023270 <IDE::polling(unsigned char, unsigned int)>
c00236ff:	83 c4 18             	add    esp,0x18
c0023702:	5b                   	pop    ebx
c0023703:	c3                   	ret    

c0023704 <ATA::readyForCommand()>:
c0023704:	56                   	push   esi
c0023705:	53                   	push   ebx
c0023706:	31 db                	xor    ebx,ebx
c0023708:	50                   	push   eax
c0023709:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002370d:	50                   	push   eax
c002370e:	6a 0c                	push   0xc
c0023710:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023717:	50                   	push   eax
c0023718:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002371e:	e8 61 f0 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0023723:	83 c4 10             	add    esp,0x10
c0023726:	a8 88                	test   al,0x88
c0023728:	74 23                	je     c002374d <ATA::readyForCommand()+0x49>
c002372a:	43                   	inc    ebx
c002372b:	83 fb 63             	cmp    ebx,0x63
c002372e:	7e dd                	jle    c002370d <ATA::readyForCommand()+0x9>
c0023730:	51                   	push   ecx
c0023731:	51                   	push   ecx
c0023732:	6a 00                	push   0x0
c0023734:	68 40 42 0f 00       	push   0xf4240
c0023739:	e8 c8 a2 ff ff       	call   c001da06 <nanoSleep(unsigned long long)>
c002373e:	83 c4 10             	add    esp,0x10
c0023741:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023747:	75 c4                	jne    c002370d <ATA::readyForCommand()+0x9>
c0023749:	31 c0                	xor    eax,eax
c002374b:	eb 02                	jmp    c002374f <ATA::readyForCommand()+0x4b>
c002374d:	b0 01                	mov    al,0x1
c002374f:	5a                   	pop    edx
c0023750:	5b                   	pop    ebx
c0023751:	5e                   	pop    esi
c0023752:	c3                   	ret    
c0023753:	90                   	nop

c0023754 <ATA::access(unsigned long long, int, void*, bool)>:
c0023754:	55                   	push   ebp
c0023755:	57                   	push   edi
c0023756:	56                   	push   esi
c0023757:	53                   	push   ebx
c0023758:	83 ec 30             	sub    esp,0x30
c002375b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002375f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0023763:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023767:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c002376b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c002376f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0023773:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0023777:	56                   	push   esi
c0023778:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002377c:	68 04 c4 02 c0       	push   0xc002c404
c0023781:	e8 61 f1 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023786:	83 c4 10             	add    esp,0x10
c0023789:	83 7c 24 4c 04       	cmp    DWORD PTR [esp+0x4c],0x4
c002378e:	75 16                	jne    c00237a6 <ATA::access(unsigned long long, int, void*, bool)+0x52>
c0023790:	31 ff                	xor    edi,edi
c0023792:	56                   	push   esi
c0023793:	31 f6                	xor    esi,esi
c0023795:	6a 00                	push   0x0
c0023797:	6a 04                	push   0x4
c0023799:	68 2f c4 02 c0       	push   0xc002c42f
c002379e:	e8 44 f1 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00237a3:	83 c4 10             	add    esp,0x10
c00237a6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00237ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00237b0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00237b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00237ba:	c1 e0 06             	shl    eax,0x6
c00237bd:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00237c5:	74 61                	je     c0023828 <ATA::access(unsigned long long, int, void*, bool)+0xd4>
c00237c7:	89 fa                	mov    edx,edi
c00237c9:	89 f0                	mov    eax,esi
c00237cb:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00237cf:	c1 ea 1c             	shr    edx,0x1c
c00237d2:	89 d1                	mov    ecx,edx
c00237d4:	09 c1                	or     ecx,eax
c00237d6:	74 25                	je     c00237fd <ATA::access(unsigned long long, int, void*, bool)+0xa9>
c00237d8:	31 ed                	xor    ebp,ebp
c00237da:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00237e1:	89 fa                	mov    edx,edi
c00237e3:	89 f0                	mov    eax,esi
c00237e5:	0f ad d0             	shrd   eax,edx,cl
c00237e8:	d3 ea                	shr    edx,cl
c00237ea:	f6 c1 20             	test   cl,0x20
c00237ed:	74 02                	je     c00237f1 <ATA::access(unsigned long long, int, void*, bool)+0x9d>
c00237ef:	89 d0                	mov    eax,edx
c00237f1:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00237f5:	45                   	inc    ebp
c00237f6:	83 fd 06             	cmp    ebp,0x6
c00237f9:	75 df                	jne    c00237da <ATA::access(unsigned long long, int, void*, bool)+0x86>
c00237fb:	eb 7a                	jmp    c0023877 <ATA::access(unsigned long long, int, void*, bool)+0x123>
c00237fd:	89 fa                	mov    edx,edi
c00237ff:	89 f0                	mov    eax,esi
c0023801:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023806:	0f ac d0 10          	shrd   eax,edx,0x10
c002380a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023811:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023815:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002381a:	89 f0                	mov    eax,esi
c002381c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023821:	c1 e8 18             	shr    eax,0x18
c0023824:	89 c7                	mov    edi,eax
c0023826:	eb 56                	jmp    c002387e <ATA::access(unsigned long long, int, void*, bool)+0x12a>
c0023828:	6a 00                	push   0x0
c002382a:	6a 3f                	push   0x3f
c002382c:	57                   	push   edi
c002382d:	56                   	push   esi
c002382e:	e8 19 2a 00 00       	call   c002624c <__umoddi3>
c0023833:	83 c4 10             	add    esp,0x10
c0023836:	40                   	inc    eax
c0023837:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002383b:	6a 00                	push   0x0
c002383d:	68 f0 03 00 00       	push   0x3f0
c0023842:	57                   	push   edi
c0023843:	56                   	push   esi
c0023844:	e8 03 29 00 00       	call   c002614c <__udivdi3>
c0023849:	83 c4 10             	add    esp,0x10
c002384c:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023851:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023858:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002385d:	6a 00                	push   0x0
c002385f:	6a 3f                	push   0x3f
c0023861:	57                   	push   edi
c0023862:	56                   	push   esi
c0023863:	e8 e4 28 00 00       	call   c002614c <__udivdi3>
c0023868:	83 c4 10             	add    esp,0x10
c002386b:	89 c7                	mov    edi,eax
c002386d:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023872:	83 e7 0f             	and    edi,0xf
c0023875:	eb 07                	jmp    c002387e <ATA::access(unsigned long long, int, void*, bool)+0x12a>
c0023877:	31 ff                	xor    edi,edi
c0023879:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002387e:	51                   	push   ecx
c002387f:	6a 00                	push   0x0
c0023881:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023888:	50                   	push   eax
c0023889:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002388d:	e8 3e f0 ff ff       	call   c00228d0 <IDE::enableIRQs(unsigned char, bool)>
c0023892:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023895:	e8 6a fe ff ff       	call   c0023704 <ATA::readyForCommand()>
c002389a:	83 c4 10             	add    esp,0x10
c002389d:	84 c0                	test   al,al
c002389f:	75 1a                	jne    c00238bb <ATA::access(unsigned long long, int, void*, bool)+0x167>
c00238a1:	83 ec 0c             	sub    esp,0xc
c00238a4:	be 01 00 00 00       	mov    esi,0x1
c00238a9:	68 62 c4 02 c0       	push   0xc002c462
c00238ae:	e8 34 f0 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00238b3:	83 c4 10             	add    esp,0x10
c00238b6:	e9 9e 02 00 00       	jmp    c0023b59 <ATA::access(unsigned long long, int, void*, bool)+0x405>
c00238bb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00238c1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00238c7:	c1 e0 04             	shl    eax,0x4
c00238ca:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00238d1:	09 c7                	or     edi,eax
c00238d3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00238d8:	75 05                	jne    c00238df <ATA::access(unsigned long long, int, void*, bool)+0x18b>
c00238da:	83 cf a0             	or     edi,0xffffffa0
c00238dd:	eb 03                	jmp    c00238e2 <ATA::access(unsigned long long, int, void*, bool)+0x18e>
c00238df:	83 cf e0             	or     edi,0xffffffe0
c00238e2:	89 f8                	mov    eax,edi
c00238e4:	0f b6 f8             	movzx  edi,al
c00238e7:	57                   	push   edi
c00238e8:	6a 06                	push   0x6
c00238ea:	51                   	push   ecx
c00238eb:	52                   	push   edx
c00238ec:	e8 d3 ed ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238f1:	83 c4 10             	add    esp,0x10
c00238f4:	6a 00                	push   0x0
c00238f6:	6a 01                	push   0x1
c00238f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00238ff:	50                   	push   eax
c0023900:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023906:	e8 b9 ed ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002390b:	83 c4 10             	add    esp,0x10
c002390e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023913:	75 6e                	jne    c0023983 <ATA::access(unsigned long long, int, void*, bool)+0x22f>
c0023915:	6a 00                	push   0x0
c0023917:	6a 08                	push   0x8
c0023919:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023920:	50                   	push   eax
c0023921:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023927:	e8 98 ed ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002392c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023931:	50                   	push   eax
c0023932:	6a 09                	push   0x9
c0023934:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002393b:	50                   	push   eax
c002393c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023942:	e8 7d ed ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023947:	83 c4 20             	add    esp,0x20
c002394a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002394f:	50                   	push   eax
c0023950:	6a 0a                	push   0xa
c0023952:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023959:	50                   	push   eax
c002395a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023960:	e8 5f ed ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023965:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002396a:	50                   	push   eax
c002396b:	6a 0b                	push   0xb
c002396d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023974:	50                   	push   eax
c0023975:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002397b:	e8 44 ed ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023980:	83 c4 20             	add    esp,0x20
c0023983:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023988:	50                   	push   eax
c0023989:	6a 02                	push   0x2
c002398b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023992:	50                   	push   eax
c0023993:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023999:	e8 26 ed ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002399e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00239a3:	50                   	push   eax
c00239a4:	6a 03                	push   0x3
c00239a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239ad:	50                   	push   eax
c00239ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239b4:	e8 0b ed ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239b9:	83 c4 20             	add    esp,0x20
c00239bc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00239c1:	50                   	push   eax
c00239c2:	6a 04                	push   0x4
c00239c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239cb:	50                   	push   eax
c00239cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239d2:	e8 ed ec ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00239dc:	50                   	push   eax
c00239dd:	6a 05                	push   0x5
c00239df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239e6:	50                   	push   eax
c00239e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239ed:	e8 d2 ec ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239f2:	83 c4 20             	add    esp,0x20
c00239f5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00239fa:	0f 94 c0             	sete   al
c00239fd:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023a02:	74 09                	je     c0023a0d <ATA::access(unsigned long long, int, void*, bool)+0x2b9>
c0023a04:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023a0b:	eb 07                	jmp    c0023a14 <ATA::access(unsigned long long, int, void*, bool)+0x2c0>
c0023a0d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023a14:	0f b6 c0             	movzx  eax,al
c0023a17:	50                   	push   eax
c0023a18:	6a 07                	push   0x7
c0023a1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a21:	50                   	push   eax
c0023a22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a28:	e8 97 ec ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a2d:	58                   	pop    eax
c0023a2e:	5a                   	pop    edx
c0023a2f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023a33:	68 71 c4 02 c0       	push   0xc002c471
c0023a38:	e8 aa ee fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023a3d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0023a41:	83 c4 10             	add    esp,0x10
c0023a44:	8d 70 ff             	lea    esi,[eax-0x1]
c0023a47:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0023a4b:	83 fe ff             	cmp    esi,0xffffffff
c0023a4e:	0f 84 ca 00 00 00    	je     c0023b1e <ATA::access(unsigned long long, int, void*, bool)+0x3ca>
c0023a54:	50                   	push   eax
c0023a55:	56                   	push   esi
c0023a56:	57                   	push   edi
c0023a57:	68 7d c4 02 c0       	push   0xc002c47d
c0023a5c:	e8 86 ee fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023a61:	83 c4 0c             	add    esp,0xc
c0023a64:	6a 01                	push   0x1
c0023a66:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a6d:	50                   	push   eax
c0023a6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a74:	e8 f7 f7 ff ff       	call   c0023270 <IDE::polling(unsigned char, unsigned int)>
c0023a79:	83 c4 10             	add    esp,0x10
c0023a7c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023a82:	84 c0                	test   al,al
c0023a84:	74 2f                	je     c0023ab5 <ATA::access(unsigned long long, int, void*, bool)+0x361>
c0023a86:	0f b6 f0             	movzx  esi,al
c0023a89:	56                   	push   esi
c0023a8a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023a91:	50                   	push   eax
c0023a92:	0f b6 c2             	movzx  eax,dl
c0023a95:	50                   	push   eax
c0023a96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a9c:	e8 39 f6 ff ff       	call   c00230da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023aa1:	c7 04 24 aa c4 02 c0 	mov    DWORD PTR [esp],0xc002c4aa
c0023aa8:	e8 3a ee fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023aad:	83 c4 10             	add    esp,0x10
c0023ab0:	e9 a4 00 00 00       	jmp    c0023b59 <ATA::access(unsigned long long, int, void*, bool)+0x405>
c0023ab5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023aba:	74 41                	je     c0023afd <ATA::access(unsigned long long, int, void*, bool)+0x3a9>
c0023abc:	31 c9                	xor    ecx,ecx
c0023abe:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0023ac2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023ac6:	50                   	push   eax
c0023ac7:	50                   	push   eax
c0023ac8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023acf:	50                   	push   eax
c0023ad0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ad6:	e8 d7 eb ff ff       	call   c00226b2 <IDE::getBase(unsigned char)>
c0023adb:	89 c2                	mov    edx,eax
c0023add:	89 e8                	mov    eax,ebp
c0023adf:	66 ef                	out    dx,ax
c0023ae1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023ae5:	83 c4 10             	add    esp,0x10
c0023ae8:	41                   	inc    ecx
c0023ae9:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0023aef:	75 cd                	jne    c0023abe <ATA::access(unsigned long long, int, void*, bool)+0x36a>
c0023af1:	81 c7 00 02 00 00    	add    edi,0x200
c0023af7:	4e                   	dec    esi
c0023af8:	e9 4e ff ff ff       	jmp    c0023a4b <ATA::access(unsigned long long, int, void*, bool)+0x2f7>
c0023afd:	0f b6 c2             	movzx  eax,dl
c0023b00:	51                   	push   ecx
c0023b01:	51                   	push   ecx
c0023b02:	50                   	push   eax
c0023b03:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b09:	e8 a4 eb ff ff       	call   c00226b2 <IDE::getBase(unsigned char)>
c0023b0e:	b9 00 01 00 00       	mov    ecx,0x100
c0023b13:	89 c2                	mov    edx,eax
c0023b15:	fc                   	cld    
c0023b16:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023b19:	83 c4 10             	add    esp,0x10
c0023b1c:	eb d9                	jmp    c0023af7 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c0023b1e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023b23:	74 16                	je     c0023b3b <ATA::access(unsigned long long, int, void*, bool)+0x3e7>
c0023b25:	31 c0                	xor    eax,eax
c0023b27:	52                   	push   edx
c0023b28:	52                   	push   edx
c0023b29:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023b2e:	0f 94 c0             	sete   al
c0023b31:	50                   	push   eax
c0023b32:	53                   	push   ebx
c0023b33:	e8 82 fb ff ff       	call   c00236ba <ATA::flush(bool)>
c0023b38:	83 c4 10             	add    esp,0x10
c0023b3b:	31 f6                	xor    esi,esi
c0023b3d:	83 7c 24 4c 01       	cmp    DWORD PTR [esp+0x4c],0x1
c0023b42:	74 15                	je     c0023b59 <ATA::access(unsigned long long, int, void*, bool)+0x405>
c0023b44:	50                   	push   eax
c0023b45:	50                   	push   eax
c0023b46:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0023b4a:	68 b5 c4 02 c0       	push   0xc002c4b5
c0023b4f:	e8 93 ed fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0023b54:	83 c4 10             	add    esp,0x10
c0023b57:	eb fe                	jmp    c0023b57 <ATA::access(unsigned long long, int, void*, bool)+0x403>
c0023b59:	83 c4 2c             	add    esp,0x2c
c0023b5c:	89 f0                	mov    eax,esi
c0023b5e:	5b                   	pop    ebx
c0023b5f:	5e                   	pop    esi
c0023b60:	5f                   	pop    edi
c0023b61:	5d                   	pop    ebp
c0023b62:	c3                   	ret    
c0023b63:	90                   	nop

c0023b64 <ATA::read(unsigned long long, int, void*)>:
c0023b64:	57                   	push   edi
c0023b65:	b8 04 00 00 00       	mov    eax,0x4
c0023b6a:	56                   	push   esi
c0023b6b:	53                   	push   ebx
c0023b6c:	83 ec 10             	sub    esp,0x10
c0023b6f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023b73:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023b77:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023b7a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023b7e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023b82:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023b88:	77 3b                	ja     c0023bc5 <ATA::read(unsigned long long, int, void*)+0x61>
c0023b8a:	b8 06 00 00 00       	mov    eax,0x6
c0023b8f:	85 d2                	test   edx,edx
c0023b91:	74 32                	je     c0023bc5 <ATA::read(unsigned long long, int, void*)+0x61>
c0023b93:	50                   	push   eax
c0023b94:	50                   	push   eax
c0023b95:	6a 00                	push   0x0
c0023b97:	52                   	push   edx
c0023b98:	53                   	push   ebx
c0023b99:	57                   	push   edi
c0023b9a:	56                   	push   esi
c0023b9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023b9f:	e8 b0 fb ff ff       	call   c0023754 <ATA::access(unsigned long long, int, void*, bool)>
c0023ba4:	83 c4 20             	add    esp,0x20
c0023ba7:	85 c0                	test   eax,eax
c0023ba9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023bad:	75 11                	jne    c0023bc0 <ATA::read(unsigned long long, int, void*)+0x5c>
c0023baf:	01 1d 28 1e 03 c0    	add    DWORD PTR ds:0xc0031e28,ebx
c0023bb5:	e8 92 cb fe ff       	call   c001074c <VgaText::updateDiskUsage()>
c0023bba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023bbe:	eb 05                	jmp    c0023bc5 <ATA::read(unsigned long long, int, void*)+0x61>
c0023bc0:	b8 01 00 00 00       	mov    eax,0x1
c0023bc5:	83 c4 10             	add    esp,0x10
c0023bc8:	5b                   	pop    ebx
c0023bc9:	5e                   	pop    esi
c0023bca:	5f                   	pop    edi
c0023bcb:	c3                   	ret    

c0023bcc <ATA::write(unsigned long long, int, void*)>:
c0023bcc:	57                   	push   edi
c0023bcd:	b8 04 00 00 00       	mov    eax,0x4
c0023bd2:	56                   	push   esi
c0023bd3:	53                   	push   ebx
c0023bd4:	83 ec 10             	sub    esp,0x10
c0023bd7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023bdb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023bdf:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023be2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023be6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023bea:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023bf0:	77 3b                	ja     c0023c2d <ATA::write(unsigned long long, int, void*)+0x61>
c0023bf2:	b8 06 00 00 00       	mov    eax,0x6
c0023bf7:	85 d2                	test   edx,edx
c0023bf9:	74 32                	je     c0023c2d <ATA::write(unsigned long long, int, void*)+0x61>
c0023bfb:	50                   	push   eax
c0023bfc:	50                   	push   eax
c0023bfd:	6a 01                	push   0x1
c0023bff:	52                   	push   edx
c0023c00:	53                   	push   ebx
c0023c01:	57                   	push   edi
c0023c02:	56                   	push   esi
c0023c03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023c07:	e8 48 fb ff ff       	call   c0023754 <ATA::access(unsigned long long, int, void*, bool)>
c0023c0c:	83 c4 20             	add    esp,0x20
c0023c0f:	85 c0                	test   eax,eax
c0023c11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023c15:	75 11                	jne    c0023c28 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023c17:	01 1d 24 1e 03 c0    	add    DWORD PTR ds:0xc0031e24,ebx
c0023c1d:	e8 2a cb fe ff       	call   c001074c <VgaText::updateDiskUsage()>
c0023c22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c26:	eb 05                	jmp    c0023c2d <ATA::write(unsigned long long, int, void*)+0x61>
c0023c28:	b8 01 00 00 00       	mov    eax,0x1
c0023c2d:	83 c4 10             	add    esp,0x10
c0023c30:	5b                   	pop    ebx
c0023c31:	5e                   	pop    esi
c0023c32:	5f                   	pop    edi
c0023c33:	c3                   	ret    

c0023c34 <ATA::detectCHS()>:
c0023c34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023c38:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023c3e:	c1 e0 06             	shl    eax,0x6
c0023c41:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023c47:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023c51:	c7 44 24 04 cd c4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c4cd
c0023c59:	e9 fd 61 ff ff       	jmp    c0019e5b <Krnl::panic(char const*)>

c0023c5e <ATA::open(int, int, void*)>:
c0023c5e:	53                   	push   ebx
c0023c5f:	83 ec 08             	sub    esp,0x8
c0023c62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c6e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023c74:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023c7a:	c1 e0 06             	shl    eax,0x6
c0023c7d:	01 d0                	add    eax,edx
c0023c7f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023c86:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023c8c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023c93:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023c9d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023ca3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0023caa:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023cb1:	75 0c                	jne    c0023cbf <ATA::open(int, int, void*)+0x61>
c0023cb3:	83 ec 0c             	sub    esp,0xc
c0023cb6:	53                   	push   ebx
c0023cb7:	e8 78 ff ff ff       	call   c0023c34 <ATA::detectCHS()>
c0023cbc:	83 c4 10             	add    esp,0x10
c0023cbf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023cc5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023ccb:	c1 e0 06             	shl    eax,0x6
c0023cce:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023cd5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023cdf:	d1 e8                	shr    eax,1
c0023ce1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023ce7:	6a 04                	push   0x4
c0023ce9:	6a 0c                	push   0xc
c0023ceb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cf2:	50                   	push   eax
c0023cf3:	52                   	push   edx
c0023cf4:	e8 cb e9 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cf9:	90                   	nop
c0023cfa:	90                   	nop
c0023cfb:	6a 00                	push   0x0
c0023cfd:	6a 0c                	push   0xc
c0023cff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d06:	50                   	push   eax
c0023d07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d0d:	e8 b2 e9 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d12:	83 c4 14             	add    esp,0x14
c0023d15:	53                   	push   ebx
c0023d16:	e8 7f 04 ff ff       	call   c001419a <PhysicalDisk::startCache()>
c0023d1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d1e:	e8 99 25 ff ff       	call   c00162bc <createPartitionsForDisk(PhysicalDisk*)>
c0023d23:	31 c0                	xor    eax,eax
c0023d25:	83 c4 18             	add    esp,0x18
c0023d28:	5b                   	pop    ebx
c0023d29:	c3                   	ret    

c0023d2a <ATAPI::write(unsigned long long, int, void*)>:
c0023d2a:	b8 03 00 00 00       	mov    eax,0x3
c0023d2f:	c3                   	ret    

c0023d30 <ATAPI::close(int, int, void*)>:
c0023d30:	83 ec 0c             	sub    esp,0xc
c0023d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d37:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d3d:	85 c0                	test   eax,eax
c0023d3f:	74 0c                	je     c0023d4d <ATAPI::close(int, int, void*)+0x1d>
c0023d41:	83 ec 0c             	sub    esp,0xc
c0023d44:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d46:	50                   	push   eax
c0023d47:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d4a:	83 c4 10             	add    esp,0x10
c0023d4d:	31 c0                	xor    eax,eax
c0023d4f:	83 c4 0c             	add    esp,0xc
c0023d52:	c3                   	ret    
c0023d53:	90                   	nop

c0023d54 <ATAPI::ATAPI()>:
c0023d54:	83 ec 0c             	sub    esp,0xc
c0023d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d5b:	83 ec 04             	sub    esp,0x4
c0023d5e:	68 00 08 00 00       	push   0x800
c0023d63:	68 cd c5 02 c0       	push   0xc002c5cd
c0023d68:	50                   	push   eax
c0023d69:	e8 c4 03 ff ff       	call   c0014132 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d6e:	83 c4 10             	add    esp,0x10
c0023d71:	ba 20 c5 02 c0       	mov    edx,0xc002c520
c0023d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d7a:	89 10                	mov    DWORD PTR [eax],edx
c0023d7c:	90                   	nop
c0023d7d:	83 c4 0c             	add    esp,0xc
c0023d80:	c3                   	ret    
c0023d81:	90                   	nop

c0023d82 <ATAPI::readyForCommand()>:
c0023d82:	56                   	push   esi
c0023d83:	53                   	push   ebx
c0023d84:	31 db                	xor    ebx,ebx
c0023d86:	50                   	push   eax
c0023d87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023d8b:	50                   	push   eax
c0023d8c:	6a 0c                	push   0xc
c0023d8e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023d95:	50                   	push   eax
c0023d96:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023d9c:	e8 e3 e9 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0023da1:	83 c4 10             	add    esp,0x10
c0023da4:	a8 88                	test   al,0x88
c0023da6:	74 23                	je     c0023dcb <ATAPI::readyForCommand()+0x49>
c0023da8:	43                   	inc    ebx
c0023da9:	83 fb 63             	cmp    ebx,0x63
c0023dac:	7e dd                	jle    c0023d8b <ATAPI::readyForCommand()+0x9>
c0023dae:	51                   	push   ecx
c0023daf:	51                   	push   ecx
c0023db0:	6a 00                	push   0x0
c0023db2:	68 40 42 0f 00       	push   0xf4240
c0023db7:	e8 4a 9c ff ff       	call   c001da06 <nanoSleep(unsigned long long)>
c0023dbc:	83 c4 10             	add    esp,0x10
c0023dbf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023dc5:	75 c4                	jne    c0023d8b <ATAPI::readyForCommand()+0x9>
c0023dc7:	31 c0                	xor    eax,eax
c0023dc9:	eb 02                	jmp    c0023dcd <ATAPI::readyForCommand()+0x4b>
c0023dcb:	b0 01                	mov    al,0x1
c0023dcd:	5a                   	pop    edx
c0023dce:	5b                   	pop    ebx
c0023dcf:	5e                   	pop    esi
c0023dd0:	c3                   	ret    
c0023dd1:	90                   	nop

c0023dd2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023dd2:	55                   	push   ebp
c0023dd3:	57                   	push   edi
c0023dd4:	56                   	push   esi
c0023dd5:	53                   	push   ebx
c0023dd6:	83 ec 20             	sub    esp,0x20
c0023dd9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023ddd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023de1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023de5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023de9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023ded:	6a 01                	push   0x1
c0023def:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023df6:	50                   	push   eax
c0023df7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023dfd:	e8 ce ea ff ff       	call   c00228d0 <IDE::enableIRQs(unsigned char, bool)>
c0023e02:	5e                   	pop    esi
c0023e03:	58                   	pop    eax
c0023e04:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e0b:	50                   	push   eax
c0023e0c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e12:	e8 87 e8 ff ff       	call   c002269e <IDE::prepareInterrupt(unsigned char)>
c0023e17:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023e1a:	e8 63 ff ff ff       	call   c0023d82 <ATAPI::readyForCommand()>
c0023e1f:	83 c4 10             	add    esp,0x10
c0023e22:	84 c0                	test   al,al
c0023e24:	75 0a                	jne    c0023e30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023e26:	bb 01 00 00 00       	mov    ebx,0x1
c0023e2b:	e9 57 02 00 00       	jmp    c0024087 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023e30:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023e36:	c1 e0 04             	shl    eax,0x4
c0023e39:	0f b6 c0             	movzx  eax,al
c0023e3c:	50                   	push   eax
c0023e3d:	6a 06                	push   0x6
c0023e3f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e46:	50                   	push   eax
c0023e47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e4d:	e8 72 e8 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e52:	6a 00                	push   0x0
c0023e54:	6a 01                	push   0x1
c0023e56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e5d:	50                   	push   eax
c0023e5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e64:	e8 5b e8 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e69:	83 c4 20             	add    esp,0x20
c0023e6c:	0f b6 c3             	movzx  eax,bl
c0023e6f:	0f b6 df             	movzx  ebx,bh
c0023e72:	50                   	push   eax
c0023e73:	6a 04                	push   0x4
c0023e75:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e7c:	50                   	push   eax
c0023e7d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e83:	e8 3c e8 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e88:	53                   	push   ebx
c0023e89:	6a 05                	push   0x5
c0023e8b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e92:	50                   	push   eax
c0023e93:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e99:	e8 26 e8 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e9e:	83 c4 20             	add    esp,0x20
c0023ea1:	68 a0 00 00 00       	push   0xa0
c0023ea6:	6a 07                	push   0x7
c0023ea8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023eaf:	50                   	push   eax
c0023eb0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023eb6:	e8 09 e8 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ebb:	83 c4 0c             	add    esp,0xc
c0023ebe:	6a 01                	push   0x1
c0023ec0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023ec7:	50                   	push   eax
c0023ec8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ece:	e8 9d f3 ff ff       	call   c0023270 <IDE::polling(unsigned char, unsigned int)>
c0023ed3:	83 c4 10             	add    esp,0x10
c0023ed6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023edc:	84 c0                	test   al,al
c0023ede:	74 23                	je     c0023f03 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023ee0:	0f b6 d8             	movzx  ebx,al
c0023ee3:	0f b6 d2             	movzx  edx,dl
c0023ee6:	53                   	push   ebx
c0023ee7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023eee:	50                   	push   eax
c0023eef:	52                   	push   edx
c0023ef0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ef6:	e8 df f1 ff ff       	call   c00230da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023efb:	83 c4 10             	add    esp,0x10
c0023efe:	e9 84 01 00 00       	jmp    c0024087 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023f03:	0f b6 d2             	movzx  edx,dl
c0023f06:	53                   	push   ebx
c0023f07:	53                   	push   ebx
c0023f08:	52                   	push   edx
c0023f09:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f0f:	e8 9e e7 ff ff       	call   c00226b2 <IDE::getBase(unsigned char)>
c0023f14:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023f18:	b9 06 00 00 00       	mov    ecx,0x6
c0023f1d:	89 c2                	mov    edx,eax
c0023f1f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023f22:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023f26:	83 c4 10             	add    esp,0x10
c0023f29:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023f2f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023f36:	85 db                	test   ebx,ebx
c0023f38:	0f 84 ec 00 00 00    	je     c002402a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023f3e:	51                   	push   ecx
c0023f3f:	51                   	push   ecx
c0023f40:	52                   	push   edx
c0023f41:	50                   	push   eax
c0023f42:	e8 eb e8 ff ff       	call   c0022832 <IDE::waitInterrupt(unsigned char)>
c0023f47:	83 c4 10             	add    esp,0x10
c0023f4a:	84 c0                	test   al,al
c0023f4c:	0f 84 d4 fe ff ff    	je     c0023e26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023f52:	56                   	push   esi
c0023f53:	56                   	push   esi
c0023f54:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f5b:	50                   	push   eax
c0023f5c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f62:	e8 37 e7 ff ff       	call   c002269e <IDE::prepareInterrupt(unsigned char)>
c0023f67:	83 c4 0c             	add    esp,0xc
c0023f6a:	6a 04                	push   0x4
c0023f6c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f73:	50                   	push   eax
c0023f74:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f7a:	e8 05 e8 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0023f7f:	83 c4 0c             	add    esp,0xc
c0023f82:	89 c6                	mov    esi,eax
c0023f84:	6a 05                	push   0x5
c0023f86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f8d:	50                   	push   eax
c0023f8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f94:	e8 eb e7 ff ff       	call   c0022784 <IDE::read(unsigned char, unsigned char)>
c0023f99:	89 f1                	mov    ecx,esi
c0023f9b:	0f b6 c0             	movzx  eax,al
c0023f9e:	0f b6 f1             	movzx  esi,cl
c0023fa1:	c1 e0 08             	shl    eax,0x8
c0023fa4:	09 c6                	or     esi,eax
c0023fa6:	d1 fe                	sar    esi,1
c0023fa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023fac:	83 c4 10             	add    esp,0x10
c0023faf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023fb4:	74 41                	je     c0023ff7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023fb6:	31 c9                	xor    ecx,ecx
c0023fb8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023fbe:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023fc5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0023fc9:	75 0a                	jne    c0023fd5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0023fcb:	01 c9                	add    ecx,ecx
c0023fcd:	01 cd                	add    ebp,ecx
c0023fcf:	4b                   	dec    ebx
c0023fd0:	e9 54 ff ff ff       	jmp    c0023f29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023fd5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023fda:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023fde:	51                   	push   ecx
c0023fdf:	51                   	push   ecx
c0023fe0:	52                   	push   edx
c0023fe1:	50                   	push   eax
c0023fe2:	e8 cb e6 ff ff       	call   c00226b2 <IDE::getBase(unsigned char)>
c0023fe7:	89 c2                	mov    edx,eax
c0023fe9:	89 f0                	mov    eax,esi
c0023feb:	66 ef                	out    dx,ax
c0023fed:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023ff1:	83 c4 10             	add    esp,0x10
c0023ff4:	41                   	inc    ecx
c0023ff5:	eb c1                	jmp    c0023fb8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023ff7:	31 f6                	xor    esi,esi
c0023ff9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023fff:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024006:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002400a:	75 06                	jne    c0024012 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002400c:	01 f6                	add    esi,esi
c002400e:	01 f5                	add    ebp,esi
c0024010:	eb bd                	jmp    c0023fcf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024012:	51                   	push   ecx
c0024013:	51                   	push   ecx
c0024014:	52                   	push   edx
c0024015:	50                   	push   eax
c0024016:	e8 97 e6 ff ff       	call   c00226b2 <IDE::getBase(unsigned char)>
c002401b:	89 c2                	mov    edx,eax
c002401d:	66 ed                	in     ax,dx
c002401f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024024:	83 c4 10             	add    esp,0x10
c0024027:	46                   	inc    esi
c0024028:	eb cf                	jmp    c0023ff9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002402a:	51                   	push   ecx
c002402b:	51                   	push   ecx
c002402c:	52                   	push   edx
c002402d:	50                   	push   eax
c002402e:	e8 ff e7 ff ff       	call   c0022832 <IDE::waitInterrupt(unsigned char)>
c0024033:	83 c4 10             	add    esp,0x10
c0024036:	84 c0                	test   al,al
c0024038:	0f 84 e8 fd ff ff    	je     c0023e26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002403e:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024043:	52                   	push   edx
c0024044:	52                   	push   edx
c0024045:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002404c:	50                   	push   eax
c002404d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024053:	e8 46 e6 ff ff       	call   c002269e <IDE::prepareInterrupt(unsigned char)>
c0024058:	83 c4 10             	add    esp,0x10
c002405b:	50                   	push   eax
c002405c:	50                   	push   eax
c002405d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024064:	50                   	push   eax
c0024065:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002406b:	e8 42 e6 ff ff       	call   c00226b2 <IDE::getBase(unsigned char)>
c0024070:	8d 50 07             	lea    edx,[eax+0x7]
c0024073:	ec                   	in     al,dx
c0024074:	83 c4 10             	add    esp,0x10
c0024077:	a8 88                	test   al,0x88
c0024079:	74 0a                	je     c0024085 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002407b:	4b                   	dec    ebx
c002407c:	75 dd                	jne    c002405b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002407e:	bb 02 00 00 00       	mov    ebx,0x2
c0024083:	eb 02                	jmp    c0024087 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024085:	31 db                	xor    ebx,ebx
c0024087:	83 c4 1c             	add    esp,0x1c
c002408a:	89 d8                	mov    eax,ebx
c002408c:	5b                   	pop    ebx
c002408d:	5e                   	pop    esi
c002408e:	5f                   	pop    edi
c002408f:	5d                   	pop    ebp
c0024090:	c3                   	ret    
c0024091:	90                   	nop

c0024092 <ATAPI::diskRemoved()>:
c0024092:	83 ec 18             	sub    esp,0x18
c0024095:	68 d9 c5 02 c0       	push   0xc002c5d9
c002409a:	e8 48 e8 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c002409f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00240a3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00240aa:	83 c4 1c             	add    esp,0x1c
c00240ad:	c3                   	ret    

c00240ae <ATAPI::eject()>:
c00240ae:	57                   	push   edi
c00240af:	b9 03 00 00 00       	mov    ecx,0x3
c00240b4:	53                   	push   ebx
c00240b5:	83 ec 14             	sub    esp,0x14
c00240b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00240bc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00240c0:	fc                   	cld    
c00240c1:	31 c0                	xor    eax,eax
c00240c3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00240c5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00240ca:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00240cf:	50                   	push   eax
c00240d0:	50                   	push   eax
c00240d1:	6a 00                	push   0x0
c00240d3:	6a 00                	push   0x0
c00240d5:	6a 00                	push   0x0
c00240d7:	6a 02                	push   0x2
c00240d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00240dd:	50                   	push   eax
c00240de:	53                   	push   ebx
c00240df:	e8 ee fc ff ff       	call   c0023dd2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00240e4:	83 c4 14             	add    esp,0x14
c00240e7:	53                   	push   ebx
c00240e8:	e8 a5 ff ff ff       	call   c0024092 <ATAPI::diskRemoved()>
c00240ed:	83 c4 24             	add    esp,0x24
c00240f0:	31 c0                	xor    eax,eax
c00240f2:	5b                   	pop    ebx
c00240f3:	5f                   	pop    edi
c00240f4:	c3                   	ret    
c00240f5:	90                   	nop

c00240f6 <ATAPI::diskInserted()>:
c00240f6:	53                   	push   ebx
c00240f7:	83 ec 14             	sub    esp,0x14
c00240fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00240fe:	68 f0 c5 02 c0       	push   0xc002c5f0
c0024103:	e8 df e7 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0024108:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002410f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024112:	e8 83 00 ff ff       	call   c001419a <PhysicalDisk::startCache()>
c0024117:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002411b:	83 c4 18             	add    esp,0x18
c002411e:	5b                   	pop    ebx
c002411f:	e9 98 21 ff ff       	jmp    c00162bc <createPartitionsForDisk(PhysicalDisk*)>

c0024124 <ATAPI::detectMedia()>:
c0024124:	56                   	push   esi
c0024125:	53                   	push   ebx
c0024126:	83 ec 28             	sub    esp,0x28
c0024129:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002412d:	6a 0c                	push   0xc
c002412f:	6a 00                	push   0x0
c0024131:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024135:	56                   	push   esi
c0024136:	e8 7d c5 fd ff       	call   c00006b8 <memset>
c002413b:	58                   	pop    eax
c002413c:	5a                   	pop    edx
c002413d:	6a 00                	push   0x0
c002413f:	6a 00                	push   0x0
c0024141:	6a 00                	push   0x0
c0024143:	6a 00                	push   0x0
c0024145:	56                   	push   esi
c0024146:	53                   	push   ebx
c0024147:	e8 86 fc ff ff       	call   c0023dd2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002414c:	83 c4 1c             	add    esp,0x1c
c002414f:	6a 0c                	push   0xc
c0024151:	6a 00                	push   0x0
c0024153:	56                   	push   esi
c0024154:	e8 5f c5 fd ff       	call   c00006b8 <memset>
c0024159:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002415e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024163:	59                   	pop    ecx
c0024164:	58                   	pop    eax
c0024165:	6a 01                	push   0x1
c0024167:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002416b:	50                   	push   eax
c002416c:	6a 00                	push   0x0
c002416e:	6a 12                	push   0x12
c0024170:	56                   	push   esi
c0024171:	53                   	push   ebx
c0024172:	e8 5b fc ff ff       	call   c0023dd2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024177:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002417b:	83 c4 20             	add    esp,0x20
c002417e:	83 e0 7f             	and    eax,0x7f
c0024181:	3c 70                	cmp    al,0x70
c0024183:	74 15                	je     c002419a <ATAPI::detectMedia()+0x76>
c0024185:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002418c:	75 0c                	jne    c002419a <ATAPI::detectMedia()+0x76>
c002418e:	83 ec 0c             	sub    esp,0xc
c0024191:	53                   	push   ebx
c0024192:	e8 5f ff ff ff       	call   c00240f6 <ATAPI::diskInserted()>
c0024197:	83 c4 10             	add    esp,0x10
c002419a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002419e:	83 e0 0f             	and    eax,0xf
c00241a1:	3c 02                	cmp    al,0x2
c00241a3:	75 1b                	jne    c00241c0 <ATAPI::detectMedia()+0x9c>
c00241a5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00241aa:	75 2d                	jne    c00241d9 <ATAPI::detectMedia()+0xb5>
c00241ac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00241b3:	74 24                	je     c00241d9 <ATAPI::detectMedia()+0xb5>
c00241b5:	83 ec 0c             	sub    esp,0xc
c00241b8:	53                   	push   ebx
c00241b9:	e8 d4 fe ff ff       	call   c0024092 <ATAPI::diskRemoved()>
c00241be:	eb 16                	jmp    c00241d6 <ATAPI::detectMedia()+0xb2>
c00241c0:	84 c0                	test   al,al
c00241c2:	75 15                	jne    c00241d9 <ATAPI::detectMedia()+0xb5>
c00241c4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00241cb:	75 0c                	jne    c00241d9 <ATAPI::detectMedia()+0xb5>
c00241cd:	83 ec 0c             	sub    esp,0xc
c00241d0:	53                   	push   ebx
c00241d1:	e8 20 ff ff ff       	call   c00240f6 <ATAPI::diskInserted()>
c00241d6:	83 c4 10             	add    esp,0x10
c00241d9:	83 c4 24             	add    esp,0x24
c00241dc:	5b                   	pop    ebx
c00241dd:	5e                   	pop    esi
c00241de:	c3                   	ret    
c00241df:	90                   	nop

c00241e0 <ATAPI::open(int, int, void*)>:
c00241e0:	53                   	push   ebx
c00241e1:	83 ec 08             	sub    esp,0x8
c00241e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00241e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00241ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241f0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00241f6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00241fc:	c1 e0 06             	shl    eax,0x6
c00241ff:	01 d0                	add    eax,edx
c0024201:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024208:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002420e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024215:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002421f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024225:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002422c:	6a 04                	push   0x4
c002422e:	6a 0c                	push   0xc
c0024230:	51                   	push   ecx
c0024231:	52                   	push   edx
c0024232:	e8 8d e4 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024237:	90                   	nop
c0024238:	90                   	nop
c0024239:	6a 00                	push   0x0
c002423b:	6a 0c                	push   0xc
c002423d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024244:	50                   	push   eax
c0024245:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002424b:	e8 74 e4 ff ff       	call   c00226c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024250:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024257:	83 c4 14             	add    esp,0x14
c002425a:	53                   	push   ebx
c002425b:	e8 c4 fe ff ff       	call   c0024124 <ATAPI::detectMedia()>
c0024260:	31 c0                	xor    eax,eax
c0024262:	83 c4 18             	add    esp,0x18
c0024265:	5b                   	pop    ebx
c0024266:	c3                   	ret    
c0024267:	90                   	nop

c0024268 <ATAPI::read(unsigned long long, int, void*)>:
c0024268:	55                   	push   ebp
c0024269:	57                   	push   edi
c002426a:	56                   	push   esi
c002426b:	53                   	push   ebx
c002426c:	83 ec 1c             	sub    esp,0x1c
c002426f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024273:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024277:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002427b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024282:	74 41                	je     c00242c5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024284:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024288:	b9 03 00 00 00       	mov    ecx,0x3
c002428d:	fc                   	cld    
c002428e:	31 c0                	xor    eax,eax
c0024290:	86 fb                	xchg   bl,bh
c0024292:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024294:	c1 c3 10             	rol    ebx,0x10
c0024297:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002429c:	89 e8                	mov    eax,ebp
c002429e:	86 fb                	xchg   bl,bh
c00242a0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00242a4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00242a8:	50                   	push   eax
c00242a9:	50                   	push   eax
c00242aa:	55                   	push   ebp
c00242ab:	c1 e5 0b             	shl    ebp,0xb
c00242ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00242b2:	6a 00                	push   0x0
c00242b4:	55                   	push   ebp
c00242b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00242b9:	50                   	push   eax
c00242ba:	56                   	push   esi
c00242bb:	e8 12 fb ff ff       	call   c0023dd2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00242c0:	83 c4 20             	add    esp,0x20
c00242c3:	eb 1a                	jmp    c00242df <ATAPI::read(unsigned long long, int, void*)+0x77>
c00242c5:	83 ec 0c             	sub    esp,0xc
c00242c8:	56                   	push   esi
c00242c9:	e8 56 fe ff ff       	call   c0024124 <ATAPI::detectMedia()>
c00242ce:	83 c4 10             	add    esp,0x10
c00242d1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00242d8:	75 aa                	jne    c0024284 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00242da:	b8 02 00 00 00       	mov    eax,0x2
c00242df:	83 c4 1c             	add    esp,0x1c
c00242e2:	5b                   	pop    ebx
c00242e3:	5e                   	pop    esi
c00242e4:	5f                   	pop    edi
c00242e5:	5d                   	pop    ebp
c00242e6:	c3                   	ret    
c00242e7:	90                   	nop

c00242e8 <SATA::close(int, int, void*)>:
c00242e8:	83 ec 0c             	sub    esp,0xc
c00242eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00242f5:	85 c0                	test   eax,eax
c00242f7:	74 0c                	je     c0024305 <SATA::close(int, int, void*)+0x1d>
c00242f9:	83 ec 0c             	sub    esp,0xc
c00242fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00242fe:	50                   	push   eax
c00242ff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024302:	83 c4 10             	add    esp,0x10
c0024305:	31 c0                	xor    eax,eax
c0024307:	83 c4 0c             	add    esp,0xc
c002430a:	c3                   	ret    
c002430b:	90                   	nop

c002430c <SATA::powerSaving(PowerSavingLevel)>:
c002430c:	c3                   	ret    
c002430d:	90                   	nop

c002430e <SATA::open(int, int, void*)>:
c002430e:	56                   	push   esi
c002430f:	53                   	push   ebx
c0024310:	50                   	push   eax
c0024311:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024315:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024319:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024323:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024329:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024333:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024337:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024341:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024347:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002434e:	e8 62 b9 fe ff       	call   c000fcb5 <Phys::allocatePage()>
c0024353:	89 c6                	mov    esi,eax
c0024355:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002435b:	81 c6 00 10 00 00    	add    esi,0x1000
c0024361:	e8 4f b9 fe ff       	call   c000fcb5 <Phys::allocatePage()>
c0024366:	39 c6                	cmp    esi,eax
c0024368:	74 10                	je     c002437a <SATA::open(int, int, void*)+0x6c>
c002436a:	83 ec 0c             	sub    esp,0xc
c002436d:	68 50 c5 02 c0       	push   0xc002c550
c0024372:	e8 e4 5a ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0024377:	83 c4 10             	add    esp,0x10
c002437a:	83 ec 0c             	sub    esp,0xc
c002437d:	6a 02                	push   0x2
c002437f:	e8 73 d5 fe ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c0024384:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002438a:	e8 f8 d6 fe ff       	call   c0011a87 <Virt::getAKernelVAS()>
c002438f:	6a 03                	push   0x3
c0024391:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024397:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002439d:	50                   	push   eax
c002439e:	e8 1f dc fe ff       	call   c0011fc2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00243a3:	83 c4 14             	add    esp,0x14
c00243a6:	53                   	push   ebx
c00243a7:	e8 ee fd fe ff       	call   c001419a <PhysicalDisk::startCache()>
c00243ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00243af:	e8 08 1f ff ff       	call   c00162bc <createPartitionsForDisk(PhysicalDisk*)>
c00243b4:	83 c4 14             	add    esp,0x14
c00243b7:	31 c0                	xor    eax,eax
c00243b9:	5b                   	pop    ebx
c00243ba:	5e                   	pop    esi
c00243bb:	c3                   	ret    

c00243bc <SATA::SATA()>:
c00243bc:	83 ec 0c             	sub    esp,0xc
c00243bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243c3:	83 ec 04             	sub    esp,0x4
c00243c6:	68 00 02 00 00       	push   0x200
c00243cb:	68 64 c5 02 c0       	push   0xc002c564
c00243d0:	50                   	push   eax
c00243d1:	e8 5c fd fe ff       	call   c0014132 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00243d6:	83 c4 10             	add    esp,0x10
c00243d9:	ba 9c c5 02 c0       	mov    edx,0xc002c59c
c00243de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243e2:	89 10                	mov    DWORD PTR [eax],edx
c00243e4:	90                   	nop
c00243e5:	83 c4 0c             	add    esp,0xc
c00243e8:	c3                   	ret    
c00243e9:	90                   	nop

c00243ea <SATA::access(unsigned long long, int, void*, bool)>:
c00243ea:	55                   	push   ebp
c00243eb:	57                   	push   edi
c00243ec:	56                   	push   esi
c00243ed:	53                   	push   ebx
c00243ee:	83 ec 2c             	sub    esp,0x2c
c00243f1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00243f5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00243f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00243fc:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024400:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024404:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024408:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002440c:	0f b6 5c 24 0c       	movzx  ebx,BYTE PTR [esp+0xc]
c0024411:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024416:	7e 33                	jle    c002444b <SATA::access(unsigned long long, int, void*, bool)+0x61>
c0024418:	57                   	push   edi
c0024419:	57                   	push   edi
c002441a:	53                   	push   ebx
c002441b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002441f:	6a 10                	push   0x10
c0024421:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024425:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024429:	55                   	push   ebp
c002442a:	e8 bb ff ff ff       	call   c00243ea <SATA::access(unsigned long long, int, void*, bool)>
c002442f:	83 6c 24 6c 10       	sub    DWORD PTR [esp+0x6c],0x10
c0024434:	83 44 24 20 10       	add    DWORD PTR [esp+0x20],0x10
c0024439:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002443e:	81 44 24 70 00 20 00 00 	add    DWORD PTR [esp+0x70],0x2000
c0024446:	83 c4 20             	add    esp,0x20
c0024449:	eb c6                	jmp    c0024411 <SATA::access(unsigned long long, int, void*, bool)+0x27>
c002444b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002444e:	8b 9d 6c 01 00 00    	mov    ebx,DWORD PTR [ebp+0x16c]
c0024454:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002445c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024460:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024466:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002446c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024470:	89 d8                	mov    eax,ebx
c0024472:	c1 e0 07             	shl    eax,0x7
c0024475:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024479:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024483:	56                   	push   esi
c0024484:	8d 43 02             	lea    eax,[ebx+0x2]
c0024487:	56                   	push   esi
c0024488:	c1 e0 07             	shl    eax,0x7
c002448b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002448f:	50                   	push   eax
c0024490:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024496:	e8 ed ee ff ff       	call   c0023388 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002449b:	ba 01 00 00 00       	mov    edx,0x1
c00244a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00244a4:	83 c4 10             	add    esp,0x10
c00244a7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00244ac:	0f 84 dd 01 00 00    	je     c002468f <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c00244b2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00244b6:	c1 e0 09             	shl    eax,0x9
c00244b9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00244be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00244c2:	74 17                	je     c00244db <SATA::access(unsigned long long, int, void*, bool)+0xf1>
c00244c4:	51                   	push   ecx
c00244c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00244c9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00244cd:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00244d3:	e8 c8 c1 fd ff       	call   c00006a0 <memcpy>
c00244d8:	83 c4 10             	add    esp,0x10
c00244db:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00244e1:	8d 43 02             	lea    eax,[ebx+0x2]
c00244e4:	c1 e0 07             	shl    eax,0x7
c00244e7:	89 de                	mov    esi,ebx
c00244e9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00244ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00244ef:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00244f5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00244fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00244ff:	c1 e1 05             	shl    ecx,0x5
c0024502:	01 c8                	add    eax,ecx
c0024504:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024508:	8b 38                	mov    edi,DWORD PTR [eax]
c002450a:	83 e1 01             	and    ecx,0x1
c002450d:	83 e7 bf             	and    edi,0xffffffbf
c0024510:	c1 e1 06             	shl    ecx,0x6
c0024513:	09 f9                	or     ecx,edi
c0024515:	88 08                	mov    BYTE PTR [eax],cl
c0024517:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024519:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002451f:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024525:	89 08                	mov    DWORD PTR [eax],ecx
c0024527:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002452d:	8b b9 58 01 00 00    	mov    edi,DWORD PTR [ecx+0x158]
c0024533:	2b b9 5c 01 00 00    	sub    edi,DWORD PTR [ecx+0x15c]
c0024539:	03 78 08             	add    edi,DWORD PTR [eax+0x8]
c002453c:	52                   	push   edx
c002453d:	68 90 00 00 00       	push   0x90
c0024542:	6a 00                	push   0x0
c0024544:	57                   	push   edi
c0024545:	e8 6e c1 fd ff       	call   c00006b8 <memset>
c002454a:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024550:	c6 47 07 40          	mov    BYTE PTR [edi+0x7],0x40
c0024554:	89 87 80 00 00 00    	mov    DWORD PTR [edi+0x80],eax
c002455a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002455e:	83 c4 10             	add    esp,0x10
c0024561:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024564:	8b 87 8c 00 00 00    	mov    eax,DWORD PTR [edi+0x8c]
c002456a:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024570:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024575:	09 c8                	or     eax,ecx
c0024577:	89 87 8c 00 00 00    	mov    DWORD PTR [edi+0x8c],eax
c002457d:	66 8b 07             	mov    ax,WORD PTR [edi]
c0024580:	80 8f 8f 00 00 00 80 	or     BYTE PTR [edi+0x8f],0x80
c0024587:	66 25 00 7f          	and    ax,0x7f00
c002458b:	66 0d 27 80          	or     ax,0x8027
c002458f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024594:	66 89 07             	mov    WORD PTR [edi],ax
c0024597:	19 c0                	sbb    eax,eax
c0024599:	c1 e6 07             	shl    esi,0x7
c002459c:	83 e0 f0             	and    eax,0xfffffff0
c002459f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00245a3:	83 c0 35             	add    eax,0x35
c00245a6:	88 47 02             	mov    BYTE PTR [edi+0x2],al
c00245a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00245ac:	66 89 47 04          	mov    WORD PTR [edi+0x4],ax
c00245b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245b4:	c1 e8 10             	shr    eax,0x10
c00245b7:	88 47 06             	mov    BYTE PTR [edi+0x6],al
c00245ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245be:	c1 e8 18             	shr    eax,0x18
c00245c1:	88 47 08             	mov    BYTE PTR [edi+0x8],al
c00245c4:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00245c8:	88 47 09             	mov    BYTE PTR [edi+0x9],al
c00245cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00245cf:	88 67 0a             	mov    BYTE PTR [edi+0xa],ah
c00245d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00245d6:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
c00245da:	31 c0                	xor    eax,eax
c00245dc:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00245e2:	80 e1 88             	and    cl,0x88
c00245e5:	74 0a                	je     c00245f1 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c00245e7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00245ec:	74 0a                	je     c00245f8 <SATA::access(unsigned long long, int, void*, bool)+0x20e>
c00245ee:	40                   	inc    eax
c00245ef:	eb eb                	jmp    c00245dc <SATA::access(unsigned long long, int, void*, bool)+0x1f2>
c00245f1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00245f6:	75 0a                	jne    c0024602 <SATA::access(unsigned long long, int, void*, bool)+0x218>
c00245f8:	83 ec 0c             	sub    esp,0xc
c00245fb:	68 74 c5 02 c0       	push   0xc002c574
c0024600:	eb 56                	jmp    c0024658 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c0024602:	b8 01 00 00 00       	mov    eax,0x1
c0024607:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002460b:	c1 e3 07             	shl    ebx,0x7
c002460e:	d3 e0                	shl    eax,cl
c0024610:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024614:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002461a:	8b 8b 38 01 00 00    	mov    ecx,DWORD PTR [ebx+0x138]
c0024620:	85 c8                	test   eax,ecx
c0024622:	74 20                	je     c0024644 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0024624:	8b 8b 10 01 00 00    	mov    ecx,DWORD PTR [ebx+0x110]
c002462a:	0f ba e1 1e          	bt     ecx,0x1e
c002462e:	73 ea                	jae    c002461a <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0024630:	83 ec 0c             	sub    esp,0xc
c0024633:	68 82 c5 02 c0       	push   0xc002c582
c0024638:	e8 1e 58 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c002463d:	83 c4 10             	add    esp,0x10
c0024640:	31 d2                	xor    edx,edx
c0024642:	eb 4b                	jmp    c002468f <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024644:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002464a:	0f ba e0 1e          	bt     eax,0x1e
c002464e:	73 17                	jae    c0024667 <SATA::access(unsigned long long, int, void*, bool)+0x27d>
c0024650:	83 ec 0c             	sub    esp,0xc
c0024653:	68 82 c5 02 c0       	push   0xc002c582
c0024658:	e8 fe 57 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c002465d:	83 c4 10             	add    esp,0x10
c0024660:	ba 01 00 00 00       	mov    edx,0x1
c0024665:	eb 28                	jmp    c002468f <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024667:	31 d2                	xor    edx,edx
c0024669:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002466e:	75 1f                	jne    c002468f <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024670:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0024674:	50                   	push   eax
c0024675:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024679:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c002467f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024683:	e8 18 c0 fd ff       	call   c00006a0 <memcpy>
c0024688:	83 c4 10             	add    esp,0x10
c002468b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002468f:	83 c4 2c             	add    esp,0x2c
c0024692:	89 d0                	mov    eax,edx
c0024694:	5b                   	pop    ebx
c0024695:	5e                   	pop    esi
c0024696:	5f                   	pop    edi
c0024697:	5d                   	pop    ebp
c0024698:	c3                   	ret    
c0024699:	90                   	nop

c002469a <SATA::read(unsigned long long, int, void*)>:
c002469a:	57                   	push   edi
c002469b:	b8 04 00 00 00       	mov    eax,0x4
c00246a0:	56                   	push   esi
c00246a1:	53                   	push   ebx
c00246a2:	83 ec 10             	sub    esp,0x10
c00246a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00246a9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00246ad:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00246b0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00246b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00246b8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00246be:	77 3b                	ja     c00246fb <SATA::read(unsigned long long, int, void*)+0x61>
c00246c0:	b8 06 00 00 00       	mov    eax,0x6
c00246c5:	85 d2                	test   edx,edx
c00246c7:	74 32                	je     c00246fb <SATA::read(unsigned long long, int, void*)+0x61>
c00246c9:	50                   	push   eax
c00246ca:	50                   	push   eax
c00246cb:	6a 00                	push   0x0
c00246cd:	52                   	push   edx
c00246ce:	53                   	push   ebx
c00246cf:	57                   	push   edi
c00246d0:	56                   	push   esi
c00246d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00246d5:	e8 10 fd ff ff       	call   c00243ea <SATA::access(unsigned long long, int, void*, bool)>
c00246da:	83 c4 20             	add    esp,0x20
c00246dd:	85 c0                	test   eax,eax
c00246df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00246e3:	75 11                	jne    c00246f6 <SATA::read(unsigned long long, int, void*)+0x5c>
c00246e5:	01 1d 28 1e 03 c0    	add    DWORD PTR ds:0xc0031e28,ebx
c00246eb:	e8 5c c0 fe ff       	call   c001074c <VgaText::updateDiskUsage()>
c00246f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246f4:	eb 05                	jmp    c00246fb <SATA::read(unsigned long long, int, void*)+0x61>
c00246f6:	b8 01 00 00 00       	mov    eax,0x1
c00246fb:	83 c4 10             	add    esp,0x10
c00246fe:	5b                   	pop    ebx
c00246ff:	5e                   	pop    esi
c0024700:	5f                   	pop    edi
c0024701:	c3                   	ret    

c0024702 <SATA::write(unsigned long long, int, void*)>:
c0024702:	57                   	push   edi
c0024703:	b8 04 00 00 00       	mov    eax,0x4
c0024708:	56                   	push   esi
c0024709:	53                   	push   ebx
c002470a:	83 ec 10             	sub    esp,0x10
c002470d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024711:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024715:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024718:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002471c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024720:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024726:	77 3b                	ja     c0024763 <SATA::write(unsigned long long, int, void*)+0x61>
c0024728:	b8 06 00 00 00       	mov    eax,0x6
c002472d:	85 d2                	test   edx,edx
c002472f:	74 32                	je     c0024763 <SATA::write(unsigned long long, int, void*)+0x61>
c0024731:	50                   	push   eax
c0024732:	50                   	push   eax
c0024733:	6a 01                	push   0x1
c0024735:	52                   	push   edx
c0024736:	53                   	push   ebx
c0024737:	57                   	push   edi
c0024738:	56                   	push   esi
c0024739:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002473d:	e8 a8 fc ff ff       	call   c00243ea <SATA::access(unsigned long long, int, void*, bool)>
c0024742:	83 c4 20             	add    esp,0x20
c0024745:	85 c0                	test   eax,eax
c0024747:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002474b:	75 11                	jne    c002475e <SATA::write(unsigned long long, int, void*)+0x5c>
c002474d:	01 1d 24 1e 03 c0    	add    DWORD PTR ds:0xc0031e24,ebx
c0024753:	e8 f4 bf fe ff       	call   c001074c <VgaText::updateDiskUsage()>
c0024758:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002475c:	eb 05                	jmp    c0024763 <SATA::write(unsigned long long, int, void*)+0x61>
c002475e:	b8 01 00 00 00       	mov    eax,0x1
c0024763:	83 c4 10             	add    esp,0x10
c0024766:	5b                   	pop    ebx
c0024767:	5e                   	pop    esi
c0024768:	5f                   	pop    edi
c0024769:	c3                   	ret    

c002476a <SATAPI::write(unsigned long long, int, void*)>:
c002476a:	b8 03 00 00 00       	mov    eax,0x3
c002476f:	c3                   	ret    

c0024770 <SATAPI::close(int, int, void*)>:
c0024770:	83 ec 0c             	sub    esp,0xc
c0024773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024777:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002477d:	85 c0                	test   eax,eax
c002477f:	74 0c                	je     c002478d <SATAPI::close(int, int, void*)+0x1d>
c0024781:	83 ec 0c             	sub    esp,0xc
c0024784:	8b 10                	mov    edx,DWORD PTR [eax]
c0024786:	50                   	push   eax
c0024787:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002478a:	83 c4 10             	add    esp,0x10
c002478d:	31 c0                	xor    eax,eax
c002478f:	83 c4 0c             	add    esp,0xc
c0024792:	c3                   	ret    
c0024793:	90                   	nop

c0024794 <SATAPI::SATAPI()>:
c0024794:	83 ec 0c             	sub    esp,0xc
c0024797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002479b:	83 ec 04             	sub    esp,0x4
c002479e:	68 00 08 00 00       	push   0x800
c00247a3:	68 cc c5 02 c0       	push   0xc002c5cc
c00247a8:	50                   	push   eax
c00247a9:	e8 84 f9 fe ff       	call   c0014132 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00247ae:	83 c4 10             	add    esp,0x10
c00247b1:	ba 78 c6 02 c0       	mov    edx,0xc002c678
c00247b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247ba:	89 10                	mov    DWORD PTR [eax],edx
c00247bc:	90                   	nop
c00247bd:	83 c4 0c             	add    esp,0xc
c00247c0:	c3                   	ret    
c00247c1:	90                   	nop

c00247c2 <SATAPI::diskRemoved()>:
c00247c2:	83 ec 18             	sub    esp,0x18
c00247c5:	68 d8 c5 02 c0       	push   0xc002c5d8
c00247ca:	e8 18 e1 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00247cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00247d3:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00247da:	83 c4 1c             	add    esp,0x1c
c00247dd:	c3                   	ret    

c00247de <SATAPI::diskInserted()>:
c00247de:	53                   	push   ebx
c00247df:	83 ec 14             	sub    esp,0x14
c00247e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00247e6:	68 ef c5 02 c0       	push   0xc002c5ef
c00247eb:	e8 f7 e0 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00247f0:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00247f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00247fa:	e8 9b f9 fe ff       	call   c001419a <PhysicalDisk::startCache()>
c00247ff:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024803:	83 c4 18             	add    esp,0x18
c0024806:	5b                   	pop    ebx
c0024807:	e9 b0 1a ff ff       	jmp    c00162bc <createPartitionsForDisk(PhysicalDisk*)>

c002480c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002480c:	55                   	push   ebp
c002480d:	57                   	push   edi
c002480e:	56                   	push   esi
c002480f:	53                   	push   ebx
c0024810:	83 ec 24             	sub    esp,0x24
c0024813:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024817:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002481b:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024821:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024825:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024829:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002482f:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024832:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024838:	c1 e3 07             	shl    ebx,0x7
c002483b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002483f:	89 f8                	mov    eax,edi
c0024841:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024845:	c1 e0 07             	shl    eax,0x7
c0024848:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002484c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024850:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002485a:	53                   	push   ebx
c002485b:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024861:	e8 22 eb ff ff       	call   c0023388 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024866:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002486a:	83 c4 10             	add    esp,0x10
c002486d:	b8 01 00 00 00       	mov    eax,0x1
c0024872:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024877:	0f 84 8a 01 00 00    	je     c0024a07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002487d:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024883:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024885:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002488b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024891:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024895:	c1 e1 05             	shl    ecx,0x5
c0024898:	01 c8                	add    eax,ecx
c002489a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002489c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00248a2:	81 c9 25 00 01 00    	or     ecx,0x10025
c00248a8:	89 08                	mov    DWORD PTR [eax],ecx
c00248aa:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00248b0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00248b6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00248bc:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00248bf:	52                   	push   edx
c00248c0:	68 90 00 00 00       	push   0x90
c00248c5:	6a 00                	push   0x0
c00248c7:	53                   	push   ebx
c00248c8:	e8 eb bd fd ff       	call   c00006b8 <memset>
c00248cd:	83 c4 0c             	add    esp,0xc
c00248d0:	8d 43 40             	lea    eax,[ebx+0x40]
c00248d3:	6a 0c                	push   0xc
c00248d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00248d9:	50                   	push   eax
c00248da:	e8 c1 bd fd ff       	call   c00006a0 <memcpy>
c00248df:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00248e5:	89 ea                	mov    edx,ebp
c00248e7:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00248ed:	c1 ea 18             	shr    edx,0x18
c00248f0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00248f4:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00248f7:	8d 48 ff             	lea    ecx,[eax-0x1]
c00248fa:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00248fe:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024904:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002490a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002490f:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0024913:	09 c8                	or     eax,ecx
c0024915:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024919:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002491f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024922:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024929:	66 25 00 7f          	and    ax,0x7f00
c002492d:	66 0d 27 80          	or     ax,0x8027
c0024931:	66 89 03             	mov    WORD PTR [ebx],ax
c0024934:	89 e8                	mov    eax,ebp
c0024936:	c1 e8 10             	shr    eax,0x10
c0024939:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002493c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024940:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024943:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024947:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002494a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002494e:	83 c4 10             	add    esp,0x10
c0024951:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024955:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024959:	31 c0                	xor    eax,eax
c002495b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0024961:	80 e1 88             	and    cl,0x88
c0024964:	74 0a                	je     c0024970 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0024966:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002496b:	74 0a                	je     c0024977 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002496d:	40                   	inc    eax
c002496e:	eb eb                	jmp    c002495b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0024970:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024975:	75 0f                	jne    c0024986 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0024977:	83 ec 0c             	sub    esp,0xc
c002497a:	68 74 c5 02 c0       	push   0xc002c574
c002497f:	e8 d7 54 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0024984:	eb 3a                	jmp    c00249c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0024986:	b8 01 00 00 00       	mov    eax,0x1
c002498b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002498f:	c1 e7 07             	shl    edi,0x7
c0024992:	d3 e0                	shl    eax,cl
c0024994:	03 3c 24             	add    edi,DWORD PTR [esp]
c0024997:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002499d:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00249a3:	85 d0                	test   eax,edx
c00249a5:	74 23                	je     c00249ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00249a7:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00249ad:	0f ba e2 1e          	bt     edx,0x1e
c00249b1:	73 ea                	jae    c002499d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00249b3:	83 ec 0c             	sub    esp,0xc
c00249b6:	68 07 c6 02 c0       	push   0xc002c607
c00249bb:	e8 27 df fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00249c0:	83 c4 10             	add    esp,0x10
c00249c3:	b8 01 00 00 00       	mov    eax,0x1
c00249c8:	eb 3d                	jmp    c0024a07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00249ca:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00249d0:	0f ba e0 1e          	bt     eax,0x1e
c00249d4:	73 0a                	jae    c00249e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00249d6:	83 ec 0c             	sub    esp,0xc
c00249d9:	68 1a c6 02 c0       	push   0xc002c61a
c00249de:	eb db                	jmp    c00249bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00249e0:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00249e5:	74 1e                	je     c0024a05 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00249e7:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00249ec:	74 17                	je     c0024a05 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00249ee:	50                   	push   eax
c00249ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00249f3:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00249f9:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00249fd:	e8 9e bc fd ff       	call   c00006a0 <memcpy>
c0024a02:	83 c4 10             	add    esp,0x10
c0024a05:	31 c0                	xor    eax,eax
c0024a07:	83 c4 1c             	add    esp,0x1c
c0024a0a:	5b                   	pop    ebx
c0024a0b:	5e                   	pop    esi
c0024a0c:	5f                   	pop    edi
c0024a0d:	5d                   	pop    ebp
c0024a0e:	c3                   	ret    
c0024a0f:	90                   	nop

c0024a10 <SATAPI::eject()>:
c0024a10:	57                   	push   edi
c0024a11:	b9 03 00 00 00       	mov    ecx,0x3
c0024a16:	53                   	push   ebx
c0024a17:	83 ec 14             	sub    esp,0x14
c0024a1a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a1e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a22:	fc                   	cld    
c0024a23:	31 c0                	xor    eax,eax
c0024a25:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a27:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a2c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a31:	50                   	push   eax
c0024a32:	6a 00                	push   0x0
c0024a34:	6a 00                	push   0x0
c0024a36:	6a 00                	push   0x0
c0024a38:	6a 00                	push   0x0
c0024a3a:	6a 02                	push   0x2
c0024a3c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a40:	50                   	push   eax
c0024a41:	53                   	push   ebx
c0024a42:	e8 c5 fd ff ff       	call   c002480c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024a47:	83 c4 14             	add    esp,0x14
c0024a4a:	53                   	push   ebx
c0024a4b:	e8 72 fd ff ff       	call   c00247c2 <SATAPI::diskRemoved()>
c0024a50:	83 c4 24             	add    esp,0x24
c0024a53:	31 c0                	xor    eax,eax
c0024a55:	5b                   	pop    ebx
c0024a56:	5f                   	pop    edi
c0024a57:	c3                   	ret    

c0024a58 <SATAPI::detectMedia()>:
c0024a58:	56                   	push   esi
c0024a59:	53                   	push   ebx
c0024a5a:	83 ec 28             	sub    esp,0x28
c0024a5d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a61:	6a 0c                	push   0xc
c0024a63:	6a 00                	push   0x0
c0024a65:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a69:	56                   	push   esi
c0024a6a:	e8 49 bc fd ff       	call   c00006b8 <memset>
c0024a6f:	83 c4 0c             	add    esp,0xc
c0024a72:	6a 00                	push   0x0
c0024a74:	6a 00                	push   0x0
c0024a76:	6a 00                	push   0x0
c0024a78:	6a 00                	push   0x0
c0024a7a:	6a 00                	push   0x0
c0024a7c:	56                   	push   esi
c0024a7d:	53                   	push   ebx
c0024a7e:	e8 89 fd ff ff       	call   c002480c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024a83:	83 c4 1c             	add    esp,0x1c
c0024a86:	6a 0c                	push   0xc
c0024a88:	6a 00                	push   0x0
c0024a8a:	56                   	push   esi
c0024a8b:	e8 28 bc fd ff       	call   c00006b8 <memset>
c0024a90:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a95:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a9a:	83 c4 0c             	add    esp,0xc
c0024a9d:	6a 01                	push   0x1
c0024a9f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024aa3:	50                   	push   eax
c0024aa4:	6a 00                	push   0x0
c0024aa6:	6a 00                	push   0x0
c0024aa8:	6a 12                	push   0x12
c0024aaa:	56                   	push   esi
c0024aab:	53                   	push   ebx
c0024aac:	e8 5b fd ff ff       	call   c002480c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024ab1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024ab5:	83 c4 20             	add    esp,0x20
c0024ab8:	83 e0 7f             	and    eax,0x7f
c0024abb:	3c 70                	cmp    al,0x70
c0024abd:	74 15                	je     c0024ad4 <SATAPI::detectMedia()+0x7c>
c0024abf:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ac6:	75 0c                	jne    c0024ad4 <SATAPI::detectMedia()+0x7c>
c0024ac8:	83 ec 0c             	sub    esp,0xc
c0024acb:	53                   	push   ebx
c0024acc:	e8 0d fd ff ff       	call   c00247de <SATAPI::diskInserted()>
c0024ad1:	83 c4 10             	add    esp,0x10
c0024ad4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024ad8:	83 e0 0f             	and    eax,0xf
c0024adb:	3c 02                	cmp    al,0x2
c0024add:	75 1b                	jne    c0024afa <SATAPI::detectMedia()+0xa2>
c0024adf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024ae4:	75 2d                	jne    c0024b13 <SATAPI::detectMedia()+0xbb>
c0024ae6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024aed:	74 24                	je     c0024b13 <SATAPI::detectMedia()+0xbb>
c0024aef:	83 ec 0c             	sub    esp,0xc
c0024af2:	53                   	push   ebx
c0024af3:	e8 ca fc ff ff       	call   c00247c2 <SATAPI::diskRemoved()>
c0024af8:	eb 16                	jmp    c0024b10 <SATAPI::detectMedia()+0xb8>
c0024afa:	84 c0                	test   al,al
c0024afc:	75 15                	jne    c0024b13 <SATAPI::detectMedia()+0xbb>
c0024afe:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024b05:	75 0c                	jne    c0024b13 <SATAPI::detectMedia()+0xbb>
c0024b07:	83 ec 0c             	sub    esp,0xc
c0024b0a:	53                   	push   ebx
c0024b0b:	e8 ce fc ff ff       	call   c00247de <SATAPI::diskInserted()>
c0024b10:	83 c4 10             	add    esp,0x10
c0024b13:	83 c4 24             	add    esp,0x24
c0024b16:	5b                   	pop    ebx
c0024b17:	5e                   	pop    esi
c0024b18:	c3                   	ret    
c0024b19:	90                   	nop

c0024b1a <SATAPI::open(int, int, void*)>:
c0024b1a:	56                   	push   esi
c0024b1b:	53                   	push   ebx
c0024b1c:	50                   	push   eax
c0024b1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b25:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b2f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b35:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b43:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b4d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024b53:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b5a:	e8 56 b1 fe ff       	call   c000fcb5 <Phys::allocatePage()>
c0024b5f:	89 c6                	mov    esi,eax
c0024b61:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b67:	81 c6 00 10 00 00    	add    esi,0x1000
c0024b6d:	e8 43 b1 fe ff       	call   c000fcb5 <Phys::allocatePage()>
c0024b72:	39 c6                	cmp    esi,eax
c0024b74:	74 10                	je     c0024b86 <SATAPI::open(int, int, void*)+0x6c>
c0024b76:	83 ec 0c             	sub    esp,0xc
c0024b79:	68 2f c6 02 c0       	push   0xc002c62f
c0024b7e:	e8 d8 52 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0024b83:	83 c4 10             	add    esp,0x10
c0024b86:	83 ec 0c             	sub    esp,0xc
c0024b89:	6a 02                	push   0x2
c0024b8b:	e8 67 cd fe ff       	call   c00118f7 <Virt::allocateKernelVirtualPages(int)>
c0024b90:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024b96:	e8 ec ce fe ff       	call   c0011a87 <Virt::getAKernelVAS()>
c0024b9b:	6a 03                	push   0x3
c0024b9d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024ba3:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024ba9:	50                   	push   eax
c0024baa:	e8 13 d4 fe ff       	call   c0011fc2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024baf:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024bb6:	83 c4 14             	add    esp,0x14
c0024bb9:	53                   	push   ebx
c0024bba:	e8 99 fe ff ff       	call   c0024a58 <SATAPI::detectMedia()>
c0024bbf:	83 c4 14             	add    esp,0x14
c0024bc2:	31 c0                	xor    eax,eax
c0024bc4:	5b                   	pop    ebx
c0024bc5:	5e                   	pop    esi
c0024bc6:	c3                   	ret    
c0024bc7:	90                   	nop

c0024bc8 <SATAPI::read(unsigned long long, int, void*)>:
c0024bc8:	55                   	push   ebp
c0024bc9:	57                   	push   edi
c0024bca:	56                   	push   esi
c0024bcb:	53                   	push   ebx
c0024bcc:	83 ec 1c             	sub    esp,0x1c
c0024bcf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024bd3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bd7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024bdb:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024be2:	74 19                	je     c0024bfd <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024be4:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024be9:	7e 2e                	jle    c0024c19 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024beb:	83 ec 0c             	sub    esp,0xc
c0024bee:	68 45 c6 02 c0       	push   0xc002c645
c0024bf3:	e8 63 52 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0024bf8:	83 c4 10             	add    esp,0x10
c0024bfb:	eb 1c                	jmp    c0024c19 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024bfd:	83 ec 0c             	sub    esp,0xc
c0024c00:	55                   	push   ebp
c0024c01:	e8 52 fe ff ff       	call   c0024a58 <SATAPI::detectMedia()>
c0024c06:	83 c4 10             	add    esp,0x10
c0024c09:	b8 02 00 00 00       	mov    eax,0x2
c0024c0e:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024c15:	75 cd                	jne    c0024be4 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c17:	eb 49                	jmp    c0024c62 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024c19:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c1d:	b9 03 00 00 00       	mov    ecx,0x3
c0024c22:	fc                   	cld    
c0024c23:	31 c0                	xor    eax,eax
c0024c25:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c27:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024c2c:	89 d8                	mov    eax,ebx
c0024c2e:	86 e0                	xchg   al,ah
c0024c30:	c1 c0 10             	rol    eax,0x10
c0024c33:	86 e0                	xchg   al,ah
c0024c35:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0024c39:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0024c3d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024c41:	50                   	push   eax
c0024c42:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024c46:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024c4a:	56                   	push   esi
c0024c4b:	53                   	push   ebx
c0024c4c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024c50:	c1 e0 0b             	shl    eax,0xb
c0024c53:	50                   	push   eax
c0024c54:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c58:	50                   	push   eax
c0024c59:	55                   	push   ebp
c0024c5a:	e8 ad fb ff ff       	call   c002480c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024c5f:	83 c4 20             	add    esp,0x20
c0024c62:	83 c4 1c             	add    esp,0x1c
c0024c65:	5b                   	pop    ebx
c0024c66:	5e                   	pop    esi
c0024c67:	5f                   	pop    edi
c0024c68:	5d                   	pop    ebp
c0024c69:	c3                   	ret    

c0024c6a <AVX::open(int, int, void*)>:
c0024c6a:	83 ec 0c             	sub    esp,0xc
c0024c6d:	e8 46 11 00 00       	call   c0025db8 <avxInit>
c0024c72:	b8 00 00 00 00       	mov    eax,0x0
c0024c77:	83 c4 0c             	add    esp,0xc
c0024c7a:	c3                   	ret    
c0024c7b:	90                   	nop

c0024c7c <AVX::close(int, int, void*)>:
c0024c7c:	83 ec 0c             	sub    esp,0xc
c0024c7f:	e8 35 11 00 00       	call   c0025db9 <avxClose>
c0024c84:	b8 00 00 00 00       	mov    eax,0x0
c0024c89:	83 c4 0c             	add    esp,0xc
c0024c8c:	c3                   	ret    
c0024c8d:	90                   	nop

c0024c8e <AVX::available()>:
c0024c8e:	83 ec 0c             	sub    esp,0xc
c0024c91:	e8 1a 11 00 00       	call   c0025db0 <avxDetect>
c0024c96:	85 c0                	test   eax,eax
c0024c98:	0f 95 c0             	setne  al
c0024c9b:	83 c4 0c             	add    esp,0xc
c0024c9e:	c3                   	ret    
c0024c9f:	90                   	nop

c0024ca0 <AVX::save(void*)>:
c0024ca0:	83 ec 0c             	sub    esp,0xc
c0024ca3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ca7:	83 ec 0c             	sub    esp,0xc
c0024caa:	50                   	push   eax
c0024cab:	e8 06 11 00 00       	call   c0025db6 <avxSave>
c0024cb0:	83 c4 10             	add    esp,0x10
c0024cb3:	90                   	nop
c0024cb4:	83 c4 0c             	add    esp,0xc
c0024cb7:	c3                   	ret    

c0024cb8 <AVX::load(void*)>:
c0024cb8:	83 ec 0c             	sub    esp,0xc
c0024cbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cbf:	83 ec 0c             	sub    esp,0xc
c0024cc2:	50                   	push   eax
c0024cc3:	e8 ef 10 00 00       	call   c0025db7 <avxLoad>
c0024cc8:	83 c4 10             	add    esp,0x10
c0024ccb:	90                   	nop
c0024ccc:	83 c4 0c             	add    esp,0xc
c0024ccf:	c3                   	ret    

c0024cd0 <AVX::AVX()>:
c0024cd0:	83 ec 0c             	sub    esp,0xc
c0024cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cd7:	83 ec 08             	sub    esp,0x8
c0024cda:	68 a8 c6 02 c0       	push   0xc002c6a8
c0024cdf:	50                   	push   eax
c0024ce0:	e8 2b f5 fe ff       	call   c0014210 <FPU::FPU(char const*)>
c0024ce5:	83 c4 10             	add    esp,0x10
c0024ce8:	ba b8 c6 02 c0       	mov    edx,0xc002c6b8
c0024ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cf1:	89 10                	mov    DWORD PTR [eax],edx
c0024cf3:	90                   	nop
c0024cf4:	83 c4 0c             	add    esp,0xc
c0024cf7:	c3                   	ret    

c0024cf8 <MMX::available()>:
c0024cf8:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0024cfd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024d03:	83 e0 20             	and    eax,0x20
c0024d06:	84 c0                	test   al,al
c0024d08:	0f 95 c0             	setne  al
c0024d0b:	c3                   	ret    

c0024d0c <MMX::open(int, int, void*)>:
c0024d0c:	83 ec 0c             	sub    esp,0xc
c0024d0f:	e8 28 11 00 00       	call   c0025e3c <x87Init>
c0024d14:	b8 00 00 00 00       	mov    eax,0x0
c0024d19:	83 c4 0c             	add    esp,0xc
c0024d1c:	c3                   	ret    
c0024d1d:	90                   	nop

c0024d1e <MMX::close(int, int, void*)>:
c0024d1e:	83 ec 0c             	sub    esp,0xc
c0024d21:	e8 30 11 00 00       	call   c0025e56 <x87Close>
c0024d26:	b8 00 00 00 00       	mov    eax,0x0
c0024d2b:	83 c4 0c             	add    esp,0xc
c0024d2e:	c3                   	ret    
c0024d2f:	90                   	nop

c0024d30 <MMX::save(void*)>:
c0024d30:	83 ec 0c             	sub    esp,0xc
c0024d33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d37:	83 ec 0c             	sub    esp,0xc
c0024d3a:	50                   	push   eax
c0024d3b:	e8 f1 10 00 00       	call   c0025e31 <x87Save>
c0024d40:	83 c4 10             	add    esp,0x10
c0024d43:	90                   	nop
c0024d44:	83 c4 0c             	add    esp,0xc
c0024d47:	c3                   	ret    

c0024d48 <MMX::load(void*)>:
c0024d48:	83 ec 0c             	sub    esp,0xc
c0024d4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d4f:	83 ec 0c             	sub    esp,0xc
c0024d52:	50                   	push   eax
c0024d53:	e8 df 10 00 00       	call   c0025e37 <x87Load>
c0024d58:	83 c4 10             	add    esp,0x10
c0024d5b:	90                   	nop
c0024d5c:	83 c4 0c             	add    esp,0xc
c0024d5f:	c3                   	ret    

c0024d60 <MMX::MMX()>:
c0024d60:	83 ec 0c             	sub    esp,0xc
c0024d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d67:	83 ec 08             	sub    esp,0x8
c0024d6a:	68 e8 c6 02 c0       	push   0xc002c6e8
c0024d6f:	50                   	push   eax
c0024d70:	e8 9b f4 fe ff       	call   c0014210 <FPU::FPU(char const*)>
c0024d75:	83 c4 10             	add    esp,0x10
c0024d78:	ba f8 c6 02 c0       	mov    edx,0xc002c6f8
c0024d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d81:	89 10                	mov    DWORD PTR [eax],edx
c0024d83:	90                   	nop
c0024d84:	83 c4 0c             	add    esp,0xc
c0024d87:	c3                   	ret    

c0024d88 <SSE::open(int, int, void*)>:
c0024d88:	83 ec 0c             	sub    esp,0xc
c0024d8b:	e8 64 10 00 00       	call   c0025df4 <sseInit>
c0024d90:	b8 00 00 00 00       	mov    eax,0x0
c0024d95:	83 c4 0c             	add    esp,0xc
c0024d98:	c3                   	ret    
c0024d99:	90                   	nop

c0024d9a <SSE::close(int, int, void*)>:
c0024d9a:	83 ec 0c             	sub    esp,0xc
c0024d9d:	e8 62 10 00 00       	call   c0025e04 <sseClose>
c0024da2:	b8 00 00 00 00       	mov    eax,0x0
c0024da7:	83 c4 0c             	add    esp,0xc
c0024daa:	c3                   	ret    
c0024dab:	90                   	nop

c0024dac <SSE::available()>:
c0024dac:	83 ec 1c             	sub    esp,0x1c
c0024daf:	e8 1c 10 00 00       	call   c0025dd0 <absolutelyNoChanceInHell>
c0024db4:	85 c0                	test   eax,eax
c0024db6:	0f 95 c0             	setne  al
c0024db9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024dbd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024dc1:	83 c4 1c             	add    esp,0x1c
c0024dc4:	c3                   	ret    
c0024dc5:	90                   	nop

c0024dc6 <SSE::save(void*)>:
c0024dc6:	83 ec 0c             	sub    esp,0xc
c0024dc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024dcd:	83 ec 0c             	sub    esp,0xc
c0024dd0:	50                   	push   eax
c0024dd1:	e8 12 10 00 00       	call   c0025de8 <sseSave>
c0024dd6:	83 c4 10             	add    esp,0x10
c0024dd9:	90                   	nop
c0024dda:	83 c4 0c             	add    esp,0xc
c0024ddd:	c3                   	ret    

c0024dde <SSE::load(void*)>:
c0024dde:	83 ec 0c             	sub    esp,0xc
c0024de1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024de5:	83 ec 0c             	sub    esp,0xc
c0024de8:	50                   	push   eax
c0024de9:	e8 00 10 00 00       	call   c0025dee <sseLoad>
c0024dee:	83 c4 10             	add    esp,0x10
c0024df1:	90                   	nop
c0024df2:	83 c4 0c             	add    esp,0xc
c0024df5:	c3                   	ret    

c0024df6 <SSE::SSE()>:
c0024df6:	83 ec 0c             	sub    esp,0xc
c0024df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dfd:	83 ec 08             	sub    esp,0x8
c0024e00:	68 28 c7 02 c0       	push   0xc002c728
c0024e05:	50                   	push   eax
c0024e06:	e8 05 f4 fe ff       	call   c0014210 <FPU::FPU(char const*)>
c0024e0b:	83 c4 10             	add    esp,0x10
c0024e0e:	ba 38 c7 02 c0       	mov    edx,0xc002c738
c0024e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e17:	89 10                	mov    DWORD PTR [eax],edx
c0024e19:	90                   	nop
c0024e1a:	83 c4 0c             	add    esp,0xc
c0024e1d:	c3                   	ret    

c0024e1e <x87::open(int, int, void*)>:
c0024e1e:	83 ec 0c             	sub    esp,0xc
c0024e21:	e8 16 10 00 00       	call   c0025e3c <x87Init>
c0024e26:	b8 00 00 00 00       	mov    eax,0x0
c0024e2b:	83 c4 0c             	add    esp,0xc
c0024e2e:	c3                   	ret    
c0024e2f:	90                   	nop

c0024e30 <x87::close(int, int, void*)>:
c0024e30:	83 ec 0c             	sub    esp,0xc
c0024e33:	e8 1e 10 00 00       	call   c0025e56 <x87Close>
c0024e38:	b8 00 00 00 00       	mov    eax,0x0
c0024e3d:	83 c4 0c             	add    esp,0xc
c0024e40:	c3                   	ret    
c0024e41:	90                   	nop

c0024e42 <x87::available()>:
c0024e42:	83 ec 0c             	sub    esp,0xc
c0024e45:	e8 cc 0f 00 00       	call   c0025e16 <x87Detect>
c0024e4a:	85 c0                	test   eax,eax
c0024e4c:	0f 95 c0             	setne  al
c0024e4f:	83 c4 0c             	add    esp,0xc
c0024e52:	c3                   	ret    
c0024e53:	90                   	nop

c0024e54 <x87::save(void*)>:
c0024e54:	83 ec 0c             	sub    esp,0xc
c0024e57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e5b:	83 ec 0c             	sub    esp,0xc
c0024e5e:	50                   	push   eax
c0024e5f:	e8 cd 0f 00 00       	call   c0025e31 <x87Save>
c0024e64:	83 c4 10             	add    esp,0x10
c0024e67:	90                   	nop
c0024e68:	83 c4 0c             	add    esp,0xc
c0024e6b:	c3                   	ret    

c0024e6c <x87::load(void*)>:
c0024e6c:	83 ec 0c             	sub    esp,0xc
c0024e6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e73:	83 ec 0c             	sub    esp,0xc
c0024e76:	50                   	push   eax
c0024e77:	e8 bb 0f 00 00       	call   c0025e37 <x87Load>
c0024e7c:	83 c4 10             	add    esp,0x10
c0024e7f:	90                   	nop
c0024e80:	83 c4 0c             	add    esp,0xc
c0024e83:	c3                   	ret    

c0024e84 <x87::x87()>:
c0024e84:	83 ec 0c             	sub    esp,0xc
c0024e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e8b:	83 ec 08             	sub    esp,0x8
c0024e8e:	68 68 c7 02 c0       	push   0xc002c768
c0024e93:	50                   	push   eax
c0024e94:	e8 77 f3 fe ff       	call   c0014210 <FPU::FPU(char const*)>
c0024e99:	83 c4 10             	add    esp,0x10
c0024e9c:	ba 78 c7 02 c0       	mov    edx,0xc002c778
c0024ea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ea5:	89 10                	mov    DWORD PTR [eax],edx
c0024ea7:	90                   	nop
c0024ea8:	83 c4 0c             	add    esp,0xc
c0024eab:	c3                   	ret    

c0024eac <APIC::disable()>:
c0024eac:	90                   	nop
c0024ead:	c3                   	ret    

c0024eae <APIC::close(int, int, void*)>:
c0024eae:	55                   	push   ebp
c0024eaf:	89 e5                	mov    ebp,esp
c0024eb1:	83 ec 08             	sub    esp,0x8
c0024eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024eb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0024eb9:	83 c0 3c             	add    eax,0x3c
c0024ebc:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ebe:	83 ec 0c             	sub    esp,0xc
c0024ec1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ec4:	ff d0                	call   eax
c0024ec6:	83 c4 10             	add    esp,0x10
c0024ec9:	b8 00 00 00 00       	mov    eax,0x0
c0024ece:	c9                   	leave  
c0024ecf:	c3                   	ret    

c0024ed0 <IOAPIC::close(int, int, void*)>:
c0024ed0:	b8 00 00 00 00       	mov    eax,0x0
c0024ed5:	c3                   	ret    

c0024ed6 <APIC::io_wait()>:
c0024ed6:	eb 00                	jmp    c0024ed8 <APIC::io_wait()+0x2>
c0024ed8:	eb 00                	jmp    c0024eda <APIC::io_wait()+0x4>
c0024eda:	90                   	nop
c0024edb:	c3                   	ret    

c0024edc <APIC::getBase()>:
c0024edc:	55                   	push   ebp
c0024edd:	89 e5                	mov    ebp,esp
c0024edf:	83 ec 18             	sub    esp,0x18
c0024ee2:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0024ee7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024eed:	83 e0 08             	and    eax,0x8
c0024ef0:	84 c0                	test   al,al
c0024ef2:	75 07                	jne    c0024efb <APIC::getBase()+0x1f>
c0024ef4:	b8 00 00 00 00       	mov    eax,0x0
c0024ef9:	eb 21                	jmp    c0024f1c <APIC::getBase()+0x40>
c0024efb:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0024f00:	83 ec 08             	sub    esp,0x8
c0024f03:	6a 1b                	push   0x1b
c0024f05:	50                   	push   eax
c0024f06:	e8 b5 9c fe ff       	call   c000ebc0 <Computer::rdmsr(unsigned int)>
c0024f0b:	83 c4 10             	add    esp,0x10
c0024f0e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024f11:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024f14:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024f17:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024f1c:	c9                   	leave  
c0024f1d:	c3                   	ret    

c0024f1e <APIC::eoi(unsigned char)>:
c0024f1e:	55                   	push   ebp
c0024f1f:	89 e5                	mov    ebp,esp
c0024f21:	83 ec 28             	sub    esp,0x28
c0024f24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024f27:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024f2a:	83 ec 0c             	sub    esp,0xc
c0024f2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f30:	e8 a7 ff ff ff       	call   c0024edc <APIC::getBase()>
c0024f35:	83 c4 10             	add    esp,0x10
c0024f38:	05 b0 00 00 00       	add    eax,0xb0
c0024f3d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024f40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024f43:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0024f49:	90                   	nop
c0024f4a:	c9                   	leave  
c0024f4b:	c3                   	ret    

c0024f4c <APIC::open(int, int, void*)>:
c0024f4c:	55                   	push   ebp
c0024f4d:	89 e5                	mov    ebp,esp
c0024f4f:	57                   	push   edi
c0024f50:	56                   	push   esi
c0024f51:	53                   	push   ebx
c0024f52:	83 ec 2c             	sub    esp,0x2c
c0024f55:	83 ec 0c             	sub    esp,0xc
c0024f58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f5b:	e8 7c ff ff ff       	call   c0024edc <APIC::getBase()>
c0024f60:	83 c4 10             	add    esp,0x10
c0024f63:	89 c2                	mov    edx,eax
c0024f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f68:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024f6e:	0f b6 f8             	movzx  edi,al
c0024f71:	89 d0                	mov    eax,edx
c0024f73:	ba 00 00 00 00       	mov    edx,0x0
c0024f78:	89 c1                	mov    ecx,eax
c0024f7a:	80 e5 ff             	and    ch,0xff
c0024f7d:	89 cb                	mov    ebx,ecx
c0024f7f:	0f b6 f2             	movzx  esi,dl
c0024f82:	89 d8                	mov    eax,ebx
c0024f84:	89 f2                	mov    edx,esi
c0024f86:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024f89:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024f8c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024f90:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024f94:	83 e0 00             	and    eax,0x0
c0024f97:	09 d0                	or     eax,edx
c0024f99:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fa0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024fa6:	8d 50 01             	lea    edx,[eax+0x1]
c0024fa9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024fac:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024fb2:	0f b6 d0             	movzx  edx,al
c0024fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fb8:	83 c2 08             	add    edx,0x8
c0024fbb:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024fbf:	0f b6 c9             	movzx  ecx,cl
c0024fc2:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024fc8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024fcc:	83 ec 0c             	sub    esp,0xc
c0024fcf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024fd2:	e8 05 ff ff ff       	call   c0024edc <APIC::getBase()>
c0024fd7:	83 c4 10             	add    esp,0x10
c0024fda:	05 f0 00 00 00       	add    eax,0xf0
c0024fdf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024fe2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024fe5:	8b 00                	mov    eax,DWORD PTR [eax]
c0024fe7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024fea:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024ff1:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024ff8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024ffb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024ffe:	89 10                	mov    DWORD PTR [eax],edx
c0025000:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025007:	a1 b0 03 03 c0       	mov    eax,ds:0xc00303b0
c002500c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002500f:	7d 7c                	jge    c002508d <APIC::open(int, int, void*)+0x141>
c0025011:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025014:	8b 04 85 c0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc40]
c002501b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002501e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025021:	8b 04 85 c0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc40]
c0025028:	c1 e8 08             	shr    eax,0x8
c002502b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002502f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025032:	8b 04 85 c0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc40]
c0025039:	c1 e8 18             	shr    eax,0x18
c002503c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002503f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025043:	75 40                	jne    c0025085 <APIC::open(int, int, void*)+0x139>
c0025045:	83 ec 0c             	sub    esp,0xc
c0025048:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002504b:	e8 8c fe ff ff       	call   c0024edc <APIC::getBase()>
c0025050:	83 c4 10             	add    esp,0x10
c0025053:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025057:	75 07                	jne    c0025060 <APIC::open(int, int, void*)+0x114>
c0025059:	ba 60 03 00 00       	mov    edx,0x360
c002505e:	eb 05                	jmp    c0025065 <APIC::open(int, int, void*)+0x119>
c0025060:	ba 50 03 00 00       	mov    edx,0x350
c0025065:	01 d0                	add    eax,edx
c0025067:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002506a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002506d:	8b 00                	mov    eax,DWORD PTR [eax]
c002506f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025072:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025079:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002507d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025080:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025083:	89 10                	mov    DWORD PTR [eax],edx
c0025085:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025088:	e9 7a ff ff ff       	jmp    c0025007 <APIC::open(int, int, void*)+0xbb>
c002508d:	b8 00 00 00 00       	mov    eax,0x0
c0025092:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025095:	5b                   	pop    ebx
c0025096:	5e                   	pop    esi
c0025097:	5f                   	pop    edi
c0025098:	5d                   	pop    ebp
c0025099:	c3                   	ret    

c002509a <IOAPIC::IOAPIC()>:
c002509a:	83 ec 0c             	sub    esp,0xc
c002509d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a1:	83 ec 08             	sub    esp,0x8
c00250a4:	68 a8 c7 02 c0       	push   0xc002c7a8
c00250a9:	50                   	push   eax
c00250aa:	e8 4f ee fe ff       	call   c0013efe <Device::Device(char const*)>
c00250af:	83 c4 10             	add    esp,0x10
c00250b2:	ba d0 c8 02 c0       	mov    edx,0xc002c8d0
c00250b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250bb:	89 10                	mov    DWORD PTR [eax],edx
c00250bd:	90                   	nop
c00250be:	83 c4 0c             	add    esp,0xc
c00250c1:	c3                   	ret    

c00250c2 <APIC::APIC()>:
c00250c2:	53                   	push   ebx
c00250c3:	83 ec 18             	sub    esp,0x18
c00250c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250ca:	83 ec 08             	sub    esp,0x8
c00250cd:	68 b0 c7 02 c0       	push   0xc002c7b0
c00250d2:	50                   	push   eax
c00250d3:	e8 92 f5 fe ff       	call   c001466a <InterruptController::InterruptController(char const*)>
c00250d8:	83 c4 10             	add    esp,0x10
c00250db:	ba 88 c8 02 c0       	mov    edx,0xc002c888
c00250e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250e4:	89 10                	mov    DWORD PTR [eax],edx
c00250e6:	a0 80 1e 03 c0       	mov    al,ds:0xc0031e80
c00250eb:	83 f0 01             	xor    eax,0x1
c00250ee:	84 c0                	test   al,al
c00250f0:	0f 84 a1 00 00 00    	je     c0025197 <APIC::APIC()+0xd5>
c00250f6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00250fb:	a0 60 04 03 c0       	mov    al,ds:0xc0030460
c0025100:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025104:	0f 83 86 00 00 00    	jae    c0025190 <APIC::APIC()+0xce>
c002510a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025112:	83 ec 0c             	sub    esp,0xc
c0025115:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025119:	e8 fa a4 fe ff       	call   c000f618 <malloc>
c002511e:	83 c4 10             	add    esp,0x10
c0025121:	89 c3                	mov    ebx,eax
c0025123:	83 ec 0c             	sub    esp,0xc
c0025126:	53                   	push   ebx
c0025127:	e8 6e ff ff ff       	call   c002509a <IOAPIC::IOAPIC()>
c002512c:	83 c4 10             	add    esp,0x10
c002512f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025133:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025138:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002513c:	89 14 85 60 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1a0],edx
c0025143:	a1 40 1e 03 c0       	mov    eax,ds:0xc0031e40
c0025148:	40                   	inc    eax
c0025149:	a3 40 1e 03 c0       	mov    ds:0xc0031e40,eax
c002514e:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0025153:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025159:	83 ec 08             	sub    esp,0x8
c002515c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025160:	50                   	push   eax
c0025161:	e8 a8 eb fe ff       	call   c0013d0e <Device::addChild(Device*)>
c0025166:	83 c4 10             	add    esp,0x10
c0025169:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002516d:	8b 00                	mov    eax,DWORD PTR [eax]
c002516f:	83 c0 08             	add    eax,0x8
c0025172:	8b 00                	mov    eax,DWORD PTR [eax]
c0025174:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025179:	6a 00                	push   0x0
c002517b:	6a 00                	push   0x0
c002517d:	52                   	push   edx
c002517e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025182:	ff d0                	call   eax
c0025184:	83 c4 10             	add    esp,0x10
c0025187:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002518b:	e9 6b ff ff ff       	jmp    c00250fb <APIC::APIC()+0x39>
c0025190:	c6 05 80 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e80,0x1
c0025197:	90                   	nop
c0025198:	83 c4 18             	add    esp,0x18
c002519b:	5b                   	pop    ebx
c002519c:	c3                   	ret    
c002519d:	90                   	nop

c002519e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002519e:	55                   	push   ebp
c002519f:	89 e5                	mov    ebp,esp
c00251a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00251aa:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00251ad:	72 1d                	jb     c00251cc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00251af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251b2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00251b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251bb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00251c1:	01 d0                	add    eax,edx
c00251c3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00251c6:	73 04                	jae    c00251cc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00251c8:	b0 01                	mov    al,0x1
c00251ca:	eb 02                	jmp    c00251ce <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00251cc:	b0 00                	mov    al,0x0
c00251ce:	5d                   	pop    ebp
c00251cf:	c3                   	ret    

c00251d0 <IOAPIC::read(int)>:
c00251d0:	55                   	push   ebp
c00251d1:	89 e5                	mov    ebp,esp
c00251d3:	83 ec 10             	sub    esp,0x10
c00251d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251d9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00251df:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00251e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00251e5:	0f b6 d0             	movzx  edx,al
c00251e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00251eb:	89 10                	mov    DWORD PTR [eax],edx
c00251ed:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00251f0:	83 c0 10             	add    eax,0x10
c00251f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00251f5:	c9                   	leave  
c00251f6:	c3                   	ret    
c00251f7:	90                   	nop

c00251f8 <IOAPIC::open(int, int, void*)>:
c00251f8:	55                   	push   ebp
c00251f9:	89 e5                	mov    ebp,esp
c00251fb:	57                   	push   edi
c00251fc:	56                   	push   esi
c00251fd:	53                   	push   ebx
c00251fe:	83 ec 0c             	sub    esp,0xc
c0025201:	83 ec 0c             	sub    esp,0xc
c0025204:	68 db c7 02 c0       	push   0xc002c7db
c0025209:	e8 d9 d6 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c002520e:	83 c4 10             	add    esp,0x10
c0025211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025214:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025217:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002521d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025220:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025226:	8b 14 85 a0 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb60]
c002522d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025230:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025239:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002523f:	8b 14 85 20 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfae0]
c0025246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025249:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002524f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025252:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002525b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025261:	0f b6 f8             	movzx  edi,al
c0025264:	89 d0                	mov    eax,edx
c0025266:	ba 00 00 00 00       	mov    edx,0x0
c002526b:	89 c1                	mov    ecx,eax
c002526d:	80 e5 ff             	and    ch,0xff
c0025270:	89 cb                	mov    ebx,ecx
c0025272:	0f b6 f2             	movzx  esi,dl
c0025275:	89 d8                	mov    eax,ebx
c0025277:	89 f2                	mov    edx,esi
c0025279:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002527c:	8d 5f 08             	lea    ebx,[edi+0x8]
c002527f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025283:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025287:	83 e0 00             	and    eax,0x0
c002528a:	09 d0                	or     eax,edx
c002528c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025293:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025299:	8d 50 01             	lea    edx,[eax+0x1]
c002529c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002529f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00252a5:	0f b6 d0             	movzx  edx,al
c00252a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252ab:	83 c2 08             	add    edx,0x8
c00252ae:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00252b2:	0f b6 c9             	movzx  ecx,cl
c00252b5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00252bb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00252bf:	83 ec 08             	sub    esp,0x8
c00252c2:	6a 01                	push   0x1
c00252c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00252c7:	e8 04 ff ff ff       	call   c00251d0 <IOAPIC::read(int)>
c00252cc:	83 c4 10             	add    esp,0x10
c00252cf:	c1 f8 10             	sar    eax,0x10
c00252d2:	0f b6 c0             	movzx  eax,al
c00252d5:	8d 50 01             	lea    edx,[eax+0x1]
c00252d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252db:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00252e1:	b8 00 00 00 00       	mov    eax,0x0
c00252e6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00252e9:	5b                   	pop    ebx
c00252ea:	5e                   	pop    esi
c00252eb:	5f                   	pop    edi
c00252ec:	5d                   	pop    ebp
c00252ed:	c3                   	ret    

c00252ee <IOAPIC::write(int, int)>:
c00252ee:	55                   	push   ebp
c00252ef:	89 e5                	mov    ebp,esp
c00252f1:	83 ec 10             	sub    esp,0x10
c00252f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252f7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00252fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025300:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025303:	0f b6 d0             	movzx  edx,al
c0025306:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025309:	89 10                	mov    DWORD PTR [eax],edx
c002530b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002530e:	8d 50 10             	lea    edx,[eax+0x10]
c0025311:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025314:	89 02                	mov    DWORD PTR [edx],eax
c0025316:	90                   	nop
c0025317:	c9                   	leave  
c0025318:	c3                   	ret    
c0025319:	90                   	nop

c002531a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002531a:	55                   	push   ebp
c002531b:	89 e5                	mov    ebp,esp
c002531d:	53                   	push   ebx
c002531e:	83 ec 2c             	sub    esp,0x2c
c0025321:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025324:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025327:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002532a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002532d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025330:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025333:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025336:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025339:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002533c:	88 d8                	mov    al,bl
c002533e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025341:	88 c8                	mov    al,cl
c0025343:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025346:	88 d0                	mov    al,dl
c0025348:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002534b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002534f:	83 c0 08             	add    eax,0x8
c0025352:	01 c0                	add    eax,eax
c0025354:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025357:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002535b:	83 c0 08             	add    eax,0x8
c002535e:	01 c0                	add    eax,eax
c0025360:	40                   	inc    eax
c0025361:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025364:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025367:	50                   	push   eax
c0025368:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002536b:	e8 60 fe ff ff       	call   c00251d0 <IOAPIC::read(int)>
c0025370:	83 c4 08             	add    esp,0x8
c0025373:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025376:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002537d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025380:	c1 e0 18             	shl    eax,0x18
c0025383:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025386:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025389:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002538c:	52                   	push   edx
c002538d:	50                   	push   eax
c002538e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025391:	e8 58 ff ff ff       	call   c00252ee <IOAPIC::write(int, int)>
c0025396:	83 c4 0c             	add    esp,0xc
c0025399:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002539c:	50                   	push   eax
c002539d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253a0:	e8 2b fe ff ff       	call   c00251d0 <IOAPIC::read(int)>
c00253a5:	83 c4 08             	add    esp,0x8
c00253a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00253ab:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00253b2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00253b9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00253c0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00253c4:	74 09                	je     c00253cf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00253c6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00253cd:	eb 07                	jmp    c00253d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00253cf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00253d6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00253da:	74 09                	je     c00253e5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00253dc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00253e3:	eb 07                	jmp    c00253ec <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00253e5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00253ec:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00253f3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00253f7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00253fa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00253fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025400:	52                   	push   edx
c0025401:	50                   	push   eax
c0025402:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025405:	e8 e4 fe ff ff       	call   c00252ee <IOAPIC::write(int, int)>
c002540a:	83 c4 0c             	add    esp,0xc
c002540d:	90                   	nop
c002540e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025411:	c9                   	leave  
c0025412:	c3                   	ret    
c0025413:	90                   	nop

c0025414 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025414:	55                   	push   ebp
c0025415:	89 e5                	mov    ebp,esp
c0025417:	57                   	push   edi
c0025418:	56                   	push   esi
c0025419:	53                   	push   ebx
c002541a:	83 ec 2c             	sub    esp,0x2c
c002541d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025420:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025423:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025427:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002542b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002542f:	74 5a                	je     c002548b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025431:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025435:	7f 44                	jg     c002547b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025437:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002543a:	05 20 cd 02 c0       	add    eax,0xc002cd20
c002543f:	8a 00                	mov    al,BYTE PTR [eax]
c0025441:	0f b6 c0             	movzx  eax,al
c0025444:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025447:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002544a:	66 8b 84 00 40 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfbc0]
c0025452:	0f b7 c0             	movzx  eax,ax
c0025455:	83 e0 02             	and    eax,0x2
c0025458:	85 c0                	test   eax,eax
c002545a:	74 04                	je     c0025460 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002545c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025460:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025463:	66 8b 84 00 40 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfbc0]
c002546b:	0f b7 c0             	movzx  eax,ax
c002546e:	83 e0 08             	and    eax,0x8
c0025471:	85 c0                	test   eax,eax
c0025473:	74 16                	je     c002548b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025475:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025479:	eb 10                	jmp    c002548b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002547b:	83 ec 0c             	sub    esp,0xc
c002547e:	68 ec c7 02 c0       	push   0xc002c7ec
c0025483:	e8 d3 49 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0025488:	83 c4 10             	add    esp,0x10
c002548b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002548f:	a1 40 1e 03 c0       	mov    eax,ds:0xc0031e40
c0025494:	83 ec 08             	sub    esp,0x8
c0025497:	50                   	push   eax
c0025498:	68 24 c8 02 c0       	push   0xc002c824
c002549d:	e8 45 d4 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00254a2:	83 c4 10             	add    esp,0x10
c00254a5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00254ac:	a1 40 1e 03 c0       	mov    eax,ds:0xc0031e40
c00254b1:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00254b4:	7d 67                	jge    c002551d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00254b6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254b9:	8b 04 85 60 1e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce1a0]
c00254c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00254c3:	83 ec 08             	sub    esp,0x8
c00254c6:	52                   	push   edx
c00254c7:	50                   	push   eax
c00254c8:	e8 d1 fc ff ff       	call   c002519e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00254cd:	83 c4 10             	add    esp,0x10
c00254d0:	84 c0                	test   al,al
c00254d2:	74 44                	je     c0025518 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00254d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254d7:	8b 1c 85 60 1e 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce1a0]
c00254de:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00254e2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00254e5:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00254e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254ec:	83 c0 20             	add    eax,0x20
c00254ef:	0f b6 f0             	movzx  esi,al
c00254f2:	b8 00 00 00 00       	mov    eax,0x0
c00254f7:	99                   	cdq    
c00254f8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00254fb:	0f b6 c9             	movzx  ecx,cl
c00254fe:	83 ec 04             	sub    esp,0x4
c0025501:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025504:	57                   	push   edi
c0025505:	56                   	push   esi
c0025506:	52                   	push   edx
c0025507:	50                   	push   eax
c0025508:	51                   	push   ecx
c0025509:	53                   	push   ebx
c002550a:	e8 0b fe ff ff       	call   c002531a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002550f:	83 c4 20             	add    esp,0x20
c0025512:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025516:	eb 05                	jmp    c002551d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025518:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002551b:	eb 8f                	jmp    c00254ac <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002551d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025520:	83 f0 01             	xor    eax,0x1
c0025523:	84 c0                	test   al,al
c0025525:	74 10                	je     c0025537 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025527:	83 ec 0c             	sub    esp,0xc
c002552a:	68 3b c8 02 c0       	push   0xc002c83b
c002552f:	e8 27 49 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0025534:	83 c4 10             	add    esp,0x10
c0025537:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002553b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025542:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025546:	7f 65                	jg     c00255ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002554b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002554e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025555:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025558:	01 ca                	add    edx,ecx
c002555a:	83 c2 54             	add    edx,0x54
c002555d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025561:	85 c0                	test   eax,eax
c0025563:	75 43                	jne    c00255a8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025568:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002556b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025572:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025575:	01 ca                	add    edx,ecx
c0025577:	8d 4a 54             	lea    ecx,[edx+0x54]
c002557a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002557d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025584:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025587:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002558e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025591:	01 ca                	add    edx,ecx
c0025593:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025599:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002559c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00255a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255a3:	83 e8 20             	sub    eax,0x20
c00255a6:	eb 1a                	jmp    c00255c2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00255a8:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00255ab:	eb 95                	jmp    c0025542 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00255ad:	83 ec 0c             	sub    esp,0xc
c00255b0:	68 48 c8 02 c0       	push   0xc002c848
c00255b5:	e8 a1 48 ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c00255ba:	83 c4 10             	add    esp,0x10
c00255bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00255c2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00255c5:	5b                   	pop    ebx
c00255c6:	5e                   	pop    esi
c00255c7:	5f                   	pop    edi
c00255c8:	5d                   	pop    ebp
c00255c9:	c3                   	ret    

c00255ca <PIC::disable()>:
c00255ca:	55                   	push   ebp
c00255cb:	89 e5                	mov    ebp,esp
c00255cd:	83 ec 10             	sub    esp,0x10
c00255d0:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00255d6:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00255da:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00255dd:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00255e1:	ee                   	out    dx,al
c00255e2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00255e8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00255ec:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00255ef:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00255f3:	ee                   	out    dx,al
c00255f4:	90                   	nop
c00255f5:	c9                   	leave  
c00255f6:	c3                   	ret    
c00255f7:	90                   	nop

c00255f8 <PIC::close(int, int, void*)>:
c00255f8:	55                   	push   ebp
c00255f9:	89 e5                	mov    ebp,esp
c00255fb:	83 ec 08             	sub    esp,0x8
c00255fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025601:	8b 00                	mov    eax,DWORD PTR [eax]
c0025603:	83 c0 3c             	add    eax,0x3c
c0025606:	8b 00                	mov    eax,DWORD PTR [eax]
c0025608:	83 ec 0c             	sub    esp,0xc
c002560b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002560e:	ff d0                	call   eax
c0025610:	83 c4 10             	add    esp,0x10
c0025613:	b8 00 00 00 00       	mov    eax,0x0
c0025618:	c9                   	leave  
c0025619:	c3                   	ret    

c002561a <PIC::PIC()>:
c002561a:	83 ec 0c             	sub    esp,0xc
c002561d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025621:	83 ec 08             	sub    esp,0x8
c0025624:	68 f4 c8 02 c0       	push   0xc002c8f4
c0025629:	50                   	push   eax
c002562a:	e8 3b f0 fe ff       	call   c001466a <InterruptController::InterruptController(char const*)>
c002562f:	83 c4 10             	add    esp,0x10
c0025632:	ba 20 c9 02 c0       	mov    edx,0xc002c920
c0025637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002563b:	89 10                	mov    DWORD PTR [eax],edx
c002563d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025641:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025647:	0f b6 d0             	movzx  edx,al
c002564a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002564e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025659:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002565f:	0f b6 d0             	movzx  edx,al
c0025662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025666:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002566b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002566f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025675:	8d 50 01             	lea    edx,[eax+0x1]
c0025678:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002567c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025682:	0f b6 d0             	movzx  edx,al
c0025685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025689:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002568d:	83 e1 3f             	and    ecx,0x3f
c0025690:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025698:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002569e:	0f b6 d0             	movzx  edx,al
c00256a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00256ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00256b6:	0f b6 d0             	movzx  edx,al
c00256b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256bd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00256c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00256cc:	8d 50 01             	lea    edx,[eax+0x1]
c00256cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00256d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00256d9:	0f b6 d0             	movzx  edx,al
c00256dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00256e4:	83 e1 3f             	and    ecx,0x3f
c00256e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00256eb:	90                   	nop
c00256ec:	83 c4 0c             	add    esp,0xc
c00256ef:	c3                   	ret    

c00256f0 <PIC::ioWait()>:
c00256f0:	eb 00                	jmp    c00256f2 <PIC::ioWait()+0x2>
c00256f2:	eb 00                	jmp    c00256f4 <PIC::ioWait()+0x4>
c00256f4:	90                   	nop
c00256f5:	c3                   	ret    

c00256f6 <PIC::getIRQReg(int)>:
c00256f6:	55                   	push   ebp
c00256f7:	89 e5                	mov    ebp,esp
c00256f9:	83 ec 10             	sub    esp,0x10
c00256fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256ff:	0f b6 c0             	movzx  eax,al
c0025702:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025708:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002570b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002570e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025712:	ee                   	out    dx,al
c0025713:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025716:	0f b6 c0             	movzx  eax,al
c0025719:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002571f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025722:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025725:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025729:	ee                   	out    dx,al
c002572a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025730:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025734:	89 c2                	mov    edx,eax
c0025736:	ec                   	in     al,dx
c0025737:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002573a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002573d:	0f b6 c0             	movzx  eax,al
c0025740:	c1 e0 08             	shl    eax,0x8
c0025743:	89 c1                	mov    ecx,eax
c0025745:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002574b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002574f:	89 c2                	mov    edx,eax
c0025751:	ec                   	in     al,dx
c0025752:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025755:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025758:	0f b6 c0             	movzx  eax,al
c002575b:	09 c8                	or     eax,ecx
c002575d:	c9                   	leave  
c002575e:	c3                   	ret    
c002575f:	90                   	nop

c0025760 <PIC::eoi(unsigned char)>:
c0025760:	55                   	push   ebp
c0025761:	89 e5                	mov    ebp,esp
c0025763:	83 ec 14             	sub    esp,0x14
c0025766:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025769:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002576c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025770:	75 1e                	jne    c0025790 <PIC::eoi(unsigned char)+0x30>
c0025772:	6a 0b                	push   0xb
c0025774:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025777:	e8 7a ff ff ff       	call   c00256f6 <PIC::getIRQReg(int)>
c002577c:	83 c4 08             	add    esp,0x8
c002577f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025783:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025787:	25 80 00 00 00       	and    eax,0x80
c002578c:	85 c0                	test   eax,eax
c002578e:	74 5f                	je     c00257ef <PIC::eoi(unsigned char)+0x8f>
c0025790:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025794:	75 2d                	jne    c00257c3 <PIC::eoi(unsigned char)+0x63>
c0025796:	6a 0b                	push   0xb
c0025798:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002579b:	e8 56 ff ff ff       	call   c00256f6 <PIC::getIRQReg(int)>
c00257a0:	83 c4 08             	add    esp,0x8
c00257a3:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00257a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257aa:	66 85 c0             	test   ax,ax
c00257ad:	78 14                	js     c00257c3 <PIC::eoi(unsigned char)+0x63>
c00257af:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00257b5:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00257b9:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00257bc:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00257c0:	ee                   	out    dx,al
c00257c1:	eb 2d                	jmp    c00257f0 <PIC::eoi(unsigned char)+0x90>
c00257c3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00257c7:	76 12                	jbe    c00257db <PIC::eoi(unsigned char)+0x7b>
c00257c9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00257cf:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00257d3:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00257d6:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00257da:	ee                   	out    dx,al
c00257db:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00257e1:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00257e5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00257e8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00257ec:	ee                   	out    dx,al
c00257ed:	eb 01                	jmp    c00257f0 <PIC::eoi(unsigned char)+0x90>
c00257ef:	90                   	nop
c00257f0:	c9                   	leave  
c00257f1:	c3                   	ret    

c00257f2 <PIC::remap()>:
c00257f2:	55                   	push   ebp
c00257f3:	89 e5                	mov    ebp,esp
c00257f5:	83 ec 48             	sub    esp,0x48
c00257f8:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00257ff:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025806:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002580c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002580f:	89 c2                	mov    edx,eax
c0025811:	ec                   	in     al,dx
c0025812:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025815:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025818:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002581b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025821:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025824:	89 c2                	mov    edx,eax
c0025826:	ec                   	in     al,dx
c0025827:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002582a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002582d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025830:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025836:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002583a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002583d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025840:	ee                   	out    dx,al
c0025841:	83 ec 0c             	sub    esp,0xc
c0025844:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025847:	e8 a4 fe ff ff       	call   c00256f0 <PIC::ioWait()>
c002584c:	83 c4 10             	add    esp,0x10
c002584f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025855:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025859:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002585c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002585f:	ee                   	out    dx,al
c0025860:	83 ec 0c             	sub    esp,0xc
c0025863:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025866:	e8 85 fe ff ff       	call   c00256f0 <PIC::ioWait()>
c002586b:	83 c4 10             	add    esp,0x10
c002586e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025871:	0f b6 c0             	movzx  eax,al
c0025874:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002587a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002587d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025880:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025883:	ee                   	out    dx,al
c0025884:	83 ec 0c             	sub    esp,0xc
c0025887:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002588a:	e8 61 fe ff ff       	call   c00256f0 <PIC::ioWait()>
c002588f:	83 c4 10             	add    esp,0x10
c0025892:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025895:	0f b6 c0             	movzx  eax,al
c0025898:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002589e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00258a1:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00258a4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00258a7:	ee                   	out    dx,al
c00258a8:	83 ec 0c             	sub    esp,0xc
c00258ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258ae:	e8 3d fe ff ff       	call   c00256f0 <PIC::ioWait()>
c00258b3:	83 c4 10             	add    esp,0x10
c00258b6:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00258bc:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00258c0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00258c3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00258c6:	ee                   	out    dx,al
c00258c7:	83 ec 0c             	sub    esp,0xc
c00258ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258cd:	e8 1e fe ff ff       	call   c00256f0 <PIC::ioWait()>
c00258d2:	83 c4 10             	add    esp,0x10
c00258d5:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00258db:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00258df:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00258e2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258e5:	ee                   	out    dx,al
c00258e6:	83 ec 0c             	sub    esp,0xc
c00258e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258ec:	e8 ff fd ff ff       	call   c00256f0 <PIC::ioWait()>
c00258f1:	83 c4 10             	add    esp,0x10
c00258f4:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00258fa:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00258fe:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025901:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025904:	ee                   	out    dx,al
c0025905:	83 ec 0c             	sub    esp,0xc
c0025908:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002590b:	e8 e0 fd ff ff       	call   c00256f0 <PIC::ioWait()>
c0025910:	83 c4 10             	add    esp,0x10
c0025913:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025919:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002591d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025920:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025923:	ee                   	out    dx,al
c0025924:	83 ec 0c             	sub    esp,0xc
c0025927:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002592a:	e8 c1 fd ff ff       	call   c00256f0 <PIC::ioWait()>
c002592f:	83 c4 10             	add    esp,0x10
c0025932:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025936:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002593c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002593f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025942:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025945:	ee                   	out    dx,al
c0025946:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002594a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025950:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025953:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025956:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025959:	ee                   	out    dx,al
c002595a:	90                   	nop
c002595b:	c9                   	leave  
c002595c:	c3                   	ret    
c002595d:	90                   	nop

c002595e <PIC::open(int, int, void*)>:
c002595e:	55                   	push   ebp
c002595f:	89 e5                	mov    ebp,esp
c0025961:	83 ec 18             	sub    esp,0x18
c0025964:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002596a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002596e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025971:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025975:	ee                   	out    dx,al
c0025976:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002597c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025980:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025983:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025987:	ee                   	out    dx,al
c0025988:	83 ec 0c             	sub    esp,0xc
c002598b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002598e:	e8 5f fe ff ff       	call   c00257f2 <PIC::remap()>
c0025993:	83 c4 10             	add    esp,0x10
c0025996:	b8 00 00 00 00       	mov    eax,0x0
c002599b:	c9                   	leave  
c002599c:	c3                   	ret    
c002599d:	90                   	nop

c002599e <APICTimer::close(int, int, void*)>:
c002599e:	b8 00 00 00 00       	mov    eax,0x0
c00259a3:	c3                   	ret    

c00259a4 <apicTimerHandler(regs*, void*)>:
c00259a4:	83 ec 0c             	sub    esp,0xc
c00259a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00259ad:	99                   	cdq    
c00259ae:	52                   	push   edx
c00259af:	50                   	push   eax
c00259b0:	6a 00                	push   0x0
c00259b2:	68 00 ca 9a 3b       	push   0x3b9aca00
c00259b7:	e8 90 07 00 00       	call   c002614c <__udivdi3>
c00259bc:	83 c4 10             	add    esp,0x10
c00259bf:	83 ec 08             	sub    esp,0x8
c00259c2:	52                   	push   edx
c00259c3:	50                   	push   eax
c00259c4:	e8 98 0c ff ff       	call   c0016661 <timerHandler(unsigned long long)>
c00259c9:	83 c4 10             	add    esp,0x10
c00259cc:	90                   	nop
c00259cd:	83 c4 0c             	add    esp,0xc
c00259d0:	c3                   	ret    
c00259d1:	90                   	nop

c00259d2 <APICTimer::write(int)>:
c00259d2:	53                   	push   ebx
c00259d3:	83 ec 28             	sub    esp,0x28
c00259d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00259da:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00259de:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00259e4:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00259e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259ef:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00259f5:	83 ec 0c             	sub    esp,0xc
c00259f8:	50                   	push   eax
c00259f9:	e8 de f4 ff ff       	call   c0024edc <APIC::getBase()>
c00259fe:	83 c4 10             	add    esp,0x10
c0025a01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025a05:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c0025a0a:	8b 15 54 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e154
c0025a10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025a14:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a1c:	05 e0 03 00 00       	add    eax,0x3e0
c0025a21:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025a27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a2b:	05 80 03 00 00       	add    eax,0x380
c0025a30:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025a36:	fb                   	sti    
c0025a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a3f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025a44:	83 d2 00             	adc    edx,0x0
c0025a47:	89 c1                	mov    ecx,eax
c0025a49:	89 d3                	mov    ebx,edx
c0025a4b:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c0025a50:	8b 15 54 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e154
c0025a56:	39 c8                	cmp    eax,ecx
c0025a58:	89 d0                	mov    eax,edx
c0025a5a:	19 d8                	sbb    eax,ebx
c0025a5c:	73 02                	jae    c0025a60 <APICTimer::write(int)+0x8e>
c0025a5e:	eb d7                	jmp    c0025a37 <APICTimer::write(int)+0x65>
c0025a60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a64:	05 20 03 00 00       	add    eax,0x320
c0025a69:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a73:	05 90 03 00 00       	add    eax,0x390
c0025a78:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a7a:	f7 d0                	not    eax
c0025a7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025a80:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025a84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a88:	ba 00 00 00 00       	mov    edx,0x0
c0025a8d:	f7 f3                	div    ebx
c0025a8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025a93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025a97:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a9d:	0d 00 00 02 00       	or     eax,0x20000
c0025aa2:	89 c2                	mov    edx,eax
c0025aa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025aa8:	05 20 03 00 00       	add    eax,0x320
c0025aad:	89 10                	mov    DWORD PTR [eax],edx
c0025aaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ab3:	05 e0 03 00 00       	add    eax,0x3e0
c0025ab8:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025abe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ac2:	05 80 03 00 00       	add    eax,0x380
c0025ac7:	89 c2                	mov    edx,eax
c0025ac9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025acd:	89 02                	mov    DWORD PTR [edx],eax
c0025acf:	90                   	nop
c0025ad0:	83 c4 28             	add    esp,0x28
c0025ad3:	5b                   	pop    ebx
c0025ad4:	c3                   	ret    
c0025ad5:	90                   	nop

c0025ad6 <APICTimer::open(int, int, void*)>:
c0025ad6:	57                   	push   edi
c0025ad7:	56                   	push   esi
c0025ad8:	53                   	push   ebx
c0025ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025add:	8b 00                	mov    eax,DWORD PTR [eax]
c0025adf:	83 c0 24             	add    eax,0x24
c0025ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ae4:	83 ec 08             	sub    esp,0x8
c0025ae7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aef:	ff d0                	call   eax
c0025af1:	83 c4 10             	add    esp,0x10
c0025af4:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0025af9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025aff:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025b05:	83 ec 0c             	sub    esp,0xc
c0025b08:	50                   	push   eax
c0025b09:	e8 ce f3 ff ff       	call   c0024edc <APIC::getBase()>
c0025b0e:	83 c4 10             	add    esp,0x10
c0025b11:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b1b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b21:	0f b6 f8             	movzx  edi,al
c0025b24:	89 d0                	mov    eax,edx
c0025b26:	ba 00 00 00 00       	mov    edx,0x0
c0025b2b:	89 c1                	mov    ecx,eax
c0025b2d:	80 e5 ff             	and    ch,0xff
c0025b30:	89 cb                	mov    ebx,ecx
c0025b32:	0f b6 f2             	movzx  esi,dl
c0025b35:	89 d8                	mov    eax,ebx
c0025b37:	89 f2                	mov    edx,esi
c0025b39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b3d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b40:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b44:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b48:	83 e0 00             	and    eax,0x0
c0025b4b:	09 d0                	or     eax,edx
c0025b4d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b55:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b5b:	8d 50 01             	lea    edx,[eax+0x1]
c0025b5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b62:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b68:	0f b6 d0             	movzx  edx,al
c0025b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6f:	83 c2 08             	add    edx,0x8
c0025b72:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b76:	0f b6 c9             	movzx  ecx,cl
c0025b79:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025b7f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025b8b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b95:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025b99:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025b9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025ba3:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025ba9:	83 ec 0c             	sub    esp,0xc
c0025bac:	51                   	push   ecx
c0025bad:	6a 01                	push   0x1
c0025baf:	68 a4 59 02 c0       	push   0xc00259a4
c0025bb4:	52                   	push   edx
c0025bb5:	50                   	push   eax
c0025bb6:	e8 d7 e0 fe ff       	call   c0013c92 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025bbb:	83 c4 20             	add    esp,0x20
c0025bbe:	89 c2                	mov    edx,eax
c0025bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bc4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025bca:	b8 00 00 00 00       	mov    eax,0x0
c0025bcf:	5b                   	pop    ebx
c0025bd0:	5e                   	pop    esi
c0025bd1:	5f                   	pop    edi
c0025bd2:	c3                   	ret    
c0025bd3:	90                   	nop

c0025bd4 <APICTimer::APICTimer()>:
c0025bd4:	83 ec 0c             	sub    esp,0xc
c0025bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bdb:	83 ec 08             	sub    esp,0x8
c0025bde:	68 60 c9 02 c0       	push   0xc002c960
c0025be3:	50                   	push   eax
c0025be4:	e8 e9 09 ff ff       	call   c00165d2 <Timer::Timer(char const*)>
c0025be9:	83 c4 10             	add    esp,0x10
c0025bec:	ba 74 c9 02 c0       	mov    edx,0xc002c974
c0025bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf5:	89 10                	mov    DWORD PTR [eax],edx
c0025bf7:	90                   	nop
c0025bf8:	83 c4 0c             	add    esp,0xc
c0025bfb:	c3                   	ret    

c0025bfc <PIT::write(int)>:
c0025bfc:	83 ec 10             	sub    esp,0x10
c0025bff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025c07:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025c11:	a3 84 1e 03 c0       	mov    ds:0xc0031e84,eax
c0025c16:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025c1b:	99                   	cdq    
c0025c1c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025c20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025c24:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025c2b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025c30:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025c34:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0025c39:	ee                   	out    dx,al
c0025c3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025c3e:	0f b6 c0             	movzx  eax,al
c0025c41:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0025c48:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025c4c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025c50:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025c55:	ee                   	out    dx,al
c0025c56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025c5a:	c1 f8 08             	sar    eax,0x8
c0025c5d:	0f b6 c0             	movzx  eax,al
c0025c60:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0025c67:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0025c6b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025c6f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0025c74:	ee                   	out    dx,al
c0025c75:	90                   	nop
c0025c76:	83 c4 10             	add    esp,0x10
c0025c79:	c3                   	ret    

c0025c7a <pitHandler(regs*, void*)>:
c0025c7a:	83 ec 0c             	sub    esp,0xc
c0025c7d:	a1 84 1e 03 c0       	mov    eax,ds:0xc0031e84
c0025c82:	99                   	cdq    
c0025c83:	52                   	push   edx
c0025c84:	50                   	push   eax
c0025c85:	6a 00                	push   0x0
c0025c87:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025c8c:	e8 bb 04 00 00       	call   c002614c <__udivdi3>
c0025c91:	83 c4 10             	add    esp,0x10
c0025c94:	83 ec 08             	sub    esp,0x8
c0025c97:	52                   	push   edx
c0025c98:	50                   	push   eax
c0025c99:	e8 c3 09 ff ff       	call   c0016661 <timerHandler(unsigned long long)>
c0025c9e:	83 c4 10             	add    esp,0x10
c0025ca1:	90                   	nop
c0025ca2:	83 c4 0c             	add    esp,0xc
c0025ca5:	c3                   	ret    

c0025ca6 <PIT::open(int, int, void*)>:
c0025ca6:	83 ec 0c             	sub    esp,0xc
c0025ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0025caf:	83 c0 24             	add    eax,0x24
c0025cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cb4:	83 ec 08             	sub    esp,0x8
c0025cb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cbf:	ff d0                	call   eax
c0025cc1:	83 c4 10             	add    esp,0x10
c0025cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cc8:	83 ec 0c             	sub    esp,0xc
c0025ccb:	6a 00                	push   0x0
c0025ccd:	6a 01                	push   0x1
c0025ccf:	68 7a 5c 02 c0       	push   0xc0025c7a
c0025cd4:	6a 00                	push   0x0
c0025cd6:	50                   	push   eax
c0025cd7:	e8 b6 df fe ff       	call   c0013c92 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025cdc:	83 c4 20             	add    esp,0x20
c0025cdf:	89 c2                	mov    edx,eax
c0025ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ce5:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025ceb:	b8 00 00 00 00       	mov    eax,0x0
c0025cf0:	83 c4 0c             	add    esp,0xc
c0025cf3:	c3                   	ret    

c0025cf4 <PIT::close(int, int, void*)>:
c0025cf4:	83 ec 0c             	sub    esp,0xc
c0025cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cfb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d09:	6a 01                	push   0x1
c0025d0b:	68 7a 5c 02 c0       	push   0xc0025c7a
c0025d10:	6a 00                	push   0x0
c0025d12:	50                   	push   eax
c0025d13:	e8 b8 df fe ff       	call   c0013cd0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025d18:	83 c4 10             	add    esp,0x10
c0025d1b:	b8 00 00 00 00       	mov    eax,0x0
c0025d20:	83 c4 0c             	add    esp,0xc
c0025d23:	c3                   	ret    

c0025d24 <PIT::PIT()>:
c0025d24:	83 ec 0c             	sub    esp,0xc
c0025d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d2b:	83 ec 08             	sub    esp,0x8
c0025d2e:	68 9c c9 02 c0       	push   0xc002c99c
c0025d33:	50                   	push   eax
c0025d34:	e8 99 08 ff ff       	call   c00165d2 <Timer::Timer(char const*)>
c0025d39:	83 c4 10             	add    esp,0x10
c0025d3c:	ba c4 c9 02 c0       	mov    edx,0xc002c9c4
c0025d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d45:	89 10                	mov    DWORD PTR [eax],edx
c0025d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d51:	0f b6 d0             	movzx  edx,al
c0025d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d58:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d69:	0f b6 d0             	movzx  edx,al
c0025d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d70:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d79:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d7f:	8d 50 01             	lea    edx,[eax+0x1]
c0025d82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d86:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025d8c:	0f b6 d0             	movzx  edx,al
c0025d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d93:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025d97:	83 e1 3f             	and    ecx,0x3f
c0025d9a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025d9e:	90                   	nop
c0025d9f:	83 c4 0c             	add    esp,0xc
c0025da2:	c3                   	ret    
c0025da3:	66 90                	xchg   ax,ax
c0025da5:	66 90                	xchg   ax,ax
c0025da7:	66 90                	xchg   ax,ax
c0025da9:	66 90                	xchg   ax,ax
c0025dab:	66 90                	xchg   ax,ax
c0025dad:	66 90                	xchg   ax,ax
c0025daf:	90                   	nop

c0025db0 <avxDetect>:
c0025db0:	b8 00 00 00 00       	mov    eax,0x0
c0025db5:	c3                   	ret    

c0025db6 <avxSave>:
c0025db6:	c3                   	ret    

c0025db7 <avxLoad>:
c0025db7:	c3                   	ret    

c0025db8 <avxInit>:
c0025db8:	c3                   	ret    

c0025db9 <avxClose>:
c0025db9:	c3                   	ret    

c0025dba <wouldSheSayYes>:
c0025dba:	c3                   	ret    
c0025dbb:	49                   	dec    ecx
c0025dbc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025dc0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025dc4:	75 20                	jne    c0025de6 <sseDetect.noSSE+0x1>
c0025dc6:	4e                   	dec    esi
c0025dc7:	79 61                	jns    c0025e2a <x87Detect+0x14>
c0025dc9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0025dce:	66 90                	xchg   ax,ax

c0025dd0 <absolutelyNoChanceInHell>:
c0025dd0:	b8 01 00 00 00       	mov    eax,0x1
c0025dd5:	0f a2                	cpuid  
c0025dd7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0025ddd:	74 06                	je     c0025de5 <sseDetect.noSSE>
c0025ddf:	b8 01 00 00 00       	mov    eax,0x1
c0025de4:	c3                   	ret    

c0025de5 <sseDetect.noSSE>:
c0025de5:	31 c0                	xor    eax,eax
c0025de7:	c3                   	ret    

c0025de8 <sseSave>:
c0025de8:	0f ae 44 24 08       	fxsave [esp+0x8]
c0025ded:	c3                   	ret    

c0025dee <sseLoad>:
c0025dee:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025df3:	c3                   	ret    

c0025df4 <sseInit>:
c0025df4:	e8 43 00 00 00       	call   c0025e3c <x87Init>
c0025df9:	0f 20 e0             	mov    eax,cr4
c0025dfc:	66 0d 00 06          	or     ax,0x600
c0025e00:	0f 22 e0             	mov    cr4,eax
c0025e03:	c3                   	ret    

c0025e04 <sseClose>:
c0025e04:	c3                   	ret    
c0025e05:	66 90                	xchg   ax,ax
c0025e07:	66 90                	xchg   ax,ax
c0025e09:	66 90                	xchg   ax,ax
c0025e0b:	66 90                	xchg   ax,ax
c0025e0d:	66 90                	xchg   ax,ax
c0025e0f:	90                   	nop

c0025e10 <value_37F>:
c0025e10:	7f 03                	jg     c0025e15 <value_37A+0x1>

c0025e12 <value_37E>:
c0025e12:	7e 03                	jle    c0025e17 <x87Detect+0x1>

c0025e14 <value_37A>:
c0025e14:	7a 03                	jp     c0025e19 <x87Detect+0x3>

c0025e16 <x87Detect>:
c0025e16:	b8 01 00 00 00       	mov    eax,0x1
c0025e1b:	0f a2                	cpuid  
c0025e1d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025e23:	74 06                	je     c0025e2b <x87Detect.nox87>
c0025e25:	b8 01 00 00 00       	mov    eax,0x1
c0025e2a:	c3                   	ret    

c0025e2b <x87Detect.nox87>:
c0025e2b:	b8 00 00 00 00       	mov    eax,0x0
c0025e30:	c3                   	ret    

c0025e31 <x87Save>:
c0025e31:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025e36:	c3                   	ret    

c0025e37 <x87Load>:
c0025e37:	dd 64 24 08          	frstor [esp+0x8]
c0025e3b:	c3                   	ret    

c0025e3c <x87Init>:
c0025e3c:	9b db e3             	finit  
c0025e3f:	0f 20 c0             	mov    eax,cr0
c0025e42:	66 25 fb ff          	and    ax,0xfffb
c0025e46:	66 0d 22 00          	or     ax,0x22
c0025e4a:	0f 22 c0             	mov    cr0,eax
c0025e4d:	0f 06                	clts   
c0025e4f:	d9 2d 14 5e 02 c0    	fldcw  WORD PTR ds:0xc0025e14
c0025e55:	c3                   	ret    

c0025e56 <x87Close>:
c0025e56:	c3                   	ret    
c0025e57:	90                   	nop

c0025e58 <__do_global_ctors_aux>:
c0025e58:	a1 9c 89 02 c0       	mov    eax,ds:0xc002899c
c0025e5d:	83 f8 ff             	cmp    eax,0xffffffff
c0025e60:	74 1a                	je     c0025e7c <__do_global_ctors_aux+0x24>
c0025e62:	55                   	push   ebp
c0025e63:	89 e5                	mov    ebp,esp
c0025e65:	53                   	push   ebx
c0025e66:	52                   	push   edx
c0025e67:	bb 9c 89 02 c0       	mov    ebx,0xc002899c
c0025e6c:	ff d0                	call   eax
c0025e6e:	83 eb 04             	sub    ebx,0x4
c0025e71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025e73:	83 f8 ff             	cmp    eax,0xffffffff
c0025e76:	75 f4                	jne    c0025e6c <__do_global_ctors_aux+0x14>
c0025e78:	58                   	pop    eax
c0025e79:	5b                   	pop    ebx
c0025e7a:	5d                   	pop    ebp
c0025e7b:	c3                   	ret    
c0025e7c:	c3                   	ret    
c0025e7d:	66 90                	xchg   ax,ax
c0025e7f:	90                   	nop

c0025e80 <__divdi3>:
c0025e80:	55                   	push   ebp
c0025e81:	57                   	push   edi
c0025e82:	56                   	push   esi
c0025e83:	53                   	push   ebx
c0025e84:	83 ec 1c             	sub    esp,0x1c
c0025e87:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0025e8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025e8f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025e92:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025e96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0025e9a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025e9e:	85 db                	test   ebx,ebx
c0025ea0:	0f 88 8e 00 00 00    	js     c0025f34 <__divdi3+0xb4>
c0025ea6:	89 dd                	mov    ebp,ebx
c0025ea8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025eb0:	89 d3                	mov    ebx,edx
c0025eb2:	85 d2                	test   edx,edx
c0025eb4:	79 0d                	jns    c0025ec3 <__divdi3+0x43>
c0025eb6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0025eba:	f7 d8                	neg    eax
c0025ebc:	83 d2 00             	adc    edx,0x0
c0025ebf:	f7 da                	neg    edx
c0025ec1:	89 d3                	mov    ebx,edx
c0025ec3:	89 c7                	mov    edi,eax
c0025ec5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025ec8:	85 db                	test   ebx,ebx
c0025eca:	75 48                	jne    c0025f14 <__divdi3+0x94>
c0025ecc:	39 ef                	cmp    edi,ebp
c0025ece:	76 24                	jbe    c0025ef4 <__divdi3+0x74>
c0025ed0:	89 ea                	mov    edx,ebp
c0025ed2:	f7 f7                	div    edi
c0025ed4:	89 c1                	mov    ecx,eax
c0025ed6:	31 f6                	xor    esi,esi
c0025ed8:	89 c8                	mov    eax,ecx
c0025eda:	89 f2                	mov    edx,esi
c0025edc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025ee0:	85 c9                	test   ecx,ecx
c0025ee2:	74 07                	je     c0025eeb <__divdi3+0x6b>
c0025ee4:	f7 d8                	neg    eax
c0025ee6:	83 d2 00             	adc    edx,0x0
c0025ee9:	f7 da                	neg    edx
c0025eeb:	83 c4 1c             	add    esp,0x1c
c0025eee:	5b                   	pop    ebx
c0025eef:	5e                   	pop    esi
c0025ef0:	5f                   	pop    edi
c0025ef1:	5d                   	pop    ebp
c0025ef2:	c3                   	ret    
c0025ef3:	90                   	nop
c0025ef4:	85 ff                	test   edi,edi
c0025ef6:	75 0b                	jne    c0025f03 <__divdi3+0x83>
c0025ef8:	b8 01 00 00 00       	mov    eax,0x1
c0025efd:	31 d2                	xor    edx,edx
c0025eff:	f7 f3                	div    ebx
c0025f01:	89 c7                	mov    edi,eax
c0025f03:	31 d2                	xor    edx,edx
c0025f05:	89 e8                	mov    eax,ebp
c0025f07:	f7 f7                	div    edi
c0025f09:	89 c6                	mov    esi,eax
c0025f0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025f0e:	f7 f7                	div    edi
c0025f10:	89 c1                	mov    ecx,eax
c0025f12:	eb c4                	jmp    c0025ed8 <__divdi3+0x58>
c0025f14:	39 eb                	cmp    ebx,ebp
c0025f16:	77 3c                	ja     c0025f54 <__divdi3+0xd4>
c0025f18:	0f bd f3             	bsr    esi,ebx
c0025f1b:	83 f6 1f             	xor    esi,0x1f
c0025f1e:	75 40                	jne    c0025f60 <__divdi3+0xe0>
c0025f20:	39 eb                	cmp    ebx,ebp
c0025f22:	72 09                	jb     c0025f2d <__divdi3+0xad>
c0025f24:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025f27:	0f 87 97 00 00 00    	ja     c0025fc4 <__divdi3+0x144>
c0025f2d:	b9 01 00 00 00       	mov    ecx,0x1
c0025f32:	eb a4                	jmp    c0025ed8 <__divdi3+0x58>
c0025f34:	f7 d9                	neg    ecx
c0025f36:	83 d3 00             	adc    ebx,0x0
c0025f39:	f7 db                	neg    ebx
c0025f3b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025f3e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025f42:	89 dd                	mov    ebp,ebx
c0025f44:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0025f4c:	e9 5f ff ff ff       	jmp    c0025eb0 <__divdi3+0x30>
c0025f51:	8d 76 00             	lea    esi,[esi+0x0]
c0025f54:	31 f6                	xor    esi,esi
c0025f56:	31 c9                	xor    ecx,ecx
c0025f58:	e9 7b ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0025f60:	b8 20 00 00 00       	mov    eax,0x20
c0025f65:	29 f0                	sub    eax,esi
c0025f67:	89 f1                	mov    ecx,esi
c0025f69:	d3 e3                	shl    ebx,cl
c0025f6b:	89 fa                	mov    edx,edi
c0025f6d:	88 c1                	mov    cl,al
c0025f6f:	d3 ea                	shr    edx,cl
c0025f71:	09 da                	or     edx,ebx
c0025f73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025f77:	89 f1                	mov    ecx,esi
c0025f79:	d3 e7                	shl    edi,cl
c0025f7b:	89 eb                	mov    ebx,ebp
c0025f7d:	88 c1                	mov    cl,al
c0025f7f:	d3 eb                	shr    ebx,cl
c0025f81:	89 f1                	mov    ecx,esi
c0025f83:	d3 e5                	shl    ebp,cl
c0025f85:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025f88:	88 c1                	mov    cl,al
c0025f8a:	d3 ea                	shr    edx,cl
c0025f8c:	09 d5                	or     ebp,edx
c0025f8e:	89 e8                	mov    eax,ebp
c0025f90:	89 da                	mov    edx,ebx
c0025f92:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025f96:	89 d3                	mov    ebx,edx
c0025f98:	89 c5                	mov    ebp,eax
c0025f9a:	f7 e7                	mul    edi
c0025f9c:	39 d3                	cmp    ebx,edx
c0025f9e:	72 18                	jb     c0025fb8 <__divdi3+0x138>
c0025fa0:	74 0a                	je     c0025fac <__divdi3+0x12c>
c0025fa2:	89 e9                	mov    ecx,ebp
c0025fa4:	31 f6                	xor    esi,esi
c0025fa6:	e9 2d ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025fab:	90                   	nop
c0025fac:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0025faf:	89 f1                	mov    ecx,esi
c0025fb1:	d3 e7                	shl    edi,cl
c0025fb3:	39 c7                	cmp    edi,eax
c0025fb5:	73 eb                	jae    c0025fa2 <__divdi3+0x122>
c0025fb7:	90                   	nop
c0025fb8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0025fbb:	31 f6                	xor    esi,esi
c0025fbd:	e9 16 ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025fc2:	66 90                	xchg   ax,ax
c0025fc4:	31 c9                	xor    ecx,ecx
c0025fc6:	e9 0d ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025fcb:	90                   	nop

c0025fcc <__moddi3>:
c0025fcc:	55                   	push   ebp
c0025fcd:	57                   	push   edi
c0025fce:	56                   	push   esi
c0025fcf:	53                   	push   ebx
c0025fd0:	83 ec 2c             	sub    esp,0x2c
c0025fd3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025fd7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0025fdb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025fdf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025fe3:	85 db                	test   ebx,ebx
c0025fe5:	0f 88 85 00 00 00    	js     c0026070 <__moddi3+0xa4>
c0025feb:	89 de                	mov    esi,ebx
c0025fed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025ff5:	89 d7                	mov    edi,edx
c0025ff7:	85 d2                	test   edx,edx
c0025ff9:	79 09                	jns    c0026004 <__moddi3+0x38>
c0025ffb:	f7 d8                	neg    eax
c0025ffd:	83 d2 00             	adc    edx,0x0
c0026000:	f7 da                	neg    edx
c0026002:	89 d7                	mov    edi,edx
c0026004:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026008:	89 cd                	mov    ebp,ecx
c002600a:	85 ff                	test   edi,edi
c002600c:	75 52                	jne    c0026060 <__moddi3+0x94>
c002600e:	89 c3                	mov    ebx,eax
c0026010:	39 f0                	cmp    eax,esi
c0026012:	76 24                	jbe    c0026038 <__moddi3+0x6c>
c0026014:	89 c8                	mov    eax,ecx
c0026016:	89 f2                	mov    edx,esi
c0026018:	f7 f3                	div    ebx
c002601a:	89 d6                	mov    esi,edx
c002601c:	89 f0                	mov    eax,esi
c002601e:	31 d2                	xor    edx,edx
c0026020:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026024:	85 c9                	test   ecx,ecx
c0026026:	74 07                	je     c002602f <__moddi3+0x63>
c0026028:	f7 d8                	neg    eax
c002602a:	83 d2 00             	adc    edx,0x0
c002602d:	f7 da                	neg    edx
c002602f:	83 c4 2c             	add    esp,0x2c
c0026032:	5b                   	pop    ebx
c0026033:	5e                   	pop    esi
c0026034:	5f                   	pop    edi
c0026035:	5d                   	pop    ebp
c0026036:	c3                   	ret    
c0026037:	90                   	nop
c0026038:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002603c:	85 db                	test   ebx,ebx
c002603e:	75 0d                	jne    c002604d <__moddi3+0x81>
c0026040:	b8 01 00 00 00       	mov    eax,0x1
c0026045:	31 d2                	xor    edx,edx
c0026047:	f7 f7                	div    edi
c0026049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002604d:	89 f0                	mov    eax,esi
c002604f:	31 d2                	xor    edx,edx
c0026051:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026055:	f7 f7                	div    edi
c0026057:	89 e8                	mov    eax,ebp
c0026059:	f7 f7                	div    edi
c002605b:	89 d6                	mov    esi,edx
c002605d:	eb bd                	jmp    c002601c <__moddi3+0x50>
c002605f:	90                   	nop
c0026060:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026064:	39 f7                	cmp    edi,esi
c0026066:	76 20                	jbe    c0026088 <__moddi3+0xbc>
c0026068:	89 c8                	mov    eax,ecx
c002606a:	89 f2                	mov    edx,esi
c002606c:	eb b2                	jmp    c0026020 <__moddi3+0x54>
c002606e:	66 90                	xchg   ax,ax
c0026070:	f7 d9                	neg    ecx
c0026072:	83 d3 00             	adc    ebx,0x0
c0026075:	f7 db                	neg    ebx
c0026077:	89 de                	mov    esi,ebx
c0026079:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026081:	e9 6f ff ff ff       	jmp    c0025ff5 <__moddi3+0x29>
c0026086:	66 90                	xchg   ax,ax
c0026088:	0f bd c7             	bsr    eax,edi
c002608b:	83 f0 1f             	xor    eax,0x1f
c002608e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026092:	75 24                	jne    c00260b8 <__moddi3+0xec>
c0026094:	39 f7                	cmp    edi,esi
c0026096:	72 06                	jb     c002609e <__moddi3+0xd2>
c0026098:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002609c:	77 0c                	ja     c00260aa <__moddi3+0xde>
c002609e:	89 e9                	mov    ecx,ebp
c00260a0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00260a4:	19 fe                	sbb    esi,edi
c00260a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00260aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260ae:	89 f2                	mov    edx,esi
c00260b0:	e9 6b ff ff ff       	jmp    c0026020 <__moddi3+0x54>
c00260b5:	8d 76 00             	lea    esi,[esi+0x0]
c00260b8:	b8 20 00 00 00       	mov    eax,0x20
c00260bd:	89 c2                	mov    edx,eax
c00260bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00260c3:	29 da                	sub    edx,ebx
c00260c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00260c9:	88 d9                	mov    cl,bl
c00260cb:	d3 e7                	shl    edi,cl
c00260cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00260d1:	88 d1                	mov    cl,dl
c00260d3:	d3 e8                	shr    eax,cl
c00260d5:	09 c7                	or     edi,eax
c00260d7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00260db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00260df:	89 d8                	mov    eax,ebx
c00260e1:	88 d9                	mov    cl,bl
c00260e3:	d3 e7                	shl    edi,cl
c00260e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00260e9:	89 f3                	mov    ebx,esi
c00260eb:	88 d1                	mov    cl,dl
c00260ed:	d3 eb                	shr    ebx,cl
c00260ef:	89 c7                	mov    edi,eax
c00260f1:	88 c1                	mov    cl,al
c00260f3:	d3 e6                	shl    esi,cl
c00260f5:	89 e8                	mov    eax,ebp
c00260f7:	88 d1                	mov    cl,dl
c00260f9:	d3 e8                	shr    eax,cl
c00260fb:	09 f0                	or     eax,esi
c00260fd:	89 f9                	mov    ecx,edi
c00260ff:	d3 e5                	shl    ebp,cl
c0026101:	89 da                	mov    edx,ebx
c0026103:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026107:	89 d3                	mov    ebx,edx
c0026109:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002610d:	89 c6                	mov    esi,eax
c002610f:	89 d1                	mov    ecx,edx
c0026111:	39 d3                	cmp    ebx,edx
c0026113:	72 27                	jb     c002613c <__moddi3+0x170>
c0026115:	74 21                	je     c0026138 <__moddi3+0x16c>
c0026117:	29 f5                	sub    ebp,esi
c0026119:	19 cb                	sbb    ebx,ecx
c002611b:	89 de                	mov    esi,ebx
c002611d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026121:	d3 e6                	shl    esi,cl
c0026123:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026127:	89 f9                	mov    ecx,edi
c0026129:	d3 ed                	shr    ebp,cl
c002612b:	09 ee                	or     esi,ebp
c002612d:	89 f0                	mov    eax,esi
c002612f:	d3 eb                	shr    ebx,cl
c0026131:	89 da                	mov    edx,ebx
c0026133:	e9 e8 fe ff ff       	jmp    c0026020 <__moddi3+0x54>
c0026138:	39 c5                	cmp    ebp,eax
c002613a:	73 db                	jae    c0026117 <__moddi3+0x14b>
c002613c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026140:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026144:	89 d1                	mov    ecx,edx
c0026146:	89 c6                	mov    esi,eax
c0026148:	eb cd                	jmp    c0026117 <__moddi3+0x14b>
c002614a:	66 90                	xchg   ax,ax

c002614c <__udivdi3>:
c002614c:	55                   	push   ebp
c002614d:	57                   	push   edi
c002614e:	56                   	push   esi
c002614f:	53                   	push   ebx
c0026150:	83 ec 1c             	sub    esp,0x1c
c0026153:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026157:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002615b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002615f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026163:	85 d2                	test   edx,edx
c0026165:	75 41                	jne    c00261a8 <__udivdi3+0x5c>
c0026167:	39 f7                	cmp    edi,esi
c0026169:	76 15                	jbe    c0026180 <__udivdi3+0x34>
c002616b:	89 e8                	mov    eax,ebp
c002616d:	89 f2                	mov    edx,esi
c002616f:	f7 f7                	div    edi
c0026171:	31 db                	xor    ebx,ebx
c0026173:	89 da                	mov    edx,ebx
c0026175:	83 c4 1c             	add    esp,0x1c
c0026178:	5b                   	pop    ebx
c0026179:	5e                   	pop    esi
c002617a:	5f                   	pop    edi
c002617b:	5d                   	pop    ebp
c002617c:	c3                   	ret    
c002617d:	8d 76 00             	lea    esi,[esi+0x0]
c0026180:	89 f9                	mov    ecx,edi
c0026182:	85 ff                	test   edi,edi
c0026184:	75 0b                	jne    c0026191 <__udivdi3+0x45>
c0026186:	b8 01 00 00 00       	mov    eax,0x1
c002618b:	31 d2                	xor    edx,edx
c002618d:	f7 f7                	div    edi
c002618f:	89 c1                	mov    ecx,eax
c0026191:	31 d2                	xor    edx,edx
c0026193:	89 f0                	mov    eax,esi
c0026195:	f7 f1                	div    ecx
c0026197:	89 c3                	mov    ebx,eax
c0026199:	89 e8                	mov    eax,ebp
c002619b:	f7 f1                	div    ecx
c002619d:	89 da                	mov    edx,ebx
c002619f:	83 c4 1c             	add    esp,0x1c
c00261a2:	5b                   	pop    ebx
c00261a3:	5e                   	pop    esi
c00261a4:	5f                   	pop    edi
c00261a5:	5d                   	pop    ebp
c00261a6:	c3                   	ret    
c00261a7:	90                   	nop
c00261a8:	39 f2                	cmp    edx,esi
c00261aa:	77 1c                	ja     c00261c8 <__udivdi3+0x7c>
c00261ac:	0f bd da             	bsr    ebx,edx
c00261af:	83 f3 1f             	xor    ebx,0x1f
c00261b2:	75 24                	jne    c00261d8 <__udivdi3+0x8c>
c00261b4:	39 f2                	cmp    edx,esi
c00261b6:	72 08                	jb     c00261c0 <__udivdi3+0x74>
c00261b8:	39 ef                	cmp    edi,ebp
c00261ba:	0f 87 84 00 00 00    	ja     c0026244 <__udivdi3+0xf8>
c00261c0:	b8 01 00 00 00       	mov    eax,0x1
c00261c5:	eb ac                	jmp    c0026173 <__udivdi3+0x27>
c00261c7:	90                   	nop
c00261c8:	31 db                	xor    ebx,ebx
c00261ca:	31 c0                	xor    eax,eax
c00261cc:	89 da                	mov    edx,ebx
c00261ce:	83 c4 1c             	add    esp,0x1c
c00261d1:	5b                   	pop    ebx
c00261d2:	5e                   	pop    esi
c00261d3:	5f                   	pop    edi
c00261d4:	5d                   	pop    ebp
c00261d5:	c3                   	ret    
c00261d6:	66 90                	xchg   ax,ax
c00261d8:	b8 20 00 00 00       	mov    eax,0x20
c00261dd:	29 d8                	sub    eax,ebx
c00261df:	88 d9                	mov    cl,bl
c00261e1:	d3 e2                	shl    edx,cl
c00261e3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00261e7:	89 fa                	mov    edx,edi
c00261e9:	88 c1                	mov    cl,al
c00261eb:	d3 ea                	shr    edx,cl
c00261ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00261f1:	09 d1                	or     ecx,edx
c00261f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00261f7:	88 d9                	mov    cl,bl
c00261f9:	d3 e7                	shl    edi,cl
c00261fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00261ff:	89 f7                	mov    edi,esi
c0026201:	88 c1                	mov    cl,al
c0026203:	d3 ef                	shr    edi,cl
c0026205:	88 d9                	mov    cl,bl
c0026207:	d3 e6                	shl    esi,cl
c0026209:	89 ea                	mov    edx,ebp
c002620b:	88 c1                	mov    cl,al
c002620d:	d3 ea                	shr    edx,cl
c002620f:	09 d6                	or     esi,edx
c0026211:	89 f0                	mov    eax,esi
c0026213:	89 fa                	mov    edx,edi
c0026215:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026219:	89 d7                	mov    edi,edx
c002621b:	89 c6                	mov    esi,eax
c002621d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026221:	39 d7                	cmp    edi,edx
c0026223:	72 13                	jb     c0026238 <__udivdi3+0xec>
c0026225:	74 09                	je     c0026230 <__udivdi3+0xe4>
c0026227:	89 f0                	mov    eax,esi
c0026229:	31 db                	xor    ebx,ebx
c002622b:	e9 43 ff ff ff       	jmp    c0026173 <__udivdi3+0x27>
c0026230:	88 d9                	mov    cl,bl
c0026232:	d3 e5                	shl    ebp,cl
c0026234:	39 c5                	cmp    ebp,eax
c0026236:	73 ef                	jae    c0026227 <__udivdi3+0xdb>
c0026238:	8d 46 ff             	lea    eax,[esi-0x1]
c002623b:	31 db                	xor    ebx,ebx
c002623d:	e9 31 ff ff ff       	jmp    c0026173 <__udivdi3+0x27>
c0026242:	66 90                	xchg   ax,ax
c0026244:	31 c0                	xor    eax,eax
c0026246:	e9 28 ff ff ff       	jmp    c0026173 <__udivdi3+0x27>
c002624b:	90                   	nop

c002624c <__umoddi3>:
c002624c:	55                   	push   ebp
c002624d:	57                   	push   edi
c002624e:	56                   	push   esi
c002624f:	53                   	push   ebx
c0026250:	83 ec 1c             	sub    esp,0x1c
c0026253:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026257:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002625b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002625f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026263:	89 da                	mov    edx,ebx
c0026265:	85 c0                	test   eax,eax
c0026267:	75 37                	jne    c00262a0 <__umoddi3+0x54>
c0026269:	39 df                	cmp    edi,ebx
c002626b:	76 13                	jbe    c0026280 <__umoddi3+0x34>
c002626d:	89 f0                	mov    eax,esi
c002626f:	f7 f7                	div    edi
c0026271:	89 d0                	mov    eax,edx
c0026273:	31 d2                	xor    edx,edx
c0026275:	83 c4 1c             	add    esp,0x1c
c0026278:	5b                   	pop    ebx
c0026279:	5e                   	pop    esi
c002627a:	5f                   	pop    edi
c002627b:	5d                   	pop    ebp
c002627c:	c3                   	ret    
c002627d:	8d 76 00             	lea    esi,[esi+0x0]
c0026280:	89 fd                	mov    ebp,edi
c0026282:	85 ff                	test   edi,edi
c0026284:	75 0b                	jne    c0026291 <__umoddi3+0x45>
c0026286:	b8 01 00 00 00       	mov    eax,0x1
c002628b:	31 d2                	xor    edx,edx
c002628d:	f7 f7                	div    edi
c002628f:	89 c5                	mov    ebp,eax
c0026291:	89 d8                	mov    eax,ebx
c0026293:	31 d2                	xor    edx,edx
c0026295:	f7 f5                	div    ebp
c0026297:	89 f0                	mov    eax,esi
c0026299:	f7 f5                	div    ebp
c002629b:	89 d0                	mov    eax,edx
c002629d:	eb d4                	jmp    c0026273 <__umoddi3+0x27>
c002629f:	90                   	nop
c00262a0:	89 f1                	mov    ecx,esi
c00262a2:	39 d8                	cmp    eax,ebx
c00262a4:	76 0a                	jbe    c00262b0 <__umoddi3+0x64>
c00262a6:	89 f0                	mov    eax,esi
c00262a8:	83 c4 1c             	add    esp,0x1c
c00262ab:	5b                   	pop    ebx
c00262ac:	5e                   	pop    esi
c00262ad:	5f                   	pop    edi
c00262ae:	5d                   	pop    ebp
c00262af:	c3                   	ret    
c00262b0:	0f bd e8             	bsr    ebp,eax
c00262b3:	83 f5 1f             	xor    ebp,0x1f
c00262b6:	75 1c                	jne    c00262d4 <__umoddi3+0x88>
c00262b8:	39 d8                	cmp    eax,ebx
c00262ba:	72 04                	jb     c00262c0 <__umoddi3+0x74>
c00262bc:	39 f7                	cmp    edi,esi
c00262be:	77 08                	ja     c00262c8 <__umoddi3+0x7c>
c00262c0:	89 da                	mov    edx,ebx
c00262c2:	29 fe                	sub    esi,edi
c00262c4:	19 c2                	sbb    edx,eax
c00262c6:	89 f1                	mov    ecx,esi
c00262c8:	89 c8                	mov    eax,ecx
c00262ca:	83 c4 1c             	add    esp,0x1c
c00262cd:	5b                   	pop    ebx
c00262ce:	5e                   	pop    esi
c00262cf:	5f                   	pop    edi
c00262d0:	5d                   	pop    ebp
c00262d1:	c3                   	ret    
c00262d2:	66 90                	xchg   ax,ax
c00262d4:	ba 20 00 00 00       	mov    edx,0x20
c00262d9:	29 ea                	sub    edx,ebp
c00262db:	89 e9                	mov    ecx,ebp
c00262dd:	d3 e0                	shl    eax,cl
c00262df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262e3:	89 f8                	mov    eax,edi
c00262e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00262e9:	88 d1                	mov    cl,dl
c00262eb:	d3 e8                	shr    eax,cl
c00262ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00262f1:	09 c1                	or     ecx,eax
c00262f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00262f7:	89 e9                	mov    ecx,ebp
c00262f9:	d3 e7                	shl    edi,cl
c00262fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00262ff:	89 d8                	mov    eax,ebx
c0026301:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026305:	88 d1                	mov    cl,dl
c0026307:	d3 e8                	shr    eax,cl
c0026309:	89 c7                	mov    edi,eax
c002630b:	89 e9                	mov    ecx,ebp
c002630d:	d3 e3                	shl    ebx,cl
c002630f:	89 f0                	mov    eax,esi
c0026311:	88 d1                	mov    cl,dl
c0026313:	d3 e8                	shr    eax,cl
c0026315:	09 d8                	or     eax,ebx
c0026317:	89 e9                	mov    ecx,ebp
c0026319:	d3 e6                	shl    esi,cl
c002631b:	89 f3                	mov    ebx,esi
c002631d:	89 fa                	mov    edx,edi
c002631f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026323:	89 d1                	mov    ecx,edx
c0026325:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026329:	89 c6                	mov    esi,eax
c002632b:	89 d7                	mov    edi,edx
c002632d:	39 d1                	cmp    ecx,edx
c002632f:	72 27                	jb     c0026358 <__umoddi3+0x10c>
c0026331:	74 21                	je     c0026354 <__umoddi3+0x108>
c0026333:	89 ca                	mov    edx,ecx
c0026335:	29 f3                	sub    ebx,esi
c0026337:	19 fa                	sbb    edx,edi
c0026339:	89 d0                	mov    eax,edx
c002633b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002633f:	d3 e0                	shl    eax,cl
c0026341:	89 e9                	mov    ecx,ebp
c0026343:	d3 eb                	shr    ebx,cl
c0026345:	09 d8                	or     eax,ebx
c0026347:	d3 ea                	shr    edx,cl
c0026349:	83 c4 1c             	add    esp,0x1c
c002634c:	5b                   	pop    ebx
c002634d:	5e                   	pop    esi
c002634e:	5f                   	pop    edi
c002634f:	5d                   	pop    ebp
c0026350:	c3                   	ret    
c0026351:	8d 76 00             	lea    esi,[esi+0x0]
c0026354:	39 c3                	cmp    ebx,eax
c0026356:	73 db                	jae    c0026333 <__umoddi3+0xe7>
c0026358:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002635c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026360:	89 d7                	mov    edi,edx
c0026362:	89 c6                	mov    esi,eax
c0026364:	eb cd                	jmp    c0026333 <__umoddi3+0xe7>

c0026366 <__addsf3>:
c0026366:	55                   	push   ebp
c0026367:	89 e5                	mov    ebp,esp
c0026369:	57                   	push   edi
c002636a:	56                   	push   esi
c002636b:	53                   	push   ebx
c002636c:	83 ec 08             	sub    esp,0x8
c002636f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026372:	89 fa                	mov    edx,edi
c0026374:	89 f8                	mov    eax,edi
c0026376:	c1 f8 17             	sar    eax,0x17
c0026379:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002637c:	c1 e2 08             	shl    edx,0x8
c002637f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026385:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026388:	89 de                	mov    esi,ebx
c002638a:	c1 fe 17             	sar    esi,0x17
c002638d:	c1 e3 08             	shl    ebx,0x8
c0026390:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026396:	31 f0                	xor    eax,esi
c0026398:	0f 88 3b 01 00 00    	js     c00264d9 <__addsf3+0x173>
c002639e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00263a1:	29 f1                	sub    ecx,esi
c00263a3:	85 c9                	test   ecx,ecx
c00263a5:	7e 54                	jle    c00263fb <__addsf3+0x95>
c00263a7:	89 f0                	mov    eax,esi
c00263a9:	84 c0                	test   al,al
c00263ab:	75 10                	jne    c00263bd <__addsf3+0x57>
c00263ad:	85 db                	test   ebx,ebx
c00263af:	0f 84 aa 02 00 00    	je     c002665f <__addsf3+0x2f9>
c00263b5:	49                   	dec    ecx
c00263b6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00263b9:	74 38                	je     c00263f3 <__addsf3+0x8d>
c00263bb:	eb 13                	jmp    c00263d0 <__addsf3+0x6a>
c00263bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263c0:	f7 d0                	not    eax
c00263c2:	84 c0                	test   al,al
c00263c4:	0f 84 95 02 00 00    	je     c002665f <__addsf3+0x2f9>
c00263ca:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00263d0:	83 f9 1f             	cmp    ecx,0x1f
c00263d3:	0f 8f 86 02 00 00    	jg     c002665f <__addsf3+0x2f9>
c00263d9:	89 de                	mov    esi,ebx
c00263db:	d3 ee                	shr    esi,cl
c00263dd:	b8 20 00 00 00       	mov    eax,0x20
c00263e2:	29 c8                	sub    eax,ecx
c00263e4:	89 c1                	mov    ecx,eax
c00263e6:	d3 e3                	shl    ebx,cl
c00263e8:	31 c0                	xor    eax,eax
c00263ea:	85 db                	test   ebx,ebx
c00263ec:	0f 95 c0             	setne  al
c00263ef:	09 f0                	or     eax,esi
c00263f1:	01 d0                	add    eax,edx
c00263f3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00263f6:	e9 b6 00 00 00       	jmp    c00264b1 <__addsf3+0x14b>
c00263fb:	74 5c                	je     c0026459 <__addsf3+0xf3>
c00263fd:	89 f1                	mov    ecx,esi
c00263ff:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026402:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026405:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026409:	75 14                	jne    c002641f <__addsf3+0xb9>
c002640b:	85 d2                	test   edx,edx
c002640d:	0f 84 4c 02 00 00    	je     c002665f <__addsf3+0x2f9>
c0026413:	49                   	dec    ecx
c0026414:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026417:	0f 84 94 00 00 00    	je     c00264b1 <__addsf3+0x14b>
c002641d:	eb 12                	jmp    c0026431 <__addsf3+0xcb>
c002641f:	89 f0                	mov    eax,esi
c0026421:	f7 d0                	not    eax
c0026423:	84 c0                	test   al,al
c0026425:	0f 84 34 02 00 00    	je     c002665f <__addsf3+0x2f9>
c002642b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026431:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026434:	83 f9 1f             	cmp    ecx,0x1f
c0026437:	0f 8f 22 02 00 00    	jg     c002665f <__addsf3+0x2f9>
c002643d:	89 d7                	mov    edi,edx
c002643f:	d3 ef                	shr    edi,cl
c0026441:	b8 20 00 00 00       	mov    eax,0x20
c0026446:	29 c8                	sub    eax,ecx
c0026448:	89 c1                	mov    ecx,eax
c002644a:	d3 e2                	shl    edx,cl
c002644c:	31 c0                	xor    eax,eax
c002644e:	85 d2                	test   edx,edx
c0026450:	0f 95 c0             	setne  al
c0026453:	09 f8                	or     eax,edi
c0026455:	01 d8                	add    eax,ebx
c0026457:	eb 58                	jmp    c00264b1 <__addsf3+0x14b>
c0026459:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002645c:	8d 70 01             	lea    esi,[eax+0x1]
c002645f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026465:	75 32                	jne    c0026499 <__addsf3+0x133>
c0026467:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002646b:	75 1f                	jne    c002648c <__addsf3+0x126>
c002646d:	85 d2                	test   edx,edx
c002646f:	0f 84 e0 01 00 00    	je     c0026655 <__addsf3+0x2ef>
c0026475:	85 db                	test   ebx,ebx
c0026477:	0f 84 e2 01 00 00    	je     c002665f <__addsf3+0x2f9>
c002647d:	89 d0                	mov    eax,edx
c002647f:	01 d8                	add    eax,ebx
c0026481:	0f 89 a9 01 00 00    	jns    c0026630 <__addsf3+0x2ca>
c0026487:	e9 9d 01 00 00       	jmp    c0026629 <__addsf3+0x2c3>
c002648c:	85 d2                	test   edx,edx
c002648e:	0f 85 cb 01 00 00    	jne    c002665f <__addsf3+0x2f9>
c0026494:	e9 bc 01 00 00       	jmp    c0026655 <__addsf3+0x2ef>
c0026499:	31 c0                	xor    eax,eax
c002649b:	89 f1                	mov    ecx,esi
c002649d:	f7 d1                	not    ecx
c002649f:	84 c9                	test   cl,cl
c00264a1:	0f 84 90 01 00 00    	je     c0026637 <__addsf3+0x2d1>
c00264a7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00264aa:	d1 e8                	shr    eax,1
c00264ac:	e9 86 01 00 00       	jmp    c0026637 <__addsf3+0x2d1>
c00264b1:	85 c0                	test   eax,eax
c00264b3:	0f 89 7e 01 00 00    	jns    c0026637 <__addsf3+0x2d1>
c00264b9:	46                   	inc    esi
c00264ba:	89 f2                	mov    edx,esi
c00264bc:	f7 d2                	not    edx
c00264be:	84 d2                	test   dl,dl
c00264c0:	0f 84 6f 01 00 00    	je     c0026635 <__addsf3+0x2cf>
c00264c6:	89 c2                	mov    edx,eax
c00264c8:	83 e2 01             	and    edx,0x1
c00264cb:	d1 e8                	shr    eax,1
c00264cd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00264d2:	09 d0                	or     eax,edx
c00264d4:	e9 5e 01 00 00       	jmp    c0026637 <__addsf3+0x2d1>
c00264d9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00264dd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264e0:	89 f0                	mov    eax,esi
c00264e2:	0f b6 c0             	movzx  eax,al
c00264e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00264e8:	29 c1                	sub    ecx,eax
c00264ea:	85 c9                	test   ecx,ecx
c00264ec:	7e 55                	jle    c0026543 <__addsf3+0x1dd>
c00264ee:	85 c0                	test   eax,eax
c00264f0:	75 11                	jne    c0026503 <__addsf3+0x19d>
c00264f2:	85 db                	test   ebx,ebx
c00264f4:	0f 84 65 01 00 00    	je     c002665f <__addsf3+0x2f9>
c00264fa:	49                   	dec    ecx
c00264fb:	75 19                	jne    c0026516 <__addsf3+0x1b0>
c00264fd:	89 d0                	mov    eax,edx
c00264ff:	29 d8                	sub    eax,ebx
c0026501:	eb 38                	jmp    c002653b <__addsf3+0x1d5>
c0026503:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026506:	f7 d0                	not    eax
c0026508:	84 c0                	test   al,al
c002650a:	0f 84 4f 01 00 00    	je     c002665f <__addsf3+0x2f9>
c0026510:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026516:	83 f9 1f             	cmp    ecx,0x1f
c0026519:	0f 8f 40 01 00 00    	jg     c002665f <__addsf3+0x2f9>
c002651f:	89 de                	mov    esi,ebx
c0026521:	d3 ee                	shr    esi,cl
c0026523:	b8 20 00 00 00       	mov    eax,0x20
c0026528:	29 c8                	sub    eax,ecx
c002652a:	89 c1                	mov    ecx,eax
c002652c:	d3 e3                	shl    ebx,cl
c002652e:	31 c0                	xor    eax,eax
c0026530:	85 db                	test   ebx,ebx
c0026532:	0f 95 c0             	setne  al
c0026535:	09 f0                	or     eax,esi
c0026537:	29 c2                	sub    edx,eax
c0026539:	89 d0                	mov    eax,edx
c002653b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002653e:	e9 af 00 00 00       	jmp    c00265f2 <__addsf3+0x28c>
c0026543:	74 5c                	je     c00265a1 <__addsf3+0x23b>
c0026545:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026548:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002654b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002654f:	75 14                	jne    c0026565 <__addsf3+0x1ff>
c0026551:	85 d2                	test   edx,edx
c0026553:	0f 84 06 01 00 00    	je     c002665f <__addsf3+0x2f9>
c0026559:	48                   	dec    eax
c002655a:	75 1b                	jne    c0026577 <__addsf3+0x211>
c002655c:	89 d8                	mov    eax,ebx
c002655e:	29 d0                	sub    eax,edx
c0026560:	e9 8d 00 00 00       	jmp    c00265f2 <__addsf3+0x28c>
c0026565:	89 f1                	mov    ecx,esi
c0026567:	f7 d1                	not    ecx
c0026569:	84 c9                	test   cl,cl
c002656b:	0f 84 ee 00 00 00    	je     c002665f <__addsf3+0x2f9>
c0026571:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026577:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002657a:	83 f8 1f             	cmp    eax,0x1f
c002657d:	0f 8f dc 00 00 00    	jg     c002665f <__addsf3+0x2f9>
c0026583:	89 d7                	mov    edi,edx
c0026585:	88 c1                	mov    cl,al
c0026587:	d3 ef                	shr    edi,cl
c0026589:	b9 20 00 00 00       	mov    ecx,0x20
c002658e:	29 c1                	sub    ecx,eax
c0026590:	d3 e2                	shl    edx,cl
c0026592:	31 c0                	xor    eax,eax
c0026594:	85 d2                	test   edx,edx
c0026596:	0f 95 c0             	setne  al
c0026599:	09 f8                	or     eax,edi
c002659b:	29 c3                	sub    ebx,eax
c002659d:	89 d8                	mov    eax,ebx
c002659f:	eb 51                	jmp    c00265f2 <__addsf3+0x28c>
c00265a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00265a4:	40                   	inc    eax
c00265a5:	a8 fe                	test   al,0xfe
c00265a7:	75 3d                	jne    c00265e6 <__addsf3+0x280>
c00265a9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00265ad:	0f 85 a7 00 00 00    	jne    c002665a <__addsf3+0x2f4>
c00265b3:	85 d2                	test   edx,edx
c00265b5:	75 12                	jne    c00265c9 <__addsf3+0x263>
c00265b7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00265ba:	85 db                	test   ebx,ebx
c00265bc:	0f 85 9d 00 00 00    	jne    c002665f <__addsf3+0x2f9>
c00265c2:	31 ff                	xor    edi,edi
c00265c4:	e9 96 00 00 00       	jmp    c002665f <__addsf3+0x2f9>
c00265c9:	85 db                	test   ebx,ebx
c00265cb:	0f 84 8e 00 00 00    	je     c002665f <__addsf3+0x2f9>
c00265d1:	89 d0                	mov    eax,edx
c00265d3:	29 d8                	sub    eax,ebx
c00265d5:	79 06                	jns    c00265dd <__addsf3+0x277>
c00265d7:	89 d8                	mov    eax,ebx
c00265d9:	29 d0                	sub    eax,edx
c00265db:	eb 5a                	jmp    c0026637 <__addsf3+0x2d1>
c00265dd:	bf 00 00 00 00       	mov    edi,0x0
c00265e2:	74 7b                	je     c002665f <__addsf3+0x2f9>
c00265e4:	eb 4a                	jmp    c0026630 <__addsf3+0x2ca>
c00265e6:	89 d0                	mov    eax,edx
c00265e8:	29 d8                	sub    eax,ebx
c00265ea:	79 12                	jns    c00265fe <__addsf3+0x298>
c00265ec:	89 d8                	mov    eax,ebx
c00265ee:	29 d0                	sub    eax,edx
c00265f0:	eb 09                	jmp    c00265fb <__addsf3+0x295>
c00265f2:	85 c0                	test   eax,eax
c00265f4:	79 41                	jns    c0026637 <__addsf3+0x2d1>
c00265f6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00265fb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00265fe:	31 f6                	xor    esi,esi
c0026600:	85 c0                	test   eax,eax
c0026602:	74 33                	je     c0026637 <__addsf3+0x2d1>
c0026604:	0f bd c8             	bsr    ecx,eax
c0026607:	83 f1 1f             	xor    ecx,0x1f
c002660a:	d3 e0                	shl    eax,cl
c002660c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026610:	39 ca                	cmp    edx,ecx
c0026612:	7f 10                	jg     c0026624 <__addsf3+0x2be>
c0026614:	29 d1                	sub    ecx,edx
c0026616:	41                   	inc    ecx
c0026617:	d3 e8                	shr    eax,cl
c0026619:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002661c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026622:	eb 13                	jmp    c0026637 <__addsf3+0x2d1>
c0026624:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026627:	29 ce                	sub    esi,ecx
c0026629:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002662e:	eb 07                	jmp    c0026637 <__addsf3+0x2d1>
c0026630:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026633:	eb 02                	jmp    c0026637 <__addsf3+0x2d1>
c0026635:	31 c0                	xor    eax,eax
c0026637:	89 c2                	mov    edx,eax
c0026639:	c1 ea 08             	shr    edx,0x8
c002663c:	a8 7f                	test   al,0x7f
c002663e:	0f 95 c1             	setne  cl
c0026641:	09 d1                	or     ecx,edx
c0026643:	83 e1 01             	and    ecx,0x1
c0026646:	c1 e8 07             	shr    eax,0x7
c0026649:	21 c8                	and    eax,ecx
c002664b:	c1 e6 17             	shl    esi,0x17
c002664e:	09 d6                	or     esi,edx
c0026650:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026653:	eb 0a                	jmp    c002665f <__addsf3+0x2f9>
c0026655:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026658:	eb 05                	jmp    c002665f <__addsf3+0x2f9>
c002665a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002665f:	89 f8                	mov    eax,edi
c0026661:	5a                   	pop    edx
c0026662:	59                   	pop    ecx
c0026663:	5b                   	pop    ebx
c0026664:	5e                   	pop    esi
c0026665:	5f                   	pop    edi
c0026666:	5d                   	pop    ebp
c0026667:	c3                   	ret    

c0026668 <__subsf3>:
c0026668:	55                   	push   ebp
c0026669:	89 e5                	mov    ebp,esp
c002666b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002666e:	05 00 00 00 80       	add    eax,0x80000000
c0026673:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026676:	5d                   	pop    ebp
c0026677:	e9 ea fc ff ff       	jmp    c0026366 <__addsf3>

c002667c <__negsf2>:
c002667c:	55                   	push   ebp
c002667d:	89 e5                	mov    ebp,esp
c002667f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026682:	05 00 00 00 80       	add    eax,0x80000000
c0026687:	5d                   	pop    ebp
c0026688:	c3                   	ret    

c0026689 <__mulsf3>:
c0026689:	55                   	push   ebp
c002668a:	89 e5                	mov    ebp,esp
c002668c:	57                   	push   edi
c002668d:	56                   	push   esi
c002668e:	53                   	push   ebx
c002668f:	83 ec 1c             	sub    esp,0x1c
c0026692:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026695:	89 f0                	mov    eax,esi
c0026697:	89 f1                	mov    ecx,esi
c0026699:	c1 f9 17             	sar    ecx,0x17
c002669c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002669f:	c1 e0 08             	shl    eax,0x8
c00266a2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00266a7:	89 c1                	mov    ecx,eax
c00266a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00266ac:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00266af:	89 c7                	mov    edi,eax
c00266b1:	c1 ff 17             	sar    edi,0x17
c00266b4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00266b8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00266bb:	89 f8                	mov    eax,edi
c00266bd:	0f b6 c0             	movzx  eax,al
c00266c0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00266c3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00266c7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00266ca:	42                   	inc    edx
c00266cb:	80 e2 fe             	and    dl,0xfe
c00266ce:	75 7b                	jne    c002674b <__mulsf3+0xc2>
c00266d0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00266d4:	74 54                	je     c002672a <__mulsf3+0xa1>
c00266d6:	85 c9                	test   ecx,ecx
c00266d8:	0f 85 64 01 00 00    	jne    c0026842 <__mulsf3+0x1b9>
c00266de:	8d 57 01             	lea    edx,[edi+0x1]
c00266e1:	80 e2 fe             	and    dl,0xfe
c00266e4:	75 1f                	jne    c0026705 <__mulsf3+0x7c>
c00266e6:	85 c0                	test   eax,eax
c00266e8:	b8 00 00 00 00       	mov    eax,0x0
c00266ed:	74 29                	je     c0026718 <__mulsf3+0x8f>
c00266ef:	53                   	push   ebx
c00266f0:	53                   	push   ebx
c00266f1:	50                   	push   eax
c00266f2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00266f5:	e8 96 05 00 00       	call   c0026c90 <__nesf2>
c00266fa:	83 c4 10             	add    esp,0x10
c00266fd:	85 c0                	test   eax,eax
c00266ff:	0f 85 3a 01 00 00    	jne    c002683f <__mulsf3+0x1b6>
c0026705:	85 ff                	test   edi,edi
c0026707:	0f 89 35 01 00 00    	jns    c0026842 <__mulsf3+0x1b9>
c002670d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026713:	e9 2a 01 00 00       	jmp    c0026842 <__mulsf3+0x1b9>
c0026718:	51                   	push   ecx
c0026719:	51                   	push   ecx
c002671a:	50                   	push   eax
c002671b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002671e:	e8 6d 05 00 00       	call   c0026c90 <__nesf2>
c0026723:	83 c4 10             	add    esp,0x10
c0026726:	85 c0                	test   eax,eax
c0026728:	eb 15                	jmp    c002673f <__mulsf3+0xb6>
c002672a:	85 c9                	test   ecx,ecx
c002672c:	74 0b                	je     c0026739 <__mulsf3+0xb0>
c002672e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026731:	01 c9                	add    ecx,ecx
c0026733:	78 16                	js     c002674b <__mulsf3+0xc2>
c0026735:	89 d3                	mov    ebx,edx
c0026737:	eb f5                	jmp    c002672e <__mulsf3+0xa5>
c0026739:	89 f8                	mov    eax,edi
c002673b:	f7 d0                	not    eax
c002673d:	84 c0                	test   al,al
c002673f:	75 c4                	jne    c0026705 <__mulsf3+0x7c>
c0026741:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026746:	e9 f7 00 00 00       	jmp    c0026842 <__mulsf3+0x1b9>
c002674b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002674e:	c1 e6 08             	shl    esi,0x8
c0026751:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026757:	8d 57 01             	lea    edx,[edi+0x1]
c002675a:	80 e2 fe             	and    dl,0xfe
c002675d:	75 63                	jne    c00267c2 <__mulsf3+0x139>
c002675f:	85 c0                	test   eax,eax
c0026761:	74 2f                	je     c0026792 <__mulsf3+0x109>
c0026763:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026767:	0f 89 d2 00 00 00    	jns    c002683f <__mulsf3+0x1b6>
c002676d:	52                   	push   edx
c002676e:	52                   	push   edx
c002676f:	6a 00                	push   0x0
c0026771:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026774:	e8 dc 04 00 00       	call   c0026c55 <__eqsf2>
c0026779:	83 c4 10             	add    esp,0x10
c002677c:	85 c0                	test   eax,eax
c002677e:	0f 85 bb 00 00 00    	jne    c002683f <__mulsf3+0x1b6>
c0026784:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026787:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002678d:	e9 b0 00 00 00       	jmp    c0026842 <__mulsf3+0x1b9>
c0026792:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026795:	50                   	push   eax
c0026796:	50                   	push   eax
c0026797:	6a 00                	push   0x0
c0026799:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002679c:	e8 b4 04 00 00       	call   c0026c55 <__eqsf2>
c00267a1:	83 c4 10             	add    esp,0x10
c00267a4:	85 c0                	test   eax,eax
c00267a6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00267a9:	75 0c                	jne    c00267b7 <__mulsf3+0x12e>
c00267ab:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00267af:	0f 89 8a 00 00 00    	jns    c002683f <__mulsf3+0x1b6>
c00267b5:	eb cd                	jmp    c0026784 <__mulsf3+0xfb>
c00267b7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00267ba:	01 f6                	add    esi,esi
c00267bc:	78 04                	js     c00267c2 <__mulsf3+0x139>
c00267be:	89 c3                	mov    ebx,eax
c00267c0:	eb f5                	jmp    c00267b7 <__mulsf3+0x12e>
c00267c2:	89 c8                	mov    eax,ecx
c00267c4:	0d 00 00 00 80       	or     eax,0x80000000
c00267c9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00267cf:	f7 e6                	mul    esi
c00267d1:	85 c0                	test   eax,eax
c00267d3:	0f 95 c0             	setne  al
c00267d6:	0f b6 c0             	movzx  eax,al
c00267d9:	09 c2                	or     edx,eax
c00267db:	78 03                	js     c00267e0 <__mulsf3+0x157>
c00267dd:	01 d2                	add    edx,edx
c00267df:	4b                   	dec    ebx
c00267e0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00267e6:	7f 22                	jg     c002680a <__mulsf3+0x181>
c00267e8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00267ee:	85 db                	test   ebx,ebx
c00267f0:	7f 23                	jg     c0026815 <__mulsf3+0x18c>
c00267f2:	83 fb e9             	cmp    ebx,0xffffffe9
c00267f5:	7c 1a                	jl     c0026811 <__mulsf3+0x188>
c00267f7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00267fd:	b9 01 00 00 00       	mov    ecx,0x1
c0026802:	29 d9                	sub    ecx,ebx
c0026804:	d3 ea                	shr    edx,cl
c0026806:	31 db                	xor    ebx,ebx
c0026808:	eb 0b                	jmp    c0026815 <__mulsf3+0x18c>
c002680a:	bb ff 00 00 00       	mov    ebx,0xff
c002680f:	eb 02                	jmp    c0026813 <__mulsf3+0x18a>
c0026811:	31 db                	xor    ebx,ebx
c0026813:	31 d2                	xor    edx,edx
c0026815:	89 d0                	mov    eax,edx
c0026817:	c1 e8 08             	shr    eax,0x8
c002681a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002681d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026823:	09 fb                	or     ebx,edi
c0026825:	c1 e3 17             	shl    ebx,0x17
c0026828:	09 c3                	or     ebx,eax
c002682a:	f6 c2 7f             	test   dl,0x7f
c002682d:	0f 95 c1             	setne  cl
c0026830:	09 c8                	or     eax,ecx
c0026832:	83 e0 01             	and    eax,0x1
c0026835:	c1 ea 07             	shr    edx,0x7
c0026838:	21 c2                	and    edx,eax
c002683a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002683d:	eb 03                	jmp    c0026842 <__mulsf3+0x1b9>
c002683f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026842:	89 f0                	mov    eax,esi
c0026844:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026847:	5b                   	pop    ebx
c0026848:	5e                   	pop    esi
c0026849:	5f                   	pop    edi
c002684a:	5d                   	pop    ebp
c002684b:	c3                   	ret    

c002684c <__divsf3>:
c002684c:	55                   	push   ebp
c002684d:	89 e5                	mov    ebp,esp
c002684f:	57                   	push   edi
c0026850:	56                   	push   esi
c0026851:	53                   	push   ebx
c0026852:	83 ec 1c             	sub    esp,0x1c
c0026855:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026858:	89 d8                	mov    eax,ebx
c002685a:	89 d9                	mov    ecx,ebx
c002685c:	c1 f9 17             	sar    ecx,0x17
c002685f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026862:	c1 e0 08             	shl    eax,0x8
c0026865:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002686a:	89 c1                	mov    ecx,eax
c002686c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002686f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026872:	89 c7                	mov    edi,eax
c0026874:	c1 ff 17             	sar    edi,0x17
c0026877:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002687b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002687e:	89 f8                	mov    eax,edi
c0026880:	0f b6 c0             	movzx  eax,al
c0026883:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026886:	29 c6                	sub    esi,eax
c0026888:	83 c6 7f             	add    esi,0x7f
c002688b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002688e:	42                   	inc    edx
c002688f:	80 e2 fe             	and    dl,0xfe
c0026892:	0f 85 9c 00 00 00    	jne    c0026934 <__divsf3+0xe8>
c0026898:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002689c:	74 33                	je     c00268d1 <__divsf3+0x85>
c002689e:	85 c9                	test   ecx,ecx
c00268a0:	0f 85 c7 01 00 00    	jne    c0026a6d <__divsf3+0x221>
c00268a6:	8d 57 01             	lea    edx,[edi+0x1]
c00268a9:	80 e2 fe             	and    dl,0xfe
c00268ac:	75 2f                	jne    c00268dd <__divsf3+0x91>
c00268ae:	85 c0                	test   eax,eax
c00268b0:	74 2b                	je     c00268dd <__divsf3+0x91>
c00268b2:	51                   	push   ecx
c00268b3:	51                   	push   ecx
c00268b4:	6a 00                	push   0x0
c00268b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00268b9:	e8 d2 03 00 00       	call   c0026c90 <__nesf2>
c00268be:	83 c4 10             	add    esp,0x10
c00268c1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00268c4:	85 c0                	test   eax,eax
c00268c6:	0f 85 a1 01 00 00    	jne    c0026a6d <__divsf3+0x221>
c00268cc:	e9 92 01 00 00       	jmp    c0026a63 <__divsf3+0x217>
c00268d1:	85 c9                	test   ecx,ecx
c00268d3:	75 1b                	jne    c00268f0 <__divsf3+0xa4>
c00268d5:	8d 57 01             	lea    edx,[edi+0x1]
c00268d8:	80 e2 fe             	and    dl,0xfe
c00268db:	74 1e                	je     c00268fb <__divsf3+0xaf>
c00268dd:	85 ff                	test   edi,edi
c00268df:	0f 89 88 01 00 00    	jns    c0026a6d <__divsf3+0x221>
c00268e5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00268eb:	e9 7d 01 00 00       	jmp    c0026a6d <__divsf3+0x221>
c00268f0:	8d 56 ff             	lea    edx,[esi-0x1]
c00268f3:	01 c9                	add    ecx,ecx
c00268f5:	78 3d                	js     c0026934 <__divsf3+0xe8>
c00268f7:	89 d6                	mov    esi,edx
c00268f9:	eb f5                	jmp    c00268f0 <__divsf3+0xa4>
c00268fb:	85 c0                	test   eax,eax
c00268fd:	b8 00 00 00 00       	mov    eax,0x0
c0026902:	74 18                	je     c002691c <__divsf3+0xd0>
c0026904:	52                   	push   edx
c0026905:	52                   	push   edx
c0026906:	50                   	push   eax
c0026907:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002690a:	e8 81 03 00 00       	call   c0026c90 <__nesf2>
c002690f:	83 c4 10             	add    esp,0x10
c0026912:	85 c0                	test   eax,eax
c0026914:	0f 85 50 01 00 00    	jne    c0026a6a <__divsf3+0x21e>
c002691a:	eb c1                	jmp    c00268dd <__divsf3+0x91>
c002691c:	56                   	push   esi
c002691d:	56                   	push   esi
c002691e:	50                   	push   eax
c002691f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026922:	e8 69 03 00 00       	call   c0026c90 <__nesf2>
c0026927:	83 c4 10             	add    esp,0x10
c002692a:	85 c0                	test   eax,eax
c002692c:	0f 84 31 01 00 00    	je     c0026a63 <__divsf3+0x217>
c0026932:	eb a9                	jmp    c00268dd <__divsf3+0x91>
c0026934:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026937:	c1 e3 08             	shl    ebx,0x8
c002693a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026940:	8d 57 01             	lea    edx,[edi+0x1]
c0026943:	80 e2 fe             	and    dl,0xfe
c0026946:	75 71                	jne    c00269b9 <__divsf3+0x16d>
c0026948:	85 c0                	test   eax,eax
c002694a:	ba 00 00 00 00       	mov    edx,0x0
c002694f:	74 2f                	je     c0026980 <__divsf3+0x134>
c0026951:	51                   	push   ecx
c0026952:	51                   	push   ecx
c0026953:	52                   	push   edx
c0026954:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026957:	e8 f9 02 00 00       	call   c0026c55 <__eqsf2>
c002695c:	83 c4 10             	add    esp,0x10
c002695f:	85 c0                	test   eax,eax
c0026961:	0f 85 03 01 00 00    	jne    c0026a6a <__divsf3+0x21e>
c0026967:	31 d2                	xor    edx,edx
c0026969:	89 d3                	mov    ebx,edx
c002696b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002696e:	31 f8                	xor    eax,edi
c0026970:	0f 89 f7 00 00 00    	jns    c0026a6d <__divsf3+0x221>
c0026976:	bb 00 00 00 80       	mov    ebx,0x80000000
c002697b:	e9 ed 00 00 00       	jmp    c0026a6d <__divsf3+0x221>
c0026980:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026983:	50                   	push   eax
c0026984:	50                   	push   eax
c0026985:	52                   	push   edx
c0026986:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026989:	e8 c7 02 00 00       	call   c0026c55 <__eqsf2>
c002698e:	83 c4 10             	add    esp,0x10
c0026991:	85 c0                	test   eax,eax
c0026993:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026996:	75 16                	jne    c00269ae <__divsf3+0x162>
c0026998:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002699b:	31 fb                	xor    ebx,edi
c002699d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00269a3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00269a9:	e9 bf 00 00 00       	jmp    c0026a6d <__divsf3+0x221>
c00269ae:	8d 46 01             	lea    eax,[esi+0x1]
c00269b1:	01 db                	add    ebx,ebx
c00269b3:	78 04                	js     c00269b9 <__divsf3+0x16d>
c00269b5:	89 c6                	mov    esi,eax
c00269b7:	eb f5                	jmp    c00269ae <__divsf3+0x162>
c00269b9:	89 c8                	mov    eax,ecx
c00269bb:	0d 00 00 00 80       	or     eax,0x80000000
c00269c0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269c6:	31 d2                	xor    edx,edx
c00269c8:	39 d8                	cmp    eax,ebx
c00269ca:	72 07                	jb     c00269d3 <__divsf3+0x187>
c00269cc:	29 d8                	sub    eax,ebx
c00269ce:	ba 01 00 00 00       	mov    edx,0x1
c00269d3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00269da:	01 d2                	add    edx,edx
c00269dc:	89 c1                	mov    ecx,eax
c00269de:	01 c0                	add    eax,eax
c00269e0:	85 c9                	test   ecx,ecx
c00269e2:	78 04                	js     c00269e8 <__divsf3+0x19c>
c00269e4:	39 c3                	cmp    ebx,eax
c00269e6:	77 05                	ja     c00269ed <__divsf3+0x1a1>
c00269e8:	29 d8                	sub    eax,ebx
c00269ea:	83 ca 01             	or     edx,0x1
c00269ed:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00269f0:	75 e8                	jne    c00269da <__divsf3+0x18e>
c00269f2:	85 c0                	test   eax,eax
c00269f4:	0f 95 c0             	setne  al
c00269f7:	0f b6 c0             	movzx  eax,al
c00269fa:	c1 e2 06             	shl    edx,0x6
c00269fd:	09 c2                	or     edx,eax
c00269ff:	78 03                	js     c0026a04 <__divsf3+0x1b8>
c0026a01:	01 d2                	add    edx,edx
c0026a03:	4e                   	dec    esi
c0026a04:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026a0a:	7f 22                	jg     c0026a2e <__divsf3+0x1e2>
c0026a0c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026a12:	85 f6                	test   esi,esi
c0026a14:	7f 23                	jg     c0026a39 <__divsf3+0x1ed>
c0026a16:	83 fe e9             	cmp    esi,0xffffffe9
c0026a19:	7c 1a                	jl     c0026a35 <__divsf3+0x1e9>
c0026a1b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a21:	b9 01 00 00 00       	mov    ecx,0x1
c0026a26:	29 f1                	sub    ecx,esi
c0026a28:	d3 ea                	shr    edx,cl
c0026a2a:	31 f6                	xor    esi,esi
c0026a2c:	eb 0b                	jmp    c0026a39 <__divsf3+0x1ed>
c0026a2e:	be ff 00 00 00       	mov    esi,0xff
c0026a33:	eb 02                	jmp    c0026a37 <__divsf3+0x1eb>
c0026a35:	31 f6                	xor    esi,esi
c0026a37:	31 d2                	xor    edx,edx
c0026a39:	89 d0                	mov    eax,edx
c0026a3b:	c1 e8 08             	shr    eax,0x8
c0026a3e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026a41:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026a47:	09 fe                	or     esi,edi
c0026a49:	c1 e6 17             	shl    esi,0x17
c0026a4c:	09 c6                	or     esi,eax
c0026a4e:	f6 c2 7f             	test   dl,0x7f
c0026a51:	0f 95 c1             	setne  cl
c0026a54:	09 c8                	or     eax,ecx
c0026a56:	83 e0 01             	and    eax,0x1
c0026a59:	c1 ea 07             	shr    edx,0x7
c0026a5c:	21 c2                	and    edx,eax
c0026a5e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026a61:	eb 0a                	jmp    c0026a6d <__divsf3+0x221>
c0026a63:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026a68:	eb 03                	jmp    c0026a6d <__divsf3+0x221>
c0026a6a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026a6d:	89 d8                	mov    eax,ebx
c0026a6f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026a72:	5b                   	pop    ebx
c0026a73:	5e                   	pop    esi
c0026a74:	5f                   	pop    edi
c0026a75:	5d                   	pop    ebp
c0026a76:	c3                   	ret    

c0026a77 <__floatsisf>:
c0026a77:	55                   	push   ebp
c0026a78:	89 e5                	mov    ebp,esp
c0026a7a:	53                   	push   ebx
c0026a7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026a7e:	85 d2                	test   edx,edx
c0026a80:	7e 2b                	jle    c0026aad <__floatsisf+0x36>
c0026a82:	0f bd ca             	bsr    ecx,edx
c0026a85:	83 f1 1f             	xor    ecx,0x1f
c0026a88:	d3 e2                	shl    edx,cl
c0026a8a:	89 d0                	mov    eax,edx
c0026a8c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a91:	89 c3                	mov    ebx,eax
c0026a93:	c1 eb 08             	shr    ebx,0x8
c0026a96:	80 e2 7f             	and    dl,0x7f
c0026a99:	0f 95 c2             	setne  dl
c0026a9c:	09 da                	or     edx,ebx
c0026a9e:	83 e2 01             	and    edx,0x1
c0026aa1:	c1 e8 07             	shr    eax,0x7
c0026aa4:	21 c2                	and    edx,eax
c0026aa6:	b8 9e 00 00 00       	mov    eax,0x9e
c0026aab:	eb 32                	jmp    c0026adf <__floatsisf+0x68>
c0026aad:	b8 00 00 00 00       	mov    eax,0x0
c0026ab2:	74 34                	je     c0026ae8 <__floatsisf+0x71>
c0026ab4:	f7 da                	neg    edx
c0026ab6:	0f bd ca             	bsr    ecx,edx
c0026ab9:	83 f1 1f             	xor    ecx,0x1f
c0026abc:	d3 e2                	shl    edx,cl
c0026abe:	89 d0                	mov    eax,edx
c0026ac0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ac5:	89 c3                	mov    ebx,eax
c0026ac7:	c1 eb 08             	shr    ebx,0x8
c0026aca:	80 e2 7f             	and    dl,0x7f
c0026acd:	0f 95 c2             	setne  dl
c0026ad0:	09 da                	or     edx,ebx
c0026ad2:	83 e2 01             	and    edx,0x1
c0026ad5:	c1 e8 07             	shr    eax,0x7
c0026ad8:	21 c2                	and    edx,eax
c0026ada:	b8 9e 01 00 00       	mov    eax,0x19e
c0026adf:	29 c8                	sub    eax,ecx
c0026ae1:	c1 e0 17             	shl    eax,0x17
c0026ae4:	09 d8                	or     eax,ebx
c0026ae6:	01 d0                	add    eax,edx
c0026ae8:	5b                   	pop    ebx
c0026ae9:	5d                   	pop    ebp
c0026aea:	c3                   	ret    

c0026aeb <__floatunsisf>:
c0026aeb:	55                   	push   ebp
c0026aec:	89 e5                	mov    ebp,esp
c0026aee:	53                   	push   ebx
c0026aef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026af2:	31 c0                	xor    eax,eax
c0026af4:	85 d2                	test   edx,edx
c0026af6:	74 32                	je     c0026b2a <__floatunsisf+0x3f>
c0026af8:	0f bd ca             	bsr    ecx,edx
c0026afb:	83 f1 1f             	xor    ecx,0x1f
c0026afe:	d3 e2                	shl    edx,cl
c0026b00:	89 d0                	mov    eax,edx
c0026b02:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b07:	89 c3                	mov    ebx,eax
c0026b09:	c1 eb 08             	shr    ebx,0x8
c0026b0c:	80 e2 7f             	and    dl,0x7f
c0026b0f:	0f 95 c2             	setne  dl
c0026b12:	09 da                	or     edx,ebx
c0026b14:	83 e2 01             	and    edx,0x1
c0026b17:	c1 e8 07             	shr    eax,0x7
c0026b1a:	21 c2                	and    edx,eax
c0026b1c:	b8 9e 00 00 00       	mov    eax,0x9e
c0026b21:	29 c8                	sub    eax,ecx
c0026b23:	c1 e0 17             	shl    eax,0x17
c0026b26:	09 d8                	or     eax,ebx
c0026b28:	01 d0                	add    eax,edx
c0026b2a:	5b                   	pop    ebx
c0026b2b:	5d                   	pop    ebp
c0026b2c:	c3                   	ret    

c0026b2d <__fixsfsi>:
c0026b2d:	55                   	push   ebp
c0026b2e:	89 e5                	mov    ebp,esp
c0026b30:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026b33:	89 d1                	mov    ecx,edx
c0026b35:	c1 e1 08             	shl    ecx,0x8
c0026b38:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026b3e:	c1 fa 17             	sar    edx,0x17
c0026b41:	78 1c                	js     c0026b5f <__fixsfsi+0x32>
c0026b43:	83 ea 7f             	sub    edx,0x7f
c0026b46:	31 c0                	xor    eax,eax
c0026b48:	83 fa 1e             	cmp    edx,0x1e
c0026b4b:	77 40                	ja     c0026b8d <__fixsfsi+0x60>
c0026b4d:	89 c8                	mov    eax,ecx
c0026b4f:	0d 00 00 00 80       	or     eax,0x80000000
c0026b54:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026b59:	29 d1                	sub    ecx,edx
c0026b5b:	d3 e8                	shr    eax,cl
c0026b5d:	eb 2e                	jmp    c0026b8d <__fixsfsi+0x60>
c0026b5f:	31 c0                	xor    eax,eax
c0026b61:	81 c2 81 00 00 00    	add    edx,0x81
c0026b67:	78 24                	js     c0026b8d <__fixsfsi+0x60>
c0026b69:	83 fa 1e             	cmp    edx,0x1e
c0026b6c:	7e 09                	jle    c0026b77 <__fixsfsi+0x4a>
c0026b6e:	83 fa 1f             	cmp    edx,0x1f
c0026b71:	75 18                	jne    c0026b8b <__fixsfsi+0x5e>
c0026b73:	85 c9                	test   ecx,ecx
c0026b75:	75 14                	jne    c0026b8b <__fixsfsi+0x5e>
c0026b77:	89 c8                	mov    eax,ecx
c0026b79:	0d 00 00 00 80       	or     eax,0x80000000
c0026b7e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026b83:	29 d1                	sub    ecx,edx
c0026b85:	d3 e8                	shr    eax,cl
c0026b87:	f7 d8                	neg    eax
c0026b89:	eb 02                	jmp    c0026b8d <__fixsfsi+0x60>
c0026b8b:	31 c0                	xor    eax,eax
c0026b8d:	5d                   	pop    ebp
c0026b8e:	c3                   	ret    

c0026b8f <__fixunssfsi>:
c0026b8f:	55                   	push   ebp
c0026b90:	89 e5                	mov    ebp,esp
c0026b92:	53                   	push   ebx
c0026b93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026b96:	89 d3                	mov    ebx,edx
c0026b98:	c1 fb 17             	sar    ebx,0x17
c0026b9b:	83 eb 7f             	sub    ebx,0x7f
c0026b9e:	31 c0                	xor    eax,eax
c0026ba0:	83 fb 1f             	cmp    ebx,0x1f
c0026ba3:	77 18                	ja     c0026bbd <__fixunssfsi+0x2e>
c0026ba5:	89 d0                	mov    eax,edx
c0026ba7:	c1 e0 08             	shl    eax,0x8
c0026baa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026baf:	0d 00 00 00 80       	or     eax,0x80000000
c0026bb4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026bb9:	29 d9                	sub    ecx,ebx
c0026bbb:	d3 e8                	shr    eax,cl
c0026bbd:	5b                   	pop    ebx
c0026bbe:	5d                   	pop    ebp
c0026bbf:	c3                   	ret    

c0026bc0 <__cmpsf2>:
c0026bc0:	55                   	push   ebp
c0026bc1:	89 e5                	mov    ebp,esp
c0026bc3:	57                   	push   edi
c0026bc4:	56                   	push   esi
c0026bc5:	53                   	push   ebx
c0026bc6:	83 ec 24             	sub    esp,0x24
c0026bc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bcf:	e8 4f 10 00 00       	call   c0027c23 <__truncdfsf2>
c0026bd4:	5a                   	pop    edx
c0026bd5:	59                   	pop    ecx
c0026bd6:	89 c3                	mov    ebx,eax
c0026bd8:	c1 e8 17             	shr    eax,0x17
c0026bdb:	0f b6 f0             	movzx  esi,al
c0026bde:	89 d8                	mov    eax,ebx
c0026be0:	c1 e8 1f             	shr    eax,0x1f
c0026be3:	31 c6                	xor    esi,eax
c0026be5:	c1 e3 08             	shl    ebx,0x8
c0026be8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026beb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026bee:	e8 30 10 00 00       	call   c0027c23 <__truncdfsf2>
c0026bf3:	83 c4 10             	add    esp,0x10
c0026bf6:	89 c1                	mov    ecx,eax
c0026bf8:	c1 e9 17             	shr    ecx,0x17
c0026bfb:	0f b6 c9             	movzx  ecx,cl
c0026bfe:	89 c7                	mov    edi,eax
c0026c00:	c1 ef 1f             	shr    edi,0x1f
c0026c03:	89 ca                	mov    edx,ecx
c0026c05:	31 fa                	xor    edx,edi
c0026c07:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026c0a:	c1 e0 08             	shl    eax,0x8
c0026c0d:	89 c2                	mov    edx,eax
c0026c0f:	89 d8                	mov    eax,ebx
c0026c11:	09 d0                	or     eax,edx
c0026c13:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c18:	09 f0                	or     eax,esi
c0026c1a:	75 08                	jne    c0026c24 <__cmpsf2+0x64>
c0026c1c:	31 c0                	xor    eax,eax
c0026c1e:	39 f9                	cmp    ecx,edi
c0026c20:	75 0c                	jne    c0026c2e <__cmpsf2+0x6e>
c0026c22:	eb 29                	jmp    c0026c4d <__cmpsf2+0x8d>
c0026c24:	b8 01 00 00 00       	mov    eax,0x1
c0026c29:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026c2c:	7f 1f                	jg     c0026c4d <__cmpsf2+0x8d>
c0026c2e:	83 c8 ff             	or     eax,0xffffffff
c0026c31:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026c34:	7c 17                	jl     c0026c4d <__cmpsf2+0x8d>
c0026c36:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c3c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c42:	b8 01 00 00 00       	mov    eax,0x1
c0026c47:	39 d3                	cmp    ebx,edx
c0026c49:	77 02                	ja     c0026c4d <__cmpsf2+0x8d>
c0026c4b:	19 c0                	sbb    eax,eax
c0026c4d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026c50:	5b                   	pop    ebx
c0026c51:	5e                   	pop    esi
c0026c52:	5f                   	pop    edi
c0026c53:	5d                   	pop    ebp
c0026c54:	c3                   	ret    

c0026c55 <__eqsf2>:
c0026c55:	55                   	push   ebp
c0026c56:	89 e5                	mov    ebp,esp
c0026c58:	83 ec 24             	sub    esp,0x24
c0026c5b:	6a 01                	push   0x1
c0026c5d:	83 ec 0c             	sub    esp,0xc
c0026c60:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c63:	e8 df 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026c68:	83 c4 10             	add    esp,0x10
c0026c6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c6e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026c71:	52                   	push   edx
c0026c72:	50                   	push   eax
c0026c73:	50                   	push   eax
c0026c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c77:	e8 cb 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026c7c:	59                   	pop    ecx
c0026c7d:	59                   	pop    ecx
c0026c7e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c81:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026c84:	52                   	push   edx
c0026c85:	50                   	push   eax
c0026c86:	e8 35 ff ff ff       	call   c0026bc0 <__cmpsf2>
c0026c8b:	83 c4 20             	add    esp,0x20
c0026c8e:	c9                   	leave  
c0026c8f:	c3                   	ret    

c0026c90 <__nesf2>:
c0026c90:	eb c3                	jmp    c0026c55 <__eqsf2>

c0026c92 <__gtsf2>:
c0026c92:	55                   	push   ebp
c0026c93:	89 e5                	mov    ebp,esp
c0026c95:	83 ec 24             	sub    esp,0x24
c0026c98:	6a ff                	push   0xffffffff
c0026c9a:	83 ec 0c             	sub    esp,0xc
c0026c9d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ca0:	e8 a2 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026ca5:	83 c4 10             	add    esp,0x10
c0026ca8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026cab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026cae:	52                   	push   edx
c0026caf:	50                   	push   eax
c0026cb0:	50                   	push   eax
c0026cb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026cb4:	e8 8e 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026cb9:	59                   	pop    ecx
c0026cba:	59                   	pop    ecx
c0026cbb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026cbe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026cc1:	52                   	push   edx
c0026cc2:	50                   	push   eax
c0026cc3:	e8 f8 fe ff ff       	call   c0026bc0 <__cmpsf2>
c0026cc8:	83 c4 20             	add    esp,0x20
c0026ccb:	c9                   	leave  
c0026ccc:	c3                   	ret    

c0026ccd <__gesf2>:
c0026ccd:	eb c3                	jmp    c0026c92 <__gtsf2>

c0026ccf <__ltsf2>:
c0026ccf:	eb 84                	jmp    c0026c55 <__eqsf2>

c0026cd1 <__lesf2>:
c0026cd1:	eb 82                	jmp    c0026c55 <__eqsf2>

c0026cd3 <__adddf3>:
c0026cd3:	55                   	push   ebp
c0026cd4:	89 e5                	mov    ebp,esp
c0026cd6:	57                   	push   edi
c0026cd7:	56                   	push   esi
c0026cd8:	53                   	push   ebx
c0026cd9:	83 ec 24             	sub    esp,0x24
c0026cdc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026cdf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026ce2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026ce5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ce8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026ceb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026cee:	89 c8                	mov    eax,ecx
c0026cf0:	89 ce                	mov    esi,ecx
c0026cf2:	c1 fe 14             	sar    esi,0x14
c0026cf5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026cf8:	89 fb                	mov    ebx,edi
c0026cfa:	89 fa                	mov    edx,edi
c0026cfc:	c1 e2 0b             	shl    edx,0xb
c0026cff:	c1 e0 0b             	shl    eax,0xb
c0026d02:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026d07:	c1 eb 15             	shr    ebx,0x15
c0026d0a:	09 d8                	or     eax,ebx
c0026d0c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026d0f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026d12:	c1 fe 14             	sar    esi,0x14
c0026d15:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026d18:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d1b:	89 f3                	mov    ebx,esi
c0026d1d:	c1 e3 0b             	shl    ebx,0xb
c0026d20:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026d23:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026d26:	c1 e3 0b             	shl    ebx,0xb
c0026d29:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0026d2f:	c1 ee 15             	shr    esi,0x15
c0026d32:	09 f3                	or     ebx,esi
c0026d34:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026d37:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026d3a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0026d3d:	0f 88 5f 02 00 00    	js     c0026fa2 <__adddf3+0x2cf>
c0026d43:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026d46:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026d49:	85 db                	test   ebx,ebx
c0026d4b:	0f 8e c7 00 00 00    	jle    c0026e18 <__adddf3+0x145>
c0026d51:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026d58:	75 1a                	jne    c0026d74 <__adddf3+0xa1>
c0026d5a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d5d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026d60:	0f 84 b2 05 00 00    	je     c0027318 <__adddf3+0x645>
c0026d66:	4b                   	dec    ebx
c0026d67:	75 23                	jne    c0026d8c <__adddf3+0xb9>
c0026d69:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026d6c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026d6f:	e9 99 00 00 00       	jmp    c0026e0d <__adddf3+0x13a>
c0026d74:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026d77:	f7 d6                	not    esi
c0026d79:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026d7f:	0f 84 93 05 00 00    	je     c0027318 <__adddf3+0x645>
c0026d85:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026d8c:	83 fb 1f             	cmp    ebx,0x1f
c0026d8f:	7e 42                	jle    c0026dd3 <__adddf3+0x100>
c0026d91:	83 fb 3f             	cmp    ebx,0x3f
c0026d94:	0f 8f 7e 05 00 00    	jg     c0027318 <__adddf3+0x645>
c0026d9a:	83 e3 1f             	and    ebx,0x1f
c0026d9d:	89 d9                	mov    ecx,ebx
c0026d9f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026da2:	d3 ef                	shr    edi,cl
c0026da4:	31 db                	xor    ebx,ebx
c0026da6:	85 c9                	test   ecx,ecx
c0026da8:	74 15                	je     c0026dbf <__adddf3+0xec>
c0026daa:	be 20 00 00 00       	mov    esi,0x20
c0026daf:	29 ce                	sub    esi,ecx
c0026db1:	89 f1                	mov    ecx,esi
c0026db3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026db6:	d3 e6                	shl    esi,cl
c0026db8:	31 db                	xor    ebx,ebx
c0026dba:	85 f6                	test   esi,esi
c0026dbc:	0f 95 c3             	setne  bl
c0026dbf:	31 c9                	xor    ecx,ecx
c0026dc1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026dc5:	0f 95 c1             	setne  cl
c0026dc8:	09 cf                	or     edi,ecx
c0026dca:	09 fb                	or     ebx,edi
c0026dcc:	01 da                	add    edx,ebx
c0026dce:	83 d0 00             	adc    eax,0x0
c0026dd1:	eb 3a                	jmp    c0026e0d <__adddf3+0x13a>
c0026dd3:	bf 20 00 00 00       	mov    edi,0x20
c0026dd8:	29 df                	sub    edi,ebx
c0026dda:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026ddd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026de0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026de3:	d3 e6                	shl    esi,cl
c0026de5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026de8:	88 d9                	mov    cl,bl
c0026dea:	d3 ef                	shr    edi,cl
c0026dec:	09 fe                	or     esi,edi
c0026dee:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026df1:	88 d9                	mov    cl,bl
c0026df3:	d3 ef                	shr    edi,cl
c0026df5:	89 fb                	mov    ebx,edi
c0026df7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026dfa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026dfd:	d3 e7                	shl    edi,cl
c0026dff:	85 ff                	test   edi,edi
c0026e01:	0f 95 c1             	setne  cl
c0026e04:	0f b6 c9             	movzx  ecx,cl
c0026e07:	09 ce                	or     esi,ecx
c0026e09:	01 f2                	add    edx,esi
c0026e0b:	11 d8                	adc    eax,ebx
c0026e0d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026e10:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026e13:	e9 52 01 00 00       	jmp    c0026f6a <__adddf3+0x297>
c0026e18:	0f 84 d5 00 00 00    	je     c0026ef3 <__adddf3+0x220>
c0026e1e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026e21:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026e24:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026e27:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026e2a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026e31:	75 20                	jne    c0026e53 <__adddf3+0x180>
c0026e33:	89 d6                	mov    esi,edx
c0026e35:	09 c6                	or     esi,eax
c0026e37:	0f 84 db 04 00 00    	je     c0027318 <__adddf3+0x645>
c0026e3d:	4b                   	dec    ebx
c0026e3e:	75 29                	jne    c0026e69 <__adddf3+0x196>
c0026e40:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026e43:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e46:	01 d1                	add    ecx,edx
c0026e48:	11 c6                	adc    esi,eax
c0026e4a:	89 f0                	mov    eax,esi
c0026e4c:	89 ca                	mov    edx,ecx
c0026e4e:	e9 17 01 00 00       	jmp    c0026f6a <__adddf3+0x297>
c0026e53:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026e56:	f7 d6                	not    esi
c0026e58:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026e5e:	0f 84 b4 04 00 00    	je     c0027318 <__adddf3+0x645>
c0026e64:	0d 00 00 00 80       	or     eax,0x80000000
c0026e69:	83 fb 1f             	cmp    ebx,0x1f
c0026e6c:	7e 48                	jle    c0026eb6 <__adddf3+0x1e3>
c0026e6e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026e71:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026e74:	83 fb 3f             	cmp    ebx,0x3f
c0026e77:	0f 8f 9b 04 00 00    	jg     c0027318 <__adddf3+0x645>
c0026e7d:	83 e3 1f             	and    ebx,0x1f
c0026e80:	89 d9                	mov    ecx,ebx
c0026e82:	89 c7                	mov    edi,eax
c0026e84:	d3 ef                	shr    edi,cl
c0026e86:	31 db                	xor    ebx,ebx
c0026e88:	85 c9                	test   ecx,ecx
c0026e8a:	74 12                	je     c0026e9e <__adddf3+0x1cb>
c0026e8c:	be 20 00 00 00       	mov    esi,0x20
c0026e91:	29 ce                	sub    esi,ecx
c0026e93:	89 f1                	mov    ecx,esi
c0026e95:	d3 e0                	shl    eax,cl
c0026e97:	31 db                	xor    ebx,ebx
c0026e99:	85 c0                	test   eax,eax
c0026e9b:	0f 95 c3             	setne  bl
c0026e9e:	31 c0                	xor    eax,eax
c0026ea0:	85 d2                	test   edx,edx
c0026ea2:	0f 95 c0             	setne  al
c0026ea5:	09 c7                	or     edi,eax
c0026ea7:	09 fb                	or     ebx,edi
c0026ea9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026eac:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026eaf:	01 da                	add    edx,ebx
c0026eb1:	83 d6 00             	adc    esi,0x0
c0026eb4:	eb 39                	jmp    c0026eef <__adddf3+0x21c>
c0026eb6:	be 20 00 00 00       	mov    esi,0x20
c0026ebb:	29 de                	sub    esi,ebx
c0026ebd:	89 c7                	mov    edi,eax
c0026ebf:	89 f1                	mov    ecx,esi
c0026ec1:	d3 e7                	shl    edi,cl
c0026ec3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026ec6:	89 d7                	mov    edi,edx
c0026ec8:	88 d9                	mov    cl,bl
c0026eca:	d3 ef                	shr    edi,cl
c0026ecc:	89 f9                	mov    ecx,edi
c0026ece:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026ed1:	09 cf                	or     edi,ecx
c0026ed3:	88 d9                	mov    cl,bl
c0026ed5:	d3 e8                	shr    eax,cl
c0026ed7:	89 f1                	mov    ecx,esi
c0026ed9:	d3 e2                	shl    edx,cl
c0026edb:	85 d2                	test   edx,edx
c0026edd:	0f 95 c2             	setne  dl
c0026ee0:	0f b6 d2             	movzx  edx,dl
c0026ee3:	09 d7                	or     edi,edx
c0026ee5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ee8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026eeb:	01 fa                	add    edx,edi
c0026eed:	11 c6                	adc    esi,eax
c0026eef:	89 f0                	mov    eax,esi
c0026ef1:	eb 77                	jmp    c0026f6a <__adddf3+0x297>
c0026ef3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026ef6:	46                   	inc    esi
c0026ef7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026efa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026f00:	75 41                	jne    c0026f43 <__adddf3+0x270>
c0026f02:	89 d3                	mov    ebx,edx
c0026f04:	09 c3                	or     ebx,eax
c0026f06:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026f0d:	75 27                	jne    c0026f36 <__adddf3+0x263>
c0026f0f:	85 db                	test   ebx,ebx
c0026f11:	0f 84 fb 03 00 00    	je     c0027312 <__adddf3+0x63f>
c0026f17:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026f1a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026f1d:	0f 84 f5 03 00 00    	je     c0027318 <__adddf3+0x645>
c0026f23:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026f26:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026f29:	85 c0                	test   eax,eax
c0026f2b:	0f 89 91 03 00 00    	jns    c00272c2 <__adddf3+0x5ef>
c0026f31:	e9 85 03 00 00       	jmp    c00272bb <__adddf3+0x5e8>
c0026f36:	85 db                	test   ebx,ebx
c0026f38:	0f 85 da 03 00 00    	jne    c0027318 <__adddf3+0x645>
c0026f3e:	e9 cf 03 00 00       	jmp    c0027312 <__adddf3+0x63f>
c0026f43:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026f46:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026f49:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f4c:	f7 d1                	not    ecx
c0026f4e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026f54:	0f 84 70 03 00 00    	je     c00272ca <__adddf3+0x5f7>
c0026f5a:	d1 ea                	shr    edx,1
c0026f5c:	89 c1                	mov    ecx,eax
c0026f5e:	c1 e1 1f             	shl    ecx,0x1f
c0026f61:	09 ca                	or     edx,ecx
c0026f63:	d1 e8                	shr    eax,1
c0026f65:	e9 6f 03 00 00       	jmp    c00272d9 <__adddf3+0x606>
c0026f6a:	85 c0                	test   eax,eax
c0026f6c:	0f 89 67 03 00 00    	jns    c00272d9 <__adddf3+0x606>
c0026f72:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026f75:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f78:	f7 d1                	not    ecx
c0026f7a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026f80:	0f 84 44 03 00 00    	je     c00272ca <__adddf3+0x5f7>
c0026f86:	89 d1                	mov    ecx,edx
c0026f88:	d1 e9                	shr    ecx,1
c0026f8a:	83 e2 01             	and    edx,0x1
c0026f8d:	09 ca                	or     edx,ecx
c0026f8f:	89 c1                	mov    ecx,eax
c0026f91:	c1 e1 1f             	shl    ecx,0x1f
c0026f94:	09 ca                	or     edx,ecx
c0026f96:	d1 e8                	shr    eax,1
c0026f98:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026f9d:	e9 37 03 00 00       	jmp    c00272d9 <__adddf3+0x606>
c0026fa2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026fa5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026fab:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0026fae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026fb1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026fb7:	29 de                	sub    esi,ebx
c0026fb9:	85 f6                	test   esi,esi
c0026fbb:	0f 8e bd 00 00 00    	jle    c002707e <__adddf3+0x3ab>
c0026fc1:	85 db                	test   ebx,ebx
c0026fc3:	75 17                	jne    c0026fdc <__adddf3+0x309>
c0026fc5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026fc8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026fcb:	0f 84 47 03 00 00    	je     c0027318 <__adddf3+0x645>
c0026fd1:	4e                   	dec    esi
c0026fd2:	75 20                	jne    c0026ff4 <__adddf3+0x321>
c0026fd4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026fd7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026fda:	eb 5b                	jmp    c0027037 <__adddf3+0x364>
c0026fdc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026fdf:	f7 d3                	not    ebx
c0026fe1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026fe7:	0f 84 2b 03 00 00    	je     c0027318 <__adddf3+0x645>
c0026fed:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026ff4:	83 fe 1f             	cmp    esi,0x1f
c0026ff7:	7e 49                	jle    c0027042 <__adddf3+0x36f>
c0026ff9:	83 fe 3f             	cmp    esi,0x3f
c0026ffc:	0f 8f 16 03 00 00    	jg     c0027318 <__adddf3+0x645>
c0027002:	83 e6 1f             	and    esi,0x1f
c0027005:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027008:	89 f1                	mov    ecx,esi
c002700a:	d3 ef                	shr    edi,cl
c002700c:	31 db                	xor    ebx,ebx
c002700e:	85 f6                	test   esi,esi
c0027010:	74 13                	je     c0027025 <__adddf3+0x352>
c0027012:	b9 20 00 00 00       	mov    ecx,0x20
c0027017:	29 f1                	sub    ecx,esi
c0027019:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002701c:	d3 e6                	shl    esi,cl
c002701e:	31 db                	xor    ebx,ebx
c0027020:	85 f6                	test   esi,esi
c0027022:	0f 95 c3             	setne  bl
c0027025:	31 c9                	xor    ecx,ecx
c0027027:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002702b:	0f 95 c1             	setne  cl
c002702e:	09 cf                	or     edi,ecx
c0027030:	09 fb                	or     ebx,edi
c0027032:	29 da                	sub    edx,ebx
c0027034:	83 d8 00             	sbb    eax,0x0
c0027037:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002703a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002703d:	e9 aa 01 00 00       	jmp    c00271ec <__adddf3+0x519>
c0027042:	bf 20 00 00 00       	mov    edi,0x20
c0027047:	29 f7                	sub    edi,esi
c0027049:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002704c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002704f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027052:	d3 e3                	shl    ebx,cl
c0027054:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027057:	89 f1                	mov    ecx,esi
c0027059:	d3 ef                	shr    edi,cl
c002705b:	09 fb                	or     ebx,edi
c002705d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027060:	89 f1                	mov    ecx,esi
c0027062:	d3 ef                	shr    edi,cl
c0027064:	89 fe                	mov    esi,edi
c0027066:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027069:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002706c:	d3 e7                	shl    edi,cl
c002706e:	85 ff                	test   edi,edi
c0027070:	0f 95 c1             	setne  cl
c0027073:	0f b6 c9             	movzx  ecx,cl
c0027076:	09 cb                	or     ebx,ecx
c0027078:	29 da                	sub    edx,ebx
c002707a:	19 f0                	sbb    eax,esi
c002707c:	eb b9                	jmp    c0027037 <__adddf3+0x364>
c002707e:	0f 84 cd 00 00 00    	je     c0027151 <__adddf3+0x47e>
c0027084:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027087:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002708a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002708d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027091:	75 1b                	jne    c00270ae <__adddf3+0x3db>
c0027093:	89 d6                	mov    esi,edx
c0027095:	09 c6                	or     esi,eax
c0027097:	0f 84 7b 02 00 00    	je     c0027318 <__adddf3+0x645>
c002709d:	4b                   	dec    ebx
c002709e:	75 24                	jne    c00270c4 <__adddf3+0x3f1>
c00270a0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00270a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270a6:	29 d1                	sub    ecx,edx
c00270a8:	19 c6                	sbb    esi,eax
c00270aa:	89 ca                	mov    edx,ecx
c00270ac:	eb 61                	jmp    c002710f <__adddf3+0x43c>
c00270ae:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00270b1:	f7 d6                	not    esi
c00270b3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00270b9:	0f 84 59 02 00 00    	je     c0027318 <__adddf3+0x645>
c00270bf:	0d 00 00 00 80       	or     eax,0x80000000
c00270c4:	83 fb 1f             	cmp    ebx,0x1f
c00270c7:	7e 4d                	jle    c0027116 <__adddf3+0x443>
c00270c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00270cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00270cf:	83 fb 3f             	cmp    ebx,0x3f
c00270d2:	0f 8f 40 02 00 00    	jg     c0027318 <__adddf3+0x645>
c00270d8:	83 e3 1f             	and    ebx,0x1f
c00270db:	89 d9                	mov    ecx,ebx
c00270dd:	89 c7                	mov    edi,eax
c00270df:	d3 ef                	shr    edi,cl
c00270e1:	31 db                	xor    ebx,ebx
c00270e3:	85 c9                	test   ecx,ecx
c00270e5:	74 12                	je     c00270f9 <__adddf3+0x426>
c00270e7:	be 20 00 00 00       	mov    esi,0x20
c00270ec:	29 ce                	sub    esi,ecx
c00270ee:	89 f1                	mov    ecx,esi
c00270f0:	d3 e0                	shl    eax,cl
c00270f2:	31 db                	xor    ebx,ebx
c00270f4:	85 c0                	test   eax,eax
c00270f6:	0f 95 c3             	setne  bl
c00270f9:	31 c0                	xor    eax,eax
c00270fb:	85 d2                	test   edx,edx
c00270fd:	0f 95 c0             	setne  al
c0027100:	09 c7                	or     edi,eax
c0027102:	09 fb                	or     ebx,edi
c0027104:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027107:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002710a:	29 da                	sub    edx,ebx
c002710c:	83 de 00             	sbb    esi,0x0
c002710f:	89 f0                	mov    eax,esi
c0027111:	e9 d6 00 00 00       	jmp    c00271ec <__adddf3+0x519>
c0027116:	be 20 00 00 00       	mov    esi,0x20
c002711b:	29 de                	sub    esi,ebx
c002711d:	89 c7                	mov    edi,eax
c002711f:	89 f1                	mov    ecx,esi
c0027121:	d3 e7                	shl    edi,cl
c0027123:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027126:	89 d7                	mov    edi,edx
c0027128:	88 d9                	mov    cl,bl
c002712a:	d3 ef                	shr    edi,cl
c002712c:	89 f9                	mov    ecx,edi
c002712e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027131:	09 cf                	or     edi,ecx
c0027133:	88 d9                	mov    cl,bl
c0027135:	d3 e8                	shr    eax,cl
c0027137:	89 f1                	mov    ecx,esi
c0027139:	d3 e2                	shl    edx,cl
c002713b:	85 d2                	test   edx,edx
c002713d:	0f 95 c2             	setne  dl
c0027140:	0f b6 d2             	movzx  edx,dl
c0027143:	09 d7                	or     edi,edx
c0027145:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027148:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002714b:	29 fa                	sub    edx,edi
c002714d:	19 c6                	sbb    esi,eax
c002714f:	eb be                	jmp    c002710f <__adddf3+0x43c>
c0027151:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027154:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027157:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002715d:	75 6a                	jne    c00271c9 <__adddf3+0x4f6>
c002715f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027163:	75 58                	jne    c00271bd <__adddf3+0x4ea>
c0027165:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027168:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002716b:	89 d6                	mov    esi,edx
c002716d:	09 c6                	or     esi,eax
c002716f:	75 17                	jne    c0027188 <__adddf3+0x4b5>
c0027171:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027174:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027177:	85 db                	test   ebx,ebx
c0027179:	0f 85 99 01 00 00    	jne    c0027318 <__adddf3+0x645>
c002717f:	31 ff                	xor    edi,edi
c0027181:	31 c9                	xor    ecx,ecx
c0027183:	e9 90 01 00 00       	jmp    c0027318 <__adddf3+0x645>
c0027188:	85 db                	test   ebx,ebx
c002718a:	0f 84 88 01 00 00    	je     c0027318 <__adddf3+0x645>
c0027190:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027193:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027196:	85 c0                	test   eax,eax
c0027198:	79 10                	jns    c00271aa <__adddf3+0x4d7>
c002719a:	31 c9                	xor    ecx,ecx
c002719c:	f7 da                	neg    edx
c002719e:	0f 95 c1             	setne  cl
c00271a1:	01 c8                	add    eax,ecx
c00271a3:	f7 d8                	neg    eax
c00271a5:	e9 2f 01 00 00       	jmp    c00272d9 <__adddf3+0x606>
c00271aa:	31 ff                	xor    edi,edi
c00271ac:	31 c9                	xor    ecx,ecx
c00271ae:	89 c3                	mov    ebx,eax
c00271b0:	09 d3                	or     ebx,edx
c00271b2:	0f 84 60 01 00 00    	je     c0027318 <__adddf3+0x645>
c00271b8:	e9 05 01 00 00       	jmp    c00272c2 <__adddf3+0x5ef>
c00271bd:	31 ff                	xor    edi,edi
c00271bf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00271c4:	e9 4f 01 00 00       	jmp    c0027318 <__adddf3+0x645>
c00271c9:	89 c1                	mov    ecx,eax
c00271cb:	89 d0                	mov    eax,edx
c00271cd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00271d0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00271d3:	89 ca                	mov    edx,ecx
c00271d5:	85 c9                	test   ecx,ecx
c00271d7:	79 2c                	jns    c0027205 <__adddf3+0x532>
c00271d9:	31 c9                	xor    ecx,ecx
c00271db:	f7 d8                	neg    eax
c00271dd:	0f 95 c1             	setne  cl
c00271e0:	01 ca                	add    edx,ecx
c00271e2:	f7 da                	neg    edx
c00271e4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00271e7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00271ea:	eb 19                	jmp    c0027205 <__adddf3+0x532>
c00271ec:	85 c0                	test   eax,eax
c00271ee:	0f 89 e5 00 00 00    	jns    c00272d9 <__adddf3+0x606>
c00271f4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271f9:	89 c1                	mov    ecx,eax
c00271fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00271fe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027201:	89 d0                	mov    eax,edx
c0027203:	89 ca                	mov    edx,ecx
c0027205:	85 d2                	test   edx,edx
c0027207:	74 59                	je     c0027262 <__adddf3+0x58f>
c0027209:	0f bd da             	bsr    ebx,edx
c002720c:	83 f3 1f             	xor    ebx,0x1f
c002720f:	88 d9                	mov    cl,bl
c0027211:	d3 e2                	shl    edx,cl
c0027213:	bf 20 00 00 00       	mov    edi,0x20
c0027218:	89 f9                	mov    ecx,edi
c002721a:	29 d9                	sub    ecx,ebx
c002721c:	89 c6                	mov    esi,eax
c002721e:	d3 ee                	shr    esi,cl
c0027220:	09 d6                	or     esi,edx
c0027222:	88 d9                	mov    cl,bl
c0027224:	d3 e0                	shl    eax,cl
c0027226:	89 c2                	mov    edx,eax
c0027228:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002722b:	25 ff 07 00 00       	and    eax,0x7ff
c0027230:	39 d8                	cmp    eax,ebx
c0027232:	7f 22                	jg     c0027256 <__adddf3+0x583>
c0027234:	29 c3                	sub    ebx,eax
c0027236:	43                   	inc    ebx
c0027237:	88 d9                	mov    cl,bl
c0027239:	d3 ea                	shr    edx,cl
c002723b:	29 df                	sub    edi,ebx
c002723d:	89 f9                	mov    ecx,edi
c002723f:	89 f0                	mov    eax,esi
c0027241:	d3 e0                	shl    eax,cl
c0027243:	09 c2                	or     edx,eax
c0027245:	89 f0                	mov    eax,esi
c0027247:	88 d9                	mov    cl,bl
c0027249:	d3 e8                	shr    eax,cl
c002724b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002724e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027254:	eb 6f                	jmp    c00272c5 <__adddf3+0x5f2>
c0027256:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027259:	29 d8                	sub    eax,ebx
c002725b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002725e:	89 f0                	mov    eax,esi
c0027260:	eb 59                	jmp    c00272bb <__adddf3+0x5e8>
c0027262:	85 c0                	test   eax,eax
c0027264:	74 6a                	je     c00272d0 <__adddf3+0x5fd>
c0027266:	0f bd c8             	bsr    ecx,eax
c0027269:	83 f1 1f             	xor    ecx,0x1f
c002726c:	d3 e0                	shl    eax,cl
c002726e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027271:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027277:	83 c1 20             	add    ecx,0x20
c002727a:	39 cb                	cmp    ebx,ecx
c002727c:	7f 35                	jg     c00272b3 <__adddf3+0x5e0>
c002727e:	29 d9                	sub    ecx,ebx
c0027280:	8d 71 01             	lea    esi,[ecx+0x1]
c0027283:	83 fe 1f             	cmp    esi,0x1f
c0027286:	7e 09                	jle    c0027291 <__adddf3+0x5be>
c0027288:	83 e9 1f             	sub    ecx,0x1f
c002728b:	d3 e8                	shr    eax,cl
c002728d:	89 c3                	mov    ebx,eax
c002728f:	eb 11                	jmp    c00272a2 <__adddf3+0x5cf>
c0027291:	b9 20 00 00 00       	mov    ecx,0x20
c0027296:	29 f1                	sub    ecx,esi
c0027298:	89 c3                	mov    ebx,eax
c002729a:	d3 e3                	shl    ebx,cl
c002729c:	89 f1                	mov    ecx,esi
c002729e:	d3 e8                	shr    eax,cl
c00272a0:	89 c2                	mov    edx,eax
c00272a2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00272a5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00272aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00272ad:	89 d0                	mov    eax,edx
c00272af:	89 da                	mov    edx,ebx
c00272b1:	eb 26                	jmp    c00272d9 <__adddf3+0x606>
c00272b3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272b6:	29 cf                	sub    edi,ecx
c00272b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272bb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272c0:	eb 17                	jmp    c00272d9 <__adddf3+0x606>
c00272c2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272c5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272c8:	eb 0f                	jmp    c00272d9 <__adddf3+0x606>
c00272ca:	31 d2                	xor    edx,edx
c00272cc:	31 c0                	xor    eax,eax
c00272ce:	eb 09                	jmp    c00272d9 <__adddf3+0x606>
c00272d0:	89 c2                	mov    edx,eax
c00272d2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00272d9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00272dc:	c1 e1 14             	shl    ecx,0x14
c00272df:	89 c3                	mov    ebx,eax
c00272e1:	c1 eb 0b             	shr    ebx,0xb
c00272e4:	09 d9                	or     ecx,ebx
c00272e6:	89 d3                	mov    ebx,edx
c00272e8:	c1 eb 0b             	shr    ebx,0xb
c00272eb:	c1 e0 15             	shl    eax,0x15
c00272ee:	09 d8                	or     eax,ebx
c00272f0:	89 c7                	mov    edi,eax
c00272f2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00272f8:	0f 95 c0             	setne  al
c00272fb:	89 c6                	mov    esi,eax
c00272fd:	09 f3                	or     ebx,esi
c00272ff:	83 e3 01             	and    ebx,0x1
c0027302:	c1 ea 0a             	shr    edx,0xa
c0027305:	21 da                	and    edx,ebx
c0027307:	89 f8                	mov    eax,edi
c0027309:	01 d0                	add    eax,edx
c002730b:	83 d1 00             	adc    ecx,0x0
c002730e:	89 c7                	mov    edi,eax
c0027310:	eb 06                	jmp    c0027318 <__adddf3+0x645>
c0027312:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027315:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027318:	89 f8                	mov    eax,edi
c002731a:	89 ca                	mov    edx,ecx
c002731c:	83 c4 24             	add    esp,0x24
c002731f:	5b                   	pop    ebx
c0027320:	5e                   	pop    esi
c0027321:	5f                   	pop    edi
c0027322:	5d                   	pop    ebp
c0027323:	c3                   	ret    

c0027324 <__subdf3>:
c0027324:	55                   	push   ebp
c0027325:	89 e5                	mov    ebp,esp
c0027327:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002732a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002732d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027333:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027336:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027339:	5d                   	pop    ebp
c002733a:	e9 94 f9 ff ff       	jmp    c0026cd3 <__adddf3>

c002733f <__negdf2>:
c002733f:	55                   	push   ebp
c0027340:	89 e5                	mov    ebp,esp
c0027342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027345:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027348:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002734e:	5d                   	pop    ebp
c002734f:	c3                   	ret    

c0027350 <__muldf3>:
c0027350:	55                   	push   ebp
c0027351:	89 e5                	mov    ebp,esp
c0027353:	57                   	push   edi
c0027354:	56                   	push   esi
c0027355:	53                   	push   ebx
c0027356:	83 ec 24             	sub    esp,0x24
c0027359:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002735c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002735f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027362:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027365:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027368:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002736b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002736e:	89 c8                	mov    eax,ecx
c0027370:	c1 f8 14             	sar    eax,0x14
c0027373:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027376:	89 f8                	mov    eax,edi
c0027378:	89 fb                	mov    ebx,edi
c002737a:	c1 e3 0b             	shl    ebx,0xb
c002737d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027380:	c1 e1 0b             	shl    ecx,0xb
c0027383:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027389:	c1 e8 15             	shr    eax,0x15
c002738c:	09 c1                	or     ecx,eax
c002738e:	89 d6                	mov    esi,edx
c0027390:	89 d0                	mov    eax,edx
c0027392:	c1 f8 14             	sar    eax,0x14
c0027395:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027398:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002739b:	89 c3                	mov    ebx,eax
c002739d:	c1 e3 0b             	shl    ebx,0xb
c00273a0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00273a3:	c1 e6 0b             	shl    esi,0xb
c00273a6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00273ac:	c1 e8 15             	shr    eax,0x15
c00273af:	09 c6                	or     esi,eax
c00273b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00273b4:	25 ff 07 00 00       	and    eax,0x7ff
c00273b9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00273bc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00273bf:	25 ff 07 00 00       	and    eax,0x7ff
c00273c4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00273c7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00273ca:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00273cd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00273d4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00273d7:	40                   	inc    eax
c00273d8:	a9 fe 07 00 00       	test   eax,0x7fe
c00273dd:	0f 85 8d 00 00 00    	jne    c0027470 <__muldf3+0x120>
c00273e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00273e6:	09 c8                	or     eax,ecx
c00273e8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00273ec:	74 44                	je     c0027432 <__muldf3+0xe2>
c00273ee:	85 c0                	test   eax,eax
c00273f0:	0f 85 31 02 00 00    	jne    c0027627 <__muldf3+0x2d7>
c00273f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00273f9:	40                   	inc    eax
c00273fa:	a9 fe 07 00 00       	test   eax,0x7fe
c00273ff:	75 13                	jne    c0027414 <__muldf3+0xc4>
c0027401:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027404:	09 f1                	or     ecx,esi
c0027406:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002740a:	74 22                	je     c002742e <__muldf3+0xde>
c002740c:	85 c9                	test   ecx,ecx
c002740e:	0f 85 0d 02 00 00    	jne    c0027621 <__muldf3+0x2d1>
c0027414:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027418:	0f 89 09 02 00 00    	jns    c0027627 <__muldf3+0x2d7>
c002741e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027421:	05 00 00 00 80       	add    eax,0x80000000
c0027426:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027429:	e9 f9 01 00 00       	jmp    c0027627 <__muldf3+0x2d7>
c002742e:	85 c9                	test   ecx,ecx
c0027430:	eb 2e                	jmp    c0027460 <__muldf3+0x110>
c0027432:	85 c0                	test   eax,eax
c0027434:	74 20                	je     c0027456 <__muldf3+0x106>
c0027436:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027439:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002743c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002743f:	c1 ef 1f             	shr    edi,0x1f
c0027442:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027445:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027448:	8d 43 ff             	lea    eax,[ebx-0x1]
c002744b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002744e:	09 f9                	or     ecx,edi
c0027450:	78 1e                	js     c0027470 <__muldf3+0x120>
c0027452:	89 c3                	mov    ebx,eax
c0027454:	eb e0                	jmp    c0027436 <__muldf3+0xe6>
c0027456:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027459:	f7 d0                	not    eax
c002745b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027460:	75 b2                	jne    c0027414 <__muldf3+0xc4>
c0027462:	31 ff                	xor    edi,edi
c0027464:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002746b:	e9 b7 01 00 00       	jmp    c0027627 <__muldf3+0x2d7>
c0027470:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027473:	40                   	inc    eax
c0027474:	a9 fe 07 00 00       	test   eax,0x7fe
c0027479:	75 57                	jne    c00274d2 <__muldf3+0x182>
c002747b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002747e:	09 f0                	or     eax,esi
c0027480:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027484:	74 23                	je     c00274a9 <__muldf3+0x159>
c0027486:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002748a:	0f 89 91 01 00 00    	jns    c0027621 <__muldf3+0x2d1>
c0027490:	85 c0                	test   eax,eax
c0027492:	0f 85 89 01 00 00    	jne    c0027621 <__muldf3+0x2d1>
c0027498:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002749b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00274a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00274a4:	e9 7e 01 00 00       	jmp    c0027627 <__muldf3+0x2d7>
c00274a9:	85 c0                	test   eax,eax
c00274ab:	75 0c                	jne    c00274b9 <__muldf3+0x169>
c00274ad:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00274b1:	0f 89 6a 01 00 00    	jns    c0027621 <__muldf3+0x2d1>
c00274b7:	eb df                	jmp    c0027498 <__muldf3+0x148>
c00274b9:	01 f6                	add    esi,esi
c00274bb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274be:	c1 ea 1f             	shr    edx,0x1f
c00274c1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00274c4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00274c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00274ca:	09 d6                	or     esi,edx
c00274cc:	78 04                	js     c00274d2 <__muldf3+0x182>
c00274ce:	89 c3                	mov    ebx,eax
c00274d0:	eb e7                	jmp    c00274b9 <__muldf3+0x169>
c00274d2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00274d8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00274de:	89 c8                	mov    eax,ecx
c00274e0:	f7 e6                	mul    esi
c00274e2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00274e5:	89 c7                	mov    edi,eax
c00274e7:	89 c8                	mov    eax,ecx
c00274e9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00274ec:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00274ef:	89 c1                	mov    ecx,eax
c00274f1:	89 f0                	mov    eax,esi
c00274f3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00274f6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00274f9:	89 c6                	mov    esi,eax
c00274fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00274fe:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027501:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027504:	31 c0                	xor    eax,eax
c0027506:	01 f1                	add    ecx,esi
c0027508:	0f 92 c0             	setb   al
c002750b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002750e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027511:	83 d6 00             	adc    esi,0x0
c0027514:	01 c7                	add    edi,eax
c0027516:	83 d6 00             	adc    esi,0x0
c0027519:	01 ca                	add    edx,ecx
c002751b:	0f 92 c1             	setb   cl
c002751e:	0f b6 c9             	movzx  ecx,cl
c0027521:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027524:	83 d6 00             	adc    esi,0x0
c0027527:	01 cf                	add    edi,ecx
c0027529:	83 d6 00             	adc    esi,0x0
c002752c:	31 c9                	xor    ecx,ecx
c002752e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027531:	0f 95 c1             	setne  cl
c0027534:	09 cf                	or     edi,ecx
c0027536:	85 f6                	test   esi,esi
c0027538:	78 0c                	js     c0027546 <__muldf3+0x1f6>
c002753a:	01 f6                	add    esi,esi
c002753c:	89 f8                	mov    eax,edi
c002753e:	c1 e8 1f             	shr    eax,0x1f
c0027541:	09 c6                	or     esi,eax
c0027543:	01 ff                	add    edi,edi
c0027545:	4b                   	dec    ebx
c0027546:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002754c:	0f 8f 85 00 00 00    	jg     c00275d7 <__muldf3+0x287>
c0027552:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027558:	85 db                	test   ebx,ebx
c002755a:	0f 8f 84 00 00 00    	jg     c00275e4 <__muldf3+0x294>
c0027560:	83 fb cc             	cmp    ebx,0xffffffcc
c0027563:	7c 79                	jl     c00275de <__muldf3+0x28e>
c0027565:	ba 01 00 00 00       	mov    edx,0x1
c002756a:	29 da                	sub    edx,ebx
c002756c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027572:	83 fa 1f             	cmp    edx,0x1f
c0027575:	7e 30                	jle    c00275a7 <__muldf3+0x257>
c0027577:	83 fa 20             	cmp    edx,0x20
c002757a:	75 0b                	jne    c0027587 <__muldf3+0x237>
c002757c:	31 c0                	xor    eax,eax
c002757e:	85 ff                	test   edi,edi
c0027580:	0f 95 c0             	setne  al
c0027583:	89 c7                	mov    edi,eax
c0027585:	eb 1a                	jmp    c00275a1 <__muldf3+0x251>
c0027587:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002758a:	89 f0                	mov    eax,esi
c002758c:	d3 e0                	shl    eax,cl
c002758e:	09 f8                	or     eax,edi
c0027590:	0f 95 c0             	setne  al
c0027593:	0f b6 c0             	movzx  eax,al
c0027596:	89 c7                	mov    edi,eax
c0027598:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002759d:	29 d9                	sub    ecx,ebx
c002759f:	d3 ee                	shr    esi,cl
c00275a1:	09 f7                	or     edi,esi
c00275a3:	31 db                	xor    ebx,ebx
c00275a5:	eb 3b                	jmp    c00275e2 <__muldf3+0x292>
c00275a7:	83 c3 1f             	add    ebx,0x1f
c00275aa:	89 f0                	mov    eax,esi
c00275ac:	88 d9                	mov    cl,bl
c00275ae:	d3 e0                	shl    eax,cl
c00275b0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00275b3:	89 f8                	mov    eax,edi
c00275b5:	88 d1                	mov    cl,dl
c00275b7:	d3 e8                	shr    eax,cl
c00275b9:	89 c1                	mov    ecx,eax
c00275bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00275be:	09 c8                	or     eax,ecx
c00275c0:	88 d9                	mov    cl,bl
c00275c2:	d3 e7                	shl    edi,cl
c00275c4:	31 db                	xor    ebx,ebx
c00275c6:	85 ff                	test   edi,edi
c00275c8:	0f 95 c3             	setne  bl
c00275cb:	89 df                	mov    edi,ebx
c00275cd:	09 c7                	or     edi,eax
c00275cf:	88 d1                	mov    cl,dl
c00275d1:	d3 ee                	shr    esi,cl
c00275d3:	31 db                	xor    ebx,ebx
c00275d5:	eb 0d                	jmp    c00275e4 <__muldf3+0x294>
c00275d7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00275dc:	eb 02                	jmp    c00275e0 <__muldf3+0x290>
c00275de:	31 db                	xor    ebx,ebx
c00275e0:	31 ff                	xor    edi,edi
c00275e2:	31 f6                	xor    esi,esi
c00275e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00275e7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00275ea:	25 00 f8 ff ff       	and    eax,0xfffff800
c00275ef:	09 c3                	or     ebx,eax
c00275f1:	c1 e3 14             	shl    ebx,0x14
c00275f4:	89 f0                	mov    eax,esi
c00275f6:	c1 e8 0b             	shr    eax,0xb
c00275f9:	09 c3                	or     ebx,eax
c00275fb:	89 f8                	mov    eax,edi
c00275fd:	c1 e8 0b             	shr    eax,0xb
c0027600:	c1 e6 15             	shl    esi,0x15
c0027603:	09 c6                	or     esi,eax
c0027605:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002760b:	0f 95 c1             	setne  cl
c002760e:	09 c8                	or     eax,ecx
c0027610:	83 e0 01             	and    eax,0x1
c0027613:	c1 ef 0a             	shr    edi,0xa
c0027616:	21 c7                	and    edi,eax
c0027618:	01 f7                	add    edi,esi
c002761a:	83 d3 00             	adc    ebx,0x0
c002761d:	89 da                	mov    edx,ebx
c002761f:	eb 03                	jmp    c0027624 <__muldf3+0x2d4>
c0027621:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027624:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027627:	89 f8                	mov    eax,edi
c0027629:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002762c:	83 c4 24             	add    esp,0x24
c002762f:	5b                   	pop    ebx
c0027630:	5e                   	pop    esi
c0027631:	5f                   	pop    edi
c0027632:	5d                   	pop    ebp
c0027633:	c3                   	ret    

c0027634 <__divdf3>:
c0027634:	55                   	push   ebp
c0027635:	89 e5                	mov    ebp,esp
c0027637:	57                   	push   edi
c0027638:	56                   	push   esi
c0027639:	53                   	push   ebx
c002763a:	83 ec 2c             	sub    esp,0x2c
c002763d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027640:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027643:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027646:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027649:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002764c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002764f:	89 ce                	mov    esi,ecx
c0027651:	89 c8                	mov    eax,ecx
c0027653:	c1 f8 14             	sar    eax,0x14
c0027656:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027659:	89 f8                	mov    eax,edi
c002765b:	89 fb                	mov    ebx,edi
c002765d:	c1 e3 0b             	shl    ebx,0xb
c0027660:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027663:	c1 e6 0b             	shl    esi,0xb
c0027666:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002766c:	c1 e8 15             	shr    eax,0x15
c002766f:	09 c6                	or     esi,eax
c0027671:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027674:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027677:	89 c2                	mov    edx,eax
c0027679:	c1 fa 14             	sar    edx,0x14
c002767c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002767f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027682:	89 de                	mov    esi,ebx
c0027684:	c1 e6 0b             	shl    esi,0xb
c0027687:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002768a:	c1 e0 0b             	shl    eax,0xb
c002768d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027692:	c1 eb 15             	shr    ebx,0x15
c0027695:	09 d8                	or     eax,ebx
c0027697:	89 c2                	mov    edx,eax
c0027699:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002769c:	25 ff 07 00 00       	and    eax,0x7ff
c00276a1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00276a4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00276a7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00276ad:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00276b0:	29 d8                	sub    eax,ebx
c00276b2:	05 ff 03 00 00       	add    eax,0x3ff
c00276b7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00276ba:	46                   	inc    esi
c00276bb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00276c1:	0f 85 a5 00 00 00    	jne    c002776c <__divdf3+0x138>
c00276c7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276ca:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00276cd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00276d1:	74 2a                	je     c00276fd <__divdf3+0xc9>
c00276d3:	85 f6                	test   esi,esi
c00276d5:	0f 85 cc 02 00 00    	jne    c00279a7 <__divdf3+0x373>
c00276db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276de:	40                   	inc    eax
c00276df:	a9 fe 07 00 00       	test   eax,0x7fe
c00276e4:	75 26                	jne    c002770c <__divdf3+0xd8>
c00276e6:	85 db                	test   ebx,ebx
c00276e8:	74 22                	je     c002770c <__divdf3+0xd8>
c00276ea:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00276ed:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00276f0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00276f3:	09 d0                	or     eax,edx
c00276f5:	0f 85 ac 02 00 00    	jne    c00279a7 <__divdf3+0x373>
c00276fb:	eb 63                	jmp    c0027760 <__divdf3+0x12c>
c00276fd:	85 f6                	test   esi,esi
c00276ff:	75 22                	jne    c0027723 <__divdf3+0xef>
c0027701:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027704:	40                   	inc    eax
c0027705:	a9 fe 07 00 00       	test   eax,0x7fe
c002770a:	74 36                	je     c0027742 <__divdf3+0x10e>
c002770c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027710:	0f 89 91 02 00 00    	jns    c00279a7 <__divdf3+0x373>
c0027716:	89 f8                	mov    eax,edi
c0027718:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002771e:	e9 80 02 00 00       	jmp    c00279a3 <__divdf3+0x36f>
c0027723:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027726:	01 f6                	add    esi,esi
c0027728:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002772b:	c1 ef 1f             	shr    edi,0x1f
c002772e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027731:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027734:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027737:	09 f7                	or     edi,esi
c0027739:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002773c:	78 2e                	js     c002776c <__divdf3+0x138>
c002773e:	89 c8                	mov    eax,ecx
c0027740:	eb e1                	jmp    c0027723 <__divdf3+0xef>
c0027742:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027745:	09 d0                	or     eax,edx
c0027747:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002774b:	74 0f                	je     c002775c <__divdf3+0x128>
c002774d:	85 c0                	test   eax,eax
c002774f:	74 bb                	je     c002770c <__divdf3+0xd8>
c0027751:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027754:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027757:	e9 4b 02 00 00       	jmp    c00279a7 <__divdf3+0x373>
c002775c:	85 c0                	test   eax,eax
c002775e:	75 ac                	jne    c002770c <__divdf3+0xd8>
c0027760:	31 ff                	xor    edi,edi
c0027762:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027767:	e9 3b 02 00 00       	jmp    c00279a7 <__divdf3+0x373>
c002776c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002776f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027772:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027778:	75 6b                	jne    c00277e5 <__divdf3+0x1b1>
c002777a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002777d:	09 d6                	or     esi,edx
c002777f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027783:	74 28                	je     c00277ad <__divdf3+0x179>
c0027785:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027788:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002778b:	85 f6                	test   esi,esi
c002778d:	0f 85 14 02 00 00    	jne    c00279a7 <__divdf3+0x373>
c0027793:	31 ff                	xor    edi,edi
c0027795:	31 c9                	xor    ecx,ecx
c0027797:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002779a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002779d:	0f 89 04 02 00 00    	jns    c00279a7 <__divdf3+0x373>
c00277a3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00277a8:	e9 fa 01 00 00       	jmp    c00279a7 <__divdf3+0x373>
c00277ad:	85 f6                	test   esi,esi
c00277af:	75 1b                	jne    c00277cc <__divdf3+0x198>
c00277b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00277b4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00277b7:	25 00 00 00 80       	and    eax,0x80000000
c00277bc:	31 c9                	xor    ecx,ecx
c00277be:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00277c3:	89 cf                	mov    edi,ecx
c00277c5:	89 c1                	mov    ecx,eax
c00277c7:	e9 db 01 00 00       	jmp    c00279a7 <__divdf3+0x373>
c00277cc:	01 d2                	add    edx,edx
c00277ce:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00277d1:	c1 eb 1f             	shr    ebx,0x1f
c00277d4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277d7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00277da:	8d 48 01             	lea    ecx,[eax+0x1]
c00277dd:	09 da                	or     edx,ebx
c00277df:	78 04                	js     c00277e5 <__divdf3+0x1b1>
c00277e1:	89 c8                	mov    eax,ecx
c00277e3:	eb e7                	jmp    c00277cc <__divdf3+0x198>
c00277e5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00277ee:	81 ca 00 00 00 80    	or     edx,0x80000000
c00277f4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00277f7:	39 d6                	cmp    esi,edx
c00277f9:	77 0d                	ja     c0027808 <__divdf3+0x1d4>
c00277fb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00277fe:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027801:	72 1b                	jb     c002781e <__divdf3+0x1ea>
c0027803:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027806:	75 16                	jne    c002781e <__divdf3+0x1ea>
c0027808:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002780b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002780e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027811:	83 de 00             	sbb    esi,0x0
c0027814:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027817:	ba 01 00 00 00       	mov    edx,0x1
c002781c:	eb 02                	jmp    c0027820 <__divdf3+0x1ec>
c002781e:	31 d2                	xor    edx,edx
c0027820:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027827:	31 ff                	xor    edi,edi
c0027829:	01 ff                	add    edi,edi
c002782b:	89 d1                	mov    ecx,edx
c002782d:	c1 e9 1f             	shr    ecx,0x1f
c0027830:	09 cf                	or     edi,ecx
c0027832:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027835:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027838:	89 da                	mov    edx,ebx
c002783a:	89 f3                	mov    ebx,esi
c002783c:	8d 34 36             	lea    esi,[esi+esi*1]
c002783f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027842:	c1 e9 1f             	shr    ecx,0x1f
c0027845:	09 ce                	or     esi,ecx
c0027847:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002784a:	01 c9                	add    ecx,ecx
c002784c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002784f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027852:	85 db                	test   ebx,ebx
c0027854:	78 29                	js     c002787f <__divdf3+0x24b>
c0027856:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027859:	72 07                	jb     c0027862 <__divdf3+0x22e>
c002785b:	75 3c                	jne    c0027899 <__divdf3+0x265>
c002785d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027860:	77 37                	ja     c0027899 <__divdf3+0x265>
c0027862:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027865:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027868:	31 d2                	xor    edx,edx
c002786a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002786d:	0f 97 c2             	seta   dl
c0027870:	29 d6                	sub    esi,edx
c0027872:	89 d9                	mov    ecx,ebx
c0027874:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027877:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002787a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002787d:	eb 17                	jmp    c0027896 <__divdf3+0x262>
c002787f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027882:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027885:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027888:	0f 97 c1             	seta   cl
c002788b:	0f b6 c9             	movzx  ecx,cl
c002788e:	29 ce                	sub    esi,ecx
c0027890:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027893:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027896:	83 ca 01             	or     edx,0x1
c0027899:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002789c:	75 8b                	jne    c0027829 <__divdf3+0x1f5>
c002789e:	c1 e7 09             	shl    edi,0x9
c00278a1:	89 d1                	mov    ecx,edx
c00278a3:	c1 e9 17             	shr    ecx,0x17
c00278a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00278a9:	09 f3                	or     ebx,esi
c00278ab:	0f 95 c3             	setne  bl
c00278ae:	0f b6 db             	movzx  ebx,bl
c00278b1:	c1 e2 09             	shl    edx,0x9
c00278b4:	09 d3                	or     ebx,edx
c00278b6:	89 ca                	mov    edx,ecx
c00278b8:	09 fa                	or     edx,edi
c00278ba:	78 0c                	js     c00278c8 <__divdf3+0x294>
c00278bc:	01 d2                	add    edx,edx
c00278be:	89 d9                	mov    ecx,ebx
c00278c0:	c1 e9 1f             	shr    ecx,0x1f
c00278c3:	09 ca                	or     edx,ecx
c00278c5:	01 db                	add    ebx,ebx
c00278c7:	48                   	dec    eax
c00278c8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00278cd:	0f 8f 83 00 00 00    	jg     c0027956 <__divdf3+0x322>
c00278d3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00278d9:	85 c0                	test   eax,eax
c00278db:	0f 8f 82 00 00 00    	jg     c0027963 <__divdf3+0x32f>
c00278e1:	83 f8 cc             	cmp    eax,0xffffffcc
c00278e4:	7c 77                	jl     c002795d <__divdf3+0x329>
c00278e6:	be 01 00 00 00       	mov    esi,0x1
c00278eb:	29 c6                	sub    esi,eax
c00278ed:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278f3:	83 fe 1f             	cmp    esi,0x1f
c00278f6:	7e 2f                	jle    c0027927 <__divdf3+0x2f3>
c00278f8:	83 fe 20             	cmp    esi,0x20
c00278fb:	75 0a                	jne    c0027907 <__divdf3+0x2d3>
c00278fd:	85 db                	test   ebx,ebx
c00278ff:	0f 95 c3             	setne  bl
c0027902:	0f b6 db             	movzx  ebx,bl
c0027905:	eb 1a                	jmp    c0027921 <__divdf3+0x2ed>
c0027907:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002790a:	89 d7                	mov    edi,edx
c002790c:	d3 e7                	shl    edi,cl
c002790e:	89 f9                	mov    ecx,edi
c0027910:	09 d9                	or     ecx,ebx
c0027912:	0f 95 c3             	setne  bl
c0027915:	0f b6 db             	movzx  ebx,bl
c0027918:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002791d:	29 c1                	sub    ecx,eax
c002791f:	d3 ea                	shr    edx,cl
c0027921:	09 d3                	or     ebx,edx
c0027923:	31 c0                	xor    eax,eax
c0027925:	eb 3a                	jmp    c0027961 <__divdf3+0x32d>
c0027927:	83 c0 1f             	add    eax,0x1f
c002792a:	89 d7                	mov    edi,edx
c002792c:	88 c1                	mov    cl,al
c002792e:	d3 e7                	shl    edi,cl
c0027930:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027933:	89 df                	mov    edi,ebx
c0027935:	89 f1                	mov    ecx,esi
c0027937:	d3 ef                	shr    edi,cl
c0027939:	89 f9                	mov    ecx,edi
c002793b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002793e:	09 cf                	or     edi,ecx
c0027940:	88 c1                	mov    cl,al
c0027942:	d3 e3                	shl    ebx,cl
c0027944:	85 db                	test   ebx,ebx
c0027946:	0f 95 c3             	setne  bl
c0027949:	0f b6 db             	movzx  ebx,bl
c002794c:	09 fb                	or     ebx,edi
c002794e:	89 f1                	mov    ecx,esi
c0027950:	d3 ea                	shr    edx,cl
c0027952:	31 c0                	xor    eax,eax
c0027954:	eb 0d                	jmp    c0027963 <__divdf3+0x32f>
c0027956:	b8 ff 07 00 00       	mov    eax,0x7ff
c002795b:	eb 02                	jmp    c002795f <__divdf3+0x32b>
c002795d:	31 c0                	xor    eax,eax
c002795f:	31 db                	xor    ebx,ebx
c0027961:	31 d2                	xor    edx,edx
c0027963:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027966:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027969:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002796f:	09 c8                	or     eax,ecx
c0027971:	c1 e0 14             	shl    eax,0x14
c0027974:	89 d1                	mov    ecx,edx
c0027976:	c1 e9 0b             	shr    ecx,0xb
c0027979:	09 c8                	or     eax,ecx
c002797b:	89 c6                	mov    esi,eax
c002797d:	89 d9                	mov    ecx,ebx
c002797f:	c1 e9 0b             	shr    ecx,0xb
c0027982:	c1 e2 15             	shl    edx,0x15
c0027985:	09 ca                	or     edx,ecx
c0027987:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002798d:	0f 95 c0             	setne  al
c0027990:	09 c1                	or     ecx,eax
c0027992:	83 e1 01             	and    ecx,0x1
c0027995:	c1 eb 0a             	shr    ebx,0xa
c0027998:	21 cb                	and    ebx,ecx
c002799a:	01 d3                	add    ebx,edx
c002799c:	89 d8                	mov    eax,ebx
c002799e:	83 d6 00             	adc    esi,0x0
c00279a1:	89 f2                	mov    edx,esi
c00279a3:	89 c7                	mov    edi,eax
c00279a5:	89 d1                	mov    ecx,edx
c00279a7:	89 f8                	mov    eax,edi
c00279a9:	89 ca                	mov    edx,ecx
c00279ab:	83 c4 2c             	add    esp,0x2c
c00279ae:	5b                   	pop    ebx
c00279af:	5e                   	pop    esi
c00279b0:	5f                   	pop    edi
c00279b1:	5d                   	pop    ebp
c00279b2:	c3                   	ret    

c00279b3 <__floatsidf>:
c00279b3:	55                   	push   ebp
c00279b4:	89 e5                	mov    ebp,esp
c00279b6:	56                   	push   esi
c00279b7:	53                   	push   ebx
c00279b8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00279bb:	85 db                	test   ebx,ebx
c00279bd:	7e 15                	jle    c00279d4 <__floatsidf+0x21>
c00279bf:	0f bd cb             	bsr    ecx,ebx
c00279c2:	83 f1 1f             	xor    ecx,0x1f
c00279c5:	d3 e3                	shl    ebx,cl
c00279c7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00279cd:	b8 1e 04 00 00       	mov    eax,0x41e
c00279d2:	eb 21                	jmp    c00279f5 <__floatsidf+0x42>
c00279d4:	b8 00 00 00 00       	mov    eax,0x0
c00279d9:	ba 00 00 00 00       	mov    edx,0x0
c00279de:	74 2a                	je     c0027a0a <__floatsidf+0x57>
c00279e0:	f7 db                	neg    ebx
c00279e2:	0f bd cb             	bsr    ecx,ebx
c00279e5:	83 f1 1f             	xor    ecx,0x1f
c00279e8:	d3 e3                	shl    ebx,cl
c00279ea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00279f0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00279f5:	29 c8                	sub    eax,ecx
c00279f7:	c1 e0 14             	shl    eax,0x14
c00279fa:	89 c1                	mov    ecx,eax
c00279fc:	89 de                	mov    esi,ebx
c00279fe:	c1 ee 0b             	shr    esi,0xb
c0027a01:	09 f1                	or     ecx,esi
c0027a03:	89 ca                	mov    edx,ecx
c0027a05:	c1 e3 15             	shl    ebx,0x15
c0027a08:	89 d8                	mov    eax,ebx
c0027a0a:	5b                   	pop    ebx
c0027a0b:	5e                   	pop    esi
c0027a0c:	5d                   	pop    ebp
c0027a0d:	c3                   	ret    

c0027a0e <__floatunsidf>:
c0027a0e:	55                   	push   ebp
c0027a0f:	89 e5                	mov    ebp,esp
c0027a11:	56                   	push   esi
c0027a12:	53                   	push   ebx
c0027a13:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027a16:	85 db                	test   ebx,ebx
c0027a18:	74 2a                	je     c0027a44 <__floatunsidf+0x36>
c0027a1a:	0f bd cb             	bsr    ecx,ebx
c0027a1d:	83 f1 1f             	xor    ecx,0x1f
c0027a20:	d3 e3                	shl    ebx,cl
c0027a22:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027a28:	b8 1e 04 00 00       	mov    eax,0x41e
c0027a2d:	29 c8                	sub    eax,ecx
c0027a2f:	c1 e0 14             	shl    eax,0x14
c0027a32:	89 c1                	mov    ecx,eax
c0027a34:	89 de                	mov    esi,ebx
c0027a36:	c1 ee 0b             	shr    esi,0xb
c0027a39:	09 f1                	or     ecx,esi
c0027a3b:	89 ca                	mov    edx,ecx
c0027a3d:	c1 e3 15             	shl    ebx,0x15
c0027a40:	89 d8                	mov    eax,ebx
c0027a42:	eb 04                	jmp    c0027a48 <__floatunsidf+0x3a>
c0027a44:	31 c0                	xor    eax,eax
c0027a46:	31 d2                	xor    edx,edx
c0027a48:	5b                   	pop    ebx
c0027a49:	5e                   	pop    esi
c0027a4a:	5d                   	pop    ebp
c0027a4b:	c3                   	ret    

c0027a4c <__fixdfsi>:
c0027a4c:	55                   	push   ebp
c0027a4d:	89 e5                	mov    ebp,esp
c0027a4f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027a52:	89 d1                	mov    ecx,edx
c0027a54:	c1 e1 0b             	shl    ecx,0xb
c0027a57:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027a60:	c1 e8 15             	shr    eax,0x15
c0027a63:	09 c1                	or     ecx,eax
c0027a65:	c1 fa 14             	sar    edx,0x14
c0027a68:	78 1f                	js     c0027a89 <__fixdfsi+0x3d>
c0027a6a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027a70:	31 c0                	xor    eax,eax
c0027a72:	83 fa 1e             	cmp    edx,0x1e
c0027a75:	77 40                	ja     c0027ab7 <__fixdfsi+0x6b>
c0027a77:	89 c8                	mov    eax,ecx
c0027a79:	0d 00 00 00 80       	or     eax,0x80000000
c0027a7e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027a83:	29 d1                	sub    ecx,edx
c0027a85:	d3 e8                	shr    eax,cl
c0027a87:	eb 2e                	jmp    c0027ab7 <__fixdfsi+0x6b>
c0027a89:	31 c0                	xor    eax,eax
c0027a8b:	81 c2 01 04 00 00    	add    edx,0x401
c0027a91:	78 24                	js     c0027ab7 <__fixdfsi+0x6b>
c0027a93:	83 fa 1e             	cmp    edx,0x1e
c0027a96:	7e 09                	jle    c0027aa1 <__fixdfsi+0x55>
c0027a98:	83 fa 1f             	cmp    edx,0x1f
c0027a9b:	75 18                	jne    c0027ab5 <__fixdfsi+0x69>
c0027a9d:	85 c9                	test   ecx,ecx
c0027a9f:	75 14                	jne    c0027ab5 <__fixdfsi+0x69>
c0027aa1:	89 c8                	mov    eax,ecx
c0027aa3:	0d 00 00 00 80       	or     eax,0x80000000
c0027aa8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027aad:	29 d1                	sub    ecx,edx
c0027aaf:	d3 e8                	shr    eax,cl
c0027ab1:	f7 d8                	neg    eax
c0027ab3:	eb 02                	jmp    c0027ab7 <__fixdfsi+0x6b>
c0027ab5:	31 c0                	xor    eax,eax
c0027ab7:	5d                   	pop    ebp
c0027ab8:	c3                   	ret    

c0027ab9 <__fixunsdfsi>:
c0027ab9:	55                   	push   ebp
c0027aba:	89 e5                	mov    ebp,esp
c0027abc:	53                   	push   ebx
c0027abd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027ac0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027ac3:	89 d3                	mov    ebx,edx
c0027ac5:	c1 fb 14             	sar    ebx,0x14
c0027ac8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027ace:	31 c0                	xor    eax,eax
c0027ad0:	83 fb 1f             	cmp    ebx,0x1f
c0027ad3:	77 1d                	ja     c0027af2 <__fixunsdfsi+0x39>
c0027ad5:	89 d0                	mov    eax,edx
c0027ad7:	c1 e0 0b             	shl    eax,0xb
c0027ada:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027adf:	c1 e9 15             	shr    ecx,0x15
c0027ae2:	09 c8                	or     eax,ecx
c0027ae4:	0d 00 00 00 80       	or     eax,0x80000000
c0027ae9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027aee:	29 d9                	sub    ecx,ebx
c0027af0:	d3 e8                	shr    eax,cl
c0027af2:	5b                   	pop    ebx
c0027af3:	5d                   	pop    ebp
c0027af4:	c3                   	ret    

c0027af5 <__cmpdf2>:
c0027af5:	55                   	push   ebp
c0027af6:	89 e5                	mov    ebp,esp
c0027af8:	57                   	push   edi
c0027af9:	56                   	push   esi
c0027afa:	53                   	push   ebx
c0027afb:	83 ec 0c             	sub    esp,0xc
c0027afe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027b01:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b04:	89 ca                	mov    edx,ecx
c0027b06:	c1 ea 14             	shr    edx,0x14
c0027b09:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027b0f:	89 cb                	mov    ebx,ecx
c0027b11:	c1 fb 1f             	sar    ebx,0x1f
c0027b14:	31 da                	xor    edx,ebx
c0027b16:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b19:	89 df                	mov    edi,ebx
c0027b1b:	c1 e7 0b             	shl    edi,0xb
c0027b1e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b21:	c1 e1 0b             	shl    ecx,0xb
c0027b24:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b2a:	c1 eb 15             	shr    ebx,0x15
c0027b2d:	09 d9                	or     ecx,ebx
c0027b2f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027b32:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b35:	89 ce                	mov    esi,ecx
c0027b37:	c1 ee 14             	shr    esi,0x14
c0027b3a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027b40:	89 cb                	mov    ebx,ecx
c0027b42:	c1 fb 1f             	sar    ebx,0x1f
c0027b45:	31 de                	xor    esi,ebx
c0027b47:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027b4a:	89 df                	mov    edi,ebx
c0027b4c:	c1 e7 0b             	shl    edi,0xb
c0027b4f:	c1 e1 0b             	shl    ecx,0xb
c0027b52:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b58:	c1 eb 15             	shr    ebx,0x15
c0027b5b:	09 d9                	or     ecx,ebx
c0027b5d:	89 d3                	mov    ebx,edx
c0027b5f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027b65:	43                   	inc    ebx
c0027b66:	83 fb 01             	cmp    ebx,0x1
c0027b69:	77 08                	ja     c0027b73 <__cmpdf2+0x7e>
c0027b6b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027b6e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027b71:	75 68                	jne    c0027bdb <__cmpdf2+0xe6>
c0027b73:	89 f3                	mov    ebx,esi
c0027b75:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027b7b:	43                   	inc    ebx
c0027b7c:	83 fb 01             	cmp    ebx,0x1
c0027b7f:	77 06                	ja     c0027b87 <__cmpdf2+0x92>
c0027b81:	89 fb                	mov    ebx,edi
c0027b83:	09 cb                	or     ebx,ecx
c0027b85:	75 54                	jne    c0027bdb <__cmpdf2+0xe6>
c0027b87:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b8a:	09 f8                	or     eax,edi
c0027b8c:	09 c8                	or     eax,ecx
c0027b8e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027b91:	75 12                	jne    c0027ba5 <__cmpdf2+0xb0>
c0027b93:	8d 42 01             	lea    eax,[edx+0x1]
c0027b96:	83 f8 01             	cmp    eax,0x1
c0027b99:	77 0a                	ja     c0027ba5 <__cmpdf2+0xb0>
c0027b9b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027b9e:	31 c0                	xor    eax,eax
c0027ba0:	83 fb 01             	cmp    ebx,0x1
c0027ba3:	76 36                	jbe    c0027bdb <__cmpdf2+0xe6>
c0027ba5:	b8 01 00 00 00       	mov    eax,0x1
c0027baa:	39 f2                	cmp    edx,esi
c0027bac:	7f 2d                	jg     c0027bdb <__cmpdf2+0xe6>
c0027bae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027bb3:	7c 26                	jl     c0027bdb <__cmpdf2+0xe6>
c0027bb5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027bb8:	77 07                	ja     c0027bc1 <__cmpdf2+0xcc>
c0027bba:	72 16                	jb     c0027bd2 <__cmpdf2+0xdd>
c0027bbc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027bbf:	76 0a                	jbe    c0027bcb <__cmpdf2+0xd6>
c0027bc1:	89 d0                	mov    eax,edx
c0027bc3:	c1 f8 1f             	sar    eax,0x1f
c0027bc6:	83 c8 01             	or     eax,0x1
c0027bc9:	eb 10                	jmp    c0027bdb <__cmpdf2+0xe6>
c0027bcb:	b8 00 00 00 00       	mov    eax,0x0
c0027bd0:	73 09                	jae    c0027bdb <__cmpdf2+0xe6>
c0027bd2:	89 d0                	mov    eax,edx
c0027bd4:	c1 f8 1f             	sar    eax,0x1f
c0027bd7:	83 e0 02             	and    eax,0x2
c0027bda:	48                   	dec    eax
c0027bdb:	83 c4 0c             	add    esp,0xc
c0027bde:	5b                   	pop    ebx
c0027bdf:	5e                   	pop    esi
c0027be0:	5f                   	pop    edi
c0027be1:	5d                   	pop    ebp
c0027be2:	c3                   	ret    

c0027be3 <__eqdf2>:
c0027be3:	55                   	push   ebp
c0027be4:	89 e5                	mov    ebp,esp
c0027be6:	50                   	push   eax
c0027be7:	6a 01                	push   0x1
c0027be9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027bec:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027bef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027bf5:	e8 fb fe ff ff       	call   c0027af5 <__cmpdf2>
c0027bfa:	83 c4 18             	add    esp,0x18
c0027bfd:	c9                   	leave  
c0027bfe:	c3                   	ret    

c0027bff <__nedf2>:
c0027bff:	eb e2                	jmp    c0027be3 <__eqdf2>

c0027c01 <__gtdf2>:
c0027c01:	55                   	push   ebp
c0027c02:	89 e5                	mov    ebp,esp
c0027c04:	50                   	push   eax
c0027c05:	6a ff                	push   0xffffffff
c0027c07:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c0a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c0d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c13:	e8 dd fe ff ff       	call   c0027af5 <__cmpdf2>
c0027c18:	83 c4 18             	add    esp,0x18
c0027c1b:	c9                   	leave  
c0027c1c:	c3                   	ret    

c0027c1d <__gedf2>:
c0027c1d:	eb e2                	jmp    c0027c01 <__gtdf2>

c0027c1f <__ltdf2>:
c0027c1f:	eb c2                	jmp    c0027be3 <__eqdf2>

c0027c21 <__ledf2>:
c0027c21:	eb c0                	jmp    c0027be3 <__eqdf2>

c0027c23 <__truncdfsf2>:
c0027c23:	55                   	push   ebp
c0027c24:	89 e5                	mov    ebp,esp
c0027c26:	57                   	push   edi
c0027c27:	56                   	push   esi
c0027c28:	53                   	push   ebx
c0027c29:	83 ec 0c             	sub    esp,0xc
c0027c2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027c2f:	89 d1                	mov    ecx,edx
c0027c31:	c1 f9 14             	sar    ecx,0x14
c0027c34:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027c37:	89 df                	mov    edi,ebx
c0027c39:	c1 e7 0b             	shl    edi,0xb
c0027c3c:	89 d0                	mov    eax,edx
c0027c3e:	c1 e0 0b             	shl    eax,0xb
c0027c41:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c46:	c1 eb 15             	shr    ebx,0x15
c0027c49:	09 d8                	or     eax,ebx
c0027c4b:	89 cb                	mov    ebx,ecx
c0027c4d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c53:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027c59:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0027c5f:	0f 86 9e 00 00 00    	jbe    c0027d03 <__truncdfsf2+0xe0>
c0027c65:	85 db                	test   ebx,ebx
c0027c67:	75 0a                	jne    c0027c73 <__truncdfsf2+0x50>
c0027c69:	c1 fa 17             	sar    edx,0x17
c0027c6c:	30 d2                	xor    dl,dl
c0027c6e:	e9 84 00 00 00       	jmp    c0027cf7 <__truncdfsf2+0xd4>
c0027c73:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027c79:	83 fe 83             	cmp    esi,0xffffff83
c0027c7c:	7d 4b                	jge    c0027cc9 <__truncdfsf2+0xa6>
c0027c7e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027c83:	29 f1                	sub    ecx,esi
c0027c85:	83 f9 1f             	cmp    ecx,0x1f
c0027c88:	7f 6b                	jg     c0027cf5 <__truncdfsf2+0xd2>
c0027c8a:	0d 00 00 00 80       	or     eax,0x80000000
c0027c8f:	89 c3                	mov    ebx,eax
c0027c91:	d3 eb                	shr    ebx,cl
c0027c93:	be 01 00 00 00       	mov    esi,0x1
c0027c98:	d3 e6                	shl    esi,cl
c0027c9a:	4e                   	dec    esi
c0027c9b:	21 f0                	and    eax,esi
c0027c9d:	09 f8                	or     eax,edi
c0027c9f:	0f 95 c0             	setne  al
c0027ca2:	0f b6 c0             	movzx  eax,al
c0027ca5:	09 c3                	or     ebx,eax
c0027ca7:	89 d9                	mov    ecx,ebx
c0027ca9:	c1 e9 08             	shr    ecx,0x8
c0027cac:	f6 c3 7f             	test   bl,0x7f
c0027caf:	0f 95 c0             	setne  al
c0027cb2:	09 c8                	or     eax,ecx
c0027cb4:	83 e0 01             	and    eax,0x1
c0027cb7:	c1 eb 07             	shr    ebx,0x7
c0027cba:	21 c3                	and    ebx,eax
c0027cbc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027cc2:	09 d1                	or     ecx,edx
c0027cc4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027cc7:	eb 76                	jmp    c0027d3f <__truncdfsf2+0x11c>
c0027cc9:	83 c6 80             	add    esi,0xffffff80
c0027ccc:	7e 1d                	jle    c0027ceb <__truncdfsf2+0xc8>
c0027cce:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027cd4:	75 0b                	jne    c0027ce1 <__truncdfsf2+0xbe>
c0027cd6:	09 f8                	or     eax,edi
c0027cd8:	74 09                	je     c0027ce3 <__truncdfsf2+0xc0>
c0027cda:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0027cdf:	eb 02                	jmp    c0027ce3 <__truncdfsf2+0xc0>
c0027ce1:	31 c0                	xor    eax,eax
c0027ce3:	c1 fa 17             	sar    edx,0x17
c0027ce6:	80 ca ff             	or     dl,0xff
c0027ce9:	eb 0e                	jmp    c0027cf9 <__truncdfsf2+0xd6>
c0027ceb:	c1 fa 1f             	sar    edx,0x1f
c0027cee:	c1 e2 08             	shl    edx,0x8
c0027cf1:	09 ca                	or     edx,ecx
c0027cf3:	eb 04                	jmp    c0027cf9 <__truncdfsf2+0xd6>
c0027cf5:	31 d2                	xor    edx,edx
c0027cf7:	31 c0                	xor    eax,eax
c0027cf9:	c1 e2 17             	shl    edx,0x17
c0027cfc:	c1 e8 08             	shr    eax,0x8
c0027cff:	09 d0                	or     eax,edx
c0027d01:	eb 3c                	jmp    c0027d3f <__truncdfsf2+0x11c>
c0027d03:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027d09:	89 ca                	mov    edx,ecx
c0027d0b:	c1 fa 0b             	sar    edx,0xb
c0027d0e:	c1 e2 08             	shl    edx,0x8
c0027d11:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027d14:	31 db                	xor    ebx,ebx
c0027d16:	85 ff                	test   edi,edi
c0027d18:	0f 95 c3             	setne  bl
c0027d1b:	09 d8                	or     eax,ebx
c0027d1d:	89 c3                	mov    ebx,eax
c0027d1f:	c1 eb 08             	shr    ebx,0x8
c0027d22:	a8 7f                	test   al,0x7f
c0027d24:	0f 95 c2             	setne  dl
c0027d27:	89 d6                	mov    esi,edx
c0027d29:	09 de                	or     esi,ebx
c0027d2b:	83 e6 01             	and    esi,0x1
c0027d2e:	c1 e8 07             	shr    eax,0x7
c0027d31:	21 f0                	and    eax,esi
c0027d33:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027d36:	09 ca                	or     edx,ecx
c0027d38:	c1 e2 17             	shl    edx,0x17
c0027d3b:	09 da                	or     edx,ebx
c0027d3d:	01 d0                	add    eax,edx
c0027d3f:	83 c4 0c             	add    esp,0xc
c0027d42:	5b                   	pop    ebx
c0027d43:	5e                   	pop    esi
c0027d44:	5f                   	pop    edi
c0027d45:	5d                   	pop    ebp
c0027d46:	c3                   	ret    

c0027d47 <__extendsfdf2>:
c0027d47:	55                   	push   ebp
c0027d48:	89 e5                	mov    ebp,esp
c0027d4a:	57                   	push   edi
c0027d4b:	56                   	push   esi
c0027d4c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d4f:	89 d1                	mov    ecx,edx
c0027d51:	c1 f9 17             	sar    ecx,0x17
c0027d54:	c1 e2 08             	shl    edx,0x8
c0027d57:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027d5d:	89 c8                	mov    eax,ecx
c0027d5f:	80 e4 f8             	and    ah,0xf8
c0027d62:	8d 71 01             	lea    esi,[ecx+0x1]
c0027d65:	81 e6 fe 00 00 00    	and    esi,0xfe
c0027d6b:	75 27                	jne    c0027d94 <__extendsfdf2+0x4d>
c0027d6d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027d73:	75 18                	jne    c0027d8d <__extendsfdf2+0x46>
c0027d75:	85 d2                	test   edx,edx
c0027d77:	74 20                	je     c0027d99 <__extendsfdf2+0x52>
c0027d79:	41                   	inc    ecx
c0027d7a:	01 d2                	add    edx,edx
c0027d7c:	79 fb                	jns    c0027d79 <__extendsfdf2+0x32>
c0027d7e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d84:	29 c8                	sub    eax,ecx
c0027d86:	05 81 03 00 00       	add    eax,0x381
c0027d8b:	eb 0c                	jmp    c0027d99 <__extendsfdf2+0x52>
c0027d8d:	05 00 07 00 00       	add    eax,0x700
c0027d92:	eb 05                	jmp    c0027d99 <__extendsfdf2+0x52>
c0027d94:	05 80 03 00 00       	add    eax,0x380
c0027d99:	c1 e0 14             	shl    eax,0x14
c0027d9c:	89 c1                	mov    ecx,eax
c0027d9e:	89 d0                	mov    eax,edx
c0027da0:	c1 e8 0b             	shr    eax,0xb
c0027da3:	09 c1                	or     ecx,eax
c0027da5:	c1 e2 15             	shl    edx,0x15
c0027da8:	89 d0                	mov    eax,edx
c0027daa:	89 ca                	mov    edx,ecx
c0027dac:	5e                   	pop    esi
c0027dad:	5f                   	pop    edi
c0027dae:	5d                   	pop    ebp
c0027daf:	c3                   	ret    

c0027db0 <fabs>:
c0027db0:	83 ec 0c             	sub    esp,0xc
c0027db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0027dba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027dbe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027dc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027dc7:	dd 04 24             	fld    QWORD PTR [esp]
c0027dca:	83 c4 0c             	add    esp,0xc
c0027dcd:	c3                   	ret    
c0027dce:	66 90                	xchg   ax,ax

c0027dd0 <lrint>:
c0027dd0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027dd4:	83 ec 04             	sub    esp,0x4
c0027dd7:	db 1c 24             	fistp  DWORD PTR [esp]
c0027dda:	58                   	pop    eax
c0027ddb:	c3                   	ret    

c0027ddc <lrintf>:
c0027ddc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027de0:	83 ec 04             	sub    esp,0x4
c0027de3:	db 1c 24             	fistp  DWORD PTR [esp]
c0027de6:	58                   	pop    eax
c0027de7:	c3                   	ret    

Disassembly of section .init:

c0027de8 <_init>:
c0027de8:	55                   	push   ebp
c0027de9:	89 e5                	mov    ebp,esp
c0027deb:	e8 28 83 fd ff       	call   c0000118 <frame_dummy>
c0027df0:	e8 63 e0 ff ff       	call   c0025e58 <__do_global_ctors_aux>
c0027df5:	5d                   	pop    ebp
c0027df6:	c3                   	ret    

Disassembly of section .fini:

c0027df7 <_fini>:
c0027df7:	55                   	push   ebp
c0027df8:	89 e5                	mov    ebp,esp
c0027dfa:	e8 a9 82 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0027dff:	5d                   	pop    ebp
c0027e00:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027e02 <Computer::~Computer()>:
c0027e02:	83 ec 0c             	sub    esp,0xc
c0027e05:	ba 48 99 02 c0       	mov    edx,0xc0029948
c0027e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e0e:	89 10                	mov    DWORD PTR [eax],edx
c0027e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e14:	83 ec 0c             	sub    esp,0xc
c0027e17:	50                   	push   eax
c0027e18:	e8 c3 bd fe ff       	call   c0013be0 <Device::~Device()>
c0027e1d:	83 c4 10             	add    esp,0x10
c0027e20:	90                   	nop
c0027e21:	83 c4 0c             	add    esp,0xc
c0027e24:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027e26 <Computer::~Computer()>:
c0027e26:	83 ec 0c             	sub    esp,0xc
c0027e29:	83 ec 0c             	sub    esp,0xc
c0027e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e30:	e8 cd ff ff ff       	call   c0027e02 <Computer::~Computer()>
c0027e35:	83 c4 10             	add    esp,0x10
c0027e38:	83 ec 08             	sub    esp,0x8
c0027e3b:	68 ec 01 00 00       	push   0x1ec
c0027e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e44:	e8 be a9 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0027e49:	83 c4 10             	add    esp,0x10
c0027e4c:	83 c4 0c             	add    esp,0xc
c0027e4f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027e50 <idleCommon()>:
c0027e50:	83 ec 0c             	sub    esp,0xc
c0027e53:	e8 5e 56 ff ff       	call   c001d4b6 <lockScheduler()>
c0027e58:	e8 95 59 ff ff       	call   c001d7f2 <schedule()>
c0027e5d:	83 c4 0c             	add    esp,0xc
c0027e60:	e9 53 56 ff ff       	jmp    c001d4b8 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027e66 <LinkedList<UnixFile>::~LinkedList()>:
c0027e66:	90                   	nop
c0027e67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027e68 <LinkedList<UnixFile>::LinkedList()>:
c0027e68:	83 ec 0c             	sub    esp,0xc
c0027e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e84:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ea4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027eab:	83 ec 0c             	sub    esp,0xc
c0027eae:	68 06 9c 02 c0       	push   0xc0029c06
c0027eb3:	e8 2f aa fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0027eb8:	83 c4 10             	add    esp,0x10
c0027ebb:	90                   	nop
c0027ebc:	83 c4 0c             	add    esp,0xc
c0027ebf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027ec0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027ec0:	83 ec 0c             	sub    esp,0xc
c0027ec3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027ec8:	75 10                	jne    c0027eda <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0027eca:	83 ec 0c             	sub    esp,0xc
c0027ecd:	68 20 9c 02 c0       	push   0xc0029c20
c0027ed2:	e8 84 1f ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0027ed7:	83 c4 10             	add    esp,0x10
c0027eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ede:	8b 00                	mov    eax,DWORD PTR [eax]
c0027ee0:	85 c0                	test   eax,eax
c0027ee2:	74 34                	je     c0027f18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ee8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027eeb:	85 c0                	test   eax,eax
c0027eed:	74 29                	je     c0027f18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ef3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027ef6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027efa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027f05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027f16:	eb 65                	jmp    c0027f7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0027f1e:	85 c0                	test   eax,eax
c0027f20:	75 4b                	jne    c0027f6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f29:	85 c0                	test   eax,eax
c0027f2b:	75 40                	jne    c0027f6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027f35:	89 10                	mov    DWORD PTR [eax],edx
c0027f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027f3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f49:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f57:	85 c0                	test   eax,eax
c0027f59:	74 22                	je     c0027f7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027f5b:	83 ec 0c             	sub    esp,0xc
c0027f5e:	68 42 9c 02 c0       	push   0xc0029c42
c0027f63:	e8 f3 1e ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0027f68:	83 c4 10             	add    esp,0x10
c0027f6b:	eb 10                	jmp    c0027f7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027f6d:	83 ec 0c             	sub    esp,0xc
c0027f70:	68 4c 9c 02 c0       	push   0xc0029c4c
c0027f75:	e8 e1 1e ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0027f7a:	83 c4 10             	add    esp,0x10
c0027f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f84:	8d 50 01             	lea    edx,[eax+0x1]
c0027f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027f8e:	90                   	nop
c0027f8f:	83 c4 0c             	add    esp,0xc
c0027f92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027f94 <LinkedList<UnixFile>::getFirstElement()>:
c0027f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f98:	8b 00                	mov    eax,DWORD PTR [eax]
c0027f9a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0027f9c <LinkedList<UnixFile>::removeFirst()>:
c0027f9c:	83 ec 0c             	sub    esp,0xc
c0027f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0027fa5:	85 c0                	test   eax,eax
c0027fa7:	75 12                	jne    c0027fbb <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027fa9:	83 ec 0c             	sub    esp,0xc
c0027fac:	68 58 9c 02 c0       	push   0xc0029c58
c0027fb1:	e8 a5 1e ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0027fb6:	83 c4 10             	add    esp,0x10
c0027fb9:	eb 7e                	jmp    c0028039 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0027fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027fc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027fc5:	85 c0                	test   eax,eax
c0027fc7:	74 10                	je     c0027fd9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027fc9:	83 ec 0c             	sub    esp,0xc
c0027fcc:	68 a3 9c 02 c0       	push   0xc0029ca3
c0027fd1:	e8 85 1e ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0027fd6:	83 c4 10             	add    esp,0x10
c0027fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0027fdf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027fe2:	85 c0                	test   eax,eax
c0027fe4:	75 33                	jne    c0028019 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ff4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028002:	83 f8 01             	cmp    eax,0x1
c0028005:	74 21                	je     c0028028 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028007:	83 ec 0c             	sub    esp,0xc
c002800a:	68 7c 9c 02 c0       	push   0xc0029c7c
c002800f:	e8 47 1e ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0028014:	83 c4 10             	add    esp,0x10
c0028017:	eb 0f                	jmp    c0028028 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002801d:	8b 00                	mov    eax,DWORD PTR [eax]
c002801f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028026:	89 10                	mov    DWORD PTR [eax],edx
c0028028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002802c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002802f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028036:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028039:	83 c4 0c             	add    esp,0xc
c002803c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002803e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002803e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028042:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028045:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028046 <DriverlessDevice::~DriverlessDevice()>:
c0028046:	ba 84 a3 02 c0       	mov    edx,0xc002a384
c002804b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002804f:	89 10                	mov    DWORD PTR [eax],edx
c0028051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028055:	50                   	push   eax
c0028056:	e8 85 bb fe ff       	call   c0013be0 <Device::~Device()>
c002805b:	83 c4 04             	add    esp,0x4
c002805e:	90                   	nop
c002805f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028060 <DriverlessDevice::~DriverlessDevice()>:
c0028060:	83 ec 0c             	sub    esp,0xc
c0028063:	83 ec 0c             	sub    esp,0xc
c0028066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002806a:	e8 d7 ff ff ff       	call   c0028046 <DriverlessDevice::~DriverlessDevice()>
c002806f:	83 c4 10             	add    esp,0x10
c0028072:	83 ec 08             	sub    esp,0x8
c0028075:	68 58 01 00 00       	push   0x158
c002807a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002807e:	e8 84 a7 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0028083:	83 c4 10             	add    esp,0x10
c0028086:	83 c4 0c             	add    esp,0xc
c0028089:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002808a <LinkedList<Device>::addElement(Device*)>:
c002808a:	83 ec 0c             	sub    esp,0xc
c002808d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028092:	75 10                	jne    c00280a4 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028094:	83 ec 0c             	sub    esp,0xc
c0028097:	68 20 9c 02 c0       	push   0xc0029c20
c002809c:	e8 ba 1d ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c00280a1:	83 c4 10             	add    esp,0x10
c00280a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00280aa:	85 c0                	test   eax,eax
c00280ac:	74 3a                	je     c00280e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00280ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280b5:	85 c0                	test   eax,eax
c00280b7:	74 2f                	je     c00280e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00280b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00280c4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00280ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00280d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00280d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280dc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00280e6:	eb 68                	jmp    c0028150 <LinkedList<Device>::addElement(Device*)+0xc6>
c00280e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00280ee:	85 c0                	test   eax,eax
c00280f0:	75 4e                	jne    c0028140 <LinkedList<Device>::addElement(Device*)+0xb6>
c00280f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280f9:	85 c0                	test   eax,eax
c00280fb:	75 43                	jne    c0028140 <LinkedList<Device>::addElement(Device*)+0xb6>
c00280fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028101:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028105:	89 10                	mov    DWORD PTR [eax],edx
c0028107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002810b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002810f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028119:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028127:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002812a:	85 c0                	test   eax,eax
c002812c:	74 22                	je     c0028150 <LinkedList<Device>::addElement(Device*)+0xc6>
c002812e:	83 ec 0c             	sub    esp,0xc
c0028131:	68 42 9c 02 c0       	push   0xc0029c42
c0028136:	e8 20 1d ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c002813b:	83 c4 10             	add    esp,0x10
c002813e:	eb 10                	jmp    c0028150 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028140:	83 ec 0c             	sub    esp,0xc
c0028143:	68 4c 9c 02 c0       	push   0xc0029c4c
c0028148:	e8 0e 1d ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c002814d:	83 c4 10             	add    esp,0x10
c0028150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028154:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028157:	8d 50 01             	lea    edx,[eax+0x1]
c002815a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002815e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028161:	90                   	nop
c0028162:	83 c4 0c             	add    esp,0xc
c0028165:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028166 <LinkedList<Device>::LinkedList()>:
c0028166:	83 ec 0c             	sub    esp,0xc
c0028169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002816d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028177:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002817e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028182:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002818d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028197:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002819e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00281a9:	83 ec 0c             	sub    esp,0xc
c00281ac:	68 06 9c 02 c0       	push   0xc0029c06
c00281b1:	e8 31 a7 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c00281b6:	83 c4 10             	add    esp,0x10
c00281b9:	90                   	nop
c00281ba:	83 c4 0c             	add    esp,0xc
c00281bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00281be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00281c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00281c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00281cc:	85 c0                	test   eax,eax
c00281ce:	75 0e                	jne    c00281de <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00281d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00281d7:	85 c0                	test   eax,eax
c00281d9:	75 03                	jne    c00281de <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00281db:	b0 01                	mov    al,0x1
c00281dd:	c3                   	ret    
c00281de:	b0 00                	mov    al,0x0
c00281e0:	90                   	nop
c00281e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00281e2:	83 ec 0c             	sub    esp,0xc
c00281e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00281eb:	85 c0                	test   eax,eax
c00281ed:	75 15                	jne    c0028204 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00281ef:	83 ec 0c             	sub    esp,0xc
c00281f2:	68 58 9c 02 c0       	push   0xc0029c58
c00281f7:	e8 5f 1c ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c00281fc:	83 c4 10             	add    esp,0x10
c00281ff:	e9 88 00 00 00       	jmp    c002828c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028208:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002820b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002820e:	85 c0                	test   eax,eax
c0028210:	0f 95 c0             	setne  al
c0028213:	84 c0                	test   al,al
c0028215:	74 10                	je     c0028227 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028217:	83 ec 0c             	sub    esp,0xc
c002821a:	68 a3 9c 02 c0       	push   0xc0029ca3
c002821f:	e8 37 1c ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0028224:	83 c4 10             	add    esp,0x10
c0028227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002822b:	8b 00                	mov    eax,DWORD PTR [eax]
c002822d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028230:	85 c0                	test   eax,eax
c0028232:	0f 94 c0             	sete   al
c0028235:	84 c0                	test   al,al
c0028237:	74 33                	je     c002826c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002823d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028247:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002824e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028252:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028255:	83 f8 01             	cmp    eax,0x1
c0028258:	74 21                	je     c002827b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002825a:	83 ec 0c             	sub    esp,0xc
c002825d:	68 7c 9c 02 c0       	push   0xc0029c7c
c0028262:	e8 f4 1b ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0028267:	83 c4 10             	add    esp,0x10
c002826a:	eb 0f                	jmp    c002827b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002826c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028270:	8b 00                	mov    eax,DWORD PTR [eax]
c0028272:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028279:	89 10                	mov    DWORD PTR [eax],edx
c002827b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002827f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028282:	8d 50 ff             	lea    edx,[eax-0x1]
c0028285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028289:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002828c:	83 c4 0c             	add    esp,0xc
c002828f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028290:	83 ec 0c             	sub    esp,0xc
c0028293:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028298:	75 10                	jne    c00282aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002829a:	83 ec 0c             	sub    esp,0xc
c002829d:	68 20 9c 02 c0       	push   0xc0029c20
c00282a2:	e8 b4 1b ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c00282a7:	83 c4 10             	add    esp,0x10
c00282aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00282b0:	85 c0                	test   eax,eax
c00282b2:	74 34                	je     c00282e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00282b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282bb:	85 c0                	test   eax,eax
c00282bd:	74 29                	je     c00282e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00282bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00282cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00282d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282df:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00282e6:	eb 65                	jmp    c002834d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00282e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00282ee:	85 c0                	test   eax,eax
c00282f0:	75 4b                	jne    c002833d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00282f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282f9:	85 c0                	test   eax,eax
c00282fb:	75 40                	jne    c002833d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00282fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028301:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028305:	89 10                	mov    DWORD PTR [eax],edx
c0028307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002830b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002830f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028316:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028319:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028324:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028327:	85 c0                	test   eax,eax
c0028329:	74 22                	je     c002834d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002832b:	83 ec 0c             	sub    esp,0xc
c002832e:	68 42 9c 02 c0       	push   0xc0029c42
c0028333:	e8 23 1b ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c0028338:	83 c4 10             	add    esp,0x10
c002833b:	eb 10                	jmp    c002834d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002833d:	83 ec 0c             	sub    esp,0xc
c0028340:	68 4c 9c 02 c0       	push   0xc0029c4c
c0028345:	e8 11 1b ff ff       	call   c0019e5b <Krnl::panic(char const*)>
c002834a:	83 c4 10             	add    esp,0x10
c002834d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028351:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028354:	8d 50 01             	lea    edx,[eax+0x1]
c0028357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002835b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002835e:	90                   	nop
c002835f:	83 c4 0c             	add    esp,0xc
c0028362:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028364 <ACPI::~ACPI()>:
c0028364:	83 ec 0c             	sub    esp,0xc
c0028367:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c002836c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028370:	89 10                	mov    DWORD PTR [eax],edx
c0028372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028376:	83 ec 0c             	sub    esp,0xc
c0028379:	50                   	push   eax
c002837a:	e8 61 b8 fe ff       	call   c0013be0 <Device::~Device()>
c002837f:	83 c4 10             	add    esp,0x10
c0028382:	90                   	nop
c0028383:	83 c4 0c             	add    esp,0xc
c0028386:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028388 <ACPI::~ACPI()>:
c0028388:	83 ec 0c             	sub    esp,0xc
c002838b:	83 ec 0c             	sub    esp,0xc
c002838e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028392:	e8 cd ff ff ff       	call   c0028364 <ACPI::~ACPI()>
c0028397:	83 c4 10             	add    esp,0x10
c002839a:	83 ec 08             	sub    esp,0x8
c002839d:	68 68 12 00 00       	push   0x1268
c00283a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283a6:	e8 5c a4 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c00283ab:	83 c4 10             	add    esp,0x10
c00283ae:	83 c4 0c             	add    esp,0xc
c00283b1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00283b2 <CPU::~CPU()>:
c00283b2:	83 ec 0c             	sub    esp,0xc
c00283b5:	ba 38 b1 02 c0       	mov    edx,0xc002b138
c00283ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283be:	89 10                	mov    DWORD PTR [eax],edx
c00283c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c4:	83 ec 0c             	sub    esp,0xc
c00283c7:	50                   	push   eax
c00283c8:	e8 13 b8 fe ff       	call   c0013be0 <Device::~Device()>
c00283cd:	83 c4 10             	add    esp,0x10
c00283d0:	90                   	nop
c00283d1:	83 c4 0c             	add    esp,0xc
c00283d4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00283d6 <CPU::~CPU()>:
c00283d6:	83 ec 0c             	sub    esp,0xc
c00283d9:	83 ec 0c             	sub    esp,0xc
c00283dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283e0:	e8 cd ff ff ff       	call   c00283b2 <CPU::~CPU()>
c00283e5:	83 c4 10             	add    esp,0x10
c00283e8:	83 ec 08             	sub    esp,0x8
c00283eb:	68 98 11 00 00       	push   0x1198
c00283f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283f4:	e8 0e a4 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c00283f9:	83 c4 10             	add    esp,0x10
c00283fc:	83 c4 0c             	add    esp,0xc
c00283ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028400 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028400:	90                   	nop
c0028401:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028402 <ThreadControlBlock::ThreadControlBlock()>:
c0028402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028406:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002840d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028411:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002841c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028423:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028427:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002842e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028432:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002843a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002843e:	90                   	nop
c002843f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028440:	83 ec 0c             	sub    esp,0xc
c0028443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028447:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002844d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028451:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002845c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028467:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002846d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028471:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002847c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028483:	83 ec 0c             	sub    esp,0xc
c0028486:	68 06 9c 02 c0       	push   0xc0029c06
c002848b:	e8 57 a4 fe ff       	call   c00128e7 <Dbg::kprintf(char const*, ...)>
c0028490:	83 c4 10             	add    esp,0x10
c0028493:	90                   	nop
c0028494:	83 c4 0c             	add    esp,0xc
c0028497:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028498 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002849c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002849f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00284a0 <Vm::_FPUState::_FPUState()>:
c00284a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284a4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00284ab:	90                   	nop
c00284ac:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00284ae <PCI::~PCI()>:
c00284ae:	83 ec 0c             	sub    esp,0xc
c00284b1:	ba 9c c0 02 c0       	mov    edx,0xc002c09c
c00284b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ba:	89 10                	mov    DWORD PTR [eax],edx
c00284bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c0:	83 ec 0c             	sub    esp,0xc
c00284c3:	50                   	push   eax
c00284c4:	e8 ef b0 fe ff       	call   c00135b8 <Bus::~Bus()>
c00284c9:	83 c4 10             	add    esp,0x10
c00284cc:	90                   	nop
c00284cd:	83 c4 0c             	add    esp,0xc
c00284d0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00284d2 <PCI::~PCI()>:
c00284d2:	83 ec 0c             	sub    esp,0xc
c00284d5:	83 ec 0c             	sub    esp,0xc
c00284d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284dc:	e8 cd ff ff ff       	call   c00284ae <PCI::~PCI()>
c00284e1:	83 c4 10             	add    esp,0x10
c00284e4:	83 ec 08             	sub    esp,0x8
c00284e7:	68 58 01 00 00       	push   0x158
c00284ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284f0:	e8 12 a3 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c00284f5:	83 c4 10             	add    esp,0x10
c00284f8:	83 c4 0c             	add    esp,0xc
c00284fb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00284fc <IDE::~IDE()>:
c00284fc:	83 ec 0c             	sub    esp,0xc
c00284ff:	ba 00 c3 02 c0       	mov    edx,0xc002c300
c0028504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028508:	89 10                	mov    DWORD PTR [eax],edx
c002850a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850e:	83 ec 0c             	sub    esp,0xc
c0028511:	50                   	push   eax
c0028512:	e8 b9 bb fe ff       	call   c00140d0 <HardDiskController::~HardDiskController()>
c0028517:	83 c4 10             	add    esp,0x10
c002851a:	90                   	nop
c002851b:	83 c4 0c             	add    esp,0xc
c002851e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028520 <IDE::~IDE()>:
c0028520:	83 ec 0c             	sub    esp,0xc
c0028523:	83 ec 0c             	sub    esp,0xc
c0028526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002852a:	e8 cd ff ff ff       	call   c00284fc <IDE::~IDE()>
c002852f:	83 c4 10             	add    esp,0x10
c0028532:	83 ec 08             	sub    esp,0x8
c0028535:	68 70 02 00 00       	push   0x270
c002853a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002853e:	e8 c4 a2 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0028543:	83 c4 10             	add    esp,0x10
c0028546:	83 c4 0c             	add    esp,0xc
c0028549:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002854a <SATABus::~SATABus()>:
c002854a:	83 ec 0c             	sub    esp,0xc
c002854d:	ba e0 c3 02 c0       	mov    edx,0xc002c3e0
c0028552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028556:	89 10                	mov    DWORD PTR [eax],edx
c0028558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002855c:	83 ec 0c             	sub    esp,0xc
c002855f:	50                   	push   eax
c0028560:	e8 6b bb fe ff       	call   c00140d0 <HardDiskController::~HardDiskController()>
c0028565:	83 c4 10             	add    esp,0x10
c0028568:	90                   	nop
c0028569:	83 c4 0c             	add    esp,0xc
c002856c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002856e <SATABus::~SATABus()>:
c002856e:	83 ec 0c             	sub    esp,0xc
c0028571:	83 ec 0c             	sub    esp,0xc
c0028574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028578:	e8 cd ff ff ff       	call   c002854a <SATABus::~SATABus()>
c002857d:	83 c4 10             	add    esp,0x10
c0028580:	83 ec 08             	sub    esp,0x8
c0028583:	68 64 01 00 00       	push   0x164
c0028588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002858c:	e8 76 a2 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0028591:	83 c4 10             	add    esp,0x10
c0028594:	83 c4 0c             	add    esp,0xc
c0028597:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028598 <ATA::~ATA()>:
c0028598:	83 ec 0c             	sub    esp,0xc
c002859b:	ba e8 c4 02 c0       	mov    edx,0xc002c4e8
c00285a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a4:	89 10                	mov    DWORD PTR [eax],edx
c00285a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285aa:	83 ec 0c             	sub    esp,0xc
c00285ad:	50                   	push   eax
c00285ae:	e8 0f bc fe ff       	call   c00141c2 <PhysicalDisk::~PhysicalDisk()>
c00285b3:	83 c4 10             	add    esp,0x10
c00285b6:	90                   	nop
c00285b7:	83 c4 0c             	add    esp,0xc
c00285ba:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00285bc <ATA::~ATA()>:
c00285bc:	83 ec 0c             	sub    esp,0xc
c00285bf:	83 ec 0c             	sub    esp,0xc
c00285c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285c6:	e8 cd ff ff ff       	call   c0028598 <ATA::~ATA()>
c00285cb:	83 c4 10             	add    esp,0x10
c00285ce:	83 ec 08             	sub    esp,0x8
c00285d1:	68 7c 01 00 00       	push   0x17c
c00285d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285da:	e8 28 a2 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c00285df:	83 c4 10             	add    esp,0x10
c00285e2:	83 c4 0c             	add    esp,0xc
c00285e5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00285e6 <ATAPI::~ATAPI()>:
c00285e6:	83 ec 0c             	sub    esp,0xc
c00285e9:	ba 20 c5 02 c0       	mov    edx,0xc002c520
c00285ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f2:	89 10                	mov    DWORD PTR [eax],edx
c00285f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f8:	83 ec 0c             	sub    esp,0xc
c00285fb:	50                   	push   eax
c00285fc:	e8 c1 bb fe ff       	call   c00141c2 <PhysicalDisk::~PhysicalDisk()>
c0028601:	83 c4 10             	add    esp,0x10
c0028604:	90                   	nop
c0028605:	83 c4 0c             	add    esp,0xc
c0028608:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002860a <ATAPI::~ATAPI()>:
c002860a:	83 ec 0c             	sub    esp,0xc
c002860d:	83 ec 0c             	sub    esp,0xc
c0028610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028614:	e8 cd ff ff ff       	call   c00285e6 <ATAPI::~ATAPI()>
c0028619:	83 c4 10             	add    esp,0x10
c002861c:	83 ec 08             	sub    esp,0x8
c002861f:	68 80 01 00 00       	push   0x180
c0028624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028628:	e8 da a1 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c002862d:	83 c4 10             	add    esp,0x10
c0028630:	83 c4 0c             	add    esp,0xc
c0028633:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028634 <SATA::~SATA()>:
c0028634:	83 ec 0c             	sub    esp,0xc
c0028637:	ba 9c c5 02 c0       	mov    edx,0xc002c59c
c002863c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028640:	89 10                	mov    DWORD PTR [eax],edx
c0028642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028646:	83 ec 0c             	sub    esp,0xc
c0028649:	50                   	push   eax
c002864a:	e8 73 bb fe ff       	call   c00141c2 <PhysicalDisk::~PhysicalDisk()>
c002864f:	83 c4 10             	add    esp,0x10
c0028652:	90                   	nop
c0028653:	83 c4 0c             	add    esp,0xc
c0028656:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028658 <SATA::~SATA()>:
c0028658:	83 ec 0c             	sub    esp,0xc
c002865b:	83 ec 0c             	sub    esp,0xc
c002865e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028662:	e8 cd ff ff ff       	call   c0028634 <SATA::~SATA()>
c0028667:	83 c4 10             	add    esp,0x10
c002866a:	83 ec 08             	sub    esp,0x8
c002866d:	68 7c 01 00 00       	push   0x17c
c0028672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028676:	e8 8c a1 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c002867b:	83 c4 10             	add    esp,0x10
c002867e:	83 c4 0c             	add    esp,0xc
c0028681:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028682 <SATAPI::~SATAPI()>:
c0028682:	83 ec 0c             	sub    esp,0xc
c0028685:	ba 78 c6 02 c0       	mov    edx,0xc002c678
c002868a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868e:	89 10                	mov    DWORD PTR [eax],edx
c0028690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028694:	83 ec 0c             	sub    esp,0xc
c0028697:	50                   	push   eax
c0028698:	e8 25 bb fe ff       	call   c00141c2 <PhysicalDisk::~PhysicalDisk()>
c002869d:	83 c4 10             	add    esp,0x10
c00286a0:	90                   	nop
c00286a1:	83 c4 0c             	add    esp,0xc
c00286a4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00286a6 <SATAPI::~SATAPI()>:
c00286a6:	83 ec 0c             	sub    esp,0xc
c00286a9:	83 ec 0c             	sub    esp,0xc
c00286ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286b0:	e8 cd ff ff ff       	call   c0028682 <SATAPI::~SATAPI()>
c00286b5:	83 c4 10             	add    esp,0x10
c00286b8:	83 ec 08             	sub    esp,0x8
c00286bb:	68 80 01 00 00       	push   0x180
c00286c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286c4:	e8 3e a1 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c00286c9:	83 c4 10             	add    esp,0x10
c00286cc:	83 c4 0c             	add    esp,0xc
c00286cf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00286d0 <AVX::~AVX()>:
c00286d0:	83 ec 0c             	sub    esp,0xc
c00286d3:	ba b8 c6 02 c0       	mov    edx,0xc002c6b8
c00286d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dc:	89 10                	mov    DWORD PTR [eax],edx
c00286de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e2:	83 ec 0c             	sub    esp,0xc
c00286e5:	50                   	push   eax
c00286e6:	e8 5b bb fe ff       	call   c0014246 <FPU::~FPU()>
c00286eb:	83 c4 10             	add    esp,0x10
c00286ee:	90                   	nop
c00286ef:	83 c4 0c             	add    esp,0xc
c00286f2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00286f4 <AVX::~AVX()>:
c00286f4:	83 ec 0c             	sub    esp,0xc
c00286f7:	83 ec 0c             	sub    esp,0xc
c00286fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286fe:	e8 cd ff ff ff       	call   c00286d0 <AVX::~AVX()>
c0028703:	83 c4 10             	add    esp,0x10
c0028706:	83 ec 08             	sub    esp,0x8
c0028709:	68 58 01 00 00       	push   0x158
c002870e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028712:	e8 f0 a0 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0028717:	83 c4 10             	add    esp,0x10
c002871a:	83 c4 0c             	add    esp,0xc
c002871d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002871e <MMX::~MMX()>:
c002871e:	83 ec 0c             	sub    esp,0xc
c0028721:	ba f8 c6 02 c0       	mov    edx,0xc002c6f8
c0028726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872a:	89 10                	mov    DWORD PTR [eax],edx
c002872c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	50                   	push   eax
c0028734:	e8 0d bb fe ff       	call   c0014246 <FPU::~FPU()>
c0028739:	83 c4 10             	add    esp,0x10
c002873c:	90                   	nop
c002873d:	83 c4 0c             	add    esp,0xc
c0028740:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028742 <MMX::~MMX()>:
c0028742:	83 ec 0c             	sub    esp,0xc
c0028745:	83 ec 0c             	sub    esp,0xc
c0028748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002874c:	e8 cd ff ff ff       	call   c002871e <MMX::~MMX()>
c0028751:	83 c4 10             	add    esp,0x10
c0028754:	83 ec 08             	sub    esp,0x8
c0028757:	68 58 01 00 00       	push   0x158
c002875c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028760:	e8 a2 a0 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0028765:	83 c4 10             	add    esp,0x10
c0028768:	83 c4 0c             	add    esp,0xc
c002876b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002876c <SSE::~SSE()>:
c002876c:	83 ec 0c             	sub    esp,0xc
c002876f:	ba 38 c7 02 c0       	mov    edx,0xc002c738
c0028774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028778:	89 10                	mov    DWORD PTR [eax],edx
c002877a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877e:	83 ec 0c             	sub    esp,0xc
c0028781:	50                   	push   eax
c0028782:	e8 bf ba fe ff       	call   c0014246 <FPU::~FPU()>
c0028787:	83 c4 10             	add    esp,0x10
c002878a:	90                   	nop
c002878b:	83 c4 0c             	add    esp,0xc
c002878e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028790 <SSE::~SSE()>:
c0028790:	83 ec 0c             	sub    esp,0xc
c0028793:	83 ec 0c             	sub    esp,0xc
c0028796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002879a:	e8 cd ff ff ff       	call   c002876c <SSE::~SSE()>
c002879f:	83 c4 10             	add    esp,0x10
c00287a2:	83 ec 08             	sub    esp,0x8
c00287a5:	68 58 01 00 00       	push   0x158
c00287aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287ae:	e8 54 a0 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c00287b3:	83 c4 10             	add    esp,0x10
c00287b6:	83 c4 0c             	add    esp,0xc
c00287b9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00287ba <x87::~x87()>:
c00287ba:	83 ec 0c             	sub    esp,0xc
c00287bd:	ba 78 c7 02 c0       	mov    edx,0xc002c778
c00287c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c6:	89 10                	mov    DWORD PTR [eax],edx
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	83 ec 0c             	sub    esp,0xc
c00287cf:	50                   	push   eax
c00287d0:	e8 71 ba fe ff       	call   c0014246 <FPU::~FPU()>
c00287d5:	83 c4 10             	add    esp,0x10
c00287d8:	90                   	nop
c00287d9:	83 c4 0c             	add    esp,0xc
c00287dc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00287de <x87::~x87()>:
c00287de:	83 ec 0c             	sub    esp,0xc
c00287e1:	83 ec 0c             	sub    esp,0xc
c00287e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287e8:	e8 cd ff ff ff       	call   c00287ba <x87::~x87()>
c00287ed:	83 c4 10             	add    esp,0x10
c00287f0:	83 ec 08             	sub    esp,0x8
c00287f3:	68 58 01 00 00       	push   0x158
c00287f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287fc:	e8 06 a0 fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0028801:	83 c4 10             	add    esp,0x10
c0028804:	83 c4 0c             	add    esp,0xc
c0028807:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028808 <IOAPIC::~IOAPIC()>:
c0028808:	83 ec 0c             	sub    esp,0xc
c002880b:	ba d0 c8 02 c0       	mov    edx,0xc002c8d0
c0028810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028814:	89 10                	mov    DWORD PTR [eax],edx
c0028816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881a:	83 ec 0c             	sub    esp,0xc
c002881d:	50                   	push   eax
c002881e:	e8 bd b3 fe ff       	call   c0013be0 <Device::~Device()>
c0028823:	83 c4 10             	add    esp,0x10
c0028826:	90                   	nop
c0028827:	83 c4 0c             	add    esp,0xc
c002882a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002882c <IOAPIC::~IOAPIC()>:
c002882c:	83 ec 0c             	sub    esp,0xc
c002882f:	83 ec 0c             	sub    esp,0xc
c0028832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028836:	e8 cd ff ff ff       	call   c0028808 <IOAPIC::~IOAPIC()>
c002883b:	83 c4 10             	add    esp,0x10
c002883e:	83 ec 08             	sub    esp,0x8
c0028841:	68 68 01 00 00       	push   0x168
c0028846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002884a:	e8 b8 9f fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c002884f:	83 c4 10             	add    esp,0x10
c0028852:	83 c4 0c             	add    esp,0xc
c0028855:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028856 <APIC::~APIC()>:
c0028856:	83 ec 0c             	sub    esp,0xc
c0028859:	ba 88 c8 02 c0       	mov    edx,0xc002c888
c002885e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028862:	89 10                	mov    DWORD PTR [eax],edx
c0028864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028868:	83 ec 0c             	sub    esp,0xc
c002886b:	50                   	push   eax
c002886c:	e8 9f be fe ff       	call   c0014710 <InterruptController::~InterruptController()>
c0028871:	83 c4 10             	add    esp,0x10
c0028874:	90                   	nop
c0028875:	83 c4 0c             	add    esp,0xc
c0028878:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002887a <APIC::~APIC()>:
c002887a:	83 ec 0c             	sub    esp,0xc
c002887d:	83 ec 0c             	sub    esp,0xc
c0028880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028884:	e8 cd ff ff ff       	call   c0028856 <APIC::~APIC()>
c0028889:	83 c4 10             	add    esp,0x10
c002888c:	83 ec 08             	sub    esp,0x8
c002888f:	68 58 21 00 00       	push   0x2158
c0028894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028898:	e8 6a 9f fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c002889d:	83 c4 10             	add    esp,0x10
c00288a0:	83 c4 0c             	add    esp,0xc
c00288a3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00288a4 <PIC::~PIC()>:
c00288a4:	83 ec 0c             	sub    esp,0xc
c00288a7:	ba 20 c9 02 c0       	mov    edx,0xc002c920
c00288ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b0:	89 10                	mov    DWORD PTR [eax],edx
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	83 ec 0c             	sub    esp,0xc
c00288b9:	50                   	push   eax
c00288ba:	e8 51 be fe ff       	call   c0014710 <InterruptController::~InterruptController()>
c00288bf:	83 c4 10             	add    esp,0x10
c00288c2:	90                   	nop
c00288c3:	83 c4 0c             	add    esp,0xc
c00288c6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00288c8 <PIC::~PIC()>:
c00288c8:	83 ec 0c             	sub    esp,0xc
c00288cb:	83 ec 0c             	sub    esp,0xc
c00288ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288d2:	e8 cd ff ff ff       	call   c00288a4 <PIC::~PIC()>
c00288d7:	83 c4 10             	add    esp,0x10
c00288da:	83 ec 08             	sub    esp,0x8
c00288dd:	68 58 21 00 00       	push   0x2158
c00288e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288e6:	e8 1c 9f fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c00288eb:	83 c4 10             	add    esp,0x10
c00288ee:	83 c4 0c             	add    esp,0xc
c00288f1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00288f2 <APICTimer::~APICTimer()>:
c00288f2:	83 ec 0c             	sub    esp,0xc
c00288f5:	ba 74 c9 02 c0       	mov    edx,0xc002c974
c00288fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fe:	89 10                	mov    DWORD PTR [eax],edx
c0028900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028904:	83 ec 0c             	sub    esp,0xc
c0028907:	50                   	push   eax
c0028908:	e8 fb dc fe ff       	call   c0016608 <Timer::~Timer()>
c002890d:	83 c4 10             	add    esp,0x10
c0028910:	90                   	nop
c0028911:	83 c4 0c             	add    esp,0xc
c0028914:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028916 <APICTimer::~APICTimer()>:
c0028916:	83 ec 0c             	sub    esp,0xc
c0028919:	83 ec 0c             	sub    esp,0xc
c002891c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028920:	e8 cd ff ff ff       	call   c00288f2 <APICTimer::~APICTimer()>
c0028925:	83 c4 10             	add    esp,0x10
c0028928:	83 ec 08             	sub    esp,0x8
c002892b:	68 60 01 00 00       	push   0x160
c0028930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028934:	e8 ce 9e fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0028939:	83 c4 10             	add    esp,0x10
c002893c:	83 c4 0c             	add    esp,0xc
c002893f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028940 <PIT::~PIT()>:
c0028940:	83 ec 0c             	sub    esp,0xc
c0028943:	ba c4 c9 02 c0       	mov    edx,0xc002c9c4
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	89 10                	mov    DWORD PTR [eax],edx
c002894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028952:	83 ec 0c             	sub    esp,0xc
c0028955:	50                   	push   eax
c0028956:	e8 ad dc fe ff       	call   c0016608 <Timer::~Timer()>
c002895b:	83 c4 10             	add    esp,0x10
c002895e:	90                   	nop
c002895f:	83 c4 0c             	add    esp,0xc
c0028962:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028964 <PIT::~PIT()>:
c0028964:	83 ec 0c             	sub    esp,0xc
c0028967:	83 ec 0c             	sub    esp,0xc
c002896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002896e:	e8 cd ff ff ff       	call   c0028940 <PIT::~PIT()>
c0028973:	83 c4 10             	add    esp,0x10
c0028976:	83 ec 08             	sub    esp,0x8
c0028979:	68 5c 01 00 00       	push   0x15c
c002897e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028982:	e8 80 9e fe ff       	call   c0012807 <operator delete(void*, unsigned long)>
c0028987:	83 c4 10             	add    esp,0x10
c002898a:	83 c4 0c             	add    esp,0xc
c002898d:	c3                   	ret    
